#! : [no testing]

#  All the expressions available from a 28-May-2014 scan of regxlib.com

#U: http://regexlib.com/REDetails.aspx?regexp_id=1
#T: One Numeric Digit
#A: Steven Smith
#D: Matches exactly 1 numeric digit (0-9).
^\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2
#T: Five Integer US ZIP Code
#A: Steven Smith
#D: Matches 5 numeric digits, such as a zip code.
^\d{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3
#T: ZIP+4 - XXXXX-XXXX
#A: Steven Smith
#D: Numeric and hyphen 5+4 ZIP code match for ZIP+4.
^\d{5}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=4
#T: US ZIP (5 or 5+4)
#A: Steven Smith
#D: This regular expression will match either a 5 digit ZIP code or a ZIP+4 code formatted as 5 digits, a hyphen, and another 4 digits.  Other than that, this is just a really really long description of a regular expression that I'm using to test how my front page will look in the case where very long expression descriptions are used.
^\d{5}$|^\d{5}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=9
#A: Steven Smith
#D: This regular expression will match a hyphen-separated Social Security Number (SSN) in the format NNN-NN-NNNN.
^\d{3}-\d{2}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=10
#T: Any One US ASCII Letter
#A: Steven Smith
#D: Matches any single upper- or lower-case letter.
^[a-zA-Z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=11
#T: A string of any US ASCII letters
#A: Steven Smith
#D: Matches any string of only upper- and lower- case letters (no spaces).
^[a-zA-Z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=12
#T: Alphanumeric
#A: Steven Smith
#D: Matches any alphanumeric string (no spaces).
^[a-zA-Z0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=13
#T: Positive Integer
#A: Steven Smith
#D: Positive integer value.
^\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=14
#T: Signed Integer
#A: Steven Smith
#D: Matches any signed integer.
^(\+|-)?\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=15
#T: Strongish Password
#A: Steven Smith
#D: The password's first character must be a letter, it must contain at least 4 characters and no more than 15 characters and no characters other than letters, numbers and the underscore may be used
^[a-zA-Z]\w{3,14}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=16
#T: Email - Overly Simple
#A: Steven Smith
#D: Simple email expression.  Doesn't allow numbers in the domain name and doesn't allow for top level domains that are less than 2 or more than 3 letters (which is fine until they allow more).  Doesn't handle multiple "." in the domain (joe@abc.co.uk).
^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=17
#T: Date With Slashes
#A: Steven Smith
#D: This regular expressions matches dates of the form XX/XX/YYYY where XX can be 1 or 2 digits long and YYYY is always 4 digits long.
^\d{1,2}\/\d{1,2}\/\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=19
#A: Steven Smith
#D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[12345]$.
^[1-5]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=20
#A: Steven Smith
#D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[1-5]$. 
^[12345]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=21
#A: Steven Smith
#D: This expression matches email addresses, and checks that they are of the proper form.  It checks to ensure the top level domain is between 2 and 4 characters long, but does not check the specific domain against a list (especially since there are so many of them now).
^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=22
#A: Steven Smith
#D: This expression matches a hyphen separated US phone number, of the form ANN-NNN-NNNN, where A is between 2 and 9 and N is between 0 and 9.
^[2-9]\d{2}-\d{3}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=23
#A: Steven Smith
#D: This expression matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code.  The first one must be 5 numeric digits.  The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits.  The Canadian postal code must be of the form ANA NAN where A is any uppercase alphabetic character and N is a numeric digit from 0 to 9.
^\d{5}-\d{4}|\d{5}|[A-Z]\d[A-Z] \d[A-Z]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=25
#A: G. Andrew Duthie
#D: Domain names:
#D: This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in .com, .org, .net, .mil, or .edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.
^[a-zA-Z0-9\-\.]+\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=26
#A: Andy Smith
#D: Email validator that adheres directly to the specification for email address naming. It allows for everything from ipaddress and country-code domains, to very rare characters in the username.
^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=27
#A: Steven Smith
#D: US Phone Number -- doesn't check to see if first digit is legal (not a 0 or 1).
((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=28
#A: Steven Smith
#D: Yet another simple email validator expression.
[\w-]+@([\w-]+\.)+[\w-]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=29
#A: Steven Smith
#D: Major credit card validator.  Only checks that the format is 16 digits (optionally separated by hyphens), not the value of any of the digits.
\d{4}-?\d{4}-?\d{4}-?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=30
#A: Steven Smith
#D: Password expression.  Password must be between 4 and 8 digits long and include at least one numeric digit.
^(?=.*\d).{4,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=31
#T: Password Validator - 3 of 4 groups - w/VBS bugfix
#A: Jeff Fendley
(?=^[\da-zA-Z!@#$%]{4,20}$)((?=.*[\d])(?=.*[a-z])(?=.*[A-Z)|(?=.*[\d])(?=.*[a-z])(?=.*[!@#$%])|(?=.*[\d])(?=.*[A-Z)(?=.*[!@#$%])|(?=.*[a-z])(?=.*[A-Z)(?=.*[!@#$%]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=32
#A: G. Andrew Duthie
#D: RegExp for validating the format of IP Addresses. This works great with the ASP.NET RegularExpressionValidator server control.
^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=33
#A: Steven Smith
#D: This expression uses a BackReference to find occurrences of the same word twice in a row (separated by a space).
#D: Matches things like 'mandate dated', which may not be desirable.  See Sean Carley's update for a better expression for true repeated word matching.
(\w+)\s+\1

#U: http://regexlib.com/REDetails.aspx?regexp_id=34
#A: Samuel Mota
#D: Match diferent styles for brazilian Phone number code.
#D: Only DDD (12), complete DDD (012), complete DDD + Telephony Company (0xx12) plus 3 or 4 digits (city code) plus 4 digits (phone number).
\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=35
#A: Eric Lebetsamer
#D: Email validation.  With this short expression you can validate for proper email format.  It's short and accurate.
^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=36
#A: Chris Craft
#D: Tests for valid HTML hexadecimal color codes. The # symbol is optional. And it will except either the 3 digit form for the 216 Web safe colors, or the full 6 digit form. I am use it on my site to allow users to customize the site's colors.
^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=37
#A: Justin Saunders
#D: Regular Expression matches any internet URLs. Used with the replace method it comes in very handy.
((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=38
#A: Peter Whyte
#D: Matches UK postcodes according to the following rules 1. LN NLL eg N1 1AA 2. LLN NLL eg SW4 0QL 3. LNN NLL eg M23 4PJ 4. LLNN NLL eg WS14 0JT 5. LLNL NLL eg SW1N 4TB 6. LNL NLL eg W1C 8LQ. Modifications: 1) Doesn't allow leading zeros in first part (outward) eg BT01 3RT is incorrect; it should be BT1 3RT. 2) Only allows uppercase letters, which is the preference of the UK Post Office. 3) Permits the only postcode to break the rules - GIR 0AA (for the old Girobank, now Alliance & Leicester bank, address)
^[A-Z]{1,2}[1-9][0-9]?[A-Z]? [0-9][A-Z]{2,}|GIR 0AA$

#U: http://regexlib.com/REDetails.aspx?regexp_id=39
#A: Gregory Beamer
#D: Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the .COM section.
^[\w\.=-]+@[\w\.-]+\.[\w]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=40
#A: Chris Craft
#D: If you need to extract or remove any /* */ sytle comments from any Java, JavaScript, C, C++, CSS, etc code you have this regular expression can help.
\*[\d\D]*?\*

#U: http://regexlib.com/REDetails.aspx?regexp_id=41
#A: Bob Levittan
#D: Validates a dollar amount including a dollar sign and 2 decmals. The decimal and cents are optional.
^\$[0-9]+(\.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=42
#A: Sean Schricker
#D: Most Concise RegExp for matching Decimal IPs.  If nothing else, it'll make your code easier to read.  (And I know that \d?\d is \d{1,2} but that's 2 extra characters.)
#D: --Update: darkone noticed 8 characters could be shaved down. I've edited it to reflect this. Thanks, darkone!
\b(([01]?\d?\d|2[0-4]\d|25[0-5])\.){3}([01]?\d?\d|2[0-4]\d|25[0-5])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=43
#A: Chris Craft
#D: "Be careful when opening or creating files by using Scripting File System Object. If the filename is based on the user's input, the user might attempt to open a serial port or printer."
(AUX|PRN|NUL|COM\d|LPT\d)+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=44
#A: Michael Scovetta
#D: This re was used for a security routine. The format is:
#D: [user=name1,name2,...,nameN;][group=group1,group2,...,groupN;][level=number;]
#D: Each component is optional, but they must appear the in order listed if applicable.
^(user=([a-z0-9]+,)*(([a-z0-9]+){1});)?(group=([a-z0-9]+,)*(([a-z0-9]+){1});)?(level=[0-9]+;)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=45
#A: Laurence O'Donnell
#D: This RegEx requires a US phone number WITH area code. It is written to all users to enter whatever delimiters they want or no delimiters at all (i.e. 111-222-3333, or 111.222.3333, or (111) 222-3333, or 1112223333, etc...).
^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=46
#A: Laurence O'Donnell
#D: This pattern allows standard e-mail addresses (e.g. user@domain.com), sub domains (e.g. user@foo.domain.com), the new two- and four-letter domains (e.g. user@domain.tv and user@domain.name) and country codes (e.g. user@foo.com.us). Also, this patter follows the Network Solutions standard length of 67 characters for top-level domains. The reason I allow numbers to be entered in the domain suffix is for future planning. If you do not want numbers to be able to be added as a domain suffix (e.g. user@domain.123), simply delete the last two occurrences of "\d".
^([\w\d\-\.]+)@{1}(([\w\d\-]{1,67})|([\w\d\-]+\.[\w\d\-]{1,67}))\.(([a-zA-Z\d]{2,4})(\.[a-zA-Z\d]{2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=47
#A: Mr M
#D: Validate a string to see if it contains a number / integer
^[0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=48
#A: Steven Smith
#D: Credit card validator.  Just checks that the format is either 16 numbers in groups of four separated by a "-" or a " " or nothing at all.
^(\d{4}[- ]){3}\d{4}|\d{16}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=49
#A: Steven Smith
#D: Matches major credit cards including:
#D: Visa (length 16, prefix 4), Mastercard (length 16, prefix 51-55), Discover (length 16, prefix 6011), American Express (length 15, prefix 34 or 37).  All 16 digit formats accept optional hyphens (-) between each group of four digits. 
^((4\d{3})|(5[1-5]\d{2})|(6011))-?\d{4}-?\d{4}-?\d{4}|3[4,7]\d{13}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=50
#A: Steven Smith
#D: Matches any string between 4 and 8 characters in length.  Limits the length of a string.  Useful to add to password regular expressions.
^.{4,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=51
#A: Steven Smith
#D: Accepts an unsigned integer number.  Also matches empty strings.
^\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=52
#A: Steven Smith
#D: Matches any integer number or numeric string, including positive and negative value characters (+ or -).  Also matches empty strings.
^[-+]?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=53
#A: Steven Smith
#D: Matches any unsigned floating point number/numeric string.  Also matches empty strings.
^\d*\.?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=54
#A: Steven Smith
#D: Matches any floating point numer/numeric string, including optional sign character (+ or -).  Also matches empty strings.
^[-+]?\d*\.?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=55
#A: James Bray
#D: GUID Tester. It tests SQL Server GUIDs, which are alphanumeric characters grouped 8-4-4-4-12 (with the dashes). Make sure they don't have the brackets around them before you check them and have fun!
^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=56
#A: Prasad DV
#D: Validates an email address
(\w+?@\w+?\x2E.+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=57
#A: Prasad DV
#D: Plucks the last quote of a Stock from the MSN MoneyCentral WebQuote page for any given stock symbol. The URL of the web page where this RegEx should be applied is:
#D: http://localhost/asp/webquote.htm?ipage=qd&Symbol=,give the stock symbol here> You must also use the singleline option.
Last.*?(\d+.?\d*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=58
#A: Igor Kravtsov
#D: Matches US phone number format. 1 in the beginning is optional, area code is required, spaces or dashes can be used as optional divider between number groups. Also alphanumeric format is allowed after area code.
^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=59
#A: Koen Hoorelbeke
#D: Matches a string if it is a valid time in the format of HH:MM
^([0-1][0-9]|[2][0-3]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=60
#T: Date validation US format
#A: Black Cloud
#D: MM/DD/YYYY
#D: Year from 1990-9999
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=60
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">12/31/2012 <span class='separator'>|</span> 12/0/2012 <span class='separator'>|</span> 2/31/2012
^(([1][0-2])|([0]?[1-9]{1}))\/(([0-2]?\d{1})|([3][0,1]{1}))\/(([1]{1}[9]{1}[9]{1}\d{1})|([2-9]{1}\d{3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=61
#A: Mart Maasikas
#D: US Phone number that accept a dot, a space, a dash, a forward slash, between the numbers. Will Accept a 1 or 0 in front.  Area Code not necessary
((\(\d{3}\)?)|(\d{3}))([\s-./]?)(\d{3})([\s-./]?)(\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=62
#A: Mart Maasikas
#D: Any Expression Upper/Lower Case, with commas and space between the text, with any amount of space before or after
^\s*[a-zA-Z,\s]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=63
#A: Mart Maasikas
#D: ANY alphanumeric string with spaces, commas, dashes.
^[a-zA-Z0-9\s.\-]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=64
#A: Ryan S
#D: This can be used in conjunction with the replace method to provide pseudo-code support without having to enable HTML. The replacement string (in ASP.NET, use RegExp.Replace(SourceString, RegularExpressionPattern, ReplacementString) is <a href="${link}">${text}</a>.
\[link="(?<link>((.|\n)*?))"\](?<text>((.|\n)*?))\[\/link\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=65
#A: Roland Mensenkamp
#D: Dutch zip code expression
#D: 4 numbers - space yes/no - 2 letters
[0-9]{4}\s*[a-zA-Z]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=66
#A: Bill Hely
#D: Australian phone numbers: Matches all known formats incl normal 10-digit landline numbers (valid area code mandatory) 13, 1300, 1800, 1900, 1902 plus mobile 10 and 11-digit formats. Use a Replace function first to remove non-numerics which are probably separators (E.g. newNum = number.replace(/[\D]/g, "").  Please contact me if you find any valid Aussie numbers being rejected.
(^1300\d{6}$)|(^1800|1900|1902\d{6}$)|(^0[2|3|7|8]{1}[0-9]{8}$)|(^13\d{4}$)|(^04\d{2,3}\d{6}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=67
#A: Chris Love
#D: This provides an expression to calidate the four major credit cards.  It can be easily broken up to use for a specific type of card.  It does not validate the number being a potential real number, only in the correct format.
(^(4|5)\d{3}-?\d{4}-?\d{4}-?\d{4}|(4|5)\d{15})|(^(6011)-?\d{4}-?\d{4}-?\d{4}|(6011)-?\d{12})|(^((3\d{3}))-\d{6}-\d{5}|^((3\d{14})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=68
#A: Scott Frampton
#D: This regular expression matches 'Switch' card numbers - a payment method used extensively in the UK.
^([0-9]{6}[\s\-]{1}[0-9]{12}|[0-9]{18})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=69
#A: Chris Becker
#D: Matches U.S. dates with leading zeros and without and with 2 or four digit years
^(([1-9])|(0[1-9])|(1[0-2]))\/((0[1-9])|([1-31]))\/((\d{2})|(\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=70
#A: Al Kahler
^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(\.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=71
#A: Andrew Lader
#D: This matches simple dates against 1 or 2 digits for the month, 1 or 2 digit for the day, and either 2 or 4 digits for the year 
((\d{2})|(\d))\/((\d{2})|(\d))\/((\d{4})|(\d{2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=73
#A: Dmitry Kandiner
#D: International phone number check - optional country code followed by area code surrounded with '-' or '(' and ')', or just an area code optionally starting with 0, followed by phone numder. The number itself may contain spaces and '-'
^(\+[1-9][0-9]*(\([0-9]*\)|-[0-9]*-))?[0]?[1-9][0-9\- ]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=74
#A: Blake Facey
#D: Matches standard 5 digit US Zip Codes, or the US ZIP + 4 Standard.
^\d{5}(-\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=75
#A: Jon van Leuven
#D: Regular expression to evaluate dutch-style phone numbers. Possible example prefixes: +31, +31(0), (+31)(0), 0, 0031
#D: followed by 9 numbers (which can contain a space or -).
(^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=76
#A: Jon van Leuven
#D: Regular expression to evaluate dutch zipcodes. This is an updated version of Roland Mensenkamp.
^[0-9]{4}\s{0,1}[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=77
#A: David Good
#D: Will match the following date formats: Preceded by a Space, Left-parentheses, or at the beginning of a line.  Followed by a Space, Right-parentheses, or Colon(:), word boundary or End of line.  Can have / or - as separator.  Accepts 2 digit year 00-99 or 4 digit years 1900-2099 (can modify to accept any range)
(^|\s|\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:])|(^|\s|\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:|$|\>])){1}){1}){1}){1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=78
#A: Sean Carley
#D: Uses backreferences and word boundaries to match repeated words seperated by whitespace without matching a word with the same ending as the next words beginning.
\b(\w+)\s+\1\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=79
#A: Steven Smith
#D: A very simple ISBN validation expression - it just checks for a 10 digit number where the last digit could also be a capital 'X'.  Complete specs for ISBN available here:
#D: http://www.isbn.org/standards/home/isbn/international/html/usm4.htm.  An enhancement would be to allow exactly 3 or 0 hyphens or 3 or 0 spaces, since these are also valid formats.
^\d{9}[\d|X]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=80
#A: Scott Thompson
#D: Dates
#D: day: d or dd, <= 31,
#D: month: m or mm, <= 12,
#D: year: yy or yyyy >= 1900, <= 2099
^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=81
#A: Robert Brame
#D: To check for a month / year (mm/yy) combination similar to that used for credit card transactions. Optional leading zero. Since only 2 digit year (as on credit cards) limited to 2099 - but will we have credit cards after that?
^((0?[1-9])|(1[0-2]))\/(([0-9][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=82
#A: narsi v
#D: This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok !!
^\d*\.?((25)|(50)|(5)|(75)|(0)|(00))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=83
#A: Tommy Ullberg
#D: Validates swedish zipcodes (postnr) with or without space between groups. With leading s- or not. Can be disconnected by removing ''(s-|S-){0,1}''.
^(s-|S-){0,1}[0-9]{3}\s?[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=84
#A: Brad Williams
#D: improved date validation M/D/YY or M/D/YYYY or MM/DD/YYYY or MM/DD/YY: 1/1/1920 through 12/31/2019; Feb 29 and 30 always allowed, deal with it
^((0?[13578]|10|12)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1}))|(0?[2469]|11)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=85
#A: Andre Van Der Merwe
#D: Checks for a valid windows file name (Must be used with the case-insensitive option
#D: Checks that the file has at lease one char, does not contain any invalid characters and does not have a reserved word as a file name.
#D: "If you see a " in the regex replace it with a " character"
^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*:\";|/]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=86
#A: Marc-Antoine Latour
#D: Match any image insert in a tag .
#D: simply replace the .jpg in the pattern whit a variable of content type ex:.swf,.js,.gif and loop the pattern to retrieve all tag whit the contenttype pass trought....
#D: Very useful when you have people uploading html document in your site and you want to retrieve all dependecy.
<[^>]*\n?.*=("|')?(.*\.jpg)("|')?.*\n?[^<]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=87
#A: Khoi Pham
#D: This is a modification of the zip code regular expression submitted by Steven Smith (ssmith@aspalliance.com)
#D: It no longer matches 78754-12aA
^(\d{5}-\d{4}|\d{5})$|^([a-zA-Z]\d[a-zA-Z] \d[a-zA-Z]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=88
#A: David Lott
#D: Expression 1 of 2 used to check email address syntax.
^([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=89
#A: David Lott
#D: Expression 2 or 2 for matching email address syntax. This one matches the <angle bracket syntax>.
^(([-\w \.]+)|(""[-\w \.]+"") )?<([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))>$

#U: http://regexlib.com/REDetails.aspx?regexp_id=90
#A: Klaxon Mindjammer
#D: Verifies URLs.  Checks for the leading protocol, a good looking domain (two or three letter TLD; no invalid characters in domain) and a somwhat reasonable file path.
^http\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=91
#A: Santosh Potadar
#D: This regular expression can be used to validate UK postcodes. Especially useful if want to provide a client side validation on a web site.
^[A-Za-z]{1,2}[0-9A-Za-z]{1,2}[ ]?[0-9]{0,1}[A-Za-z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=92
#A: Peter Whyte
#D: UK National Insurance Number (NINO) validation. (The following modifications have been made: Only A to D are permitted as the last letter, and all letters should be in uppercase. For temporary numbers F and M are permitted for female and male holders.)
^[A-Z]{2}[0-9]{6}[A-DFM]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=93
#A: Peter Pfeifer
#D: Sql date format tester. 
20\d{2}(-|\/)((0[1-9])|(1[0-2]))(-|\/)((0[1-9])|([1-2][0-9])|(3[0-1]))(T|\s)(([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=94
#A: Bob Bob
#D: 
^[a-zA-Z ]+$ | [^0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=95
#A: Rex Po
#D: - validates a yyyy-mm-dd, yyyy mm dd, or yyyy/mm/dd date
#D: - makes sure day is within valid range for the month
#D: - does NOT validate Feb. 29 on a leap year, only that Feb. CAN have 29 days
^\d{4}[\-\/\s]?((((0[13578])|(1[02]))[\-\/\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\s]?(([0-2][0-9])|(30)))|(02[\-\/\s]?[0-2][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=96
#T: URL with named groups
#A: Brad Williams
(?<protocol>(http|ftp|https|ftps):\/\/)?(?<site>[\w\-_\.]+\.(?<tld>([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|arpa|asia|coop|info|jobs|mobi|museum|name|travel))+(?<port>:[0-9]+)?\/?)((?<resource>[\w\-\.,@^%:/~\+#]*[\w\-\@^%/~\+#])(?<queryString>(\?[a-zA-Z0-9\[\]\-\._+%\$#\~',]*=[a-zA-Z0-9\[\]\-\._+%\$#\~',]*)+(&[a-zA-Z0-9\[\]\-\._+%\$#\~',]*=[a-zA-Z0-9\[\]\-\._+%\$#\~',]*)*)?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=97
#A: jay gann
#D: US Telephone Reg expression that allows 7, 10 or 11 digits with or without hyphens.
^(1?(-?\d{3})-?)?(\d{3})(-?\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=98
#A: Andrew Freese
#D: This RX is used to find get all named tags in an html string. If you find a problem with it, please email drew@lordstrange.com
<[^>]*name[\s]*=[\s]*"?[^\w_]*"?[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=99
#A: Jim Compton
#D: Validate time as h:mm AM/PM
^(1|01|2|02|3|03|4|04|5|05|6|06|7|07|8|08|9|09|10|11|12{1,2}):(([0-5]{1}[0-9]{1}\s{0,1})([AM|PM|am|pm]{2,2}))\W{0}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=100
#A: Glenn Carr
#D: This just a minor mod to Steven Smith's credit card re to accept spaces as separators, as well as return the four parts of the card.  [Updated Oct-18-2002 to work with Diners Club/Carte Blanche (prefix must be 36, 38, or 300-305)]
^((?:4\d{3})|(?:5[1-5]\d{2})|(?:6011)|(?:3[68]\d{2})|(?:30[012345]\d))[ -]?(\d{4})[ -]?(\d{4})[ -]?(\d{4}|3[4,7]\d{13})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=101
#A: vinod kumar
#D: This RegEx will help to validate a physical file path with a specific file extension (here xls)
([a-zA-Z]:(\\w+)*\\[a-zA-Z0_9]+)?.xls

#U: http://regexlib.com/REDetails.aspx?regexp_id=102
#A: Steven Smith
#D: This regular expression will match a 24 hour time with no separators.
^(20|21|22|23|[0-1]\d)[0-5]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=103
#A: Steven Smith
#D: Matches a 12-hour time value expressed as either 4 numeric digits, 3 numeric digits, or a space and 3 numeric digits.  3 digit times (930) can be expressed with leading 0's (0930) or not.  AM/PM designation is not included in this expression.
^( [1-9]|[1-9]|0[1-9]|10|11|12)[0-5]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=104
#A: Mike Hensley
#D: Accepts 1-2 digits followed by a slash followed by 2-4 digits.  Useful for numeric month/year entry.
^\d{1,2}\/\d{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=105
#A: Steven Smith
#D: This expression matches dates formatted as MM/DD/YYYY where months and days must be 2 digits each, zero padded.  It is not perfect - it allows DD to be from 01 to 31 regardless of the month.
^(|(0[1-9])|(1[0-2]))\/((0[1-9])|(1\d)|(2\d)|(3[0-1]))\/((\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=106
#A: Steven Smith
#D: Date expressions that matches MM/DD/YYYY where MM and DD must be two digits and zero padded.  Validates correctly for all months except February, which it assumes to always have 29 days.  The "/" separator is optional.
^((((0[13578])|(1[02]))[\/]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\/]?(([0-2][0-9])|(30)))|(02[\/]?[0-2][0-9]))[\/]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=107
#A: Dalibor Kalna
#D: This regex match numeric data in the following format: thousands are separated by (') apostrophe, decimal places are separated by dot (.) Maximum three decimal places are not required. It's easy to change to other separators as well.
^(\d{1,3}'(\d{3}')*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=108
#A: Dalibor Kalna
#D: Fully functional date validator in format dd.MM.yyyy
#D: Works only within range of years 2000-2099 !
#D: It allows leading zeros but does not require them. The last year pattern (enumeration) is not very clever but I will improve it, if needed.
^((0?[1-9]|[12][1-9]|3[01])\.(0?[13578]|1[02])\.20[0-9]{2}|(0?[1-9]|[12][1-9]|30)\.(0?[13456789]|1[012])\.20[0-9]{2}|(0?[1-9]|1[1-9]|2[0-8])\.(0?[123456789]|1[012])\.20[0-9]{2}|(0?[1-9]|[12][1-9])\.(0?[123456789]|1[012])\.20(00|04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=109
#A: Josh Bailyr
#D: This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003.  It can easily be adapted for different date ranges.  It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003.  The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month.  An example of an invalid date that it would allow to pass through would be 11/31/2002.  This date is invalid because 11/31 of any year does not exist, but this expression would allow it pass through since the day part is in the range 01-31.
#D: This regular expression has been used successfully in ASP with VBScript using the windows scripting library RegExp object.
^(0[1-9]|1[0-2])\/((0[1-9]|2\d)|3[0-1])\/(19\d\d|200[0-3])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=110
#A: Scott Watermasysk Watermasysk
#D: This expression can be used validate a datetime column from SQL Server. Big parts of it where taken from other samples on RegexLib. Please feel free to take it apart and improve it.
^((((([13578])|(1[0-2]))[\-\/\s]?(([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?(([1-9])|([1-2][0-9])|(30)))|(2[\-\/\s]?(([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s((([1-9])|(1[02]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=111
#A: anup kallingal
#D: This can be used to match indian style pincodes / postal codes used by the indian postal departments which are 6 digits long and may have space after the 3rd digit
^\d{3}\s?\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=113
#T: M/d/y Date
#A: Michael Ash
#D: This expression validates dates in the US m/d/y format from 1/1/1600 - 12/31/9999.
^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=114
#A: Jason West
#D: My meager attempt at a date validator with leap years using a strict mm/dd/yyyy format.
(((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|11)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2[0-8])([-./])(\d{4}))|((2)(\.|-|\/)(29)([-./])([02468][048]00))|((2)([-./])(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=
#A: Frederico Knabben
#D: Use it for breaking-down a URI (URL, URN) reference into its main components: Scheme, Authority, Path, Query and Fragment.
#D: This is not a simple match regular expression. so it not works to verify a URI. It returns 1 matching group for each URI component.
#D: For example, for the following URI:
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=
#D: This is a W3C raccomandation (RFC 2396).
^(?=[^&])(?:(?<scheme>[^:/?#]+):)?(?://(?<authority>[^/?#]*))?(?<path>[^?#]*)(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=116
#A: Bill Anderson
#D: US Telephone Number where this is regular expression excludes the first number, after the area code,from being 0 or 1; it also allows an extension
#D: to be added where it does not have to be prefixed by 'x'.
^[\\(]{0,1}([0-9]){3}[\\)]{0,1}[ ]?([^0-1]){1}([0-9]){2}[ ]?[-]?[ ]?([0-9]){4}[ ]*((x){0,1}([0-9]){1,5}){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=117
#A: Steven Smith
#D: This matches any real number, with optional decimal point and numbers after the decimal, and optional positive (+) or negative (-) designation.
^[-+]?\d+(\.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=118
#A: Qing Jiang
#D: Match Canadia Zip Code. You can have a space in the middle Like T2P 3C7, or no space like T2P3C7
^[a-zA-Z][0-9][a-zA-Z]\s?[0-9][a-zA-Z][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=122
#A: Qing Jiang
#D: This expression matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code. The first one must be 5 numeric digits. The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits. The Canadian postal code must be of the form ANA NAN where A is any uppercase alphabetic character and N is a numeric digit from 0 to 9.  
^((\d{5}-\d{4})|(\d{5})|([A-Z]\d[A-Z]\s\d[A-Z]\d))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=123
#A: Daniel Hou
#D: 
(a|b|c).(a.b)*.b+.c

#U: http://regexlib.com/REDetails.aspx?regexp_id=124
#A: Alessandro Vergani
#D: Matches quoted string, using \" as an escape to place quotes in the string
"((\\")|[^"(\\")])+"

#U: http://regexlib.com/REDetails.aspx?regexp_id=125
#A: Carlos Nascimento
#D: Matches standard 5 digit Brazilian Postal Codes (CEP), or the CEP + 3 digits (distribution identifiers - suffix).
#D: For more info refer to: http://www.correios.com.br/servicos/cep/Estrutura_CEP.cfm (in portuguese).
^\d{5}(-\d{3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=126
#T: US currency
#A: Michael Ash
#D: This re matches US currency format with lead dollar sign. Dollar value must have at least one digit and may or may not be comma separated. Cents value is optional.
^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=127
#A: Alban Schmid
#D: This regular expression pattern can be used to check the validity of paths for file upload controls. The uploaded file can be either stored locally or accessible through UNC. It cannot contain illegal characters for the windows OS - that may be supported e.g. on Mac OS – and cannot be a URL (Yes, as weird as it may seem, some users enter URLs in the file upload box, even though there is a browse button...)
([A-Z]:\\[^/:\*\?<>\|]+\.\w{2,6})|(\\{2}[^/:\*\?<>\|]+\.\w{2,6})

#U: http://regexlib.com/REDetails.aspx?regexp_id=128
#T:  Roman numerials
#A: Michael Ash
#D: This RE validates alpha characters that evaluate to Roman numerials, ranging from 1(I) - 3999(MMMCMXCIX). Not case sensitive.
^(?i:(?=[MDCLXVI])((M{0,3})((C[DM])|(D?C{0,3}))?((X[LC])|(L?XX{0,2})|L)?((I[VX])|(V?(II{0,2}))|V)?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=129
#A: Nacho Varas
#D: Matches a string if it is a valid time in the format of HH:MM / H:MM / HH / H
(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=131
#A: Daniel Repaci
#D: To evaluate an amount with or without a dollar sign where the cents are optional.
^\$?\d+(\.(\d{2}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=132
#A: Andrew Balaschak
#D: Fromat check for MM/YY, checks month is 1-12 and any 2 digit year.
((0[1-9])|(1[02]))/\d{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=133
#A: Tom Svensson
#D: Will match a VBScript string and/or comment
#D: Ex:
#D: ' userinfo
#D: strUsername = "tomsve"
#D: iAge = 20
#D: ' temp
#D: strPassword = "halloj"
#D: ...Would result in the following matches:
#D: ' userinfo
#D: "tomsve"
#D: ' temp
#D: "halloj"
#D: Good luck!
#D: Tom S. info@tomsvensson.com
("[^"]*")|('[^\r]*)(\r\n)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=134
#A: V. Lorz
#D: GUID Tester.
#D: This is a modification from the regular expression submitted by James Bray (james@jamesbray.com). It allows the use of mixed upper and lowercase letters in the GUID string.
^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=135
#A: Rafael Miranda
#D: A simple expression to brazilian phone number code, with international code.
#D: Simple DDI without "+" 99 plus simple DDD (99) plus simple local phone number 3 or 4 digits plus "-" plus 4 digits.
^([0-9]{2})?(\([0-9]{2})\)([0-9]{3}|[0-9]{4})-[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=136
#A: Rafael Miranda
#D: Other expression to standard 5 digit Brazilian Postal Codes (CEP), or the CEP + 3 digits (distribution identifiers - suffix).
#D: The diference of the original one, is that the "." is mandatory.
^\d{2}(\x2e)(\d{3})(-\d{3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=137
#T: Text Extension
#A: Michael Ash
#D: This RE validates a path/file of type txt (text file)
#D: This RE can be used as a filter on certain file types, while insuring the entire string is a fully qualified path and file. The filter value can be changed or added to as you need
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*))+\.(txt|TXT)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=138
#A: Stewart Haddock
#D: Checks domain names.  This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.) and hypens(-).
^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=139
#A: Srinivas Gummadi
#D: This matches floating point expression in a more rigorous way - accepts both exponent as well as non exponent notations.
^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=140
#A: David Huyck
#D: Matches e-mail addresses, including some of the newer top-level-domain extensions, such as info, museum, name, etc.  Also allows for emails tied directly to IP addresses.
^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=141
#A: Zahir Jacobs
#D: checks for valid South African cellular numbers
(^0[78][2347][0-9]{7})

#U: http://regexlib.com/REDetails.aspx?regexp_id=142
#A: Rambabu Tummala
#D: This checks for the specific syntax ((A,((b,c,d),(e,f,g))), ..).  No limit on number of occurances.
(^\(\)$|^\(((\([0-9]+,(\((\([0-9]+,[0-9]+,[0-9]+\),)*(\([0-9]+,[0-9]+,[0-9]+\)){1}\))+\),)*(\([0-9]+,(\((\([0-9]+,[0-9]+,[0-9]+\),)*(\([0-9]+,[0-9]+,[0-9]+\)){1}\))+\)){1}\)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=143
#A: Robert Dugre
#D: Person's name (first, last, or both) in any letter case.  Although not perfect, this expression will filter out many incorrect name formats (especially numerics and invalid special characters).
^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=144
#A: Steve Valaitis
#D: Matches times seperated by either : or . will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.
^((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=145
#A: Sonal Bordia
#D: Alphanumeric, hyphen apostrophe, comma dash spaces
^[a-zA-Z0-9\s.\-_']+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=146
#A: Brandon Luhring
#D: Modified URL RegExp that requires (http, https, ftp)://, A nice domain, and a decent file/folder string. Allows : after domain name, and these characters in the file/folder sring (letter, numbers, - . _ ? , ' / \ + & % $ # = ~). Blocks all other special characters-good for protecting against user input!
^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=147
#A: Gabriel Garcia
#D: Codigos Postales Argentinos (CPA)
#D: This expression defines the new zip code format for Argentina.
^([A-HJ-TP-Z]{1}\d{4}[A-Z]{3}|[a-z]{1}\d{4}[a-hj-tp-z]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=148
#A: Todd Krabach
#D: Updated to exclude 127/8
^(((25[0-5]|2[0-4][0-9]|19[0-1]|19[3-9]|18[0-9]|17[0-1]|17[3-9]|1[3-6][0-9]|12[8-9]|12[0-6]|1[0-1][0-9]|1[1-9]|[2-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9]))|(192\.(25[0-5]|2[0-4][0-9]|16[0-7]|169|1[0-5][0-9]|1[7-9][0-9]|[1-9][0-9]|[0-9]))|(172\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|1[0-5]|3[2-9]|[4-9][0-9]|[0-9])))\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=149
#A: Theo Tillotson
#D: Used as a username validation script requires:
#D: 1. Allows All Alphanumeric characters & underscore
#D: 2. Allows One "@" character
#D: 3. Allows Five "." periods
#D: 4. Rejects spaces
[^A-Za-z0-9_@\.]|@{2,}|\.{5,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=150
#A: Aleksandar Boros
#D: This regular expressions matches any HTML remark.
<!--[ ]*[ \w\S\s]*-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=151
#A: Marco Storti
#D: This expression validates dates in the ITALIAN d/m/y format from 1/1/1600 - 31/12/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00 since it could be any century (1900, 2000, 2100). Days and months must be 1 or 2 digits and may have leading zeros. Years must be 2 or 4 digit years. 4 digit years must be between 1600 and 9999. Date separator may be a slash (/), dash (-), or period (.)
#D: Thanks to Michael Ash for US Version
^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=152
#A: Jaime Borges
#D: This regular expression validates that the data entered is a number with a maximum of two integers and two decimals and a minimum of one integer or one decimal.
^\d{0,2}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=153
#A: Michael Krutwig
#D: This Regex (can be used e.g. in PHP with eregi) will match any valid URL. Unlike the other exapmles here, it will NOT match a valid URL ending with a dot or bracket. This is important if you use this regex to find and "activate" Links in an Text
^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*[^\.\,\)\(\s]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=154
#A: Ted Rudyk
#D: This will grep for a valid MAC address , with colons seperating octets. It will ignore strings too short or long, or with invalid characters.  It will accept mixed case hexadecimal. Use extended grep.
^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=155
#A: Samir AZZA
#D: Percentage with 3 number after comma.
^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=156
#A: Samir AZZA
#D: Correct French DateTime(DD/MM/YYYY OR DD/MM/YYYY HH:MM:SS)
^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=157
#A: Jeremy Samuel
#D: Password expresion that requires one lower case letter, one upper case letter, one digit, 6-13 length, and no spaces. This is merely an extension of a previously posted expression by Steven Smith (ssmith@aspalliance.com) . The no spaces is new.
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{4,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=158
#A: Nathan Pitts
#D: Host/Domain name validation for perl.
#D: Should be combined with a check for
#D: length <= 63 characters and that $2
#D: is in a list of top-level domains.
^([a-zA-Z0-9][-a-zA-Z0-9]*[a-zA-Z0-9]\.)+([a-zA-Z0-9]{3,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=159
#A: Peter Friese
#D: This one matches all strings that do not contain the single quotation mark (').
^[^']*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=160
#A: K Thompson
#D: This validates a number between 1 and 255. Could be modified to IP, or just to verify a number in a range.
^([1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=161
#A: Benjamin Gray
#D: Using other regular experssions from this page, combining others for email addresses, and mixing in my own ideas - I came up with this regular expression.  Can be used to validate input into a database.
^((https?|ftp)\://((\[?(\d{1,3}\.){3}\d{1,3}\]?)|(([-a-zA-Z0-9]+\.)+[a-zA-Z]{2,4}))(\:\d+)?(/[-a-zA-Z0-9._?,'+&%$#=~\\]+)*/?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=162
#A: Snikwad Kcirtap
#D: matches non-negative decimal floating points numbers less than 10
^[0-9](\.[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=163
#A: Snikwad Kcirtap
#D: Dollar Amount
(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=164
#A: Snikwad Kcirtap
#D: 
\$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9]?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=165
#A: yahnique barrett
#D: 
\$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=166
#A: martin devos
#D: this expression validates a date-time field in European d/m/y h:m:s format. It is a european variation of Michael Ash's date-validation expression in this library.
#D: The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00
^((((31\/(0?[13578]|1[02]))|((29|30)\/(0?[1,3-9]|1[0-2])))\/(1[6-9]|[2-9]\d)?\d{2})|(29\/0?2\/(((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))|(0?[1-9]|1\d|2[0-8])\/((0?[1-9])|(1[0-2]))\/((1[6-9]|[2-9]\d)?\d{2})) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=167
#A: Zrekam makerZ
#D: Easy expression that checks for valid email addresses.
^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=172
#A: Greg Burns
#D: Validate “Time” Data to Work with SQL Server
#D: This is a fix (I hope) for a problem with the original expression.  It originally allowed any combination of am or pm. For example: ma, aa, mm, mp, etc.
(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=173
#A: Michael Trefry
#D: This regular expression validates a number NOT 0, with no more than 5 places ahead and 3 places behind the decimal point.
(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=174
#A: Thor Larholm
#D: Most email validation regexps are outdated and ignore the fact that domain names can contain any foreign character these days, as well as the fact that anything before @ is acceptable. The only roman alphabet restriction is in the TLD, which for a long time has been more than 2 or 3 chars (.museum, .aero, .info). The only dot restriction is that . cannot be placed directly after @.
#D: This pattern captures any valid, reallife email adress.
^.+@[^\.].*\.[a-z]{2,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=175
#A: john hamman
#D: This will match results in a template situation. For example:
#D: template reads
#D: Dear @@Name@@,
#D: ....
#D: would become
#D: Dear John,
#D: If you dont want to use the @@ change the @ to what ever characters you want.
@{2}((\S)+)@{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=176
#A: Steve Charland
#D: Validate an hour entry to be between 00:00 and 23:59
([0-1][0-9]|2[0-3]):[0-5][0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=177
#A: Daniel Cazzulino
#D: This expression is disabled
<[^\s>]*\bauthor\b[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=182
#A: Daniel Cazzulino
#D: This expression will match the corresponding XML/HTML elements opening and closing tags. Useful to handle documents fragments, without loading an XML DOM.
<[^>\s]*\bauthor\b[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=184
#A: Steven Smith
#D: This expression was developed to match the Title cased words within a Camel cased variable name.  So it will match 'First' and 'Name' within 'strFirstName'.
[A-Z][a-z]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=185
#A: Erik Pettersson
#D: A regular expression that matches numbers. Integers or decimal numbers with or without the exponential form.
^[+-]?([0-9]*\.?[0-9]+|[0-9]+\.?[0-9]*)([eE][+-]?[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=186
#A: Paul Miller
#D: A general string validation to insure no malicious code is being passed through user input.  General enough too allow email address, names, address, passwords, so on.  Disallows ‘,\*&$<> or other characters that could cause issues.   
^([1-zA-Z0-1@.\s]{1,255})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=187
#A: lynn eriksen
#D: this works with ASP.net regular expression valiadtors, ecma script compliant
^(\d{5}-\d{4}|\d{5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=188
#A: Fernando Cerqueira
#D: Validar o do CEP Brasileiro com 8 posicoes podendo usar
#D: mascara . e - ou somente numeros
(^\d{5}-\d{3}|^\d{2}.\d{3}-\d{3}|\d{8})

#U: http://regexlib.com/REDetails.aspx?regexp_id=189
#A: Miles Rochford
#D: Basic validation for Australian postcodes. All postcodes are exactly four digits long.
#D: More information about Australian postcodes (including a downloadable list) is available at http://www.auspost.com.au/postcodes/
([0-9]{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=190
#T: yy/mm/dd Date
#A: Michael Ash
#D: This expression validates dates in the y/m/d format from 1600/1/1 - 9999/12/31. Follows the same validation rules for dates as my other date validator (m/d/y format) located in this library.
^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=191
#A: asdf asdfa
#D: Validates a file path on your local drive or a network drive. A similar one was written by Vinod Kumar but it does not reject asterisks in the path. Moreover, his did not work with RegularExpressionValidators. This one does.
^([a-zA-Z]\:|\\)\\([^\\]+\\)*[^\/:*?"<>|]+\.htm(l)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=192
#A: J. Washam
#D: Matches 99.99% of e-mail addresses (excludes IP e-mails, which are rarely used).  The {2,7} at the end leaves space for top level domains as short as .ca but leaves room for new ones like .museum, etc.  The ?: notation is a perl non-capturing notation, and can be removed safely for non-perl-compatible languages.  See also email.
^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=193
#A: Mike T Spike
#D: Checks for Date in the typical MySQL DB Format. Not mutch but simple to for converting to German date format:
#D: $date = "2003-12-03";
#D: if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs))
#D: {
#D: echo "$regs[3].$regs[2].$regs[1]"; // prints 03.12.2003
#D: }
([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=194
#A: Andrew Polshaw
#D: This matches an IP address, putting each number in its own group that can be retrieved by number. If you do not care about capturing the numbers, then you can make this shorter by putting everything after ^ until immediately after the first \. in a group ( ) with a {3} after it. Then put the number matching regex in once more.
#D: It only permits numbers in the range 0-255.
^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=195
#A: Tom Persing
#D: From Author: DON'T USE THIS ONE. FIND MY OTHER ONE THAT BLOCKS LEADING ZEROS.  My site also couldn't swallow the \d, so I switched to numeric ranges and it worked fine.
#D: KEYWORDS Currency Money Dollar
^\$?(\d{1,3}(\,\d{3})*|(\d+))(\.\d{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=196
#A: Tom Persing
#D: Many currency expresssions allow leading zeros, thus $01.40 passes thru them.  This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and .0 Keywords: money dollar currency
^\$?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=197
#A: Jörg Maag
#D: This expression validates a date field in the European DD-MM-YYYY format. Days are validate for the given month and year. 
^(((((0[1-9])|(1\d)|(2[0-8]))-((0[1-9])|(1[0-2])))|((31-((0[13578])|(1[02])))|((29|30)-((0[1,3-9])|(1[0-2])))))-((20[0-9][0-9]))|(29-02-20(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=198
#A: Hugues Gauthier
#D: This is permit all decimal number, exclude all alphanumeric caracter
^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=199
#A: Fernando Cerqueira
#D: Valida os todos Estados Brasileiros (UF)
#D: e o distrito Federal
^(ac|AC|al|AL|am|AM|ap|AP|ba|BA|ce|CE|df|DF|es|ES|go|GO|ma|MA|mg|MG|ms|MS|mt|MT|pa|PA|pb|PB|pe|PE|pi|PI|pr|PR|rj|RJ|rn|RN|ro|RO|rr|RR|rs|RS|sc|SC|se|SE|sp|SP|to|TO)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=200
#A: Henk de Vries
#D: Checks whether the string specified is in the same format as the UK postcode format defined on:
#D: http://www.magma.ca/~djcl/postcd.txt
#D: It allows:
#D: A = Letter
#D: N = Number
#D: AN NAA, ANA NAA, ANN NAA, AAN NAA, AAA NAA (rare), AANN NAA, AANA NAA
#D: It gives the option to have the two parts of the uk postcode to be separated by a space or a hyphen.
#D: (restriction is set to all-capitals)
^([A-Z]{1,2}[0-9]{1,2}|[A-Z]{3}|[A-Z]{1,2}[0-9][A-Z])( |-)[0-9][A-Z]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=201
#A: Henk de Vries
#D: Postcode for Belgium
^[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=202
#A: Henk de Vries
#D: Postcode for Germany
^[A-Z]{1}( |-)?[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=203
#A: Henk de Vries
#D: Postcode check for France (including colonies)
#D: -----
#D: Edited; sorry I didn't know about Corsica, no offense :)
^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=204
#A: Henk de Vries
#D: Postcode check for Italy (including possible Vatican/Italy indications)
^(V-|I-)?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=205
#A: Henk de Vries
#D: Postcode check for Netherlands
^[1-9]{1}[0-9]{3} ?[A-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=206
#A: Henk de Vries
#D: Postcode check for Spain
^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=207
#A: M H
#D: Lookup all the HTML/XHTML/XML tags for you. Tag attributes can use single quotes, double quotes, or no quotes at all. Filters out bad-formatted tags though.
<\s?\/?[^\s>]+(\s+[^"'=]+(=("[^"]*")|('[^\']*')|([^\s"'>]*))?)*\s*\/?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=208
#A: Murray Roke
#D: Use this along with this replacement string <img\1 /> to convert image tags to XHTML compliant image tags.
<img([^>]*[^/])>

#U: http://regexlib.com/REDetails.aspx?regexp_id=209
#A: Serafeim Zanikolas
#D: matches any day of
#D: month 0?1-31
^((0?[1-9])|((1|2)[0-9])|30|31)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=210
#A: Lewis Moten
#D: Removes pesky comments and commented javascript from HTML
<!--[\s\S]*?-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=211
#A: Lewis Moten
#D: Finds any HTML tag and sub-matches properties weather it has an apposterphee, quote, or no quote/apposterphee
</?(\w+)(\s+\w+=(\w+|"[^"]*"|'[^']*'))*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=212
#A: Lewis Moten
#D: Validates a GUID with and without brackets. 8,4,4,4,12 hex characters seperated by dashes.
^\{?[a-fA-F\d]{8}-([a-fA-F\d]{4}-){3}[a-fA-F\d]{12}\}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=213
#A: lawson law
#D: Password matching expression. Match all alphanumeric character and predefined wild characters. Password must consists of at least 8 characters and not more than 15 characters.
^([a-zA-Z0-9@*#]{8,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=214
#A: Al Val
#D: Regular Expression that validate a phone number inside israel.
^0[23489]{1}(\-)?[^0\D]{1}\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=215
#A: Al Val
#D: Regular Expression that validate Cellular phone in israel.
^0(5[012345678]|6[47]){1}(\-)?[^0\D]{1}\d{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=216
#A: Felix Osegueda
#D: This regular expression is for parsing feet and inches measurements.
(\d*)'*-*(\d*)/*(\d*)"

#U: http://regexlib.com/REDetails.aspx?regexp_id=218
#A: Glenn Caccia
#D: simple expression for excluding a given list of characters.  simply change the contents of [^] to suite your needs.  for example ^(/w|/W|[^<>])+$ would allow everything except the characters < and >.
^(/w|/W|[^<>+?$%{}&])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=219
#A: Joel Dooris
#D: This pattern returns the font section from an RTF document. The first parenthetical subexpression captures the font number, the second returns the actual font enumeration. Lame-o, but fun! :-)
(\{\\f\d*)\\([^;]+;)

#%#% COMMENTED OUT: THIS ONE IS TOO BIG TO RUN
#U: http://regexlib.com/REDetails.aspx?regexp_id=220
#A: Lewis Moten
#D: Searches for tags and there atributes according to the HTML 2.0 specification to limit length of tags to 72 characters, and length of attribute values to 1024 characters.
# </?([a-zA-Z][-A-Za-z\d\.]{0,71})(\s+(\S+)(\s*=\s*([-\w\.]{1,1024}|"[^"]{0,1024}"|'[^']{0,1024}'))?)*\s*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=221
#A: Lewis Moten
#D: Find HTML tags that have javascript events attached to them.
<[a-zA-Z][^>]*\son\w+=(\w+|'[^']*'|"[^"]*")[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=222
#A: Henric Rosvall
#D: Will locate an URL in a webpage.
#D: It'll search in 2 ways - first it will try to locate a href=, and then go to the end of the link. If there is nu href=, it will search for the end of the file instead (.asp, .htm and so on), and then take the data between the "xxxxxx" or 'xxxxxx'
(("|')[a-z0-9\/\.\?\=\&]*(\.htm|\.asp|\.php|\.jsp)[a-z0-9\/\.\?\=\&]*("|'))|(href=*?[a-z0-9\/\.\?\=\&"']*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=223
#T: MM/YYYY MONTH/YEAR
#A: Jony Ferreira
#D: This regular expressions matches dates in the format MM/YYYY where MM can be 01 to 12 and YYYY is always 4 digits long. 
^((0[1-9])|(1[0-2]))\/(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=224
#A: Gerald Martin
#D: Meets german norm-standard: DIN 5008: 1996-05 for telephone numbers
^\(\d{1,2}(\s\d{1,2}){1,2}\)\s(\d{1,2}(\s\d{1,2}){1,2})((-(\d{1,4})){0,1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=225
#A: Scott Kahler
#D: This RE validates standard Bible verse notation.
(?:\d|I{1,3})?\s?\w{2,}\.?\s*\d{1,}\:\d{1,}-?,?\d{0,2}(?:,\d{0,2}){0,2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=226
#A: Alessandro Olivi
#D: Jason West (jason.west@mail.state.ky.us) date validator with leap years using a strict dd/mm/yyyy  (ITALIAN) format
(((0[1-9]|[12][0-9]|3[01])([-./])(0[13578]|10|12)([-./])(\d{4}))|(([0][1-9]|[12][0-9]|30)([-./])(0[469]|11)([-./])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([-./])(02)([-./])(\d{4}))|((29)(\.|-|\/)(02)([-./])([02468][048]00))|((29)([-./])(02)([-./])([13579][26]00))|((29)([-./])(02)([-./])([0-9][0-9][0][48]))|((29)([-./])(02)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02)([-./])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=227
#A: Bertrand Perrin
#D: Regular Expression that validate phone in France.
^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=228
#A: Chris Wicks
#D: UK National Insurance Number (NINo) validation. The following modifications have been made: The first letter may not be D, F, I, Q, U or Z; the second letter may not be D, F, I, O, Q, U or Z; the final letter is optional.
^[A-CEGHJ-PR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}[0-9]{6}[A-DFM]{0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=230
#A: Spring Zhang
#D: This is a regular expression to validate a date string in "MM/DD/YYYY" format, a date time string in "MM/DD/YYYY HH:MM" or a date time string in "MM/DD/YYYY HH:MM:SS" format.
#D: It can validate date from 1600 to 2199.
^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0-1]\d|[2][0-3])(\:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=231
#A: Karsten Grombach
#D: Usesful for importing vcards. Matches vcard elements and values.
((?<strElement>(^[A-Z0-9-;=]*:))(?<strValue>(.*)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=232
#A: Anders Rask
#D: Regexp to find all external links in a HTML string.
#D: Can easily be modified to handle all/other links/protocols (like file/https/ftp).
#D: Uses lookahead assertions and non-greedy modifier to check for the end </a> but still allow html tags inbetween start and end A tag.
#D: Takes into account that there could be linebreaks and other nasty whitespace chars in the middle of the tag.
#D: I am using it to find all external links in embedded HTML code and change 1.the target of the link 2.insert a "Leaving Site" logo to illustrate you are leaving site. 
^<a\s+href\s*=\s*"http:\/\/([^"]*)"([^>]*)>(.*?(?=<\/a>))<\/a>$

#U: http://regexlib.com/REDetails.aspx?regexp_id=233
#A: Bill LaPrade
#D: This is a combination of a few regular expressions found on this site.  It allows for a flexible date and time combination, but requires a 12-hour clock (am/pm).  Many versions of the am/pm are supported.
^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0]\d|[1][0-2])(\:[0-5]\d){1,2})*\s*([aApP][mM]{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=234
#A: Waheed Khan
#D: Use this regular expression pattern to get the string1, string2, string3 .... from <blockquote>string1<br>string2<br>string3<br></blockquote>
<blockquote>(?:\s*([^<]+)<br>\s*)+</blockquote>

#U: http://regexlib.com/REDetails.aspx?regexp_id=236
#A: Jean-Philip Losier
#D: Matches HTML of XML tags, with or without attributes (single-, double-, or non-quoted), closing tags, or self-closing singleton tags.
</?(\w+)(\s*\w*\s*=\s*("[^"]*"|'[^']'|[^>]*))*|/?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=237
#A: Ken Madden
#D: This time validation expression accepts an hour between 1 and 9 (with optional leading zero) and minutes between 01 and 59.  This is primarily for use with an AM/PM drop down list or radio button.
^(([0]?[1-9]|1[0-2])(:)([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=238
#A: Jim Tebbel
#D: validate 12-hour time with am/pm after it, with optional spaces before or after, and optionally between time and am/pm.
^ *(1[0-2]|[1-9]):[0-5][0-9] *(a|p|A|P)(m|M) *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=239
#A: s4 s
#D: 
\({1}[0-9]{3}\){1}\-{1}[0-9]{3}\-{1}[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=240
#A: Krisada Arjinpattara
#D: 
[^abc]

#U: http://regexlib.com/REDetails.aspx?regexp_id=241
#A: Bob Duffett
#D: MM-DD-20YY HH:MM AP
#D: MM-DD-20YY H:MM AP
#D: MM-DD-20YY HH:MM
#D: MM-DD-20YY H:MM
#D: MM-DD-YY HH:MM AP
#D: MM-DD-YY H:MM AP
#D: MM-DD-YY HH:MM
#D: MM-DD-YY H:MM
#D: M-D-YY HH:MM AP
#D: M-D-YY H:MM AP
#D: M-D-YY HH:MM
#D: M-D-YY H:MM
#D: where - can be / or - or .
#D: where : can be : or - or .
#D: Definition:
#D: ^(                       ;Start of Line
#D: ([0]?[1-9]|[1][0-2])     ;00-09 or 10-12 or 1-9
#D: [\/|\-|\.]               ;/ or - or .
#D: ([0-2]\d|[3][0-1]|[1-9]) ;00-29 or 30-31 or 1-9
#D: [\/|\-|\.]               ;/ or - or .
#D: ([2][0])?\d{2}           ;2000-2099 or 00-99
#D: \s+                      ;one or more spaces
#D: (                        ;must be either 12H notation w/AM|PM
#D: (
#D: ([0][0-9]|[1][0-2]|[0-9])
#D: [\:|\-|\.]              ;: or - or .
#D: ([0-5]\d)               ;01 thru 59
#D: \s*                     ;zero or more spaces
#D: ([aApP][mM])?           ;nothing or AM or PM (case insensitive)
#D: )
#D: |                        ;or 24H notation w/out AM|PM
#D: (
#D: ([0-1][0-9]|[2][0-3]|[0-9]) ;00-19 or 20-23
#D: [\:|\-|\.]              ;: or - or .
#D: ([0-5]\d)               ;00-59
#D: )
#D: )
#D: )$                       ;End of Line
^(([0]?[1-9]|[1][0-2])[\/|\-|\.]([0-2]\d|[3][0-1]|[1-9])[\/|\-|\.]([2][0])?\d{2}\s+((([0][0-9]|[1][0-2]|[0-9])[\:|\-|\.]([0-5]\d)\s*([aApP][mM])?)|(([0-1][0-9]|[2][0-3]|[0-9])[\:|\-|\.]([0-5]\d))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=242
#A: Michael Gaertner
#D: Match any number between 1 and 50, no characters, no empty sets, and not zero. Match numbers greater than 1 and less than 51, no spaces, no characters.
^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$

#U: http://regexlib.com/REDetails.aspx?regexp_id=243
#A: Don Batchelor
#D: Matches up to three alphabet words separated by spaces with first alphabet character of each word uppercase. Also matches empty strings.
^([A-Z]{1}[a-z]{1,})$|^([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=244
#A: Mekonnen Mekonnen
#D: Matches dates with the following format
#D: Month - either MM (like 01) or M (like 1) - from 1 to 12
#D: Day - either DD (like 01) or D ( like 1) - from 1 to 31
#D: Year - either YYYY ( like 1998) or YY (like 98)
#D: Separater - either - or /
^([1][12]|[0]?[1-9])[\/-]([3][01]|[12]\d|[0]?[1-9])[\/-](\d{4}|\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=245
#A: Amit Deshpande
#D: It checks for Valid US Phone numbers.
#D: Accepts &amp;quot;.&amp;quot;,Space,\,/,- as delim.
^([0-1]([\s-./\\])?)?(\(?[2-9]\d{2}\)?|[2-9]\d{3})([\s-./\\])?(\d{3}([\s-./\\])?\d{4}|[a-zA-Z0-9]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=246
#A: Amit Deshpande
#D: USA Alhpanumeric Valid Phone numbers
^([0-1]([\s-./\\])?)?(\(?[2-9]\d{2}\)?|[2-9]\d{3})([\s-./\\])?([0-9]{3}([\s-./\\])?[0-9]{4}|[a-zA-Z0-9]{7}|([0-9]{3}[-][a-zA-Z0-9]{4}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=247
#A: tom ferguson
#D: Expression to match names and dis-allow any attempts to send evil characters.  In particular, it tries to allow
#D: non-english names by allowing unicode characters.
^([ \u00c0-\u01ffa-zA-Z'])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=248
#A: Patrick O'Hara
#D: Validates time in MySQL time format.  24 hour time colon seperated hours:minutes:seconds
(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=249
#A: Rick Yokum
#D: This expression will allow a time value with 15 minute increments.  It will not accept seconds.  You can use either US time or Military time format.
^((([0]?[1-9]|1[0-2])(:|\.)(00|15|30|45)?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)(00|15|30|45)?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=932
#A: Diego dos Santos
#D: Validate brazilian date formats: dd/mm/yyyy or d/m/yy or d.m.yyyy
#D: with separators: . - /
#D: Valid dates only! d (1-31)/ m (1-12)/ y (0..)
#D: (rizzipereira.com.br)
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=932
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">10/03/1979 <span class='separator'>|</span> 1-1-02 <span class='separator'>|</span> 01.1.2003
^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=251
#A: Bri Gipson
#D: Accepts only positive decimal values. Zero and negatvie numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits.
(^\d*\.?\d*[1-9]+\d*$)|(^[1-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=252
#A: Bri Gipson
#D: Accepts only negative decimal values. Zero and positive numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits. 
(^-\d*\.?\d*[1-9]+\d*$)|(^-[1-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=253
#A: martix wang
#D: this is a regular expression that for chinese programer!
#D: yyyy/mm/dd hh:mm:ss
^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1]))$|^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=254
#A: Kevin Read
#D: Matches Numeric with Commas and a single decimal point.  Also matches empty string.
^(\d|,)*\.?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=255
#A: marnik vander elst
#D: easy when you want to allow your users to post images, but in a controlled way. I used it like this (in php):
#D: $text = preg_replace("/(\[IMG\])(\S+?)(\[\/IMG\])/is", "<a href=\"\\2\" target=\"_blank\"><IMG SRC=\"\\2\" align=\"center\" height=\"100\" border=\"0\"></a>",$text);
#D: so whenever they use
#D: [img]http://www.foo.com/bleh.jpg[/img]
#D: it will be converted to
#D: <a href="http://www.foo.com/bleh.jpg" target="_blank"><IMG SRC="http://www.foo.com/bleh.jpg" align="center" height="100" border="0"></a>
#D: so you get a 100 pixels high picture, and when they click on it it opens in a new window...
#D: (to prevent users from posting huge pictures and stuff)
(\[[Ii][Mm][Gg]\])(\S+?)(\[\/[Ii][Mm][Gg]\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=256
#A: Paul Duncan
#D: US zip code expression that disallows 00000 or 00000-0000 for either ZIP or ZIP+4.  Great for web site validation.
^(?(^00000(|-0000))|(\d{5}(|-\d{4})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=257
#A: Ramon Durães
#D: This re was used for set numbers only!
#D: Somente numeros são requeridos!
^[+]?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=258
#A: Brian Webb
#D: I wrote this sweet little (well, not so little really) reg to extract links from an HTML source....  it is very robust, give it a try.
#D: The only limitation I have discovered is that it can't match invalid HTML...
<[aA][ ]{0,}([a-zA-Z0-9"'_,.:;!?@$&()%=/ ]|[-]|[	\f]){0,}>((<(([a-zA-Z0-9"'_,.:;!?@$&()%=/ ]|[-]|[	\f]){0,})>([a-zA-Z0-9"'_,.:;!?@$&()%=/ ]|[-]|[	\f]){0,})|(([a-zA-Z0-9"'_,.:;!?@$&()%=/ ]|[-]|[	\f]){0,})){0,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=259
#A: Geoffrey Swenson
#D: Matches HTML image leaf filenames.
^[0-9A-Za-z_ ]+(.[jJ][pP][gG]|.[gG][iI][fF])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=260
#A: Stuart Wade
#D: Regular expression to match valid UK postcodes.
#D: In the UK postal system not all letters are used in all positions (the same with vehicle registration plates) and there are various rules to govern this.  This regex takes into account those rules.
#D: Details of the rules:
#D: First half of postcode
#D: Valid formats
#D: [A-Z][A-Z][0-9][A-Z]
#D: [A-Z][A-Z][0-9][0-9]
#D: [A-Z][0-9][0-9]
#D: [A-Z][A-Z][0-9]
#D: [A-Z][A-Z][A-Z]
#D: [A-Z][0-9][A-Z]
#D: [A-Z][0-9]
#D: Exceptions
#D: Position - First.
#D: Contraint - QVX not used
#D: Position - Second.
#D: Contraint - IJZ not used except in GIR 0AA
#D: Position - Third.
#D: Constraint - AEHMNPRTVXY only used
#D: Position - Forth.
#D: Contraint - ABEHMNPRVWXY
#D: Second half of postcode
#D: Valid formats
#D: [0-9][A-Z][A-Z]
#D: Exceptions
#D: Position - Second and Third.
#D: Contraint - CIKMOV not used
^([A-PR-UWYZ0-9][A-HK-Y0-9][AEHMNPRTVXY0-9]?[ABEHMNPRVWXY0-9]? {1,2}[0-9][ABD-HJLN-UW-Z]{2}|GIR 0AA)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=261
#A: Morten Henriksen
#D: Accepts data of time in format h:mm and hh:mm
#D: ^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
#D: in php [0-23]:[0-59]{2} (posix)
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=262
#A: Kevin Coleman
#D: Validates MM/YY for rough checking credit card expiration dates.
^((0[1-9])|(1[0-2]))\/(\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=264
#A: Darren Neimke
#D: Matches tags
\w?<\s?\/?[^\s>]+(\s+[^"'=]+(=("[^"]*")|('[^\']*')|([^\s"'>]*))?)*\s*\/?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=265
#A: Bassel Issa
#D: this pattern can find all lines of script in HTML code from open to close tag range
<script[^>]*>[\w|\t|\r|\W]*</script>

#U: http://regexlib.com/REDetails.aspx?regexp_id=266
#A: Dennis Flynn
#D: Incorporated other people's examples; removed extraneous parenthesis on 10/7/04.  Currently the SSA site says 772 is the highest AREA number generated (http://www.ssa.gov/employer/highgroup.txt).  Old expression was:  (^|\s)\d{3}(-?|[\. ])\d{2}\2\d{4}($|\s|[;:,!\.\?]).  Looks for either the beginning of a line or whitespace before the beginning of the social security number, then either zero or one hyphen OR one of a period or space, then uses the \3 to reference the value returned in the parenthesis that includes the -?|[\. ] (basically says if the first dash, period, or space is there, then the second one is required; and if the first dash, period, or space is not there, then the second one can't be either), and finally looks for the end of a line, whitespace, or punctuation characters after the social security number.
(^|\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\d{2}|7[0-6]\d|77[0-2])(-?|[\. ])([1-9]0|0[1-9]|[1-9][1-9])\3(\d{3}[1-9]|[1-9]\d{3}|\d[1-9]\d{2}|\d{2}[1-9]\d)($|\s|[;:,!\.\?])

#U: http://regexlib.com/REDetails.aspx?regexp_id=267
#A: Gregory Entin
#D: Matches comma-separated list of IP address and IP ranges. E.g. 192.168.101.1-192.168.101.255,192.168.102.12
^(((((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])-(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))),)*)(((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-

#U: http://regexlib.com/REDetails.aspx?regexp_id=268
#A: Chuck Scholton
#D: This will check if a number is an integer.  Positive integers are all the whole numbers greater than zero: 1, 2, 3, 4, 5, ... . Negative integers are all the opposites of whole numbers: -1, -2, -3,-4, -5, ... .  Zero is not a whole number with either a positive or negative value, and is not an interger.  Null or Empty values are not intergers.     
^[-+]?[1-9]\d*\.?[0]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=269
#A: nick bennett
#D: Matches a valid email address including ip's which are rarely used. Allows for a-z0-9_.- in the username, but not ending in a full stop i.e user.@domain.com is invalid and a-z0-9- as the optional sub domain(s) with domain name and a 2-7 char (a-z) tld allowing for short tld's like ca and new ones like museum.
^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=270
#A: X Man
#D: This expression finds all opening and closing tags.  Good for stripping out tags in an XML or HTML document.
#D: I used it to clean-up HTML documents that had XML mixed in.  It found all the tags, then I just deleted the ones that weren't standard.  I used it in HOMESITES extended find.
<[^>]+>

#U: http://regexlib.com/REDetails.aspx?regexp_id=271
#A: Jason N. Gaylord
#D: This regex is to validate the time of a ~60 minute CD where the most time on the CD is 59:59 (minutes:seconds). It is derived from Ken Madden's time regex for a project for Erik Porter (Windows/Web guru). Written by Jason Gaylord.
^(([0]?[0-5][0-9]|[0-9]):([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=272
#A: Nicholas Rathwell
#D: It could be use to validate html input form (checkbox, optionbox, selectbox) when you have multiple numeric value under one field name. The validation is that the user have at lease chose one or more!
^[0-9]{1,}(,[0-9]+){0,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=273
#A: Rahul Pandit
#D: Additional checks for <> and " characters
^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*<>:\;|\"/]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=274
#A: Zeljko Stanfel
#D: ICD9 code pattern
^\d{3,3}\.\d{0,2}$|^E\d{3,3}\.\d{0,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=275
#A: Jeff Howden
#D: [Note: this regex was tested with Macromedia's ColdFusion MX.  I'm sure it'll need some massaging to work with other regex engines.]  Of the few domain validating regular expressions I found in my search I didn't find a single one that reliably handled multiple levels of subdomains or TLDs.  So, I wrote one and thoroughly tested it.  There are a ton of matching and non-matching examples that need to be included to show the completeness of this regex.
#D: Non-matching:  -.domain.com, -a.domain.com, -domain.com, domain-.com, any domain where the portion before the tld is greater than 63 characters.
#D: Matching: a.domain.com, a-a.domain.com, a--a.domain.com, a--defg.com, domain.co.uk.
^([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?\.){0,}([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?){1,63}(\.[a-z0-9]{2,7})+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=276
#A: brent stineman
#D: Expression to handle US currency entry in .NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.
^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=277
#A: brent stineman
#D: An expression for .NET regular expression validation controls intended to faciliate the entry of percentage values both a whole numbers or as their decimal representations. Also compatible with the default US format for string formatting for percentages.
#D: Recommend that if you intended accept a value passing this express that you strip the percentage signs and take measures to ensure that any whole values are converted to percentages.
^\d{0,2}(\.\d{1,4})? *%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=278
#A: James T. Kirk
#D: matches a six character "password" that has to consist of numbers and letters with at least one letter in it.
^(?![0-9]{6})[0-9a-zA-Z]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=279
#A: Saurabh Nath
#D: This Validator Validates any date from 1800 - 9999. It takes special care of Leap years and validates any format of type mm/dd/yyyy , m/dd/yyyy , mm/d/yyyy , m/d/yyyy.
#D: Since SQL Server does not accept any date before 1/1/1753, so i hope it will meet Your Requirements.(Modified Version of Jason West's Date Validator.)
((^(10|12|0?[13578])([/])(3[01]|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])([/])(30|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(2[0-8]|1[0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(29)([/])([2468][048]00)$)|(^(0?2)([/])(29)([/])([3579][26]00)$)|(^(0?2)([/])(29)([/])([1][89][0][48])$)|(^(0?2)([/])(29)([/])([2-9][0-9][0][48])$)|(^(0?2)([/])(29)([/])([1][89][2468][048])$)|(^(0?2)([/])(29)([/])([2-9][0-9][2468][048])$)|(^(0?2)([/])(29)([/])([1][89][13579][26])$)|(^(0?2)([/])(29)([/])([2-9][0-9][13579][26])$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=280
#A: scott cole
#D: Simple, but it gave me trouble in the c#...
{.*}

#U: http://regexlib.com/REDetails.aspx?regexp_id=281
#A: Kevin Hillabolt
#D: This expression is used to validate fractions (entered as strings). It will also accept non-fractional entries. Simple, but effective.
^\d* \d*\/{1}\d*$|^\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=282
#A: Myle Ott
#D: Email Expression Match That allows both IP addresses and regular domains. In the case of an IP address it makes sure that it is no more than 255 for each part.
^([a-zA-Z0-9_\-\.])+@(([0-2]?[0-5]?[0-5]\.[0-2]?[0-5]?[0-5]\.[0-2]?[0-5]?[0-5]\.[0-2]?[0-5]?[0-5])|((([a-zA-Z0-9\-])+\.)+([a-zA-Z\-])+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=283
#A: kode kode
#D: This regular expression matches 10 digit US Phone numbers in different formats. Some examples are
#D: 1)area code in paranthesis.
#D: 2)space between different parts of the phone number.
#D: 3)no space between different parts of the number.
#D: 4)dashes between parts.
^\(?[\d]{3}\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=284
#A: Myle Ott
#D: Email expression match that allows both IP addresses and regular domains. In the case of an IP address it makes sure that it is no more than 255 for each part. Thanks to Ivan R. and Michele for some bug fixes...BTW: This is my second reg expression ever so be nice :-D
^([a-zA-Z0-9_\-])+(\.([a-zA-Z0-9_\-])+)*@((\[(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5])))\.(((([0-1])?([0-9])?[0-9])|(2[0-4][0-9])|(2[0-5][0-5]))\]))|((([a-zA-Z0-9])+(([\-])+([a-zA-Z0-9])+)*\.)+([a-zA-Z])+(([\-])+([a-zA-Z0-9])+)*))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=285
#A: Myle Ott
#D: I simple check that I personally use to validate passwords to make sure that they only contain ascii character 32 through ascii character 126.
^([a-zA-Z0-9!&amp;quot;#$%&amp;amp;',/:;&amp;lt;=&amp;gt;@_`|~ \(\)\*\+\-\.\?\[\]\\\^\{\}])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=286
#A: Mike t
#D: Can be used to remove
#D: &lt;SCRIPT language=&quot;JavaScript&quot;&gt;
#D: &lt;!--
#D: //--&gt;
#D: &lt;/SCRIPT&gt;
#D: from embeded javascript
#D: Should be used as case insensitive
(\/\/-->\s*)?<\/?SCRIPT([^>]*)>(\s*<!--\s)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=295
#A: Gavin Sharp
#D: It verifies that: - Only letters, numbers and email acceptable symbols (+, _, -, .) are allowed - No two different symbols may follow each other - Cannot begin with a symbol - Ending domain must be at least 2 letters - Supports subdomains - TLD must be between 2 and 6 letters (Ex: .ca, .museum) - Only (-) and (.) symbols are allowed in domain, but not consecutively.
#D: Problems:
#D: See comments below
^(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\-+)|([A-Za-z0-9]+\.+)|([A-Za-z0-9]+\++))*[A-Za-z0-9]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=297
#A: Joe Gass
#D: UK Phone Number Allows leading and trailing spaces and optional spaces after the dialing code.
#D: Initially the expression I posted was
#D: \s*0\d{4}\s*\d{6}\s*|\s*0\d{3}\s*\d{7}\s*
#D: But this didn't include optional brackets e.g. (01603) 123123 or phone numbers in a London format e.g. 0208 123 1234
(\s*\(?0\d{4}\)?\s*\d{6}\s*)|(\s*\(?0\d{3}\)?\s*\d{3}\s*\d{4}\s*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=298
#A: Dennis Zweigle
#D: 167 different US telephone patterns. Options includes a)0 or 1 dial, b)area code, c).+-()space between number dial-area code-number.  
(([01][\.\- +]\(\d{3}\)[\.\- +]?)|([01][\.\- +]\d{3}[\.\- +])|(\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=300
#A: Carlos R. L. Rodrigues
#D: 
^\w+(\-|\.|_)?\w+\@[A-z\d]+\-?[A-z\d]+\.[A-z\d]{2,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=301
#A: Dominic Allkins
#D: First attempt at reg ex - work in progress - can't quite get it to work absolutely correctly so any comments would be great.
#D: Matches everything as it should apart from the last part of the IP, i.e. allows http://255.255.255.999 (which obviously it shouldn't but ran out of inspiration) so any corrections humbly and gratefully accepted.
#D: TLD check is not complete - just added most of the major ones but easy to dd to if you want to.
#D: BTW - you'll need to replace the & with just the ampersand in the reg ex
^(http|https|ftp)\://(((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([a-zA-Z0-9_\-\.])+\.(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum|uk|me))((:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=302
#A: Carlos R. L. Rodrigues
#D: Checks if has the first and the last name, and check the capital letters.
#D: Use with the RegExp.test method
(^[A-ZÀ-Ü]{1}[a-zà-ü']+\s[a-zA-Zà-üÀ-Ü]+((([\s\.'])|([a-zà-ü']+))|[a-zà-ü']+[a-zA-Zà-üÀ-Ü']+))

#U: http://regexlib.com/REDetails.aspx?regexp_id=303
#A: Carlos R. L. Rodrigues
#D: dd/mm/yy
#D: Check dates between 1/1/1900 - 31/12/2099
(^((((0[1-9])|([1-2][0-9])|(3[0-1]))|([1-9]))\x2F(((0[1-9])|(1[0-2]))|([1-9]))\x2F(([0-9]{2})|(((19)|([2]([0]{1})))([0-9]{2}))))$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=304
#A: Carlos R. L. Rodrigues
#D: Brazilian cpf
(^\d{3}\x2E\d{3}\x2E\d{3}\x2D\d{2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=305
#A: Jag fire
#D: Matches "clan" nicks/names.
^(\{|\[|\().+(\}|\]|\)).+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=306
#A: Nicholas Berardi
#D: Is used to evaluating domain names, none of the extras such as paths or protocols.
^(([\w][\w\-\.]*)\.)?([\w][\w\-]+)(\.([\w][\w\.]*))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=307
#A: Rico lour
#D: Regular expression to match a canadian postal code where it matches a string with or without the hyphen and in upercase or lowercase
^([A-Za-z]\d[A-Za-z][-]?\d[A-Za-z]\d)

#U: http://regexlib.com/REDetails.aspx?regexp_id=308
#A: Daren Salter
#D: UK Mobile phone regular expression.
#D: I usually run this against a telephone field to split out landlines and mobile numbers.
^07([\d]{3})[(\D\s)]?[\d]{3}[(\D\s)]?[\d]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=309
#A: John Smart
#D: This is just a regular special char expression used to get the hax0rs off your back (hopefully).  You can use this for regular open name checking if you wanted.  It only fails on the insert of anything other than a-z, A-Z, and ' or whitespace. I'm open to suggestions, but try to email them to me as well as posting them to help others.  Thanks.
^([a-zA-Z.\s']{1,50})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=310
#A: Michael Matusiewicz
#D: This Regular expression validates a string that contains all printable characters with a minimum length of 1 and maximum length of 5.
#D: Obviously the min and max can be changed to meet the users needs.
#D: ^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$ This is the string, I keep getting &lt and other characters when I save it.
^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=311
#A: martijn db
#D: Dutch postalcode expression. 4 digits followed by max. two spaces end ending on two letters. 
^[0-9]{4}\s{0,2}[a-zA-z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=312
#A: Jun Wang
#D: This match fileds contain only letters, a single hyphen, a single space, not empty 
[^a-zA-Z \-]|(  )|(\-\-)|(^\s*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=314
#A: gabe g
#D: Validates US phone numbers. Phone number can be delimited with dashes or spaces. Area code can optionally include parentheses. To optionally validate area codes, try this expression.
#D: ^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$
^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=316
#A: Felipe Braga
#D: This expression validates dates in the Brazilian d/m/y format from 1/1/1600 - 12/31/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999. Days and months must be 1 or 2 digits and may have leading zeros. Years must be 4 digit years, between 1600 and 9999. Date separator must be a slash (/)
^(?:(?:(?:0?[1-9]|1\d|2[0-8])\/(?:0?[1-9]|1[0-2]))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:(?:(?:31\/0?[13578]|1[02])|(?:(?:29|30)\/(?:0?[1,3-9]|1[0-2])))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:29\/0?2\/(?:(?:(?:1[6-9]|[2-9]\d)(?:0[48]|[2468][048]|[13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=317
#A: Cal Guisti
#D: This is an update of Paul Miller's RegEx.  It will cut out literal <> but I haven't fully tested it, it's just a quick fix since his didn't work all that well.
#D: I also took out the \s.  You could add this back in but I use this for very simple password verification, and I certainly have no use for spaces in my passwords.
^([0-9A-Za-z@.]{1,255})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=318
#A: Kirk Fuller
#D: This expression will validate for US Currency with a wide range of input.  Using other exps found on this site, I built this one to fix 2 main problems I was finding:
#D: 1-a space or blank entry is non-matching
#D: 2-use of .9 in place of .90 will match (this is for those people like me who hate to type and if I put .9 I mean .90
#D: Hope this helps others save a little time.  I feel I was pretty thorough in testing, but if you find something wrong, please post it.  -Thanks
^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{0,2})?|\d{1,3}(\.\d{0,2})?|\.\d{1,2}?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=319
#A: Markus Unterauer
#D: Correct German DateTime. Does not check leap year rules!
#D: Possible Formats of date part:
#D: D.M.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.M.YYYY
#D: Possible formats of time part:
#D: h:mm or hh:mm
^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2})$|^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2}\s([1-9]|[0-1]\d|[2][0-3])\:[0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=320
#A: Dany Lauener
#D: Date with leap years. Accepts '.' '-' and '/' as separators
#D: d.m.yy to dd.mm.yyyy (or d.mm.yy, etc)
#D: Ex: dd-mm-yyyy   d.mm/yy   dd/m.yyyy  etc etc
#D: Accept 00 years also.
^((((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|[12]\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|1\d|2[0-8])02((1[6-9]|[2-9]\d)?\d{2}))|(2902((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=321
#A: Jag fire
#D: Matches simple IP addresses. It's not too complex or long, but it does the job if you want something short/simple.
^(([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=322
#A: Asim Goheer
#D: simple little RegExp to get the IMG tag from HTML
<[iI][mM][gG]([^>]*[^/>])

#U: http://regexlib.com/REDetails.aspx?regexp_id=323
#A: Gabriel Fróes
#D: This regular expressions matches CNPJ number. CNPJ is a Registration Number of Brazilian Companies.
\d{2}.?\d{3}.?\d{3}/?\d{4}-?\d{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=324
#A: Ed Preston
#D: Pulls out comments (both Rem and ') and string literals from VB or VBScript. Usefull for spell checking or review.
#D: Notes: The VBScript for "Rem" documentation says that it must be followed by a space but VBScript seems to accept tab characters as well.
#D: The multiline flag is assumed for this search.
('.*$|Rem((\t| ).*$|$)|"(.|"")*?")

#U: http://regexlib.com/REDetails.aspx?regexp_id=325
#A: stephen lam
#D: valid date base on Month
^\d{2}\s{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Apr|Sep|Oct|Nov|Dec)\s{1}\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=326
#A: Dany Lauener
#D: Date expression validator with format YYMMDD
#D: Validates leap years.
#D: Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years !
^((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=327
#A: Richard Slade
#D: Validates a UK Bank Sort code
^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=328
#A: Roger Ramjet
#D: Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is valid: !#$%^&amp;amp;*-+~/'`|{}@xyz.com
#D: Sorry looks like this site is mangling the quote and ampersand characters - you'll have to fix that yourself.
^((\"[^\"\f\n\r\t\v\b]+\")|([\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+(\.[\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+)*))@((\[(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))\])|(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))|((([A-Za-z0-9\-])+\.)+[A-Za-z\-]+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=329
#A: Kevin Read
#D: Input for Numeric values.  Handles negatives, and comma formatted values.  Also handles a single decimal point
^(\d|-)?(\d|,)*\.?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=330
#A: William Powell
#D: Allows only positive integers that are greater then 0. Easily modified for +/- intergers and allowing zero.
^[1-9]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=331
#A: Richard Slade
#D: Validates a UK mobile phone number in International format
^[+]447\d{9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=332
#A: Tomas Andrysek
#D: reg. expr. 4 checking 24 time
^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=333
#A: bilou mcgyver
#D: does not allow IP for domain name : hello@154.145.68.12
#D: does not allow litteral addresses "hello, how are you?"@world.com
#D: allows numeric domain names
#D: after the last "." minimum 2 letters
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=334
#A: Demo Gorgon
#D: Whilst writing a plain-text to HTML function, I ran into the problem of links that users had written with <a> tags (as opposed to just writing the URL) were linking improperly.  This regular expression returns many types of URL, and preceding characters, if any.  This allows you to handle each type of match appropriately
\b(((\S+)?)(@|mailto\:|(news|(ht|f)tp(s?))\://)\S+)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=335
#A: Matt Biggin
#D: This matches Java class names such as "com.test.Test". It's being used within an XML Schema to validate classname as specified in XML documents.
^(([a-z])+.)+[A-Z]([a-z])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=336
#A: Andrew Deren
#D: Matches variable names/identifier from C# (and most other languages)
^[a-zA-Z_][a-zA-Z0-9_]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=337
#A: Mike Stancombe
#D: Just a simple regExp to parse the stack trace.  Developed when using the exception block from MS, coz they only showed the stack all bunched together.  Could be used as follows:
#D: [C#]
#D: string regExParams = @"(at\s)(?<fullClassName>.+)(\.)(?<methodName>[^\.]*)(\()(?<parameters>[^\)]*)(\))((\sin\s)(?<fileName>.+)(:line )(?<lineNumber>[\d]*))?";
#D: Regex re = new System.Text.RegularExpressions.Regex(regExParams,RegexOptions.Compiled);
#D: MatchCollection mtc;
#D: mtc = re.Matches(System.Environment.StackTrace);
#D: foreach(Match mt in mtc)
#D: {
#D: MessageBox.Show(mt.Result("${fullClassName}"));
#D: MessageBox.Show(mt.Result("${methodName}"));
#D: MessageBox.Show(mt.Result("${parameters}"));
#D: MessageBox.Show(mt.Result("${fileName}"));
#D: MessageBox.Show(mt.Result("${lineNumber}"));
#D: }
#D: Seems to work well, but use at your own peril!!
#D: Feel free to use and enhance (there's probably a lot that could be done, like getting parameters individually(?), etc)
(at\s)(?<fullClassName>.+)(\.)(?<methodName>[^\.]*)(\()(?<parameters>[^\)]*)(\))((\sin\s)(?<fileName>.+)(:line )(?<lineNumber>[\d]*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=338
#A: Martin Henningsson
#D: Swedish phone numbers according to SIS standard
^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=339
#A: Jonathan Crossland
#D: Detects HTML tags open and/or closed with and without whitespace or characters in between. Good for stripping all tags from a string.
>(?:(?<t>[^<]*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=340
#A: Rick Spiewak
#D: Credit card validator for AMEX, VISA, MasterCard only. Allows spaces, dashes, or no separator between digit groups according to the layout (4-6-5 for AMEX, 4-4-4-4 for Visa and Mastercard)
^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}

#U: http://regexlib.com/REDetails.aspx?regexp_id=341
#A: Paul Auger
#D: This allows a sequence of real numbers to be added, separated by a comma (required) and a space (optional).  Based pretty heavily on an expression by Steven Smith on this site.
^((\d?)|(([-+]?\d+\.?\d*)|([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d+\.?\d*))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d+\.?\d*)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=342
#A: Russell Anderson
#D: Allows Canadian, American and UK postal/zip codes. Allowing hyphens, periods, or spaces to separate.
^(\d{5}((|-)-\d{4})?)|([A-Za-z]\d[A-Za-z][\s\.\-]?(|-)\d[A-Za-z]\d)|[A-Za-z]{1,2}\d{1,2}[A-Za-z]? \d[A-Za-z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=343
#A: Pete Samwel
#D: Matches a file name to be either a .wma or .mp3 file. This can be used to check file uploads to make sure they are of a certain type. Substitute letters where appropriate for specific file types. To include more simply add logical 'or' (|) operator and append.
(.*\.([wW][mM][aA])|([mM][pP][3])$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=345
#A: Dmitry Borysov
#D: File Name Validator. Validates both UNC (\\server\share\file) and regular MS path (c:\file).
^(([a-zA-Z]:|\\)\\)?(((\.)|(\.\.)|([^\\/:\*\?"\|<>\. ](([^\\/:\*\?"\|<>\. ])|([^\\/:\*\?"\|<>]*[^\\/:\*\?"\|<>\. ]))?))\\)*[^\\/:\*\?"\|<>\. ](([^\\/:\*\?"\|<>\. ])|([^\\/:\*\?"\|<>]*[^\\/:\*\?"\|<>\. ]))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=346
#A: eddie xia
#D: 
^[a-zA-Z0-9]{1,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=347
#A: Joseph Warwick
#D: Heres my sql clause parser regexp for recordset filtering. Does recursive query parsing all by its self. Only problem I cant figure is how to match comma separated lists of quoted strings. Tell me if you figure out how!
#D: The unicodes in the re was put in by the entry form please replace them with their ascii equivalents to use it.
(NOT)?(\s*\(*)\s*(\w+)\s*(=|<>|<|>|LIKE|IN)\s*(\(([^\)]*)\)|'([^']*)'|(-?\d*\.?\d+))(\s*\)*\s*)(AND|OR)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=350
#A: Vitaly Kompot
#D: This is my basic phone number verification. it allows a + - , signs digits, spaces and blank entry
(^(\+?\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=351
#A: Steve Fisher
#D: Validates Microsoft Project-type duration entries. Accepts a number and a unit. The number part can be integer or decimal. The unit can be several variations of weeks, days, and hours: e.g., w, wk, week, ws, wks, weeks are all valid. Whitespace between the number and the unit is optional: e.g., 1d, 2 days, 3.5w are all valid. Captures the number value in a group named num and the unit string in a group named 'unit'.
^\s*(?'num'\d+(\.\d+)?)\s*(?'unit'((w(eek)?)|(wk)|(d(ay)?)|(h(our)?)|(hr))s?)(\s*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=352
#A: David Yack
#D: Limit Length - limit the length of a text box or other area to contain any character plus new line
^(.|\n){0,16}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=354
#A: Doug Moore
#D: This expression will match all of the commands(escape codes) used in ANSI files.  These are what were used to create the colors/blocks on BBS's for those of us that once dialed into them.
#D: http://www.wikipedia.org/wiki/ANSI_escape_code has a reference for ANSI escape codes.
#D: http://idledreams.net/lordscarlet/posts/153.aspx shows an example of the engine I have created surrounding the expression
(?s)(?:\e\[(?:(\d+);?)*([A-Za-z])(.*?))(?=\e\[|\z)

#U: http://regexlib.com/REDetails.aspx?regexp_id=355
#A: Darren Neimke
#D: Matches C style strings allowing for escaped string delimiters to be included in the match.
#D: ALTERED 13-Dec-2003
#D: -------------------
#D: Previous pattern was :
#D: "([^"](?:\\.|[^\\"]*)*)"
#D: Changed to:
#D: "([^"]*(?:\\.|[^\\"]*)*)"
#D: Making the first character after the opening quote optional allows the pattern to match on empty quotes: "".
"([^"](?:\\.|[^\\"]*)*)"

#U: http://regexlib.com/REDetails.aspx?regexp_id=356
#A: Darren Neimke
#D: This is my all-time favourite e-mail validator.  I've used it for years and it's never failed me :-)
(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=357
#A: Darren Neimke
#D: Matches filenames.
#D: UPDATED on 1st Jan 2004.
^([a-zA-Z]\:)(\\[^\\/:*?<>"|]*(?<![ ]))*(\.[a-zA-Z]{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=358
#A: Volker Roth
#D: We've come across the situation where we had to extract the IIS-Log entries without the header information. The data is far more complex than the sample given.
#D: Explanation:
#D: ^[^#] = lines not beginnin with #
#D: ([^ ]+ ){6} = 6 times no space until one space
#D: [^ ]+ = no spaces allowed...
#D: $ = ...until end of line
#D: For further explanation don't hesitate to write E-Mail.
^[^#]([^ ]+ ){6}[^ ]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=359
#A: Darren Neimke
#D: 
(\b\w+\b)       # Match a word and capture it\N\s+\N\1              # Use backreference \1 to match double-ups

#U: http://regexlib.com/REDetails.aspx?regexp_id=360
#A: mana deys
#D: For testing 24H based time entry.  Tests if there is a colon to separate the hours from the minutes
^(([0-9])|([0-1][0-9])|([2][0-3])):?([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=361
#A: David Darling
#D: Following expression can be used to validate a datetime column from SQL Server.  This expression is an enhanced version of Scott Watermasysk's date/time submission.  It now accepts leading zeros in months, days, and hours.  In addition, this expression properly handles the 11th hour.   Watermasysk's would take the 10th and 12th hour but not the 11th.  This regex has been tweaked to do so.  Does not handle the February 29th problem on non-leap years yet.  Will learn a little more about RegEx and do so in later submission.
^(((((0[13578])|([13578])|(1[02]))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(30)))|((02|2)[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s(((0[1-9])|([1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=362
#A: Stefan Beylen
#D: Validates Austrian Cellular Phone Numbers. Works with ONE, T-Mobile, A1, Telering and new Provider "Drei". WITHOUT Country Code Verification.
^0(6[045679][0469]){1}(\-)?(1)?[^0\D]{1}\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=363
#A: Daniel Pickles
#D: Matches a whole number between 1 and 20 inclusively
^1?[1-9]$|^[1-2]0$

#U: http://regexlib.com/REDetails.aspx?regexp_id=364
#A: Hakim SALHI
#D: For Date format MM-JJ-YYYY validation
^[\w-\.]+@([\w-]+\.)+[\w-]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=367
#A: Jos Krause
#D: Validates Dutch Postal Codes (ZipCode). There was a previous one listed here, but it's not entirely correct. Namely that dutch postal codes can contain a zero but cannot start with one, so this one is the adjusted version.
^[1-9][0-9]{3}\s?[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=368
#A: sanjayanthan vijayakeerthi
#D: Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric .This will be usefull in money related
#D: fields or decimal fields. 
^([0-9]*|\d*\.\d{1}?\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=369
#T: DateTime M/d/y hh:mm:ss
#A: Michael Ash
#D: DateTime Validator. 
^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=370
#T: Time
#A: Michael Ash
#D: This RE validates times patterns.
^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=371
#A: Robert Altman
#D: This expression separates a Visual Basic (VB) source code line into the code part and the comment part (if any, following an apostrophe character not enclosed in quote marks).
^(?<Code>([^"']|"[^"]*")*)'(?<Comment>.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=372
#A: Mladen Mihajlovic
#D: Matches HTML Color strings. Like #FFFFFF is white and #000000 is black and #FF0000 is red and so on...
^(#){1}([a-fA-F0-9]){6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=373
#A: Darren Neimke
#D: Matches and segments the sections of an opening tag. For more detailed information refer to this blog entry: http://weblogs.asp.net/dneimke/posts/25616.aspx
(?'openingTag'<)\N\s*?\N(?'tagName'\w+)\N# Once we've got the tagname, match zero\N# or more attribute sequences\N(\s*?\N# Atomic Grouping for efficiency\N(?>\N(?!=[\/\?]?>)         # Lookahead so that we can fail quickly\N# match Attribute pieces\N(?'attribName'\w+)\N(?:\s*\N(?'attribSign'=)\N\s*\N)\N(?'attribValue'\N(?:\'[^\']*\'|\"[^\"]*\"|[^ >]+)\N)\N)\N)*\N\s*?\N# Closing Tag can be either > or />\N(?'closeTag'[\/\?]?>)  

#U: http://regexlib.com/REDetails.aspx?regexp_id=374
#A: Mathews Inga
#D: Date in DD/MM/YYYY format.
#D: Fecha en formato DD/MM/AAAA.
(((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])(\d{4}))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])(\d{4}))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=375
#A: Carlos R. L. Rodrigues
#D: Brazilian cep
(^\d{5}\x2D\d{3}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=376
#A: Sung Lee
#D: This regex will match SQL Server datetime values, allowing date only, allowing zero padded digits in month, day and hour, and will match leap years from 1901 up until 2099.
^((((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9]))))[\-\/\s]?\d{2}(([02468][048])|([13579][26])))|(((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))[\-\/\s]?\d{2}(([02468][1235679])|([13579][01345789]))))(\s(((0?[1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=377
#A: David Tersigni
#D: matches IP address in hex form in dotted or not dotted notation
[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=378
#A: David Tersigni
#D: Very Simple Match for dotted Decimal IP address.  Doesn’t Validate addresses
[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=379
#A: Danil Sholokhov
#D: Matches number in format XX.XX Please note that this expression allows maximum of 8 digits before the dot and 2 (optional) digits after the dot.
(^[0-9]{1,8}|(^[0-9]{1,8}\.{0,1}[0-9]{1,2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=380
#A: David Tersigni
#D: Simple match for U.S. Amateur Radio Call signs
#D: Must start with an A,K,N or W.
#D: 1 or two prefix letters (not case sensitive),
#D: Exactly one zone digit,
#D: One to three suffix digits( not case sensitive).
#D: 73
^[AaWaKkNn][a-zA-Z]?[0-9][a-zA-Z]{1,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=381
#A: Sjef van Leeuwen
#D: Based of from Steward Haddock's domain nam
#D: Checks domain names. This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.), hypens(-). and valid extension.
^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly| ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk| pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr| st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|AERO|BIZ|COM|COOP|EDU|GOV|INFO|INT|MIL|MUSEUM|NAME|NET|ORG|AC|

#U: http://regexlib.com/REDetails.aspx?regexp_id=382
#A: Yosi Taguri
#D: using match.Result("$1.$2.$3.$4")
#D: will return the assembly version of a given c# AssemblyInfo.cs file
^\[assembly: AssemblyVersion\(\"([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=383
#A: Tony Austin
#D: 
<!--.*?-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=384
#A: paolo beltrami
#D: This simple regexp should match any possible italian address entry and doesn't match NULL entries (good if address is required). Should work well for any other address (it's been verified against 250 addresses from most european countries, usa and australia. Please mail me if there's something missing
^[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\']+[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\' ]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=385
#T: Days of the week
#A: Michael Ash
#D: This RE matches Days of the week or their abbreviations.
^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=386
#A: Darren Neimke
#D: 
# Greedy, no-backtracking and only named groups capture.\N(?n)\N^\N(\N(?'allowDay'Sun|Mon|Fri)\N|\N(Sat\N# if we match 'ur' then constrain\N# the next char with a lookahead\N# for 'd' so that we don't match on\N# Satur.\N(?'allowDay'ur(?=d))?\N)\N|\N(\N(\N(\NT\N(\N# Accepts "Tu.", "Tue."\Nue?\N|\N# Accepts "Th.", "Thu." or "Thur."\Nh(ur?)?\N)\N)\N|\N(\NWed\N# if "ne" matched then constrain\N# the next chars with a lookahead\N# for 'sd' so that we don't match on\N# Wedne.\N(ne(?=sd))?\N)\N)\N(\N# If 'Tue' or 'Thur' or 'Wedne' matched\N# then match 's' in the "allowDay" Group.\N(?<=(e|r))\N(?'allowDay's)\N)?\N)\N)\N# Optional ending match of "day" or "."\N(\N# if Group[allowDay] succeeded then allow\N# the letters "day" or a full-stop.  If it\N# did not succeed, a full-stop is required.\N(?(allowDay)day)|\.\N)?\N$

#U: http://regexlib.com/REDetails.aspx?regexp_id=387
#A: Joshua Olson
#D: Matches a valid "empty" tag (has trailing slash).  Note, if you run it against a string such as <img src="test.gif" alt="<hr />"> it will indeed return a match.  But, the match is not at character 1 like you'd suspect, but rather it's matching the internal <hr />.  If you look at the source of this tag (http://concepts.waetech.com/unclosed_tags/) you'll find a whoe suite of regex's for matching html tags.  Using them you could feasibly step though a document and avoid this mismatch as the outer tag would match *in totality* and you'd completely skip this inner match.
<[a-zA-Z]+(\s+[a-zA-Z]+\s*=\s*("([^"]*)"|'([^']*)'))*\s*/>

#U: http://regexlib.com/REDetails.aspx?regexp_id=388
#A: Laurent J
#D: for validate a email, but with this regex it 's possible : a._-z@a_.....____---.com
^[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9]@[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9][\.][a-z0-9]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=389
#A: Colin Albert
#D: Validates any line begining with an alpha-numeric. If you need a regular expression that fails only for a zero length string.  Remove the \w+. I originally attempted to post was ^.*$ but the input form would not allow it.
^\w+.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=390
#T: YYYY-MM-DD[ HH:MM[:SS]]
#A: Brett ODonnell
^((\d{2}(([02468][048])|([13579][26]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[\-\/\s]?((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s(((0?[1-9])|(1[0-9])|(2[0-3]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])))?))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=391
#A: Mark Salisbury
^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)*[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=395
#A: Max Lu
#D: Double byte charactors validator.
#D: The rule applies to double byte charactor input validation.
^[\u0081-\uFFFF]{1,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=396
#T: US States and Territories
#A: Mike Hamilton
^((A[LKSZR])|(C[AOT])|(D[EC])|(F[ML])|(G[AU])|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EHDAINSOT])|(N[EVHJMYCD])|(MP)|(O[HKR])|(P[WAR])|(RI)|(S[CD])|(T[NX])|(UT)|(V[TIA])|(W[AVIY]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=397
#A: Jason N. Gaylord
#D: It is the exact phone number regular expression for '(###) ###-####'.
#D: Written by Jason Gaylord.
^([\(]{1}[0-9]{3}[\)]{1}[ ]{1}[0-9]{3}[\-]{1}[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=398
#A: Michael Gaertner
#D: Matches variations on date/time/AM-PM. Must have 4 digit year, but everything else is open. Restrictions are: 4 digit year, months 1-12, hours 1-23, minutes and seconds 1-59, any case of AM and PM. If this don't woik, I wrote it, lemmy know.
^(([0]?[1-9]|1[0-2])/([0-2]?[0-9]|3[0-1])/[1-2]\d{3})? ?((([0-1]?\d)|(2[0-3])):[0-5]\d)?(:[0-5]\d)? ?(AM|am|PM|pm)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=399
#A:  
#D: Matches positive whole numbers from 0-999
^\d(\d)?(\d)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=400
#A: Ian Wallace
#D: More flexible date validator. Allows either spaces, / or - as dividers, also allows for fully uppercase months, year as 4 digit.
^(3[0-1]|2[0-9]|1[0-9]|0[1-9])[\s{1}|\/|-](Jan|JAN|Feb|FEB|Mar|MAR|Apr|APR|May|MAY|Jun|JUN|Jul|JUL|Aug|AUG|Sep|SEP|Oct|OCT|Nov|NOV|Dec|DEC)[\s{1}|\/|-]\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=401
#A: Michiel Lankamp
#D: Used for dutch postalcodes; no leading zero. 4 numbers and 2 letters.
^[1-9]{1}[0-9]{3}\s{0,1}?[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=402
#A: Rod Early
#D: This validates Length times Width times Height measurements, which consists of 3 whole or decimal numbers separated by an x.
^\s*(((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*) )\s*[xX]\s*){2}((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*))\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=403
#A: andrew stone
#D: Simple expression for matching all commas and all whitespace characters:  ASCII (13,10,44)
[\\s+,]

#U: http://regexlib.com/REDetails.aspx?regexp_id=404
#T: MMM dd, yyyy Date
#A: Michael Ash
#D: This RE validate Dates in the MMM dd, yyyy format from Jan 1, 1600 to Dec 31, 9999. The format is as follows: The name or 3 letter abbreivation, without a period, of the month, then a space then the day value then a comma then a space finally the year. The correct number of day are validated for each month include leap years. The name of month is case sensitive.
^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\ ((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\,\ ((1[6-9]|[2-9]\d)\d{2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=405
#T: dd MMM yyyy Date
#A: Michael Ash
#D: This RE validates dates in the dd MMM yyyy format. Spaces separate the values.
^((31(?!\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=406
#T: Months
#A: Michael Ash
#D: This RE validate the full name of the months.
^(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=407
#A: Rogerio Pereira
#D: Brazilian CPF - Personal document in Brazil.
(\d{3}.?\d{3}.?\d{3}-?\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=408
#A: Eldon Mellaney
#D: A simple regular expression to determine if a subnet mask is contiguous; that is, the submask must start with a 1 bit followed by 0 or more 1 bits, followed by 1 or more 0 bits until the end of the submask.
^1+0+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=409
#A: Dany Lauener
#D: dd/MM/yyyy with leap years 100% integrated Valid years : from 1900 to 9999.
#D: As usual, many tests have been made.
#D: This was requested by a user :
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=409
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">29/02/2000 <span class='separator'>|</span> 30/04/2003 <span class='separator'>|</span> 01/01/2003
^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((19|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=410
#T: decimal
#A: James Dennis
#D: validate a number 5 digits and 2 decimal places allowing zero
^\d{1,5}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=411
#A: Paul Ashton
#D: validates  to 5 digits and 2 decimal places but not allowing zero
(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=412
#A: Brenden Salta
#D: A general string validation to insure that NO malicious code or specified characters are passed through user input.  This will allow you to input any characters except those specified.  The expression above does not allow user input of <>`~!/@\#}$%:;)(_^{&*=|'+. Input as many invalid characters you wish to deny.  This really works!
^[^<>`~!/@\#}$%:;)(_^{&*=|'+]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=413
#A: Jeff Gabriel
#D: More permissive than others on the site, this one allows you to let a user enter US phone numbers in the way they most commonly use, without letting them enter non-valid combinations.
^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=414
#A: Craig Pearson
#D: Matches a comma-seperated list of year(s).
^([1-9]{1}[0-9]{3}[,]?)*([1-9]{1}[0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=415
#A: luca milan
#D: Match the content of any regular tag/s 
<(?<tag>.*).*>(?<text>.*)</\k<tag>>

#U: http://regexlib.com/REDetails.aspx?regexp_id=416
#A: Func toid
#D: This works for all accept 01/01/0000 mainly 0000. can anybody suggest a solution.
^(((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|11)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((02)([-./])(0[1-9]|1[0-9]|2[0-8])([-./])(\d{4}))|((02)(\.|-|\/)(29)([-./])([02468][048]00))|((02)([-./])(29)([-./])([13579][26]00))|((02)([-./])(29)([-./])([0-9][0-9][0][48]))|((02)([-./])(29)([-./])([0-9][0-9][2468][048]))|((02)([-./])(29)([-./])([0-9][0-9][13579][26])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=417
#A: Matthew Aznoe
#D: Regular expression for US (ZIP and ZIP+4) and Canadian postal codes.  It allows 5 digits for the first US postal code and requires that the +4, if it exists, is four digits long.  Canadain postal codes can contain a space and take form of A1A 1A1.  The letters can be upper or lower case, but the first letter must be one of the standard Canadian zones: A,B,C,E,G,H,J,K,L,M,N,P,R,S,T,V,X,Y.
^((\d{5}-\d{4})|(\d{5})|([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\d[A-Za-z]\s?\d[A-Za-z]\d))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=418
#A: Scott Long
#D: I wrote this regular expression because a project I was working on required a stricter validator on social security numbers. There are actually gov't standards on what is a valid social: The first 3 digits can't be > 779, The first 3 digits can't be 000, The second 2 digits can't be 00, and the last 4 digits can't be 0000. This regex handles all these cases and checks formatting for numbering and dashes (###-##-####)
^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=419
#A: Ashish Sheth
#D: This expression validates for valid C# or C++ identifier
^[a-zA-Z_]{1}[a-zA-Z0-9_]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=420
#A: Josh Crosby
#D: This will match single numbers,the first block [1346] checks for single digits of 1, 3, 4 or 6, could easily by [1-5] as well. The second block [10] checks for 10 only.
#D: This matches inclusively.
^[1]$|^[3]$|^[4]$|^[6]$|^[1]0$

#U: http://regexlib.com/REDetails.aspx?regexp_id=421
#A: Josh Crosby
#D: This is for matching Single uppercase Letters inclusively
^[A]$|^[C]$|^[D]$|^[F]$|^[H]$|^[K]$|^[L]$|^[M]$|^[O]$|^[P]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=422
#A: Martin Schwedes
#D: this is a very little regex for use within a content management software.  links within textfields has not to be written in html.  the editor of the cms is instructed to use it like this:  1. mention spaces in front and behind the url  2. start url with http://, mailto://, ftp:// ...  3. use optional linktext within #linktext# (separated with single space)  4. if there is no linktext the url/email will show up as linktext  5. avoid url with spaces in filename (use %20 urldecode)   replace pattern (space in front):   <a href="\\1\\3\\4" target="_blank">\\3\\6</a>
(mailto\:|(news|(ht|f)tp(s?))\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) 

#U: http://regexlib.com/REDetails.aspx?regexp_id=423
#A: Jeremy Chin
#D: Hi, this is my first try at regular expressions. I was having trouble understanding the syntax and finally I got it work!
(^\-?[0-9]*\.?[0-9]+$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=424
#A: T H
#D: This regular expression will match on a real / decimal / floating point / numeric string with no more than 2 digits past the decimal.  The negative sign (-) is allowed.  No leading zeroes or commas.  It is based on a currency regular expression by Tom Persing.
^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=425
#A: Roberto Misticoni
#D: This regular expression match any valid file path. It checks local drives and network path. The file extension is required.
^([a-zA-Z]\:|\\\\[^\/\\:*?"<>|]+\\[^\/\\:*?"<>|]+)(\\[^\/\\:*?"<>|]+)+(\.[^\/\\:*?"<>|]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=426
#A: David Walker
#D: A regex that attempts to accurately parse the elements from a proper name where the format is in <<First, Last>> order or some permutation of that order.  Critiques and suggestions for improvement are welcome. 
(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w*|[A-Z]?\.?)\s?(?<LastName>[A-Z]\w*\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=427
#A: David Walker
#D: Fine-tuned the previous version to handle surnames with embedded caps like McCoy and DeCarlo.
(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>[A-Z]?\w{0,3}[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=428
#A: David Walker
#D: Getting closer now...  this one has the functionality of the previous two and matches on names like "Jill St. John" as well.
(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>(?:[A-Z]\w{1,3}|St\.\s)?[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=429
#A: David Walker
#D: Regex parses elements from a proper name in <<Last, First>> order and permutations.  Comments and critiques are welcome.
(?<LastName>[A-Z]\w+\-?[A-Z]?\w*),\s(?<Suffix>Jr\.|Sr\.|IV|III|II)?,?\s?(?<FirstName>[A-Z]\w*\-?[A-Z]?\w*\.?)\s?(?<MiddleName>[A-Z]?\w*\.?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=430
#A: adam willding
#D: Street Address. While far from perfect it validates street addresses reasonably. Created with absolutely no experience using a cool tool downloaded from http://www.codeproject.com/dotnet/expresso.asp?target=e%20xpresso
\d{1,3}.?\d{0,3}\s[a-zA-Z]{2,30}\s[a-zA-Z]{2,15}

#U: http://regexlib.com/REDetails.aspx?regexp_id=431
#A: Logan Tran
#D: HTML Pattern Matching
#D: PLEASE HELP
#D: /<[^>]*>/ig
#D: The above pattern is only successful when html tag are simple (they don't include any javascript).  This mean that the pattern will fail if something like this is within the tag <input type=button value=test onclick='if(n.value>5)do_this();'>.  It will not match the entire open n close sign.
#D: How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign and not when it just see a > within a '' or "".
#D: <input type=button onclick='if(n.value>5)do_this();'> not this <br>
#D: <input type=button onclick="n>5?a():b();" value=test> not this <br>
#D: <input type=button onclick="n>5?a(\"OK\"):b('Not Ok');" value=test> not this <br>
#D: <input type=button onclick='n>5' value=test onmouseover="n<5&&n>8" onmouseout='if(n>5)alert(\'True\');else alert("False")'> not this <br>
#D: Any help would be greatly appreciate.  Thanks a whole lot.
#D: Logan
<[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=432
#A: Giorgio Spugnesi
#D: Match italian telephone number with prefix followed by "/", "-" or blank and number. Usefull with numeric keybord!
^([0-9]*\-?\ ?\/?[0-9]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=433
#T: SKK-XML-All child nodes with no nested nodes
#A: skk
#D: All child nodes with no nested nodes
#D: ----------------------
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=433
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">a
<(\w+)(\s(\w*=".*?")?)*((/>)|((/*?)>.*?</\1>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=435
#A: Logan Tran
#D: Can anyone help me with this problem?  I want X to give me the correct index of >.  For example if this is my code:
#D: var MsgString="<button onclick='4>5?a():b();'>";
#D: X=MsgString.search(/>/ig);
#D: X will give me 18 instead of 30.  How can I get it to ignore > that are within quotes?  Please help.  I would really appreciate it if anybody could give me some advice.  Thanks so much.
#D: -Logan
<(.*?)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=436
#A: Darren Neimke
#D: Simple Postcode - this is the first test of the new WebService :-)
(\d{4,6})

#U: http://regexlib.com/REDetails.aspx?regexp_id=438
#A: Darren Neimke
#D: Tests for all numbers OR all letters (upper or lower case)
#D: ( posted from WebService - http://regexlib.com/webservices.asmx?op=Save )
#D: ( updated from WebService - http://regexlib.com/webservices.asmx?op=Save )
^(\d+|[a-zA-Z]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=439
#A: Rogerio Pereira
#D: Brazilian CEP. A variable of others validations, but only numbers are allowed.
^\d{5}(\d{3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=445
#A: Darren Neimke
#D: 
(?s)/\*.*\*/

#U: http://regexlib.com/REDetails.aspx?regexp_id=446
#A: Ed Stafford
#D: My first Expression. This will match US postal codes (zip codes) using simple 5 digit format with optional 4 digit extention seperated by a space or hyphen. Will not accept letters.
#D: example: 12345 or 12345-1234 or 12345 1234.
^[0-9]{5}([\s-]{1}[0-9]{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=454
#A: Nitesh Waghela
#D: 
^[a-z]+[0-9]*[a-z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=455
#A: Joe Gass
#D: Credit card validator
#D: Works for switch card numbers too
#D: Switch card bit is (\d{6}[-\s]?\d{12})
#D: Credit card bit is (\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})
#D: I use this as a client side test before running a more comprehensive server side check.
(\d{6}[-\s]?\d{12})|(\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=456
#A: Steven Smith
#D: This is a regex I wrote to capture requests to AspAlliance.com with an article id as the only thing after the domain.  So http://aspalliance.com/123 would go to article number 123.  It maps the URL to the actual aspx file that displays the article based on the ID.
\.com/(\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=457
#A: Darren Neimke
#D: Matches a string to ensure that it does not end with .aspx; sure, you'd probably use string handling to do something this simple but, in the real world you'd whack a regex which validates a valid url to the front of this.
#D: The pattern was created by Wayne King; you can read about it here:
#D: http://scottwater.com/blog/posts/10204.aspx 
.*?$(?<!\.aspx)

#U: http://regexlib.com/REDetails.aspx?regexp_id=458
#T: Phone Numbers
#A: Dean Dal Bozzo
#D: This regular expressions matches phone numbers with area codes and optional US country code and optional phone extension.  User have so many ways of entering phone numbers into input fields.  This allows for some of the ones I've encountered.  Feel free to contact me if you find ones that do not match.
^(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*[-\/\.]?\s*(\d{3})\s*[-\/\.]?\s*(\d{4})\s*(([xX]|[eE][xX][tT])\.?\s*(\d+))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=459
#A: Chris Weidert
#D: US Zip Code + 4 digit extension Postal Code
^[0-9]{5}([- /]?[0-9]{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=460
#A: Bernard Martin-Rabaud
#D: matches any string  with characters repeated more than twice, sometimes used as fake input
(.)\1{2,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=461
#A: Darryl Kuhn
#D: This expression is useful for determining if an address is a PO Box type address. This can be useful in shipping systems as well as other systems that need to  make determinations based on the type of address imputed.
^p(ost)?[ |\.]*o(ffice)?[ |\.]*(box)?[ 0-9]*[^[a-z ]]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=462
#T: Font Sizes
#A: Vincent Faller
#D: It can be used to validate Font Sizes.
#D: Thanks to Gideon Engelberth for the shorter version of my original expression.
^\d+\x20*([pP][xXtT])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=463
#T: ISBN-10
#A: Michael Ash
#D: This RE validates the format of an ISBN number
ISBN\x20(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=464
#A: Tanguy Pruvot
#D: grab all tags attributes...
#D: <img src="truc"> returns :
#D: <
#D: (1:img)
#D: (2: src="truc")
#D: >
#D: i use it to clean html pages to grab infos...
#D: use a RegEx Replace with "<$1>" to keep only tags codes...
<([^\s>]*)(\s[^<]*)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=465
#A: Tanguy Pruvot
#D: All tags in first submatche
#D: All attributes in second one...
<([^<>\s]*)(\s[^<>]*)?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=466
#A: Eli Robillard
#D: "Starts with but does not end with."
#D: I needed a pattern to require certain first (and optional middle) names, but to fail for certain last names. So if Bob, John, and Mary are acceptable first names but the White's are always rejected then...
^((Bob)|(John)|(Mary)).*$(?<!White)

#U: http://regexlib.com/REDetails.aspx?regexp_id=469
#A: Somasundaram Thirugnanam
#D: Trying to remove all these characters in the regular expression: still working on it
#D: !~/[><*\|]/#$%^&():;{},?`_-
[^!~/><\|/#%():;{}`_-]

#U: http://regexlib.com/REDetails.aspx?regexp_id=470
#A: Shawn Hall
#D: This pattern returns as much of the first x characters of a string as full words or sentences as a match, where x is currently 20. Change x to adjust the length supported in your database field.
#D: I'm currently using this within a string shortening utility to shrink large text regions to word/sentance-boundary elements and appending an ellipsis as a text continuator.
^([\s\S]){1,20}([\s\.])

#U: http://regexlib.com/REDetails.aspx?regexp_id=471
#T: State Codes
#A: Michael Ash
#D: The RE match U.S. state abbreviation used by the U.S. Post Office.
^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=472
#T: US Postal Address
#A: S M Mahbub Murshed
^(?n:(((?<address1>(\d{1,5}(\ 1\/[234])?(\x20[A-Z]([a-z])+)+ )|(P\.O\.\ Box\ \d{1,5}))\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\x20\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\.?)\s{1,2})?))?)(?<city>[A-Z]([a-z])+(\.?)(\x20[A-Z]([a-z])+){0,2})([,\x20]+?)(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])([,\x20]+?)(?<zipcode>(?!0{5})\d{5}(-\d {4})?)((([,\x20]+?)(?<country>[A-Z]([a-z])+(\.?)(\x20[A-Z]([a-z])+){0,2}))?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=473
#A: Giorgio Spugnesi
#D: This pattern match italian fiscal code (codice fiscale).
^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=474
#A: Alsu Fifty
#D: Used to verify that the string consists of only A-z, 0 - 9 and underscore. Several words allowed, only one space between them. No spaces up front. Hey, I know it's easy, but it was not in the library! Plus, the test option here is not working well all the time.
(\w(\s)?)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=476
#A: James Fal
#D: Updated, changed [\w]* to [\w]+ because pattern should not match Sub (), there would be no function name which would be incorrect.
#D: Will extract function declarations from ASP or also VB I assume. Will even capture declarations that break across new lines or ones that use the underscore(line continuation character) in Microsoft's VB, VBA, ASP, etc. Had to put this together to document some code on a project and didn't see anything like it on the web. I hope it helps out anyone else who has to re-engineer ASP or VB code. 
^(Function|Sub)(\s+[\w]+)\([^\(\)]*\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=478
#A: Jon Stephens
#D: Basic US phone number matching pattern.  I found this place and used a regex, so figured I'd share.
^(\(?\d\d\d\)?)?( |-|\.)?\d\d\d( |-|\.)?\d{4,4}(( |-|\.)?[ext\.]+ ?\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=479
#A: Bob Kranson
#D: Time off hours edit for quarter hour(s) less than eight.
^(([8]))$|^((([0-7]))$|^((([0-7])).?((25)|(50)|(5)|(75)|(0)|(00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=480
#A: Jay Solomon
#D: I know its probaly in the library, but i did not see it.
#D: US zip pattern
#D: 5 digits 01234 or 5 digits + 4 01234-1234
(^\d{5}$)|(^\d{5}-\d{4}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=481
#A: Manpreet Grewal
#D: This regular expression will match date given in any format expcept (mmm). Its speciality is that it divides dates into <from> part and <to> part. Use Groups to access these parts.
#D: e.g.  JANUARY 1998 TO JUNE 2000
#D: <From>="JANUARY 1998"
#D: <to>="JUNE 2000"
^(?<From>(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER|[ ]|,|/|[0-9])+)(-|–|:|TO)?(?<To>(JANUARY|FEBRUARY|MARCH|APRIL|MAY|JUNE|JULY|AUGUST|SEPTEMBER|OCTOBER|NOVEMBER|DECEMBER|[ ]|,|/|[0-9]|PRESENT)+)+(:)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=482
#A: Manpreet Grewal
#D: Its extracts telephone numbers
(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)([ ]|[:]|\t|[-])*(?<Where>Home|Office|Work|Away|Fax|FAX|Phone)|(?<Where>Home|Office|Work|Away|Fax|FAX|Phone|Daytime|Evening)([ ]|[:]|\t|[-])*(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)|(?<Telephone>([(]([0-9]){3}[)]([ ])?([0-9]){3}([ ]|-)([0-9]){4}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=483
#A: Manpreet Grewal
#D: This is HTTP Url extractor
(?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=484
#A: Manpreet Grewal
#D: E-mail addresses matcher
(?<email>(?![ ])(\w|[.])*@(\w|[.])*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=485
#A: Jared Tullis
#D: This was used to process a bunch of lines of information to determine if a line was a North American phone number or not.  It accepts numbers with or without area code with or without parenthesis and sepearated by space, dash or period.
([\(]?(?<AreaCode>[0-9]{3})[\)]?)?[ \.\-]?(?<Exchange>[0-9]{3})[ \.\-](?<Number>[0-9]{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=486
#A: Michael Ash
#D: This pattern captures <lastname><suffix>,<prefix><firstname><mname> Names must start with a capital letter. Last names may be hyphenated. First names can have two parts ie "Mary Anne" if there are more than two names after the comma. Suffixes can number up to XXX (30th). Standard prefixes are optional (Mr Miss)
^(?n:(?<lastname>(St\.\ )?(?-i:[A-Z]\'?\w+?\-?)+)(?<suffix>\ (?i:([JS]R)|((X(X{1,2})?)?((I((I{1,2})|V|X)?)|(V(I{0,3})))?)))?,((?<prefix>Dr|Prof|M(r?|(is)?)s)\ )?(?<firstname>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,2})?(\ (?<mname>(?-i:[A-Z])(\'?\w+?|\.))){0,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=487
#A: Darren Neimke
#D: This pattern validates ISBN numbers.  I've written a full description about it here:  http://regexblogs.com/dneimke/posts/201.aspx
^ISBN\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=488
#A: Dany Lauener
#D: Matching : dd/MM/yy
#D: Leap years compatible
#D: Italian style, just for more fun.
#D: Please, don't forget to rate it if you use it. THX
^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/(\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/(\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/(\d{2}))|(29\/02\/((0[48]|[2468][048]|[13579][26])|(00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=489
#A: Alanski Perryman
#D: Spam stopper
.*[\$Ss]pecia[l1]\W[Oo0]ffer.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=490
#A: Alanski Perryman
#D: Spam Stopper
.*[Vv][Ii1]agr.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=491
#A: Alanski Perryman
#D: Spam Stopper
.*[Oo0][Ee][Mm].*

#U: http://regexlib.com/REDetails.aspx?regexp_id=492
#A: Alanski Perryman
#D: Spam Stopper
.*\$AVE|\$ave.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=493
#A: Alanski Perryman
#D: Spam Stopper
.*[Pp]re[Ss\$]cr[iI1]pt.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=494
#A: Alanski Perryman
#D: Spam Stopper
.*[Pp]en[Ii1][\$s].*

#U: http://regexlib.com/REDetails.aspx?regexp_id=495
#A: M h
#D: Matches UK phone numbers - London and regional. It started off with something fairly short posted by liljim at www.forums.devshed.com but I wanted a little more precision to weed out all the zeros. Now it also weeds out premium phone numbers (as of 19/12/03).
^\s*\(?(020[7,8]{1}\)?[ ]?[1-9]{1}[0-9{2}[ ]?[0-9]{4})|(0[1-8]{1}[0-9]{3}\)?[ ]?[1-9]{1}[0-9]{2}[ ]?[0-9]{3})\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=496
#A: T H
#D: This regular expression matches on postive whole numbers and 0.  Whole numbers that are left padded with 0's are not a match.
^(0)$|^([1-9][0-9]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=497
#A: Andres Garcia
#D: Matches a string used to rewrite urls under the WSRP specification.  It captures the URL-Encoded string that represents a url.  Url validation is not provided.
wsrp_rewrite\?(?<wsrp_uri>[\w%:&\\/;.]*)/wsrp_rewrite

#U: http://regexlib.com/REDetails.aspx?regexp_id=498
#A: Andres Garcia
#D: Percentage (From 0 to 100)
^(0*100{1,1}\.?((?<=\.)0*)?%?$)|(^0*\d{0,2}\.?((?<=\.)\d*)?%?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=499
#A: Brian Bothwell
#D: None of the other URL regex's seemed to work right for me, so i threw this together. works well with PHP's ereg().
^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)?((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,4})(\:[0-9]+)?(/[^/][a-zA-Z0-9\.\,\?\'\\/\+&%\$#\=~_\-@]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=500
#A: mike harber
#D: Matches on MMDDYYYY only, requires all 8 digits
((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=501
#A: Brian Bothwell
#D: Ok here's an updated URL regex for you folks. It allows localhost and all TLDs. Feel free to add each country code individually if you want a tighter match.
^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&%\$#\=~_\-]+))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=502
#A: Prashant Nayak
#D: Positive Whole number matched from 0 to 9999999. Only 7 digits length is allowed.
^\d{1,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=503
#A: Matt Martens
#D: Social Insurance Number validator.
#D: Canadians only need apply.
#D: If somebody could help me (I'm bad at regex), I would like to modify this so that if there is one space after the 3rd digit (or 6th) then there must be one after the 6th (or third).  
^\d{3}\s?\d{3}\s?\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=504
#T: mm/dd/yyyy  hh:MM:ss AM/PM DateTime
#A: Michael Ash
#D: New DateTime Regex. Rebuilt better than before, better, stronger, faster. 
(?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d)\d{2})(?(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=505
#T: dd/mm/yyyy hh:MM:ss Datetime
#A: Michael Ash
#D: DD/MM/YYYY format New DateTime Regex. Rebuilt better than before, better, stronger, faster. This regex will validate a date, time or a datetime. It will also capture the date fields and the time. Dates are in the DD/MM/YYYY format and validated for months, number of days in a month and leap years (29/2) Date field can be separated by matched periods(.), dashes(-) or forward slashes(/).  Year range 1600-9999 Time is either 12 hour AM/PM format (HH:mm:ss AM), where minutes and seconds are optional. AM or PM required. or 24 hour military format (HH:mm:SS), from 00:00:00 to 23:59:59, where hours and minutes fields are required, including leading 0 for hours less than 10. Datetime is the above date and time formats separated by a space, with the date first (DD/MM/YYYY HH:mm:SS) !IMPORTANT NOTE: your regex engine must support lookaheads and named groups to use this expression
(?n:^(?=\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0?[1-9]|1\d|2[0-8])(?<sep>[/.-])(?<month>0?[1-9]|1[012])\2(?<year>(1[6-9]|[2-9]\d)\d{2})(?:(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=506
#T: Resale License Number (CA)
#A: Dean Dal Bozzo
#D: California Resale License number validator. Validates Letters and Numbers or Number only. Letters: First 2 letters can be SR, SS, ST , SX, SY, SZ (TAT Code)  Next optional letter can be S,X,Y,Z.  Next letters must be a minimum of two and a maximum of 3 (District Code).  Numbers:  Can be 8-9 numbers. Numbers can be delimited with a hypen or spaces after the first 2 numbers.  Note: I use () to extract the information I want for use in other scripts.
^((([sS][r-tR-Tx-zX-Z])\s*([sx-zSX-Z])?\s*([a-zA-Z]{2,3}))?\s*(\d\d)\s*-?\s*(\d{6,7}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=507
#A: Paul Fox
#D: This tests an input string for only a-z and A-Z and only allows underscores, hyphens and spaces.  The purpose is to force users to generate legitimate, readable file names that can be streamed from the web.
^[a-zA-Z0-9_\s-]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=508
#A: Steven Smith
#D: In response to a question on the regex list at www.aspadvice.com, this expression should ensure that a login field's username includes a 'DOMAIN\' prefix.  The latter part of the expression should probably be limited so that it only allows usernames of appropriate lengths, perhaps 3 to 20 characters (by replacing + with {3,20} for instance).
^DOMAIN\\\w+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=509
#A: Joseph Lundgren
#D: Simple email subject line matching. This regex matches those really annoying emails that begin with 0-5 spaces, followed by a fake reply, contain a random string of letters (usually CAPITALIZED) from 1-10 characters long followed by a comma, and then followed by three lower-case words each from 1-10 characters long. In my experience, the 3 trailing words are always lower-case. the words make begin with, contain, or end in common punctuation marks.
^\W{0,5}[Rr]e:\W[a-zA-Z0-9]{1,10},\W[a-z]{1,10}\W[a-z]{1,10}\W[a-z]{1,10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=512
#A: Roman Lukyanenko
#D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.jpg
#D: or C:\Windows\Microsoft.NET etc
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(jpg|JPG)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=513
#A: Byron Saltysiak
#D: Matches two uppercase characters. Simple pattern used in form validation for state inputs (assuming you aren't using a drop-down).
^[A-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=514
#A: Elmer Cadelina
#D: Best Use validation to accept a valid "MonthName(,) Year".
#D: It can validate an entry with or without comma (,).
^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\,*\s\s*\d{4}$|^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\,*\s\d{4}$|^(January|February|March|April|May|June|July|August|September|October|November|December)\,*\s\d{4}$|^(january|february|march|april|may|june|july|august|september|october|november|december)\,*\s\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=515
#A: Pete Lindquist
#D: I built this expression to test a string in ASP for valid username and password constraints.  It can be adapted for any number of scenerios.  For instance in this case, we needed to ensure the username someone wanted was not all numbers or all letters and was 6-15 characters in length with no special characters.  This expression tests negatively for all number cases, then all letter cases, and lastly tests for only alphanumeric characters in the required range.  In other words: the match must be alphanumeric with at least one number, one letter, and be between 6-15 character in length.  
(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=516
#A: Edward Collier
#D: Tests Vehicle Identification Numbers (VINs).  This works for a Mitsubishi cars in the UK - but I have been unable to determine whether the format is for UK vehicles or applies only to this make.  The requirements are that the first 9 characters and the 11th character are alpha-numeric excluding i, I, o or O.  The 10th character is the chassis year, and is alpha-numeric excluding i, I, o, O, q, Q, u, and U.  The final 6 characters are numeric.  The string is 17 characters in length.  Any refinements would be greatly appreciated!
^(([a-h,A-H,j-n,J-N,p-z,P-Z,0-9]{9})([a-h,A-H,j-n,J-N,p,P,r-t,R-T,v-z,V-Z,0-9])([a-h,A-H,j-n,J-N,p-z,P-Z,0-9])(\d{6}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=517
#A: paul Snabilie
#D: Postalcode Danmark
^[D-d][K-k]-[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=518
#A: paul Snabilie
#D: match all danish postal code
#D: update from last danish postal code expression
^[D-d][K-k]( |-)[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=519
#A: paul Snabilie
#D: Swedish postcodes (as far as i know)
^[S-s]( |-)?[1-9]{1}[0-9]{2}( |-)?[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=520
#A: Simon Christensen
#D: Peseudo-HTML code matcher. Allows for one parameter within the first tag (name is optional), the value of which can be optionally delimited by either double or single quotes. Uses backreferencing to ensure that the end and start tags match, and that any single or double quotes match. Very useful for web forums or any situation where users may be prompted to enter text for display on a webpage somewhere, as it can be quickly processed into HTML without allowing HTML to be specified within the input itself (which may pose a security risk). 
(\[(\w+)\s*(([\w]*)=('|")?([a-zA-Z0-9|:|\/|=|-|.|\?|&]*)(\5)?)*\])([a-zA-Z0-9|:|\/|=|-|.|\?|&|\s]+)(\[\/\2\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=521
#A: Sadaf Ahmed
#D: Address
#D: It has now been enhanced to accept # too!!
^[a-zA-Z\d]+(([\'\,\.\- #][a-zA-Z\d ])?[a-zA-Z\d]*[\.]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=522
#A: Hayk A
#D: This allows you to validate first names and last names in seperate fields.  Instead of validating a full name in one field.
^[a-zA-Z]+(([\'\,\.\-][a-zA-Z])?[a-zA-Z]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=523
#T: HTML 4.01 Elements
#A: Michael Ash
#D: This RE will match all the valid elements in HTML 4.01
(<\/?)(?i:(?<element>a(bbr|cronym|ddress|pplet|rea)?|b(ase(font)?|do|ig|lockquote|ody|r|utton)?|c(aption|enter|ite|(o(de|l(group)?)))|d(d|el|fn|i(r|v)|l|t)|em|f(ieldset|o(nt|rm)|rame(set)?)|h([1-6]|ead|r|tml)|i(frame|mg|n(put|s)|sindex)?|kbd|l(abel|egend|i(nk)?)|m(ap|e(nu|ta))|no(frames|script)|o(bject|l|pt(group|ion))|p(aram|re)?|q|s(amp|cript|elect|mall|pan|t(r(ike|ong)|yle)|u(b|p))|t(able|body|d|extarea|foot|h|itle|r|t)|u(l)?|var))(\s(?<attr>.+?))*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=524
#T: (X)HTML click events
#A: Michael Ash
#D: This regex will match all the valid on event attributes in HTML 4.01/XHTML 1.0
(?i:on(blur|c(hange|lick)|dblclick|focus|keypress|(key|mouse)(down|up)|(un)?load|mouse(move|o(ut|ver))|reset|s(elect|ubmit)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=525
#A: W. D.
#D: Should match just about any real name, either first
#D: name or last name -- even Jill St. John.
#D: Can't think of a name that has more than 22 characters.
#D: My home page:
#D: <A HREF="http://www.US-Webmasters.com/best-start-page/">http://www.US-Webmasters.com/best-start-page/</A>
^[A-Za-zÀ-ÖØ-öø-ÿ '\-\.]{1,22}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=526
#A: W. D.
#D: Canadian Postal Code / Codes / Canada / Zip
#D: Google for DFIOQU and you'll see where I got the
#D: info for this.
#D: Can anyone simplify this?
^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY][0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ] {0,1}[0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=528
#T: Web Colors (216)
#A: Dean Dal Bozzo
#D: Matches the 216 web colors with or without the '#' sign.
^#?(([fFcC0369])\2){3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=529
#A: Sachin Bhatt
#D: Used to validate Credit Card numbers, Checks if it contains 16 numbers in groups of 4 separated by -, ,or nothing
^(\d{4}-){3}\d{4}$|^(\d{4} ){3}\d{4}$|^\d{16}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=530
#A: Hayk A
#D: Validates on the following standards:
#D: +CCC.ZZZZZZZZZZxYYYY, where 'C' is the numeric
#D: country phone code (up to three digits), 'Z' is the phone number (up to
#D: 12 digits) and 'Y' is the extension (up to 4 digits); max length overall is
#D: 20 characters, including the '+', '.', and 'x' (if extension is present).
#D: Useful for people communicating with the OpenSRS API
^([\+][0-9]{1,3}[\.][0-9]{1,12})([x]?[0-9]{1,4}?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=531
#A: Sachin Bhatt
#D: Check if the text is a valid firstname or lastname.It allows Characters,'- and space only
^([a-zA-Z '-]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=532
#A: Frederick Samson
#D: The goal of this regular expression is to replace all & (ampersand) characters by & if they are not the start of HTML entities. I used
#D: http://www.w3schools.com/html/html_entitiesref.asp as a reference. You can then use RegExp Replace method to do the work. Was helpful for me, might helpful be for you...
&(?![a-zA-Z]{2,6};|#[0-9]{3};)

#U: http://regexlib.com/REDetails.aspx?regexp_id=533
#A: William Rohrbach
#D: This regular expression matches a series of names and/or email addresses much like you would do in Outlook's To field (e.g. To: wrohrbach@carlson.com;miles, er;roemer;lagrander, nitra). The first entry must be a name (in the form of last name followed by a comma and first name) or an email address. The following entries are a semicolon followed by one name or email address. The comma and first name are optional components of the name part.
^((([a-zA-Z\'\.\-]+)?)((,\s*([a-zA-Z]+))?)|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})))(;{1}(((([a-zA-Z\'\.\-]+){1})((,\s*([a-zA-Z]+))?))|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})){1}))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=534
#A: Brian James
#D: Matches a Julian date in the format YYDDD.  Two digit year followed by a number from 1 - 366 indicating the day of the year.
^([0-9]{2})(00[1-9]|0[1-9][0-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=535
#T: Social Security Number
#A: Michael Ash
#D: This regex validates U.S. social security numbers, within the range of numbers that have been currently allocated. 
^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=536
#A: Jerry Schmersahl
#D: Regular expression for validating US telephone numbers with OPTIONAL area code. Matches various permutations of formatting characters (parenthesis, space, dash). Parses the telephone number area code, prefix, and suffix to named groups to facilitate program manipulation. Area code is optional and can optionally be enclosed in parentheses. Rejects area codes that begin with 0 or 1 and prefixes that begin with 0. Rejects all telephone numbers that do not match on exactly 7 digits, or on exactly 10 digits with the optional area code, not counting the formatting characters.
^(?:(?<1>[(])?(?<AreaCode>[2-9]\d{2})(?(1)[)])(?(1)(?<2>[ ])|(?:(?<3>[-])|(?<4>[ ])))?)?(?<Prefix>[1-9]\d{2})(?(AreaCode)(?:(?(1)(?(2)[- ]|[-]?))|(?(3)[-])|(?(4)[- ]))|[- ]?)(?<Suffix>\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=537
#A: Jerry Schmersahl
#D: Regular expression for validating US telephone numbers with OPTIONAL area code, and OPTIONAL extension. Matches various permutations of formatting characters (parenthesis, space, dash). Parses the telephone number area code, prefix, suffix, and extension to named groups to facilitate program manipulation. Area code is optional and can optionally be enclosed in parentheses. Rejects area codes that begin with 0 or 1 and prefixes that begin with 0. Extension is optional and can be optionally preceded by a space and/or "x" or "X", and matches on 2 to 4 digits. Rejects all telephone numbers that do not match on exactly 7 digits, or on exactly 10 digits with the optional area code, not counting the extension or the formatting characters.
^(?:(?<1>[(])?(?<AreaCode>[2-9]\d{2})(?(1)[)])(?(1)(?<2>[ ])|(?:(?<3>[-])|(?<4>[ ])))?)?(?<Prefix>[1-9]\d{2})(?(AreaCode)(?:(?(1)(?(2)[- ]|[-]?))|(?(3)[-])|(?(4)[- ]))|[- ]?)(?<Suffix>\d{4})(?:[ ]?[xX]?(?<Ext>\d{2,4}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=538
#T: Parse Comma Delimited Strings
#A: Jerry Schmersahl
#D: Example of a regular expression that can be used to parse a comma delimited string into constituent, named sub-strings. Add or remove regex subfield definitions (?<field1>[^,]+) and corresponding delimiting characters in the regular expression as necessary to accommodate the string and subfields you intend to parse. Optionally, rename the subfield names in the regular expression to more meaningful names if you are using the parsed sub-strings in a program. Replace all occurrences of the comma in the regular expression with any required alternative delimiting character. As long as the delimiting character used does not occur naturally in any of the sub-strings, you should be good-to-go. NOTE: To change the delimiter character you must replace all occurrences of the comma in the current regex (of which there are 5) with the new delimiter character. e.g. (?<field1>[^;]+); changes the delimiter character to a semi-colon for the first field.
^(?<field1>[^,]+),(?<field2>[^,]+),(?<field3>[^,]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=539
#A: Jerry Schmersahl
#D: Updated on 3/4/2004 per feedback to additionally exclude SSNs that begin with 666 which, as reported, are also not valid.
#D: Regular expression for validating US Social Security Numbers. Accepts optional hyphens or spaces as formatting characters. Parses the three subfields of the SSN into three named sub-strings (SSN1, SSN2, and SSN3) to facilitate program use. Rejects matches on all zeros for any individual subfield of the Social Security Number. Matches only on those SSNs that fall within the range of numbers currently allocated by the Social Security Administration.
^(?!000)(?!666)(?<SSN3>[0-6]\d{2}|7(?:[0-6]\d|7[012]))([- ]?)(?!00)(?<SSN2>\d\d)\1(?!0000)(?<SSN4>\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=540
#A: Jerry Schmersahl
#D: Updated on 7 Jun 2005 --
#D: Matches major credit cards including: Visa (length 16, prefix 4); Mastercard (length 16, prefix 51-55); Diners Club/Carte Blanche (length 14, prefix 36, 38, or 300-305); Discover (length 16, prefix 6011); American Express (length 15, prefix 34 or 37). Saves the card type as a named group to facilitate further validation against a "card type" checkbox in a program. All 16 digit formats are grouped 4-4-4-4 with an optional hyphen or space between each group of 4 digits. The American Express format is grouped 4-6-5 with an optional hyphen or space between each group of digits. Formatting characters must be consistant, i.e. if two groups are separated by a hyphen, all groups must be separated by a hyphen for a match to occur.
^(?:(?<Visa>4\d{3})|(?<Mastercard>5[1-5]\d{2})|(?<Discover>6011)|(?<DinersClub>(?:3[68]\d{2})|(?:30[0-5]\d))|(?<AmericanExpress>3[47]\d{2}))([ -]?)(?(DinersClub)(?:\d{6}\1\d{4})|(?(AmericanExpress)(?:\d{6}\1\d{5})|(?:\d{4}\1\d{4}\1\d{4})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=541
#A: Shaune Stark
#D: Email validation based on Rob Eberhardt's (Thanks, Rob!) email expression, but allows single letter subdomains...
^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=542
#A: Paul Haines
#D: Validates a UNC to conform to \\server\service
#D: Must have a "\\" at the start
#D: Server may contain alpha/numeric/underscore/dash,
#D: Followed by another single "\"
#D: Service may contain alpha/numeric/underscore/dash/$/space
#D: Note:
#D: Service may not start nor end with a space
#D: Service may only contain one $, and only at the end
#D: No additional "\" may follow afterwards
^\\{2}[\w-]+\\(([\w-][\w-\s]*[\w-]+[$$]?$)|([\w-][$$]?$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=543
#A: Andrew van der Stock
#D: Matches positive whole numbers with exactly zero or two decimal points if a . is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25. 
^\d+(?:\.\d{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=544
#A: Lloyd Sturge
#D: This expression will return the src (source) property of an image tag <IMG>. The source returned is limited to the file extensions supplied. It doesn't matter if the image is prefixed with '../' or 'http://..blah' or 'drive\path' or nothing. This expression could be modifed to return other sources or for the tags (ie <BGSOUND>, <SCRIPT>, etc.) depending on the file extensions given.
#D: I needed this to replace the source of images in a HTML page when I wanted to save the page to a local drive and keep the images intact.
#D: If anybody could modify this further to include only the <IMG> tag, I would appreciate the effort.
src[^>]*[^/].(?:jpg|bmp|gif)(?:\"|\')

#U: http://regexlib.com/REDetails.aspx?regexp_id=545
#A: Tim Walters
#D: Simple parser of XPath, it doesn't handle the more complex statements but can be of use in some situations.
^(?<path>(/?(?<step>\w+))+)(?<predicate>\[(?<comparison>\s*(?<lhs>@\w+)\s*(?<operator><=|>=|<>|=|<|>)\s*(?<rhs>('[^']*'|"[^"]*"))\s*(and|or)?)+\])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=546
#A: Jerry Schmersahl
#D: 
^(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.\d)\.)){4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=547
#T: IPv4, udp/norm protocol with port
#A: Matthew Harris
#D: Based on ip regex listed in source. Expanded to require udp:// or norm:// protocol at the start and :12345 port number at the end (1-5 digits).
#D: Written to answer a forum question.
#D: Current limitations - only allows lowercase protocol names and doesn't block ports that start with 0.
^(udp|norm)://(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.?\d)\.)){4}:\d{1,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=548
#A: meet zorrer
#D: ONLY PURE string and numric only
[0-9A-Za-z]

#U: http://regexlib.com/REDetails.aspx?regexp_id=549
#A: meet zorrer
#D: To detect non-alphanumeric characters (for new username/password validation, for instance):
#D: monkey(AT)greyledge.net
#D: 14-Oct-2003 11:26
[^A-Za-z0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=550
#A: meet zorrer
#D: PHP/Perl based regular expression: find aplhanumeric only(alpha and numeric only) (string and numeric only)
#D: but it will not find the empty string as it has to find string between 1 to 11 length.
[a-z0-9]{1,11}

#U: http://regexlib.com/REDetails.aspx?regexp_id=551
#A: Jerry Schmersahl
#D: Regular expression for validating a US currency string field. Matches an unlimited number of digits to the left of an optional decimal point. Digits to the left of the decimal point can optionally be formatted with commas, in standard US currency format. If the decimal point is present, it must be followed by exactly two digits to the right. Matches an optional preceding dollar sign. Uses regex lookahead to preclude leading zeros and to match the optional formatting comma.
(?n:(^\$?(?!0,?\d)\d{1,3}(?=(?<1>,)|(?<1>))(\k<1>\d{3})*(\.\d\d)?)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=552
#A: Jerry Schmersahl
#D: Regular expression for validating a person's full name. Matches on two general formats: 1) first second third last (where first, second, and third names are optional and all present are separated by a space); 2) last, first second third (where second and third are optional, last is followed immediately by a comma and a space, and second, and third, if present, are separated by a space from each other and from first). First corresponds to surname and last corresponds to family name. Each name part is captured to a named group to facilitate program manipulation. Each name part must begin with an uppercase letter, followed by zero or more lowercase letters, except for the last name. Last name must begin with an uppercase letter, followed by one or more lowercase letters, but will match exceptions formatted like the following: McD..., MacD..., O'R... Only format is validated, not spelling. NOTE: This regular expression uses positive and negative regex lookahead to determine the general format of the name, i.e. the presence or the absence of the comma determines the general format that will match. Furthermore, this initial version is not designed to accommodate titles and things like "3rd".
(?n:(^(?(?![^,]+?,)((?<first>[A-Z][a-z]*?) )?((?<second>[A-Z][a-z]*?) )?((?<third>[A-Z][a-z]*?) )?)(?<last>[A-Z](('|[a-z]{1,2})[A-Z])?[a-z]+))(?(?=,)(, (?<first>[A-Z][a-z]*?))?( (?<second>[A-Z][a-z]*?))?( (?<third>[A-Z][a-z]*?))?)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=553
#A: Sadaf Ahmed
#D: This regular expression matches titles. The length of the title has not been restricted. It allows only alphabets in the title and takes zero or one . after the title. Also it allows trailing spaces.
^([a-zA-Z]+(.)?[\s]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=554
#A: Alanski Perryman
#D: spam stopper, catches non english language flocks for letter A
(À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|a|A|@|@|α|À|Á|Â|Ã|Ä|Å|À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|à|á|â|ã|ä|å)

#U: http://regexlib.com/REDetails.aspx?regexp_id=555
#A: Alanski Perryman
#D: Spam stopper, catches non english characters used in flocks.
(È|É|Ê|Ë|è|é|ê|ë|E|e|È|É|Ê|Ë|È|É|Ê|Ë|è|é|ê|ë|è|é|ê|ë)

#U: http://regexlib.com/REDetails.aspx?regexp_id=556
#A: Alanski Perryman
#D: Spam stopper, catches any non english characters for i used in flocks 
(¡|Ì|Í|Î|Ï|ì|í|î|ï|!|¡|¡|¹|¹|¦|Ì|Í|Î|Ï|ì|í|ï|Ì|Í|Î|Ï|ì|í|î|ï|I|i)

#U: http://regexlib.com/REDetails.aspx?regexp_id=557
#A: Alanski Perryman
#D: Spam stopper, catches any non english characters used for o in flocks
(Ò|Ó|Ô|Õ|Ö|Ø|ð|ò|ó|ô|õ|ö|ø|0|O|o|Ò|Ó|Ô|Õ|Ö|Ø|Ò|Ó|Ô|Õ|Ö|Ø|ò|ó|ô|õ|ò|ó|ô|õ|ö|ø)

#U: http://regexlib.com/REDetails.aspx?regexp_id=558
#A: Alanski Perryman
#D: Spam stopper, catches any non english characters for u used in flocks
(Ù|Ú|Û|Ü|ù|ú|û|ü|µ|U|u|µ|µ|Ù|Ú|Û|Ü|Ù|Ú|Û|Ü|ù|ú|ûü|ù|ú|û|ü)

#U: http://regexlib.com/REDetails.aspx?regexp_id=563
#A: Martin Matusiak
#D: A very crude url pattern.
^http://([a-zA-Z0-9_\-]+)([\.][a-zA-Z0-9_\-]+)+([/][a-zA-Z0-9\~\(\)_\-]*)+([\.][a-zA-Z0-9\(\)_\-]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=564
#A: Michael Ash
#D: This regex validates a string of non-repeating characters A, B, C, D.
(?i:([A-D])(?!\1)([A-D])(?!\1|\2)([A-D])(?!\1|\2|\3)([A-D]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=565
#A: Rohan Pathare
#D: Validates date format by DD MMM YYYY. Validates days for each month also.
#D: Ensures that month is uppercase.
^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC) ((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=566
#A: roland  smith
#D: I re wrote a template here http://www.regularexpressions.info/lookaround3.html so that this regular expression will capture keywords that are not between anchor tags.
\b(foo bar)\b(?!((?=<a href='[^'][^>]'>).)*?</a>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=567
#A: Donald Schneider
#D: 
^[-+]?\d+(\.\d+)?|[-+]?\.\d+?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=568
#A: Donald Schneider
#D: matches 0 and all positive integers only. will accept comma formatting only.
^(\d|,)*\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=569
#A: Vladimir Klykov
#D: This regular expression matches "c" format strings for printf/scanf functions. 
%[\-\+0\s\#]{0,1}(\d+){0,1}(\.\d+){0,1}[hlI]{0,1}[cCdiouxXeEfgGnpsS]{1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=570
#A: Frederic Trudeau
#D: This expression will help match Quebec's postal codes.
^[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}(\-| |){1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=571
#A: Sean Ziencik
#D: String formater matching.
.\{\d\}

#U: http://regexlib.com/REDetails.aspx?regexp_id=573
#A: Homero Fonseca
#D: Integer numbers with decimals. Only positives match. This expression doesn't match numbers with group separators
^([0-9]*\,?[0-9]+|[0-9]+\,?[0-9]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=574
#A: Andrew Yeaman
#D: Validates hours and minutes. Allows for entry in the form of hours:minutes with optional minutes and optional hours indicator (H or h).
^(\d{1,2})(\s?(H|h)?)(:([0-5]\d))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=575
#A: Neville Clark
#D: validates numbers, with or without decimal places, and comma 1000 separators.
^(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=576
#A: Wayne Herndon
#D: Validates numeric input of 99,999,999 to 0 with or without commas. but no decimal places. Very simple, but not bad for a novice.
^\d{1,8}$|^\d{1,3},\d{3}$|^\d{1,2},\d{3},\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=578
#A: Uris Virott
#D: Date validation in the dd/mm/yyyy format for years 1000+ (i.e 999 or 0999 not matching) and taking february leap years into account.
((([0][1-9]|[12][\d])|[3][01])[-/]([0][13578]|[1][02])[-/][1-9]\d\d\d)|((([0][1-9]|[12][\d])|[3][0])[-/]([0][13456789]|[1][012])[-/][1-9]\d\d\d)|(([0][1-9]|[12][\d])[-/][0][2][-/][1-9]\d([02468][048]|[13579][26]))|(([0][1-9]|[12][0-8])[-/][0][2][-/][1-9]\d\d\d)

#U: http://regexlib.com/REDetails.aspx?regexp_id=579
#A: Marc Ziss
#D: Matches either an explicitly input percentage or dollar amount, variety of formats of currency borrowed from another example on this board. This is useful when you want to prompt the user to specify either dollars or percent using only one field, and want to validate the entered text is one or the other.
(^\$(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$|^\d{1,2}(\.\d{1,2})? *%$|^100%$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=580
#A: Michael Ash
#D: This regex can be used to restrict passwords to a length of 8 to 20 aplhanumeric characters and select special characters. The password also can not start with a digit, underscore or special character and must contain at least one digit.
^(?=[^\d_].*?\d)\w(\w|[!@#$%]){7,20}

#U: http://regexlib.com/REDetails.aspx?regexp_id=581
#T: yyyy/mm/dd hhMMss Date
#A: Michael Ash
#D: YYYY/MM/DD hh:mm:ss format DateTime Regex.
#D: This regex will validate a date, time or a datetime.
#D: It will also capture the date fields and the time.
#D: Dates are in the YYYY/MM/DD format and validated for months, number of days in a month and leap years (29/2)
#D: Date field can be separated by matched periods(.), dashes(-) or forward slashes(/)
#D: Time is either 12 hour AM/PM format (hh:mm:ss AM), where minutes and seconds are optional.
#D: AM or PM required. or 24 hour military format (hh:mm:ss), from 00:00:00 to 23:59:59,
#D: where hours and minutes fields are required, including leading 0 for hours less than 10.
#D: Please refer to http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for additional info
#D: Datetime is the above date and time formats separated by a space,
#D: with the date first (YYYY/MM/DD hh:mm:ss)
#D: !IMPORTANT NOTE: your regex engine must support lookbehinds and named groups to use this expression
^(?ni:(?=\d)((?'year'((1[6-9])|([2-9]\d))\d\d)(?'sep'[/.-])(?'month'0?[1-9]|1[012])\2(?'day'((?<!(\2((0?[2469])|11)\2))31)|(?<!\2(0?2)\2)(29|30)|((?<=((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\2\3\2)29)|((0?[1-9])|(1\d)|(2[0-8])))(?:(?=\x20\d)\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2}))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=582
#A: Julio de la Yncera
#D: This regular expression is for admitting wild card searches on Emails the wild card character is * and in my case will only allow to do the search when the * is place after the first 3 alphanumeric characters. If you need to modify this behavior change the {3,40} to {n,m} where n is how many characters before the * and m is the total number if characters.
\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$|^([0-9a-zA-Z'\.]{3,40})\*|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\.([0-9a-zA-Z']+)$|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\*+$|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=583
#A: Scott Pite
#D: UK Postal Codes - The code is normally written in capital letters with a space between the outer and inner parts; it is understandable if the space is omitted.
#D: This regular expression validates upper or lower case with or without the space:
^[A-Za-z]{1,2}[\d]{1,2}([A-Za-z])?\s?[\d][A-Za-z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=584
#A: Lewis Moten
#D: Make sure string only contains characters that appear on keyboard.  Extended characters (such as those with ascii values above 127), will not pass the test.
^[-\w`~!@#$%^&*\(\)+={}|\[\]\\:";'<>?,.\/ ]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=585
#A: Lewis Moten
#D: Test string to verify it begins with an upper-case letter.
^[A-Z].*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=586
#A: Senthil Gunabalan
#D: This is a basic telephone number vaildation which needs a compulsory prefix of a '+' sign with three digits and followed by a hipen, another three digits and finally followed by another hipen and four more digits.
#D: Regards,
#D: Senthil Gunabalan
^[+][0-9]\d{2}-\d{3}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=587
#A: Fabrizio Fortini
#D: Validates a Italian mobile phone number with (or without) the International code
^([+]39)?((38[{8,9}|0])|(34[{7-9}|0])|(36[6|8|0])|(33[{3-9}|0])|(32[{8,9}]))([\d]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=588
#A: W. D.
#D: U. S. or Canadian telephone number regular expression. <BR>
#D: <BR>
#D: //           # Checks phone numbers for validity                           <BR>
#D: //  [01]?    # optional '0', or '1'                                        <BR>
#D: //  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
#D: //  \(?      # optional parentheses                                        <BR>
#D: //  [2-9]    # first # of the area code must not be a '0' or '1'           <BR>
#D: //  \d{2}    # next 2 digits of area code can be 0-9                       <BR>
#D: //  \)?      # optional parentheses                                        <BR>
#D: //  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
#D: //  \d{3}    # 3-digit prefix                                              <BR>
#D: //  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
#D: //  \d{4}    # 4-digit station number                                      <BR>
^[01]?[- .]?\(?[2-9]\d{2}\)?[- .]?\d{3}[- .]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=589
#T: UK Phone Number
#A: Amos Hurd
#D: UK phone number. Allows 3, 4 or 5 digit regional prefix, with 8, 7 or 6 digit phone number respectively, plus optional 3 or 4 digit extension number prefixed with a # symbol. Also allows optional brackets surrounding the regional prefix and optional spaces between appropriate groups of numbers.
^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=590
#A: Jon Galloway
#D: This pattern matches a decimal value with up to 3 digits after the decimal. Comma is allowed as a thousands separator but not required. N/A is also allowed.
(^N/A$)|(^[-]?(\d+)(\.\d{0,3})?$)|(^[-]?(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{1,3})?)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=591
#A: Cliff Schneide
#D: After looking for a date regular expression, I could not find one that meet my need, so I develop one that handles 1 or 2 digets in the month and day and also handle feb up to 29.  This will allow both / and - for separators, which is what I needed.  I hope this helps others too.  Thanks,
#D: Cliff Schneide
^((((0?[13578])|(1[02]))[\/|\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\/|\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\/\-]?(0?[1-9]|[0-2][0-9])))[\/\-]?\d{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=592
#T: UK Mobile Phone Number
#A: Amos Hurd
#D: UK mobile phone number, with optional +44 national code. Allows optional brackets and spaces at appropriate positions.
^(\+44\s?7\d{3}|\(?07\d{3}\)?)\s?\d{3}\s?\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=593
#T: Modified UK Phone Number
#A: Amos Hurd
#D: Modified version of UK phone number regular expression. Now allows +44 national code in addition to extension numbers of 3 or 4 digits. Previous expression was: ^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$
^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=594
#A: Andreas Schiller
#D: Matches hexadecimal values like in c-sourcecode exists.
[0][x][0-9a-fA-F]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=595
#T: Current UK Vehicle Registration
#A: Amos Hurd
#D: UK vehicle registration system currently in use (as defined by the DVLA and put into effect from September 2001, and therefore does not allow registrations prior to this date).
^([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=596
#T: Older UK Vehicle Registration
#A: Amos Hurd
#D: UK vehicle registration system prior to September 2001. Allows both older suffix and the later prefix formats in simple form, with optional spaces.
^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=597
#A: Ivan Rodriguez
#D: Validate a comma delimited string of integer between 1 and 99999999 (change {0,7} to whatever you need). No zero leading.
^([1-9]{1}[0-9]{0,7})+((,[1-9]{1}[0-9]{0,7}){0,1})+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=598
#A: Jeff U
#D: Password matching expression. Password must be at least 8 characters, no more than 15 characters, and must include at least one upper case letter, one lower case letter, and one numeric digit. 
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,15}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=600
#A: Sebastian Hiller
#D: Not a 100% email validation. It doesn't work with IP-Adresses, but it's good for most common cases. At least I hope so.
^((?:(?:(?:\w[\.\-\+]?)*)\w)+)\@((?:(?:(?:\w[\.\-\+]?){0,62})\w)+)\.(\w{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=601
#T: Alphanumeric Expression 
#A: Vincent Faller
#D: Alphanumeric expression with spaces
^[a-zA-Z0-9\s]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=602
#A: Alan Ferrandiz Langley
#D: A regular expression that validates the any format of fixed telephone numbers inside Lima - Peru, including an optional extension of at least one number up to four numbers.
^([2-9])(\d{2})(-?|\040?)(\d{4})( ?|\040?)(\d{1,4}?|\040?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=603
#A: Alan Ferrandiz Langley
#D: A regular expression that validates the any of the new formats of cellular phones numbers in Peru, allows an optional dash in the middle of the number.
^([8-9])([1-9])(\d{2})(-?|\040?)(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=604
#A: Matt Wickless
#D: This pattern handles currency including the following:
#D: optional period with two or more digits to the right of the period
#D: optional commas
#D: optional dollar sign($)
^(\$)?((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{2,})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=605
#A: JP Honeywell
#D: Validates *usable* US telephone numbers (possibly Canadian and Caribbean Islands as well?) Numbers cannot beginning with zero, one, (any number)11, or 555. It will allow either a hyphen, space or period as a separator.
#D: Technically (and contrary to popular belief) most 555- numbers ARE valid numbers [see http://www.nanpa.com/nas/public/form555MasterReport.do?method=display555MasterReport ] but they are unlikely to be used by normal folks. Therefore, excluding them with this regex is useful to prevent bogus/fraudulent telephone numbers in forms.
#D: FYI, the fictitious 555- numbers used in the movies and TV are only in the range of 555-0100 through 555-0199. Not very many, huh?
^(?!\d[1]{2}|[5]{3})([2-9]\d{2})([. -]*)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=606
#T: Currency
#A: Michael Ash
#D: This regex validates Currency. The base monetary unit (ex. US dollar) followed by option two digit cent denomination. Base unit can't have leading zero. Comma's are optional on base units. Note: Your regex engine must support the \p character class to use this. For example this will work in .net but not javascript which doesn't support \p Also the ¢ is removed from the match by force. Any other cent symbol would need to be added to the exclude to not match.
^(?!\u00a2)  #Don't allow cent symbol\N\p{Sc}?     #optional unicode currency symbols\N(?!0,?\d)   #don't allow leading zero if 1 or more unit\N(\d{1,3}    # 1 to 3 digits\N(\,\d{3})*  # if the is a comma it must be followed by 3 digits\N|(\d+))      # more than 3 digit with no comma separator\N(\.\d{2})?$  # option cents

#U: http://regexlib.com/REDetails.aspx?regexp_id=607
#T: Phone matcher for NANP telephone number
#A: Gregory Krohne
#D: Matches NANP requirements for valid telephone numbers in the USA, its territories, Canada, Bermuda, and 16 Caribbean nations.<br>
#D: Area code: [2-9][0-8][0-9]<br>
#D: Exchange code: [2-9][0-9][0-9]<br>
#D: Station code: [0-9][0-9][0-9][0-9]<br>
#D: Accepts common phone number separators like parentheses, dash/hyphen, slash, period, and space. Stops matching at any word boundary, including end of line. Adapted from Don Johnston's pattern.
(?:\([2-9][0-8]\d\)\ ?|[2-9][0-8]\d[\-\ \.\/]?)[2-9]\d{2}[- \.\/]?\d{4}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=608
#A: Sebastian Hiller
#D: Captures Submatches, problem:domainname length can be longer than 64 chars, because every [a-zA-Z0-9][\.\-_] is only countet as one char.
^((?:(?:(?:[a-zA-Z0-9][\.\-\+_]?)*)[a-zA-Z0-9])+)\@((?:(?:(?:[a-zA-Z0-9][\.\-_]?){0,62})[a-zA-Z0-9])+)\.([a-zA-Z0-9]{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=609
#A: Danny Garber
#D: Validates a date expression (or empty value) in CCYYMMDD format, checking a leap year from 00000101 A.D. to 99991231
^(((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|((\d{2}[02468][048]|\d{2}[13579][26]))0229)){0,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=611
#A: Ernesto Giralt
#D: Capture the attributes "content", "name" and "scheme" used to parse META tags from any XHTML or HTML input. Useful for developers looking for expresions to parse & get Dublin Core single elements from HTML pages.
(<meta\s+)*((name\s*=\s*("|')(?<name>[^'("|')]*)("|')){1}|content\s*=\s*("|')(?<content>[^'("|')]*)("|')|scheme\s*=\s*("|')(?<scheme>[^'("|')]*)("|'))

#U: http://regexlib.com/REDetails.aspx?regexp_id=612
#A: c raz
#D: Wrote this to accept either decimals or zero, but not whole numbers - for a particular project...
(^([0-9]+[.]+[0-9]+)|(0)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=613
#T: Quoted string
#A: Michael Ash
#D: The regex validate a quoted string in VBScript or Ansi SQL.  The string may contain the containing quote character if it is escaped by being doubled up.
#D: In VB/VBScript two double quotes within a string enclosed in double qoutes translate into one double quote within the string
#D: In SQL two single quotes within a string enclosed in single qoutes translate into one single quote within the string 
^(\x22|\x27)((?!\1).|\1{2})*\1$

#U: http://regexlib.com/REDetails.aspx?regexp_id=614
#A: Darren Neimke
#D: That pattern will filter for words that contain more than 1 instance of any of the following characters: ! $ % @.
#D: May be useful in filtering for spam.
#D: Requires lookahead and lookbehind support in the underlying regex engine.
(?<=^|[\s ]+)[^\!\@\%\$\s ]*([\!\@\%\$][^\!\@\%\$\s ]*){2,}(?=[\s ]+|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=615
#A: gregg durishan
#D: allows positive none-to-3-decimal values between 0.000 and 1000.000
^1000([.][0]{1,3})?$|^\d{1,3}$|^\d{1,3}([.]\d{1,3})$|^([.]\d{1,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=616
#A: gregg durishan
#D: allows positive and negative none-to-3-decimal values between -1000.000 and 1000.000
^(\-)?1000([.][0]{1,3})?$|^(\-)?\d{1,3}$|^(\-)?\d{1,3}([.]\d{1,3})$|^(\-)?([.]\d{1,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=617
#T: Combined UK Vehicle Registration
#A: Amos Hurd
#D: UK vehicle registration system. This is the obvious combination of two previous expressions posted here, to merge the older system with the current system.
^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})|(([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=618
#A: Rohan Pathare
#D: 
^((31(?! (FEB|APR|JUN|SEP|NOV)))|(30|29)|(0[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=621
#A: Daniel Einspanjer
#D: This regex splits comma or semicolon separated lists of optionally quoted strings. It handles quoted delimiters and escaped quotes. Whitespace inside quotes is preserved, outside is eaten.
\s*[;,]\s*(?!(?<=(?:^|[;,])\s*"(?:[^"]|""|\\")*[;,]\s*)(?:[^"]|""|\\")*"\s*(?:[;,]|$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=622
#A: Brad Dobyns
#D: Version 1.3.0: I needed a regexp to validate URL's without the ht(f)tp(s):// and include North American domains (like .us and .ca) and there didn't seem to be one available...so I created one. It will also work with ASP QueryStrings and anchor URL's. If you have a problem with the expression or have any suggestions to improve, please write me and let me know. Added .uk domain and expression now allows for URLs that contain JSP session IDs. 4/14/04 - added ability to include URLs that start with server names.
^(((ht|f)tp(s?))\://)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk)(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&%\$#\=~_\-]+))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=623
#A: Valmir Cinquini
#D: Brazilian Postal Box RegExp validation
\d{5}\-\d{3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=624
#A: blake wolf
#D: Use in a .net Regex.Split() to pull the protocol out of a url into the first array entry.
(^[a-zA-Z0-9]+://)

#U: http://regexlib.com/REDetails.aspx?regexp_id=625
#A: gregg durishan
#D: currency format that allows optional $, optional "-"(MinusSignNegative) OR "()" (ParenNegative) but not both, optional cents, and optional commas separating thousands. Minus sign can be before or after $, but parens must be outside the $. UPDATED: now fails to match a "$" without any further numbers
^\$?\-?([1-9]{1}[0-9]{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\-?\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\(\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))\)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=626
#T: Enitity notation
#A: Michael Ash
#D: This regex can be used to find general entites in HTML, XML and SGML files.
#D: The entity can consist of
#D: 1) an ampsand (&)
#D: 2) followed by
#D: (a) ASCII alphanumerics or period between 2 and 31  characters  or
#D: (b) a pound sign #
#D: (i) followed by an x followed by a unicode value  up to 5 hex digits or
#D: (ii) followed by a decimal value from 0 to 1048575
#D: 3) ending with a semi-colon (;)
&\N(?ni:\#      # if a pound sign follow ampsand look for number\N((x        # if x follow pound sign accept hex value up to 5 digits\N([\dA-F]){1,5}\N)\N|       # otherwise accept decimal number between 0 - 1048575\N(104857[0-5]\N|10485[0-6]\d\N|1048[0-4]\d\d\N|104[0-7]\d{3}\N|10[0-3]\d{4}\N|0?\d{1,6})\N)\N|       # no pound sign after ampersand\N([A-Za-z\d.]{2,31}) #accept ASCII alphanumeric and period\N);           #end with semi-colon.

#U: http://regexlib.com/REDetails.aspx?regexp_id=627
#A: Thomas Keegan
#D: for checking a value is between 99.99% and 00.00%
^((\d{1,2})?([.][\d]{1,2})?){1}[%]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=628
#T: Label all parts of a URL
#A: Ariel Merrell
#D: I needed a regular expression to break urls into labled parts.  This is what I came up with.  Got a few ideas from regexlib.com and from this msdn article. http://msdn.microsoft.com/library/default.asp?url=/library/en-us/script56/html/reconbackreferences.asp
#D: http://www.domain.com/folder does return a match but will not grab the folder name unless there is "/" at the end.
#D: http://www.domain.com/folder/
(?:(?<protocol>http(?:s?)|ftp)(?:\:\/\/))\N(?:(?<usrpwd>\w+\:\w+)(?:\@))?\N(?<domain>[^/\r\n\:]+)?\N(?<port>\:\d+)?\N(?<path>(?:\/.*)*\/)?\N(?<filename>.*?\.(?<ext>\w{2,4}))?\N(?<qrystr>\??(?:\w+\=[^\#]+)(?:\&?\w+\=\w+)*)*\N(?<bkmrk>\#.*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=629
#A: Bret Greenwood
#D: PCRE (PHP) regular expression for validating US telephone numbers with OPTIONAL area code, and OPTIONAL extension. Promiscuous formatting (parenthesis or slash, space, dash, dot or no separator). Captures the telephone number area code, prefix, suffix, and extension to named groups. Rejects area codes that begin with 0 or 1 and prefixes that begin with 0. Rejects all telephone numbers that do not match on exactly 7 digits, or on exactly 10 digits with the optional area code, not counting the extension or the format. Seperators, when used, must be in the right place. Extension can be preceded by a space(s) and/or "x", "X", or "Ext" and matches on 1 to 5 digits.
#D: Written from the view that getting phone numbers from customers should be as easy and tolerant as possible. Matched number can be parsed and entered into database correctly on the business end.
#D: Based on similar regex by Jerry Schmersahl in this library. Case insensitivity could simplify this expression, but implementation is left up to you.
#D: For PHP/PCRE compatibility, put a "P" in front of each capture name (ie: "(?P<AreaCode>"). This server does not recognize the Python/PCRE naming convention.
^(?:(?<1>[(])?(?<AreaCode>[2-9]\d{2})(?(1)[)][ ]?|[- \/.]?))?\N(?<Prefix>[1-9]\d{2})[- .]?(?<Suffix>\d{4})\N(?:(?:[ ]+|[xX]|Ext\.?[ ]?){1,2}(?<Ext>\d{1,5}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=630
#A: J D
#D: This expression will return the first letter of each word in a string. Best used if you need to get initials from a name.
#D: "James Kramer" = "J K" & "Sir Richard Branson" = "S R B" & "33 yoYo 654 ma" = "y m"
(^[A-Za-z])|(\s)([A-Za-z])

#U: http://regexlib.com/REDetails.aspx?regexp_id=631
#A: Gaurav Shrivastava
#D: Validates windows path and invalidates UNC path
^([a-zA-Z]\:) (\\{1}| ((\\{1}) [^\\] ([^/:*?<>"|]*(?<![ ])))+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=632
#A: ricardo santos
#D: Brazilian CNPJ (xx.xxx.xxx/xxxx-xx)
(^\d{2}\.\d{3}\.\d{3}\/\d{4}\-\d{2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=633
#A: ricardo santos
#D: Brazilian CEP - (XXXXX-XXX)
(^\d{5}\-\d{3}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=634
#A: Carlos R. L. Rodrigues
#D: Brazilian CNPJ
(^[0-9]{2,3}\.[0-9]{3}\.[0-9]{3}\/[0-9]{4}-[0-9]{2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=635
#A: Carlos R. L. Rodrigues
#D: Matches files extension
(?!\.)[a-z]{1,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=636
#A: Eric Lewis
#D: Used to dynamically find acronyms in a sentence. The first pair of brackets gets the acronym, the second gets the text after the acronym.
([A-Zäöü0-9\/][^a-z\:\,\(\)]*[A-Zäöü0-9])($|[\.\:\,\;\)\-\ \+]|s\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=637
#A: Darren Neimke
#D: This pattern matches a simple Decimal Literal.  Leading digits limited to 8 and does not support commification.
(?n)                           (?# ExplicitCapture - capture named groups only )\N^\N-?                         (?# Optional sign )\N(\N\d{1,8}(\.\d{1,2})?    (?# Decimal point and trailing digits optional )\N|\N\d{0,8}(\.\d{1,2})     (?# Leading digits optional )\N)\N$

#U: http://regexlib.com/REDetails.aspx?regexp_id=638
#A: Darren Neimke
#D: Match the VB Language specification BNF for DateTime literal.  http://msdn.microsoft.com/library/en-us/vbls7/html/vblrfvbspec2_4_6.asp?frame=true
#D: DateLiteral ::= # [ Whitespace+ ] DateOrTime [ Whitespace+ ] #
#D: DateOrTime ::=
#D: DateValue Whitespace+ TimeValue |
#D: DateValue |
#D: TimeValue
#D: DateValue ::=
#D: MonthValue / DayValue / YearValue |
#D: MonthValue – DayValue - YearValue
#D: TimeValue ::=
#D: HourValue : MinuteValue [ : SecondValue ] [ WhiteSpace+ ] [ AMPM ]
#D: MonthValue ::= IntLiteral
#D: DayValue ::= IntLiteral
#D: YearValue ::= IntLiteral
#D: HourValue ::= IntLiteral
#D: MinuteValue ::= IntLiteral
#D: SecondValue ::= IntLiteral
#D: AMPM ::= AM | PM
(?'DateLiteral'     (?# Per the VB Spec : DateLiteral ::= '#' [ Whitespace+ ] DateOrTime [ Whitespace+ ] '#' )\N\#\s*\N(?'DateOrTime'  (?# DateOrTime ::= DateValue Whitespace+ TimeValue | DateValue | TimeValue )\N(?'DateValue'\N(?# DateValue ::= Whitespace+ TimeValue | DateValue | TimeValue )\N(\N(?# DateValue ::= MonthValue / DayValue / YearValue | MonthValue - DayValue - YearValue )\N(?'Month'(0?[1-9])|1[0-2])      (?# Month 01 - 12 )\N(?'Sep'[-/])                    (?# Date separator '-' or '/' )\N(?'Day'0?[1-9]|[12]\d|3[01])    (?# Day 01 - 31 )\N\k'Sep'                         (?# whatever date separator was previously matched )\N(?'Year'\d{1,4})\N\s+\N(?# TimeValue ::= HourValue : MinuteValue [ : SecondValue ] [ WhiteSpace+ ] [ AMPM ] )\N(?'HourValue'(0?[1-9])|1[0-9]|2[0-4])    (?# Hour 01 - 24 )\N[:]\N(?'MinuteValue'0?[1-9]|[1-5]\d|60)       (?# Minute 01 - 60 )\N[:]\N(?'SecondValue':0?[1-9]|[1-5]\d|60)?     (?# Optional Minute :01 - :60 )\N\s*\N(?'AMPM'[AP]M)?\N)\N|\N(\N(?# DateValue ::= MonthValue / DayValue / YearValue | MonthValue - DayValue - YearValue )\N(?'Month'(0?[1-9])|1[0-2])      (?# Month 01 - 12 )\N(?'Sep'[-/])                    (?# Date separator '-' or '/' )\N(?'Day'0?[1-9]|[12]\d|3[01])    (?# Month 01 - 31 )\N\k'Sep'                         (?# whatever date separator was previously matched )\N(?'Year'\d{4})\N)\N|\N(\N(?# TimeValue ::= HourValue : MinuteValue [ : SecondValue ] [ WhiteSpace+ ] [ AMPM ] )\N(?'HourValue'(0?[1-9])|1[0-9]|2[0-4])    (?# Hour 01 - 24 )\N[:]\N(?'MinuteValue'0?[1-9]|[1-5]\d|60)       (?# Minute 01 - 60 )\N[:]\N(?'SecondValue':0?[1-9]|[1-5]\d|60)?     (?# Optional Minute :01 - :60 )\N\s*\N(?'AMPM'[AP]M)?\N)\N)\N)\N\s*\#\N)

#U: http://regexlib.com/REDetails.aspx?regexp_id=639
#A: Derek Baird
#D: Validates and Australian area dial code and telephone number.
^(\([0-9]*\)?\ ?\/?[0-9]{4}[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=640
#A: poli garcia
#D: This regexp tests Argentinian CUIT / CUIT numbers.
#D: Esta expresión regular sirve para validar números de CUIT / CUIL de Argentina.
^[0-9]{2}-[0-9]{8}-[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=641
#A: Ricardo Gonzalez
#D: Filter US telephone numbers.  This particular one accepts only area code 939 or 787.  Area code parentesis or hyphens optional.
^(\()?(787|939)(\)|-)?([0-9]{3})(-)?([0-9]{4}|[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=642
#A: Dave Turner
#D: Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.
(\+)?([-\._\(\) ]?[\d]{3,20}[-\._\(\) ]?){2,10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=643
#A: andrea mele
#D: Check italian fiscal code (codice fiscale) with "OMOCODIA" control
^[A-Za-z]{6}[0-9LMNPQRSTUV]{2}[A-Za-z]{1}[0-9LMNPQRSTUV]{2}[A-Za-z]{1}[0-9LMNPQRSTUV]{3}[A\N-Za-z]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=644
#T: mm/dd/yyyy Julian and Gregrian Datetime
#A: Michael Ash
#D: Datetime for Julian and Gregorian Calenders
#D: Matchs dates from  0001 A.D. to 9999 A.D.
#D: Days  and months are  1 or 2 digits
#D: Years are 4 digit with leading zeros if required.
#D: February is validate in all leap years
#D: Leap year rules for Julian and Gregorian calendars (http://scienceworld.wolfram.com/astronomy/LeapYear.html)
#D: Missing days for 1582 and 1752 are not matched.  Though only one set should be applied to a calendar since they are caused by when the calendar was adopted
#D: Missing days (http://scienceworld.wolfram.com/astronomy/GregorianCalendar.html)
#D: Time can be either 12 or 24 hour format
#D: 12 hour format hh:MM:ss AM|PM
#D: minutes and seconds are optional
#D: 24 hour format hh:mm:ss
#D: seconds are optional, hours less than ten require leading zero
#D: Datetome format is a date, a space then a time.
(?#Calandar from January 1st 45 BC to December 31, 9999\Nin mm/dd/yyyy format)\N(?!\N(?:10(?<sep>[-./])(?:0?[5-9]|1[0-4])\k<sep>(?:1582))| #Missing days from 1582\N(?:0?9(?<sep>[-./])(?:0?[3-9]|1[0-3])\k<sep>(?:1752)) #or Missing days from 1752\N(?# both sets of missing days such not be in the same calendar\Nso remove one or the other)\N)\N(?n:^(?=\d)    # the character at the beginning a the sring must be a digit\N(\N(?<month>\N(0?[13578])|1[02]|     #months with 31 days\N(0?[469]|11)(?!.31)|  # months with 30 days\N0?2                  # February\N(?(.29)            # if feb 29th check for valid leap year\N(?=.29.\N(?! #exclude these years from leap year pattern\N000[04]  #No year 0 and no leap year in year 4\N|\N(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)\N(?# centurial years > 1500 not evenly divisible by 400\Nare not leap year)\N)\N(?:(?:(?:\d\d) # century\N(?:[02468][048]|[13579][26]) #leap years\N(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))\N)|             # else if not Feb 29\N(?!.3[01])     # and day not Feb 30 or 31\N)    #end Leap year check\N)           #end of month check\N(?<sep>[-./])  # choose a date separator\N(?<day>0?[1-9]|[12]\d|3[01])   #days between 1-31\N(?# The maximum number of days allowed for a month has\Nalready been checked for in the month check.\NIf you made it this far the number of day is\Nwithin the range for the given month)\N\k<sep>  # Match the same date separator choosen before.\N(?!0000)  # There is no year 0\N(?<year>(?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:\z|(?:\x20\d))))\d{4}(?:\x20BC)?  # a four digit year.  Use leading zeros if needed\N)\N(?(?=\x20\d)\x20|$))?  # if there is a space followed by a digit check for time\N(?<time>\N( # 12 hour format\N(0?[1-9]|1[012])  # hours\N(:[0-5]\d){0,2}  # optional minutes and seconds\N(?i:\x20[AP]M) # required AM or PM\N)| # 24 hour format\N(\N[01]\d|2[0-3]) #hours\N(:[0-5]\d){1,2}) #required minutes optional seconds\N?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=645
#A: Cheri Verdend
#D: This RE and MatchEvaluator will remove everything from inside HTML font tags EXCEPT the color declaration. (For ex: allow users to upload HTML content to site without their font tags overridding the font styles set in the CSS, except for the ability to change the font color for special emphasis.)
#D: This works with color declarations using single quotes, double quotes, no quotes, color-names (red, black), Hex colors (#669933), and inline Style declarations inside a font tag. Does not work with inline Style declarations inside other tags like DIV, SPAN, or P (although it could be expanded to include those as well).
<\*?font              # Match start of Font Tag\N(?(?=[^>]+color.*>)    #IF/THEN lookahead color in tag\N(.*?color\s*?[=|:]\s*?) # IF found THEN move ahead\N('+\#*?[\w\s]*'+         # CAPTURE ColorName/Hex\N|"+\#*?[\w\s]*"+             # single or double\N|\#*\w*\b)                   # or no quotes\N.*?>                     # & move to end of tag\N|.*?>                 # ELSE move to end of Tag\N)                     # Close the If/Then lookahead\N# Use Multiline and IgnoreCase\N# Replace the matches from RE with MatchEvaluator below:\N#   if m.Groups(1).Value<>"" then\N#         Return "<font color=" & m.Groups(1).Value & ">"\N#   else\N#         Return "<font>"\N#   end if

#U: http://regexlib.com/REDetails.aspx?regexp_id=646
#A: Andrew Lee
#D: I wrote up this regular expression to fetch the href attribute found in <a> tags as well as a few other HTML tags.
href=[\"\'](http:\/\/|\.\/|\/)?\w+(\.\w+)*(\/\w+(\.\w+)?)*(\/|\?\w*=\w*(&\w*=\w*)*)?[\"\']

#U: http://regexlib.com/REDetails.aspx?regexp_id=647
#A: hayri hayri
#D: 
^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d)?(\x20?((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=648
#A: Roman Lukyanenko
#D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.txt or C:\Windows\Microsoft.NET etc
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(txt|TXT)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=649
#A: Roman Lukyanenko
#D: I know its simple, yet there was no Russian postal code regular expression on the RegExLib. Just in case some needs to know the format.
^[0-9]{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=651
#A: Artu 
#D: it's for date in the format: "yyyymmdd" and it validates the empty string and some special values (00000000,88888888,99999999) but you can delete these last values. It works with leap years.
^(((\d{4})(0[13578]|10|12)(0[1-9]|[12][0-9]|3[01]))|((\d{4})(0[469]|11)([0][1-9]|[12][0-9]|30))|((\d{4})(02)(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)(02)(29))|(([13579][26]00) (02)(29))|(([0-9][0-9][0][48])(02)(29))|(([0-9][0-9][2468][048])(02)(29))|(([0-9][0-9][13579][26])(02)(29))|(00000000)|(88888888)|(99999999))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=652
#A: Roman Lukyanenko
#D: Matches the copyright symbol (©). Pretty simple, yet I dont think existed on RegExLib before. 
\xA9

#U: http://regexlib.com/REDetails.aspx?regexp_id=653
#A: Steve Wagner
#D: Validates dates formatted like "dd.mm.yyyy" or "dd.mm.yy". Also the separators "/" and "-" are validated "ok". This expression does not check leap years!
#D: I did this expression cause I could hardly find any date regex that supports those "dot-formats".
^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\d{2}|\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=654
#A: Rehan Azam
#D: This regular expression can be used to parse a comma delimited string. Leading whitespaces (at the beginning of the entire string) and ending commas are not acceptable. Any combination of letters and numbers with zero or one white space between them are acceptable. Note: To change the delimiter, simply replace the comma in the square brackets to the delimiter of choice.
^([A-Za-z0-9]\s?)+([,]\s?([A-Za-z0-9]\s?)+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=655
#A: Osaro bare
#D: 
(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})([AM|PM|am|pm]{2,2})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=656
#A: Sante Boscolo
#D: Spam trap
#D: Catches many and many way to write viagra (replacing letters with similar chars, spacing chars with one space, etc).
[v,V,(\\/)](\W|)[i,I,1,l,L](\W|)[a,A,@,(\/\\)](\W|)[g,G](\W|)[r,R](\W|)[a,A,@,(\/\\))]

#U: http://regexlib.com/REDetails.aspx?regexp_id=657
#A: Francesc Vila
#D: Validates Spain Phones
^[0-9]{2,3}-? ?[0-9]{6,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=658
#A: Vathachira Joseph Bino
#D: regex which matches UAE mobile phone numbers.
#D: Its capable to take inputs +97150 3827741, +97-150-3827741, +97150 - 3827741,050 3827741, 050 - 3827741
#D: Enjoy REGEXXXXXXX!!!!!!!
^(\+97[\s]{0,1}[\-]{0,1}[\s]{0,1}1|0)50[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=659
#A: Vathachira Joseph Bino
#D: The regex matches the UAE land phone numbers. Checks the area codes[04,02,06...etc] strictly. Force user to input phone numbers in strict manner(it take input 04 3452488, but not 04______spaces_______3452488)
^0[234679]{1}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=660
#A: Mike Kupp
#D: Letter Grade scores A-F + and -
(^[a-fA-F]+[+-]?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=661
#A: Vathachira Joseph Bino
#D: The regex that matches the telephone numbers in India.
#D: ####Enjoy Regex####
^0{0,1}[1-9]{1}[0-9]{2}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=662
#A: Vathachira Joseph Bino
#D: The Regex validate the mobile numbers in India.
#D: Gives flexibility to user to enter numbers in different format like
#D: +919847444225, +91-98-45017381, 9844111116, 98 44111112, 98-44111116
#D: ###Enjoy REGEX###
^((\+){0,1}91(\s){0,1}(\-){0,1}(\s){0,1}){0,1}98(\s){0,1}(\-){0,1}(\s){0,1}[1-9]{1}[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=663
#A: Gaurav Shrivastava
#D: 
^([a-zA-Z]\:)(\\{1}|((\\{1})[^\\/:*?<>"|]([^\\/:*?<>"|]*(?![ ])))+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=664
#A: Friedel Wittrock
#D: match for 0 - 65535
^([0-5]?\d?\d?\d?\d|6[0-4]\d\d\d|65[0-4]\d\d|655[0-2]\d|6553[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=665
#A: Dany Lauener
#D: DD.MM.YY or DD.MM.YYYY
#D: separator could be on choice '.' '/' or '-'
#D: leap years compatible, 00 is treated as year 2000.
^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=666
#A: Dany Lauener
#D: This regexp has been posted specialy for "Mike O Shea" as he requested a mono digit year validation.
#D: matches DD/MM/Y or DD/MM/YYYY or D/M/Y or DD/M/YYYY
#D: Leap years treated. (Italian style with tomato)
#D: Years 0-9 equal years 2000 to 2009 for leap years
^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=667
#A: Darren Neimke
#D: Matches a percentage between 0 and 100 (inclusive).  Accepts up to 2 decimal places.
^(\N100(?:\.0{1,2})?\N|\N0*?\.\d{1,2}\N|\N\d{1,2}(?:\.\d{1,2})?\N)%\N$

#U: http://regexlib.com/REDetails.aspx?regexp_id=668
#A: Chandrasing Patil
#D: This expression is little tricky since the $ sign is includeded in the
#D: expression itself. So whenever you want to make use of the expression be
#D: sure to prepend $ sign to the value if it's not present.
^\$[+-]?([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(\.[0-9]{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=670
#A: yoram o
#D: DD/MM/YY
#D: D/M/YY
#D: DD/MM/YYYY
(?<Day>[1-9]|[0-3][0-9])/(?<Month>[01][012]|[1-9]|0[1-9])/(?<Year>[12]\d{3}|\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=671
#A: Liu Wei
#D: telphone number check.
((\(\d{3,4}\)|\d{3,4}-)\d{4,9}(-\d{1,5}|\d{0}))|(\d{4,12})

#U: http://regexlib.com/REDetails.aspx?regexp_id=672
#A: Nicholas Berardi
#D: Specifier Format of Guid Values that this RegEx supports:  32 digits: [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]  32 digits separated by hyphens: [xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]  32 digits separated by hyphens, enclosed in brackets: [{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}]  32 digits separated by hyphens, enclosed in parentheses: [(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)]
^[{|\(]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[\)|}]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=673
#A: Roman Lukyanenko
#D: Matches the ™ symbol. Pretty simple, yet I dont think existed on RegExLib before.
\u2122

#U: http://regexlib.com/REDetails.aspx?regexp_id=674
#A: Roman Lukyanenko
#D: Matches the registered trademark (®). Pretty simple, yet I dont think existed on RegExLib before.
\u00AE

#U: http://regexlib.com/REDetails.aspx?regexp_id=675
#A: Roman Lukyanenko
#D: Matches the British Pound symbol. Pretty simple, yet I dont think existed on RegExLib before. 
\u00A3

#U: http://regexlib.com/REDetails.aspx?regexp_id=676
#A: Roman Lukyanenko
#D: Matches the Euro sign. Pretty simple, yet I dont think existed on RegExLib before.
\u20AC

#U: http://regexlib.com/REDetails.aspx?regexp_id=677
#A: Roman Lukyanenko
#D: Matches the Yen sign. Pretty simple, yet I dont think existed on RegExLib before. 
\u00A5

#U: http://regexlib.com/REDetails.aspx?regexp_id=678
#A: Roman Lukyanenko
#D: Matches infinity symbol. Pretty simple, yet I dont think existed on RegExLib before. 
\u221E

#U: http://regexlib.com/REDetails.aspx?regexp_id=679
#A: Michael Ash
#D: Matches any character is the Basic Latin Unicode Range \U0000-U007F  (Ascii 0-127)
#D: I've blogged about this and other expressions here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
\p{IsBasicLatin}

#U: http://regexlib.com/REDetails.aspx?regexp_id=680
#A: Michael Ash
#D: Matches numbers.  Note: the second match (?) and the second non-match (IV) are not the same. I cover this in more detail here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
\p{N}

#U: http://regexlib.com/REDetails.aspx?regexp_id=681
#A: Michael Ash
#D: Math Symbols.  NOTE: the second examples of match and non-match are not the same.  The non-match is the keyboard dash.  The match is the unicode minus sign.
\p{Sm}

#U: http://regexlib.com/REDetails.aspx?regexp_id=682
#A: khoi le
#D: This will match US most common telephones format with extension or with out extension.  Works with both Java and .NET.
((\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}(\s(x\d+)?){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=685
#T: Validate 12hour clock
#A: Ariel Merrell
#D: A co-worker needed a regex to validate time.  He could only find patterns that match a 24hour clock.  I whipped this expression up to validate a 12hour clock. Hope somebody finds it useful.
(?<Time>^(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d(?:[ap]m)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=686
#T: UK Domain Names
#A: Amos Hurd
#D: UK domain names. Includes the following restrictions from Nominet as at time of posting:
#D: 1.Only a-z, 0-9 and hyphen may be used.
#D: 2.First or last character may not be a hyphen.
#D: 3.Third and fourth characters may not both be hyphens.
#D: 4.Third level domain may not be a single character.
#D: 5.Third level domain may not be two letters or two numbers.
#D: 6.Third level domain may be one letter and one number.
#D: This does not yet include the following restrictions:
#D: 1.Whole domain may not be longer than 64 characters in length.
#D: 2.Third level domain may not duplicate any top/second level domain.
^(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\-](([a-z0-9\-][a-z0-9])|([a-z0-9][a-z0-9\-]))[a-z0-9\-]*[a-z0-9]))\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\.uk$

#U: http://regexlib.com/REDetails.aspx?regexp_id=687
#T: UK Domain Names with Protocol
#A: Amos Hurd
#D: UK domains with protocol for http/https/ftp. Based on my previous expression, this allows the subdomain "www" for the http/https protocols, or "ftp" for the ftp protocol only.
^(ht|f)tp((?<=http)s)?://((?<=http://)www|(?<=https://)www|(?<=ftp://)ftp)\.(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\-](([a-z0-9\-][a-z0-9])|([a-z0-9][a-z0-9\-]))[a-z0-9\-]*[a-z0-9]))\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\.uk$

#U: http://regexlib.com/REDetails.aspx?regexp_id=688
#A: Nicholas Berardi
#D: This allows the formatting of most phone numbers.
^(?:(?:[\+]?(?<CountryCode>[\d]{1,3}(?:[ ]+|[\-.])))?[(]?(?<AreaCode>[\d]{3})[\-/)]?(?:[ ]+)?)?(?<Number>[a-zA-Z2-9][a-zA-Z0-9 \-.]{6,})(?:(?:[ ]+|[xX]|(i:ext[\.]?)){1,2}(?<Ext>[\d]{1,5}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=689
#A: Don Johnston
#D: This US phone number edit with restricted format options: Accepts optional parens on area code with or without following space, and dashes between area code, central office code and station code. Formats include only (222) 555-1212 (with or without a space) and 222-555-1212. Conforms to NANP A-digit and D-digit requirements (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. 
^(?:\([2-9]\d{2}\)\ ?|(?:[2-9]\d{2}\-))[2-9]\d{2}\-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=690
#A: yoram o
#D: evaluates dates in the format of DD/MM/YY or DD/MM/YYYY
#D: DD & YY - can be of the form:
#D: One digit            2
#D: Zero leading        02
(?<Day>[0-3][0-9]|[1-9])/(?<Month>[1-9]|1[0-2]|0[1-9])/(?<Year>[12]\d{3}|\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=691
#T: dd/mm/yyyy hhMMss Julian to Gregorian DateTime
#A: Michael Ash
#D: dd-mm-yyyy Datetime for AD, with leap year.
#D: See http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for details on this and similar regexs
(?#Datetime for Julian and Gregorian Calenders\NMatchs dates from  0045 BC to 9999 A.D.\NDays  and months are  1 or 2 digits\NYears are 4 digit with leading zeros if required.\NFebruary is validate in all leap years\NLeap year rules for Julian and Gregorian calendars http://scienceworld.wolfram.com/astronomy/LeapYear.html\NMissing days for 1582 and 1752 are not matched.  Though only one set should be applied to a calendar since they are caused by when the calendar was adopted\NMissing days http://scienceworld.wolfram.com/astronomy/GregorianCalendar.html\NTime can be either 12 or 24 hour format\N12 hour format hh:MM:ss AM|PM\Nminutes and seconds are optional\N24 hour format hh:mm:ss\Nseconds are optional, hours less than ten require leading zero\NDatetome format is a date, a space then a time.\N)\N(?#Calandar from January 1st 45 B.C. to December 31, 1999\Nin dd/mm/yyyy format)\N(?!\N(?:(?:0?[5-9]|1[0-4])(?<sep>[-./])10\k<sep>(?:1582))| #Missing days from 1582\N(?:(?:0?[3-9]|1[0-3])(?<sep>[-./])0?9\k<sep>(?:1752)) #or Missing days from 1752\N(?# both sets of missing days such not be in the same calendar\Nso remove one or the other)\N)\N(?n:^(?=\d)    # the character at the beginning a the sring must be a digit\N(\N(?<day>31(?!.0?[2469]|11)|30(?!.0?2)|\N29(?(.0?2)(?=.0?2.(?! #exclude these years from leap year pattern\N000[04]  #No year 0 and no leap year in year 4\N|\N(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)\N(?# centurial years > 1500 not evenly divisible by 400\Nare not leap year)\N)\N(?:(?:(?:\d\d) # century\N(?:[02468][048]|[13579][26]) #leap years\N(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC)))|(?!.0?2))|\N2[0-8]|1\d|0?[1-9])\N(?<sep>[-./])  # choose a date separator\N(?<month>\N(0?[1-9])|1[012])           #end of month check\N(?# The maximum number of days allowed for a month has\Nalready been checked for in the month check.\NIf you made it this far the number of day is\Nwithin the range for the given month)\N\k<sep>  # Match the same date separator choosen before.\N(?<year>(?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:\z|(?:\x20\d))))\d{4}(?:\x20BC)?  # a four digit year.  Use leading zeros if needed\N)\N(?(?=\x20\d)\x20|$))?  # if there is a space followed by a digit check for time\N(?<time>\N( # 12 hour format\N(0?[1-9]|1[012])  # hours\N(:[0-5]\d){0,2}  # optional minutes and seconds\N(?i:\x20[AP]M) # required AM or PM\N)| # 24 hour format\N(\N[01]\d|2[0-3]) #hours\N(:[0-5]\d){1,2}) #required minutes optional seconds\N?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=692
#A: de kleine Gerardus
#D: Time in 24h format; minutes must be two digits; hours may be one or two digits
^([0-1]?\d|2[0-3]):([0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=693
#A: Kevin Wennemuth
#D: Matches german standard postal codes named 'Postleitzahl'
^[0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=694
#A: Knut Hamang
#D: Based on some of the other patterns on RegExpLib. This is the ISO way of writing dates.
^((((19|20)(([02468][048])|([13579][26]))-02-29))|((20[0-9][0-9])|(19[0-9][0-9]))-((((0[1-9])|(1[0-2]))-((0[1-9])|(1\d)|(2[0-8])))|((((0[13578])|(1[02]))-31)|(((0[1,3-9])|(1[0-2]))-(29|30)))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=695
#A: Christopher Townson
#D: Validates UK postcodes  and aligns in parenthesized subpatterns according to standard UK postcode elements. Validation is according to guidelines outlined at http://www.govtalk.gov.uk/gdsc/html/noframes/PostCode-2-1-Release.htm
#D: Postcode elements are separated according to description at http://www.graticule.com/data/uk/pcdata.html
#D: Expression is not thoroughly tested, but seems to be doing ok so far!
#D: Comments and improvements welcome.
^((([A-PR-UWYZ])([0-9][0-9A-HJKS-UW]?))|(([A-PR-UWYZ][A-HK-Y])([0-9][0-9ABEHMNPRV-Y]?))\s{0,2}(([0-9])([ABD-HJLNP-UW-Z])([ABD-HJLNP-UW-Z])))|(((GI)(R))\s{0,2}((0)(A)(A)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=696
#A: richard aquilo
#D: valid values are du or gu or tu or ds or gs or da or ga or
#D: or ta or dq or gq or tq, upper & lowercase 
[du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=697
#A: richard aquilo
#D: valid values are du or gu or tu or ds or gs or da or ga or
#D: or ta or dq or gq or tq, upper & lowercase 
[du]{2}|[gu]{2}|[tu]{2}|[ds]{2}|[gs]{2}|[da]{2}|[ga]{2}|[ta]{2}|[dq]{2}|[gq]{2}|[tq]{2}|[DU]{2}|[GU]{2}|[TU]{2}|[DS]{2}|[GS]{2}|[DA]{2}|[GA]{2}|[TA]{2}|[DQ]{2}|[GQ]{2}|[TQ]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=698
#A: Thijs Wijnmaalen
#D: Matches a md5 hash, simple yet powerful
^([a-z0-9]{32})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=699
#A: de kleine Gerardus
#D: Postcode for the Netherlands
^[1-9]{1}[0-9]{3}\s?[A-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=700
#A: Gerrard Lindsay
#D: A simple url search pattern that works against the most generic cases. A little better in terms of matches than the other URL expressions listed.
[a-zA-Z]{3,}://[a-zA-Z0-9\.]+/*[a-zA-Z0-9/\\%_.]*\?*[a-zA-Z0-9/\\%_.=&]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=701
#A: Jason N. Gaylord
#D: This expression is a very simplex expression that allows null values or 3 digits, dash, 3 digits, dash, 4 digits. It validates a basic US phone number. Written by Jason N. Gaylord.
^(\d{3}-\d{3}-\d{4})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=702
#A: Jason N. Gaylord
#D: This expression is a simplex expression that checks to see if a value is a valid phone system terminal number. It allows a null value or 2 digits, dash, 2 digits. Written by Jason N. Gaylord.
^(\d{2}-\d{2})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=703
#A: ic onur
#D: will match free floating valid protocol + urls in text ... will not touch the ones wrapped in a tag, so that you can auto-link the ones that aren't :) couple of things to know :
#D: 1. if the url is next to a tag this won't work (eg : <br>http://www.acme.com), the url must either start with a \s, \n or any character other than >.
#D: 2. the pattern will match the preceding \s and \n too, so when you replace put them back in place $1 will either be \s or \n, $2 will be the exact match
#D: vb usage :
#D: set re = New RegExp
#D: re.Pattern ="(\s|\n|^)(\w+://[^\s\n]+)"
#D: strResult = re.Replace(strText, "$1<a href='$2' target='_new'>$2</a>")
(\s|\n|^)(\w+://[^\s\n]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=704
#A: Joseph Lamb
#D: This expression filters all variations of Post Office Box or PO Box.
(^(p[\s|\.|,]*|\N^post[\s|\.]*)(o[\s|\.|,]*|\Noffice[\s|\.]*))|\N(^box[.|\s]*\d+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=705
#A: marrik 
#D: Match for dutch zipcodes.
#D: Dutch zipcodes are always in the format of 4 digits and 2 letters.
[0-9]{4}[A-Z]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=706
#A: Michael Ash
#D: This pattern matches lower-case letters
(?-i:\b\p{Ll}+\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=707
#A: Michael Ash
#D: Matches uppercase unicode alpha characters
(?-i:\b\p{Lu}+\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=708
#A: Yik Kheam Tan
#D: This expression is an improved version of Jörg Maag. It checks a date field in the Australian DD/MM/YYYY format. Besides, it also validates leap year between 1900 and 2099.
^(((((0[1-9])|(1\d)|(2[0-8]))/((0[1-9])|(1[0-2])))|((31/((0[13578])|(1[02])))|((29|30)/((0[1,3-9])|(1[0-2])))))/((20[0-9][0-9]))|((((0[1-9])|(1\d)|(2[0-8]))/((0[1-9])|(1[0-2])))|((31/((0[13578])|(1[02])))|((29|30)/((0[1,3-9])|(1[0-2])))))/((19[0-9][0-9]))|(29/02/20(([02468][048])|([13579][26])))|(29/02/19(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=709
#A: Felipe Albacete
#D: This is the Brazilian Date Format.
#D: DD/MM/YYYY with the right days per month.
#D: Dates >=1900 <=2999.
(((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=710
#A: Felipe Albacete
#D: Expression to validate values to fields Decimal 5,2 or 5 numbers. values >=100,00 <=99999,99
#D: 100,00=100
#D: 5000,00 = 5000
(^\d{3,5}\,\d{2}$)|(^\d{3,5}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=711
#T: email address (RFC 2822 mailbox)
#A: Mark Cranness
#D: This accepts RFC 2822 email addresses in the form:<br>
#D: blah@blah.com OR<br>
#D: Blah <blah@blah.com><br>
#D: <br>
#D: RFC 2822 email 'mailbox':<br>
#D: mailbox   = name-addr | addr-spec<br>
#D: name-addr = [display-name] "<" addr-spec ">"<br>
#D: addr-spec = local-part "@" domain<br>
#D: domain    = rfc2821domain | rfc2821domain-literal<br>
#D: <br>
#D: local-part conforms to RFC 2822.<br>
#D: <br>
#D: domain is either:<br>
#D: An rfc 2821 domain (EXCEPT that the final sub-domain must consist of 2 or more letters only).<br>
#D: OR<br>
#D: An rfc 2821 address-literal.<br>
#D: (Note, no attempt is made to fully validate an IPv6 address-literal.)<br>
#D: <br>
#D: Notes:<br>
#D: This pattern uses (.NET/Perl only?) features named group "(?<name>)" and alternation/IF (?(name)).<br>
#D: <br>
#D: See <a href="http://regexadvice.com/forums/permalink/26742/26742/ShowThread.aspx#26742">this regexadvice.com thread</a> for more info, including a version that does not use .NET features.<br>
#D: <br>
#D: RFC 2822 (and 822) do allow embedded comments, whitespace, and newlines within *some* parts of an email address, but this pattern above DOES NOT.<br>
#D: <br>
#D: RFC 2822 (and 822) allow the domain to be a simple domain with NO ".", but this pattern requires a compound domain at least one "." in the domain name, as per RFC 2821 (4.1.2).<br>
#D: <br>
#D: RFC 2822 allows/disallows certain whitespace characters in parts of an email address, such as TAB, CR, LF BUT the pattern above does NOT test for these, and assumes that they are not present in the string (on the basis that these characters are hard to enter into an edit box).
^((?>[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=712
#A: Rohan Pathare
#D: Mathces in format DD-MON-YYYY (hyphen between results). Validates for leap years. Ensures month is in uppercase.
^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])-(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)-((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=713
#A: Fabiano Santiago
#D: Essa expressão é uma validação de data simplicada onde não aceita datas com ano inferior a 1900. Interessante pra validação de data de idade, data atual, etc
(0?[1-9]|[12][0-9]|3[01])[/ -](0?[1-9]|1[12])[/ -](19[0-9]{2}|[2][0-9][0-9]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=714
#A: jawa adi
#D: 
([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=715
#A: Diego Santos
#D: A simple expression for validate in .net RegularExpressionValidator.
^[\+\-]?\d+(,\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=716
#A: Manny Ruiz
#D: This pattern matches whole numbers 1-100. 
^([1-9]|[1-9]\d|100)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=717
#A: Adam Smith
#D: 24 hour clock as prefered by MS-SQL, allows for shorter more human methods of writing time (no preceding zero or seconds required).
#D: MS-SQL prefers semi-colon although this accepts full stops for users ease of use.
^(20|21|22|23|[01]\d|\d)(([:.][0-5]\d){1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=718
#A: wallace dos santos damiao
#D: A simple expression to brazilian phone number code modified expression of Rafael, beyond international code, simple DDI without "+" 99 plus simple DDD (99) plus simple and whitout parentheses em trace, local phone number 3 or 4 digits plus "-" plus 4 digits.
^([0-9]{2})?((\([0-9]{2})\)|[0-9]{2})?([0-9]{3}|[0-9]{4})(\-)?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=719
#A: s l
#D: This regex validates a persons first name. Acceptable names include compound names with a hyphen or a space in them.
^[a-zA-Z]+((\s|\-)[a-zA-Z]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=720
#A: s l
#D: This regex validates a persons last name. Acceptable names can include compound names seperated by a hyphen or a space.
^[a-zA-Z]+((((\-)|(\s))[a-zA-Z]+)?(,(\s)?(((j|J)|(s|S))(r|R)(\.)?|II|III|IV))?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=721
#A: Felipe Albacete
#D: This is an new data Validation to MM/YYYY from 1900 to 2999 this is an validation expression  to Client From MOnth/Year.
(((0[123456789]|10|11|12)([/])(([1][9][0-9][0-9])|([2][0-9][0-9][0-9]))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=722
#A: jeremy chapman
#D: Matches 24 hour time format.
^(([1-9]{1})|([0-1][0-9])|([1-2][0-3])):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=723
#A: jeremy chapman
#D: Matches 12 hour time format
^(([1-9]{1})|([0-1][1-2])|(0[1-9])|([1][0-2])):([0-5][0-9])(([aA])|([pP]))[mM]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=724
#A: Les Portugal
#D: This is a regular expression I used to validate negative and positive WHOLE numbers, including 0.
(^[0]{1}$|^[-]?[1-9]{1}\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=725
#A: Ullrich Clemenz Canaan
#D: I searched for a smiley expression but couldn't find one. This one should find all the usual ways of writing the sad emotion icon.
[:;]{1}[-~+o]?[(<\[]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=726
#A: Ullrich Clemenz Canaan
#D: This ist the Expression for a happy smiley. It should find all the usual writings of the emotion icon :)
[:]{1}[-~+o]?[)>]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=727
#A: Michael Ash
#D: Height notation for feet (') and inches(")
^\d?\d'(\d|1[01])"$

#U: http://regexlib.com/REDetails.aspx?regexp_id=728
#A: Michael Ash
#D: Temperature scale.  From ABSOLUTE ZERO  up.  Can use the Fahrenheit, Celsius or Kelvin Scale.  The Degree symbol is required for Fahrenheit and Celsius. Numbers over 1,000 must be comma delimited.
^(?n:(?!-[\d\,]*K)      (?!-((\d{1,3},)*((([3-9]\d\d|2[89]\d|27[4-9])\xB0C)|(((4[6-9]|[5-9]\d)\d)\xB0F))))  -?\d{1,3}(,\d{3})*(\xB0[CF]|K)\N)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=729
#A: Murray Roke
#D: Matches all positive & negative decimal floating point numbers, to any magnitude. Allows empty string.
^-?\d*(\.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=730
#A: Michael Ash
#D: Matches each card in the deck of standard playing cards, not including the Jokers
([2-9JQKA]|10)([\u2660\u2663\u2665\u2666])

#U: http://regexlib.com/REDetails.aspx?regexp_id=731
#A: Peter Donker
#D: Word HTML cleanup code. Use this expression to get rid of most of the stuff that Word adds to an HTML document such as: lots of span elements, font-family and font-size style attributes, class attributes, a whole bunch of if-then statements. Use this expression in a regex.replace(originalHtml, regExpr, "").
(?s)( class=\w+(?=([^<]*>)))|(<!--\[if.*?<!\[endif\]-->)|(<!\[if !\w+\]>)|(<!\[endif\]>)|(<o:p>[^<]*</o:p>)|(<span[^>]*>)|(</span>)|(font-family:[^>]*[;'])|(font-size:[^>]*[;'])(?-s)

#U: http://regexlib.com/REDetails.aspx?regexp_id=732
#A: John Main
#D: Cheap and cheerful URL checker. Requires a http/https/ftp at the start and will then allow anything starting with at least a <something>.<something>.<something> then valid characters separated by dots and slashes
^(ht|f)tp(s?)\:\/\/[a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+){2,}(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=733
#A: Björn Ahlers
#D: Get any file extension...
.+\.([^.]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=734
#A: Dennis de Jong
#D: This Expression checks if the value is an integer, positive, not zero and not a decimal.
#D: Very handy for use when people need to fill in whole numbers, like when ordering car parts on a website (you dont want your customers to order -10 tires or 0.7 mirrors..
^[0-9]*[1-9]+$|^[1-9]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=735
#A: Lewis Moten
#D: Validates 1 or more email addresses.  Email addresses can be delimited with either comma or semicolon.  White space is allowed after delimiter, but not necessary.  I needed this to allow my users to specify multiple email addresses if they choose to do so.
\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*([,;]\s*\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=736
#A: Dan Breen
#D: Simple US phone number matching, allowing area code or not. Allows spaces, dashes, dots, or none of the above. Area code, if entered, can be surrounded by parenthesis or not.
^(\(?[0-9]{3}[\)-\.]?\ ?)?[0-9]{3}[-\.]?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=738
#A: Man Manovich
#D: Matches the number at the end of the string.
^((?:.*(?!\d))*(?:\D*)?)(\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=741
#T: UK Domain Names with Protocol and Port
#A: Amos Hurd
#D: UK http/https/ftp URI. Based on my previous expression, this one takes an optional port number and optional trailing slash.
^(ht|f)tp((?<=http)s)?://((?<=http://)www|(?<=https://)www|(?<=ftp://)ftp)\.(([a-z][0-9])|([0-9][a-z])|([a-z0-9][a-z0-9\-]{1,2}[a-z0-9])|([a-z0-9][a-z0-9\-](([a-z0-9\-][a-z0-9])|([a-z0-9][a-z0-9\-]))[a-z0-9\-]*[a-z0-9]))\.(co|me|org|ltd|plc|net|sch|ac|mod|nhs|police|gov)\.uk(:\d+)?\/?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=742
#A: Charles Eatley
#D: US telephone pattern.  Optional area code with or without '()'.  If area code has parentheses then it is optionally followed by - or space. If no parentheses then it must be followed by - or space.  Number must be separated by either a space or -.
^(\(\d{3}\)[- ]?|\d{3}[- ])?\d{3}[- ]\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=743
#A: Chris Price
#D: Matches SpamAsssasin score above an arbitrary number.  Allows sorting of spam based on SpamAssassin score.  * should be replaced the symbol configured in SpamAssassin.  
X-Spam-Level:\s[*]{11}

#U: http://regexlib.com/REDetails.aspx?regexp_id=744
#A: Benny Tordrup
#D: Expression validating a series of hex codes (byte values) separated by spaces.
^([0-9a-fA-F]{1,2})(\s[0-9a-fA-F]{1,2})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=745
#A: krest krest
#D: For who use a space as thousands separator like french, deutsch ....
(^(((\d)|(\d\d)|(\d\d\d))(\xA0|\x20))*((\d)|(\d\d)|(\d\d\d))([,.]\d*)?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=746
#A: Toby Henderson
#D: This will match all tags in a string, it's good for stripping HTML or XML tags to get the plain text.It works with attributes that include javascript or "<>".
#D: It will match all these
#D: <hr size="3"
#D: noshade
#D: color="#000000"
#D: align="left">
#D: <p style="margin-top:0px;margin-bottom:0px"
#D: align="center"><font face="Times New Roman"
#D: size="5"><b>UNITED STATES</b></font></p>
#D: <input type=button onclick='if(n.value>5)do_this();'> not this <br> <input type=button onclick="n>5?a():b();" value=test> not this <br> <input type=button onclick="n>5?a(\"OK\"):b('Not Ok');" value=test> not this <br> <input type=button onclick='n>5' value=test onmouseover="n<5&&n>8" onmouseout='if(n>5)alert(\'True\');else alert("False")'> not this <br>
<(?:[^"']+?|.+?(?:"|').*?(?:"|')?.*?)*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=747
#A: Michael Ash
#D: Internationally capable currency formats.  It is NOT local aware.  Should be modify for local specific validations.
#D: More detail at http://blogs.regexadvice.com/mash/archive/2004/06/08/1246.aspx
^(?!\u00a2)  #Don't allow cent symbol\N\p{Sc}?     #optional unicode currency symbols\N(?!0,?\d)   #don't allow leading zero if 1 or more unit\N(?:\d{1,3}    # 1 to 3 digits\N(?:([, .])\d{3})?  # if there is a separator it must be followed by 3 digits\N(?:\1\d{3})*  # if the is more than two groups the same separtor must but used, it must be followed by 3 digits\N|(?:\d+))      # more than 3 digit with no comma separator\N((?!\1)[,.]\d{2})?$  # option cents

#U: http://regexlib.com/REDetails.aspx?regexp_id=748
#A: Kesav Kumar Kolla
#D: This expression is a trim using regular expression.  This expression removes white spaces before and after the given input string
^\s+|\s+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=749
#A: Mohit  Yadav
#D: This Works good until we want a multiple email address validator, I am working on it to make it work with the multiple email address, If anyone can work on this part as to validate a multiple email address then that will produce a very good expression, i think the best of this kind. AIM - to Validate Mohit <myadav@yahoo.com>; Rohit <ryadav@yahoo.com>; .........(any number of times)
^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*\s+<(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})>$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=750
#A: anil agarwal
#D: 
^((31(?!\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=751
#A: Moiz Tankiwala
#D: I have written this regular expression for use in javascript. It sould work for other languages directly or with minor changes. The parsing logic in this regular expression works like this : Imagine a tree structure, input at the root, Level 1 : two branches one-non Feb months two-Feb month. In the Feb month again two branches one-leap year Feb and two-non leap year Feb. In the non-Feb branch, we have two branches again, one-30 days month and two-31 days month. Once you get this, I think it will be easier to figure out the rest. 
(^(((([1-9])|([0][1-9])|([1-2][0-9])|(30))\-([A,a][P,p][R,r]|[J,j][U,u][N,n]|[S,s][E,e][P,p]|[N,n][O,o][V,v]))|((([1-9])|([0][1-9])|([1-2][0-9])|([3][0-1]))\-([J,j][A,a][N,n]|[M,m][A,a][R,r]|[M,m][A,a][Y,y]|[J,j][U,u][L,l]|[A,a][U,u][G,g]|[O,o][C,c][T,t]|[D,d][E,e][C,c])))\-[0-9]{4}$)|(^(([1-9])|([0][1-9])|([1][0-9])|([2][0-8]))\-([F,f][E,e][B,b])\-[0-9]{2}(([02468][1235679])|([13579][01345789]))$)|(^(([1-9])|([0][1-9])|([1][0-9])|([2][0-9]))\-([F,f][E,e][B,b])\-[0-9]{2}(([02468][048])|([13579][26]))$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=752
#A: Bruce Hatherly
#D: Here is a regular expression I wrote that validates U.S. phone numbers with area codes. You can't have a leading '0' or '1' but you can separate the number blocks with a space, a dot, a slash, or a hyphen. It also prevents a '0' or '1' for the first digit of the prefix. No extension is allowed and it must be 10 digits.
^[\(]? ([^0-1]){1}([0-9]){2}([-,\),/,\.])*([ ])?([^0-1]){1}([0-9]){2}[ ]?[-]?[/]?[\.]? ([0-9]){4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=756
#A: Scott Willeke
#D: CSS Length Unit Regex for cm, mm, in, pt (not px, ex, em)
^\s*\N(?<signedNumber>(\+|\-){0,1}((\d*(\.\d+))|(\d*)){1})\N(?<unit>((in)|(cm)|(mm)|(pt)){0,1})\N\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=757
#A: Brendon Frater
#D: Canadian Branch-Transit number test.
#D: The branch number must be 3 or 4 didgits then '-' then five didgets.
^(\d{3}|\d{4})[-](\d{5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=758
#A: Jason Paschal
#D: the regex's on this site for pulling links off a page always seemed to be faulty, or at least never worked with PHP, so i made this one.  simple, as i'm an amateur with regex's, but stumbled thru it and this one actually works.  tested with PHP function: preg_match_all("/href[ ]*=[ ]*('|\")([^\"'])*('|\")/",$string,$matches)
href[ ]*=[ ]*('|\")([^\"'])*('|\")

#U: http://regexlib.com/REDetails.aspx?regexp_id=759
#A: Rebecca McGee
#D: Matches basic SMTP server names.
^(smtp)\.([\w\-]+)\.[\w\-]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=760
#T: A.D. Calendar dates
#A: Michael Ash
#D: yyyy-mm-dd Datetime for AD, with leap year. See http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for details on similar regexs
(?#Calandar from January 1st 1 A.D to December 31, 9999 )(?# in yyyy-mm-dd format )(?!(?:1582\D10\D(?:0?[5-9]|1[0-4]))|(?#Missing days from 1582 )(?:1752\D0?9\D(?:0?[3-9]|1[0-3]))(?#or Missing days from 1752 )(?# both sets of missing days should not be in the same calendar so remove one or the other))(?n:^(?=\d)(?# the character at the beginning a the string must be a digit )((?'year'\d{4})(?'sep'[-./])(?'month'0?[1-9]|1[012])\k'sep'(?'day'(?<!(?:0?[469]|11).)31|(?<!0?2.)30|2[0-8]|1\d|0?[1-9]|(?# if feb 29th check for valid leap year )(?:(?<=(?!(?#exclude these years from leap year pattern ) 000[04](?#No year 0 and no leap year in year 4 )|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)(?# centurial years > 1500 not evenly divisible by 400 are not leap year))(?:(?:\d\d)(?# century)(?:[02468][048]|[13579][26])(?#leap years))\k'sep'(?:0?2)\k'sep')|(?# else if not Feb 29 )(?<!\k'sep'(?:0?2)\k'sep')(?# and day not Feb 30 or 31 ))29)(?(?=\x20\d)\x20|$))?(?# if there is a space followed by a digit check for time )(?<time>((?# 12 hour format )(0?[1-9]|1[012])(?# hours )(:[0-5]\d){0,2}(?# optional minutes and seconds )(?i:\x20[AP]M)(?# required AM or PM ))|(?# 24 hour format )([01]\d|2[0-3])(?#hours )(:[0-5]\d){1,2})(?#required minutes optional seconds )?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=644
#A: Michael Ash
#D: mm/dd/yyyy hh:MM:ss Datetime for all AD years, including leap years.
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=644
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">11/24/0004 11:59 PM <span class='separator'>|</span> 2.29.2008 <span class='separator'>|</span> 02:50:10
(?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=691
#A: Michael Ash
#D: dd/mm/yyyy hh:MM:ss Datetime for all AD years, including leap years.
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=691
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">31.12.6008 <span class='separator'>|</span> 5:30 AM <span class='separator'>|</span> 30-04-1066
^(?=\d)(?:(?!(?:(?:0?[5-9]|1[0-4])(?:\.|-|\/)10(?:\.|-|\/)(?:1582))|(?:(?:0?[3-9]|1[0-3])(?:\.|-|\/)0?9(?:\.|-|\/)(?:1752)))(31(?!(?:\.|-|\/)(?:0?[2469]|11))|30(?!(?:\.|-|\/)0?2)|(?:29(?:(?!(?:\.|-|\/)0?2(?:\.|-|\/))|(?=\D0?2\D(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|2[0-8]|1\d|0?[1-9])([-.\/])(1[012]|(?:0?[1-9]))\2((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:$|(?=\x20\d)\x20)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=760
#A: Michael Ash
#D: yyyy/mm/dd hh:MM:ss Datetime for all AD years, including leap years.
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=760
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">0008-02-29 <span class='separator'>|</span> 2:34:59 PM <span class='separator'>|</span> 9999/12/31 11:59 PM
^(?=\d)(?:(?!(?:1582(?:\.|-|\/)10(?:\.|-|\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\.|-|\/)0?9(?:\.|-|\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\.|-|\/)(?:29|30))))(\d{4})([-\/.])(0?\d|1[012])\2((?!00)[012]?\d|3[01])(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=764
#A: Josh Aversa
#D: This is a pretty flexable phone number validator for US numbers.  Allows optional country code and area code.  Allows separation of numbers with " ", "-", "." or nothing to seperate.  Area codes can be in parenthesis or not.  Validates that you'll get 7, 10, or 11 digits in the way the most number of people option when writing them.
^((\d[-. ]?)?((\(\d{3}\))|\d{3}))?[-. ]?\d{3}[-. ]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=765
#A: Phil Cogbill
#D: Matches URLS that start with numbers and  any TLD that is 2 to 6 characters long. Matches most URLs.  Thanks to eveyone for suggesting modifications!
#D: UPDATES::[Nov. 11, 2005] Now it matches uppercase and lower case protocols.
#D: Updates::December 3,  2005  Added restriction to ports since they will only go up to 65535. (Thanks  lorello)
#D: Keep the suggestions coming! Thanks for the heads up!!
^((((H|h)(T|t)|(F|f))(T|t)(P|p)((S|s)?))\://)?(www.|[a-zA-Z0-9].)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,6}(\:[0-9]{1,5})*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&%\$#\=~_\-]+))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=766
#A: Phil Cogbill
#D: Identifies http, https, ftp, and ftps 
^(((ht|f)tp(s?))\://).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=767
#A: Ruben Zevallos
#D: Brazilia ZIP Code validation!
((^\d{5}$)|(^\d{8}$))|(^\d{5}-\d{3}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=768
#A: Ruben Zevallos
#D: Telefone for Brazilian telefone standard. The Area code is optional.
^(\d{2,3}|\(\d{2,3}\))?[ ]?\d{3,4}[-]?\d{3,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=769
#A: Ruben Zevallos
#D: Validation for Brazilian telephone with required area code.
^(\d{2,3}|\(\d{2,3}\))[ ]?\d{3,4}[-]?\d{3,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=770
#A: Eric Miller
#D: Password must contain at least one letter, at least one number, and be longer than six charaters.
^(?=.*[0-9]+.*)(?=.*[a-zA-Z]+.*)[0-9a-zA-Z]{6,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=771
#A: Jeremy Baynham
#D: Standard freight container number in upper or lower case.
^[a-zA-Z]{3}[uU]{1}[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=772
#T: Basic UK Child Benefit Reference
#A: Amos Hurd
#D: Basic UK child benefit reference number.
^[A-Z]{3}\d{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=774
#A: Tony Hawe
#D: A very short pattern for extracting hrefs from HTML, does not validate they are within a tag
href[\s]*=[\s]*"[^\n"]*"

#U: http://regexlib.com/REDetails.aspx?regexp_id=775
#A: Heiko Krott
#D: Regular expression to evaluate a date in German date format (DD.MM.YYYY). Leading zeros for days and months are valid. Period from 1.1.2000 until 31.12.2099 is valid. Leap years are checked.
^(((((0?[1-9])|(1\d)|(2[0-8]))\.((0?[1-9])|(1[0-2])))|((31\.((0[13578])|(1[02])))|((29|30)\.((0?[1,3-9])|(1[0-2])))))\.((20[0-9][0-9]))|(29\.0?2\.20(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=776
#A: Dinesh  Copoosamy
#D: This regexp is used to match c++,java,etc style multi-line and single line comments.
(\/\*(\s*|.*?)*\*\/)|(\/\/.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=777
#A: Michael Davis
#D: My first submission. Probably pretty obvious. Just wanted something that would  check text boxes that non-programmers might fill out. Some of this came from http://www.reducedcomplexity.com/
^\s*[a-zA-Z0-9,\s\-\'\.]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=779
#A: Chris Strolia-Davis
#D: This expression will match comment blocks in javascript, c, c++, etc
#D: I wrote this as a named group called "commentblock", as I like to use it with other expressions.
#D: It avoids single line comments or inline commented code (which are not considered comment "blocks") unless the comments are in a /* text */ comment style
#D: could not create a multiline example in the matching examples, here is what I tried to enter
#D: // Some text
#D: //(must be two or more lines long and each line may only be preceded by whitespace)
(?<commentblock>((?m:^[\t ]*\/{2}[^\n\r\v\f]+[\n\r\v\f]*){2,})|(\/\*[\w\W]*?\*\/))

#U: http://regexlib.com/REDetails.aspx?regexp_id=780
#A: Brian Webb
#D: Bobby's Burger Barn
#D: Bills Barn O'Bass
#D: Billy Bob Beaumont
^[a-zA-Z0-9\x20'\.]{8,64}[^\s]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=781
#A: jeremy chapman
#D: Matches a file extention.
\.txt$

#U: http://regexlib.com/REDetails.aspx?regexp_id=783
#A: rob collyer
#D: This will match valid UK telephone numbers.  This adheres to ofcom's code and number length guide available at http://www.ofcom.org.uk/licensing_numbering/numbers/num_user_guide#1b           Brackets and international codes are not allowed.
#D: A space MUST be used after the dialling code, and spaces at the expected points within the remainder of the number can be used if need be, but not nessesary, hence 0208 6473 373 is the same as 0208 647 3373 and 0208 6473373
(^0[1-9]\d{1}\s\d{4}\s?\d{4}$)|(^0[1-9]\d{2}\s\d{3}\s?\d{4}$)|(^0[1-9]\d{2}\s\d{4}\s?\d{3}$)|(^0[1-9]\d{3}\s\d{3}\s?\d{2}$)|(^0[1-9]\d{3}\s\d{3}\s?\d{3}$)|(^0[1-9]\d{4}\s\d{3}\s?\d{2}$)|(^0[1-9]\d{4}\s\d{2}\s?\d{3}$)|(^0[1-9]\d{4}\s\d{2}\s?\d{2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=784
#A: PJ Bijoy
#D: US telephone check
^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=785
#A: doh mah
#D: 
(-\d{1,} | \d{1,} | \d{1,}-\d{1,} | \d{1,}-)(,(-\d{1,} | \d{1,} | \d{1,}-\d{1,} | \d{1,}))*

#U: http://regexlib.com/REDetails.aspx?regexp_id=786
#A: Michal Valasek
#D: Matches valid VAT identification number for all current EU's member states, in format CC-xxx or CCxxx (where CC is country code and xxx actual VAT number).
((DK|FI|HU|LU|MT|SI)(-)?\d{8})|((BE|EE|DE|EL|LT|PT)(-)?\d{9})|((PL|SK)(-)?\d{10})|((IT|LV)(-)?\d{11})|((LT|SE)(-)?\d{12})|(AT(-)?U\d{8})|(CY(-)?\d{8}[A-Z])|(CZ(-)?\d{8,10})|(FR(-)?[\dA-HJ-NP-Z]{2}\d{9})|(IE(-)?\d[A-Z\d]\d{5}[A-Z])|(NL(-)?\d{9}B\d{2})|(ES(-)?[A-Z\d]\d{7}[A-Z\d])

#U: http://regexlib.com/REDetails.aspx?regexp_id=788
#A: Oscar Portorreal
#D: 
^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=791
#A: Patrick Fogarty
#D: Validates a GUID/UUID, without capture, to the following patterns: [{hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh}],
#D: [hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh],[hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh],[0xhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh], where 'h' is a valid hex character.  This last pattern is a binary format commonly used with SQL Server 2000.  It allows you to use binary(n) and varbinary(n) parameters that convert well to unique identifier.  Please note that this is not case sensitive EXCEPT the 'x' in the binary pattern.  It must be lower case.
^((?-i:0x)?[A-Fa-f0-9]{32}|\N[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}|\N\{[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=793
#A: Kristijan Mitrovic
#D: As I could understand the HTML standard, this is the valid reg.exp. for comments.
#D: The only differenc from the last one is that the comment can be terminated by two minuses followed by none OR SOME space caracters and then by character >
<!--[\s\S]*?--[ \t\n\r]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=794
#A: Pietro Bonfa
#D: Very easy expression to get the file name from a path. I couldn't find it so I wrote it and now I post it here! Hope it could help.
/[^/]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=795
#A: Joey Brenn
#D: Matches the LDAP path of Microsoft Active Directory entry.  Checks to ensure the ADsPath attribute is accurate.
^((CN=['\w\d\s\-\&]+,)+(OU=['\w\d\s\-\&]+,)*(DC=['\w\d\s\-\&]+[,]*){2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=796
#A: James Huynh
#D: This accepts the date in the format month, day, year (1000+). The preceding zero's before the month and date are optional, the year can be in 2 or 4 digit format. This takes february leap years into affect.
#D: This was modified from a regular expression originally by Uris Virott which matched dd/mm/yyyy without the option of 2 or four digit month/day/year.
#D: Non matching examples are: 2/29/03, 10/10/0999, 04/31/02.
(((0?[13578]|[1][02])[-/]((0?[1-9]|[12]\d)|[3][01])[-/]([1-9]\d{3}|[0-9](2)))|((0?[13456789]|[1][012])[-/]((0?[1-9]|[12]\d)|[3][0])[-/]([1-9]\d{3}|[0-9]{2}))|(0?[2][-/](0?[1-9]|[12]\d)[-/]([1-9]\d)?([02468][048]|[13579][26]))|(0?[2][-/](0?[1-9]|[12][0-8])[-/][1-9]\d{3}|[0-9]{2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=797
#A: Tatham Oddie
#D: Matched Australian Postcodes, as defined by AusPost.
#D: Many Australian developers are unaware of the small range of 3 digit, or 0 starting postcodes.
#D: 220 and 221 (or 0220 and 0221) are for ANU and LVR.
#D: 800s and 900s (or 0800s and 0900s) are for NT, and parts of SA, WA.
#D: 1000s are for big companies in Sydney, competition mailings, etc.
^(((2|8|9)\d{2})|((02|08|09)\d{2})|([1-9]\d{3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=798
#A: Jens Ulrik Jacobsen
#D: Checks for the format yyyy-MM-dd HH:mm:ss
#D: also known as SortableDateTimePattern (conforms to ISO 8601) using local time. From 1900-01-01 00:00:00 to 9999-12-31 23:59:59. No check for leap year.
^(19[0-9]{2}|[2-9][0-9]{3})-((0(1|3|5|7|8)|10|12)-(0[1-9]|1[0-9]|2[0-9]|3[0-1])|(0(4|6|9)|11)-(0[1-9]|1[0-9]|2[0-9]|30)|(02)-(0[1-9]|1[0-9]|2[0-9]))\x20(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=799
#T: Special Characters
#A: Vincent Faller
#D: Does not allow these characters in a string #$%^&*()'
^(a-z|A-Z|0-9)*[^#$%^&*()']*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=137
#A: Michael Ash
#D: Matches drives, folders and file on a Windows OS. Folder matches must end with \
#D: Folder and file names can not end with a space.
#D: I limited the file extension length to 15  though that not a restriction of a file's extension
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=357
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=137
#D: Updated Feb 2005
^((?:[a-zA-Z]:)|(?:\\{2}\w[-\w]*)\$?)\\(?!\.)((?:(?![\\/:*?<>"|])(?![.\x20](?:\\|$))[\x20-\x7E])+\\(?!\.))*((?:(?:(?![\\/:*?<>"|])(?![ .]$)[\x20-\x7E])+)\.((?:(?![\\/:*?<>"|])(?![ .]$)[\x20-\x7E]){2,15}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=801
#A: Kenneth LeFebvre
#D: Parses a person's name such as MR KENNETH L LEFEBVRE PHD, allowing for optional salutation, middle name, and suffix.
#D: NOTE: The suffix must be one of a hard-coded list of suffixes.
(^((?<salutation>[MRD]\S+)[ ]+)?(?<first>\S+)[ ]+((?<middle>\S+)[ ]+)??(?<last>\S+)([ ]+(?<suffix>(PHD|MD|RN|JR|II|SR|III)))?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=802
#A: Pankaj Bhasin
#D: This expression evaluates simple currency values...  alteast 1 digit and max 5 digits and if period then atleast one digit after period and max two digits after period
(^\d{1,5}$|^\d{1,5}\.\d{1,2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=803
#A: Ron Allen
#D: Allows either inclusion of $ symbol or not. Allows a whitespace character after the $ sysmbol or not. Allows a negative symbol in front of the starting digit or not. Allows comma separators at thousands, but nowhere else. Allows more than two decimal places.
^(\$)?(\s)?(\-)?((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{2,})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=804
#A: Janine White
#D: D&D dice:
#D: If no dice are entered, 1 can be assumed.
#D: d or D is required to indicate sides, and cannot exist without a sides digit.
#D: The modifier is optional.  However, if there is a modifier, a sign and an addend must be included.
(?<dice>\d*)(?<dsides>(?<separator>[\d\D])(?<sides>\d+))(?<modifier>(?<sign>[\+\-])(?<addend>\d))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=805
#A: D dW
#D: This RegEx can be used to varify (esp. when receiving data from forms) filenames. No Path is allowed. German Special Characters are allowed.
^[\w0-9äÄöÖüÜß\-_]+\.[a-zA-Z0-9]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=806
#A: Luke Arms
#D: Simple URL Validator -- allows http, https, ftp, ftps, 2-6 letter TLD, ports, any path. Sorry, no IP addresses. Not too fussy, but then, it's not too long either ;-)
^((ht|f)tp(s?))\://([0-9a-zA-Z\-]+\.)+[a-zA-Z]{2,6}(\:[0-9]+)?(/\S*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=807
#A: Asbjørn Ulsberg
#D: Matches MIME Media Types, often to be seen in HTTP
#D: 'Content-Type' headers. Extracts the top level type, sub type, format type and charset parameter and assigns them to their respective group in the expression.
^(?<toplevel>[a-z]+)  # Matches the top level MIME type, e.g. 'text'\N# in 'text/html'\N/(?<subtype>[a-z]+)   # Matches the sub type, e.g. 'html' in 'text/html'\N(\+(?<formattype>[a-z]+))? # Matches the format type, e.g. 'xml' in\N# 'application/xhtml+xml'\N# (Optional part of the MIME type)\N(; *?charset="?(?<charset>[a-z0-9\-]+)"?)?$  # matches the 'charset'\N# parameter in the MIME type, e.g. 'iso-8859-1'\N# in 'text/html; charset=iso-8859-1'\N# (Optional part of the MIME type)

#U: http://regexlib.com/REDetails.aspx?regexp_id=808
#A: harold weathervein
#D: will match all dates in mm/dd/yyyy format. takes into account leap-years and months without 31 days.
^(?:(?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)|(?:0?2)(?:(?!\/3[01]|\/29\/(?:(?:0[^48]|[13579][^26]|[2468][^048])00|(?:\d{2}(?:0[^48]|[13579][^26]|[2468][^048]))))))\/(?:0?[1-9]|[12][0-9]|3[01])\/\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=809
#A: Paulo Cunha
#D: Matches euro currency (portuguese regional options).
#D: Uses the dot sign as the thousands separator (optional) and the comma sign as the decimal separator.
#D: Matches only 2 digitals after decimal.
#D: Also matches negative numbers.
^\s*-?((\d{1,3}(\.(\d){3})*)|\d*)(,\d{1,2})?\s?(\u20AC)?\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=810
#A: Brandon Haase
#D: Written to test the .NET System.Environment.CommandLine string for the existance of arguments. If a match is found, the command arguments can be extracted by retrieving a MatchCollection and retriving the index "commandstring". Works with local and UNC filepaths.
"{0,2}(?:(?:\\\\(?:\w+)\\(?:\w+\$?)|(?:[A-Z]):)(?:\\(?:[^\\:*?"'<>|\r\n]+))+|(?:[^\\:*?"'<>|\r\n]+))\.exe"?\ (?<commandstring>(?:[^\r\n]*(?=")|[^\r\n]*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=811
#A: César Rivas
#D: Expresion para tipo Money ó Cantidad
^([1-9]{1}[\d]{0,2}(\,[\d]{3})*(\.[\d]{0,2})?|[1-9]{1}[\d]{0,}(\.[\d]{0,2})?|0(\.[\d]{0,2})?|(\.[\d]{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=814
#A: Mandeep Bhatia
#D: ASP.NET required field validator control.
<asp:requiredfieldvalidator(\s*\w+\s*=\s*\"?\s*\w+\s*\"?\s*)+\s*>\s*<\/asp:requiredfieldvalidator>

#U: http://regexlib.com/REDetails.aspx?regexp_id=815
#A: Jason N. Gaylord
#D: This matches the specific value for a unique identifier (GUID) from SQL server. Written by Jason N. Gaylord.
\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\}

#U: http://regexlib.com/REDetails.aspx?regexp_id=817
#A: Joe Johnston
#D: U.S. social security numbers (SSN), within the range of numbers that have been currently allocated. Matches the pattern AAA-GG-SSSS, AAA GG SSSS, AAA-GG SSSS, AAA GG-SSSS, AAAGGSSSS, AAA-GGSSSS, AAAGG-SSSS, AAAGG SSSS or AAA GGSSSS. All zero in any one field is not allowed.
#D: ** Additionally, spaces and/or dashes and/or nothing are allowed.  In Michael Ash's example 123-45 6789 and 123456789 would fail there was a '\3' after the second octet of numbers that seemed to confuse the regex. now any combination of spaces, dashes, or nothing will work between the SSN octets. BoxerX.com thanks Michael for the regex!
^(?!000)([0-6]\d{2}|7([0-6]\d|7[012])) ([ -])? (?!00)\d\d([ -|])? (?!0000)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=818
#A: Nandakishore Sharma
#D: Email Validator. Enmail address has to start with alphabets
^[a-zA-Z]+[a-zA-Z0-9_-]*@([a-zA-Z0-9]+){1}(\.[a-zA-Z0-9]+){1,2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=819
#A: Ryan Jones
#D: This expression matches valid image URLs. The main use for this would be in UBBC tags.
#D: Written by RyanJ and Jick for FWD (http://flexwebdev.thenamesdan.com/)
((ht|f)tp(s?))(:((\/\/)(?!\/)))(((w){3}\.)?)([a-zA-Z0-9\-_]+(\.(com|edu|gov|int|mil|net|org|biz|info|name|pro|museum|co\.uk)))(\/(?!\/))(([a-zA-Z0-9\-_\/]*)?)([a-zA-Z0-9])+\.((jpg|jpeg|gif|png)(?!(\w|\W)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=820
#A: Mandeep Bhatia
#D: This extracts all the properties from a C#.NET file.
^public\b\s+?\w+?\s+?(?<propertyname>\w+)[^{]+?{\N[\s\S]*?\Nget\s*?{[\s\S]*?}\N[\s\S]*?\N(?:set??[\s\S]*?{[\s\S]*?})?\N[\s\S]*?}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=821
#A: Geoff Williams
#D: This Regex matches valid SQL identifiers, including names for Stored Procedures and the like. Note that local variables/parameters (which begin with an "@") will not match this Regex, nor will temporary objects (beginning with a "#"), or global temporary objects (beginning with "##"). All other valid identifiers/variables/table names/stored procedure names/columns etc., will match. Please let me know if you find this useful or have any complaints - trash@primalblaze.com.
^[a-zA-Z_]{1}[a-zA-Z0-9_@$#]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=822
#A: Benjamin J. J. Voigt
#D: This RegExp matches a space (" ") character with lookahead condition if there is an ASCII text in front of it and it is followed by a single decimal number which in turn is followed by a dot or nothing. It's useful to seperate scientific notation numbers from a text, i.e. when classifying with the bow toolkit.
#D: [EDIT 18.09.2004] There was indeed an error in the second lookahead. Changed |\b to |\d\b
(?=([\W]*[\w][\W]*\b))\s(?=\d\.|\d\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=823
#A: Stas Orlovsky
#D: Simple checker for user's float types input.
^[\-]{0,1}[0-9]{1,}(([\.\,]{0,1}[0-9]{1,})|([0-9]{0,}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=824
#A: pat capozzi
#D: simply checks to see if the first charactor is a . (dot)
^\.{1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=825
#A: Troy Forster
#D: Matches comma separated names in a row based list of names.  Submatches retrieve name parts, e.g. first name, middle name, initial, surname.
([A-Za-z0-9.]+\s*)+,

#U: http://regexlib.com/REDetails.aspx?regexp_id=826
#A: Farida Khan
#D: This RE matches the height in feet and inches with decimals and without decimals in it
^\d?\d'(\d|1[01])?.?(\d|1[01])"$

#U: http://regexlib.com/REDetails.aspx?regexp_id=827
#A: Gerardo Lopez
#D: Regular expression that matches Mexican RFC's (Registro Federal de Contribuyentes).
^[A-Za-z]{4}[ |\-]{0,1}[0-9]{6}[ |\-]{0,1}[0-9A-Za-z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=829
#A: Mikko Puonti
#D: IPv6 text representation of addresses without compression from RFC 1884. This regular expression doesn't allow IPv6 compression ("::") or mixed IPv4 addresses.
^([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=830
#A: Ben Powell
#D: Simple check of valid UK VAT Registration numbers. The standard format for UK VAT number must be 9 characters long or 12 characters if a branch trader. The GB prefix has been included as optional, but technically you should include it. The UK VAT format also includes Government Departments and Health Authorities, but I have excluded them for the moment.
^([GB])*(([1-9]\d{8})|([1-9]\d{11}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=831
#A: Jeff Przylucki
#D: validates Percents, where Positive numbers are allowed over 100% (in this case up to 9999), but where Negative percents must not go to or below -100%
#D: This also allows for the "%" to be present or missing.
#D: This was used to validate sales Growth Percents (allows for large positive growth, but you could not go negative for more than 100%).
^(\d{0,4}(?:\.\d{0,2})?\N|\N[-]\d{0,2}(?:\.\d{0,2})?\N)[%]{0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=832
#A: Todd Moon
#D: Recently I've been forced to validate phone numbers in a variety of formats, with all sorts of whitespace, dashes, parenthesis, etc. I didn't want to hassel with matching all that junk, I just wanted the 10 numbers!
#D: So I wrote this expression which captures 10 digits in a string if there are exactly 10 digits. Anything else is allowed so long as there are 10 numbers.
#D: In .Net, You just loop through the Captures collection of Groups[1] of your Regex.Match object and concatenate the Capture.Value strings to get a simple, pure 10 digit phone number. ( myMatch.Groups[1].Captures )
^[^0-9]*(?:(\d)[^0-9]*){10}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=834
#A: John Sturgeon
#D: Matches only numbers, in any length. No characters or punctuation will be matched.
^[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=835
#A: Isha 
#D: Checks  0001-9999
#D: Along with leap years
#D: intermediate symbols can be / or . or -
#D: this can be modified easily 
^(((((0[1-9])|(1\d)|(2[0-8]))[/.-]((0[1-9])|(1[0-2])))|((31[/.-]((0[13578])|(1[02])))|((29|30)[/.-]((0[1,3-9])|(1[0-2])))))[/.-]((000[^0])&([0-9][0-9][0-9][0-9]))|(29[/.-]02[/.-](([0-9][0-9](([02468][48])|([2468][048])|([13579][26])))|((([02468][48])|([2468][048])|([13579][26]))00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=836
#A: Isha 
#D: Checks for years 0001-9999.
#D: Checks leap year corectly (0004,0400,0040)
#D: Can use  / as separators or can replace it.
#D: Easy to understand and can be modified easily for mm/dd/yyyy or yyyy/dd/mm or mm-dd-yy or to any date format.
^(((((0[1-9])|(1\d)|(2[0-8]))/((0[1-9])|(1[0-2])))|((31/((0\N[13578])|(1[02])))|((29|30)/((0[1,3-9])|(1[0-2])))))/((000\N[1-9])|(00[1-9][0-9])|(0[1-9][0-9][0-9])|([1-9][0-9][0-9]\N[0-9]))|(29/02/(([0-9][0-9](([02468][48])|([2468][048])|\N([13579][26])))|((([02468][48])|([2468][048])|([13579]\N[26]))00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=837
#A: Ryan Van Aken
#D: Zip+4 Zipcode RegEx. You may ommit the +4 digits but you must also then ommit the hyphen/dash as well. In 1983, the Postal Service™ began using an expanded ZIP Code™ number called called the "ZIP+4®" Code. The nine digits of a ZIP+4 code (e.g., 12345-6789) is broken down as follows: [123]Sectional Center or Large City. [45]Post Office™ facility or Delivery Area. [-]Required "dash" or "hyphen". [67]Sector or Several Blocks. [89]Segment or One Side of a Street. Also just FYI, ZIP codes in the northeast US frequently start with '0' or '00'. [00988-Carolina, PR] [03110-Bedford, NH].  Thanks, Ryan v-
^\d{5}(-\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=838
#A: Jeff T
#D: All positive non-zero integers between 1 and 999.  You can adjust the upper range of this expression by changing the second number (ie 2) in the {0,2} part of the expression.
^[1-9][0-9]{0,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=840
#A: g y
#D: This pattern is too sophisticated - it will do the followings: (but only if u don't copy the first line!)
#D: it will draw a window on your screen and then it will write the following text : "Error"
#D: afterwards it will allow you to click a button to close the window!
#D: :)
(^1$) #^%Ed'[]'3[ce]c<>R#]ce'xaaaac{}{}!@{!AFS}\N#f\\\\\\//4fx\{}{}#{}!!!$$$$$%(%#@T%$)()(){}{}{}!!!!!!$$$!#@!\#-**-*****a*sa*\N#!! Don't try to understand it!

#U: http://regexlib.com/REDetails.aspx?regexp_id=841
#A: g y
#D: will match as long as the only chars exist in the string : A-Z,a-z,0-9,'Space' chr(32),%&'+-@_.
#D: It's useful for check vs Account Names where you might want to forbid entering other chars then what is in the pattern. also will not allow repeated space in the string
^([A-Z]|[a-z]|[0-9])(([A-Z])*(([a-z])*([0-9])*(%)*(&)*(')*(\+)*(-)*(@)*(_)*(\.)*)|(\ )[^  ])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=842
#A: Pavel Rotar
#D: Usefull for SQL update and insert sentence..
(((0[1-9]|[12][0-9]|3[01])([.])(0[13578]|10|12)([.])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([.])(0[469]|11)([.])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([.])(02)([.])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\/)(02)([.])([02468][048]00))|((29)([.])(02)([.])([13579][26]00))|((29)([.])(02)([.])([0-9][0-9][0][48]))|((29)([.])(02)([.])([0-9][0-9][2468][048]))|((29)([.])(02)([.])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=843
#A: Gerardo Lopez
#D: This Regex matches Mexican RFC's (Registro Federal de Contribuyentes) with 3 or 4 letters in the first section. It accepts spaces and dashes between sections.
^[A-Za-z]{3,4}[ |\-]{0,1}[0-9]{6}[ |\-]{0,1}[0-9A-Za-z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=844
#A: Gil Y
#D: This works good for account names where u don't want your users to create ugly account names. 3 rules apllied in it:
#D: 1. an account name must start with Letter or Number
#D: 2. the only valid signs are : ^%&'+-@. and (space (chr32))
#D: 3. a sign can't be repeated by any sign execept space which can't be repeated as well.
^([A-Z]|[a-z]|[0-9])([A-Z]|[a-z]|[0-9]|([A-Z]|[a-z]|[0-9]|(%|&|'|\+|\-|@|_|\.|\ )[^%&'\+\-@_\.\ ]|\.$|([%&'\+\-@_\.]\ [^\ ]|\ [%&'\+\-@_\.][^%&'\+\-@_\.])))+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=845
#A: Svetlin Nakov
#D: Suitable for extraction of all hyperlinks in the format:
#D: <a ... href="..." ...> some text </a>
#D: from a text document. Separates in groups the components of the links (url and body).
<\s*a\s[^>]*\bhref\s*=\s*\N('(?<url>[^']*)'|""(?<url>[^""]*)""|(?<url>\S*))[^>]*>\N(?<body>(.|\s)*?)<\s*/a\s*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=846
#A: krest krest
#D: It is an expression to valide a french numéro de sécurité social (social security number translate is not sure) with or without the key.
^((\d(\x20)\d{2}(\x20)\d{2}(\x20)\d{2}(\x20)\d{3}(\x20)\d{3}((\x20)\d{2}|))|(\d\d{2}\d{2}\d{2}\d{3}\d{3}(\d{2}|)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=847
#A: Stewart Schatz
#D: I made this to validate offsets to GMT
^([-]?[0-9])$|^([-]?[1][0-2])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=848
#A: Stewart Schatz
#D: This was made for specifying GMT offsets with 2 decimal places.  It will validate any number from -12 to 13 with 2 decimal places.
^([-]?[0-9]?(\.[0-9]{0,2})?)$|^([-]?([1][0-1])(\.[0-9]{0,2})?)$|^([-]?([1][0-3](\.[0]{0,2})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=850
#A: David Vander Leest
#D: Regular expression that only allows expression in the format: MM/DD/YYYY
^([01][012]|0[1-9])/([0-2][0-9]|[3][0-1])/([0-9][0-9][0-9][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=851
#A: Val Polyakh
#D: Strip (X)HTML comments
<!--((?!-->).)*-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=852
#A: Val Polyakh
#D: Strip C style block comments
\/\*((?!\*\/).)*\*\/

#U: http://regexlib.com/REDetails.aspx?regexp_id=853
#A: Brian Gillham
#D: Matches all those Obfuscations which come in those pesky Emails. You will have to strip out all those HTML Remarks first in order to for this to work with the HTML Part of the Email
((v|[\\/])\W*[i1]\W*[a@]\W*g\W*r\W*[a@]|v\W*[i1]\W*[c]\W*[o0]\W*d\W*[i1]\W*n)

#U: http://regexlib.com/REDetails.aspx?regexp_id=854
#A: Rony Crijns
#D: Simple expression that accepts only values between 1 and 1.5
(^[1]$)|(^[1]+\d*\.+\d*[1-5]$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=855
#A: Fabian  Moritz
#D: I did not found a Regex for german date, so I created my own. This RE validate dates in the dd.MM.yyyy format with leap years 100% integrated valid years from 1600 to 9999. As usual, many tests have been made. I think this one should be fine.
^(((0?[1-9]|[12]\d|3[01])\.(0[13578]|[13578]|1[02])\.((1[6-9]|[2-9]\d)\d{2}))|((0?[1-9]|[12]\d|30)\.(0[13456789]|[13456789]|1[012])\.((1[6-9]|[2-9]\d)\d{2}))|((0?[1-9]|1\d|2[0-8])\.0?2\.((1[6-9]|[2-9]\d)\d{2}))|(29\.0?2\.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=856
#A: Jason Jenisch
#D: Deisgned to verify a MAC address with hex values seperated by a colon.
((\d|([a-f]|[A-F])){2}:){5}(\d|([a-f]|[A-F])){2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=857
#A: Michael Ash
#D: Matches standard scientific notation using E character
#D: Scientific notation involves writing a number as the product of two numbers. The first one, the digit value, is always more than one and less than 10. The other, the exponential term, is expressed as a power of 10.
\b-?[1-9](?:\.\d+)?[Ee][-+]?\d+\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=858
#A: Michael Lang
#D: Matches that an input string is a valid namespace definition.  It also captures each word / section in the namespace in case they are needed.
#D: The rules this was created by are: 1)A series of words separated by a periods 2)does not begin or end with a period, 3)contains only letters numbers and underscores, 4) none of the words begin with a number, and 5) contains no whitespace
^(?:(?:((?![0-9_])[a-zA-Z0-9_]+)\.?)+)(?<!\.)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=859
#A: Aleksandar Boros
#D: This expression will find sigle or multilined HTML comments.
<!--[\w\W]*?-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=860
#A: Nico Lubbers
#D: Matches dutch telephone numbers WITHOUT country code prefix
#D: Tests on mobile numbers, 3 digits prefix city-codes and 4 digit prefix city codes.
#D: * Disallows a 0 directly after a prefix
#D: * Allows space or a - between prefix and telephonenumber
#D: * Also allows space between telephone digits to compensate the nasty habit of making telphone numbers more readable
([0]{1}[6]{1}[-\s]*([1-9]{1}[\s]*){8})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\s]*([1-9]{1}[\s]*){6})|([0]{1}[1-9]{1}[0-9]{1}[-\s]*([1-9]{1}[\s]*){7})

#U: http://regexlib.com/REDetails.aspx?regexp_id=861
#A: Boydlee Pollentine
#D: Validates currency, must have two leading and two digits following a decimal point. Does not accept leading zero's.
^(?!0,?\d)([0-9]{2}[0-9]{0,}(\.[0-9]{2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=862
#T: First Name(s) OR Last Name(s)
#A: Timothy Dutton
#D: I wrote this regex to validate first names or last names separately.  Allows for 2 names separated by space or hyphen.  Will accept an abbreviated second name with period.  Has to start with a letter and end with a letter or capital letter with period.
#D: Updated 3/24/2005: Now, names like McDonald work.  Also, several convenient parts of the match are stored, for example: the Name MacDonald-O'Brian will yield the following: $1="MacDonald" $2="ac" $3="-" $4="O'Brian" $5="'"
^((?:[A-Z](?:('|(?:[a-z]{1,3}))[A-Z])?[a-z]+)|(?:[A-Z]\.))(?:([ -])((?:[A-Z](?:('|(?:[a-z]{1,3}))[A-Z])?[a-z]+)|(?:[A-Z]\.)))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=863
#A: endi b
#D: simply email regular expression
^\+?[a-z0-9](([-+.]|[_]+)?[a-z0-9]+)*@([a-z0-9]+(\.|\-))+[a-z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=82
#A: Adam Weber
#D: Based on a pattern I found on this site, this pattern verifies that a number is a multiple of 5. Basically checks the last number before the decimal point to see if it's a 5 or 0. Also works on non-decimal numbers.
#D: Thanks to Narsi V for the base pattern
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=82
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">15.00 <span class='separator'>|</span> 20 <span class='separator'>|</span> 200.00
^\d*\d?((5)|(0))\.?((0)|(00))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=865
#A: Knut Hamang
#D: Validates UNC Paths, with or without files. Does not validate on shares ($) or local files (c:\xxx).
#D: Thanks to Erlend Oftedal for helping me out with this one!
^\\(\\[\w-]+){1,}(\\[\w-()]+(\s[\w-()]+)*)+(\\(([\w-()]+(\s[\w-()]+)*)+\.[\w]+)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=866
#A: Ian Suttle
#D: This was written for quick entry on a timecard system.  It allows you to create a number with an option of 2 decimal places.  I have the digits left of the decimal unrestricted for this example, but in the real world of time keeping, you wouldn't surpass 3 digits on the left of the decimal.
^(\d+|(\d*\.{1}\d{1,2}){1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=867
#A: Barry Pranklin
#D: This is used to validate an Australian telephone number with no other characters than the () being used. Validates area code being between 01 - 09.
^\(0[1-9]{1}\)[0-9]{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=869
#A: Gustavo Guerra
#D: This pattern matches the windows console (cmd) prompt (also know as command prompt)
^[a-zA-Z]:(\\|(\\[^\\/\s:*"<>|]+)+)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=870
#A: Robby Lacy
#D: A simple match for BBCode type strings.  I had to code my own BBCode scheme for a project that I had taken up and really this is my first RegEx so I thought that I would share.  You could modify this to work with any BBCode type of string that has the [TAG=VALUE]Desc[/TAG] syntax.
[URL=[a-zA-Z0-9.:/_\-]+\][a-zA-Z0-9._/ ]+\[/URL\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=871
#A: Robby Lacy
#D: The second type of BBCode that I had to write.  This one is an example of Bolding what is between the blocks though it can easily modified to match other Tags such as Underline or li.  Really anything that would match the BBCode that does not need a value in the first tag (ie. [TAG]Desc[/TAG]).
[B\][a-zA-Z0-9._/ ]+\[/B\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=872
#A: Felipe Albacete
#D: Validação de CPF Brasileiro com ou sem os divisores.
(^(\d{3}.\d{3}.\d{3}-\d{2})|(\d{11})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=873
#A: Felipe Albacete
#D: Formato de Telefone Brasileiro, sem o DDD
(^\d{3,4}\-\d{4}$)|(^\d{7,8}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=875
#A: Hemant Sipahimalani
#D: For a maximum of 4 characters All values between 0.00 and 1.00. Allows Spaces / zeros prefixed / suffixed. Allows entering just the integer part or the decimal part as well.
#D: Allows 1.0, 1.00, 1, 1., .9, .90, 0.90.
^((\s|[0])\.(\d{0,2}\s{0,2}))?$|^(\.(\d\s){0,2})?$|^(\s{0,4}[1]{0,1}\.[0]{0,2}\s{0,4})?$|^(\s{0,4}[1]{0,1}\s{0,4})?$|^(\s{0,4}[0]{0,4}[1]{0,1}\s{0,4})?$|^([0]{0,4}\s{0,4})?$|^(\s{0,3}[0]{0,3}\.{1}\d{0,2}\s{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=877
#A: Francesco Smelzo
#D: This pattern match all attributes,with or without double quote.
#D: Don't match attributes with spaces and without double quote and without value
(?<attributeName>\w+?)=\N(\"+(?<attributeValue>[\w\.\s\:\;\/\\@\-\=\&\?]*)\"+|\N(?<attributeValue>[\w\.\:\;\/\\@\-\=\&\?]*)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=878
#A: Shane O'Grady
#D: This regular expression finds all opening tags that have the runat='server' attribute specified. It groups the type of the control (eg. asp:Label) in to a group named TYPE and the id of the control into a group named NAME.
#D: It is useful for finding all server tags or controls in an ASPX (ASP.NET) page.
<(?i)(?=.[^>]*runat=["]?server)(?<TYPE>\S[^>\s]+).[^>]*id=["]?(?<NAME>\w+).[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=879
#A: Alexandre Boudreault-Ferland
#D: Validate that the string contains only alphanumeric characters or an underscore. The first character cannot be anything else than alphabetic character.
#D: We use that to make sure the provided string can be a variable/entity name.
^[a-zA-Z][a-zA-Z0-9_]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=880
#A: Felipe Albacete
#D: Validação para letras maiusculas e minusculas sem acentos, incluinto os caracteres . - & e /
^\s*[a-zA-Z0-9&\-\./,\s]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=881
#A: Felipe Albacete
#D: Expressão para a Validação do CNPJ contendo ou não os caracteres de separação . e /.
(^(\d{2}.\d{3}.\d{3}/\d{4}-\d{2})|(\d{14})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=882
#A: Felipe Albacete
#D: Expressão para a Validação de Telefones Celulares sem o DDD valida celulares com inicio igual a 7,8 e 9.
((([7-9])(\d{3})([-])(\d{4}))|(([7-9])(\d{7})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=883
#A: Louis Ostendorf
#D: We have be receiving a lot of Spam with this Return-Path address. It uses diferent ref. numbers all the time So I created this pattern.
(antifraud\.ref\.num)[0-9]*(@citibank\.com)

#U: http://regexlib.com/REDetails.aspx?regexp_id=884
#A: saul11 
#D: A regex that filters the text property attributes or CSS in a span or font tag, i.e. only the color and font-size style properties and the color and size attributes.
#D: But there are two things I want to improve :
#D: - First I need the regex to match, even when only one of the two style sheet properties is available (only font-size or only color)
#D: - And second, it would be nice if a heading space is captured with the style sheets properties to. I have tried this already but didn't succed. with the tag attributes it does work.
# one tag name matcher and three times the style or attribute matcher with each 6 match possibilities (three times to reckon with the attributes placing)\N# capturing (only one) front space of each attribute\N# quotes aren't needed to match, but are captures when available\N<\N(span|font) # tagname\N.*?\N(?:\N(?:\N(\s?style="?).*? # style opener\N((?:\s?font-size:.+?\s*(?:;|,|(?="))+)|(?:\s?color:.+?\s*(?:;|,|(?="))+))[^"]* # font-size or color style property\N((?:\s?font-size:.+?\s*(?:;|,|(?="))+)|(?:\s?color:.+?\s*(?:;|,|(?="))+))[^"]* # font-size or color style property\N# (the line above should be made optional.)\N("?) # style end quote if available\N|\N(\s?size="?.*?(?:(?=\s)|"|(?=>))) # size attribute\N|\N(\s?color="?.*?(?:(?=\s)|"|(?=>))) # color attribute\N|\N(?=>)\N)\N.*?\N){3}\N>

#U: http://regexlib.com/REDetails.aspx?regexp_id=885
#A: Daniel Cazzulino
#D: Matches .NET assembly names, and captures named groups for easy parsing and constructing of an AssemblyName object.
#D: Captured groups are: assembly, version, culture and token.
^(?<assembly>[\w\.]+)(,\s?Version=(?<version>\d+\.\d+\.\d+\.\d+))?(,\s?Culture=(?<culture>\w+))?(,\s?PublicKeyToken=(?<token>\w+))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=886
#A: Cliff Wagner
#D: Expression validating a hex string of any length.
^([0-9a-fA-F])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=887
#A: Matthew Hazzard
#D: THE Complex Password Filter Matching 3 of 4 Character catagories:
#D: 1.) at least 1 upper case character
#D: 2.) at least 1 lower case character
#D: 3.) at least 1 numerical character
#D: 4.) at least 1 special character
#D: It also enforces a min and max length and works for .Net and script Regex implimentations. 
(?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=888
#A: himraj love
#D: It validates Indian Vehicle Registration Number
^([A-Z|a-z]{2}-\d{2}-[A-Z|a-z]{2}-\d{1,4})?([A-Z|a-z]{3}-\d{1,4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=889
#A: Gerald Davis
#D: This pattern highlights any characters in double or single quotes, single line only .For the reason that  refreshing the whole document every keystroke would send the application to a crawl. Only Dreamweaver achieve parsing the whole document fast enough. Other application can only achieve refreshing a line dynamically.
#D: note: open quotes are highlighted until the end, as they are with most syntax highlighting applications.
".*?"|".*$|'.*?'|'.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=890
#A: Binoj Antony
#D: This pattern will match all dates from the year 1900 to 2099, invalid dates like 0000-00-00 will not be accepted.
#D: Replacement string can be used as the Year Month  and day is named.
#D: The "-" character can be replaced with "/" character for the required format, and also the <Year>, <Month> and <Day> can also be interchanged according the local culture format (eg dd/mm/yy)
(?<Year>(19|20)[0-9][0-9])-(?<Month>0[1-9]|1[0-2])-(?<Day>0[1-9]|[12][0-9]|3[01])

#U: http://regexlib.com/REDetails.aspx?regexp_id=892
#A: Adrian P
#D: This will make sure that if your number starts w. a 99 it will have 10 more digits after it and if it starts w. a 5 it will also have 10 digits after that. So if you have a number starting with 99 it must be 12 digits long if it starts with a 5 it must be 11.
^[9]9\d{10}|^[5]\d{10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=894
#T: English Sentence Matching
#A: Scotty
#D: Focused on scraping English sentences from HTML/Java (without having to parse).
#D: Correctly matches the vast majority of English sentences. There are undoubtedly a number of cases which do not match, but I felt they were oblique enough to be omitted.
#D: (Surely, the fellow that commented on this script had some sentences not match, but the example he describes does correctly match, and I provide it as the fourth example.)
#D: Cheers
\b(((["'/,&%\:\(\)\$\+\-\*\w\000-\032])|(-*\d+\.\d+[%]*))+[\s]+)+\b[\w"',%\(\)]+[.!?](['"\s]|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=896
#A: Jordan Ilchev
#D: This RegExp is degigned to mach SQL OLEDB Connection String to the Named Groups Properties useful for .Net              MATCH EXAMPLE(the submition field is too short):Provider="SQLOLEDB.1";Data Source=(local);Initial Catalog=master;User ID=sa;Password="SA_PASS";Connection TimeOut=90
(?:Provider="??(?<Provider>[^;\n]+)"??[;\n"]??|Data\sSource=(?<DataSource>[^;\n]+)[;\n"]??|Initial\sCatalog=(?<InitialCatalog>[^;\n]+)[;\n"]??|User\sID=(?<UserID>[^;\n]+)[;\n"]??|Password="??(?<Password>[^;\n]+)"??[;\n"]??|Integrated\sSecurity=(?<IntegratedSecurity>[^;\n]+)[;\n]??|Connection\sTimeOut=(?<ConnectionTimeOut>[^;\n]+)[;\n"]??)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=897
#A: Aleksandar Boros
#D: The following pattern checks whether the input string is a valid email address in the form "name@domain.com". Actually, it does not have to be a ".com" address. Any combination of letters following the last period are fine. Also, the email name can have a dash or be separated by one or more periods. The Domain name can also have multiple words separated by periods. Thus, it will validate bob@hotmail.com and bill.michaels@us.office.gov.
^([\w-]+\.)*?[\w-]+@[\w-]+\.([\w-]+\.)*?[\w]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=898
#A: Marc Robitaille
#D: Regular expression for validating US and CANADA telephone numbers with OPTIONAL contry code, OPTIONAL area code, and OPTIONAL extension. Matches various permutations of formatting characters (parenthesis, space, dash). Parses the telephone number contry code, area code, prefix, suffix, and extension ...
^(?:(?<Contry>\d{1,1})(?<5>[- ]?)?)?(?:(?<1>[(])?(?<AreaCode>[2-9]\d{2})(?(1)[)])(?(1)(?<2>[ ])|(?:(?<3>[-])|(?<4>[ ])))?)?(?<Prefix>[1-9]\d{2})(?(AreaCode)(?:(?(1)(?(2)[- ]|[-]?))|(?(3)[-])|(?(4)[- ]))|[- ]?)(?<Suffix>\d{4})(?:[ ]?[#xXeE]?(?<Ext>\d{2,4}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=899
#A: Rodrigo Antonio
#D: This is to check release names...
#D: it only allowes alphanumeric and numeric chars , and also _ - and .
^[a-zA-Z0-9._-]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=900
#A: Chris Durkin
#D: Matches xml namespace (xmlns) attribtutes. Works with single and double quotes, could be extended to support unquoted attributes.
( xmlns:.*=[",'].*[",'])|( xmlns=[",'].*[",'])

#U: http://regexlib.com/REDetails.aspx?regexp_id=901
#A: Benny Tordrup
#D: This pattern matches danish zip codes with optional country identification
^(?<CountryPrefix>DK-)?(?<ZipCode>[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=902
#A: mel jacob
#D: natural numbers 1, 2, 3...
#D: (no zeros)
^[1-9]\d*\.?[0]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=903
#A: chris s
#D: Retrieves all anchor links in a html document, useful for spidering. You will need to do a replace of " and ' after the regular expression, as the expression gets all links. As far as I know there is no way, even with \1 groupings, of getting a condition on whether the link contains a ",' or nothing at all (" and ' is easy enough, but what happens if the link starts with ", and has a javascript function call with a string in it). If there is, it's probably quicker to do it like this and do a string replace anyway.
<a\s*href=(.*?)[\s|>]

#U: http://regexlib.com/REDetails.aspx?regexp_id=904
#A: Amit Gupta
#D: This is the simplest RegEx for validating someone's name. The name can contain only alphabets(in either case) & should be of minimum length 4 & maximum length 32. Only white spaces are allowed apart from alphabets.
^([a-zA-z\s]{4,32})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=905
#A: Rudá Almeida
#D: This RegEx will match boolean values, either numeric or literal. It will accept MS Access "-1" values for "true",
#D: and recognizes English and Brazilian Portuguese.
^([Vv]+(erdade(iro)?)?|[Ff]+(als[eo])?|[Tt]+(rue)?|0|[\+\-]?1)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=906
#A: Glynn Beeken
#D: Matches all IPv6 text representations as defined within RFC 2373. Fairly verbose
^(^(([0-9A-F]{1,4}(((:[0-9A-F]{1,4}){5}::[0-9A-F]{1,4})|((:[0-9A-F]{1,4}){4}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,1})|((:[0-9A-F]{1,4}){3}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,2})|((:[0-9A-F]{1,4}){2}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,3})|(:[0-9A-F]{1,4}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,4})|(::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,5})|(:[0-9A-F]{1,4}){7}))$|^(::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,6})$)|^::$)|^((([0-9A-F]{1,4}(((:[0-9A-F]{1,4}){3}::([0-9A-F]{1,4}){1})|((:[0-9A-F]{1,4}){2}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,1})|((:[0-9A-F]{1,4}){1}::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,2})|(::[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,3})|((:[0-9A-F]{1,4}){0,5})))|([:]{2}[0-9A-F]{1,4}(:[0-9A-F]{1,4}){0,4})):|::)((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{0,2})\.){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{0,2})$$

#U: http://regexlib.com/REDetails.aspx?regexp_id=907
#A: Mark Ayers
#D: Matches canonical Uniform Resource Names (URNs) as defined in RFC 2141.
urn:[a-z0-9]{1}[a-z0-9\-]{1,31}:[a-z0-9_,:=@;!'%/#\(\)\+\-\.\$\*\?]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=908
#A: Patrick Timmons
#D: Allows you to check the length of a number (in this case either 3 or 4 digits).
#D: I found it useful when validating Credit Card Identification Codes (CVV2/CVC2/CID) which are either 3 or 4 numerical digits.
^([0-9]{3,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=909
#A: GeoS GeoS
#D: I'am using it in PHP preg_match() to replace in string parts with non-entity ampersand. Made for my RSS.
&(?!([a-zA-Z0-9#]{1,6};))

#U: http://regexlib.com/REDetails.aspx?regexp_id=910
#A: Amit Gupta
#D: This pattern matches is for validating Names, Cities, States, Countries etc that require only alphabet inputs with white spaces. It requires atleast 2 characters & there's no limit on maximum number of characters.
^([a-zA-z\s]{2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=911
#A: Alex Hazanov
#D: Matches an israely phone number with country code. With or without the plus sign. Also allows two or one digit in city code. Checks for a valid city code (02,03,04,08,09)
^\+?972(\-)?0?[23489]{1}(\-)?[^0\D]{1}\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=912
#A: HaL Gottfried
#D: This is a simple expression used to match a normal 12 hour clock, requires AM/PM in any or mixed case and requires a space before the AM or PM and minutes are required.
^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ [AaPp][Mm]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=913
#A: Juan Morató
#D: LDAP path of Microsoft Active Directory entries (Organizational Units, Users, Computers and Groups). Requires LDAP protocol especification and allows a server name at the beginning.
^(LDAP://([\w]+/)?(CN=['\w\s\-\&]+,)*(OU=['\w\s\-\&]+,)*(DC=['\w\s\-\&]+[,]*)+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=916
#A: Nick Franceschina
#D: will break out a valid CSS stylesheet into it's components.  Groups on each style, all selectors, each selector within a comma delimited list of selectors, all properties, each property set, each property and each value.  In other words, it breaks it all down for you :)
#D: The only two problems I'm having with it:
#D: A) it is ignorant of comment blocks.  so if you have styles within a /*  */ block, it'll pick those up.
#D: B) the first style following a comment block is not parsed correctly (it incorrectly includes the comment as a selector
#D: best thing to do would be to use another regexp to remove all comments before processing with this one
((\s*([^,{]+)\s*,?\s*)*?){((\s*([^:]+)\s*:\s*([^;]+?)\s*;\s*)*?)}

#U: http://regexlib.com/REDetails.aspx?regexp_id=917
#A: Michael Ash
#D: Unicode Plane 0 character excluding standard ASCII 
(?![\uD800-\uDBFF])(?![\uDC00-\uDFFF])[\u0080-\uFFFF]

#U: http://regexlib.com/REDetails.aspx?regexp_id=918
#A: Michael Ash
#D: Non-Plane 0 Unicode character
[\uD800-\uDBFF][\uDC00-\uDFFF]

#U: http://regexlib.com/REDetails.aspx?regexp_id=919
#A: Andrew Stakhov
#D: A regex that will split a CSV file when used for MATCH function.
#D: All values must be in quotes, and seperated by commas.
#D: Ex. "test1","test2","test3"
#D: Quotes themselves are not captured
#D: Note: Only works in regex engines that support backreferences (Java, .NET, php, etc). JavaScript is not one of them.
(?<=(?:^|,)")(?:[^"]|"")+

#U: http://regexlib.com/REDetails.aspx?regexp_id=920
#A: Justin Elsberry
#D: Javascript matches US zipcodes not allowing all zeros in first 5 or +4
(^(?!0{5})(\d{5})(?!-?0{4})(-?\d{4})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=922
#A: Ariana Bauer
#D: This expression gets a server bound or serverless ldap path without "LDAP://" in front of it.
^(([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}/(DC=['\w\d\s\-\&]+[,]*){2,})|((\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])/(DC=['\w\d\s\-\&]+[,]*){2,})|((DC=['\w\d\s\-\&]+[,]*){2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=923
#A: MARK J KRISBURG
#D: Web form single field zip code validator.  Allows user to enter 5-digit or 5-digit plus 4 zip code, with hyphen or space or no-space between last 4 digits.
^\d{5}(\-\s)?(\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=924
#A: MARK J KRISBURG
#D: Single field zip code validator, useful for Web Forms.  Allows user to enter 5-digit or 5-digit plus 4 zip code, with hyphen or space or NO space between last 4 digits.
^\d{5}((-|\s)?\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=925
#A: MARK J KRISBURG
#D: Single field zip code validator useful for web forms, where user may enter 5 digit or 9 digit zip code, and may use hyphen, space, or no space between the first 5 digits and last 4 digits.
^\d{5}((\-|\s)?\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=926
#A: MARK J KRISBURG
#D: Telephone validator allowing user to enter 10 digit telephone number with segments of number separated by hyphens, periods or spaces.  Also braces allowed around area code.
^(\([2-9]|[2-9])(\d{2}|\d{2}\))(-|.|\s)?\d{3}(-|.|\s)?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=927
#A: Tomas Axelsson
#D: Swedish person number. Don't work on persons older then 100 years, but they are so few that it shouldn't be a problem. Easy to fix, but I choose not to accept oldies...
[1-2][0|9][0-9]{2}[0-1][0-9][0-3][0-9][-][0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=928
#A: Evgenios Skitsanos
#D: Very easy expression for using with arachnoWare XmlDbelt for obtaining information about data store connection string and XPath based query over the store.
'(?<document>.*)'\)(?<path>.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=929
#A: MARK J KRISBURG
#D: US telephone number with area code.  Validates and also captures AreaCode, Prefix and Suffix for reformatting.
^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=930
#T: Validate US Postal Code
#A: Jerry Schmersahl
#D: Validate US zip codes. Matches all zip codes of exactly 5 digits except 00000. Optionally, matches zip5+zip4 where zip5 is exactly 5 digits, zip4 is exactly 4 digits, and zip5 and zip4 are, optionally, separated by a single space or hyphen. Captures zip5 and zip4 to named groups to facilitate program manipulation.
^(?!00000)(?<zip>(?<zip5>\d{5})(?:[ -](?=\d))?(?<zip4>\d{4})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=931
#A: MARK J KRISBURG
#D: Zip Code (Zip or Zip-Plus4 format).  Accepts a hyphen, a space, or nothing between Zip and Plus4 segments.  Named segments <zip> and <plus4> may be used to reformat users input to desired format using Regex replace function (re.replace).
(?<zip5>^\d{5})([\- ]?(?<plus4>\d{4})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=250
#A: Diego dos Santos
#D: Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators: . - /
#D: Valid dates only! m (1-12)/ d (1-31)/ y (0..)
#D: (rizzipereira.com.br)
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=250
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">10.03.1979 <span class='separator'>|</span> 12/30/2004 <span class='separator'>|</span> 01/01/2004
^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=933
#A: Johan Södercrantz
#D: Matches the date format "YYYY-mm-dd" and also validates month and number of days in a month. All leap year dates "YYYY-02-29" passes trough. Could easily be changed to another format.
^[0-9]{4}-(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|(02-(0[1-9]|[1-2][0-9]))|((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=371
#A: Christopher Strolia-Davis
#D: looks for line concantenation character "_" in vb/vb.net source files.
#D: 1) It must be preceded by at least one space or tab.
#D: 2) It must be at the end of the line (okay if followed by whitespace)
#D: 3) And it must not be in commented code
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=371
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel"><XmlAttribute("xml-att")> _ <span class='separator'>|</span> Sub WillGetThis() _ <span class='separator'>|</span> "will ' get this" _
(?mi:(?<=^(([^'"\n])|("[^"]*"))*[\t ])_(?=\s*$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=935
#A: Dennis de Jong
#D: Meets dutch phone number requirements.. One posted here before didn't allow the 0 after the first digit of the call ID (so the second number or later after the prefix), which should be allowed. I modified that one to meet full requirements now..
#D: Enjoy!!
([0]{1}[6]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){7})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){5})|([0]{1}[1-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){6})

#U: http://regexlib.com/REDetails.aspx?regexp_id=936
#T: AMD Athlon/Duron Codes (not Athlon 64)
#A: Amos Hurd
#D: Matches valid reference codes for AMD Athlon and Duron processors (not Athlon 64).
^((A(((H[MX])|(M(P|SN))|(X((D[ACH])|(M[DS]))?)))?)|(K7(A)?)|(D(H[DLM])?))(\d{3,4})[ABD-G][CHJK-NPQT-Y][Q-TV][1-4][B-E]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=937
#A: Brano Gerzo
#D: IPv4 ip:port checker, I hope it will help you. $1 - IP, $2 - port. More to come, maybe :)
^((?:2[0-5]{2}|1\d{2}|[1-9]\d|[1-9])\.(?:(?:2[0-5]{2}|1\d{2}|[1-9]\d|\d)\.){2}(?:2[0-5]{2}|1\d{2}|[1-9]\d|\d)):(\d|[1-9]\d|[1-9]\d{2,3}|[1-5]\d{4}|6[0-4]\d{3}|654\d{2}|655[0-2]\d|6553[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=938
#A: Scott Richardson
#D: This exp will parse out space delimited strings with consideration to single quotes.  I use it with SQL statements.
(?=(?:[^\']*\'[^\']*\')*(?![^\']*\'))

#U: http://regexlib.com/REDetails.aspx?regexp_id=939
#A: Joe Pontani
#D: I wrote this after I couldn't find an expression that would search for valid URLs, whether they had HTTP in front or not.  This will find those that don't have hyphens anywhere in them (except for after the domain).
^(?<link>((?<prot>http:\/\/)*(?<subdomain>(www|[^\-\n]*)*)(\.)*(?<domain>[^\-\n]+)\.(?<after>[a-zA-Z]{2,3}[^>\n]*)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=940
#A: mahesh mandhare
#D: 
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=941
#A: Max Cacchiotti
#D: Validates US or Canadian phone numbers with the use of "-" or numbers stuck together. No parantheses allowed as well as spaces. Area code is optional. The "9," is optional as well, which on some phone systems is needed to dial out.
^(9,)*([1-9]\d{2}-?)*[1-9]\d{2}-?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=942
#A: Richard Johnn
#D: Useful for grabbing pipe delimited text from a string.
(\S*)+(\u007C)+(\S*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=943
#A: Rich Franzmeier
#D: Match a positive or negative decimal value with any precision and scale.  Allows for left-padded zeroes, commas as group separator, negative sign (-) or parenthesis to indicate negative number.
^\-?\(?([0-9]{0,3}(\,?[0-9]{3})*(\.?[0-9]*))\)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=944
#A: Error Reporter
#D: Required and regular expression validator. For supporting
#D: -999.99 to +999.99 . Positive and Negative integer/ decimal validations. Percentage sign is also supported. Will not allow empty strings. Can increase/decrease the range as you need.
^[-+]?[0-9]\d{0,2}(\.\d{1,2})?%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=945
#A: Gabriel Fróes
#D: This RE match the SQL Basics Queries (SELECT, UPDATE, INSERT and DELETE).
(SELECT\s[\w\*\)\(\,\s]+\sFROM\s[\w]+)|\N(UPDATE\s[\w]+\sSET\s[\w\,\'\=]+)|\N(INSERT\sINTO\s[\d\w]+[\s\w\d\)\(\,]*\sVALUES\s\([\d\w\'\,\)]+)|\N(DELETE\sFROM\s[\d\w\'\=]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=946
#A: Jeff Johns
#D: Validates against a U.S. postal code in either a 5 digit format or a 5 dash 4 format.
^([0-9]{5})([\-]{1}[0-9]{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=947
#A: Jeff Johns
#D: Validate against a visa card number. All visa cards start with a 4 and are followed by 12 to 15 more numbers.
^([4]{1})([0-9]{12,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=948
#A: Jeff Johns
#D: Validate against any mastercard number. All MC's start with a number between 51 and 55 and are followed by 14 other numbers.
^([51|52|53|54|55]{2})([0-9]{14})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=949
#A: Jeff Johns
#D: Validate against any american express number. All american express numbers start with either a 34 or 37, followed by 13 other numbers.
^([34|37]{2})([0-9]{13})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=950
#A: Jeff Johns
#D: Validate against any discover card number. All DC's start with 6011 and are followed by 12 other numbers.
^([6011]{4})([0-9]{12})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=951
#A: Jeff Johns
#D: Validate against any diner's club card. All diner club cards start with 30,36, or 38, followed by 12 other numbers.
^([30|36|38]{2})([0-9]{12})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=952
#A: Mike Reeves-McMillan
#D: Finds sentences (assuming they end with a full stop, question mark or exclamation mark).
([^\.\?\!]*)[\.\?\!]

#U: http://regexlib.com/REDetails.aspx?regexp_id=953
#A: Mpho Molahloe
#D: Verifies South African mobile numbers with or without the country code.
^((?:\+27|27)|0)(=72|82|73|83|74|84)(\d{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=954
#A: Phil A
#D: Matches UK postcodes of the below formats. The space is optional.
#D: AN NAA
#D: AAN NAA
#D: ANN NAA
#D: ANA NAA
#D: AANA NAA
#D: AANN NAA
^(([A-Z]{1,2}[0-9]{1,2})|([A-Z]{1,2}[0-9][A-Z]))\s?([0-9][A-Z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=955
#A: Project Tive
#D: 
(\d{6}[-\s]?\d{12})|(\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=956
#A: Jorrit Janszen
#D: I use this expression to read bounced email addresses returned by the system administrator. The body of the subject should contain the email address somewhere but the location varies.
#D: Examples:
#D: To:      blah.v.blah@blah-blah.net ||
#D: blah-blah.blah@blah.com ||
#D: <blah@blah.org>... Deferred: Connection timed out with mail.blah.org. ||
#D: blah@blah.net 0n 25-12-2004 21:09
^[\n <"']*([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=957
#A: Bernat Sales
#D: It recognizes date and time expressed as 'dd/mm/yyyy hh:MM:ss' (year>2000)
^(([0-2]?\d\/((0?\d)|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/[2-9]\d{3}\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=958
#A: Bernat Sales
#D: dd/mm/yyyy hh:mm:ss ( 1000<yyyy<9999)
^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/[1-9]\d{3})|(29\/0?2\/(((([2468][048])|([13579][26]))00)|([1-9]\d(([02468][48])|([13579][26])))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=959
#A: Bernat Sales
#D: My definitive Date and Time pattern (dd/mm/yyyy hh:mm:ss). It recognizes all correct dates (>1900) and time (even february). What can I say, I'm proud of it
^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/((19\d{2})|([2-9]\d{3}))|(29\/0?2\/(((([2468][048])|([3579][26]))00)|(((19)|([2-9]\d))(([2468]0)|([02468][48])|([13579][26]))))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=960
#A: Michael Ash
#D: Trim Inside.  This pattern can be used with a replace value of "$1 " to remove multiple consecutive spaces between characters and replace with a single space. Trailing and leading spaces are NOT altered.
(\S+)\x20{2,}(?=\S+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=961
#T: Word Break
#A: Michael Ash
#D: Word Break.  This regex can be used to break a long line of text on a full word. The qualifiers specify the minimum and maximum number of character allow before the break and can be changed according to your need. Blogge about this here http://regexadvice.com/blogs/mash/archive/2005/02/09/324.aspx
^(?:[ -~]{10,25}(?:$|(?:[\w!?.])\s))

#U: http://regexlib.com/REDetails.aspx?regexp_id=962
#A: Evan Tao
#D: Just test in C#.
#D: Validates a China Unicom mobile phone number with (or without) the International code.
^(?<national>\+?(?:86)?)(?<separator>\s?-?)(?<phone>(?<vender>13[0-4])(?<area>\d{4})(?<id>\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=963
#A: Joao Maia
#D: Match a string in CCYYMM/YYYYMM format.
^[0-9]{4}((0[1-9])|(1[0-2]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=964
#A: Howard Richards
#D: This pattern can be used for validating a string as a valid element name (e.g. variable or class name) in Microsoft .NET. See also http://msdn.microsoft.com/library/default.asp?url=/library/en-us/vbcn7/html/vbconelementnames.asp
(^[a-zA-Z][a-zA-Z0-9_]*)|(^[_][a-zA-Z0-9_]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=965
#A: Dale Preston
#D: Validates a long filename using Windows' rules.  Requires one valid filename character other than "." for the first character and then any number of valid filename characters up to a total length of 255 characters.  Unresolved is how to prevent the last character from being a "." while still meeting all the features that this regex does now.
^[^\\\./:\*\?\"<>\|]{1}[^\\/:\*\?\"<>\|]{0,254}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=966
#A: qi gao
#D: forbidden tele numbers when it starts with 0,
#D: 860+,8613,character or has any SBC case.
#D: you can also use it to any international phone dialed by E1 ,etc . this regex has been tested by java, perl,.net
#D: PS: the last regex [0-9]is in SBC case
(^0.*[1-9]*)|(^860+)|(^8613)|(\D)|([0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=967
#A: Abhinav Gupta
#D: 
(?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0\N?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][\N26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./\N])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d\N)\d{2})(?(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\N\d){0,2}(?i:\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=968
#A: Jacek Sompel
#D: This regex will extract the link and the link title for every a href in HTML source. Useful for crawling sites.
#D: Note that this pattern will also allow for links that are spread over multiple lines.
<a[\s]+[^>]*?href[\s]?=[\s\"\']+(.*?)[\"\']+.*?>([^<]+|.*?)?<\/a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=969
#T: RFC 2822 Date Regex
#A: Ivik Injerd
#D: This is the best RFC 2822 ( http://www.faqs.org/rfcs/rfc2822 ) date format regular expression I could come up with. I've tested it, not very extensively though. This regex also validates obsolete standard, excluding comments anywhere.
^(?:\s*(Sun|Mon|Tue|Wed|Thu|Fri|Sat),\s*)?(0?[1-9]|[1-2][0-9]|3[01])\s+(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+(19[0-9]{2}|[2-9][0-9]{3}|[0-9]{2})\s+(2[0-3]|[0-1][0-9]):([0-5][0-9])(?::(60|[0-5][0-9]))?\s+([-\+][0-9]{2}[0-5][0-9]|(?:UT|GMT|(?:E|C|M|P)(?:ST|DT)|[A-IK-Z]))(\s*\((\\\(|\\\)|(?<=[^\\])\((?<C>)|(?<=[^\\])\)(?<-C>)|[^\(\)]*)*(?(C)(?!))\))*\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=970
#A: Rod DeValcourt
#D: Orginally on this site search for Path, go to next page
#D: you see a reg expression for ^([a-zA-Z]\:|\\)\\([^\\]+\\)*[^\/:*?"<>|]+\.htm(l)?$
#D: which I modified with this one to disallow drive specification.
^\\([^\\]+\\)*[^\/:*?"<>|]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=971
#A: Andrei Bozantan
#D: Matches a negative or positive percentage between 0 and 100 (inclusive). Accepts up to 2 decimal places.
^-?[0-9]{0,2}(\.[0-9]{1,2})?$|^-?(100)(\.[0]{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=972
#A: Chris Richards
#D: This will match just about everything after href=
#D: Its good if you just need a list of all the href= values
href=[\"\']?((?:[^>]|[^\s]|[^"]|[^'])+)[\"\']?

#U: http://regexlib.com/REDetails.aspx?regexp_id=974
#A: Willie Tilton
#D: Removes "stop" or "delete" words that google removes from search strings.  Ordinarily have no search significance. I used this to remove the words in my own web search application.  Take out the ?: for grouping.
#D: I've tested this a bit, yet this is my 1st regex that I've ever written.  It's working fine for me.
\b(?:a(?:[nst]|re|nd)?|b[ey]|f(?:or|rom)|i[nst]?|o[fnr]|t(?:o|hat|he|his)|w(?:as|h(?:at|en|ere|ich|o)|i(?:th|ll)))\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=975
#A: Cliff Wagner
#D: Expression validating a Binary string of any length
^([0-1])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=976
#A: Cliff Wagner
#D: Expression validating a octal string of any length.
^([0-7])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=977
#A: Shahar Bracha
#D: This Blacklist RegEx is designed to search a user input for any malicious code or SQL injection attempts.
(script)|(<)|(>)|(%3c)|(%3e)|(SELECT) |(UPDATE) |(INSERT) |(DELETE)|(GRANT) |(REVOKE)|(UNION)|(<)|(>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=978
#A: Cliff Wagner
#D: Hex number/string validation method for the Electronic Serial Number(ESN) used in Cellular Phone products.
^([0-9a-fA-F]){8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=979
#A: Alex Cons
#D: Expresion Regular para Teléfonos con clave lada en México
#D: separada o no con guiones o espacios. Sirve para teléfonos estacionarios y/o celulares, con o sin paréntesis, 10 números a fuerzas, funciona en .net
^\(\d{3}\) ?\d{3}( |-)?\d{4}|^\d{3}( |-)?\d{3}( |-)?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=980
#A: Micah Duke
#D: this will validate most legal email addresses, even allows for some discouraged but perfectly legal characters in local part; allows IP domains with optional []; keeps final tld at a minmum of 2 chars; non capturing groups for efficiency
^(?:[a-zA-Z0-9_'^&/+-])+(?:\.(?:[a-zA-Z0-9_'^&/+-])+)*@(?:(?:\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\]?)|(?:[a-zA-Z0-9-]+\.)+(?:[a-zA-Z]){2,}\.?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=981
#A: Carlos R. L. Rodrigues
#D: Time in 24 hours format with optional seconds
^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=982
#T: UK Landline including VOIP
#A: Matthew Harris
#D: Based on the source listed below. I have added in the 05 prefix for allowing UK voip landlines. I dont know if the spacings are all ofcom approved like the original regex but the patterns it supports are:
#D: 029 99999999 or 029 9999 9999; 0199 9999999 or 0199 999 9999; 01999 99999; 01999 999999; 019999 9999; 019999 99999; 0599 9999999 or 0599 999 9999; 05999 99999; 05999 999999; 059999 9999; 059999 99999;
^(02\d\s?\d{4}\s?\d{4})|((01|05)\d{2}\s?\d{3}\s?\d{4})|((01|05)\d{3}\s?\d{5,6})|((01|05)\d{4}\s?\d{4,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=983
#A: John Chivers
#D: Validates UK mobile phone numbers. Valid formats are `077', `078' or `079' followed by another 8 digits, with an optional space after the dialling code and/or between the 4th and 5th characters of the remainder of the number. These formats are taken from the official guidelines from Ofcom, the organisation responsible for UK telecoms issues. Brackets are not valid and STD code must be entered.
(077|078|079)\s?\d{2}\s?\d{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=984
#A: Aivar Holyfield
#D: Powerful href extractor for HTML Element A.
#D: Groups extracted result separately that you can easily use HTML Element, URI or its title.
#D: These may be useful to:
#D: (?<HTML><area[^>]*href\s*=\s*[\"\']?(?<HRef>[^"'>\s]*)[\"\']?[^>]*>)
#D: (?<HTML><form[^>]*action\s*=\s*[\"\']?(?<HRef>[^"'>\s]*)[\"\']?[^>]*>)
#D: (?<HTML><frame[^>]*scr\s*=\s*[\"\']?(?<HRef>[^"'>\s]*)[\"\']?[^>]*>)
#D: (?<HTML><iframe[^>]*scr\s*=\s*[\"\']?(?<HRef>[^"'>\s]*)[\"\']?[^>]*>)
#D: (?<HTML><link[^>]*href\s*=\s*[\"\']?(?<HRef>[^"'>\s]*)[\"\']?[^>]*>)
(?<HTML><a[^>]*href\s*=\s*[\"\']?(?<HRef>[^"'>\s]*)[\"\']?[^>]*>(?<Title>[^<]+|.*?)?</a\s*>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=985
#A: Robert van der Boon
#D: This matches timezone offsets. Also matches non-hour offsets like India (+05:30) and Nepal (+5:45}. See for more timezone information: http://en.wikipedia.org/wiki/Time_zone
[-+]((0[0-9]|1[0-3]):([03]0|45)|14:00)

#U: http://regexlib.com/REDetails.aspx?regexp_id=986
#A: Ross Hammer
#D: Based on a regular expression from Michael Ash, this captures US street addresses and mailing addresses, single or multi-line (multi-line is more reliable), and breaks them into discrete parts for address line 1 and 2, city, state, and postal code.  This expression is not perfect - with the interpreter I am using, some addresses refuse to match correctly.  It should however work for most addresses, particularly when lines are delimited with carriage returns, tabs, or some other whitespace line delimiter that is not a space (\x20).  Note: For improved compatibility, this expression does not use named groups.
#D: **Output**
#D: \1 = Address 1,
#D: \2 = Address 2,
#D: \3 = City,
#D: \4 = State,
#D: \5 = Postal Code
^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])\s+(\d+(?:-\d+)?)\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=988
#A: Gideon Engelberth
#D: This is a simple expression to check a US street address entered on either one or two lines.  Being short it does not check that the road qualifer is "valid" (eg. drive, avenue, etc), but it does allow for the extended zip code.  A word of warning, the multiline mode can be picky about ending the first line with extra space.
^[ \w]{3,}([A-Za-z]\.)?([ \w]*\#\d+)?(\r\n| )[ \w]{3,},\x20[A-Za-z]{2}\x20\d{5}(-\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=989
#A: Andreas Næsager
#D: Well it pretty much accepts all kinds of users, about the domain i didn't write it special for any TLD so there's no length defined, ohh and it accepts some IDN stuff
^[\.\wæøå-]+@([a-zæøå0-9]+([\.-]{0,1}[a-zæøå0-9]+|[a-zæøå0-9]?))+\.[a-z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=991
#A: Tim Macrina
#D: Matches month, requires that months 1-9 have a leading 0
^((0[1-9])|(1[0-2]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=992
#A: Philipp Schumann
#D: This should be the pattern described in the documentation for the .NET TimeSpan.Parse method - generally parses time spans.
#D: From the .NET docs:
#D: public static TimeSpan Parse(string s);
#D: The s parameter contains a specification of the form:
#D: [ws][-][d.]hh:mm:ss[.ff][ws]
#D: Items in square brackets ([ and ]) are optional, colons and periods (: and .) are literal characters, and other items are as follows.
#D: Item Description
#D: ws optional white space
#D: "-" optional minus sign indicating a negative time
#D: "d" optional days
#D: "hh" hours, ranging from 0 to 23
#D: "mm" minutes, ranging from 0 to 59
#D: "ss" seconds, ranging from 0 to 59
#D: "ff" optional fractional seconds, from 1 to 7 decimal digits
^\s*-?(\d*\.)?([0-2])?[0-9]:([0-5])?[0-9]:([0-5])?[0-9](\.[0-9]{1,7})?\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=993
#A: Ronnel Santiago
#D: This pattern matches a Valid Civil ID Number in Kuwait.
^(1|2|3)((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)(\d{5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=994
#A: Tim Macrina
#D: Matches numbers 0 through 99.9
#D: Allows only one preceding zero and does not require the decimal point
^([1-9]{0,1})([0-9]{1})(\.[0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=995
#A: Joey Brunner
#D: regex to validate unix device names (linux). useful for scripts using ifconfig or stuff
^(eth[0-9]$)|(^eth[0-9]:[1-9]$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=996
#A: Jack Yang
#D: RAR file extensions.
#D: Works also with '*.part01.rar' given '.rar' to be the file extension.
#D: Does not support volumes exceed 101 for s## (r99, s00, s01, ...) serie.
^\.([rR]([aA][rR]|\d{2})|(\d{3})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=997
#A: Greg Robbins
#D: Matches Spanish CIF, NIF and NIE formats. Recognises separation of letters with the hyphen or period.
#D: Format CIF: [1 letter][7 numbers][1 number or letter]
#D: Format NIF: [8 numbers][1 letter]
#D: Format NIE: X[possible 0][7 numbers][1 letter]
#D: Note that this expression does not check for the validity of the NIF/CIF/NIE... there are some control characters in there and I don't know how they work.
#D: Generally I always strip out any non-alphanumeric characters (hyphens, periods, etc.) and convert to upper case before checking validity and before saving to data storage.
#D: Please post improvements or errors if you find them!
^(X(-|\.)?0?\d{7}(-|\.)?[A-Z]|[A-Z](-|\.)?\d{7}(-|\.)?[0-9A-Z]|\d{8}(-|\.)?[A-Z])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=998
#A: himraj love
#D: It validates Indian Vehicle Registration Number
^([A-Z|a-z]{2}\s{1}\d{2}\s{1}[A-Z|a-z]{1,2}\s{1}\d{1,4})?([A-Z|a-z]{3}\s{1}\d{1,4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=999
#A: Paul DeMarco
#D: This is just a very simple matcher for real numbers.
([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)|([0-9]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1000
#A: Jeff Johnston
#D: Matches full and compressed IPv6 addresses as defined in RFC 2373 (http://www.faqs.org/rfcs/rfc2373.html). No useful captures.
#D: Various implementations require different terminators. (i.e. ^-$ or \b-\b)
^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1001
#A: Felipe Albacete
#D: DDD Brasileiro no Formato de 2 digitos não é aceito zero na primeira casa
[1-9][0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1002
#A: Jay Wasser Jr
#D: GPA (Grade Point Average) expression.  Validates the standars 0.0 thru 4.0 and also accepts 5.5 -- which I use as unknown.
(^([1-3]{1}[0-9]{0,}(\.[0-9]{1})?|0(\.[0-9]{1})?|[4]{1}[0-9]{0,}(\.[0]{1})?|5(\.[5]{1}))$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1003
#A: Joe Lynwood
#D: By combining the contributions from Bri Gipson and Michael Ash in this site.  I have come up with this RE to exclude the zero dollar amounts such as $0.00, 0.00, 0, etc.
^(\$|)([1-9]+\d{0,2}(\,\d{3})*|([1-9]+\d*))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1004
#A: James Tikitiki
#D: v2
#D: A general purpose expresion to find url's (improved).
#D: Add heads to first part, example:
#D: ((imap:|(ht|f)tp(s?):\/\/)|(www\.
#D: to find url's like imap://www.com/, so ip's. No ipv6 (yet)
(((ht|f)tp(s?):\/\/)|(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;"'<>\n\r\t]+)([^\. \[\]\(\),;"'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1005
#A: Joe Lynwood
#D: Combine Michael Ash's US Dollar amount and Bri Gipson's eliminating zero input to create this RE to accept Optional leading dollar sign, optional well-formed comma separator dollar amount with no zero amount allowed.
#D: *** Correction: Remove the "+" otherwise it will incorrectly matches 4 leading digits like 1234,345,678.00 03-03-2005
^(\$|)([1-9]\d{0,2}(\,\d{3})*|([1-9]\d*))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1006
#A: Randal L. Schwartz
#D: Match the full names of the four main characters of The Flintstones.
^((Fred|Wilma)\s+Flintstone|(Barney|Betty)\s+Rubble)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1007
#A: narendiran dorairaj
#D: this will accept multiple email ids separated only by semi-colons (anyway u can change it).
^(([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+([;.](([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1008
#A: Dan Hall
#D: This script attempts to return phrases from a string (Example above looks for {3} word phrases)  Combine this with some .Net code, you can display most popular X word phrases in a string.
#D: -If anyone can help me count "Phrase and Phrase as 2 instances of Phrase please contact me
(\b)(\w+(\b|\n|\s)){3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1009
#A: Graeme Allwood
#D: Validator for New Zealand Mobile phone numbers. Will look for the first number being a 0 and must be a number or either 6 or 7 digits long after to initial (021) suffix
(^\([0]\d{2}\))(\d{6,7}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1010
#A: Roberto Hernández
#D: Very simple expression to validate time on a 12 hour clock, this expression is valid for client-side script validations (RegularExpressionValidator - ASP.NET).
^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][aApP][mM]){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1012
#A: Luke Arms
#D: A short and sweet email address validator. Checks that the username starts and ends with an alphanumeric character, allows a few non-repeating 'special characters' (namely -, ., _, +, &) and checks for a sensible domain name (2-6 character TLD required). Some unconventional, yet technically valid, addresses will not be matched, but this is only a simple expression ;-)
^([0-9a-zA-Z]+[-._+&])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1013
#A: himraj love
#D: it will check for the +ve decimal numbers
^[0-9]*(\.)?[0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1014
#A: himraj love
#D: it will check for alphanumeric (Alpha Numeric) values.
^[a-zA-Z0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1015
#A: Juan T. Llibre
#D: Match numbers
[1-9]+\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1016
#A: James Johnston
#D: This will find URLs in plain text.  With or without protocol. It matches against all toplevel domains to find the URL in the text.
([\d\w-.]+?\.(a[cdefgilmnoqrstuwz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmnoz]|e[ceghrst]|f[ijkmnor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortuvyz]|t[cdfghjkmnoprtvwz]|u[augkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]|aero|arpa|biz|com|coop|edu|info|int|gov|mil|museum|name|net|org|pro)(\b|\W(?<!&|=)(?!\.\s|\.{3}).*?))(\s|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1018
#A: János Cservenák
#D: Litle regexp for my portal engie. Only cut the {CHBLOCK:'modulename'} item
\{CHBLOCK\:(.*?\})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1020
#A: Louis Ostendorf
#D: AntiSpam: matches variations on the word "pharmacy"
(?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1021
#A: Tinus Norstved
#D: A simple regex which should validate a domain name according to RFC 1035
#D: updated to match domain names with hyphens
^[a-z]+([a-z0-9-]*[a-z0-9]+)?(\.([a-z]+([a-z0-9-]*[a-z0-9]+)?)+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1023
#A: Chandan Agarwal
#D: This is User Name & Password validation expression. It does not allow blank spaces as well as special characters like $#%@&*(){}+
\w{5,255}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1024
#A: james mountain
#D: Finds all local links, but doesnt match on external links.
#D: Use replace with $1 to leave the link text but remove the link.
<a\s*.*?href\s*=\s*['"](?!http:\/\/).*?>(.*?)<\/a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1025
#A: Daniel Vandersluis
#D: Verifies all valid Gregorian dates of the form DD MONTH YY, taking days/month and leap years into account.
(0[1-9]|[12][0-9]|3[01])\s(J(anuary|uly)|Ma(rch|y)|August|(Octo|Decem)ber)\s[1-9][0-9]{3}|\N(0[1-9]|[12][0-9]|30)\s(April|June|(Sept|Nov)ember)\s[1-9][0-9]{3}|\N(0[1-9]|1[0-9]|2[0-8])\sFebruary\s[1-9][0-9]{3}|\N29\sFebruary\s((0[48]|[2468][048]|[13579][26])00|[0-9]{2}(0[48]|[2468][048]|[13579][26]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1026
#A: Markus Matern
#D: This is my attempt to find out valid german postal codes (PLZ or Postleitzahlen).
#D: After the German Unification the numbers were changed to a five digit system. The postal codes starts with the two digit "Leitzahl". This is a number between 00 and 99 excluding the  not yet used numbers: 00, 05, 43 and 62! After that follows directly a three digit number, 000-999.
#D: Comments welcome. This works for me, however I think it could be written more compact, but could not figure out how ;-)
#D: For more information on german postal codes see:
#D: http://de.wikipedia.org/wiki/Liste_der_Postleitbereiche_Deutschland
#D: http://de.wikipedia.org/wiki/Postleitzahl_%28Deutschland%29
#D: http://en.wikipedia.org/wiki/List_of_postal_codes_in_Germany
\b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1027
#A: Alessandro Pellegrini
#D: This regular expression allows you to match all image tags
<(\/{0,1})img(.*?)(\/{0,1})\>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1028
#A: Miguel Gutierrez
#D: Accepts only positive decimal values. Zero and negative numbers are non-matching.Allows zeros after last non-zero numeric value after decimal place for significant digits
(^[+]?\d*\.?\d*[1-9]+\d*$)|(^[+]?[1-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1029
#A: Rosco Pikotrain
#D: Used to match windows filenames.  Fails if there is leading or trailing spaces. Fails if the input contains /\:*?"<>| . Fails if the input begins or ends with '.'
\A([A-Za-z0-9'~`!@#$%&^_+=\(\){},\-\[\]\;])+?([ A-Za-z0-9'~`\N!@#$%&^_+=\(\){},\-\[\];]|([.]))*?(?(3)(([ A-Za-z0-9'~`!@#$\N%&^_+=\(\){},\-\[\]\;]*?)([A-Za-z0-9'~`!@#$%&^_+=\(\){},\-\[\N\];])+\z)|(\z))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1030
#A: Neil Walls
#D: Simple American date format mm-dd-yyyy or mm-dd-yy, no time. Date range is 1900 --> 2099. Is enough for my purposes. Incorectly validates 02-29-1900. I created this to validate dates on a web form where the likely range will be 2000-->2020. Seperators can be '.','/' or '-'
#D: Anyone know the rules for operator precedence for regex syntax?
^(((((((0?[13578])|(1[02]))[\.\-/]?((0?[1-9])|([12]\d)|(3[01])))|(((0?[469])|(11))[\.\-/]?((0?[1-9])|([12]\d)|(30)))|((0?2)[\.\-/]?((0?[1-9])|(1\d)|(2[0-8]))))[\.\-/]?(((19)|(20))?([\d][\d]))))|((0?2)[\.\-/]?(29)[\.\-/]?(((19)|(20))?(([02468][048])|([13579][26])))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1031
#A: Nikolay Yordanov
#D: Validation of a Folder Name. Excludes all forbidden characters
^[^\\\/\?\*\"\'\>\<\:\|]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1032
#A: Dany Lauener
#D: yyyyMMdd with leap year validation, starting from year 2000 only.
#D: The length of the expression is minimized, but still validates all entries.
#D: If you want it with years like 1600 or separators, just ask :)
^([2-9]\d{3}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|(([2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00))0229)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1033
#A: Dany Lauener
#D: yyMMdd with leap years.
#D: Minimized expression.
#D: As we have only 2 numbers for the years, dates 1600, 2000, etc are still validated.
^(\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1034
#A: Dany Lauener
#D: HHmmss without any separators. Hours in 24h format.
^([01]\d|2[0123])([0-5]\d){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1036
#A: Derek Noonan
#D: This matches all positive decimal values. There was one here already which claimed to but would fail on value 0.00 which is positive AFAIK...
(^\d*\.?\d*[0-9]+\d*$)|(^[0-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1037
#A: Matt Bruce
#D: finds the url and url description for all links in a given text.
href\s*=\s*(?:(?:\"(?<url>[^\"]*)\")|(?<url>[^\s*] ))>(?<title>[^<]+)</\w>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1038
#A: Dany Lauener
#D: MM/dd/yyyy with 100% leap year validation starting from year 2000.
#D: If this one doesn't fit your needs, just tell me.
#D: Sorry for starting "only" from year 2000, this is so simple to change this, please ask if needed.
#D: Enjoy
^(((0[1-9]|1[012])/(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])/(29|30)|(0[13578]|1[02])/31)/[2-9]\d{3}|02/29/(([2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1039
#A: German Gonzalez
#D: Formatted Number with "," as thousand separator and "." as decimal separator. now accept numbers without separators of thousands.
^\-?[0-9]{1,3}(\,[0-9]{3})*(\.[0-9]+)?$|^[0-9]+(\.[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1040
#A: Paul Thrasher
#D: 
wave/([A-Za-z0-9\s/\%\-_]+)(/)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1041
#A: Harry Chou
#D: I need a pattern to match the whole number / integer (0-99999...), but also allow users to put comma in the thousand positions.
#D: This is what I got.
^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1042
#A: Johky Cheng
#D: Url matching
\b([\d\w\.\/\+\-\?\:]*)((ht|f)tp(s|)\:\/\/|[\d\d\d|\d\d]\.[\d\d\d|\d\d]\.|www\.|\.tv|\.ac|\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.museum|\.co)([\d\w\.\/\%\+\-\=\&\?\:\\\"\'\,\|\~\;]*)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1044
#A: Alexander Pinsker
#D: This regular expression accepts SEDOL (Stock Exchange Daily Official List number, a code used by the London Stock Exchange to identify foreign stocks).
#D: To be more exact - it accepts POTENTIAL SEDOL's, since the last, 7th digit of a sedol is a kind of check-sum digit and this reg-ex doesn’t check’s its correctness. Also, despite following to the formal SEDOL definition - its first character should be a consonant character – there are actual sedol’s with the first character, which is a number (e.g. 0067340 for BAA) and they are accepted by this reg-ex.
(?<Sedol>[B-Db-dF-Hf-hJ-Nj-nP-Tp-tV-Xv-xYyZz\d]{6}\d)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1045
#A: Alexander Pinsker
#D: This simple reg-ex accepts any consonant character.
#D: (Temporarily excluded, since Y need to be checked for whether it's combined with another vowel).
[B-Db-dF-Hf-hJ-Nj-nP-Tp-tV-Xv-xZz]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1046
#A: Alexander Pinsker
#D: This simple reg-ex accepts any vowel letter.
[AaEeIiOoUuYy]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1047
#A: Howard Richards
#D: Here it is, the monster UK Postcode regular expression that should prevent the majority of miskeying. Unlike an most other regexes it only permits valid combinations of letters, e.g. BN works, BM does not. Spaces between the first and second parts are optional. I have tested this against a file of 7,500 valid postcodes, and also against a real-world list of about 12,000 which had some bad data. Manually checking a sample of the rejected ones showed it was working correctly (and how poor the data was!!).
#D: I originally started by trying to adapt the GDSC document at http://www.govtalk.gov.uk/gdsc/html/frames/PostCode.htm and specifically their XSD pattern at http://www.govtalk.gov.uk/gdsc/schemaHtml/bs7666-v2-0-xsd-PostCodeType.htm but this turned out to be rather loose. Instead I wrote this. If you find any valid postcodes being rejected by this regex please let me know.
(((^[BEGLMNS][1-9]\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] | JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \d\d?) | (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\s?0AA)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1048
#A: Tom Hartland
#D: Hopefully an all-encompassing expression to validate a URL.  Supports an optional protocol, either a domain or IP address, an optional port number and an optional path.
^(((ht|f)tp(s?))\://)?((([a-zA-Z0-9_\-]{2,}\.)+[a-zA-Z]{2,})|((?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(\.?\d)\.)){4}))(:[a-zA-Z0-9]+)?(/[a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1049
#A: Bri Gipson
#D: Allows up to seven digits to the left and up to nine digits to the right of an optional decimal place.
#D: Leading zeros on the left of the decimal are accepted.
#D: Only positive values are accepted.
^(?=.*[1-9].*$)\d{0,7}(?:\.\d{0,9})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1050
#A: Jason Roe
#D: Modified Joe Lynwood's to allow zero amounts.  Handles US Dollars including zero dollars.  
^(\$)?(([1-9]\d{0,2}(\,\d{3})*)|([1-9]\d*)|(0))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1051
#A: Martin Ille
#D: This RE matches the web links which begin http://, ftp://, https:// or www.
#D: You can edit this disadvantage easy...
((http\://|https\://|ftp\://)|(www.))+(([a-zA-Z0-9\.-]+\.[a-zA-Z]{2,4})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9%:/-_\?\.'~]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1052
#T: Currency
#A: Vincent Faller
#D: Validates US currency but allows for spaces between the dollar sign and dollar amount. If there is cents the period validates to two decimal places
^\$( )*\d*(.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1053
#A: Mike OBrien
#D: Searches for SQL comments within a T-SQL statement...
\*.+?\*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1054
#A: Ludwig Gramberg
#D: this regex eleminates all parameters from a html querry e.g.
#D: param1=hans¶m2=5&badparam=5
#D: so bad param will be deleted from the params given. its usefull to clean up urls from unwanted params you not allow befor using the query string for further issues.
([^\=&]+)(?<!param1|param2|param3)\=([^\=&]+)(&)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1055
#A: Gregory Lyons
#D: Matchs comma delimited numbers. Easily changed to allow for other delimiters. (Edit ",")
#D: Does not allow a leading 0
#D: Does not allow groups of numbers with less than 3 numbers, exculding the first group.
^([1-9]{1}(([0-9])?){2})+(,[0-9]{1}[0-9]{2})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1056
#A: Fernando Eklipse
#D: Applied to a .RTF document, returns all the names of the# bookmarks. Useful to  retrieve# dinamically#   the list of bookmarks from a document. 
\{\\\*\\bkmkstart\s(.*?)\}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1057
#A: Martin Ille
#D: You can use this regular expression in your PHP scripts to convert entered URL in text to URL link. Example:
#D: $text=ereg_replace("(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?","<a href=\"./redir.php?url=\\0\" target=\"_blank\">\\0</a>",$text);
(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1058
#A: Charles Farley
#D: This regex is designed to parse entries from tnsnames.ora for Oracle connections.  This is a crude first cut in that it doesn't allow for multiple ADDRESS entries in the ADDRESS_LIST section, and I don't know if there are other attributes that I should be allowing for.  Basically, I just don't know enough about possible scenarios at this time, so I just wrote it to what I see in the wild where I work.
(?<entryname>[\w_0-9]+)\s*=\s+\(\s*DESCRIPTION\s*=\s+\(\s*ADDRESS_LIST\s*=\s+\(\s*ADDRESS\s*=\s*\(\s*PROTOCOL\s*=\s*(?<protocol>\w+)\)\s*\(\s*HOST\s*=\s*(?<host>[^\)]+)\)\s*\(\s*PORT\s*=\s*(?<port>\d+)\s*\)\s*\)\s+\)\s+\(\s*CONNECT_DATA\s*=\s+\(\s*SERVICE_NAME\s*=\s*(?<svcname>\w+)\s*\)\s+\)\s+\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1059
#A: Sonal Bordia
#D: returns string between two quotes
"[^"\r\n]*"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1060
#A: DOZENROSES T
#D: Airway bill no that allows only the format 999-99999998 and does not allow the last digit to be 7,8,9.
^\d{3}-\d{7}[0-6]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1061
#A: Louis Ostendorf
#D: Anti-Spam/Spam stopper: Detects all words with the character "|" instead of an "l" or "1"
(^.+\|+[A-Za-z])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1062
#A: Ben Vaughan
#D: Expression to parse Australian landline telephone numbers. Will only accept valid STD codes. Allows for brackets around the STD code and either spaces or dashes between number groups.
^\({0,1}0(2|3|7|8)\){0,1}(\ |-){0,1}[0-9]{4}(\ |-){0,1}[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1063
#A: will gunby
#D: Positive real number greater than zero.
(^[0-9]*[1-9]+[0-9]*\.[0-9]*$)|(^[0-9]*\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1064
#A: Howard Richards
#D: For the terminally hard of thinking, a version of my UK postcode validator without WHITESPACE. Unlike most validators on regexlib, this knows valid postcode combinations, e.g. W1A is permitted, W1 is not, but W2 is. It should catch between 95-98% of invalid postcodes.
(((^[BEGLMNS][1-9]\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\d\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\s?0AA$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1065
#T: RFC Registro Federal de Contribuyentes (MEXICO)
#A: Leo Hinojosa
#D: Registro Federal de Contribuyentes (RFC) , used in Mexico as a unique set of characters for a person or corporation registration . Registro Federal de Contribuyentes utilizado en Mexico para el registro en hacienda
#D: (includes leap years)
^([A-Z|a-z|&]{3})(([0-9]{2})([0][13456789]|[1][012])([0][1-9]|[12][\d]|[3][0])|([0-9]{2})([0][13578]|[1][02])([0][1-9]|[12][\d]|[3][01])|([02468][048]|[13579][26])([0][2])([0][1-9]|[12][\d])|([1-9]{2})([0][2])([0][1-9]|[12][0-8]))(\w{2}[A|a|0-9]{1})$|^([A-Z|a-z]{4})(([0-9]{2})([0][13456789]|[1][012])([0][1-9]|[12][\d]|[3][0])|([0-9]{2})([0][13578]|[1][02])([0][1-9]|[12][\d]|[3][01])|([02468][048]|[13579][26])([0][2])([0][1-9]|[12][\d])|([1-9]{2})([0][2])([0][1-9]|[12][0-8]))((\w{2})([A|a|0-9]{1})){0,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1066
#T: All existing TLDs (Top-Level Domains) according to IANA specifications
#A: Daniel Beck
#D: This regexp matches all existing TLDs (Top-Level Domains) according to IANA specifications as of 14/07/2007.
(a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1067
#A: Trevor Green
#D: Validates email addresses according to the RFC 822 specification. The only exception is the exclusion of control characters, which should be sufficient for human input from a keyboard.
(?<user>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\"))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\")))*)@(?<domain>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\]))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\])))*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1068
#A: Eric Falsken
#D: This expression pulls the Culture name out of a .resx file name.
(?i:)(?<=\.)\D\D(?:-\D{2,3}?(?:-\D\D\D\D)?)?(?=.resx)\N#Just change the extension if you want to take a Culture out of different type of file name.\N#The result will always be of the format:\N#(2CharacterLanguage)-(2or3CharacterLocale)-(4CharacterScript)\N#where the second or third set are optional\N#this matches the format of the CultureInfo object in Microsoft .NET

#U: http://regexlib.com/REDetails.aspx?regexp_id=1070
#A: Karsten Sosna
#D: Matches valids TCP/IP-Adresses
^((\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5])\.(\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5])\.(\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5])\.(\d|\d\d|[0-1]\d\d|2[0-4]\d|25[0-5]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1072
#A: Tim Conama
#D: Password validator
#D: Requires 6-20 characters including at least 1 upper or lower alpha, and 1 digit.
#D: It should disallow just about everything else, inluding extended characters.
^(?=.*\d)(?=.*[a-zA-Z])(?!.*[\W_\x7B-\xFF]).{6,15}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1074
#A: Alan McBee
#D: This is a Microsoft .NET regex. Not ready for client-side javascript (I'll work on that). I was unsatisfied with all the regex's out there to parse email addresses. So I wrote my own. This is built from a very detailed analysis of RFC2822, RFC2821, RFC1123. It was meant to validate email addresses as they might be typed by a user or copied from an address book or address field of many common email programs.
#D: It is NOT designed to guarantee that an email address is valid. For that, you must actually send a message to the addresses. However, it does get pretty good.
#D: Furthermore, it uses named groups to help parse the contents of the email address.
#D: A full discussion of this regex will not fit here. You can find the full discussion at my personal site, http://www.twilightsoul.com/Default.aspx?tabid=134.
#D: This regex supports Display Names (in quotes with an angle-bracketed Address), or angle-bracket Addresses, and it supports domain names (with a two-or-more letter TLD), or IP addresses (which must be in square brackets).
^((?<DisplayName>([\t\x20]*[!#-'\*\+\-/-9=\?A-Z\^-~]+\N[\t\x20]*|"[\x01-\x09\x0B\x0C\x0E-\x21\x23-\x5B\N\x5D-\x7F]*")+)?[\t\x20]*<(?<LocalPart1>([\t\x20]*\N[!#-'\*\+\-/-9=\?A-Z\^-~]+(\.[!#-'\*\+\-/-9=\?A-Z\^-~]+)*|\N"[\x01-\x09\x0B\x0C\x0E-\x21\x23-\x5B\x5D-\x7F]*"))@\N(?<Domain1>(([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])*\N\.)+[a-zA-Z]{2,}|\[(([0-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|\N25[0-5])\.){3}([0-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\N\]))>[\t\x20]*|(?<LocalPart2>([\t\x20]*\N[!#-'\*\+\-/-9=\?A-Z\^-~]+(\.[!#-'\*\+\-/-9=\?A-Z\^-~]+)*|\N"[\x01-\x09\x0B\x0C\x0E-\x21\x23-\x5B\x5D-\x7F]*"))@\N(?<Domain2>(([a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])*\N\.)+[a-zA-Z]{2,}|\[(([0-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|\N25[0-5])\.){3}([0-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25\N[0-5])\])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1075
#A: Ramon Hildreth
#D: Regular expression to limit types of files accepted. This example matches .jpg and .gif files only.
^([a-zA-Z].*|[1-9].*)\.(((j|J)(p|P)(g|G))|((g|G)(i|I)(f|F)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1077
#A: Paolo Mazzini
#D: Matches the AssemblyVersion attribute in an Assembly.vb file. The version value is captured.
^[^']*?\<\s*Assembly\s*:\s*AssemblyVersion\s*\(\s*"(\*|[0-9]+.\*|[0-9]+.[0-9]+.\*|[0-9]+.[0-9]+.[0-9]+.\*|[0-9]+.[0-9]+.[0-9]+.[0-9]+)"\s*\)\s*\>.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1078
#A: vijay gali
#D: 
9[0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1079
#A: Corey Charlton
#D: Allows for a dollar sign with no space after, a dollar sign with a space after, and no dollar sign.  Also makes sure theres no more than 4 decimal places.  Takes out leading zeros if the number isn't 0, and protects against blank entries.
^(\$\ |\$)?((0|00|[1-9]\d*|([1-9]\d{0,2}(\,\d{3})*))(\.\d{1,4})?|(\.\d{1,4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1080
#T: UK National Insurance Number
#A: Amos Hurd
#D: UK National Insurance (NI) Number, updated 14 Dec 2005 and current for 2006.
^((A[ABEHKLMPRSTWXYZ])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTWXYZ])|(GY)|(H[ABEHKLMPRSTWXYZ])|(J[ABCEGHJKLMNPRSTWXYZ])|(K[ABEHKLMPRSTWXYZ])|(L[ABEHKLMPRSTWXYZ])|(M[AWX])|(N[ABEHLMPRSWXYZ])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTWXYZ])|(S[ABCGHJKLMNPRSTWXYZ])|(T[ABEHKLMPRSTWXYZ])|(W[ABEKLMP])|(Y[ABEHKLMPRSTWXYZ])|(Z[ABEHKLMPRSTWXY]))\d{6}([A-D]|\s)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1081
#T: Simple Microsoft Product Key
#A: Amos Hurd
#D: Simple Microsoft product key check.
^[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}-[A-Z1-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1082
#A: Tristen Fielding
#D: Verify "well formed-ness" of DOS or UNC paths.
#D: Passed over 170 NUnit test, (took 3 complete rewrites)
#D: Components of a path:
#D: DRIVE:=[a-z]:
#D: SERVER:=[0-9]*[a-z\-][a-z0-9\-]*
#D: FNAME:=[^\.\x01-\x1F\\""\*\?<>:|\\/][^\x01-\x1F\\""\*\?<>:|\\/]*
#D: VOLUME:=FNAME
#D: UNC:=\\SERVER\VOLUME
#D: ROOT:=(DRIVE|UNC)
#D: FOLDER:=.|..|FNAME
#D: FOLDERS:=FOLDER?([\]FOLDER)*[\]?
#D: PATH:=^ROOT?FOLDERS?$
^((?<DRIVE>[a-z]:)|(\\\\(?<SERVER>[0-9]*[a-z\-][a-z0-9\-]*)\\(?<VOLUME>[^\.\x01-\x1F\\""\*\?<>:|\\/][^\x01-\x1F\\""\*\?|><:\\/]*)))?(?<FOLDERS>(?<FOLDER1>(\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))?(?<FOLDERm>[\\/](\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))*)?[\\/]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1085
#A: rich hayes
#D: This RegExp makes sure a line in a log file matches the Apache Common log format:
#D: LogFormat "%h %l %u %t \"%r\" %>s %b" common.
#D: It is not very strict on what appears in the 'page', 'referer' or 'agent' fields, as this text can vary massively, plus it keeps the RegExp as fast as possible...
#D: It was useful for me to check that logfiles on the server can be parsed by Log Analysis software I'm writing.
#D: I hope someone finds it useful.
\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}\s.\s.\s\[\d{2}\/\D{3}\/\d{4}:\d{1,2}:\d{1,2}:\d{1,2}\s.\d{4}\]\s\"\S*\s\S*\s\S*\"\s\d{1,3}\s\S*\s\".*\"\s\".*\"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1086
#A: Matt Skone
#D: Can be used to match on (and strip out) low-order non-printable ASCII characters (ASCII 0-31) from string data prior to adding to an XML document.  Useful when using parsers like Microsoft's MSXML3 that strictly enforce W3C specification on allowable characters.  Does not match on ASCII 9 (horiz tab), 10 (carriage return), 13 (line feed).
&\#x0*(0|1|2|3|4|5|6|7|8|B|C|E|F|10|11|12|13|14|15|16|17|18|19|1A|1B|1C|1D|1E|1F);

#U: http://regexlib.com/REDetails.aspx?regexp_id=1087
#A:  
#D: it matches dutch zip codes (postcode)
^[1-9]{1}[0-9]{3}\s?[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1088
#A: Mario Matijasevic
#D: This one matches all strings except "FirstString" and "SecondString"
^(?(FirstString|SecondString)yes|.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1089
#A: Mario Matijasevic
#D: This one matches all strings except "FirstString" and "SecondString"
^(?(FirstString|SecondString)yes|.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1091
#A: Dain White
#D: This is a derivation of a few other image tag regex patterns I found on the site that didn't seem to work. This is my first regex, so if I did this wrong - apologies in advance! It works for me...
<[iI][mM][gG]([^>]*[^/>]*[/>]*[>])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1092
#A: Dain White
#D: My second ever regex - a derivation of an image tag pattern, use in conjunction with <[iI][mM][gG]([^>]*[^/>]*[/>]*[>]) to remove advertisements from RSS feeds. Whee!
<[iI][fF][rR][aA][mM][eE]([^>]*[^/>]*[/>]*[>])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1093
#A: bart coelus
#D: Belgian Carenet message Alphanumerical field - as described in the 'programmer's guide for carenet - Belgacom'.
#D: Only the following characters, ASCII, are authorised:
#D: Space . - :
#D: Alphanumerical characters (a-z and A-Z)
#D: Numerical characters (0-9)
#D: Length is restricted to 150 chars
^[ .a-zA-Z0-9:-]{1,150}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1094
#A: Keith Hawes
#D: Attempt to validate email addresses. Does not support name <host@domain.com> format or ip addresses
^(([_\w-+!#$%&'*/=?^`{}|~]+(\.[_\w-+!#$%&'*/=?^`{}|~]+)*)|("([ _\w-+!#$%&'*/=?^`{}|~]+(\.[ _\w-+!#$%&'*/=?^`{}|~]+)*)"))@[\w-]{1,63}(\\.[\w-]{1,63})*(\.[_\w-]{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1095
#A: Gabriel Araujo
#D: Validador de CPF ou CNPJ brasileiro. Utilizado em campos que podem receber os dois valores, como um campo de busca, que pode buscar por CPF ou CNPJ, como era o meu caso.
#D: [00.000.000/0000-00],   [123.456.789-98],[00000000000000] e [12345678998]
#D: Enjoy! =)
(^(\d{2}.\d{3}.\d{3}/\d{4}-\d{2})|(\d{14})$)|(^(\d{3}.\d{3}.\d{3}-\d{2})|(\d{11})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1096
#A: Gabriel Araujo
#D: Numeração usar para valores moeda brasileira e de outras regiões. Dinheiro, money...
#D: Enjoy! =)
^([1-9]{1}[\d]{0,2}(\.[\d]{3})*(\,[\d]{0,2})?|[1-9]{1}[\d]{0,}(\,[\d]{0,2})?|0(\,[\d]{0,2})?|(\,[\d]{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1097
#T: MM/dd/yyyy HH:mm:ss.fff  Datetime \w milliseconds
#A: Michael Ash
#D: Date-time with milliseconds. MM/dd/yyyy HH:mm:ss.fff Time is in military format and requires leading zeroes for single digit hours and seconds and two digit milliseconds. All fields are required. This was a special request modification of another regex.
(?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d)\d{2})\x20)(?<time>(?<hours>[01]\d|2[0-3]):(?<minutes>[0-5]\d):(?<seconds>[0-5]\d)\.(?<milliseconds>\d{3}))$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1098
#A: Thanassis Viennas
#D: Matching any valid MS Excel range
(^[A-Z]{1,2}[0-9]{1,}:{1}[A-Z]{1,2}[0-9]{1,}$)|(^\$(([A-Z])|([a-z])){1,2}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}([0-9]){1,}$)|(^\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1099
#A: Thanassis Viennas
#D: A regular expression for any valid MS Excel range
(^[A-Z]{1,2}[0-9]{1,}:{1}[A-Z]{1,2}[0-9]{1,}$)|(^\$(([A-Z])|([a-z])){1,2}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}([0-9]){1,}$)|(^\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}:{1}\$(([A-Z])|([a-z])){1,2}(\$){1}([0-9]){1,}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1100
#A: Daniel Chaffiol
#D: Detect windows share path (unc path)
\\\\\w+?(?:\\[\w\s$]+)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1101
#A: Happy Jack
#D: If you need a textbox to allow only positive numbers with two decimal places, try this. I wanted the user to be able to enter any type of currency amount (US of course) but also have two decimal places for database field.
(^\d*\.\d{2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1102
#A: Henri Van Wesemael
#D: Validate location, latitude and longitude separated by space, where latitude is expressed as compass direction (N or S),degrees,minutes,seconds and longitude is expressed as compassdirection (E or W) ,degrees,minutes,seconds.
#D: Range check for minutes and seconds (0-59),
#D: max.latitude 90.00.00, max longitude 180.00.00
^[NS]([0-8][0-9](\.[0-5]\d){2}|90(\.00){2})\040[EW]((0\d\d|1[0-7]\d)(\.[0-5]\d){2}|180(\.00){2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1103
#A: Rahul Bhot
#D: a simple url validation
^[http://www.|www.][\S]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1104
#A: John Conwell
#D: Regex to match valid folder paths.  can be local, UNC with server name, or UNC with IP address
^((([a-zA-Z]:)|(\\{2}\w+)|(\\{2}(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.?\d)\.)){4}))(\\(\w[\w ]*)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1105
#A: Jeremy Ragan
#D: XML Namespace ( xmlns ) matcher.  Properly matches one or more of either xmlns="blah" or xmlns:blah="blooey" .
#D: (for c#, make sure to escape the double-quotes.)
((xmlns:.*?=[",'].*?[",'])|(xmlns=[",'].*?[",']))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1106
#A: itzco calva
#D: Use for parsing CSV files exported from MS Excel, This program adds or not quotes, so it's more complicated..
#D: Use for parsing individual lines, the Regex doesn't capture end of line (supposed to ($) but not made it in the testing so you cannot parse the whole file.
#D: Read a line and split it, with this regex
(?<=,)\s*(?=,)|^(?=,)|[^\"]{2,}(?=\")|([^,\"]+(?=,|$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1107
#A: Mike Campbell
#D: Matches /* style comments */.
#D: Matches whitespace (so can detect tabs, etc.)
\*[\d\D\s]*\*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1108
#A: Mike Campbell
#D: Matches /* style comments */.
#D: Matches whitespace (so can detect tabs, etc.)
#D: Problems with nested comments. 
\*((?!\*/)[\d\D\s])*\*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1109
#A: Clark Hay
#D: Accepts valid US Postal Code - either 5 digit, or extended   
^(([0-9]{5})*-([0-9]{4}))|([0-9]{5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1111
#A: Sujata Bhave
#D: This regular expression match can be used for validating strong password. It expects atleast 1 small-case letter, 1 Capital letter, 1 digit, 1 special character and the length should be between 6-10 characters. The sequence of the characters is not important. This expression follows the above 4 norms specified by microsoft for a strong password.
(?=^.{6,10}$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+}{":;'?/>.<,])(?!.*\s).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1112
#A: Gerald Schmidt
#D: American spellings: -ize verb forms.
#D: To construct -ise equivalents, use: \1\2s\3
#D: The project page is https://sourceforge.net/projects/xml-copy-editor/. Released under the GNU GPL.
\b([a-z]+)(?:(?<=emphas|fantas)|(?<!ba|ma|pr|se|s))([iy])z(a(?:bl[ey]|tion(?:|al(?:|ly)|s))|es?|ed|ers?|ing)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1113
#A: Gerald Schmidt
#D: British spellings: -ise verb forms. To construct -ize equivalents, use: \1\2z\3 The project page is https://sourceforge.net/projects/xml-copy-editor/. Released under the GNU GPL.
\b([a-z]+)(?:(?<=ic|[ai]m|[^a-z]pr|[eiou][tr])|(?<![rd]a|c|gu|m|parad|o|p|r|[acrs]t|v|w))([iy])s(a(?:bl[ey]|tion(?:|al(?:|ly)|s))|e|ed|ers?|(?<!ys)es|ing)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1114
#A: amarkant rai
#D: Pattern for Indian Postal Code.
^[1-9]{3}\s{0,1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1115
#T: IPv6 address
#A: Dean Dal Bozzo
#D: IPv6 address (128 bit). Matches hexadecimal patterns and single 0 in the address.
^([0-9a-fA-F]{4}|0)(\:([0-9a-fA-F]{4}|0)){7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1116
#T: Port Numbers
#A: Dean Dal Bozzo
#D: Port Numbers: Well Known Ports: 0 through 1023.  Matches numbers in range of 0 through 1023.
^(102[0-3]|10[0-1]\d|[1-9][0-9]{0,2}|0)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1117
#T: Port Numbers
#A: Dean Dal Bozzo
#D: Port Numbers: Registered Ports: 1024 through 49151.  Matches numbers in range of 1024 through 49151.
^(4915[0-1]|491[0-4]\d|490\d\d|4[0-8]\d{3}|[1-3]\d{4}|[2-9]\d{3}|1[1-9]\d{2}|10[3-9]\d|102[4-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1118
#T: Port Numbers
#A: Dean Dal Bozzo
#D: Port Numbers: Dynamic and/or Private Ports: 49152 through 65535.  Matches numbers in range of 49152 through 65535.
^(6553[0-5]|655[0-2]\d|65[0-4]\d\d|6[0-4]\d{3}|5\d{4}|49[2-9]\d\d|491[6-9]\d|4915[2-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1119
#T: Port Numbers
#A: Dean Dal Bozzo
#D: Port Numbers: Well Known Ports & Registered Ports: 0 through 49151.  Matches numbers in range of 0 through 49151.
^(4915[0-1]|491[0-4]\d|490\d\d|4[0-8]\d{3}|[1-3]\d{4}|[1-9]\d{0,3}|0)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1120
#T: Port Numbers
#A: Dean Dal Bozzo
#D: Port Numbers: Well Known Ports, Registered Ports & Dynamic and/or Private Ports: 0 through 65536.  Matches numbers in range of 0 through 65536.
^(6553[0-5]|655[0-2]\d|65[0-4]\d\d|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3}|0)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1121
#T: URL
#A: Dean Dal Bozzo
#D: Matches a URL string by: protocol,subdomain,domain,ip address,port number,path and/or filename
^((([hH][tT][tT][pP][sS]?|[fF][tT][pP])\:\/\/)?([\w\.\-]+(\:[\w\.\&%\$\-]+)*@)?((([^\s\(\)\<\>\\\"\.\[\]\,@;:]+)(\.[^\s\(\)\<\>\\\"\.\[\]\,@;:]+)*(\.[a-zA-Z]{2,4}))|((([01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}([01]?\d{1,2}|2[0-4]\d|25[0-5])))(\b\:(6553[0-5]|655[0-2]\d|65[0-4]\d{2}|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3}|0)\b)?((\/[^\/][\w\.\,\?\'\\\/\+&%\$#\=~_\-@]*)*[^\.\,\?\"\'\(\)\[\]!;<>{}\s\x7F-\xFF])?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1122
#T: Time
#A: Dean Dal Bozzo
#D: Matches a time string.  A loose validation for easy user entry. Saves the information needed for a correct time setting.
^((0?[1-9]|1[012])(\s*:\s*([0-5]\d))?(\s*:\s*([0-5]\d))?(\s*([AaPp])[Mm]?)$|(2[0-3]|[1]\d|0?\d)(\s*:\s*([0-5]\d))(\s*:\s*([0-5]\d))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1123
#A: Parag Diwan
#D: Good For Validating Phone numbers that are 0 to 9 in length
(^[0-9]{0,10}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1124
#A: Aleš Potocnik
#D: This expression matches only valid html anchors. Those are anchors with an attribute name=. Such anchor can be closed either with </a> or with />.
#D: If someone can help - one thing still missing is not matching html tags with parameter href, becazse such should be considered as non valid anchors.
<a[a-zA-Z0-9 ="'.:;?]*(name=){1}[a-zA-Z0-9 ="'.:;?]*\s*((/>)|(>[a-zA-Z0-9 ="'<>.:;?]*</a>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1125
#A: tim glenn
#D: Currency which cannot be less than $1000 and lower than a billion.
^\$?([1-9][0-9]{3,}(\.\d{2})?|(\d{1,3}\,\d{3}|\d{1,3}\,\d{3}(\.\d{2})?)|(\d{1,3}\,\d{3}|\d{1,3}\,\d{3}\,\d{3}(\.\d{2})?)*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1128
#A: Aleš Potocnik
#D: An expression that matches all XHTML valid hrefs (links). It even alows spaces like href = "href...", dough this is not quite XHTML valid. It finds only hrefs but not for instance anchors. If you need to find only anchors, replace "href" within expression with "name" and thats it.
<a[a-zA-Z0-9 ="'.?_/]*(href\s*=\s*){1}[a-zA-Z0-9 ="'.?_/]*\s*((/>)|(>[a-zA-Z0-9 ="'<>.?_/]*</a>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1129
#A: Pascal Piekar
#D: Dutch licenceplate check also including scooters#
#D: ABC123#
#D: 12-AB-AB#
#D: 12-ABC-1#
#D: 1-ABC-12#
#D: A-123-AB#
(([a-zA-Z]{3}[0-9]{3})|(\w{2}-\w{2}-\w{2})|([0-9]{2}-[a-zA-Z]{3}-[0-9]{1})|([0-9]{1}-[a-zA-Z]{3}-[0-9]{2})|([a-zA-Z]{1}-[0-9]{3}-[a-zA-Z]{2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1130
#A: Todd Davis
#D: This pattern will match any multi-line or single line comments in TSQL (Stored Procedures or SPROC's) in MS SQL Server.
(\/\*(\s*|.*?)*\*\/)|(--.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1131
#T: Oracle Binding Variables
#A: Mike Willbanks
#D: This matches oracle binding variables in SQL.  Not sure if it is the same with other RDBMS'
(:[a-z]{1}[a-z1-9\$#_]*){1,31}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1133
#A: Brian Bonini
#D: US vehicle VIN numbers for vehicles with GVW < 10k lbs
^([A-Z\d]{3})[A-Z]{2}\d{2}([A-Z\d]{1})([X\d]{1})([A-Z\d]{3})\d{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1135
#A: Joaquin Jares
#D: This regular expression will find the highest level groups within recursive tokens. For instance, if I have "This is [just [an] example] of the [expression]", it'll find [just [an] example] and [expression], and nothing else. It will also not find an escaped bracket expression. If you want to replace the bracket with curly braces or parenthesis, be careful. As an example, curly braces will be: (?<!\\)\{(\\\{|\\\}|[^\{\}]|(?<!\\)\{.*(?<!\\)\})*(?<!\\)\}
(?<!\\)\[(\\\[|\\\]|[^\[\]]|(?<!\\)\[.*(?<!\\)\])*(?<!\\)\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1136
#A: Abdul Khaliq Oomatia
#D: It could be used to validate local as well as International Phone nos where the number my be preceeding by + sign for(00) and may have brackets to accept the city code like (22).It will also accept space in between like 001 116 23314
^[0-9,+,(), ,]{1,}(,[0-9]+){0,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1137
#A: Steven Davis
#D: This limits an HTML textarea to only be 20 characters.  Built for an ASP:regularexpression tag to validate a textarea.
^(.){0,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1138
#A: Mickey Jervin
#D: Finding the value behind the char '='. The Exp. is designed to find parametres in specified URL's. In this example it find tha value of "str="
(str\=)\s*(?<value>([a-zA-Z0-9\,\.]{1})*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1139
#A: daniel adam
#D: validates a simple ip v4 address. including 0.0.0.0 or 255.255.255.255. leading 0 is and numbers above 255 are forbitten.
^((\d|[1-9]\d|2[0-4]\d|25[0-5]|1\d\d)(?:\.(\d|[1-9]\d|2[0-4]\d|25[0-5]|1\d\d)){3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1140
#A: daniel adam
#D: parsing a linux ftp list string. result is a list of several groups like :
#D: dir (-,l,d)
#D: permission (lrwxrwxrwx)
#D: filecode (any number)
#D: owner (what it says - number or text)
#D: group (same as owner)
#D: timestamp (what it says, including groups like day, month, hour, minute)
#D: name (the file, directory or linkname)
^((?<dir>[\-ld])(?<permission>([\-r][\-w][\-xs]){3})\s+(?<filecode>\d+)\s+(?<owner>\w+)\s+(?<group>\w+)\s+(?<size>\d+)\s+(?<timestamp>(?<year>\d{4})-(?<month>\d{2})-(?<day>\d?\d)\s+(?<hour>\d{2}):(?<minute>\d{2}))\s+(?<name>\w.+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1141
#A: daniel adam
#D: parsing a linux ftp list string. result is a list of several groups like : dir (-,l,d) permission (lrwxrwxrwx) filecode (any number) owner (what it says - number or text) group (same as owner) timestamp (what it says, including groups like day, month, hour, minute) name (the file, directory or linkname)
^((?<dir>[\-ld])(?<permission>([\-r][\-w][\-xs]){3})\s+(?<filecode>\d+)\s+(?<owner>\w+)\s+(?<group>\w+)\s+(?<size>\d+)\s+(?<timestamp>(?<month>[a-z|A-Z]{3})\s+(?<day>(\d?\d))\s+(?<hour>\d?\d):(?<minute>\d{2}))\s+(?<name>\w.+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1142
#A: Kenneth Kalmer
#D: Simply matches a telephone number. Not meant to be extremly accurate but more for q uick match or extracting from a body of text. Does not support extensions
^\+?\(?\d+\)?(\s|\-|\.)?\d{1,3}(\s|\-|\.)?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1143
#A: Kenneth Kalmer
#D: Simply matches a telephone number. Not meant to be extremly accurate but more for q uick match or extracting from a body of text. Does not support extensions
^\+?\(?\d+\)?(\s|\-|\.)?\d{1,3}(\s|\-|\.)?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1144
#A: Andreo Romera
#D: Allows only positive numbers, greater than zero
^[1-9]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1145
#A: John Tobler
#D: This expression was originally developed for user names.  Matching text must have 6 - 50 characters, cannot contain spaces, must begin with an alpha character, can contain mixed case alpha, digits, and the following special characters:
#D: ! @ # $ % ^ & * - . _ ?
(?=^.{6,51}$)([A-Za-z]{1})([A-Za-z0-9!@#$%_\^\&\*\-\.\?]{5,49})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1146
#A: Shane Sukul
#D: (Corrected)
#D: This pattern will match 1 instance of a NON-alphanumeric character. This is very handy to use when y
#D: ou want to filter input only by alphanumeric characters, by using Regex.Replace.
#D: However, when used in a Regex.Replace, it will replace all instances of non-alphanumeric characters
#D: with specified character.
([^a-zA-Z0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1147
#A: Mukesh Dubey
#D: This expression will allow Letters, periods, apostrophe, dashes. 
^([a-zA-Z][a-zA-Z\&\-\.\'\s]*|)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1148
#A: Utku Ozan CANKAYA
#D: This piece of regex catches the if the open braces are not placed the line under a get command
\b(get)\b.*{

#U: http://regexlib.com/REDetails.aspx?regexp_id=1149
#A: Utku Ozan CANKAYA
#D: This regex catches the hard-coded for blocks
\bfor\b.*[A-Za-z][<> ][\d]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1150
#A: Utku Ozan CANKAYA
#D: This regex catches if the variable isn't initialized when it is declared
\b(byte|char|short|long|float|int|double|decimal|bool|string)\b.*\s[a-zA-Z](?=;)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1151
#A: Utku Ozan CANKAYA
#D: This regex catches illegal precedence order of declerations of a class
(\bprotected\b.*(public))|(\bprivate\b.*(protected))|(\bprivate\b.*(public))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1152
#A: Utku Ozan CANKAYA
#D: This regex catches the redundacy of including class names in the name of class properties. 
\b(\w+).\1

#U: http://regexlib.com/REDetails.aspx?regexp_id=1153
#A: Utku Ozan CANKAYA
#D: This regex forces the programmer to make only one decleration per line.
\b(public|private|protected|internal)\b.*(byte|char|short|long|float|int|double|decimal|bool|string)\b.*(?=,)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1154
#A: Utku Ozan CANKAYA
#D: This regex limits the use of any special prefix characters to indicate that the variable is scoped to the class. 
((\bm_[a-zA-Z\d]*\b)|(\bin_[a-zA-Z\d]*\b)|(\bin _[a-zA-Z\d]*\b))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1155
#A: Utku Ozan CANKAYA
#D: This regex forbids the use of underscore in the interface decleration.
\binterface\b.*(\bI[_]\w*\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1156
#A: Jonathan Churchill
#D: Matches the 24 clock
^(?([0-1])[0-1][0-9]|2[0-3])\:[0-5][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1162
#A: Matt Brooke
#D: This expression matches most swiss postal codes
^[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1163
#A: Matt Brooke
#D: This expression should match with most Portugese Post codes
^[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1164
#A: Matt Brooke
#D: Matches spanish postcodes
^([0][1-9]|[1-4[0-9]){2}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1165
#A: Bernhard Enders
#D: This is a correction from regex by Fernando Cerqueira. It validates brazilian zip codes, aka CEP, with or without mask.
(^\d{5}\-\d{3}$)|(^\d{2}\.\d{3}\-\d{3}$)|(^\d{8}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1166
#A: Gavin Hay
#D: Parses command line strings into name value pairs
(?<=[-{1,2}|/])(?<name>[a-zA-Z0-9]*)[ |:|"]*(?<value>[\w|.|?|=|&|+| |:|/|\\]*)(?=[ |"]|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1167
#A: Murray Roke
#D: Matches any positive integer (and blank) between 1 and 100 useful for validating input of a percentage, or nothing.
^((100)|(\d{0,2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1168
#A: Samir Khan
#D: This is an extension of already existing expression submitted. It checks for characters, hyphen and single quotes. Single quote and hyphen cannot appear at the beginning or at the end.
^[a-zA-Z]+((\s|\-|\')[a-zA-Z]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1169
#A: Matt Brooke
#D: A simple expression for algerian postcodes
^[0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1170
#A: Matt Brooke
#D: Expression for matching andorran postcodes
^([A-Z]{2}[0-9]{3})|([A-Z]{2}[\ ][0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1171
#A: Matt Brooke
#D: Expression to test for valid postcodes for azerbaijan
^[A][Z](.?)[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1172
#A: Matt Brooke
#D: Simple postcode validation for postcodes for bahrain
^([1][0-9]|[0-9])[1-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1173
#A: Matt Brooke
#D: Simple expression to validate bangladeshi postcodes
^[1-9][0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1174
#A: Matt Brooke
#D: Simple validation expression for postcodes for Belarus
^[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1175
#A: Matt Brooke
#D: An expression to validate postcodes for bermuda
^([A-Z]{2}[\s]|[A-Z]{2})[\w]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1176
#A: Matt Brooke
#D: This is a simple expression to validate postcodes from Brunei
^[B|K|T|P][A-Z][0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1177
#A: Matt Brooke
#D: Simple Postcode validation expression for Chile
^[0-9]{3}[-][0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1178
#A: Matt Brooke
#D: Simple expression for internationally formatted croatian postcodes.
^[H][R][\-][0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1179
#A: Matt Brooke
#D: Simple validation expression for cyprus postcodes
^[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1180
#A: Matt Brooke
#D: Simple expression for validation of egyptian postcodes
^[0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1181
#A: Matt Brooke
#D: Simple expression to match estonian postcodes
^[0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1182
#A: Matt Brooke
#D: Simple expression to validate ethiopian post codes
^[1-9][0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1183
#A: Matt Brooke
#D: Simple expression to validate postcodes for the faroe islands
^[F][O][\s]?[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1184
#A: Matt Brooke
#D: Simple expression for matching postcodes for French Polynesia
^[0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1185
#A: Matt Brooke
#D: Simple validation expression for postcodes in guadeloupe
^[9][7|8][1|0][0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1186
#A: Matt Brooke
#D: This is a simple expression for testing postcodes in Guinea
^[0-4][0-9]{2}[\s][B][P][\s][0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1187
#A: Matt Brooke
#D: Simple expression for validating postcodes for guinea-bissau
^[1-9][0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1188
#A: Lars Echterhoff
#D: This Pattern matches a HTML like tag and its closing tag without any childtags, that was identified by an attribute or anything identifiable (?) mark inside the opening tag.
#D: Look for A as Tag and 1 ans identifier. A greedy expression woulds usualy end at the A 2 closing tag, non-greedy will probably end at the A 3 end tag.
#D: e.g.:
#D: <A 1>
#D: <A 2>
#D: <A 2>dfgdfg</A>
#D: </A>
#D: <Z></Z>
#D: </A>
#D: <A 3>
#D: </A>
#D: Returns:
#D: 0 Full Match
#D: 1 Whole starttag
#D: 2 Content inside the tag
#D: 3 Whole endtag
#D: P.S.: I use it in a parser, to find tags and add code to them, without to know the code, the content or any further infomation.
(<[^>]*?tag[^>]*?(?:identify_by)[^>]*>)((?:.*?(?:<[ \r\t]*tag[^>]*>?.*?(?:<.*?/.*?tag.*?>)?)*)*)(<[^>]*?/[^>]*?tag[^>]*?>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1189
#A: Sébastien FERRAND
#D: retrieve all tagname in XML/HTML string
(?<=<[\/?]?)\w+(?::\w+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1190
#A: Jose Paez
#D: WINDOWS ONLY
#D: Useful to get the filename whenever you get it from anysource, recommended for non-critical filename-dependant applications.
(?<=(?:\\))[a-zA-Z0-9\-\s_]*(?=(?:\.\w*$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1192
#A: Sébastien FERRAND
#D: Get all string definition in C# code
@"([^"]|["]{2})*"|".*?(?<=[^\\]|[\\]{2})"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1193
#A: dave krause
#D: for getting cdata from and xml document.
#D: cdata returns in $1.
#D: it's not perfect as you can see from the non-matching examples.  improvements needed - but this works for most scenario's.
<!\[CDATA\[([^\]]*)\]\]>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1194
#A: Liran Hason
#D: 
^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1195
#A: Carey Bishop
#D: Returns the three most important attributes from an HTML <input> tag: 'type', 'name' and 'value'. Supports attribute values that are double- or single-quoted or unquoted. Returns four references, the first being the name of the attribute, and the other three being the value, of which only one will be populated based on the way the value was quoted.
\s(type|name|value)=(?:(\w+)|(?:"(.*?)")|(?:\'(.*)\'))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1196
#A: Mike Snyder
#D: A combination of W. D. and JP Honeywell's U.S./Canada phone expressions, but this does allow the legal (but rare) 555 exchange number and forces an area code.
^[01]?[- .]?\(?(?!\d[1]{2})[2-9]\d{2}\)?[- .]?(?!\d[1]{2})\d{3}[- .]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1197
#T: CSV Parser
#A: Alex Forencich
#D: Very simple (but very useful!) regex to split CSV files.  It does not drop the commas - you have to do that manually.  Quotes are dealt with properly and escaped quotes are ignored.  Matches from sample:this is ;a;"line,\"in\"a";csv;file
((?:[^",]|(?:"(?:\\{2}|\\"|[^"])*?"))*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1198
#T: Query String Ampersand Replacer
#A: Alex Forencich
#D: Used to replace lone ampersands in query strings with their & counterparts.  
&(?!amp;)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1199
#A: Richard Hensman
#D: <input[^>]*?value[/s]*=[/s]*(['|"])(.*?)\1[^>]*?type[/s]*=[/s]*(['|"]?)text\3[^>]*?>
#D: A pair of reg ex's to capture the value from an <input type=text> - depending on whether the type or value is listed first in the tag.
#D: For some reason, when I combine them as a []|[] form regex, they don't work at all any more.
#D: The font on this site doesn't show the difference, but the last matching expression has a " character, the last non-matching one has two ' characters.  The last non-matching exp matches (with the typo in value fixed), but doesn't return the value correctly, any help with that would be appreciated. (this is my first commercially-used regex... I'm new to this still)
<input[^>]*?type[/s]*=[/s]*(['|"]?)text\1[^>]*?value[/s]*=[/s]*(['|"])(.*?)\2[^>]*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1200
#A: Richard Hensman
#D: All useful examples are multi-line, so not displayed.
#D: this will match any <select></select> block in an HTML document, and the return $3 will contain the displayed text (NOT the value of the displayed option)
<select(.|\n)*?selected(.|\n)*?>(.*?)</option>(.|\n)*?</select>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1201
#A: Richard Hensman
#D: Matches any textarea block, and returns the text inside it.
<textarea(.|\n)*?>((.|\n)*?)</textarea>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1202
#A: Judah Himango
#D: Gets the image url in an HTML <IMG> tag.
<img .+ src[ ]*=[ ]*\"(.+)\"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1203
#A: Samir Khan
#D: Telephone number validation. Validates a telephone number which contains either 0-9,(,),+,- and space. Let me know if it works for you. :)
^[0-9\s\(\)\+\-]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1204
#A: hazel ryan
#D: Credit Card Matching - Matches Switch, Solo, Visa, MasterCard and Discover. Matches length and valid prefix. Accepts input optional spaces and dashes between number groups
^((67\d{2})|(4\d{3})|(5[1-5]\d{2})|(6011))-?\s?\d{4}-?\s?\d{4}-?\s?\d{4}|3[4,7]\d{13}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1205
#A: hazel ryan
#D: Credit Card Validation. Matches Switch/Solo, Visa, MasterCard and Discover in 4-4-4-4/4 4 4 4/4444 format and Amex in 4-6-5/4 6 5/465 format.
#D: Includes checks for prefixes, (67 for switch/solo, 4 for visa, 51-55 for MasterCard, 37/34 for Amex and 6011 for Discover.
#D: Matches all major UK debit and credit cards with spaces dashes or as a continous number
^((67\d{2})|(4\d{3})|(5[1-5]\d{2})|(6011))(-?\s?\d{4}){3}|(3[4,7])\d{2}-?\s?\d{6}-?\s?\d{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1206
#A: Chuck D
#D: Query string parser matches and tokenizes each name/value pair for a valid query string.
[^(\&)](\w*)+(\=)[\w\d ]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1207
#A: hazel ryan
#D: Matches Names - written for credit card matching.
#D: Optional Prefix that can contain a fullstop, one or more forenames that can contain hyphens and apostrophes followed by a surname that can contain hyphens and apostrophes
^[a-z\.]*\s?([a-z\-\']+\s)+[a-z\-\']+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1208
#A: Rasmus Wehner
#D: This RegEx will match a RTF color taken from a color tabel in a RTF document (having the form '\redXXX\greenXXX\blueXXX;', where XXX is a number between 0 and 255).
\\red([01]?\d\d?|2[0-4]\d|25[0-5])\\green([01]?\d\d?|2[0-4]\d|25[0-5])\\blue([01]?\d\d?|2[0-4]\d|25[0-5]);

#U: http://regexlib.com/REDetails.aspx?regexp_id=1210
#A: Mike Frey
#D: This pattern is intended to remove all javascript blocks from a chunk of code.  EDIT: a bug is cutting off additional matches.
<script[\s\S]*?</script([\s\S]*?)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1211
#A: Richard Wood
#D: We had a need to cleanse webservice replies where the call behind the webmethod went to a legacy mainframe through a thunked middle tier. The escaped chars being in the reply broke the reply stream.  This exp when used in regex.replace within the webmethod will replace the garbage with chars of your choice. 
[\x01-\x08,\x0A-\x1F,\x7F,\x81,\x8D,\x8F,\x90,\x9D]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1212
#A: Joshua St. Marie
#D: Checks file paths for offending characters
#D: A successful file path is one that does not return a match
([,!@#$%^&*()\[\]]+|\\\.\.|\\\\\.|\.\.\\\|\.\\\|\.\.\/|\.\/|\/\.\.|\/\.|;|(?<![A-Z]):)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1213
#A: Simon Ferguson
#D: Yet Another URL Search.  Useful for capturing URLs in raw text.  Ignores URLs in HREF and comments. Turn off  whitespacing to test!
\b((?#optional port)(https?|ftp|file)://)?\N(?#sub domain)([a-z0-9](?:[-a-z0-9]*[a-z0-9])?\.)+\N(?#top domain)(com\b|edu\b|biz\b|gov\b|in(?:t|fo)\b|mil\b|net\b|org\b|[a-z][a-z]\b)\N(?#optional port)(:\d+)?\N(?#optional path)(/[-a-z0-9_:\@&?=+,.!/~*'%\$]*)*\N(?#not ending in)(?<![.,?!])\N(?#not enclosed in)(?!((?!(?:<a )).)*?(?:</a>))\N(?#or enclosed in)(?!((?!(?:<!--)).)*?(?:-->))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1214
#A: Lars Echterhoff
#D: This Pattern matches HTML attributes with quoted quotes or other non-word characters correctly. I used it in an parser-engine.
#D: Replace the quotes in this RX to match other boundaries.
(?:[\w]*) *= *"(?:(?:(?:(?:(?:\\\W)*\\\W)*[^"]*)\\\W)*[^"]*")

#U: http://regexlib.com/REDetails.aspx?regexp_id=1215
#A: Lars Echterhoff
#D: I don't give a f*** to the RFC, fix it yourself for RFC, I just need a valid webresource location. So add forbidden characters as you need them in the character classes or use it as it is. This RegEx is not for searching valid URLs, just for validating. Look at the trailing $.
(?:(?:http|https)://(?:(?:[^/&=()/§, ]*?)*\.)+(?:\w{2,3})+?)(?:/+[^ ?,'§$&()={\[\]}]*)*(?:\?+.*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1216
#A: Ben Slater
#D: This regular expression matches all interior vowels.
#D: If used as a replace, the following strings would result:
#D: Lets meet tomorrow -> Lts mt tmrrw
#D: Please come to my party -> Plse cme to my prty
#D: I like your style -> I lke yr style
(?i:[aeiou]+)\B

#U: http://regexlib.com/REDetails.aspx?regexp_id=1217
#A: Francis Marass
#D: Here is my first regexp. I hope you like it! It parses quite a few different urls, although it's not a high-quality regexp. Http, Ftp protocols are supported, parameters and anchors too.
((http|ftp|https):\/\/w{3}[\d]*.|(http|ftp|https):\/\/|w{3}[\d]*.)([\w\d\._\-#\(\)\[\]\\,;:]+@[\w\d\._\-#\(\)\[\]\\,;:])?([a-z0-9]+.)*[a-z\-0-9]+.([a-z]{2,3})?[a-z]{2,6}(:[0-9]+)?(\/[\/a-z0-9\._\-,]+)*[a-z0-9\-_\.\s\%]+(\?[a-z0-9=%&\.\-,#]+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1218
#A: John Shelby
#D: Matches unencrypted or encrypted SAS password in OMR configuration files
Password="(\{.+\}[0-9a-zA-Z]+[=]*|[0-9a-zA-Z]+)"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1219
#A: Mike Cromwell
#D: Matches the XSD schema duration built in type as defined by http://www.w3.org/TR/xmlschema-2/#duration
^[-]?P(?!$)(?:\d+Y)?(?:\d+M)?(?:\d+D)?(?:T(?!$)(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1220
#A: Richard Hauer
#D: Command line named argument parser which allows quoted values and includes "\"" escape for quotes in a quoted value.  Non-quoted values can be letter, space or underscore only. Argument names can be letter, space or underscore only. Argument delimiter can be "-" or "/" and name-value separator can be ":" or "=". All arguments must be named. Spaces are not allowed in 
(?:\s*)(?<=[-|/])(?<name>\w*)[:|=]("((?<value>.*?)(?<!\\)")|(?<value>[\w]*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1221
#A: Pavel Piskac
#D: Chemical Abstract Service Registry Number (CAS Nr). Identify chemical substance or mixture.
#D: (http://www.cas.org/New1/casinfo.html)
^\d{2,6}-\d{2}-\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1222
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Czech. Identify Bank account in Czech Republic.
CZ\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|CZ\d{22}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1223
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Slovak. Identify Bank account in Slovak Republic. 
SK\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|SK\d{22}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1224
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Andorra. Identify Bank account in Andorra.
AD\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|AD\d{22}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1225
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Spain. Identify Bank account in Spain.
ES\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|ES\d{22}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1226
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Sweden. Identify Bank account in Sweden.
SE\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|SE\d{22}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1227
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Switzerland. Identify Bank account in Switzerland.
CH\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{1}|CH\d{19}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1228
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Germany. Identify Bank account in Germany.
DE\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{2}|DE\d{20}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1229
#A: Pavel Piskac
#D: International Bank Account Number (IBAN) Poland. Identify Bank account in Poland.
PL\d{2}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}|PL\d{26}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1230
#A: Mr Regex
#D: this regex was developed for command line parsing. it will get you one parameter per match while checking for strings enclosed in double quotes and double quotes escaping ("").
#D: -->you will have to add a trailing space to your input string for this regex to get your last param too 
(?<quote>["]?)(?<param>(?:\k<quote>{2}|[^"]+)*)\k<quote>[ ]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1231
#A: jonathan gotti
#D: just another email validation perl regexp. I tryed to follow as much as possible the RFC 3696 don't hesitate to report.
^(?:(?:[^@,"\[\]\x5c\x00-\x20\x7f-\xff\.]|\x5c(?=[@,"\[\]\x5c\x00-\x20\x7f-\xff]))(?:[^@,"\[\]\x5c\x00-\x20\x7f-\xff\.]|(?<=\x5c)[@,"\[\]\x5c\x00-\x20\x7f-\xff]|\x5c(?=[@,"\[\]\x5c\x00-\x20\x7f-\xff])|\.(?=[^\.])){1,62}(?:[^@,"\[\]\x5c\x00-\x20\x7f-\xff\.]|(?<=\x5c)[@,"\[\]\x5c\x00-\x20\x7f-\xff])|"(?:[^"]|(?<=\x5c)"){1,62}")@(?:(?:[a-z0-9][a-z0-9-]{1,61}[a-z0-9]\.?)+\.[a-z]{2,6}|\[(?:[0-1]?\d?\d|2[0-4]\d|25[0-5])(?:\.(?:[0-1]?\d?\d|2[0-4]\d|25[0-5])){3}\])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1232
#A: Bharath N
#D: This regular expression checks if the given string is a fraction. This does not allow 0 either in the numerator or the denominator.
^[0-9]*\/{1}[1-9]{1}[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1233
#A: Monique Hawkins
#D: Validation of a directory (not file) in UNC format
#D: Checks for \\server\share\subdir, where subdirs are optional.
#D: Share may have a $, but only at the end.
#D: Shares and subdir may have embedded spaces.
#D: String may optionally have a trailing slash.
^\\\\[\w-]+\\(([\w()-][\w\s()-]*[\w()-]+)|([\w()-]+))\$?(\\(([\w()-][\w\s()-]*[\w()-]+)|([\w()-]+)))*\\?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1234
#T: Fraction numbers
#A: Daniel Beck
#D: This regexp matches string which represents a fraction.
#D: This fraction can be in these forms:<br />
#D: 1. # or -# (not -0)<br />
#D: 2. #/# or -#/# (not -0/#)<br />
#D: 3. # #/# or -# #/# (not -0 #/#)
(?:-(?!0))?\d+(?:(?: \d+)?/\d+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1235
#A: Jim Daniels
#D: This regex is handy for matching *uncommented* COPY statements in COBOL programs, plus the name of the copy book member to be copied.  If you want to list out the COPY'ed source files contained in a COBOL program, this will do it.  Consider the text:
#D: Y2K    COPY CD10D-ERRORS.
#D: UARK01*COPY DPSSTATUSCOB      IN DPSLIB.
#D: UARK01 COPY INFO-BUFFER       .
#D: The COPY statements on the first and third line will be matched, but the second line will not match because of the COBOL comment character in column 7, which comments out the whole line, including the COPY statement, thus it is excluded from the compile.
# The real regex is:\N# (?<=\n......\s*\b)COPY\b\s*\b(\w*(-)?\w*)*\b\N\bCOPY\b\s*\b(\w*(-)?\w*)*\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1236
#A: Kevin Limperos
#D: Matches TCP port numbers from 0 to 65535. Other than '0', no leading 0's are accepted.
^(0|([1-9]\d{0,3}|[1-5]\d{4}|[6][0-5][0-5]([0-2]\d|[3][0-5])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1237
#A: Mikko Rasanen
#D: This Regular Expression matches all valid ip-patterns.
#D: 01.02.03.04 is not matched, as leading zeros is not valid a ip-pattern.
#D: 255.255.255.0 is not matched, as 255 is a broadcast identifier, and as such not allowed in ip-patterns.
^((25[0-4]|(2[0-4]|1[0-9]|[1-9]?)[0-9]\.){3}(25[0-4]|(2[0-4]|1[0-9]|[1-9]?)[0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1238
#A: Artur Faszczewski
#D: Matches LDAP path (AdsPath) in Active Directory. Modified version of regex which has been found in library.
#D: Accepts spaces after , character. Also \/ and \, sequences (escapes) in CN or OU name are accepted.
^((CN=(['\w\d\s\-\&\.]+(\\/)*(\\,)*)+,\s*)*(OU=(['\w\d\s\-\&\.]+(\\/)*(\\,)*)+,\s*)*(DC=['\w\d\s\-\&]+[,]*\s*){1,}(DC=['\w\d\s\-\&]+\s*){1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1239
#A: Ben Parish
#D: Validates Mastercard credit card
^5[1-5][0-9]{14}$\N# First character is 5\N# Second character is 1-5\N# Last 14 characters 0-9

#U: http://regexlib.com/REDetails.aspx?regexp_id=1240
#A: Judah Himango
#D: This is a Microsoft .NET/Mono regular expression that can be used to find the address of an embedded image inside an HTML email body.
#D: The address will be the 2nd group found in the match.
[ ]*=[ ]*[\"]*cid[ ]*:[ ]*([^\"<> ]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1241
#A: Diego Siebra Ferreira
#D: Path of files HTML and HTM
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.((html|HTML)|(htm|HTM))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1243
#A: Dimiter Dimitrow
#D: Maches small and big cyrillic letters. Using Unicode codes.
[\u0410-\u042F\u0430-\u044F]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1244
#A: Shahed Khan
#D: This Expression exclude any word/code from a sentence.
#D: To find out all the words except any specific codes/words use this. In this example we will exclude 50 and 00 and find all other words in the sentence.
#D: Example Text: "Ask me 50 00 times"
#D: Matches:Ask,me,times
#D: Here it ignores 50 and 00 and matches the other words. Modify according to your needs. I excluded 50 or 00.
\s?\b((?!\b50\b|\b00\b)\w*)\b\s?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1246
#A: Stewart Waldron
#D: used to match standard province codes in upper case.
^(^N[BLSTU]$)|(^[AMN]B$)|(^[BQ]C$)|(^ON$)|(^PE$)|(^SK$)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1247
#A: Mathieu van der Linden
#D: Expression to check Dutch phone numbers. Number must start with zero and number of digits should be 10. Different area and country codes are allowed.
^(([+]31|0031)\s\(0\)([0-9]{9})|([+]31|0031)\s0([0-9]{9})|0([0-9]{9}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1248
#A: Nathan Hill
#D: Australian phone numbers including Mobiles and common spacing used. This is used only to test normal contact numbers for residential purposes for example not information lines like 139999.
#D: Other Matching:
#D: 9999999999, 9999 9999, (09)99999999
^[0-9]{10}$|^\(0[1-9]{1}\)[0-9]{8}$|^[0-9]{8}$|^[0-9]{4}[ ][0-9]{3}[ ][0-9]{3}$|^\(0[1-9]{1}\)[ ][0-9]{4}[ ][0-9]{4}$|^[0-9]{4}[ ][0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1250
#A: Matthew Hartman
#D: Matches Canadian provincial codes. Similar to the one already posted but smaller, faster, and will correctly return the results in one match group rather than using several so it's much friendlier.
^(N[BLSTU]|[AMN]B|[BQ]C|ON|PE|SK)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1251
#A: pavel smetanin
#D: Parse CSV.
#D: First You need add to begin and to end of every line comma. Example. You need to get line like ,test,"test1",..., "testN", .And after You can parse line.
((?<=,\s*\")([^\"]*|([^\"]*\"\"[^""]*\"\"[^\"]*)+)(?=\"\s*,))|((?<=,)[^,\"]*(?=,))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1252
#A: William Robertson
#D: This will match numbers between 0 and 12.  The 0? at the beginning will allow "01" as a valid match.  This is useful for validation the month only component of a date part.
^(0?[1-9]|1[012])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1253
#A: William Robertson
#D: This will match numbers in the range 1-31.  This is useful for matching the day component of a datetime part.
^([12]?[0-9]|3[01])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1254
#A: William Robertson
#D: Will check to ensure the data is between 1850 and 2100.
^((18[5-9][0-9])|((19|20)[0-9]{2})|(2100))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1255
#A: Paul Stinton
#D: United Kingdom Postcode expression, modified for use with Microsoft.Net regular expression validations.
#D: ( see http://www.govtalk.gov.uk/gdsc/html/frames/PostCode.htm
#D: and
#D: http://www.govtalk.gov.uk/gdsc/schemas/bs7666-v2-0.xsd )
(^(((GIR)\s{0,1}((0AA))))|(([A-PR-UWYZ][0-9][0-9]?)|([A-PR-UWYZ][A-HK-Y][0-9][0-9]?)|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s{0,1}([0-9][ABD-HJLNP-UW-Z]{2})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1256
#A: bahador Ghahramani
#D: Australian mobile phone number
^04[0-9]{8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1257
#A: Mike Elkink
#D: This regular expression will match all occurances of "text" that occur outside of an anchor tag.
#D: It can be expanded to match occurances of "text" outside of other tags as well just by replacing "a" with whichever other tag you'd like.
#D: It matches "text" even if there is other text before or after it inside of the tag.
#D: Enjoy!
(?!<a.*)text(?!.*a>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1258
#A: Nate Man
#D: An expression to look for numbers that repeat 3 or more times in succession.
0{3,}|1{3,}|2{3,}|3{3,}|4{3,}|5{3,}|6{3,}|7{3,}|8{3,}|9{3,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1259
#A: netFiends.com 
#D: This validates an email address and only an email address. None of the <email> stuff, just user@email.whatever. Comments are more then welcome.
^(?:[\w]+[\&\-_\.]*)+@(?:(?:[\w]+[\-_\.]*)\.(?:[a-zA-Z]{2,}?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1260
#A: Rahul Goel
#D: This is a email validation group to fetch all the valid email address.
#D: If you want any expression then mail me at my id
#D: rahul_goel@kaleconsultants.com
(?<email>[a-zA-Z][a-zA-Z0-9-_.]+\@[a-zA-Z][a-zA-Z0-9-_]+\.(?(?=[a-zA-Z]{2}\.)([a-zA-Z0-9-_]{2}\.[a-zA-Z0-9-_]{2})|([a-zA-Z0-9-_]{2,3})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1261
#A: Matthew Frater
#D: Spanish NIE Number. Currently ignores case, but seems to work quite nicely.
^[a-zA-Z]{1}[-][0-9]{7}[-][a-zA-Z]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1263
#A: Douglas Hurst
#D: Modified version of Brian Bothwell's valid url submission. Eliminates a couple of the user discovered bugs, expands protocol recognition and considers trailing /
((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)\:\/\/([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@){0,1}((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]{2,5}[^:]){0,1}(\/(\s+|$|[a-zA-Z0-9\.\,\?\'\\\+&%\$#\=~_\-]+)){0,1})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1264
#T: Valid IP
#A: sswater shi
#D: match valid ip
\b(((?!\d\d\d)\d+|1\d\d|2[0-4]\d|25[0-5])(\b|\.)){4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1265
#A: Dave Zeddl
#D: Substitute that regex with null to clean up emails witch got replied 1000 times and are Fed up with a lot of >'s
#D: first i wanted to make a class out of (\n|^) (something like [\n^] - but that doesnt work :( )
(?<=(\n|^))(>\s*)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1266
#A: Maxim Paukov
#D: Parse html tags to extract tag names and parameters with parameter name/value pairs.
(?<TAG>\s*<(?<TAG_NAME>\w*)\s+(?<PARAMETERS>(?<PARAMETER>(?<PARAMETER_NAME>\w*)(=["']?)(?<VALUE>[\w\W\d]*?)["']?)+)\s*/?>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1267
#A: N Verlaan
#D: I just couldn't find any simple expression to check if an entered value is a jp(e)g.
#D: If you're using this to check for e.g. mp3, just use the following:
#D: (.*\mp3|.*\.MP3)
#D: This expression is not really stable, cause it will also match file.jpg.mp3 or stuff like that.
(.*\.jpe?g|.*\.JPE?G)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1268
#A: Shuang Gao
#D: validate comma separated key/value pair
^(\w+=[^\s,=]+,)*(\w+=[^\s,=]+,?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1269
#A: Alexander Pinsker
#D: Regular expression to fetch <key-value> pairs from the old-fashioned .ini files. Key and Value appears in form of named captures with whitespaces stripped on both ends.
((\s)*(?<Key>([^\=^\s^\n]+))[\s^\n]* # key part (surrounding whitespace stripped)\N\=\N(\s)*(?<Value>([^\n^\s]+(\n){0,1}))) # value part (surrounding whitespace stripped)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1270
#A: Chris Linseman
#D: matches uk postcodes according to specifications found at: http://www.govtalk.gov.uk/gdsc/html/noframes/PostCode-2-1-Release.htm
^((([A-PR-UWYZ](\d([A-HJKSTUW]|\d)?|[A-HK-Y]\d([ABEHMNPRVWXY]|\d)?))\s*(\d[ABD-HJLNP-UW-Z]{2})?)|GIR\s*0AA)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1271
#A: Lucian Toza
#D: matches a date in dd/mm/yyyy format
^(((((0[1-9])|(1\d)|(2[0-8]))\/((0[1-9])|(1[0-2])))|((31\/((0[13578])|(1[02])))|((29|30)\/((0[1,3-9])|(1[0-2])))))\/((20[0-9][0-9])|(19[0-9][0-9])))|((29\/02\/(19|20)(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1272
#A: Lucian Toza
#D: matches a double number 
^(0|(-?(((0|[1-9]\d*)\.\d+)|([1-9]\d*))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1273
#A: Chris Strolia-Davis
#D: Thanks to Ariel Merrell, as well as the folks who developed the javascript location object for some of the inspiration for this.
#D: This was intended primarily to help break down the parts of a URL for easier processing, and not as a validator.  Please make sure the following options are met
#D: - .Net RE
#D: - Case Insensitive
#D: - Ignore pattern whitespace
#D: - Explicit Capture.
(?<url>\N(?<protocol>\Nhttp(s?)\N|\Nftp\N)\:\/\/\N(?<host>\N(?<hostname>\N(\N(?<subdomain>\N([a-z]\w*\.)*[a-z]\w*\N)\.\N)?\N(\N(?<ip>\N(\d{1,3}\.){3}\d{1,3}\N)\N|\N(\N(?<org>\N[a-z]\w*\N)\.\N(?<domain>\N[a-z]{2,3}\N)\N)\N)\N)?\N(\:\N(?<port>\N\d+\N)\N)?\N)\N(?<path>\N(?<directory>\N(\/.*)*\/\N)?\N(?<file>\N[a-z]\w*\.\w+\N)?\N)?\N(\#\N(?<hash>\N[^?\n\r]+\N)\N)?\N(\?\N(?<search>\N(\&?[^\=\n\r]+\=[^\&\n\r]*)+\N)\N)?\N)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1274
#A: Trevor Braun
#D: I needed an expression to extract measurements from text to extract steel sizes from product descriptions, and I came up with this.  It will only match on measurements that have complete dimensions (i.e. measurements with foot and inch marks in the positions you'd expect them).  My personal experience required that I also be a little lax and allow measurements such as: .125 (for wall thicknesses and sheet metal thicknesses) with no inch marks.  You can accomplish this by including:
#D: |(?<Decimal>\.\d{3}\"*)
#D: to the end of the expression
#D: Hope it helps you.
(?:(?:(?<Feet>\d+)[ ]*\'){0,1}[ ]*(?<WholeInches>\d*(?![/\w])){0,1}(?:[ ,\-]){0,1}(?<Fraction>\d*\/\d*){0,1}(?<Decimal>\.\d*){0,1}\")|(?:(?<Feet>\d+)[ ]*\'[ ]*){1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1275
#A: Juan Miguel Huertas Delgado
#D: Prueba
e(vi?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1276
#A: Juan Miguel Huertas Delgado
#D: Prueba
e(vi?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1277
#A: Juan Miguel Huertas Delgado
#D: Prueba
e(vi?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1278
#A: Juan Miguel Huertas Delgado
#D: Prueba
(vi(v))?d

#U: http://regexlib.com/REDetails.aspx?regexp_id=1279
#A: Iván Santana
#D: Patrón para el esquema de las galas de los Oscars.
^(atuvwdxyzad|abcefdghijd|almnodpqrsd|aß?ded???µd?p?sd)(ktuvwdxyzad|kbcefdghijd|klmnodpqrsd|kß?ded???µd?p?sd)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1280
#A: dennis connelly
#D: reg
(?=^.{6,10}$)(?=.*\$)(?=.*[a-z])(?=.*[A-Z])(?=.*[!~@#$%^&*()_+}{":;'?/>.<,])(?!.*\s).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1281
#A: Andreas Feiden
#D: Password with minimum 1 Letter (A-Za-z), 1 Number (0-9) and Special Character (\W). It doesn't matter the charaters position. See the Mathching Examples.
#D: Question? Write an Email to me.
^(([A-Za-z]+[^0-9]*)([0-9]+[^\W]*)([\W]+[\W0-9A-Za-z]*))|(([A-Za-z]+[^\W]*)([\W]+[^0-9]*)([0-9]+[\W0-9A-Za-z]*))|(([\W]+[^A-Za-z]*)([A-Za-z]+[^0-9]*)([0-9]+[\W0-9A-Za-z]*))|(([\W]+[^0-9]*)([0-9]+[^A-Za-z]*)([A-Za-z]+[\W0-9A-Za-z]*))|(([0-9]+[^A-Za-z]*)([A-Za-z]+[^\W]*)([\W]+[\W0-9A-Za-z]*))|(([0-9]+[^\W]*)([\W]+[^A-Za-z]*)([A-Za-z]+[\W0-9A-Za-z]*))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1282
#A: Peter Petrus
#D: Searches for number greater than 0 with thousand delimiter as space, comma or period.
(^(\d+)$)|(^(\d{1,3}[ ,\.](\d{3}[ ,\.])*\d{3}|\d{1,3})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1283
#A: Isaac Triguero Velázquez
#D: This accepts html's tables, with rows and colums.
#D: Acepta tablas Html, con sus respectivas filas y columnas.
<table>(<tr>((<td>([A-Za-z0-9])*</td>)+)</tr>)*</table>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1284
#A: Isaac Triguero Velázquez
#D: it accepts Granada's numbers telephone.
#D: Acepta números de teléfono de Granada (españa)
^(958([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+)|(958-([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+([0-9])+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1285
#A: Isaac Triguero Velázquez
#D: C++ prototipes.
#D: It is necessary to write a \s before a variable or function
#D: identifier.
(\s)*(int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*(\s)*(\()(\s)*((int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*((\s)*[,](\s)*(int|void|float|char|double|string)((\s)|(\*))*(\&?)(\s)+([a-z])([a-z0-9])*)*)?(\s)*(\))(\s)*;

#U: http://regexlib.com/REDetails.aspx?regexp_id=1286
#A: Ittayy Ophir
#D: Return all comment lines (starts with //) and regions (serounded by /* */) as well as compiler arguments (#) in C# code
(?:/\*[\w\W]*?\*/|//[^\n]*?$|\#[^\n]*?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1287
#A: Manny Calaveras
#D: Regular expression to recognise messages formed with "beeps" of IBM mainboards, when the computer makes the Power On Self Test. "b" means "short beep", and "l" means "long beep".
^((l((ll)|(b)|(bb)|(bbb)))|(bb*))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1288
#A: David Conorozzo
#D: For credit card numbers from MC, Visa, Amex, Diners/CarteBlanche, Discover/Novus, Enroute, and JCB.  Does as much as I feel is possible using regex (doesn't do MOD 10).  Javascript safe.
^3(?:[47]\d([ -]?)\d{4}(?:\1\d{4}){2}|0[0-5]\d{11}|[68]\d{12})$|^4(?:\d\d\d)?([ -]?)\d{4}(?:\2\d{4}){2}$|^6011([ -]?)\d{4}(?:\3\d{4}){2}$|^5[1-5]\d\d([ -]?)\d{4}(?:\4\d{4}){2}$|^2014\d{11}$|^2149\d{11}$|^2131\d{11}$|^1800\d{11}$|^3\d{15}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1289
#A: himraj love
#D: i've merged two regular expression those i found on this site. thanks to the owners "Aleš Potocnik and
#D: Andrew Lee ". i used their expression to make mine. this expression finds the URL/Hyperlink with the HTML tags.
<a[a-zA-Z0-9 ="'.:;?]*(href=[\"\'](http:\/\/|\.\/|\/)?\w+(\.\w+)*(\/\w+(\.\w+)?)*(\/|\?\w*=\w*(&\w*=\w*)*)?[\"\'])*(>[a-zA-Z0-9 ="'<>.:;?]*</a>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1290
#A: himraj love
#D: you can find all the hyperlinks with their caption and attributes. in other words you can find anchors with their attributes and label or value.
<a [a-zA-Z0-9 ="'.:;?]*href=*[a-zA-Z0-9 ="'.:;>?]*[^>]*>([a-zA-Z0-9 ="'.:;>?]*[^<]*<)\s*/a\s*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1291
#T: Accurate IP address verification
#A: Vassilis Petroulias
#D: Accurate IP address verification...
#D: Each numeric part of an IP address must be between 0 and 255. All patterns I have seen on the net cover this range but they allow leading zeros. The valid cases are:
#D: * 0
#D: * 1, 10-19 and 100-199 aka 1[0-9]{0,2}
#D: * 2 and 20-29 aka 2[0-9]?
#D: * 200-249 aka 2[0-4][0-9]
#D: * 250-255 aka 25[0-5]
#D: * 3-9 and 30-99 aka [3-9][0-9]?
((0|1[0-9]{0,2}|2[0-9]?|2[0-4][0-9]|25[0-5]|[3-9][0-9]?)\.){3}(0|1[0-9]{0,2}|2[0-9]?|2[0-4][0-9]|25[0-5]|[3-9][0-9]?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1292
#T: Australian postal code verification
#A: Vassilis Petroulias
#D: Accurate Australian postal code verification.
#D: Australia has 4-digit numeric postal codes with the following state based specific ranges.
#D: ACT: 0200-0299 and 2600-2639.
#D: NSW: 1000-1999, 2000-2599 and 2640-2914.
#D: NT: 0900-0999 and 0800-0899.
#D: QLD: 9000-9999  and 4000-4999.
#D: SA: 5000-5999.
#D: TAS: 7800-7999  and 7000-7499.
#D: VIC: 8000-8999 and 3000-3999.
#D: WA: 6800-6999 and 6000-6799.
(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1293
#T: Canadian postal code format verification
#A: Vassilis Petroulias
#D: Accurate Canadian postal code format verification.
#D: The format of a Canadian postal code is LDL DLD where L are alpha characters and D are numeric digits. But there are some exceptions. The letters D, F, I, O, Q and U never appear in a postal code because of their visual similarity to 0, E, 1, 0, 0, and V respectively. In addition to avoiding the six "forbidden" letters W and Z also do not appear as the first letter of a postal code (at least not at present).
([ABCEGHJKLMNPRSTVXY][0-9][ABCEGHJKLMNPRSTVWXYZ])\ ?([0-9][ABCEGHJKLMNPRSTVWXYZ][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1294
#T: German postal code verification (UPDATED)
#A: Vassilis Petroulias
#D: Accurate German postal code verification.
#D: Germany has 5-digit numeric postal codes. The expression evaluates a postal code within state based specific ranges.
((0[13-7]|1[1235789]|[257][0-9]|3[0-35-9]|4[0124-9]|6[013-79]|8[0124-9]|9[0-5789])[0-9]{3}|10([2-9][0-9]{2}|1([2-9][0-9]|11[5-9]))|14([01][0-9]{2}|715))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1295
#T: UK postal code format verification
#A: Vassilis Petroulias
#D: Accurate UK postal code format verification.
#D: UK postal codes have two parts. The right part is formatted as DLL (L:letter D:digit) and the left part has six alternative formats: LD, LDL, LDD, LLD, LLDL and LLDD. There is only one exception to these formats: GIR 0AA.
(([A-Z]{1,2}[0-9][0-9A-Z]?)\ ([0-9][A-Z]{2}))|(GIR\ 0AA)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1296
#T: VAT Numbers format verification (DE, EE, EL, PT) 
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Estonia, Germany, Greece, Portugal) with support for optional member state definition.
((EE|EL|DE|PT)-?)?[0-9]{9}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1297
#T: VAT Numbers format verification (FI, HU, LU, MT, SI)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Finland, Hungary, Luxemburg, Malta, Slovenia) with support for optional member state definition.
((FI|HU|LU|MT|SI)-?)?[0-9]{8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1298
#T: VAT Numbers format verification (PL, SK)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Poland, Slovakia) with support for optional member state definition.
((PL|SK)-?)?[0-9]{10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1299
#T: VAT Numbers format verification (IT, LV)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Italy, Latvia) with support for optional member state definition.
((IT|LV)-?)?[0-9]{11}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1300
#T: VAT Numbers format verification (SE)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Sweden) with support for optional member state definition.
(SE-?)?[0-9]{12}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1301
#T: VAT Numbers format verification (BE)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Belgium) with support for optional member state definition.
(BE-?)?0?[0-9]{9}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1302
#T: VAT Numbers format verification (CY)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Cyprus) with support for optional member state definition.
(CY-?)?[0-9]{8}[A-Z]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1303
#T: VAT Numbers format verification (CZ)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Czech Republic) with support for optional member state definition.
(CZ-?)?[0-9]{8,10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1304
#T: VAT Numbers format verification (DK)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Denmark) with support for optional member state definition.
(DK-?)?([0-9]{2}\ ?){3}[0-9]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1305
#T: VAT Numbers format verification (ES)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Spain) with support for optional member state definition.
(ES-?)?([0-9A-Z][0-9]{7}[A-Z])|([A-Z][0-9]{7}[0-9A-Z])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1306
#T: VAT Numbers format verification (FR)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (France) with support for optional member state definition.
(FR-?)?[0-9A-Z]{2}\ ?[0-9]{9}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1307
#A: Randy Pinsky
#D: This will validate a rural route address against the United States Postal Service (USPS) rural route standard.
(\bR(\.|)R(\.|)|RURAL\s{0,}(ROUTE|RT(\.|)))\s{0,}\d{1,}(,|)\s{1,}\bBOX\s{0,}\d

#U: http://regexlib.com/REDetails.aspx?regexp_id=1308
#T: VAT Numbers format verification (GB)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (United Kingdom) with support for optional member state definition.
(GB-?)?([1-9][0-9]{2}\ ?[0-9]{4}\ ?[0-9]{2})|([1-9][0-9]{2}\ ?[0-9]{4}\ ?[0-9]{2}\ ?[0-9]{3})|((GD|HA)[0-9]{3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1309
#T: VAT Numbers format verification (IE)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Ireland) with support for optional member state definition.
(IE-?)?[0-9][0-9A-Z\+\*][0-9]{5}[A-Z]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1310
#T: VAT Numbers format verification (LT)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (Lithuania) with support for optional member state definition.
(LT-?)?([0-9]{9}|[0-9]{12})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1311
#T: VAT Numbers format verification (NL)
#A: Vassilis Petroulias
#D: VAT Numbers format verification (The Netherlands) with support for optional member state definition.
(NL-?)?[0-9]{9}B[0-9]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1312
#A: John Pequeno
#D: US 10-Digit Phone number matching.
#D: *Requires Area Code
#D: *Brackets optional, supports: () and []
#D: *seperators optional, supports: - and .
#D: *whitespace optional
^\s*([\(]?)\[?\s*\d{3}\s*\]?[\)]?\s*[\-]?[\.]?\s*\d{3}\s*[\-]?[\.]?\s*\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1313
#A: himraj love
#D: this Expression use conditional expression to eveluate parameter after "HREF" and executes the yes/no part of the expression. this expression finds <A>  TAG and returns value of "HREF" and the value hold in between <a></a> tags. the expression returns maximum 3 sub matches. the first match returns the "HREF" tag value and rest of two holds the value of the tag alternativly. so after executing the expression you need to itarate through all the submatches and need to find out non NULL tags to get value.
#D: the output of the above matching expamples would be like this :
#D: 1: "/url?sa=p&pref=ig&pval=2&q=http://www.google.co.in/ig%3Fhl%3Den"
#D: 2:[Personalized Home]
#D: 3:[] or NULL
#D: the output of the second matching example would be like this.
#D: 1:/advanced_search?hl=en
#D: 2:[] or NULL
#D: 3:[Advanced Search]
<a.*?href=(.*?)(?((?:\s.*?)>.*?</a>)(?:(?:\s.*?)>(.*?)</a>)|(?:>(.*?)</a>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1314
#A: Faruk Brbovic
#D: Checks domain names. This will match all of the valid domains. It will accept TLD's that are from 2 to 6 characters. You can not have more then one dash or period next to each other. Also it will not let you have dashes at end of the words.
^(([a-zA-Z0-9]+([\-])?[a-zA-Z0-9]+)+(\.)?)+[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1315
#A: mr. hand
#D: Email validation for domain or IP
^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1317
#A: Mark Gardner
#D: Matches standard rgb syntax for web colors
^rgb\(([01]?\d\d?|2[0-4]\d|25[0-5])\,([01]?\d\d?|2[0-4]\d|25[0-5])\,([01]?\d\d?|2[0-4]\d|25[0-5])\)$ #Matches standard web rgb pattern

#U: http://regexlib.com/REDetails.aspx?regexp_id=1318
#A: Deon Pretorius
#D: hhmmsscc hh=hours [00-24], mm = minutes[00-59], ss=seconds [00-59] where cc is a hundredth of a second [00-99]
^([01]\d|2[0123])([0-5]\d){2}([0-99]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1319
#A: Scott Mulcahy
#D: Validates MS FQDNs.  1) Entire fqdn less than 255 chars. 2) Host and domain names may contain an underscore.  3) 1st char can be a number.  4) No part can be all numbers. 5) Allows any TLD
#D: Works in C#.  Based on Remi Sabourin's regex
(?=^.{1,254}$)(^(?:(?!\d+\.)[a-zA-Z0-9_\-]{1,63}\.?)+(?:[a-zA-Z]{2,})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1320
#A: Scott Mulcahy
#D: Based on Remi Sabourin pattern.  Adds total length validation.  Like Remi's this allows a part to be all numbers.  To prevent all numbers just add (?!\d+\.) between (^(?: and ([a-z-A-Z0-9]
(?=^.{1,254}$)(^(?:[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9]\.?)+(?:[a-zA-Z]{2,})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1321
#A: Colin Bowern
#D: Matches GUIDs defined in MSDN library (http://msdn2.microsoft.com/en-us/library/96ff78dc.aspx)
^[A-Fa-f0-9]{32}$|({|\()?[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}(}|\))?$|^({)?[0xA-Fa-f0-9]{3,10}(, {0,1}[0xA-Fa-f0-9]{3,6}){2}, {0,1}({)([0xA-Fa-f0-9]{3,4}, {0,1}){7}[0xA-Fa-f0-9]{3,4}(}})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1324
#A: Phil Cogbill
#D: Matches the HTML "target" attribute.  I had an editor that edited pages but whe wysiwyg editor would break on link that had a target to say "_top" or another window.  So I needed an expression to match the target attribute on links in HTML.
target[ ]*[=]([ ]*)(["]|['])*([_])*([A-Za-z0-9])+(["])*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1326
#A: Patrick McElrath
#D: Password validator that validates the password contains 1 letter (regardless of case) and 1 number
^(([a-zA-Z]+\d+)|(\d+[a-zA-Z]+))[a-zA-Z0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1328
#A: Sergiy Lavryk
#D: uri
((((http[s]?|ftp)[:]//)([a-zA-Z0-9.-]+([:][a-zA-Z0-9.&%$-]+)*@)?[a-zA-Z][a-zA-Z0-9.-]+|[a-zA-Z][a-zA-Z0-9]+[.][a-zA-Z][a-zA-Z0-9.-]+)[.](com|edu|gov|mil|net|org|biz|pro|info|name|museum|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ax|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)([:][0-9]+)*(/[a-zA-Z0-9.,;?'\\+&%$#=~_-]+)*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1329
#A: Jason Hirst
#D: This Regular Expression allows the user to enter a value to represent the imperial measurement of Inches.
#D: The expression won't allow and value of 12 or above (otherwise it would be a foot!), and has the option of having a decimal value upto 2 decimal places.
#D: My first Regular Expression so go easy on me!! :)
^((0?[1-9])|((1)[0-1]))?((\.[0-9]{0,2})?|0(\.[0-9]{0,2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1330
#A: Chris Blankenship
#D: Password filter that matches the NSA Password filter DLL ENPASFILT.DLL.
#D: At least 1 small-case letter
#D: At least 1 Capital letter
#D: At least 1 digit
#D: At least 1 special character
#D: Length should be between 8-30 characters.
#D: Spaces allowed
#D: The sequence of the characters is not important.
(?=^.{8,30}$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+}{"":;'?/>.<,]).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1333
#T: Tags
#A: ggggg
#D: retrieve any tag and its content
(< *balise[ *>|:(.|\n)*>| (.|\n)*>](.|\n)*</balise *>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1335
#T: US Telephone
#A: Mike Willbanks
#D: Basically I didn't like any of the regular expressions that were available because they all failed at parsing them into variables correctly...  This regular expression gives you the full match and then the 3 sections of digits seperately.
^\(?([0-9]{3})\)?[\s\.\-]*([0-9]{3})[\s\.\-]*([0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1336
#T: E-Mail Address by RFC2822 and RFC1035
#A: Matthew
#D: This will match any valid RFC2822 e-mail address typed into web forms.  If does not support comments, display name, or line folding.  It does support quoted-strings in the local-part and domains by the RFC 1035 and proper ip addresses.  It does relax the RFC1035 rule of not allowing numbers as the first character of a domain name (since they do exist in real life)
^([A-Za-z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^\_\`\{\}\|\~]+|"([\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|\\[\x0-\x7F])*")(\.([A-Za-z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^\_\`\{\}\|\~]+|"([\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|\\[\x0-\x7F])*"))*@([A-Za-z0-9]([A-Za-z0-9\-]*[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9\-]*[A-Za-z0-9])?)*|(1[0-9]{0,2}|2([0-4][0-9]?|5[0-4]?|[6-9])?|[3-9][0-9]?)(\.(0|1[0-9]{0,2}|2([0-4][0-9]?|5[0-5]?|[6-9])?|[3-9][0-9]?)){2}\.(1[0-9]{0,2}|2([0-4][0-9]?|5[0-4]?|[6-9])?|[3-9][0-9]?))$

#%#% COMMENTED OUT: THIS ONE IS TOO BIG TO RUN
#U: http://regexlib.com/REDetails.aspx?regexp_id=1337
#T: Scripture
#A: Jamie Scott
#D: Bibe Books, Chapters and versus.
#([1-3]{0,1}\n{0,1}\s{0,1}\n{0,1}[a-zA-Z]+\s{1}\n{0,1}\d{1,2}:{1}\s{0,1}\d{1,2}){1}(,{1}\n{0,1}\s{0,1}\d{1,2}({1}\s{0,9}\n{0,1}\d{1,2}){0,9}){0,9}(-{1}\s{0,1}\n{0,1}\d{1,2}){0,9}(,{1}\s{0,1}\d{1,2}){0,9}(;\s{0,1}\n{0,1}\d{1,2}\s{0,1}:{1}\s{0,1}\d{1,2}(-{1}\s{0,9}\n{0,1}\d{1,2}){0,9}(,{1}\s{0,9}\d{1,2}(-{1}\s{0,9}\n{0,1}\d{1,2}){0,9}){0,9}){0,9}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1338
#T: BB Code Extractor
#A: DJ Broadbent
#D: Capture bulletin board-style "code" segments (see examples) from text with one or two optional parameters. Returns with four backreferences: the name of the tag ($1), the two parameters ($2, $3), and the text found between the matching tags ($4). Tag names must consist only of word characters (letters, numbers, and underscore), while parameters can also include @ : . = # % & ? - and /. Works with zero, one, or two arguments, separated from the tag name by an equals sign ( = ) and from each other by a semi colon( ; ).
\[(\w*)(?:(?:=([\w:=@#%\&\?\-\/\.]+?))?(?:;([\w:=@#%\&\?\-\/\.]+?))?)?\](.*?)\[\/\1\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1339
#T: E-mail Address Validator
#A: DJ Broadbent
#D: Matches only email addresses with domain names, including all special domain types and foreign country extensions. The address part (before the '@' symbol) must consist of letters, numbers, underscore, hyphen (-), and period (.). Captures the address portion ($1), subdomain ($2), domain name ($3), and domain extention ($4). Word of warning, if an address with a domain of the form 'somebritishdomain.co.uk' is entered, the 'co' will be returned as the domain name, and 'somebritishdomain' as the subdomain.
^([\w\-\.]+)@([a-zA-Z0-9\-]{1,63})\.((?:aero|biz|co(?:op|m)|edu|gov|in(?:fo|t)|m(?:useum|il)|n(?:ame|et)|org|pro|travel)|(?:a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnorsuvxyz]|d[ejkmoz]|e[ceghrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortvyz]|t[cdfghjklmnoprtvwz]|u[agkmsyz]|v[aceginu]|w[fs]|y[et]|z[amw]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1345
#T: Match XML 'Time' Format
#A: Geoff Granum
#D: Matches a literal string which conforms to the XML Schema Part 2 'Time' format, which is to say on of:
\A((?:[01]{0,1}\d)|(?:[2][0123])):([012345]\d):([012345]\d)(.\d{1,3})?([Z]|(?:[+-]?(?:[01]{0,1}\d)|(?:[2][0123])):([012345]\d))\Z

#U: http://regexlib.com/REDetails.aspx?regexp_id=1346
#T: Match XML Date Type
#A: Geoff Granum
#D: Matches a literal XML Date string: See http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#date
\A-?(\d{4,})-(\d{2})-(\d{2})([Z]|(?:[+-]?(?:[01]\d)|(?:[2][0123])):(?:[012345]\d))\Z

#U: http://regexlib.com/REDetails.aspx?regexp_id=1348
#T: Percent Expression
#A: Mike Willbanks
#D: Basically this matches into variables for percentages..  It allows as much whitespace before and after the expression.  $1 = Percent before decimal, $2 = percentage after decimal inc decimal, $3 = percentage after decimal. Disallowed anything past 99.99999 repeating percent.  No negative percents either.  Easy to implement but I do not need it.
^\s*(\d{0,2})(\.?(\d*))?\s*\%?\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1359
#T: Password Matching Expression
#A: Didier Marin
#D: Password matching expression. Password must consists of at least 6 characters and not more than 20 characters. Password must contain only letters and digits. Password must contain at least 2 digits and at least 2 letters.
^(?=.*[a-zA-Z].*[a-zA-Z])(?=.*\d.*\d)[a-zA-Z0-9]{6,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1360
#T: Repeatetive numbers
#A: Idan Ten'e
#D: This text matches repeatetive numbers in a string. All numbers must be seperated with a space.
( |^)(\S++).*? \2( |$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1361
#T: Spam Control
#A: Tuncay BAŞ
#D: this spam kontrol Fw[number] blocked. 
^[a-zA-Z]{1,3}\[([0-9]{1,3})\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1362
#T: Email Extractor
#A: Tuncay BAŞ
#D: içinde @ isareti ve en az 1 tane "." olmayanlar kabul edilmez.
([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1363
#T: URL Test
#A: David Barker
#D: I needed a regex for validating URLs, couldn't find a suitable one, so wrote this, with comments! It matches any valid web URL (Address or IP, with or without protocol), including optional port number, directory path, filname.extension and any paramater pairs.  Hope it helps, even if just to understand expressions easier!
(?#WebOrIP)((?#protocol)((http|https):\/\/)?(?#subDomain)(([a-zA-Z0-9]+\.(?#domain)[a-zA-Z0-9\-]+(?#TLD)(\.[a-zA-Z]+){1,2})|(?#IPAddress)((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])))+(?#Port)(:[1-9][0-9]*)?)+(?#Path)((\/((?#dirOrFileName)[a-zA-Z0-9_\-\%\~\+]+)?)*)?(?#extension)(\.([a-zA-Z0-9_]+))?(?#parameters)(\?([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?(?#additionalParameters)(\&([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?)*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1364
#T: IPv4 Address Match
#A: John Higgs
#D: Perl regexp that matches IPv4 addresses. Does not match 0.0.0.0 or 255.255.255.255 and does not allow leading zero's. This can be changed by removing '(?!0+\.0+\.0+\.0+$)(?!255\.255+\.255\.255$)' from the start of the regexp.
^(?!0+\.0+\.0+\.0+$)(?!255\.255+\.255\.255$)(1?\d\d?|2[0-4]\d|25[0-5])\.(1?\d\d?|2[0-4]\d|25[0-5])\.(1?\d\d?|2[0-4]\d|25[0-5])\.(1?\d\d?|2[0-4]\d|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1365
#A: Vijay Joshi
#D: this pattern validates email address. it allows (1)numeric characters and underscore(_) in an address.(2)numeric characters in domain name. it doesn't match user names with a dot(.). doesn;t allow username starting or ending with @ underscore. they can be used in between
^[^_][a-zA-Z0-9_]+[^_]@{1}[a-z]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1366
#T: Email
#A: Vijay Joshi
#D: Email-it is an extension to my previous expression for Validating email address.it has the following additional features: 1-username cant begin with a periods(.) and underscore(_) 2-maximum 2 periods(.) can be used in a username(previous xprsn didn't allowed any)(remember gmail which allows periods)
^[^_.]([a-zA-Z0-9_]*[.]?[a-zA-Z0-9_]+[^_]){2}@{1}[a-z0-9]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1367
#T: java class
#A: Lammert Westerhoff
#D: Matches any legal java class (inclusive package name).
^[a-zA-Z]([a-zA-Z0-9])*([\.][a-zA-Z]([a-zA-Z0-9])*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1368
#T: Email
#A: Zachary Frenzel
#D: Validates a semi colon delimited list of email addresses.  Appropriate for use with .NET Web.Mail.MailMessage fields (To, BCC, CC)
^([\w]+@([\w]+\.)+[a-zA-Z]{2,9}(\s*;\s*[\w]+@([\w]+\.)+[a-zA-Z]{2,9})*)$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=1369
#T: FTP: Easily Parsed LIST Format (EPLF)
#A: Mikkel Jakobsen
#D: This is a regular expression for parsing the Easily Parsed LIST Format (EPLF) for the FTP protocol's LIST command. It is based on the description of the format by D. J. Bernstein on http://cr.yp.to/ftp/list/eplf.html ... Remember to set Explicit Capture and Multiline options for this expression. The regex captures the following groups: "id": unique identifier for file/directory, "modified": when the file was last modified, specified in number of seconds, real time, since the UNIX epoch at the beginning of 1970 GMT, "retr": if not empty, a RETR command can be performed on this file, "size": size of file in bytes, "cwd": if not empty, a CWD command can be performed on this directory, "up": if specified, the client may use SITE CHMOD command to change the UNIX permission bits of this file (current permission bits are captured in this group), "name": The name of the file/directory
^\+(((i(?'id'.*?))|(m(?'modified'\d+))|(?'retr'r)|(s(?'size'\d+))|(?'cwd'\/)|(up(?'up'\d{3}))),)*\t(?'name'.*?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1370
#T: PHP Function Regex
#A: Ivik Injerd
#D: I needed a regex to parse PHP functions, so I made it and here it is. It will not validate with array variables as the function arguments.
^\s*\w+\s*\((\s*(("|')([^\3]+|\\\3)\3|\$?[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]|[0-9]*)\s*,?)*\s*\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1371
#T: IsNumeric
#A: Mitch Freed
#D: This regex will validate the given string is numeric
^(?:(?:[+\-]?\$?)|(?:\$?[+\-]?))?(?:(?:\d{1,3}(?:(?:,\d{3})|(?:\d))*(?:\.(?:\d*|\d+[eE][+\-]\d+))?)|(?:\.\d+(?:[eE][+\-]\d+)?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1372
#T: Chemical Symbol
#A: Guy Bruneau
#D: Chemical symbols of the periodic table from atomic number 1 to 118.
^((?-i)A[cglmrstu]|B[aehikr]?|C[adeflmorsu]?|D[bsy]|E[rsu]|F[emf]?|G[ade]|H[efgos]?|I[nk]?|Kr?|L[airu]|M[dgnot]|N[abdeiop]|Os?|P[abdmortu]?|R[abefghnu]|S[bcegimnr]?|T[abcehil]|U(u[bhopqst])?|V|W|Xe|Yb?|Z[nr])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1373
#T: Chemical Elements symbols
#A: Guy Bruneau
#D: Chemical elements of the periodic table from 1 to 118.
^((?-i)A[cglmrstu]|B[aehikr]?|C[adeflmorsu]?|D[bsy]|E[rsu]|F[emf]?|G[ade]|H[efgos]?|I[nk]?|Kr?|L[airu]|M[dgnot]|N[abdeiop]|Os?|P[abdmortu]?|R[abefghnu]|S[bcegimnr]?|T[abcehil]|U(u[bhopqst])?|V|W|Xe|Yb?|Z[nr])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1374
#T: RFC URL
#A: r4cc00n
#D: A pretty decent URL matching expression.  I've followed most RFC guidelines, so it'll match most anything ya throw at it (And wont match what it's not supposed to).  If you see any problems with it, please email me so I can make the appropriate changes :)
(([\w]+:)?//)?(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1375
#T: Self Close Valid HTML Tags
#A: Iain Dooley
#D: This pattern searches for tags in HTML that should be self closing but currently aren't and self closes them. This is useful if you are doing some HTML parsing.
<(?<!\\?|\\/)([^>]*)>\\r*\\n<\\/(?=br|hr|img|input|link|param)[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1376
#T: ISO 8601 Date Parser
#A: David Walker
#D: Parses out the elements of a date in ISO 8601 format.
(?<Date>(?<Year>\d{4})-(?<Month>\d{2})-(?<Day>\d{2}))(?:T(?<Time>(?<SimpleTime>(?<Hour>\d{2}):(?<Minute>\d{2})(?::(?<Second>\d{2}))?)?(?:\.(?<FractionalSecond>\d{1,7}))?(?<Offset>-\d{2}\:\d{2})?))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1377
#T: HTML Entity
#A: Rich Cariens
#D: Catches all HTML Entities and their codes.
&.*?;

#U: http://regexlib.com/REDetails.aspx?regexp_id=1378
#T: HTML/XML Tags
#A: Rich Cariens
#D: Simple regex that seems to catch most if not all HTML and XML tags.  Not very useful if you need attributes of the tag, like the href in an anchor, but it is useful if you just want to strip tags or find out what the tags are in a doc.
<(.|\n)+?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1379
#T: IRC Message
#A: Jerry
#D: Simple regular expression for creating an IRC client. This will parse the raw octet stream into message segments and groups that make it easy to build a client.
(?<raw_message>\:(?<source>((?<nick>[^!]+)![~]{0,1}(?<user>[^@]+)@)?(?<host>[^\s]+)) (?<command>[^\s]+)( )?(?<parameters>[^:]+){0,1}(:)?(?<text>[^\r^\n]+)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1380
#T: MSSQL Connection String
#A: Samuel Neff
#D: Matches a MSSQL Connection String used with ADO.NET as long as it follows the standard form server;database;uid;pwd.  If the connection string is in a different order or contains other parts between these parts, then a match will not be found.
server=([^;]*);\s*database=([^;]*);\s*uid=([^;]*);\s*pwd=([^;]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1381
#T: MSSQL Connection String with Named Subgroups
#A: Samuel Neff
#D: Matches a MSSQL Connection String used with ADO.NET as long as it follows the standard form server;database;uid;pwd and returns the components as named sub-groups. If the connection string is in a different order or contains other parts between these parts, then a match will not be found.
server=(?<server>[^;]*);\s*database=(?<database>[^;]*);\s*uid=(?<user>[^;]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1382
#T: Number Range
#A: Vinny Rosso
#D: Matches a range "X-X" or "XXX-XXX" or a single number "X" but does not match X- or XXX-
(^\b\d+-\d+$\b)|(^\b\d+$\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1383
#T: MAC Address Validator
#A: Fernando Nunes
#D: <b>MAC Address Validator</b><br><br>Works with ":" linux style separator or "-" windows style separator and groups each octet to the corresponding group.<br>Quite extensive, but functional.<br><br>Any suggestions, feel free to comment.<br><br>
^(?:(?'1'[0-9a-fA-F]{2})(?:\:)(?'2'[0-9a-fA-F]{2})(?:\:)(?'3'[0-9a-fA-F]{2})(?:\:)(?'4'[0-9a-fA-F]{2})(?:\:)(?'5'[0-9a-fA-F]{2})(?:\:)(?'6'[0-9a-fA-F]{2}))$|^(?:(?'1'[0-9a-fA-F]{2})(?:\-)(?'2'[0-9a-fA-F]{2})(?:\-)(?'3'[0-9a-fA-F]{2})(?:\-)(?'4'[0-9a-fA-F]{2})(?:\-)(?'5'[0-9a-fA-F]{2})(?:\-)(?'6'[0-9a-fA-F]{2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1384
#T: MAC Address Catcher
#A: Fernando Nunes
#D: <b>MAC Address Catcher</b><br><br>Catches MAC Addresses on any string.<br>Works with ":" linux style separator or "-" windows style separator and groups each octet to the corresponding group.<br>Quite extensive, but functional.<br><br>Any suggestions, feel free to comment.<br><br>
(?:(?'1'[0-9a-fA-F]{2})(?:\:)(?'2'[0-9a-fA-F]{2})(?:\:)(?'3'[0-9a-fA-F]{2})(?:\:)(?'4'[0-9a-fA-F]{2})(?:\:)(?'5'[0-9a-fA-F]{2})(?:\:)(?'6'[0-9a-fA-F]{2}))|(?:(?'1'[0-9a-fA-F]{2})(?:\-)(?'2'[0-9a-fA-F]{2})(?:\-)(?'3'[0-9a-fA-F]{2})(?:\-)(?'4'[0-9a-fA-F]{2})(?:\-)(?'5'[0-9a-fA-F]{2})(?:\-)(?'6'[0-9a-fA-F]{2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1385
#T: Last Capital
#A: Nick Sabbe
#D: Gets all text before the last capital (no whitespace allowed).
^(?<BeforeLastCapital>([^\s]*))(?<LastCapital>[A-Z])(?<AfterLastCapital>([^A-Z])*)$   #Last Capital

#U: http://regexlib.com/REDetails.aspx?regexp_id=1386
#T: Percentage Match
#A: Amir Raza
#D: It matches % value from 0 - 100. The two decimal places are used.
^100$|^\d{0,2}(\.\d{1,2})? *%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1387
#T: Hex Colors
#A: Dean Dal Bozzo
#D: Matches hex color values with or without the '#' sign. 
^#?([0-9a-fA-f]{6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1388
#T: User Input Validation / Malicious Code / SQL Injections Prevention
#A: Chris Grafix
#D: This regular expression will catch malicious code from user input to prevent SQL injections. Instead of matching the allowed characters it matches the malicious code without blocking out the most common user data entries like e-mail, first and last names, phone numbers and so on. Check your data with this regex before you write it's values into the database for TRUE. If your data validates as TRUE, that means  you have unwanted malicious  code in your variables. Output a userfriendly error message without writing the data into the database. If your data validates as FALSE, that means your data is safe. After validating my data with the regex, I still run my data through a database escape function like PHP's mysql_real_escape_string($value) for extra security. By using this Regex you most likely won't end up with irritating backslashed \data\ in your database and why would you want to have safe "escaped malicious code" in your database anyway? And don't forget that escape functions like the one mentioned earlier do not always guarantee data safety. For example, it does not catch the semicolon SQL injection like "; DELETE FROM users".  Remember to always validate your user input or use data cast to make sure that when you expect a numeric value, you will end up with a numeric value and so on.
^([a-zA-Z0-9@. `'"-]*(union select|UNION SELECT|exec sp_|EXEC SP_|drop table|DROP TABLE|drop database|DROP DATABASE|drop schema|DROP SCHEMA|delete from|DELETE FROM|\` |\' |\"|;|=| = |<|>|\'\+\'|\' \+\ '|\*|%|--)+[a-zA-Z0-9@. -'`";=<>+*%--]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1390
#T: Pattern For WebCrawler to find contact details
#A: Kuleen Upadhyaya
#D: This is useful for finding contact numbers, or mobile numbers or phone numbers while crawling websites.
[\+]{0,1}(\d{10,13}|[\(][\+]{0,1}\d{2,}[\13)]*\d{5,13}|\d{2,6}[\-]{1}\d{2,13}[\-]*\d{3,13})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1391
#T: Pattern to find Anchor Tag in a web page
#A: Kuleen Upadhyaya
#D: This pattern is a slight modification in pattern submitted by Jacek Sompel. Using this tag one can also match anchor tags not having ' (single quote) or " (double quote) in href. This is useful for web crawler for crawling all links in a web page.
<a[\s]+[^>]*?href[\s]?=[\s\"\']*(.*?)[\"\']*.*?>([^<]+|.*?)?<\/a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1392
#T: Get XML tag from string
#A: Denny Love
#D: This will find any XML within a string starting with the <?xml header and ending with the closing root tag. Replace </note> with your closing root tag. (use singleline and case insensitive) - I use this to pull xml written in a web document.
<\?xml.*</note>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1393
#T: Numeric week and year (WW/YYYY)
#A: Bob Yexley
#D: This pattern can be used to validate a numeric week (between 01 and 52) and four digit year (valid years between 1000 and 2999) separated by a slash in the form of WW/YYYY.
^(([1-4][0-9])|(0[1-9])|(5[0-2]))\/[1-2]\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1394
#T: Whole or quarter hours
#A: Joepsel
#D: Maximum 2 digits followed by an optional comma and a valid quarter to be used in time calculations. I wasn't satisfied with the quarter regex posted earlier by Bob Kranson.
^\d{1,2}((,)|(,25)|(,50)|(,5)|(,75)|(,0)|(,00))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1395
#T: International Phone Pattern
#A: Vincent Faller
#D: This pattern matches most international phone numbers using various versions of phone number patters.
^(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*([\s-./\\])?([0-9]*)([\s-./\\])?([0-9]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1396
#T: Password Overdue 
#A: Michael Arnwine
#D: Pattern must match 8-12 character, numeric, and symbol combination 1) at least one uppercase letter, 2) at least on lowercase letter, 3) at least one number, 4) and one special charater, that is specified in advanced.  The first character must be a character upper or lower, and no spaces allowed. 
^(?=[a-zA-Z])(?=.*[0-9])(?=.*[#\$_])(?=.*[A-Z])(?=.*[a-z])(?!.*[^a-zA-Z0-9#\$_])(?!.*\s).{8,12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1397
#T: img
#A: Jan Filipowski
#D: It searches for a IMG tag and group information about source of image.
<img[^>]* src=\"([^\"]*)\"[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1398
#T: Password
#A: Myle Ott
#D: Matches passwords.
^([ a-zA-Z0-9`~!@#$%^&*()-_=+\\|\]}\[{'";:/?.>,<])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1399
#T: XML Schema DateTime
#A: Samuel Neff
#D: Matches an XML Schema DateTime value defined in http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html#dateTime.  Breaks individual parts into subgroups:  1 - year, 2 - month, 3 - day, 5 - hour, 6 - min, 7 - sec, 8 - fractional second, 9 - complete timezone, could be Z, 10 - timezone sign, 11 - tz hour, 12 - tz minutes.
^(-?\d{4})-(\d{2})-(\d{2})(T(\d{2}):(\d{2}):(\d{2})(\.\d+)?(Z|(\+|-)(\d\d):(\d\d))?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1400
#T: File Upload
#A: Paul Griffin
#D: Allows a file with the format <drive><directory>yyyy-mm-dd-DailyUpload.csv
^(?<Drive>([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))(?<Year>\d{4})-(?<Month>\d{1,2})-(?<Day>\d{1,2})(?<ExtraText>.*)(?<Extension>.csv|.CSV)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1401
#T: Date in MMDDYYYY
#A: Ben D
#D: This was made for use in javascript to detect MMDDYYYY formatted text.  It tests all valid dates, including 31 vs 30 days in a month and the 28 vs 29 leap year rules which exclude centennial years not divisible by 400 and years not divisible by 4.
^((((((0[13578])|(1[02]))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(3[01])))|(((0[469])|(11))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(30)))|((02)[\s\.\-\/\\]?((0[1-9])|(1[0-9])|(2[0-8]))))[\s\.\-\/\\]?(((([2468][^048])|([13579][^26]))00)|(\d\d\d[13579])|(\d\d[02468][^048])|(\d\d[13579][^26])))|(((((0[13578])|(1[02]))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(3[01])))|(((0[469])|(11))[\s\.\-\/\\]?((0[1-9])|([12][0-9])|(30)))|((02)[\s\.\-\/\\]?((0[1-9])|([12][0-9]))))[\s\.\-\/\\]?(((([2468][048])|([13579][26]))00)|(\d\d[2468][048])|(\d\d[13579][26])|(\d\d0[48]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1402
#T: Metric Measurement
#A: Sean Duggan
#D: Used for matching measurement expressions with or without scientific notation, with or without a list of known prefixes, and with an option component of a unit. Known limitations include that a measurement term cannot lack a prefix and also start with a letter that could be mistaken for a prefix. For instance, "5 m" is parsed as 5 with a prefix of m, not 5 with a base prefix and a unit of m.
(?<value>([\+-]?((\d*\.\d+)|\d+))(E[\+-]?\d+)?)( (?<prefix>[PTGMkmunpf])?(?<unit>[a-zA-Z]+)?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1403
#T: ISO Date Format
#A: Paul Ward
#D: Regex to match the ISO Date Format. The time part is optional, including the seconds, as are all of the delimiters (although they must be non-numeric).  Each part of the date will be returned as a selection e.g. \1 will contain the Year, \2 will contain the Month.
^(\d{4})\D?(0[1-9]|1[0-2])\D?([12]\d|0[1-9]|3[01])(\D?([01]\d|2[0-3])\D?([0-5]\d)\D?([0-5]\d)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1404
#T: U.S. Street Address
#A: Eve McGivern
#D: This is meant to work in PHP where SQL injection can be a problem. It is meant to understand a typical address entry, while avoiding strange characters like ?, +, and ;.
^[0-9]{1,}([[:space:]]{1})[A-Za-z0-9/.\'\-]{1,}([[:space:]]{1})?[A-Za-z0-9/.\'\-]{1,}]?([[:space:]]{1})?[A-Za-z0-9/.\'\-]{1,}]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1405
#T: Allow quotes in email address
#A: Dilip Choudhary
#D: Allow quotes in email address. Its Allow to enter quotes after first char and before @.
^\w+(([-+']|[-+.]|\w+))*@\w+([-.]\w+)*\.\w+([-.]\w+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1406
#T: Price
#A: Steven Smith
#D: Should match prices with or without a dollar sign.
^[$]?[0-9]*(\.)?[0-9]?[0-9]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1407
#T: data time validator
#A: Sina Salek
#D: it will match a valid date & time string which looks like this : 2006-12-31 23:59:59
^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-2]) ([0-1][0-9]|2[0-4]):([0-4][0-9]|5[0-9]):([0-4][0-9]|5[0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1408
#T: Disallow HTML code
#A: Doug Gainey
#D: I use this one as a simple way to disallow HTML code in form fields.  It simply doesn't allow the use of the < and > characters.  It does, however, allow the entities for these characters (< and >), which will print the characters to the screen appropriately, if needed.  I'm sure there are more complex expressions to block HTML, but none more concise.
^[^<^>]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1409
#T: GuildWars Nickname Regex
#A: Rene Schindhelm
#D: This is one of my first expressions. I'm not really used to regex, but I'm trying my best. Hope some of you guys might have some use of this regex. Don't forget to check the length of the string! The string has to be shorter than 20 characters to be valid! The string also has to start with a capitalized letter, followed by any other letters. Any parts of the name seperated by a space (e.g. Adva Kouta Jr) have to start with another capitalized letter. -- Regards ;)
^(^[A-Z]{1}([a-z]?)+)+([\s][A-Z]{1}([a-z]?)+)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1410
#T: One lower-case US ASCII Letter
#A: C. Brendan Enrick
#D: Will match with any single lower-case letter.
^[a-z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1411
#T: Dotted Quad (Decimal)
#A: John Patton
#D: Regex for IP Address validation. 
^(([1-9]?\d|1\d\d|2[0-4]\d|25[0-5]).){3}([1-9]?\d|1\d\d|2[0-4]\d|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1412
#T: Check filename extensions
#A: Dusan Hlavaty
#D: Matches a file name to be either a .wma or .mp3 file. This can be used to check file uploads to make sure they are of a certain type. Substitute letters where appropriate for specific file types. This is a better solution (I think) than #343. Works in Javascript and C#.
^.*(([^\.][\.][wW][mM][aA])|([^\.][\.][mM][pP][3]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1413
#T: replace html tags with valid xhtml
#A: Mauricio Venanzoni
#D: Finds all <input attrib1="value1" attrib2="value2" ... > tags. You can make it end with "/>" for xhtml compatibility replacing with the expression "<input $2 />". You can repeat it with other tags like <img /> or <br / >
(<input )(.*?)(>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1414
#T: Almost RFC2822 Compliant Email Address Check
#A: Daniel
#D: Validates an RFC 2822 email address, except does not allow most punctuation and non-ascii alphanumeric characters. Also does not take length requirements into account. Allows domain name and IP addresses, but ensures that the IP address entered is valid.
^(?:(?#local-part)(?#quoted)"[^\"]*"|(?#non-quoted)[a-z0-9&+_-](?:\.?[a-z0-9&+_-]+)*)@(?:(?#domain)(?#domain-name)[a-z0-9](?:[a-z0-9-]*[a-z0-9])*(?:\.[a-z0-9](?:[a-z0-9-]*[a-z0-9])*)*|(?#ip)(\[)?(?:[01]?\d?\d|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d?\d|2[0-4]\d|25[0-5])){3}(?(1)\]|))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1415
#A: bamerl
#D: Matches any unsigned floating point number/numeric string.
^\d+(\.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1416
#T: Matching urls in free text
#A: Sean Harrop
#D: A regular expression which allows me to find strings of text floating around in free text that are in fact URLs. I need to tag these as <url>www.bmj.com/advice</url>. The problem has been allowing special characters in the url, but not mixing them up with genuine punctuation marks at the end of the url in the text-e.g. '.' or '?' or ) or ';' etc)
((www|http)(\W+\S+[^).,:;?\]\} \r\n$]+))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1418
#T: mm/dd/yyyy hh:MM DateTime, time obligatory
#A: Wouter Hibma
#D: Based on Michael Ash's expression. This regex will validate only datetime, not only date or only time. Dates are in the DD/MM/YYYY HH:mm format and validated for months, number of days in a month and leap years (29/2) Date field can be separated by matched periods(.), dashes(-) or forward slashes(/). Year range 1900-9999 Time is in 24 hour military format (HH:mm:SS), from 00:00:00 to 23:59:59, where hours and minutes fields are required, including leading 0 for hours less than 10. Datetime is the above date and time formats separated by a space, with the date first (DD/MM/YYYY HH:mm) !IMPORTANT NOTE: your regex engine must support lookaheads and named groups to use this expression
(?n:^(?=\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0?[1-9]|1\d|2[0-8])(?<sep>[/.-])(?<month>0?[1-9]|1[012])\2(?<year>(19|[2-9]\d)\d{2})(?:(?=\x20\d)\x20|$))?(?<time>([01]\d|2[0-3])(:[0-5]\d){1})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1419
#T: mm/dd/yyyy hh:MM DateTime, time obligatory
#A: Wouter Hibma
#D: Based on Michael Ash's expression. This regex will validate only datetime, not only date or only time. Dates are in the DD/MM/YYYY HH:mm format and validated for months, number of days in a month and leap years (29/2) Date field can be separated by matched periods(.), dashes(-) or forward slashes(/). Year range 1900-9999 Time is in 24 hour military format (HH:mm:SS), from 00:00:00 to 23:59:59, where hours and minutes fields are required, including leading 0 for hours less than 10. Datetime is the above date and time formats separated by a space, with the date first (DD/MM/YYYY HH:mm) !IMPORTANT NOTE: your regex engine must support lookaheads and named groups to use this expression
(?n:^(?=\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0?[1-9]|1\d|2[0-8])(?<sep>[/.-])(?<month>0?[1-9]|1[012])\2(?<year>(19|[2-9]\d)\d{2})(?:(?=\x20\d)\x20|$))?(?<time>([01]\d|2[0-3])(:[0-5]\d){1})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1420
#T: Any use phone number with support for extensions
#A: Paul
#D: Matches any properly entered US phone number (area code, first three, last four) plus support for extensions (optional)
\(?\s*(?<area>\d{3})\s*[\)\.\-]?\s*(?<first>\d{3})\s*[\-\.]?\s*(?<second>\d{4})\D*(?<ext>\d*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1421
#T: UK Phone # with International option
#A: Andrew McCormick
#D: UK phone number formats with optional international prefix, optional spaces, dashes and brackets. Brackets mandatory for regional/capital leading zero if included in international form. Based on "Mh" UK London & Regional. (Thanks Mh for the groundwork).  New to Regex so I'm sure it can be done more elegantly... but it works. 
^\s*\(?((\+0?44)?\)?[ \-]?(\(0\))|0)((20[7,8]{1}\)?[ \-]?[1-9]{1}[0-9]{2}[ \-]?[0-9]{4})|([1-8]{1}[0-9]{3}\)?[ \-]?[1-9]{1}[0-9]{2}[ \-]?[0-9]{3}))\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1422
#T: Simple Time
#A: Naji mohamad
#D: matches simple time 12 hours 59 minutes (am or pm) format 
^\s*(?i:)((1[0-2])|(0[1-9])|([123456789])):(([0-5][0-9])|([123456789]))\s(am|pm)\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1423
#T: version number validation
#A: venugopal
#D: This simple regular expression comes handy when we need to validate a version number of a document. The version numbers can have decimals upto two decimal places
^((\d)?(\d{1})(\.{1})(\d)?(\d{1})){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1424
#T: UK Driver License
#A: Stephen Jones
#D: Matches the UK Drivers License format as laid down by the DVLA / dvla.    See http://www.govtalk.gov.uk/gdsc/html/frames/default.htm    Matches:       1. Must be 16 characters  2. First 5 characters are alphanumeric.  3. Next 6 characters must be numeric  4. Next 3 characters are alphanumeric  5. Last 2 characters are alpha  6. Second character of numeric section can only be 0, 1, 5 or 6.  7. Fourth and fifth characters of numeric section must be in the range 01 to 31.
[A-Z0-9]{5}\d[0156]\d([0][1-9]|[12]\d|3[01])\d[A-Z0-9]{3}[A-Z]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1425
#T: Ultimate email, e-mail
#A: James DeLong
#D: Matches any valid e-mail... Kind of large, but worth it to those who really care............email, e-mail, e mail
#F: i
^([a-z0-9])(([\-.]|[_]+)?([a-z0-9]+))*(@)([a-z0-9])((([-]+)?([a-z0-9]+))?)*((.[a-z]{2,3})?(.[a-z]{2,6}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1426
#T: UserName
#A: Jacques Houbart
#D: Pattern for user name input form validation <br />Expression pour tester la validité des noms propres lors de la validation des formulaires.  <br />Syntaxe: <br />Les particules (de della, von, op, …..) peuvent être en minuscule  <br />Après les particules doit apparaître un nom, écrit en minuscule, mais avec la première lettre en majuscule. <br />Les éléments du nom peuvent être séparés par un seul espace, un moins ou une apostrophe
^([a-z]{1,6}[ ']){0,3}([ÉÈÊËÜÛÎÔÄÏÖÄÅÇA-Z]{1}[éèëêüûçîôâïöäåa-z]{2,}[- ']){0,3}[A-Z]{1}[éèëêüûçîôâïöäåa-z]{2,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1427
#T: Valid integer
#A: Garry Shutler
#D: Checks that the input is a positive integer in the range 0-32767
^(3276[0-7]|327[0-5]\d|32[0-6]\d{2}|3[01]\d{3}|[12]\d{4}|[1-9]\d{3}|[1-9]\d{2}|[1-9]\d|\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1428
#T: connection string password
#A: Eugen Anghel
#D: This pattern matches the password from a SQL Server connection string.
(pwd|password)\s*=\s*(?<pwd>('(([^'])|(''))+'|[^';]+))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1429
#T: OAGIS Phone
#A: rob livermore
#D: The OAGIS standard has a format for phone and fax as +###(###)#######. For details on standard see the open applications group.
^\+[0-9]{1,3}\([0-9]{3}\)[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1430
#T: UK Telephone
#A: VB
#D: This regex matches UK phone numbers in multiple formats, including those that begin with the international dial code and optionally bracket the leading zero of the area code. To match a number must begin with either +44 or 0 and have 9-12 following digits.
(((\+44)? ?(\(0\))? ?)|(0))( ?[0-9]{3,4}){3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1431
#T: IPV4 and IPV6 address
#A: John Wilkins
#D: Matches all IPV6 and IPV4 addresses.  Doesn't limit IPV4 to just values of 255. Doesn't allow IPV6 compression.
([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}|(\d{1,3}\.){3}\d{1,3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1432
#T: header 2 anchor
#A: Nocturnator
#D: Easy way to transform header tag to its local referer. I use it to make TOC after reading headers.<br><b> <h# id="identifier">Caption</h#> -> #~<a href="#identifier">Caption</a> </b><br>There is stored original heading's level in output.
"{(<h)([1-6])(.id=\")(.+?\")(.+?)(</h[1-6])}",'\\2~<a href="#\\4\\5</a'

#U: http://regexlib.com/REDetails.aspx?regexp_id=1433
#T: First Middle Last Names and Suffix
#A: Michael Yourshaw
#D: Matches parts of a name. Last name only; first and last names; first, middle, and last names; first, middle, and last names and suffix; first and last names and suffix. This is very permissive so it's good for isolating name parts but doesn't validate whether a string is a reasonable name.
(^\s*(?<firstname>(?!st\.?\s+)\w+\S*)\s+(?<middlename>(?!st\.?\s+)\w+\S*)\s+(?<lastname>(st\.?\s+)?\w+[^, ]*)(?:(,| ))*\s+(?<suffix>\w+\S*)\s*$)|(^\s*(?<firstname>(?!st\.?\s+)\w+\S*)\s+(?<lastname>(st\.?\s+)?\w+\S*)\s+(?<suffix>(jr)|(sr)|(ii)|(iii)||(iv)|(v)|(vi)|(vii)|(viii))\s*$)|(^\s*(?<firstname>(?!st\.?\s+)\w+\S*)\s+(?<middlename>(?!st\.?\s+)\w+\S*)\s+(?<lastname>(st\.?\s+)?\w+\S*)\s*$)|(^\s*(?<firstname>(?!st\.?\s+)\w+\S*)\s+(?<lastname>(st\.?\s+)?\w+\S*)\s*$)|(^\s*(?<lastname>(st\.?\s+)?\w+\S*)\s*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1434
#T: US phone numbers
#A: Miroslav Spassov
#D: Matches US phone numbers with area code inclosed in parents...
^\(?\d{3}?\)?\-?\d{3}?\-?\d{4}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1435
#T: Manage img
#A: Cordisco Massimo
#D: This pattern can intercept img like < img src="src1" alt="alt1"> or < img alt="alt1" src="src1"> or < img src="src1"> or < img src="src1" width=3 height=4> then values of src can be found in $5 or $8, the value of tag alt can be found in $3 or $10.
<img[\s]+[^>]*?((alt*?[\s]?=[\s\"\']+(.*?)[\"\']+.*?)|(src*?[\s]?=[\s\"\']+(.*?)[\"\']+.*?))((src*?[\s]?=[\s\"\']+(.*?)[\"\']+.*?>)|(alt*?[\s]?=[\s\"\']+(.*?)[\"\']+.*?>)|>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1436
#T: OS Grid/Tile Reference
#A: Dan Snellgrove
#D: This pattern validates a British Ordnance Survey Grid/Tile/Sheet Reference Number. Information on the range of possible values can be found here: http://www.ordnancesurvey.co.uk/oswebsite/gps/information/coordinatesystemsinfo/guidetonationalgrid/page17.html. Grid Ref, Tile Ref, Sheet Ref.
^(H(P|T|U|Y|Z)|N(A|B|C|D|F|G|H|J|K|L|M|N|O|R|S|T|U|W|X|Y|Z)|OV|S(C|D|E|G|H|J|K|M|N|O|P|R|S|T|U|W|X|Y|Z)|T(A|F|G|L|M|Q|R|V)){1}\d{4}(NE|NW|SE|SW)?$|((H(P|T|U|Y|Z)|N(A|B|C|D|F|G|H|J|K|L|M|N|O|R|S|T|U|W|X|Y|Z)|OV|S(C|D|E|G|H|J|K|M|N|O|P|R|S|T|U|W|X|Y|Z)|T(A|F|G|L|M|Q|R|V)){1}(\d{4}|\d{6}|\d{8}|\d{10}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1437
#T: Img Src Attribute
#A: Steven Pena
#D: This pattern matches an image url attribute of an img html tag.  It searches for the src attribute and grabs the value as a grouped match - "imgSrc".
src=(?:\"|\')?(?<imgSrc>[^>]*[^/].(?:jpg|bmp|gif|png))(?:\"|\')?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1438
#T: Simple App Relative Path
#A: C. Brendan Enrick
#D: Matches the app relative path of a file. This will work for relative paths of URLs. Not very complicated but will work to do basic validation.
^~/[0-9a-zA-Z_][0-9a-zA-Z/_-]*\.[0-9a-zA-Z_-]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1439
#T: Grabbing title tag from web pages
#A: Cordisco Massimo
#D: This pattern could intercept the value of the tag title in every web pages, it could be found in $1.
<title>+(.*?)</title>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1440
#T: Grab tag meta from web pages
#A: Cordisco Massimo
#D: This pattern intercept meta tags, the name can be found in $1 the content value in $2.
<meta[\s]+[^>]*?name[\s]?=[\s\"\']+(.*?)[\s\"\']+content[\s]?=[\s\"\']+(.*?)[\"\']+.*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1441
#T: IP Tables
#A: Sean McIlvenna
#D: The goal of my regular expression is to allow me to break apart IP Table log files so that I can build a basic web front-end to allow me to view the traffic on the network. The MAC address is optional, because the way that this firewall works, is by providing the MAC address when the outbound address is not available.
^(?<Date>.+\s\d+\s\d+\:\d+\:\d+).+\:.+\:(?<Traffic>.+)\:(?<Rule>.+)\:IN\=(?<InboundInterface>.+)\sOUT\=(?<OutboundIntercace>.*?)\s(?:MAC\=(?<MacAddress>.+)\s|)SRC\=(?<Source>.+)\sDST\=(?<Destination>.+)\sLEN\=.+TOS\=.+PROTO\=(?<Protocol>.+)\sSPT\=(?<SourcePort>.+)\sDPT\=(?<DestinationPort>.+)\s.+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1442
#T: Action Replay code
#A: Jason Thompson
#D: Matches valid Action Replay codes for the Gamecube and Playstation 2
(([A-Z0-9]{4}-){2}[A-Z0-9]{5}\s?)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1443
#T: Find <h1> Tags
#A: Syrprize
#D: This regex find valid <h1-6> html tags
<h([1-6])>([^<]*)</h([1-6])>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1444
#T: Israel Cell Phone 
#A: Boris
#D: This is a pattern for cell phone of main israel cell phone companies
^0?(5[024])(\-)?\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1445
#T: Spaces in between words
#A: Hemant Singh
#D: There are situations like a text box accepting city names with total length not exceeding 20.
#D: City Names can be either one word , eg. Philadelphia
#D: Or it can be two words separated by a space, eg. New York
#D: 1. This expression allows alphabets and spaces in between.
#D: 2. Also the total length of city name should not exceed upper limit of 20 characters.
^[a-zA-Z\s]{1,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1446
#T: finds websites
#A: AMAMH
#D: finds any website consists of 3 strings like www.yahoo.com or even http://www.yahoo.com but doesn't math websites like rapidshare.de 
(http://)?[a-zA-Z]+\.[a-zA-Z0-9]+\.[a-zA-Z]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1447
#T: Decimal Number
#A: Randall Woodman
#D: Matches any decimal number up to two digits after the decimal place or more than two if the value is zero.  A leading + / - is allowed. Based on the regex by Steven Smith
^[-+]?\d*(?:\.\d{0,2}0*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1448
#T: Email validation
#A: Philippe Benthien
#D: This is a robust email validation: the username part conforms with RFC 2822 (for instance, emails with tags ("+") are validated).
#D: The host part is checked for valid subdomains and its TLD is checked against all the 243 countries codes and the 14 ICANN'sTLDs. The host part also accepts IP with or without brackets.
^((([a-z]|[0-9]|!|#|$|%|&|'|\*|\+|\-|/|=|\?|\^|_|`|\{|\||\}|~)+(\.([a-z]|[0-9]|!|#|$|%|&|'|\*|\+|\-|/|=|\?|\^|_|`|\{|\||\}|~)+)*)@((((([a-z]|[0-9])([a-z]|[0-9]|\-){0,61}([a-z]|[0-9])\.))*([a-z]|[0-9])([a-z]|[0-9]|\-){0,61}([a-z]|[0-9])\.(af|ax|al|dz|as|ad|ao|ai|aq|ag|ar|am|aw|au|at|az|bs|bh|bd|bb|by|be|bz|bj|bm|bt|bo|ba|bw|bv|br|io|bn|bg|bf|bi|kh|cm|ca|cv|ky|cf|td|cl|cn|cx|cc|co|km|cg|cd|ck|cr|ci|hr|cu|cy|cz|dk|dj|dm|do|ec|eg|sv|gq|er|ee|et|fk|fo|fj|fi|fr|gf|pf|tf|ga|gm|ge|de|gh|gi|gr|gl|gd|gp|gu|gt| gg|gn|gw|gy|ht|hm|va|hn|hk|hu|is|in|id|ir|iq|ie|im|il|it|jm|jp|je|jo|kz|ke|ki|kp|kr|kw|kg|la|lv|lb|ls|lr|ly|li|lt|lu|mo|mk|mg|mw|my|mv|ml|mt|mh|mq|mr|mu|yt|mx|fm|md|mc|mn|ms|ma|mz|mm|na|nr|np|nl|an|nc|nz|ni|ne|ng|nu|nf|mp|no|om|pk|pw|ps|pa|pg|py|pe|ph|pn|pl|pt|pr|qa|re|ro|ru|rw|sh|kn|lc|pm|vc|ws|sm|st|sa|sn|cs|sc|sl|sg|sk|si|sb|so|za|gs|es|lk|sd|sr|sj|sz|se|ch|sy|tw|tj|tz|th|tl|tg|tk|to|tt|tn|tr|tm|tc|tv|ug|ua|ae|gb|us|um|uy|uz|vu|ve|vn|vg|vi|wf|eh|ye|zm|zw|com|edu|gov|int|mil|net|org|biz|info|name|pro|aero|coop|museum|arpa))|(((([0-9]){1,3}\.){3}([0-9]){1,3}))|(\[((([0-9]){1,3}\.){3}([0-9]){1,3})\])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1449
#T: CAS Number
#A: Jarlath
#D: This is a more robust regex for matching Chemical Abstract Service (CAS) Numbers. This distinguishes between CAS numbers and other identifiers (e.g. EC number).
\b[1-9]{1}[0-9]{1,5}-\d{2}-\d\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1450
#T: CEP Brazil
#A: Valter Henrique Junior
#D: CEP do Brasil com separação ex: 99999-999
^\d{5}(\-)(\d{3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1451
#T: Time
#A: Amita
#D: Its a very flexible time entry regular expression. It can accept all valid combination of time entry
^([0-1]?\d|2[0-3])([:]?[0-5]\d)?([:]?|[0-5]\d)?\s?(A|AM|P|p|a|PM|am|pm|pM|aM|Am|Pm)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1452
#T: horizontal smileys
#A: Kenneth Chan
#D: Matches all common horizontal smileys facing from left to right in its own "word". To match horizontal smileys in the reverse direction (.ie D:) see horozontal smileys (reverse).
(\A|\s)(((>[:;=+])|[>:;=+])[,*]?[-~+o]?(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+|[@#!OoPpXxZS$03])|>?[xX8][-~+o]?(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+))(\Z|\s)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1453
#T: horizontal smileys (reverse)
#A: Kenneth Chan
#D: Matches all common horizontal smileys from right to left in its own "word".
(\A|\s)((\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+|[@#!OoXxZS$0])[-~+o]?[,*]?((<[:;=+])|[<:;=+])|(\)+|\(+|\}+|\{+|\]+|\[+|\|+|\\+|/+|>+|<+|D+)[-~+o]?[xX8]<?)(\Z|\s)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1454
#T: vertical smileys
#A: Kenneth Chan
#D: Matches all common vertical smileys in a "word".
(\A|\s)[({\[]*([\^\*\-@#$%<>XxVvOo0ZzTt+'¬](_+|\.)[\^\*\-@#$%<>XxVvOo0ZzTt+'¬]|\._\.|[\^\*@#$%<>XxVOo0ZTt']\-[\^\*@#$%<>XxVOo0ZTt']|>>|><|<<|o[O0]|[O0]o)[)}\]]*[;.?]*['"]?(\Z|\s)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1455
#T: Strip leading characters from currency
#A: Christopher Vrooman
#D: For currency: strips out leading non-numeric characters. Numbers may use a comma for the decimal place, but cannot use anything for the thousands separator.
([^,0-9]\D*)([0-9]*|\d*\,\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1456
#T: USA Phone
#A: Rob Eberhardt
#D: Requires area code.  Allows extension.  Any common US format works.  If you prefer not to require area code, use this:   ^(\d)?[ ]*[\(\.\-]?(\d{3})?[\)\.\-]?[ ]*(\d{3})[\.\- ]?(\d{4})[ ]*(x|ext\.?)?[ ]*(\d{1,7})?$
^(\d)?[ ]*[\(\.\-]?(\d{3})[\)\.\-]?[ ]*(\d{3})[\.\- ]?(\d{4})[ ]*(x|ext\.?)?[ ]*(\d{1,7})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1457
#T: Image File Extension
#A: Steven Smith
#D: This expression should work to validate that an uploaded file's extension is either jpg, gif, or png.
.*(\.[Jj][Pp][Gg]|\.[Gg][Ii][Ff]|\.[Jj][Pp][Ee][Gg]|\.[Pp][Nn][Gg])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1458
#T: US Phone Number
#A: Jason Kittredge
#D: US Phone number with optional leading 1, optional area code, and optional delimiters (hyphen, space or period)
^1?[-\. ]?(\(\d{3}\)?[-\. ]?|\d{3}?[-\. ]?)?\d{3}?[-\. ]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1459
#T: sip and sips
#A: bacon
#D: The sip/sips syntax is from http://www.ietf.org/rfc/rfc3261.txt?number=3261, seems the pattern works fine, but I worry about the performance
^(sip|sips)\:\+?([\w|\:?\.?\-?\@?\;?\,?\=\%\&]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1460
#T: Strings for IndustryType/Functional Areas
#A: Amol Pande
#D: This validates for Strings for Various Industry Types / Functional Areas. Useful in case of  Validation for diferent Inputs Related.This RegEx allows  following characters as seprator_ - / & and white spaces
^([a-zA-Z0-9])+(([a-zA-Z0-9\s])+[_-//&a-zA-Z0-9]([a-zA-Z0-9\s])+)*([a-zA-Z0-9])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1461
#T: Israeli Cellular Number
#A: Roni Biran
#D: This Regex validate all israeli cellular companies numbers (050,052,054,057)
^[0][5][0]-\d{7}|[0][5][2]-\d{7}|[0][5][4]-\d{7}|[0][5][7]-\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1462
#T: IP validator
#A: snabbi
#D: It matches an IP address only in the correct format. There was a previous regex send which matches 192.168.01.2 but this code won't match preceeding 0's
^(?:(?:1\d?\d|[1-9]?\d|2[0-4]\d|25[0-5])\.){3}(?:1\d?\d|[1-9]?\d|2[0-4]\d|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1463
#T: Russian phone numbers
#A: bask
#D: pattern for processing phone (phones) numbers (Russia)
((8|\+7)-?)?\(?\d{3,5}\)?-?\d{1}-?\d{1}-?\d{1}-?\d{1}-?\d{1}((-?\d{1})?-?\d{1})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1464
#T: Strip Domain from URL
#A: Adil Berdai
#D: I was looking for a long time for a simple regex to strip the domain name from a long url or to Get rid of directories and pages. I found a simple one that I wanted to share. If you have http://www.google.com/products/bob?gmail.ckj it will return only http://www.google.com getting rid of all the other parts of the url
http://[^/]*/

#U: http://regexlib.com/REDetails.aspx?regexp_id=1465
#T: Extract "src" attr from EMBED tag (for Flash)
#A: Tim Denby
#D: This pattern will extract the "src" attribute of an EMBED tag.  I created it for extracting the URI of an Adobe Flash animation from some HTML, but of course it would work for more general purposes.  Don't forget to turn on case insensitivity.
(?<=<embed\s[^<>]*?src\s*?=\s*?\x22)[^<>]*?(?=\x22[^<>]*?>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1466
#T: Extract movie "value" attr from PARAM tag (for Flash)
#A: Tim Denby
#D: This pattern will extract the "value" attribute of a PARAM tag where name="movie".  I created it for extracting the URI of an Adobe Flash animation from some HTML, but of course it would work for more general purposes.  Don't forget to turn on case insensitivity.  Code tidied up with help from Sergei Z. in the forums.  Here's an older version, without the nested lookarounds: (?<=<param\s[^>]*?name\s*?=\s*?\x22\s*?movie\s*?\x22[^>]*?value\s*?=\s*?\x22)[^>]*?(?=\x22[^>]*?>)|(?<=<param\s[^>]*?value\s*?=\s*?\x22)[^>]*?(?=\x22[^>]*?name\s*?=\s*?\x22\s*?movie\s*?\x22[^>]*?>)
(?<=<param(?=[^<>]*?name\s*=\s*\x22movie\x22)[^<>]*?value\s*=\s*\x22)[^<>]*?(?=\x22[^<>]*?>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1467
#T: Positive or Negative Integer with Commas
#A: Bret Stateham
#D: This pattern matches on Integer values.  Handles leading positive or negative signs.  Supports commas where only the leading group can have less than three digits.
^[-+]?(\d?\d?\d?,?)?(\d{3}\,?)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1468
#T: Positive or Negative Decimal with Commas
#A: Bret Stateham
#D: This pattern matches decimal values.  It supports option leading positive or negative symbols.  Supports commas where only the leading group can have less than three numbers.  
^[-+]?(\d?\d?\d?,?)?(\d{3}\,?)*(\.?\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1469
#T: 12 hour time
#A: Dina Ayoub
#D: Simple 12 hour time, no am pm added, no 24 hour clock, 1 or 2 digits for hour. 
^([1-9]|0[1-9]|1[0-2]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1470
#T: Another Email RegEx
#A: Loren Helgeson
#D: OK. Go easy, people. This was my first crack at regular expressions. Hasn't let me down yet, though.
^[A-Za-z0-9\_]{1,}\@[A-Za-z0-9\_]{1,}\.[A-Za-z\.]{2,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1471
#T: Detect zip files
#A: alex
#D: I used this regex to check to make sure the file type being uploaded through an input tag was a zip file. Changing the '.zip' to another extension will change the file extension being verified. 
^([a-zA-z]:((\\([-*\.*\w+\s+\d+]+)|(\w+)\\)+)(\w+.zip)|(\w+.ZIP))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1472
#T: email Validator
#A: David Lopez
#D: this regex is based on a previous but i think is more accurate, but still has a bug... it allow things like that: name.name@sub.3.com...
'^[0-9]*[a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([a-zA-Z][-\w\.]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$'

#U: http://regexlib.com/REDetails.aspx?regexp_id=1473
#T: my Email regex
#A: bao
#D: nothing
^[a-zA-Z0-9][\w-]*@[a-zA-Z0-9][\w-\.]*\.[a-zA-Z0-9][\w-]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1474
#T: Number between 0.0 and 2.0 with comma or dot separator
#A: Toker
#D: Had to handle both "," and "." as separator in a validationscript where values are between 0.0 and 2.0 like in results of Swedish Högskoleprov (SAT).
^([0-1](?:\.\d)|[0-1](?:\,\d)|(2\.0)|(2\,0))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1475
#T: Match path and file
#A: Ken Foubert
#D: Matches an optional path and a filename and number. I used this pattern to pull out /library/page.aspx?id=33 from an html string and replace with a real file /library/Default.htm.
(\/.*\/)?(page.aspx\?id=|file_viewer.aspx\?id=)(\d+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1476
#T: US/Can Zip
#A: William Alexander
#D: US 5 or Canadian Zip Code
^(?!0{5})([0-9]{5}|[A-Z][0-9][A-Z]\s[0-9][A-Z][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1477
#T: Test
#A: Stefan Kolar
#D: test
(NOT)?(\s*\(*)\s*(\w+)\s*(=|<>|<|>|LIKE|IN)\s*(\(([^\)]*)\)|'([^']*)'|(-?\d*\.?\d+))(\s*\)*\s*)(AND|OR)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1478
#T: Percent regexp
#A: cassandra
#D: Percent regulaar expression. 
^100$|^\s*(\d{0,2})((\.|\,)(\d*))?\s*\%?\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1479
#T: Sentence boundary detector
#A: Kaustubh Patil
#D: This is to split text into sentences. any suggestions?
"[\.\?\!]+[\"|`|\']*[[:space:]]+[|\"|`|\']*(?=[A-Z])"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1480
#T: Phone Number
#A: Tim N Tousley
#D: Very flexible phone number entry. -- There are many valid ways to enter a phone number, and often there is other data that a restrictive Regex pattern will not abide. -- This pattern accepts any number of letters, commas, pound signs, slashes, spaces, periods, parenthesis, hyphens, plus signs, and asterisks... but amongst it scans for a minimum of 7 digits (modify {7} to adjust the minimum number of required digits (i.e. 10 for area code + phone number, 18 for long international numbers). -- This pattern does not attempt to restrict the entered phone number format in any way, but instead just verfies that enough digits for one was entered. -- Data in excess of the 7 required digits is allowed. -- I've posted another submission that forces compliance for US phone numbers.
^([a-zA-Z,#/ \.\(\)\-\+\*]*[0-9]){7}[0-9a-zA-Z,#/ \.\(\)\-\+\*]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1481
#T: US Phone Number
#A: Tim N Tousley
#D: Very flexible US phone number entry. -- There are many valid ways to enter a phone number, and often there is other data that a restrictive Regex pattern will not abide. -- This pattern accepts any number of letters, commas, pound signs, slashes, spaces, periods, parenthesis, hyphens, plus signs, and asterisks... but amongst it scans for a minimum of 10 digits, the first and fourth of which cannot be 0 or 1 (per US phone number standards in 2006). -- Data in excess of the 10 required digits is allowed.
^([a-zA-Z,#/ \.\(\)\-\+\*]*[2-9])([a-zA-Z,#/ \.\(\)\-\+\*]*[0-9]){2}([a-zA-Z,#/ \.\(\)\-\+\*]*[2-9])([a-zA-Z,#/ \.\(\)\-\+\*]*[0-9]){6}[0-9a-zA-Z,#/ \.\(\)\-\+\*]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1482
#T: Script Block Parser
#A: Ambrose
#D: This one enables you to parse well-formed script tags to get both the src value and the block content, if specified.  I'm using this one in some AJAX where I get script blocks back in a text reponse and need to parse them and add them to the DOM so they get processed.
<script(?:(?:.*(?<src>(?<=src=")[^"]*(?="))[^>]*)|[^>]*)>(?<content>(?:(?:\n|.)(?!(?:\n|.)<script))*)</script>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1483
#T: Alphanumeric
#A: Stupid Flanders
#D: The alphanumeric patterns I have seen here are unnecessarily long. This is all you need.
^[\w ]{0,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1484
#T: Decimal number
#A: Luc Boudreau
#D: Accepts integer and decimal numbers, the decimal delimiter beeing either a point or a comma, prefixed or not by a plus or minus sign.
^[\+\-]?[0-9]+([\,\.][0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1485
#T: CEP (Brazil zip)
#A: Iguatemi Amaral
#D: Validação de CEP Brasileiro. Aceita número com traço ou sem traço.
^\d{5}-\d{3}$|^\d{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1486
#T: Phone number
#A: Albert
#D: Match almost any format of US phone numbers
^[+]*(1|86)*((.| |-||\()(\d{3})(.| |-||\))\d{3}(.| |-|)(\d{4}|\d{5}))([ ]*ext[. -]*(\d{1,9}))*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1487
#T: Parse VB String
#A: Paul Axon
#D: This will return a collection of string parts as {"xxxx ""xxxx"" xxx"} for parsing into a string (i.e. remove initial and end ", then replace double "" with single), and {& xxxx} for parsing as variables (e.g. remove ampersand and white space and prefix with@). It's not perfect, as it will math to a word boundary for the 'variable' clause, so will not recognise calculations in the string.
(?:"(?:.|"")*?(?<!")"(?!"))|(?:&\s+[^"]*(\b))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1488
#T: Mobile No Validation
#A: Amol Pande
#D: This Pattern is to Validate Mobile Number with 10 digit Number and Countrycode as Optional.
^((\+)?(\d{2}[-]))?(\d{10}){1}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1489
#T: Telephone Number Validation (with Area Code)
#A: Amol Pande
#D: Telephone Number Validation with Country code Optional but Mandatory Area Code.
^((\+)?(\d{2})[-])?(([\(])?((\d){3,5})([\)])?[-])|(\d{3,5})(\d{5,8}){1}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1490
#T: Pattern for Login Id
#A: Amol Pande
#D: This Pattern is used to validate Login Name with . and _ seprators only.
^([a-zA-Z](?:(?:(?:\w[\.\_]?)*)\w)+)([a-zA-Z0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1491
#T: single Email Id Validation
#A: Amol Pande
#D: This Pattern used to Validate single Email Address .with first character as Alphabate and allowing . and _ as seprator more that once.
^[a-zA-Z]([a-zA-Z[._][\d]])*[@][a-zA-Z[.][\d]]*[.][a-z[.][\d]]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1492
#T: US Area Code (NANPA Format)
#A: Grant Szabo
#D: According to NANPA (North American Numbering Plan Administration): The format of an area code is NXX, where N is any digit 2 through 9 and X is any digit 0 through 9.  N11 are ERCs, called service codes, and are not used as area codes.  This regex checks for these conditions.  However, this regex does not check for N9X which are reserved for expansion in the future nor 37X or 96X which are also reserved for potential expansion in the future.
^[2-9]{1}[0-9]{1}((?<!1)[1]|[0]|[2-9]){1}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1493
#T: Arabic+Farsi+English Cleanup
#A: Qasem h nobari
#D: good for cleanup none (farsi+arabic+english)letters
^[ a - z, 0 - 9 , ?   -   ?   ,?   -   ? , ?    -  ?   ,?   -  ? , . ]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1494
#T: Cleanup non Alpha Numeric
#A: Qasem h nobari
#D: Cleanup non Alpha Numeric
[^""\?\/\&\;\:\|\”\“\(\)\[\]\=\^\.\%\$\#\!\*\?\?\»\«\×\?]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1495
#T: Image without alt attribute (.Net only)
#A: Richard Binnington
#D: This regex is good for finding image tags without alt tags.  I used this for working on Section 508 compliance.  This is a M$ flavored regex and probably won't work with anything else.
\<img ((src|height|width|border)=:q:Wh*)*/\>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1496
#T: Detect Javascript
#A: Denny Love
#D: Matches any opening or closing script tags, inline javascript: tags, inline on<function> (ex: onClick) tags.
#D: MATCHES:
#D: <a href="javascript:alert('test0');">
#D: <a href='javascript:alert("test1");'>
#D: <a href="#" onClick="alert('test2');" />
#D: <script language="javascript" src="somewhere.js">
#D: <script language="javascript" src="somewhere.js" />
#D: <script>
#D: </script>
<script.*/*>|</script>|<[a-zA-Z][^>]*=['"]+javascript:\w+.*['"]+>|<\w+[^>]*\son\w+=.*[ /]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1497
#T: A Forgiving US Phone Number
#A: Doug Jones
#D: This is a fairly forgiving phone number match. It's original purpose was to extract phone numbers from the details field in our database and into their own phone number table. It worked brilliantly. Enjoy!
^(1?)(-| ?)(\()?([0-9]{3})(\)|-| |\)-|\) )?([0-9]{3})(-| )?([0-9]{4}|[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1498
#T: Peruvian telephone
#A: enrique figueroa
#D: It allows to filter telephone peruvian format with or without extension ("Anexo"), It admits several variations for this word . The extension can be 1 through 4 digits long. It can also accept city prefix (1 through 3 digits).
^[0-9]{1,3}(\s|\-)*[0-9\s\-]{6,9}[\s]*$|^[0-9]{1,3}(\s|\-)*[0-9\s\-]{6,9}[\s|\-]*(a|an|AN|ane|anex|ANEX|ANEXO|anexo)?[\s|\-|\.]*[0-9]{1,4}[\s]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1499
#T: Extract VBScript/VB code blocks
#A: Torbjörn Hansson
#D: This expression matches all VBScript or VB code. Line comments (with ') and strings are inlcuded in named groups. Strings with double quotes (i.e. "this is my ""string"".") is supported. Expression is only tested with RegEx for .net 2.0.
(?<Code>[\s\S]*?)(?<NonCode>'.*?\r?\n|(?<quot>"|')(?:(?:(?!\<quot>).|\<quot>{2})*)(?:\<quot>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1500
#T: VBScript and VB code blocks
#A: Torbjörn Hansson
#D: This matches all code in a VBScript or VB code. Line comments (with ') and strings are inlcuded in named groups.
(?<Code>[\s\S]*?)(?<Comment>'.*?\r?\n|(?<quot>"|')(?:(?:(?!\<quot>).|\<quot>{2})*)(?:\<quot>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1501
#T: IPCodeSectionSeriesRim
#A: Marco Fanfoni
#D: regex for IPCodeSectionSeriesRim.
\d{5,12}|\d{1,10}\.\d{1,10}\.\d{1,10}|\d{1,10}\.\d{1,10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1502
#T: Match VBScript statements
#A: Torbjörn Hansson
#D: Matches any statements in VBScript, such as If, ElseIf, Else, End if, Select Case, etc...
(?<=(?:\n|:|^)\s*?)(if|end\sif|elseif|else|for\seach|for|next|call|class|exit|do|loop|const|dim|erase|option\s(?:explicit|implicit)|(?:public|private|end)\ssub|(?:public|private|end)\sfunction|private|public|redim|select\scase|end\sselect|case\selse|case|set|while|wend|with|end\swith|on\serror\sgoto\s0|on\serror\sresume\snext|exit|end\sclass|property\slet|property\sget|property\sset)(?=\s|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1503
#T: ASP members; -properties, -collections, -methods
#A: Torbjörn Hansson
#D: Matches all know ASP3.0 objects and their members.
(?<=(?:\n|:|&|\()\s*?)(Application\.Unlock|Application\.Lock|Application\.Contents\.RemoveAll|Application\.Contents\.Remove|Request\.BinaryRead|Request\.ClientCertificate|Request\.Cookies|Request\.Form|Request\.QueryString|Request\.ServerVariables|Request\.TotalBytes|Response\.AddHeader|Response\.AppendToLog|Response\.BinaryWrite|Response\.Clear|Response\.End|Response\.Flush|Response\.Redirect|Response\.Write|Response\.Buffer|Response\.CacheControl|Response\.Charset|Response\.CodePage|Response\.ContentType|Response\.Cookies|Response\.Expires|Response\.ExpiresAbsolute|Response\.IsClientConnected|Response\.LCID|Response\.PICS|Response\.Status|Server\.ScriptTimeout|Server\.CreateObject|Server\.Execute|Server\.GetLastError|Server\.HTMLEncode|Server\.MapPath|Server\.Transfer|Server\.URLEncode|Session\.Abandon|Session\.Contents\.Remove|Session\.Contents\.RemoveAll|Session\.CodePage|Session\.Contents|Session\.LCID|Session\.SessionID|Session\.StaticObjects|Session\.Timeout|Application|Session|Request)(?=\s|\.|\()

#U: http://regexlib.com/REDetails.aspx?regexp_id=1504
#T: VBScript functions
#A: Torbjörn Hansson
#D: Matches all(?) basic functions for VBScript (VB some in).
(?<=\s|:|&|\()(Abs|Array|Asc|Atn|CBool|CByte|CCur|CDate|CDbl|Chr|CInt|CLng|Conversions|Cos|CreateObject|CSng|CStr|DateAdd|DateDiff|DatePart|DateSerial|DateValue|Date|Day|DerivedMath|Escape|Eval|Exp|Filter|FormatCurrency|FormatDateTime|FormatNumber|FormatPercent|GetLocale|GetObject|GetRef|Hex|Hour|InputBox|InStr|InStrRev|Int|Fix|IsArray|IsDate|IsEmpty|IsNull|IsNumeric|IsObject|Join|LBound|LCase|Left|Len|LoadPicture|Log|LTrim|RTrim|Trim|Maths|Mid|Minute|Month|MonthName|MsgBox|Now|Oct|Replace|RGB|Right|Rnd|Round|ScriptEngineBuildVersion|ScriptEngineMajorVersion|ScriptEngineMinorVersion|ScriptEngine|Second|SetLocale|Sgn|Sin|Space|Split|Sqr|StrComp|String|StrReverse|Tan|Timer|TimeSerial|TimeValue|Time|TypeName|UBound|UCase|Unescape|VarType|WeekdayName|Weekday|Year)(?=\()

#U: http://regexlib.com/REDetails.aspx?regexp_id=1505
#T: VB/VBScript keyword
#A: Torbjörn Hansson
#D: Matches all keywords in VB and VBScript.
(?<=[\s=&\+\-,\(\)])(True|False|Nothing|Empty|Null)(?=[\s=&\+\-,\(\)])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1506
#T: VB and VBscript operators
#A: Torbjörn Hansson
#D: Matches all textual (not +, -, etc) operators in VB and VBScript.
(?<=\s)(And|Or|Eqv|Imp|Is|Mod|Not|Xor)(?=\s)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1507
#T: Trailing white spaces
#A: Torbjörn Hansson
#D: Matches all tabs or spaces at the end of a line.
[ \t]*?(?=\r?\n)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1508
#T: JDBC DB2 Url
#A: Martin Egli
#D: Pattern for testing a jdbc db2 url (Type 4). Format jdbc:db2://<ServerName><Port>/<DatabaseName>
^jdbc:db2://((?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))|(?:(?:(?:(?:[A-Z|a-z])(?:[\w|-]){0,61}(?:[\w]?[.]))*)(?:(?:[A-Z|a-z])(?:[\w|-]){0,61}(?:[\w]?)))):([0-9]{1,5})/([0-9|A-Z|a-z|_|#|$]{1,16})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1509
#T: &Mania
#A: Umesh Patil
#D: This pattern  will replace & with & if the ampersand is followed by space else it will escape &
&( )

#U: http://regexlib.com/REDetails.aspx?regexp_id=1510
#T: Alphanumeric and Spacing
#A: Robert Harris
#D: It will allow for alphanumeric characters only, with the exception of spacing.
^[a-zA-Z0-9\040]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1511
#T: Currency
#A: Ali Salman
#D: Matches number with optional commas and decimal places. Allows only max 7 digits before decimal and max 2 digits after decimal. Does not allow numbers beginning with 0 e.g., $0,234,567 but allows $0.05
^\$([0]|([1-9]\d{1,2})|([1-9]\d{0,1},\d{3,3})|([1-9]\d{2,2},\d{3,3})|([1-9],\d{3,3},\d{3,3}))([.]\d{1,2})?$|^\(\$([0]|([1-9]\d{1,2})|([1-9]\d{0,1},\d{3,3})|([1-9]\d{2,2},\d{3,3})|([1-9],\d{3,3},\d{3,3}))([.]\d{1,2})?\)$|^(\$)?(-)?([0]|([1-9]\d{0,6}))([.]\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1512
#T: Email - RFC 3696
#A: David Thompson
#D: Checks email format against RFC 3696 (http://tools.ietf.org/html/rfc3696). Allows all characters described in Sections 2 and 3 of the RFC EXCEPT those described in Section 4.3 as unsafe for mailto URLs without encoding. Allows any 2-letter TLD plus any of the current gTLDs as listed at http://www.icann.org/registries/top-level-domains.htm. Does not accept quoted strings in the local part or IP addresses in lieu of the domain name. Does not enforce length limits. Intended to be used as case-insensitive. Comments are appreciated!
^[a-z0-9!$'*+\-_]+(\.[a-z0-9!$'*+\-_]+)*@([a-z0-9]+(-+[a-z0-9]+)*\.)+([a-z]{2}|aero|arpa|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|travel)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1513
#T: Decimal numbers
#A: Mirza Muhammad Saleem
#D: An expression for .NET regular expression validation controls intended to facilitate the entry of percentage values both a whole numbers or as their decimal representations. Also compatible with the default US format for string formatting for percentages. Recommend that if you intended accept a value passing this express that you strip the percentage signs and take measures to ensure that any whole values are converted to percentages. 
^[+-]?\d+(\.\d{1,4})? *%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1514
#T: Split SQL Query
#A: Alex Forencich
#D: Splits SQL queries separated with semicolons, includes ending semicolon, all string literals are preserved.  The example statement splits into "SELECT * FROM table WHERE field = "item1;\n'item2'" AND x = 1;" and "DELETE FROM table2 WHERE field="x;y" AND t='x;"y"';"
((?:[^"';]|(?:"(?:\\{2}|\\"|"{2}|[^"])*?")|(?:'(?:\\{2}|\\'|'{2}|[^'])*?'))*;?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1515
#T: U.S. Phone numbers
#A: Rick LaCount
#D: with or without area code (of various forms)(does not allow for unbalanced parens in the area code).  With or without an extension (of various forms).  Does not allow for leading or trailing space.
^(((\(\d{3}\)|\d{3})( |-|\.))|(\(\d{3}\)|\d{3}))?\d{3}( |-|\.)?\d{4}(( |-|\.)?([Ee]xt|[Xx])[.]?( |-|\.)?\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1516
#T: Surname Prefixes and Suffixes capturing
#A: B Will
#D: This syntax matches most surname prefixes and suffixes with the surname appropriately placed.  Assumes all caps.  Useful if you want a precise match of surname prefixes and suffixes.
((A[FGIKLMNPRSUZ]S?X?|DAL?L?A?E?S?|DE|DE[LNRST]L?A?E?H?I?O?S?|DI[AE]?|DOS?|DU|EIT?N?E?|ELS?|EN|ETT?|HAI?|HE[NT]|HIN?A?I?N?R?|HOI|IL|IM|ISA|KA|KE|LAS|LES?|LH?IS?|LOS?|LO?U|MA?C|N[AIY]|O[IP]|SI|T[AEO]N?R?|U[MN][AEOS]?|VAN|VE[LR]|VO[MN]|Y[ENR]|ZU[MR]?) )?((LAS?|LOS?|DEN?R?|ZU) )?[A-Z0/'\.-]+( |$)(SR|JR|II+V?|VI+|[1-9][STRDH]+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1517
#T: vaildate URL
#A: rob
#D: it validates a simple URL like http://www.google.com , ftp://www.soso.com
^[http|ftp|wap|https]{3,5}:\//\www\.\w*\.[com|net]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1518
#T: Full Date with Abbreviated Month
#A: Simon Gill
#D: Validates datetimes in an internationally resilient form that is still readable by the average person.
(?i)^((((0[1-9])|([12][0-9])|(3[01])) ((JAN)|(MAR)|(MAY)|(JUL)|(AUG)|(OCT)|(DEC)))|((((0[1-9])|([12][0-9])|(30)) ((APR)|(JUN)|(SEP)|(NOV)))|(((0[1-9])|([12][0-9])) FEB))) \d\d\d\d ((([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1519
#T: Non-blank contiguous lines
#A: Eric Falsken
#D: This expression bypasses an infinite-backtracking bug by looking ahead in the current line for any non-whitespace, then matching to the end of the line if the lookahead was positive. Without the lookahead, you'll end up with an infinine backtracking expression and a bad day.
(^(?=.*\S).*\n)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1520
#T: CSV exported from Excel (all variants)
#A: Sven Jacobs
#D: This expressions parses one line from a CSV file which has been written with Excel. It does cover all variants: simple value, value masked by double quotes (including semicolons between double quotes which don't count) and double quotes masked by double quotes (""). Replace all semicolons within the regex to change the separator character.
;?(?:(?:"((?:[^"]|"")*)")|([^;]*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1521
#T: Phone Brazil
#A: Cleiton Francisco
#D: Matches Brazilian phone numbers, includes DDD (long-distance call) with or without 0. Accepts characters -, . and [space] as separators.
^((\(0?[1-9][0-9]\))|(0?[1-9][0-9]))[ -.]?([1-9][0-9]{3})[ -.]?([0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1522
#T: Indian Telephone Number Format
#A: Sandeep Kumtakar
#D: This is a bit strict validation format for a telephone number. It has been tested and used on live server and it works fine without any error. +91 indicates ISD code for India. Numbers inside brackets() indicates STD code and at last the is the phone number. It works with all the indian STD codes and phone numbers existing till date.
^((\+){1}[1-9]{1}[0-9]{0,1}[0-9]{0,1}(\s){1}[\(]{1}[1-9]{1}[0-9]{1,5}[\)]{1}[\s]{1})[1-9]{1}[0-9]{4,9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1523
#T: Hyperlink
#A: Matt Jones
#D: Get the URL, target, class, style and description from a hyperlink
<a\s{1}href="(?<url>.*?)"(\s?target="(?<target>_(blank|new|parent|self|top))")?(\s?class="(?<class>.*?)")?(\s?style="(?<style>.*?)")?>(?<title>.*?)</a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1524
#T: label having date 
#A: ulhas deshmukh
#D: capture labels having format yyyy.mm.dd.nn here nn is for number s from 00 to 99
^(\d{4})[.](0{0,1}[1-9]|1[012])[.](0{0,1}[1-9]|[12][0-9]|3[01])[.](\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1525
#T: HTML Anchor tag
#A: Derek Pinkerton
#D: This will match an entire HTML tag and will capture the href portion into the named capture "url". It will match any anchor tag with any number of attributes.
<a\s+(?:(?:\w+\s*=\s*)(?:\w+|"[^"]*"|'[^']*'))*?\s*href\s*=\s*(?<url>\w+|"[^"]*"|'[^']*')(?:(?:\s+\w+\s*=\s*)(?:\w+|"[^"]*"|'[^']*'))*?>[^<]+</a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1526
#T: HTML Anchor (link) tag
#A: Derek Pinkerton
#D: This regex will match all html link tags and captures the url into a named capture "url". There can be any html code between the opening and closing link tags. You must use this with the multiline and ignore case options selected.
<a\s+(?:(?:\w+\s*=\s*)(?:\w+|"[^"]*"|'[^']*'))*?\s*href\s*=\s*(?<url>\w+|"[^"]*"|'[^']*')(?:(?:\s+\w+\s*=\s*)(?:\w+|"[^"]*"|'[^']*'))*?>.+?</a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1527
#T: Parsing VB Strings (or csv qualified strings)
#A: David Oldfield
#D: I started out looking for a way to propertly parse delimited CSV text.  Everything that I tried on my own was not doing what I wanted it to do, so I borrowed one from someone here and customized it a bit to get pretty close to what I wanted (see ORIGIONAL MESSAGE below).  Ultimately though, I still needed more functionality, so I started over, and came up with this.  It actually does a very good job of actually parsing columns from the CSV text.  I use Regex Replace( csvText, "[$1$2]" ) to actually see the column content, but there are many other ways (obviously).
#D: ORIGIONAL MESSAGE:
#D: ____________________________________________________
#D: I was having trouble parsing fields from csv files due to the string qualifiers, when I came across a regex posted by Tom Svensson.  It didn't quite meet my needs though because it was parsing the substrings (escaped quotes) as seperate results.  This one will actually parse the entire string out, with it's escaped quote portion.  None the less, thank you  Tom Svensson for your help!
((?:(?:"[^"]*")|('[^\r]*)(\r\n)?)*)([\s]*[,]|$) {CHANGED TO)\N(?<![\"\w\d\s])[\s]*(?:"((?:[^\"]|[\"]{2})*)"|([\w\d\s]+))[\s]*(?=[\,]|[\r\n]+|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1528
#T: SQL constant string
#A: Fabio Maulo
#D: Mach with constant string in SQL style.
'('{2})*([^'\r\n]*)('{2})*([^'\r\n]*)('{2})*'

#U: http://regexlib.com/REDetails.aspx?regexp_id=1529
#T: RFC (Registro Federal de Contribuyentes)
#A: Hector Garcia
#D: Validacion de Registro Federal de Contribuyentes (RFC). Para México. Valida 4 caracteres alfabéticos para el nombre, 4 numéricos para la fecha de nacimiento, y, opcional, 3 alfanuméricos para la homoclave, de los cuales, el primero puede ser numérico o alfabético, el segundo es alfabetico y el tercero siempre es numérico.
^(?<nombre>\D{4})(?<fechanac>\d{6})(?<homoclave>.{1}\D{1}\d{1})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1531
#T: U.S. Currency Validation
#A: Lewis Moten
#D: Just a small pattern to make sure commas are in the rite place (if present).  Only allows one decimal to be suffixed with with 1 or 2 digits.  Also optional dollar sign may proceed value.
^\$?\d{1,3}(,?\d{3})*(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1532
#T: Opening HTML Anchor Elements
#A: Rolando Garza
#D: Finds the opening of an HTML anchor element.
(\<(a[^\>]+)\>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1533
#T: Postcode for Latvia
#A: Fredrik Andersson
#D: Simple postcode match for latvia.
^(LV-|LV)+[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1534
#T: Danish Civil Registration Number
#A: Andreas Povlsen
#D: This regex performs a crude test on the given input string.
#D: The danish cilvil registration number consists of 10 numeric characters and one special character '-'. The format is DDMMYY-XXXX.
^[0-3][0-9][0-1]\d{3}-\d{4}?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1535
#T: Latitude Validation
#A: Jason Rutberg
#D: I was inspired by this regexp - Matches a whole number between 1 and 20 inclusively - because it was doing something I could not find elsewhere so this is how I expanded it to validate lat values
^-?([1-8]?[1-9]|[1-9]0)\.{1}\d{1,6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1536
#T: Longitude Validation
#A: Jason Rutberg
#D: Longitude validation (similiar to Latitude Validation) and inspired by the same code
^-?([1]?[1-7][1-9]|[1]?[1-8][0]|[1-9]?[0-9])\.{1}\d{1,6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1537
#T: Time
#A: Lucas Moretto
#D: Clock regular expression
((\0[0-9])|(\1[0-9])|(\2[0-3])):([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1538
#T: Does string have HTML in it?
#A: Chris Pietschmann
#D: This will match true if the string contians at least one HTML tag.
[\w*|\W*]*<[[\w*|\W*]*|/[\w*|\W*]]>[\w*|\W*]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1539
#T: Curreancy
#A: Mohammed Rafiq .M
#D: It will allow exact 14 numbers and two decimal position with positive or negative numbers
(^-?\d{0,14})+(\.\d{0,18})?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1540
#T: No special chart
#A: Mohammed Rafiq .M
#D: Allow only 3 charcters or number without any special characters
"[A-Za-z0-9]{3}"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1541
#T: Whole Numbers
#A: Robert Gasiorowski
#D: Matches whole numbers only, including comma separated. Does not allow leading zeros. To match comma separated numbers only, change "\d{0,}" to "\d{0,2}". To match 0, add "|([0])" before ")$". If you want to use it with Java's regexp match(), remove "^(" and ")$" since they are not needed. 
^(([1-9]{1}\d{0,2},(\d{3},)*\d{3})|([1-9]{1}\d{0,}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1542
#T: Word Limit validation
#A: Iain wade
#D: This is used to validate a word count of input with an asp.net RegularExpressionValidator.
(((^\s*)*\S+\s+)|(\S+)){1,5} 

#U: http://regexlib.com/REDetails.aspx?regexp_id=1543
#T: Match PCRE Modifiers (At Least in PHP)
#A: Asher Holley
#D: This matches the modifiers section of a properly formed PCRE RegEx (at least in PHP).  This of course assumes that the delimiters are not any of the modifiers letters, if that's even possible.
[^imsxeADSUXu]([imsxeADSUXu]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1544
#T: Character position before and after decimal
#A: Keith
#D: Allows for 3 characters max before the decimal and 4 characters max after the decimal
^\d{1,3}\.\d{1,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1545
#T: Price
#A: sirpadk
#D: This regex will match any price, what so ever, if it's uses a comma as a 1000 seperator, or a dot, and if it uses comma as a decimal seperator or a dot, or if it do not use any seperator what so ever.
\d[\d\,\.]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1546
#T: Phone Number with Extension
#A: Pranay Arora
#D: This expression only accept numbers, spaces, x, ( ) and -. It accepts the values with 10 digits for phone numbers. These may be seperated with any number of spaces or a single '-'. The expression also allows an optional extension number to be provided atleast a single digit and a maximum of 4 digits.
(\s+|)((\(\d{3}\) +)|(\d{3}-)|(\d{3} +))?\d{3}(-| +)\d{4}( +x\d{1,4})?(\s+|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1547
#T: Data ddMMM
#A: Edison Volpe Jr.
#D: Expressão para datas no formato ddMMM obrigando dois dígitos para o dia e três letras para o mês (em inglês). Regex for dates at ddMMM format mandatory two digits for days and three letters for the months.
[0-3]{1}[0-9]{1}(jan|JAN|feb|FEB|mar|MAR|apr|APR|may|MAY|jun|JUN|jul|JUL|aug|AUG|sep|SEP|oct|OCT|nov|NOV|dec|DEC){1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1548
#T: email validation
#A: Thorsten B.
#D: Validates some common email-adresses.
\b[\w]+[\w.-][\w]+@[\w]+[\w.-]\.[\w]{2,4}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1549
#T: email
#A: Kis Hajnalka
#D: matches any email address, where a @ is contained
([a-zA-Z0-9_\-\.]+)(@[a-zA-Z0-9_\-\.]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1550
#T: url
#A: Kis Hajnalka
#D: an expression to match internet addresses with one of the known protocolls (http, ftp, gopher, telnet, news)
(?:(?:(?:http|ftp|gopher|telnet|news)://)(?:w{3}\.)?(?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.])+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1551
#T: url
#A: Kis Hajnalka
#D: here are specified all the top level domains. In fact, this expression gets the urls only till the TLD. 
(?:(?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.](?!www))+(?:\.[Cc]om|\.[Ee]du|\.[gG]ov|\.[Ii]nt|\.[Mm]il|\.[Nn]et|\.[Oo]rg|\.[Bb]iz|\.[Ii]nfo|\.[Nn]ame|\.[Pp]ro|\.[Aa]ero|\.[cC]oop|\.[mM]useum|\.[Cc]at|\.[Jj]obs|\.[Tt]ravel|\.[Aa]rpa|\.[Mm]obi|\.[Aa]c|\.[Aa]d|\.[aA]e|\.[aA]f|\.[aA]g|\.[aA]i|\.[aA]l|\.[aA]m|\.[aA]n|\.[aA]o|\.[aA]q|\.[aA]r|\.[aA]s|\.[aA]t|\.[aA]u|\.[aA]w|\.[aA]z|\.[aA]x|\.[bB]a|\.[bB]b|\.[bB]d|\.[bB]e|\.[bB]f|\.[bB]g|\.[bB]h|\.[bB]i|\.[bB]j|\.[bB]m|\.[bB]n|\.[bB]o|\.[bB]r|\.[bB]s|\.[bB]t|\.[bB]v|\.[bB]w|\.[bB]y|\.[bB]z|\.[cC]a|\.[cC]c|\.[cC]d|\.[cC]f|\.[cC]g|\.[cC]h|\.[cC]i|\.[cC]k|\.[cC]l|\.[cC]m|\.[cC]n|\.[cC]o|\.[cC]r|\.[cC]s|\.[cC]u|\.[cC]v|\.[cC]x|\.[cC]y|\.[cC]z|\.[dD]e|\.[dD]j|\.[dD]k|\.[dD]m|\.[dD]o|\.[dD]z|\.[eE]c|\.[eE]e|\.[eE]g|\.[eE]h|\.[eE]r|\.[eE]s|\.[eE]t|\.[eE]u|\.[fF]i|\.[fF]j|\.[fF]k|\.[fF]m|\.[fF]o|\.[fF]r|\.[gG]a|\.[gG]b|\.[gG]d|\.[gG]e|\.[gG]f|\.[gG]g|\.[gG]h|\.[gG]i|\.[gG]l|\.[gG]m|\.[gG]n|\.[gG]p|\.[gG]q|\.[gG]r|\.[gG]s|\.[gG]t|\.[gG]u|\.[gG]w|\.[gG]y|\.[hH]k|\.[hH]m|\.[hH]n|\.[hH]r|\.[hH]t|\.[hH]u|\.[iI]d|\.[iI]e|\.[iI]l|\.[iI]m|\.[iI]n|\.[iI]o|\.[iI]q|\.[iI]r|\.[iI]s|\.[iI]t|\.[jJ]e|\.[jJ]m|\.[jJ]o|\.[jJ]p|\.[kK]e|\.[kK]g|\.[kK]h|\.[kK]i|\.[kK]m|\.[kK]n|\.[kK]p|\.[kK]r|\.[kK]w|\.[kK]y|\.[kK]z|\.[lL]a|\.[lL]b|\.[lL]c|\.[lL]i|\.[lL]k|\.[lL]r|\.[lL]s|\.[lL]t|\.[lL]u|\.[lL]v|\.[lL]y|\.[mM]a|\.[mM]c|\.[mM]d|\.[mM]g|\.[mM]h|\.[mM]k|\.[mM]l|\.[mM]m|\.[mM]n|\.[mM]o|\.[mM]p|\.[mM]q|\.[mM]r|\.[mM]s|\.[mM]t|\.[mM]u|\.[mM]v|\.[mM]w|\.[mM]x|\.[mM]y|\.[mM]z|\.[nN]a|\.[nN]c|\.[nN]e|\.[nN]f|\.[nN]g|\.[nN]i|\.[nN]l|\.[nN]o|\.[nN]p|\.[nN]r|\.[nN]u|\.[nN]z|\.[oO]m|\.[pP]a|\.[pP]e|\.[pP]f|\.[pP]g|\.[pP]h|\.[pP]k|\.[pP]l|\.[pP]m|\.[pP]n|\.[pP]r|\.[pP]s|\.[pP]t|\.[pP]w|\.[pP]y|\.[qP]a|\.[rR]e|\.[rR]o|\.[rR]u|\.[rR]w|\.[sS]a|\.[sS]b|\.[sS]c|\.[sS]d|\.[sS]e|\.[sS]g|\.[sS]h|\.[Ss]i|\.[sS]j|\.[sS]k|\.[sS]l|\.[sS]m|\.[sS]n|\.[sS]o|\.[sS]r|\.[sS]t|\.[sS]v|\.[sS]y|\.[sS]z|\.[tT]c|\.[tT]d|\.[tT]f|\.[tT]g|\.[tT]h|\.[tT]j|\.[tT]k|\.[tT]l|\.[tT]m|\.[tT]n|\.[tT]o|\.[tT]p|\.[tT]r|\.[tT]t|\.[tT]v|\.[tT]w|\.[tT]z|\.[uU]a|\.[uU]g|\.[uU]k|\.[uU]m|\.[uU]s|\.[uU]y|\.[uU]z|\.[vV]a|\.[vV]c|\.[vV]e|\.[vV]g|\.[vV]i|\.[vV]n|\.[vV]u|\.[wW]f|\.[wW]s|\.[yY]e|\.[yY]t|\.[yY]u|\.[zZ]a|\.[zZ]m|\.[zZ]w))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1552
#T: url
#A: Kis Hajnalka
#D: So, that's it. Gets url-s with "www", BUT without the protocols. If you need one regEx with the protocols, search for it in this database, I've added one
(?:(?:w{3}\.)(?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.])+[\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.aero|\.coop|\.museum|\.cat|\.jobs|\.travel|\.arpa|\.mobi|\.ac|\.ad|\.ae|\.af|\.ag|\.ai|\.al|\.am|\.an|\.ao|\.aq|\.ar|\.as|\.at|\.au|\.aw|\.az|\.ax|\.ba|\.bb|\.bd|\.be|\.bf|\.bg|\.bh|\.bi|\.bj|\.bm|\.bn|\.bo|\.br|\.bs|\.bt|\.bv|\.bw|\.by|\.bz|\.ca|\.cc|\.cd|\.cf|\.cg|\.ch|\.ci|\.ck|\.cl|\.cm|\.cn|\.co|\.cr|\.cs|\.cu|\.cv|\.cx|\.cy|\.cz|\.de|\.dj|\.dk|\.dm|\.do|\.dz|\.ec|\.ee|\.eg|\.eh|\.er|\.es|\.et|\.eu|\.fi|\.fj|\.fk|\.fm|\.fo|\.fr|\.ga|\.gb|\.gd|\.ge|\.gf|\.gg|\.gh|\.gi|\.gl|\.gm|\.gn|\.gp|\.gq|\.gr|\.gs|\.gt|\.gu|\.gw|\.gy|\.hk|\.hm|\.hn|\.hr|\.ht|\.hu|\.id|\.ie|\.il|\.im|\.in|\.io|\.iq|\.ir|\.is|\.it|\.je|\.jm|\.jo|\.jp|\.ke|\.kg|\.kh|\.ki|\.km|\.kn|\.kp|\.kr|\.kw|\.ky|\.kz|\.la|\.lb|\.lc|\.li|\.lk|\.lr|\.ls|\.lt|\.lu|\.lv|\.ly|\.ma|\.mc|\.md|\.mg|\.mh|\.mk|\.ml|\.mm|\.mn|\.mo|\.mp|\.mq|\.mr|\.ms|\.mt|\.mu|\.mv|\.mw|\.mx|\.my|\.mz|\.na|\.nc|\.ne|\.nf|\.ng|\.ni|\.nl|\.no|\.np|\.nr|\.nu|\.nz|\.om|\.pa|\.pe|\.pf|\.pg|\.ph|\.pk|\.pl|\.pm|\.pn|\.pr|\.ps|\.pt|\.pw|\.py|\.qa|\.re|\.ro|\.ru|\.rw|\.sa|\.sb|\.sc|\.sd|\.se|\.sg|\.sh|\..si|\.sj|\.sk|\.sl|\.sm|\.sn|\.so|\.sr|\.st|\.sv|\.sy|\.sz|\.tc|\.td|\.tf|\.tg|\.th|\.tj|\.tk|\.tl|\.tm|\.tn|\.to|\.tp|\.tr|\.tt|\.tv|\.tw|\.tz|\.ua|\.ug|\.uk|\.um|\.us|\.uy|\.uz|\.va|\.vc|\.ve|\.vg|\.vi|\.vn|\.vu|\.wf|\.ws|\.ye|\.yt|\.yu|\.za|\.zm|\.zw](?:[a-zA-Z0-9/;\?&=:\-_\$\+!\*'\(\|\\~\[\]#%\.])*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1553
#T: phone number USA
#A: Kis Hajnalka
#D: any north american us phone number
(?:(?:(?:\+)?1[\-\s\.])?(?:\s?\()?(?:[2-9][0-8][0-9])(?:\))?(?:[\s|\-|\.])?)(?:(?:(?:[2-9][0-9|A-Z][0-9|A-Z])(?:[\s|\-|\.])?)(?:[0-9|A-Z][0-9|A-Z][0-9|A-Z][0-9|A-Z]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1554
#T: Path from jar
#A: Alex Ries
#D: In java using this.getClass().getResource(""); will result in a jar:file:/ etc url ending with yourjarfile.jar!/internal/package/path/ this regular expression matches the directory before the internal jar path declaration returning the physical directory the file resides in. should work in both posix and windows machines (untested for posix*)
jar:file:/(([A-Z]:)?/([A-Z 0-9 * ( ) + \- & $ # @ _ . ! ~ /])+)(/[A-Z 0-9 _ ( ) \[ \] - = + _ ~]+\.jar!)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1555
#T: Java Get Path
#A: Alex Ries
#D: More advanced regular expression to get the full path to the directory from which your program is running. You may use this to detect the program installation dir whether you are just debugging or having a deployed program. Using the second group combined with the 7th group you'll have a full path to your program. Very useful if you use resources outside of the java package.
(jar:)?file:/(([A-Z]:)?/([A-Z0-9\*\()\+\-\&$#@_.!~\[\]/])+)((/[A-Z0-9_()\[\]\-=\+_~]+\.jar!)|([^!])(/com/regexlib/example/))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1556
#T: Days in a Class Schedule
#A: rodel surat
#D: Matches a string if it is valid in the form of MWF or TTHS.  Maybe used for validating the "days part" of a class schedule field.  The string should only accept any of the ff set of letters: 'M' 'T' 'W' 'TH' 'F' 'S' 'SU' .  Only one instance of these set of letters is accepted.
^M{0,1}T{0,1}W{0,1}(TH){0,1}F{0,1}S{0,1}(SU){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1557
#T: 12-hr Time
#A: rodel surat
#D: Matches a string if it is a valid time in the format of "HH:MM AM" or "HH:MM A".
^(([0][0-9]|[1][0-2])|[0-9]):([0-5][0-9])( *)((AM|PM)|(A|P))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1559
#T: Currency 16,3
#A: Antonio Avila
#D: Currency expression, accepts 4 commas and 4 groups of 3 numbers and 1 number before the first comma, this first number will have to be different from zero. It accepts a number of, two or three decimal. It accepts zero numbers after the point. You can change the number of groups and numbers accespts before and after the point.
^\$?(([1-9],)?([0-9]{3},){0,3}[0-9]{3}|[0-9]{0,16})(\.[0-9]{0,3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1560
#T: Read tag xml have child tag
#A: Giao Long
#D: Read content in tag xml including child tag
<(?<tag>\w*|\w*\.+\w*)>+((.|[\n\t\f\r\s])*?)<\/\k<tag>>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1561
#T: Matches x to y number of occurrences of a regular expression
#A: Sanjay Ahuja
#D: \d{2,4} matches at least 2 but no more than 4 digits
\d{2,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1562
#T: Unicode expression (Latin, Baltic & Cyrillic)
#A: Alex
#D: Accept Russian, Latvian & English characters
[a-zA-Z\u0410-\u042F\u0430-\u044F\u0401\u0451\u0101\u0100\u010c\u010d\u0112\u0113\u011E\u011F\u012A\u012B\u0136\u0137\u013b\u013C\u0145\u0146\u0160\u0161\u016A\u016B\u017D\u017E]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1563
#A: bamerl
#D: Matches any unsigned or signed floating point number/numeric string.
^-?\d+(\.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1564
#T: US Address Parser
#A: Al Moore
#D: Matches and groups US Address Types.
(?#Requires that City is followed by a tab or comma)(?#Created by Al Moore)(?<Address1>(?:[a-zA-Z0-9\x20\x2E\x2D])*(?:CIRCLE|CIR|MOUNTAIN|MTN|PARKWAY|PKWY|PKY|PLAZA|PLZA|PLZ|RIDGE|RDG|ROUTE|RTE|TURNPIKE|TURNPK|TPKE|TPK|WAY|WY|SOUTHEAST|SOUTHWEST|SOUTH|EAST|NORTHEAST|NORTHWEST|NORTH|WEST|ARCADE|ARC\x2E|ARC|AVENUE|AVE\x2E|AVE|BOULEVARD|BVD\x2E|BVD|BLVD\x2E|BLVD|CLOSE|CL\x2E|CL|CRESENT|CRES\x2E|CRES|DRIVE|DR\x2E|DR|ESPLANADE|ESP\x2E|ESP|GROVE|GR\x2E|GR|HIGHWAY|HWY\x2E|HWY|LANE|LN\x2E|LN|PARADE|PDE\x2E|PDE|PLACE\x2E|PLACE|PL\x2E|PL|ROAD|RD\x2E|RD|SQUARE|SQ\x2E|SQ|STREET|ST\x2E|ST|TERRACE|TCE\x2E|TCE|S\x2E|W\x2E|N\x2E|E\x2E|N|E|W|S))[,]*\t*\s(?<AptBldg>UNIT[a-zA-Z0-9\x20\x2D\x3A]*|BASEMENT[a-zA-Z0-9\x20\x2D\x3A]*|BSMT[a-zA-Z0-9\x20\x2D\x3A]*|BUILDING[a-zA-Z0-9\x20\x2D\x3A]*|DEPARTMENT[a-zA-Z0-9\x20\x2D\x3A]*|DEPT[a-zA-Z0-9\x20\x2D\x3A]*|FLOOR[a-zA-Z0-9\x20\x2D\x3A]*|FL[a-zA-Z0-9\x20\x2D\x3A]*|PENTHOUSE[a-zA-Z0-9\x20\x2D\x3A]*|PH[a-zA-Z0-9\x20\x2D\x3A]*|ROOM[a-zA-Z0-9\x20\x2D\x3A]*|RM[a-zA-Z0-9\x20\x2D\x3A]*|SLIP[a-zA-Z0-9\x20\x2D\x3A]*|SPACE[a-zA-Z0-9\x20\x2D\x3A]*|SPC[a-zA-Z0-9\x20\x2D\x3A]*|SUITE[a-zA-Z0-9\x20\x2D\x3A]*|\x23[a-zA-Z0-9\x20\x2D\x3A]*|APT[a-zA-Z0-9\x20\x2D\x3A]*|BLDG[a-zA-Z0-9\x20\x2D\x3A]*|PO\sBOX\x3A[a-zA-Z0-9\x20\x2D]*|P\x2EO\x2E\sBOX[a-zA-Z0-9\x20\x2D]*|PO\sBOX[a-zA-Z0-9\x20\x2D]*|BOX[a-zA-Z0-9\x20\x2D]*|\x20*)\x2C*\x2E*\t*(?<City>[a-zA-Z\x20]*)[,]*\t*\x20*(?<State>AL|ALABAMA|AK|ALASKA|AZ|ARIZONA|AR|ARKANSAS|CA|CALIFORNIA|CO|COLORADO|CT|CONNECTICUT|DE|DELAWARE|FL|FLORIDA|GA|GEORGIA|HI|HAWAII|ID|IDAHO|IL|ILLNOIS|IN|INDIANA|IA|IOWA|KS|KANSAS|KY|KENTUCKY|LA|LOUISIANA|ME|MAINE|MD|MARYLAND|MA|MASSACHUSETTS|MI|MICHIGAN|MN|MINNESOTA|MS|MISSISSIPPI|MO|MISSOURI|MT|MONTANA|NE|NEBRASKA|NV|NEVADA|NH|NEW HAMPSHIRE|NJ|NEW JERSEY|NM|NEW MEXICO|NY|NEW YORK|NC|NORTH CAROLINA|ND|NORTH DAKOTA|OH|OHIO|OK|OKLAHOMA|OR|OREGON|PA|PENNSYLVANIA|RI|RHODE ISLAND|SC|SOUTH CAROLINA|SD|SOUTH DAKOTA|TN|TENNESSEE|TX|TEXAS|UT|UTAH|VT|VERMONT|VA|VIRGINIA|WA|WASHINGTON|DC|DISTRICT OF COLUMBIA|WASHINGTON DC|[a-zA-Z]{2})\x2C*\t*\s*(?<ZipCode>[0-9\x2D\x20]{5,10}|\x20*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1565
#A: Anufriev Dmitry
#D: This expression will match quoted string without quote inside string
^"[^"]+"$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1566
#T: Email regexp for ereg()
#A: Axel Foly
#D: Checks whether email in the string that must be an E-mail address
^[a-z0-9_]{1}[a-z0-9\-_]*(\.[a-z0-9\-_]+)*@[a-z0-9]{1}[a-z0-9\-_]*(\.[a-z0-9\-_]+)*\.[a-z]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1567
#T: Alphanumeric w spaces and double quotes
#A: Jeffrey Roughgarden
#D: Accepts words or quoted phrases for search strings. Stops SQL injection.
^["a-zA-Z0-9\040]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1568
#T: email
#A: satish
#D: checks all valid email id's
^[a-zA-Z][\w\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\w\.-]*[a-zA-Z0-9]\.[a-zA-Z][a-zA-Z\.]*[a-zA-Z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1569
#T: Password not start or end with number
#A: Ariel Martínez
#D: This pattern is a extension of Jeremy Samuel's password pattens, I included a validation for the string not end with number
^((?=[^\d])(?=^*[^0-9]$)(?!.*')(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s))?(?=.*[^\d]$).{8,15}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1570
#T: US Address RegExp
#A: Anthony Alvarado
#D: US Address Validator. Requires that City is followed by a tab or comma
(?<Address1>(?:[a-zA-Z0-9\x20\x2E\x2D])*(?:CIRCLE|CIR|MOUNTAIN|MTN|PARKWAY|PKWY|PKY|PLAZA|PLZA|PLZ|RIDGE|RDG|ROUTE|RTE|TURNPIKE|TURNPK|TPKE|TPK|WAY|WY|SOUTHEAST|SOUTHWEST|SOUTH|EAST|NORTHEAST|NORTHWEST|NORTH|WEST|ARCADE|ARC\x2E|ARC|AVENUE|AVE\x2E|AVE|BOULEVARD|BVD\x2E|BVD|BLVD\x2E|BLVD|CLOSE|CL\x2E|CL|CRESENT|CRES\x2E|CRES|DRIVE|DR\x2E|DR|ESPLANADE|ESP\x2E|ESP|GROVE|GR\x2E|GR|HIGHWAY|HWY\x2E|HWY|LANE|LN\x2E|LN|PARADE|PDE\x2E|PDE|PLACE\x2E|PLACE|PL\x2E|PL|ROAD|RD\x2E|RD|SQUARE|SQ\x2E|SQ|STREET|ST\x2E|ST|TERRACE|TCE\x2E|TCE|S\x2E|W\x2E|N\x2E|E\x2E|N|E|W|S))[,]*\t*\s(?<AptBldg>UNIT[a-zA-Z0-9\x20\x2D\x3A]*|BASEMENT[a-zA-Z0-9\x20\x2D\x3A]*|BSMT[a-zA-Z0-9\x20\x2D\x3A]*|BUILDING[a-zA-Z0-9\x20\x2D\x3A]*|DEPARTMENT[a-zA-Z0-9\x20\x2D\x3A]*|DEPT[a-zA-Z0-9\x20\x2D\x3A]*|FLOOR[a-zA-Z0-9\x20\x2D\x3A]*|FL[a-zA-Z0-9\x20\x2D\x3A]*|PENTHOUSE[a-zA-Z0-9\x20\x2D\x3A]*|PH[a-zA-Z0-9\x20\x2D\x3A]*|ROOM[a-zA-Z0-9\x20\x2D\x3A]*|RM[a-zA-Z0-9\x20\x2D\x3A]*|SLIP[a-zA-Z0-9\x20\x2D\x3A]*|SPACE[a-zA-Z0-9\x20\x2D\x3A]*|SPC[a-zA-Z0-9\x20\x2D\x3A]*|SUITE[a-zA-Z0-9\x20\x2D\x3A]*|\x23[a-zA-Z0-9\x20\x2D\x3A]*|APT[a-zA-Z0-9\x20\x2D\x3A]*|BLDG[a-zA-Z0-9\x20\x2D\x3A]*|PO\sBOX\x3A[a-zA-Z0-9\x20\x2D]*|P\x2EO\x2E\sBOX[a-zA-Z0-9\x20\x2D]*|PO\sBOX[a-zA-Z0-9\x20\x2D]*|BOX[a-zA-Z0-9\x20\x2D]*|\x20*)\x2C*\x2E*\t*(?<City>[a-zA-Z\x20]*)[,]*\t*\x20*(?<State>AL|ALABAMA|AK|ALASKA|AZ|ARIZONA|AR|ARKANSAS|CA|CALIFORNIA|CO|COLORADO|CT|CONNECTICUT|DE|DELAWARE|FL|FLORIDA|GA|GEORGIA|HI|HAWAII|ID|IDAHO|IL|ILLNOIS|IN|INDIANA|IA|IOWA|KS|KANSAS|KY|KENTUCKY|LA|LOUISIANA|ME|MAINE|MD|MARYLAND|MA|MASSACHUSETTS|MI|MICHIGAN|MN|MINNESOTA|MS|MISSISSIPPI|MO|MISSOURI|MT|MONTANA|NE|NEBRASKA|NV|NEVADA|NH|NEW HAMPSHIRE|NJ|NEW JERSEY|NM|NEW MEXICO|NY|NEW YORK|NC|NORTH CAROLINA|ND|NORTH DAKOTA|OH|OHIO|OK|OKLAHOMA|OR|OREGON|PA|PENNSYLVANIA|RI|RHODE ISLAND|SC|SOUTH CAROLINA|SD|SOUTH DAKOTA|TN|TENNESSEE|TX|TEXAS|UT|UTAH|VT|VERMONT|VA|VIRGINIA|WA|WASHINGTON|DC|DISTRICT OF COLUMBIA|WASHINGTON DC|[a-zA-Z]{2})\x2C*\t*\s*(?<ZipCode>[0-9\x2D\x20]{5,10}|\x20*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1571
#T: South African Cell Phone Number
#A: Chris Morton
#D: only allows valid cell phones from south african service providers. to date i havent seen a cell phone number starting 079 or 089 but i think the networks might support it...
(^0[87][23467]((\d{7})|( |-)((\d{3}))( |-)(\d{4})|( |-)(\d{7})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1572
#T: south african phone number
#A: Chris Morton
#D: validates south african phone numbers
[0](\d{9})|([0](\d{2})( |-)((\d{3}))( |-)(\d{4}))|[0](\d{2})( |-)(\d{7})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1573
#T: South African ID Number
#A: Chris Morton
#D: Validates South African ID Numbers
(((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229))(( |-)(\d{4})( |-)(\d{3})|(\d{7}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1574
#T: US States
#A: Brandon Hunt
#D: Just a simple US State regex.  Requires valid 2 letter abbreviations.
^(?:(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1575
#T: File Names Without Extensions
#A: David Berky
#D: Used in a web site .htaccess file as: <br /><blockquote><filesMatch "^[^.]+$"> <br />ForceType application/x-httpd-php <br /></filesMatch></blockquote> Calls for PHP parsing on files without extensions. Solution thanks to "mash" on RegexAdvise.com.<br /><br />
^[^.]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1576
#T: c function 
#A: Martijn Laarman
#D: A recursive PRCE regular expression that matches a c funtion with any number of parameters including 0 parameters. I.E: return fuction(); is the minimum it matches.
\w+?\s\w+?\(([\w\s=]+,*|[\w\s=]+|(?R))*\);

#U: http://regexlib.com/REDetails.aspx?regexp_id=1577
#T: URL Parsing Regex
#A: Scott Sargent
#D: This regex matches fully qualified external urls (http, https, or ftp).  It uses the ms specific group-naming structure to present friendly named groups back to the user. 
(?<protocol>http(s)?|ftp)://(?<server>([A-Za-z0-9-]+\.)*(?<basedomain>[A-Za-z0-9-]+\.[A-Za-z0-9]+))+((/?)(?<path>(?<dir>[A-Za-z0-9\._\-]+)(/){0,1}[A-Za-z0-9.-/]*)){0,1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1578
#T: Common English Stopwords for Search Engine
#A: Chris Morton
#D: use this to produce search strings in your programs that run more efficiently. use the replace of the regex class to remove the characters from the user input then use the resulting string to query the database...
[\s]a[\s]|[\s]about[\s]|[\s]an[\s]|[\s]are[\s]|[\s]as[\s]|[\s]at[\s]|[\s]be[\s]|[\s]by[\s]|[\s]for[\s]|[\s]from[\s]|[\s]how[\s]|[\s]in[\s]|[\s]is[\s]|[\s]it[\s]|[\s]of[\s]|[\s]on[\s]|[\s]or[\s]|[\s]that[\s]|[\s]the[\s]|[\s]this[\s]|[\s]to[\s]|[\s]was[\s]|[\s]what[\s]|[\s]when[\s]|[\s]where[\s]|[\s]who[\s]|[\s]will[\s]|[\s]with[\s]|[\s]the[\s]|[\s]www[\s]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1579
#T: Universal Real Number Pattern
#A: alex
#D: matches all real numbers inside a string also matches 0.0
((-)?([1-9]\d*\.\d+|0\.\d+|[1-9]\d*|0))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1580
#T: Danish CPRNR
#A: Søren Møller Thomsen
#D: Danish social security. [ddMMyy-0000]. Validates a correct date, but does not enforce the modulus 11 check (see www.cpr.dk for more information).
^((((0[1-9]|[12][0-9]|3[01])(0[13578]|10|12)(\d{2}))|(([0][1-9]|[12][0-9]|30)(0[469]|11)(\d{2}))|((0[1-9]|1[0-9]|2[0-8])(02)(\d{2}))|((29)(02)(00))|((29)(02)([2468][048]))|((29)(02)([13579][26])))[-]\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1581
#T: HREF
#A: arbitar
#D: This will pull the HREF values out of any HTML tag in a query and present only the HREF values.  It's very versatile, it can accept a number of nonstandard formats.
(?<=<(\S|\s)*)((?<=(href=('|")+))|(?<=(href=))[^('|")])([^'>"\s)]*)(?=('|"|[\S])?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1582
#T: us phone pattern
#A: ahmedhse
#D: This pattern enables any combination of 10 of 11 nubers written in the form of x.xxx.xxx.xxxx. The (.) separator can be replaced with any non alphabet separator.The first x with its symbol are optional
([0-9]{1}[\.\,\-\/\\\040\?\<\>\!\@\#\$\%\^\&\*\(\)\{\}\[\]]{0,3})?[0-9]{3}[\.\,\-\/\\\040\?\<\>\!\@\#\$\%\^\&\*\(\)\{\}\[\]]{0,3}[0-9]{3}[\.\,\-\/\\\040\?\<\>\!\@\#\$\%\^\&\*\(\)\{\}\[\]]{0,3}[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1583
#T: ISIN number between ><
#A: MT
#D: ISIN must be located inside a html tag eg. <td>JP3756600007</td>. Just remove the (..) at the beginning and the end if you wish to match all ISINs.
(?<=>)[A-Z]{2}[\d|\w]{9}\d{1}(?=(<))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1584
#T: Path & Filename in realtive path
#A: Marcus
#D: Nice for checking local filesystem relative pathing. I used it for testing in php scripts that work with images.
^(((\.\.){1}/)*|(/){1})?(([a-zA-Z0-9]*)/)*([a-zA-Z0-9]*)+([.jpg]|[.gif])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1585
#T: Entire URL up to last slash
#A: matthew horn
#D: Gets everything up to the last slash; so the match on a url like this: http://www.yoursite.com:8700/flex/photos/PhotoViewer2.swf?0=0&1=0 is this: http://www.yoursite.com:8700/flex/photos/
http://.*[*/]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1586
#T: List HTML tags
#A: Richard Brisley
#D: Used to return all the html tags and closing tags in a section of html. Can be used to replace all the tags with nothing or itterate through them.
<(?![!/]?[ABIU][>\s])[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1587
#T: find body-tag
#A: rainer utsch
#D: find the body-tag of a html page
((<body)|(<BODY))([^>]*)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1588
#T: simple url validation
#A: Josh Nielson
#D: just a simple pattern to make sure a user entered URL is reasonable and possibly valid.
^(http)?(https)?(\:\/\/+)?([a-zA-Z0-9\-\.]+)?\.[A-Za-z]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1589
#T: U.S. Military Time
#A: Kerry Keel
#D: Matches U.S. military time with option leading zero and required seconds.
^([0]?\d|1\d|2[0-3]):([0-5]\d):([0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1590
#T: Fecha español (Spanish Date)
#A: Manuel Llavador
#D: Año con formato dd/mm/yyyy permitiendo también d/m/yyyy o dd/m/yyyy y d/mm/yyyy. Además controla los meses con 31 y 30 días y si es año bisiesto o no para el mes de febrero.
^((((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|1­1)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2­[0-8])([-./])(\d{4}))|((2)(\.|-|\/)(29)([-./])([02468][048]00))|((2)([-./])­(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)­([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9­][13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1591
#T: Entero o fracción de enteros (Integer or fraction of integers)
#A: Manuel Llavador
#D: Entero o fracción de enteros separados por el símbolo barra /
\d+(/\d+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1592
#T: Find Link Tags
#A: Ian Muir
#D: This pattern matches link tags in html and returns the contents of the href attribute and the text of the link.
^<a[^>]*(http://[^"]*)[^>]*>([ 0-9a-zA-Z]+)</a>$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1593
#T: Validate a 3 field CSV file
#A: Mark Newman
#D: This pattern validates a 3 field CSV file. I designed it to capture first name, last name and email address in that order.
^(([^,\n]+),([^,\n]+),([^@]+)@([^\.]+)\.([^,\n]+)\n)+([^,\n]+),([^,\n]+),([^@]+)@([^\.]+)\.([^,\n]+)\n?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1594
#T: Number w/wo commas and decimal
#A: John Moore
#D: This re matches numbers with our without commas and with or without exactly two decimal places.
((^([\d]{1,3})(,{1}([\d]{3}))*)|(^[\d]*))((\.{1}[\d]{2})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1595
#T: Valid Date
#A: John Moore
#D: Matches dates in mm/dd/yyyy format. Matches only valid dates -except is unable to test for a leapyear. Always allows February 29th. Allows years from 1901 to 2199.
(?:(?:(?:04|06|09|11)\/(?:(?:[012][0-9])|30))|(?:(?:(?:0[135789])|(?:1[02]))\/(?:(?:[012][0-9])|30|31))|(?:02\/(?:[012][0-9])))\/(?:19|20|21)[0-9][0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1596
#T: floating point using ","
#A: Vengador Escarlata
#D: This is a variation from pattern's Srinivas Gummadi to use a "," in expression for floating point numbers. Este patrón valida una expresión que contenga exclusivamente valores númericos decimales (coma flotante), negativos y exponenciales. El ejemplo mostrado es una variación del original creado por Srinivas Gummadi para permitir tanto el uso de la "," como el "." en notaciones decimales.
^[-+]?[0-9]+[\.\,]?[0-9]*([eE][-+]?[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1597
#T: Formato RUT (identificación personal Chile)
#A: Víctor Herrera Montoya
#D: Verifica que un RUT tenga el formato 00.000.000-X, despues de comprobar el formato será necesario validar su dígito verificador.
^\d{1,2}\.\d{3}\.\d{3}[-][0-9kK]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1598
#T: Dollar Currency Pattern
#A: Fong C.D.
#D: Building on Joe Lynwood's Regex which makes use of a combination of Michael Ash's US Dollar amount and Bri Gipson's eliminating zero input, I've added support for values between 0 and 1. Being relatively new to regex, I hope someone would be able to spot any discrepancies with the code and its supposed function.
#D: Edit 1: Corrected mis-match with non-decimal numbers.
^(([1-9]\d{0,2}(\,\d{3})*|([1-9]\d*))(\.\d{2})?)|([0]\.(([0][1-9])|([1-9]\d)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1599
#T: .Net type name with full assembly name
#A: Sercan AYYILDIZ
#D: .Net full type name with full assembly name 
^(?<type>(\w+(\.?\w+)+))\s*,\s*(?<assembly>[\w\.]+)(,\s?Version=(?<version>\d+\.\d+\.\d+\.\d+))?(,\s?Culture=(?<culture>\w+))?(,\s?PublicKeyToken=(?<token>\w+))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1600
#T: New Zealand phone numbers
#A: CGRdevelopment
#D: Matches New Zealand local, mobile and freecall (0800) phone numbers. 
(^\([0]\d{1}\))(\d{7}$)|(^\([0][2]\d{1}\))(\d{6,8}$)|([0][8][0][0])([\s])(\d{5,8}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1601
#T: Pascal case
#A: Rob
#D: Matches words in PascalCase. Only alphas, no spaces or other special characters, the first character must be upper case. Matches up to 12 PascalCase words.
^([A-Z]{1,}[a-z]{1,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,}[A-Z]{0,}[a-z]{0,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1602
#T: Password with at least 8 characters and at least 3 special symbols
#A: Kristina Kucherova
#D: Password with at least 8 characters, letters or digits and at least 3 special symbols. This regex is not correctly. Sometime it works and sometime it does not %-(. Please help me to fix it. My ICQ: 194-990-072
^.*(?=.{8,})((?=.*\w)((?=.{3,})?(?=.\W))).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1603
#T: HTML server side include tag
#A: Jeremy Backus
#D: Works with virtual or file include type and double or single quotes.  Breaks out include type, include file path, and include file name.
<!--\s*\#\s*include\s+(file|virtual)\s*=\s*(["'])([^"'<>\|\b]+/)*([^"'<>/\|\b]+)\2\s*-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=1604
#T: Newzbin File Name Prefix Stripper
#A: Jim Fritz
#D: Although written specifically to strip Newzbin version 2 and 3 prefixes and the [1] IE adds in Newsbin from NZB file names, this expression can be modified to search for any prefix/suffix combination.  It also provides an example of using of grouping constructs to remove matching text.
(?<=\d{7}_).+((?=\x5B\d\x5D)|.{3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1605
#T: eMail Search Pattern
#A: Jan Philipp Madsen
#D: This Regular Expression searches for a valid eMail address. It uses a list of all the known top-level-domains to verify that the domain is correct. Also Possible to find the IP Address
^([_a-zA-Z0-9-]+\.[_a-zA-Z0-9-]*)\@((([a-zA-Z0-9-]{2,255})\.(ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|de|di|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|in|io|iq|ir|is|it|jo|jm|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|an|nc|ne|nf|ng|ni|nl|no|np|nr|nt|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sq|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|arpa|arts|biz|com|edu|firm|gov|info|int|mil|nato|net|nom|org|rec|store|web))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1606
#T: non zero positive integer
#A: Anurag
#D: used to validate form fields values for positive integer values greater than 0 without explicitly checking if the input form value is greater than 0
^(0+[1-9]|[1-9])[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1607
#T: US/Canadian Addresses
#A: Nick Franceschina
#D: This is built on an Address expression by Ross Hammer (who in turn built on an expression from Michael Ash)... and the zipcode expression from Matthew Aznoe.  This one adds validation for Canadian provinces and postal codes (so it does both US and Canada)
^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[BLKSZRAP]|BC|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ABDEHINOPST]|N[BCDEHJLMSTUVY]|O[HKRN]|P[AERW]|QC|RI|S[CDK]|T[NX]|UT|V[AIT]|W[AIVY]|YT)\s+((\d{5}-\d{4})|(\d{5})|([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\d[A-Za-z]\s?\d[A-Za-z]\d))\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1608
#T: RegEx that match all most all Telephone number pattern
#A: Unnikrishnan
#D: This expression matches all following Telephone number patterns [US Telephone, Indian Telephone, Canadian Telephone & Fax Numbers]. I tested it and its working fine. and hope this will be helpful to u people. suggestion are welcome ! +91-80-1234567 | +91 80 1234567 | +91 80-1234567 | +91-80 1234567 | +91.80.1234567 | +91.80-1234567 | +91-80.1234567 | (91)80-1234567 | (91)80 1234567 | (91)80.1234567 | +91-80-12345678 | +91 80 12345678 | +91 80-12345678 | +91-80 12345678 | +91.80.12345678 | +91.80-12345678 | +91-80.12345678 | (91)80-12345678 | (91)80 12345678 | (91)80.12345678 | +91-484-1234567 | +91 484 1234567 |  +91 484-1234567 | +91-484 1234567 | +91.484.1234567 | +91.484-1234567 |  +91-484.1234567 | (91)484-1234567 | (91)484 1234567 | (91)484.1234567 | +91-484-12345678 | +91 484 12345678 | +91 484-12345678 | +91-484 12345678 | +91.484.12345678 | +91.484-12345678 | +91-484.12345678 | (91)484-12345678 | (91)484 12345678 | (91)484.12345678 | +123-123-1234 | +123 123 1234 | +123 123-1234 | +123-123 1234 | +123.123.1234 | +123.123-1234 | +123-123.1234 | (123)123-1234 | (123)123 1234 | (123)123.1234 | +123-123-1234 | +123 123 1234 | +123 123-1234 | +123-123 1234 | +123.123.1234 | +123.123-1234 | +123-123.1234 | (123)123-1234 | (123)123 1234 | (123)123.1234 | 123-123-1234 | 123 123 1234 | 123 123-1234 | 123-123 1234 | 123.123.1234 | 123.123-1234 | 123-123.1234 | 123-123-1234 | (001)456-789-1234 | 001-456-789-1234 | 4841801234 | +91.1234567890 | +91-1234567890 | +91 1234567890 | 1-561-555-1212 | 1234567890 | 1234-1234567 | 123-12345678 (05)12341234 | 09886657989  - Phone , Telephone
#D: "+91 80 2559 4800" and "91 (80) 234 65453"
preg_match_all("/([\(\+])?([0-9]{1,3}([\s])?)?([\+|\(|\-|\)|\s])?([0-9]{2,4})([\-|\)|\.|\s]([\s])?)?([0-9]{2,4})?([\.|\-|\s])?([0-9]{4,8})/",$string, $phones); 

#U: http://regexlib.com/REDetails.aspx?regexp_id=1609
#T: Last word
#A: Thomas Nielsen
#D: Finds the last word in a string eg. the user in \\domain\user or the extension/file type in a file name.
\w*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1610
#T: Last word
#A: Thomas Nielsen
#D: Finds the last word in a string eg. the user in \\domain\user or the extension/file type in a file name.
\w*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1611
#T: Remove (X)HTML like tags
#A: Shreeve
#D: This simple pattern is useful for removing all HTML tags with or without atributes. It has no removing white spaces
<\s*?[^>]+\s*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1612
#T: Numeric Range
#A: Tadd Stuart
#D: A range of numbers 0-35 optionally including a percent sign and 2 position decimal.
^[0-9]%?$|^1[0-9]%?$|^2[0-9]%?$|^3[0-5]%?$|^[0-9]\.\d{1,2}%?$|^1[0-9]\.\d{1,2}%?$|^2[0-9]\.\d{1,2}%?$|^3[0-4]\.\d{1,2}%?$|^35%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1613
#T: Very Strong Password
#A: Philip
#D: This pattern requires at least two lowercase letters, two uppercase letters, two digits, and two special characters.  There must be a minimum of 9 characters total, and no white space characters are allowed.
^(?=.*[a-z].*[a-z])(?=.*[A-Z].*[A-Z])(?=.*\d.*\d)(?=.*\W.*\W)[a-zA-Z0-9\S]{9,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1614
#T: Date Grouped
#A: Raymond Roelands
#D: Test a date in the format of YYYYMMDD. and returns a match with the grouped date parts. The groups are:
#D: (example 20001101)
#D: DATE - 20011201 (the full date)
#D: year1- 20 (the century)
#D: year2- 01 (the year of the century)
#D: month- 12 (the month)
#D: day  - 01 (the day of the month)
(?<DATE>(?:(?:(?<year1>(?:1[89])|(?:[2468][048]|[3579][26])\N(?!00))(?<year2>00|[02468][1235679]|[13579][01345789])\N(?:(?:(?<month>(?:[0][13578])|(?:1[02]))\N(?<day>0[1-9]|[12][0-9]|3[01]))|\N(?:(?<month>0[469]|11)(?<day>0[1-9]|[12][0-9]|30))|\N(?:(?<month>02)(?<day>0[1-9]|1[0-9]|2[0-8])))|\N(?:(?:(?<year1>(?:[2468][048]|[3579][26])00)|\N(?<year1>(?:(?:1[89])|[2468][048]|[3579][26])\N(?!00))(?<year2>[02468][048]|[13579][26]))\N(?:(?:(?<month>(?:(?:[0][13578])|(?:1[02])))\N(?<day>0[1-9]|[12][0-9]|3[01]))|\N(?:(?<month>0[469]|11)\N(?<day>(?:0[1-9]|[12][0-9]|30)))|\N(?:(?<month>02)(?<day>0[1-9]|[12][0-9])))))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1615
#T: Relative paths in HTML
#A: Joe Theriault
#D: This expression matches all HREF relative paths, but not full URLs or dead # links.  It can be used for selecting paths that need to be updated in HTML that has replaced from its original page onto a new one.  It matches the entire containing tag with the following groups: 1 - the start of the containing tag through the space before the attribute, 2 - the delimiter between the attribute's equal sign and its value (e.g. a double quote), 3 - the attribute value, 4 - the remainder of the tag after the closing attribute value delimiter.
(<(?:.*?)\s)href\s*=([\s"'])*/?([^\2:#]+?)\2((?:.*?)>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1616
#T: website URL
#A: kiran kumar
#D: I think this is one of the website url we can validate
(http://|)(www\.)?([^\.]+)\.(\w{2}|(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1617
#T: Bugtraq logregex property for trac
#A: Markus Peter
#D: This expression can be used to set the bugtraq:logrexep property of a subversion repository. It uses the format supported by trac and enables for example tortoisesvn to transform the issue numbers used in the commit messages into links pointing to the issue in the bugtracker.
(refs|references|re|closes|closed|close|see|fixes|fixed|fix|addresses) #(\d+)(( and |, | & | )#(\d+))*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1618
#T: Time Regex
#A: Mike Clark
#D: This expression matches for all times in standard AM/PM 12-hour clock format with a colon between hour and minute, and a space between numbers and AM/PM.  AM/PM is case insensitive.  It also matches for valid 24 hour times
^(((0?[1-9])|([1][0-2])):[0-5][0-9]\s(([Aa][Mm]|[Pp][Mm])))|(([0-1][0-9]|[2][0-3])([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1619
#T: South African VAT registration number
#A: Chris Morton
#D: Useful for verifying VAT Registration Numbers
((19|20)[\d]{2}/[\d]{6}/[\d]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1620
#T: Istat Code
#A: Alessandro Forte
#D: This pattern match the Italian Istat Ateco Code (Codice Istat) updated to Istat Declaration Ateco 2004
\d{2}[.]{1}\d{2}[.]{1}[0-9A-Za-z]{1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1621
#T: Iban Italy
#A: Alessandro Forte
#D: International Bank Account Number (IBAN) Italian. Identify Bank account in Italy.
IT\d{2}[ ][a-zA-Z]\d{3}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{4}[ ]\d{3}|IT\d{2}[a-zA-Z]\d{22}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1622
#T: email with german umlaut
#A: robert
#D: allows numbers, umlauts, dots and bars
^\w[a-zA-Z0-9öäüÖÄÜ\.\-_]+@[a-zA-Z0-9öäüÖÄÜ\-_]+?\.[a-zA-Z]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1623
#T: File Path
#A: Jens K. Suessmeyer
#D: Checks for a valid Filepath, either located on a local drive or a UNC share on the network. Use the following string to include the regex within a XML defintion file: RegEx="^([a-zA-Z]\:)|(\\)(\\{1}|((\\{1})[^\\]([^/:*?<>"|]*(?<!\[\])))+)$"/> (encode the appropiate HTML characters like <,>," with the appropiate HTML codes < = (ampersand)lt; > = (ampersand)gt; " = (ampersand)quote;
^(([a-zA-Z]\:)|(\\))(\\{1}|((\\{1})[^\\]([^/:*?<>"|]*))+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1624
#T: Hexadecimal color
#A: Asen Bozhilov
#D: Test hex color for valid.
#F: i
^#?(?:[0-9A-F]{3}){1,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1625
#T: Visa Credit Card
#A: brad
#D: Matches Visa CC types 13 or 16 digits starting with 4 including Visa CC, Visa ATM only, Visa Electron and Visa Delta.  Safe for international and will NOT match "^(49)" Switch debit cards.
(^4\d{12}$)|(^4[0-8]\d{14}$)|(^(49)[^013]\d{13}$)|(^(49030)[0-1]\d{10}$)|(^(49033)[0-4]\d{10}$)|(^(49110)[^12]\d{10}$)|(^(49117)[0-3]\d{10}$)|(^(49118)[^0-2]\d{10}$)|(^(493)[^6]\d{12}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1626
#T: Maestro Credit Card 
#A: brad
#D: Meastro ONLY card matching - begins with "50" or "56-58" or "6" & 13 to 20 total digits. Overlap of Discover, Solo and Switch is handled and NOT matched.
(^(5[0678])\d{11,18}$)\N|(^(6[^0357])\d{11,18}$)\N|(^(601)[^1]\d{9,16}$)\N|(^(6011)\d{9,11}$)\N|(^(6011)\d{13,16}$)\N|(^(65)\d{11,13}$)\N|(^(65)\d{15,18}$)\N|(^(633)[^34](\d{9,16}$))\N|(^(6333)[0-4](\d{8,10}$))\N|(^(6333)[0-4](\d{12}$))\N|(^(6333)[0-4](\d{15}$))\N|(^(6333)[5-9](\d{8,10}$))\N|(^(6333)[5-9](\d{12}$))\N|(^(6333)[5-9](\d{15}$))\N|(^(6334)[0-4](\d{8,10}$))\N|(^(6334)[0-4](\d{12}$))\N|(^(6334)[0-4](\d{15}$))\N|(^(67)[^(59)](\d{9,16}$))\N|(^(6759)](\d{9,11}$))\N|(^(6759)](\d{13}$))\N|(^(6759)](\d{16}$))\N|(^(67)[^(67)](\d{9,16}$))\N|(^(6767)](\d{9,11}$))\N|(^(6767)](\d{13}$))\N|(^(6767)](\d{16}$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1627
#T: MasterCard Credit Card
#A: brad
#D: Matches MasterCard credit cards.  International safe, no overlap with other cards.
^5[1-5]\d{14}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1628
#T: Discover Credit Card
#A: brad
#D: Discover Credit Card matching.  International safe, no overlap
(^(6011)\d{12}$)|(^(65)\d{14}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1629
#T: AMEX Credit Card
#A: brad
#D: AMEX Credit Card match.  International safe
(^3[47])((\d{11}$)|(\d{13}$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1630
#T: Solo Credit card
#A: brad
#D: Solo Credit Card match.  International safe.
(^(6334)[5-9](\d{11}$|\d{13,14}$))\N|(^(6767)(\d{12}$|\d{14,15}$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1631
#T: Switch Credit Card
#A: brad
#D: Switch CC match.  International safe.
(^(49030)[2-9](\d{10}$|\d{12,13}$))\N|(^(49033)[5-9](\d{10}$|\d{12,13}$))\N|(^(49110)[1-2](\d{10}$|\d{12,13}$))\N|(^(49117)[4-9](\d{10}$|\d{12,13}$))\N|(^(49118)[0-2](\d{10}$|\d{12,13}$))\N|(^(4936)(\d{12}$|\d{14,15}$))\N|(^(564182)(\d{11}$|\d{13,14}$))\N|(^(6333)[0-4](\d{11}$|\d{13,14}$))\N|(^(6759)(\d{12}$|\d{14,15}$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1632
#T: JCB credit card
#A: brad
#D: JCB cc match.  International safe
(^(352)[8-9](\d{11}$|\d{12}$))|(^(35)[3-8](\d{12}$|\d{13}$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1633
#T: Dinner credit card
#A: brad
#D: Diners CC match.  International safe
(^(30)[0-5]\d{11}$)|(^(36)\d{12}$)|(^(38[0-8])\d{11}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1634
#T: Cart Blance Credit Card
#A: brad
#D: Cart Blance Credit Card match. International safe
^(389)[0-9]{11}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1635
#T: EnRoute Credit Card
#A: brad
#D: EnRoute Credit Card match. international safe.
(^(2014)|^(2149))\d{11}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1636
#T: url pattern
#A: richardz
#D: match most url except for 10.100.200
(http(s)?|ftp(s)?://)?([\w-]+\.)+(BIZ|COM|EDU|GOV|INT|MIL|NET|ORG|PRO|AERO|ARPA|COOP|INFO|NAME|NATO|[A-Z]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1637
#T: UK Debit Cards
#A: brad
#D: Matches any of Solo, Switch or Maestro.  International safe. Will not match on Discover, Visa or Mastercard.  For example; Most recommendations for matching Visa are that they start with "4".  If outside the US, this are incomplete on will falsly ID most Switch cards as Visa.
(^(5[0678])\d{11,18}$)|(^(6[^05])\d{11,18}$)|(^(601)[^1]\d{9,16}$)|(^(6011)\d{9,11}$)|(^(6011)\d{13,16}$)|(^(65)\d{11,13}$)|(^(65)\d{15,18}$)|(^(49030)[2-9](\d{10}$|\d{12,13}$))|(^(49033)[5-9](\d{10}$|\d{12,13}$))|(^(49110)[1-2](\d{10}$|\d{12,13}$))|(^(49117)[4-9](\d{10}$|\d{12,13}$))|(^(49118)[0-2](\d{10}$|\d{12,13}$))|(^(4936)(\d{12}$|\d{14,15}$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1638
#T: Signed Integers with Commas
#A: Richard
#D: Allows any integer, signed (+/-) or not, with or without commas, or zero (0), or blank.
(^\-|\+)?([1-9]{1}[0-9]{0,2}(\,\d{3})*|[1-9]{1}\d{0,})$|^0?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1639
#T: *.css without http
#A: Krzysztof Chełchowski
#D: get all css links, tags ect without http,  i needed this to my web crawler, maybe somebody need this to ;)_
(href=|url|import).*[\'"]([^(http:)].*css)[\'"]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1640
#T: ISBN 10 or 13
#A: Michael Fienen
#D: Validates both ISBN 10 and ISBN 13 numbers, and confirms ISBN 13 numbers start with only 978 or 979.
^(97(8|9))?\d{9}(\d|X)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1641
#T: Positive Integer with comma separated 
#A: Zohar
#D: must have comma separated , can't be biger then  999,999
#D: Thanks to Harel!
^[0-9]{1,3}$|^[0-9]{1,3}\,[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1642
#T: merge spec. number and ip address
#A: abdullah
#D: i can use one regex one times, e.g. i can use regex: ip-address separatly. I can use also regex for NUMBER separatly. But how can i merge this 2 regex to one regex, that i can use my expression for numbers or for ip addresses together.
For IP-Address:(?<First>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Second>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Third>2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?<Fourth>2[0-4]\d|25[0-5]|[01]?\d\d?)  For Number: (\+|\*{0,2})?(\d*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1643
#T: Another CSV
#A: Brent Woods
#D: Returns everything between the commas including the quotes anything inside the quotes is ignored.
#D: Only works per single line.
*"[^,]*" *| *".*" *| *[^,]* *

#U: http://regexlib.com/REDetails.aspx?regexp_id=1644
#T: BBCode matching (opened/closed/with arguments/attributes)
#A: the DtTvB
#D: Matches BBCode, non-recursive. You must recursively run the pattern with each resulting subpattern to get all the tag.
(\[([^/].*?)(=(.+?))?\](.*?)\[/\2\]|\[([^/].*?)(=(.+?))?\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1645
#T: VB Style Quoted String
#A: the DtTvB
#D: This will match the VB-style quoted string. That means to use " in the quoted string you must use "" instead.
"(""|[^"])*"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1646
#T: C-Style Quoted String version 2
#A: the DtTvB
#D: This time is for C-Style Quoted String matching. So to use " in the quoted string you need to use \" and if you wanted to use \ in your string, use \\.
"(\\.|[^"])*"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1647
#T: Microsoft Printing Number ranges validation
#A: Andrew McDuff
#D: Just a beginner....here's something I'm using to emulate the Microsoft "Print" functionality, where you can enter page numbers to print seperated by commas or specify a range using the "-" symbol. The expression checks across a whole string looking for anything that is NOT equal to a number, a minus symbol, a comma and a space character. You can use this expression to do a quick true-false check to see if the user has entered a valid string / page numbers. Later you could then write a routine to sort and / or process the input. Nothing fancy but might help someone. Comments welcome.
[^\d^\-^\,^\x20]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1648
#T: Floating Point Trimmer
#A: Cory Bonesteel
#D: Removes extra zeros after the decimal place in strings containing floating-point values.  Designed to be used on files generated by the ArmA mission editor, however it appears to be feasible for most source code files (c++, vb, etc.).
([^0-9$\.][0-9]+\.[0-9]+)0([^0-9\.])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1649
#T: File Extension
#A: Quang D. Nguyen
#D: Matching any file extension.
(^\*\.[a-zA-Z][a-zA-Z][a-zA-Z]$)|(^\*\.\*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1650
#T: 24hr time
#A: Radko P
#D: matching times from 0[0]:0[0] to 23:59
^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1651
#T: UNIX ls -l
#A: Donald Kemper
#D: GLOB the output of an "ls -l" command to extract specific details.  It takes into account issues with older files/directories having a year in place of an hour:minute entry.
^([A-Za-z\-]+)\s+(\w+)\s+([A-Za-z0-9_\-\.]+)\s+([A-Za-z0-9_\-\.]+)\s+(\d+)\s+(.{3} [0-9 ]{2} ([0-9][0-9]:[0-9][0-9]| [0-9]{4}))\s+(.+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1652
#T: Windows Folder Validation
#A: Ben Leishman
#D: Validates entry for a valid Windows folder name. Excludes all forbidden characters.
^[^\\\/\?\*\"\>\<\:\|]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1653
#T: Simple Email check
#A: Fernando Leal de la Garza
#D: Simple Email check, ideal for a quick mail check.
^[a-zA-Z0-9\_\-]+[a-zA-Z0-9\.\_\-]*@([a-zA-Z0-9\_\-]+\.)+([a-zA-Z]{2,4}|travel|museum)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1654
#T: Alphanumeric revised
#A: steve mandel
#D: alphanumeric - no space allowed - requires at least one character
^[\w]{1,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1655
#T: Strip RTF Formatting
#A: Derik Palacino
#D: Removes RTF formatting from a string
^\{(.+)|^\\(.+)|(\}*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1656
#T: Companies House
#A: Alex Richards
#D: This Regular Expression is used to match the Companies House 503 Reference number that is given when a customer places an online order.www.companieshouse.gov.uk
^[0-9]{3}[-|/]{1}[0-9]{6}[-|/]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1657
#T: Company Number - Limited
#A: Alex Richards
#D: Thie expression is used to match a United Kingdom Limited Company number in the UK. This is for Companies registered in England & Wales ONLY. This does not include Scotland.
^[0-9]{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1658
#T: Company Number - Limited SCOTLAND
#A: Alex Richards
#D: Thie expression is used to match a United Kingdom Limited Company number in the UK. This is for Companies registered in Scotland. This is not for Companies registered in England & Wales.
^[SC]{2}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1659
#T: New Style UK Number Plates
#A: Alex Richards
#D: This expression can be used to check against the format of a United Kingdom Vehicle Registration plate in the new style.
^[A-Za-z]{2}[ ]{0,1}[0-9]{2}[ ]{0,1}[a-zA-Z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1660
#T: Old Style UK Number Plates
#A: Alex Richards
#D: This expression can be used to check against the format of a United Kingdom Vehicle Registration plate in the OLD style.
^[a-zA-Z]{1}[0-9]{0,3}[ ]{0,1}[a-zA-Z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1661
#T: Email Address
#A: Alex Richards
#D: Expression to check for .com email addresses
^[a-zA-z0-9]+[@]{1}[a-zA-Z]+[.]{1}[a-zA-Z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1662
#T: ISBN Checker
#A: Alex Richards
#D: Expression to check for a valid ISBN number
^[ISBN]{4}[ ]{0,1}[0-9]{1}[-]{1}[0-9]{3}[-]{1}[0-9]{5}[-]{1}[0-9]{0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1663
#T: UK Mobile Phone Number Check
#A: Alex Richards
#D: UK Mobile phone number check
^[0-9]{0,5}[ ]{0,1}[0-9]{0,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1664
#T: Companies House
#A: Alex Richards
#D: Companies House Postal Search account number expression
[cC]{1}[0-9]{0,7}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1665
#T: IPv6 address
#A: Dale Clark
#D: Perl regex for IPv6 addresses. Tested against RFC 2373 specs.
(([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){7})|([0-9A-Fa-f]{1,4}(:[0-9A-Fa-f]{1,4}){5}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(:(:[0-9A-Fa-f]{1,4}){1,6})|(:(:[0-9A-Fa-f]{1,4}){0,4}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|([0-9A-Fa-f]{1,4}:(:[0-9A-Fa-f]{1,4}){1,5})|([0-9A-Fa-f]{1,4}:(:[0-9A-Fa-f]{1,4}){0,3}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){1,4})|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,2}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){1,3})|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4})?:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){1,2})|(([0-9A-Fa-f]{1,4}:){4}:(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})|(([0-9A-Fa-f]{1,4}:){5}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,6}:)|(::))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1666
#T: IPv4 address
#A: Dale Clark
#D: Perl regex for IPv4 addresses. Tested against RFC 1035 specs.
((\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))(\.(\d|[1-9]\d|1\d{1,2}|2([0-4]\d|5[0-5]))){3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1667
#T: Private IP address
#A: Mahesh Ramakrishnan
#D: It matches private IP addresses. Private IP addresses (as defined by RFC 1918) are not routable on public Internet. This would help if you want to grant some previlege only to the users from within local network. ***Importnat*** This pattern assumes that the input is a valid IP address. You many need to make sure the input is a valid IP address. 
(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^127\.0\.0\.1)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1668
#T: pattern matching, start, exclusion, and ending with group
#A: Luciano
#D: This regex should return a list of lines that start with either the word 'spool', 'edit', 'start' or the symbol @,  followed by 1 to 3 spaces, followed by any character except an ampersand, and ending with the file extension .log.   I am having difficulty to get this to work properly.  It seems that it gets stuck determining 1 to three spaces.
^(edit|start|@|spool+)\s{1,3}[^&]*\.(log)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1669
#T: Dutch zipcode
#A: Erik
#D: Dutch zipcode. The non-matching code does not match because lettercombinations SS, SA and SD are not allowed. (historic reasons ?).
^[1-9][0-9]{3}[ ]?(([a-rt-zA-RT-Z]{2})|([sS][^dasDAS]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1670
#T: date format
#A: Balram Watwani
#D: match the date pattren start with year and seprated by (-).
(?<Year>(?:\d{4}|\d{2}))-(?<Month>\d{1,2})-(?<Day>\d{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1671
#T: date format
#A: Balram Watwani
#D: match the date pattren start with year and seprated by (-).
(?<Year>(?:\d{4}|\d{2}))-(?<Month>\d{1,2})-(?<Day>\d{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1672
#T: Email Address
#A: Balram Watwani
#D: find out the correct email format
([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1673
#T: Hyperlink
#A: Balram Watwani
#D: find out the hyperlink in the text
href="(?<Link>.*?)"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1674
#T: vowel
#A: Balram Watwani
#D: repetation of more than one vowel
[aeiou]{2,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1675
#T: text b/w the html tags
#A: Balram Watwani
#D: text b/w the html tags
<(?<tag>\w*)>(?<text>.*)</\k<tag>>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1676
#T: Canadian Postal Code
#A: Balram Watwani
#D: Find out Canadian Postal Code in the text or html file or xml file
\b[A-Z-[DFIOQUWZ]]\d[A-Z-[DFIOQU]]\ +\d[A-Z-[DFIOQU]]\d\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1677
#T: double words
#A: Balram Watwani
#D: to find the double same word
\b(\w+)\s+\1\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1678
#T: All words
#A: Balram Watwani
#D: to find all text but not signs
\w+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1679
#T: 5 or 6 letters word
#A: Balram Watwani
#D: To find five or six letters word in the text.
(?<=(?:\s|\G|\A))\w{5,6}(?=(?:\s|\Z|\.|\?|\!))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1680
#T: complet sentance
#A: Balram Watwani
#D: to find out the sentances in the text end with full stop (.)
(?sx-m)[^\r\n].*?(?:(?:\.|\?|!)\s)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1681
#T: comma seprated values
#A: Balram Watwani
#D: To find out eht value or text wich is seprated by commas
^(?:(?<Item>[^,\n]+),)+(?<LastItem>[^,\n]+)[\r\n]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1682
#T: name value pair
#A: Balram Watwani
#D: To find out the name value pair in the text
(?<Keyword>\w+)\s*=\s*(?<Value>.*)((?=\W$)|\z)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1683
#T: social security number
#A: Balram Watwani
#D: To find out social security number
\d{3}-\d{2}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1684
#T: Numbers from 1-12
#A: Brooks
#D: Matches numbers from 1-12 without leading zeros
^([1-9]$)|(1[0-2]$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1685
#T: Regular Expression for dd MMM yyyy date format with leap year
#A: Amit
#D: It validates the leap year also
Date Format in dd MMM yyyy ----> (^(3[01]|[12][0-9]|0?[1-9])\s{1}(Jan|Mar|May|Jul|Aug|Oct|Dec)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(30|[12][0-9]|0?[1-9])\s{1}(Apr|Jun|Sep|Nov)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(2[0-8]|1[0-9]|0?[1-9])\s{1}(Feb)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(29)\s{1}(Feb)\s{1}([2468][048]00)$)|(^(29)\s{1}(Feb)\s{1}([3579][26]00)$)|(^(29)\s{1}(Feb)\s{1}([1][89][0][48])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][0][48])$)|(^(29)\s{1}(Feb)\s{1}([1][89][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([1][89][13579][26])$)|(^(29)\s{1}(Feb)\s{1}([/])([2-9][0-9][13579][26])$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1686
#T: Regular Expression for dd MMM yyyy date format with leap year
#A: Amit
#D: It validates the leap year also
Date Format in dd MMM yyyy ----> (^(3[01]|[12][0-9]|0?[1-9])\s{1}(Jan|Mar|May|Jul|Aug|Oct|Dec)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(30|[12][0-9]|0?[1-9])\s{1}(Apr|Jun|Sep|Nov)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(2[0-8]|1[0-9]|0?[1-9])\s{1}(Feb)\s{1}((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(29)\s{1}(Feb)\s{1}([2468][048]00)$)|(^(29)\s{1}(Feb)\s{1}([3579][26]00)$)|(^(29)\s{1}(Feb)\s{1}([1][89][0][48])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][0][48])$)|(^(29)\s{1}(Feb)\s{1}([1][89][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([2-9][0-9][2468][048])$)|(^(29)\s{1}(Feb)\s{1}([1][89][13579][26])$)|(^(29)\s{1}(Feb)\s{1}([/])([2-9][0-9][13579][26])$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1687
#T: UK Postcode
#A: Debashish Saha
#D: This regex have been created as per the information provided on http://www.govtalk.gov.uk/gdsc/html/noframes/PostCode-2-1-Release.htm. This expression will allow the postcodes with space or without space.
^(GIR\\s{0,1}0AA|[A-PR-UWYZ]([0-9]{1,2}|([A-HK-Y][0-9]|[A-HK-Y][0-9]([0-9]|[ABEHMNPRV-Y]))|[0-9][A-HJKS-UW])\\s{0,1}[0-9][ABD-HJLNP-UW-Z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1688
#T: Base64
#A: Timo Weingärtner
#D: Matches any whitespace-free Base64. Complete with handling of end sequences.
^([0-9A-Za-z+/]{4})*([0-9A-Za-z+/][AQgw]==|[0-9A-Za-z+/]{2}[AEIMQUYcgkosw048]=)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1689
#T: New Zealand mobile phone 
#A: Adam Yang
#D: This pattern matches the New Zealand mobile phone number. Only 021 025 027 029 number are matched.
(^[0][2][1579]{1})(\d{6,7}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1690
#T: Match Valid UK Postal District in a partial or whole Postcode
#A: Aaron Navarro
#D: This will validate a partial postcode beginning with the postal district on up to the whole postcode, returning the two halves in sub-expressions.  The main purpose is to return a valid postal district from a partial or whole postcode. The real value in this regex lies in the fact that it will process the postcode correctly regardless of whether or not the space in present after the district. So the accepted formats are A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (and the same 6 formats without the space are also accepted). Requires postcodes to be upper-case.
^(GIR|[A-Z]\d[A-Z\d]?|[A-Z]{2}\d[A-Z\d]?)[ ]??(\d[A-Z]{0,2})??$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1691
#T: Match Valid UK Postcode
#A: Aaron Navarro
#D: Validates a complete UK postcode. Returns the two halves in sub-expressions. Supports the following 7 formats: A1 1AA, A11 1AA, A1A 1AA, AA1 1AA, AA11 1AA, AA1A 1AA GIR 0AA (** And the same 7 formats without the space are also accepted).  (requires postcodes to be upper-case)
^(GIR|[A-Z]\d[A-Z\d]??|[A-Z]{2}\d[A-Z\d]??)[ ]??(\d[A-Z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1692
#T: Slovenian (Mobile) phone number
#A: Oto Brglez
#D: I'm using this to match Slovenian phone numbers. It's a bit rusty... If you have better version or updated please send it to me.
^(([0-9]{3})[ \-\/]?([0-9]{3})[ \-\/]?([0-9]{3}))|([0-9]{9})|([\+]?([0-9]{3})[ \-\/]?([0-9]{2})[ \-\/]?([0-9]{3})[ \-\/]?([0-9]{3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1693
#T: Tab Delimited Parser
#A: Thomas Cox
#D: I wrote this for a company that was importing a variety of rich text separated by tabs. By applying this regular expression, you can filter out even empty fields which return as a single tab qualified by a tab in front of them unless its the end of the string, which will return a single tab as well. You can filter out the returned tabs in your .NET code.
#D: For NEWBIES, this expression says:
#D: "Return anything but Tabs, and separate data by the tabs" [^\t]+
#D: "Or" |
#D: "For Empty Tabs, Return those that have a tab in front of them" \t(?=\t)
#D: "Or" |
#D: "Return Empty Tabs at the end of a string"
#D: \t$
#D: Hope this helps you on your journey in learning Regular Expressions! You can contact me using my form at http://www.thomasdcox.com/contactme.aspx
[^\t]+|\t(?=\t)|\t$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1694
#T: Network FilePath Directory
#A: John Bruce
#D: This is a Regex for .Net to verify a Network FilePath with directory only
@"^([\\][\\][^\\\/"":*?<>|]+)(([\\][^\\/"":*?<>|]+)*([\\]?))$"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1695
#T: Drive FilePath Directory
#A: John Bruce
#D: This is a Regex for .Net to verify a DriveFilePath with directory only
@"^([A-Za-z]:)(([\\][^\\/"":*?<>|]+)*([\\])?)$"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1696
#T: Filename
#A: John Bruce
#D: This is a Regex for .Net to verify a filename only
@"^([^\\/"":*?<>|.])([^\\/"":*?<>|]*)$"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1697
#T: Drive FilePath with filename
#A: John Bruce
#D: This is a Regex for .Net to verify a Drive FilePath with required filename
^([A-Za-z]:)(([\\][^\\/"":*?<>|]+)*([\\]([^\\/"":*?<>|.])([^\\/"":*?<>|]*))+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1698
#T: Network FilePath with filename
#A: John Bruce
#D: This is a Regex for .Net to verify a Network FilePath with required filename
@"^([\\][\\][^\\\/"":*?<>|]+)(([\\][^\\/"":*?<>|]+)*([\\]([^\\/"":*?<>|.])([^\\/"":*?<>|]*)+))$"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1699
#T: Proper noun finder
#A: Adam Brunner
#D: Tries to find the proper nouns in a text
((?!(This|It|He|She|[MTWFS][a-z]+day|[JF][a-z]+ary|March|April|May|June|July|August|[SOND][a-z]+ber))(?:[A-Z]+\.\s?)*(?:(?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+)(?:(\b\s?((?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+|[A-Z]+\.|on|of|the|von|der|van|de|bin|and))*(?:\s*(?:[a-zA-Z]+-?)?[A-Z][a-zA-Z]+))?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1700
#T: min-max field length
#A: Maud Dib
#D: Matches 1-1500 characters including carriage returns ("\r\n")
^[\w\W]{1,1500}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1701
#T: Link Text and URL from anchor
#A: Ariel Merrell
#D: Captures an html anchors URL and Link Text.  Could be used to clean up formatting of links in an html document.
<a.+?href\=(?<link>.+?)(?=[>\s]).*?>(?<lnkText>.+?)</a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1702
#T: Capture Text between style tags
#A: Ariel Merrell
#D: A blogger needed a regex to capture the text between style tags.  
<style.*?>(?<StyledText>.*)<\s*?/\s*?style.*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1703
#T: Date and time validation
#A: Prem
#D: The date field takes all values with slashes. Leap year is taken care of Year has to be specified in 4digit. Time is a 12hrclock taking am n pm(case insensitive). AM or Pm has to be specified. Not suited for 24hr clock. In the format of SQL Server datetime field
^((((0?[1-9]|1[012])/(0?[1-9]|1\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(19|[2-9]\d)\d{2}|0?2/29/((19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00))))[\s]((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1704
#T: AW Short Coordinate
#A: Slysoft
#D: This tests, are entered AW coordinates in correct short format, and it has no world info
^[0-9]+[NnSs] [0-9]+[WwEe]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1705
#T: More versatile date matcher
#A: Vadim Dribinsky
#D: Matches months from 1 to 19 (allows for preceding 0), date from 00 to 39, years - starting with 10, 19, 20 or 29.
^[01]*[0-9]\/[0-3]*[0-9]\/[12][09][0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1706
#T: SqlServer Floating point
#A: Andrew
#D: SqlServer seems to throw an error when using higher than e308 for e-309 it just makes the value = 0. Either way, this regexp seems to work for me. and allows for empty string as well. To negate the empty string pass through in asp.net just add a required field validator--if your already program asp.net you probably already know that though : ) .
^(([+-]?)(?=\d|\.\d)\d*(\.\d*)?([Ee]([+-]?([12]?\d\d?|30[0-8])))?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1707
#T: 24H Time
#A: nikneem
#D: Checks time in 24 hours notation, however this one is shorter than the ones I found on regexplib
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1708
#T: tab-delimited numbers
#A: Helen Thuleen
#D: 4 positive numbers or decimals whose values are less than 1000 separated by white-space with or without trailing white-space. This has a problem where whole numbers greater than 1000 are allowed.  Explaination:
#D: ^     (start of string)
#D: {1,3} (1 to 3 digits - to check < 1000)
#D: \.?   (zero or one decimal points)
#D: \d*   (zero or more digits)
#D: s+    (one or more white-space characters)
#D: {3}   (first pattern in parens repeats exactly 3 times)
#D: s*    (zero or more white-space characters)
#D: $     (end of string)
^([0-9]{1,3}\.?\d*\s+){3}([0-9]{1,3}\.?\d*\s*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1709
#T: Filter Other Domain Names
#A: Michael Fienen
#D: This type of filter can be used if you're trying to get rid of results from a report or something not originating from a given domain of the format domainname.tld.  Anything matching the pattern can then be excluded, deleted, etc. (Like with a Google Mini, GSA, or site auditing software)
https?://(?!\S*?domainname\.tld/)\S*?/

#U: http://regexlib.com/REDetails.aspx?regexp_id=1710
#T: Cleaning HTML
#A: Gordon Buxton
#D: following a bit of work this morning trying to get something to strip out arbitrary html but leave 'known' tags in place, we have come up with the following which may be useful. This uses the 'negative lookahead' construct using '?!'  It looks for an angle bracket and perhaps a backslash, as long as it is *not* followed by one of the terms in the ?! section. The brackets in this section do not return a value, they are part of the construct. This regexp can therefore be used to replace all unknown tags  with blanks. Obviously you can add other 'good' html tags to the list.
<\/{0,1}(?!\/|b>|i>|p>|a\s|a>|br|em>|ol|li|strong>)[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1711
#T: Cleaning HTML
#A: Gordon Buxton
#D: following a bit of work this morning trying to get something to strip out arbitrary html but leave 'known' tags in place, we have come up with the following which may be useful. This uses the 'negative lookahead' construct using '?!'  It looks for an angle bracket and perhaps a backslash, as long as it is *not* followed by one of the terms in the ?! section. The brackets in this section do not return a value, they are part of the construct. This regexp can therefore be used to replace all unknown tags  with blanks. Obviously you can add other 'good' html tags to the list.
<\/{0,1}(?!\/|b>|i>|p>|a\s|a>|br|em>|ol|li|strong>)[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1712
#T: Panamanian Government ID (Cedula)
#A: Didimo Grimaldo
#D: The Panamanian "cedula" is the equivalent of the USA's Social Security Number or the Dutch SOFI number. It is composed of three groups. The 2nd and 3rd groups are digits only. The first group  typically has a number between 1-10 only. But in some cases it has N (naturalized) or E (foreigner) or PE (panamanian born abroad). And in some ocassions a number followed by AV meaning the person was born before the "cedula" system came into existence..
#D: Shortcomings of this long regex are: a)any character beyond the 3rd group is not flagged as a non-match
^(?<prov>10)(?<tipo>(AV))?-(?<tomo>\d{1,4})-(?<folio>\d{1,5})|^(?<prov>[1-9])(?<tipo>(AV))?-(?<tomo>\d{1,4})-(?<folio>\d{1,5})|^(?<tipo>(E|N|PE))-(?<tomo>\d{1,4})-(?<folio>\d{1,5})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1713
#T: match web pictrue's (eg. jpg) address
#A: searching
#D: match web pictrue's address,must be full path,include http head.
https?://[\w./]+\/[\w./]+\.(bmp|png|jpg|gif)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1714
#T: Numbers sepereted by comma
#A: Pankaj Bisane
#D: This pattern matches numbers separated by comma
^([0-9][,]?)*([0-9][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1715
#T: VBScript Declaration
#A: Laurens Stötzel
#D: Matches any VBScript method declaration (= no "As [datatype]" support), supports line wraps, only matches valid argument/method names, Public/Private and arguments are optional.
#D: First regex, please comment ;)
^[\s]*(?:(Public|Private)[\s]+(?:[_][\s]*[\n\r]+)?)?(Function|Sub)[\s]+(?:[_][\s]*[\n\r]+)?([a-zA-Z][\w]{0,254})(?:[\s\n\r_]*\((?:[\s\n\r_]*([a-zA-Z][\w]{0,254})[,]?[\s]*)*\))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1716
#T: Russian stemmer
#A: bask
#D: Russian stemming
((?[??]))|((??|????|??????|??|????|??????)|((?<=[??])(?|???|?????))|(??|??|??|??|???|???|??|??|??|??|??|??|??|??|???|? ??|???|???|??|??|??|??|??|??|??|??))|(((???|???|???|????|????|???|???|???|??|??|??|??|?? |??|??|???|???|???|??|???|???|??|??|???|???|???|?? ?|??|?)|((?<=[??])(??|??|???|???|??|?|?|??|?|??|??|??|??|??|??|???| ???))))|((?|??|??|??|??|?|????|???|???|??|??|?|???|??|??|?? |?|???|??|???|??|??|??|?|?|??|???|??|?|?|??|??|?|? ?|??|?)(\ ))|([^?????????][?????????]+[^?????????]+[?????????].*(?<=?)????)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1717
#T: Match Valid HTML Tags As Browser
#A: John Smith
#D: This should match all valid HTML 4.01 tags as a browser would recognize. If you miss a 2nd " it will continue until it finds one to pair with, so if it doesn't find one, it continues until the end. This is how most browsers work I believe. It does have a few flaws, it will match </img> and </input> which is weird, but perhaps I'll fix that eventually.
<(/)?(a|abbr|acronym|address|applet|area|b|base|basefont|bdo|big|blockquote|body|br|button|caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|em|fieldset|font|form|frame|frameset|h[1-6]|head|hr|html|i|iframe|img|input|ins|isindex|kbd|label|legend|li|link|map|menu|meta|noframes|noscript|object|ol|optgroup|option|p|param|pre|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|xmp){1}(\s(\"[^\"]*\"*|[^>])*)*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1718
#T: Allowing only single space in between two words
#A: Swapnil Shejul
#D: This Regular expression will simply not allow more than a single space to be entered between two words of a sentence.It will also prohibit user to enter space at the begining and at the end of a sentence.It will require a minimum of juz 2 alphabets for making it a valid expression
#D: -By Swapnil Shejul
([a-zA-Z]{1}[a-zA-Z]*[\s]{0,1}[a-zA-Z])+([\s]{0,1}[a-zA-Z]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1719
#T: Easiest URL Link
#A: Oz
#D: As always, I couldn't find a regex that worked for me. It only covers full urls with http:// and https://, obviously if you want to add ftp:// then change the first part to: (http://|https://|ftp://) etc..., you get my drift. If you want to cover everything, like short urls, try this site: http://internet.ls-la.net/folklore/url-regexpr.html
(http://|https://)([a-zA-Z0-9]+\.[a-zA-Z0-9\-]+|[a-zA-Z0-9\-]+)\.[a-zA-Z\.]{2,6}(/[a-zA-Z0-9\.\?=/#%&\+-]+|/|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1720
#T: dd MONTH YYYY
#A: Kevin McDonagh
#D: A basic regexp to find occurences of human readable text in the form of dd MONTH YYYY
([1-9]|[12][0-9]|3[01])\s(J(anuary|uly|une)|February|Ma(rch|y)|April|August|(Octo|Decem|Septem|Novem)ber)\s[1-9][0-9]{3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1721
#T: Strong Password
#A: Chris Stead
#D: The basic expression requires at least 1 lower case, 1 upper case, 1 numeric, 1 non-word and no whitespace.
#D: <br /><br />
#D: The format of the expression lends itself to being parameterised, thus in C# I have a method that returns a modified pattern based on passed in parameters e.g.
#D: <br /><br />return "^(?=(.*[a-z]){" + minLowerCase.ToString() + ",})"<br />      + "(?=(.*[\d]){" + minNumeric.ToString() + ",})"<br />        ... <br />      + ".{" + minLength.ToString() + "," + maxLength.ToString() + "}$");<br /><br />Its then possible to set the password strength via configuration files which require strong passwords in production environments, but allow weaker passwords in development environments.
^(?=(.*[a-z]){1,})(?=(.*[\d]){1,})(?=(.*[\W]){1,})(?!.*\s).{7,30}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1722
#T: US Phone with/without Extension (.NET)
#A: Jorin Slaybaugh
#D: Fairly universal regex for matching any US Phone number in .net.  It basically matches the 10 digit phone number using the common US patterns, and allows for any text after the fact.  I use it with the .replace method and pull out "$1$2$3" to get the pure 10-digit phone number, and anything after that is just stored as additional text.  this additional text could be an extension, daytime information, hours, etc.
\(?(\d{3})(?:\)*|\)\s*-*|\.*|\s*|/*|)(\d{3})(?:\)*|-*|\.*|\s*|/*|)(\d{4})(?:\s?|,\s?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1723
#T: MONTH DD, YYYY
#A: Kevin McDonagh
#D: Regular expression for Common american format
(J(anuary|uly|une)|February|Ma(rch|y)|April|August|(Octo|Decem|Septem|Novem)ber)\s([1-9]|[12][0-9]|3[01]), [1-9][0-9]{3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1724
#T: Time (12 or 24)
#A: Luan Dinh
#D: Validate the time in either 12-hours or 24-hours base
^(((?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(([0-1][0-9]|[2][0-3]):([0-5][0-9])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1725
#T: Malaysian Identification Card (IC) format
#A: Heemi Fazeree
#D: IC format for Malaysian (Public, Police, Army)
^([a-zA-Z]{1,3}-\d{1,7})|(\d{6}-\d{2}-\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1726
#T: Number Validation
#A: Saqib Rasheed
#D: I have worked on this regular expression to get valid numbers from users. Its really simple, but yes required alot of my time and attention to make it work perfectly. It was my very first creation of regular expression.
(?!^([0-9]+[-]?[0-9]+)$)(?!^([0-9]+[[\\s]*]?[0-9]+)$)^([0-9]+\.?[0-9]+$|(^[-]?[0-9]+([[\\s]*]?)$)|^([-]?)[0-9]+\.?[0-9]+([[\\s]*]?)|([0-9]+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1727
#T: UserId
#A: Saqib Rasheed
#D: This regular expression validates for a user id. The expression was built by keeping the rules of defining a variable in c++.
(?!^([0-9]+)([[\\s]*]?)$)(?!^([0-9]+)[[a-zA-Z]*]?([[\\s]*]?)$)^([_]?([a-zA-Z0-9]+)([[\\s]*]?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1728
#T: Match Valid HTML Tags
#A: John Smith
#D: This is very similar to my other expression, except it only matches tags that a browser would read, so if you have an extra " in the tag, it will not count it, and move onto the next possibility.
</?(a|abbr|acronym|address|applet|area|b|base|basefont|bdo|big|blockquote|body|br|button|caption|center|cite|code|col|colgroup|dd|del|dir|div|dfn|dl|dt|em|fieldset|font|form|frame|frameset|h[1-6]|head|hr|html|i|iframe|img|input|ins|isindex|kbd|label|legend|li|link|map|menu|meta|noframes|noscript|object|ol|optgroup|option|p|param|pre|q|s|samp|script|select|small|span|strike|strong|style|sub|sup|table|tbody|td|textarea|tfoot|th|thead|title|tr|tt|u|ul|var|xmp)\b((\"[^\"]*\"|\'[^\']*\')*|[^\"\'>])*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1729
#T: Current Century Date
#A: The Mighty Will
#D: This regular expression will validate most (current & future) date options. The weaknesses with this one is that it will allow the days to go up to 39 and does not account for leap year. Also, the months can go up to 19, instead of our commonly accepted 12 month year. :)  I designed this expression to validate dates from the year 2000 to 2099. I do not plan on this same code being in place in 2099, so I hope this is sufficient enough...
^([0-1]?[0-9]{1}/[0-3]?[0-9]{1}/20[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1730
#T: Nextel Direct Connect
#A: Dave Grainger
#D: one or more numbers, asterisk, one or more numbers, asterisk, one or more numbers, no letters or punctuation other than asterisks.
^\d+\*\d+\*\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1731
#T: URI Validation & Extraction
#A: John Bayly
#D: Validates and extracts URI components.
#D: Protocol is optional.
#D: Username & Password is optional.
#D: Host regex was taken from Remi Sabourin and follows RFC1035 except that it allows hostnames greater than 253 chars.
#D: Also TLD length is not restriced.
#D: Port number is optional.
#D: Absolute Path is optional, and also extracts the optional querystring and optional anchor reference.
^((http|https|ftp):\/\/)?((.*?):(.*?)@)?([a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])((\.[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])*)(:([0-9]{1,5}))?((\/.*?)(\?(.*?))?(\#(.*))?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1732
#T: HTML Tag Remover
#A: Kerry Jones
#D: This is expression is good if you need to clean up some code (like from using DW Design View or Front Page). Just  the "tag1" and "tag2" with the tags you want, and you can add more by putting a | inbetween each tag.
<\/?(tag1|tag2)[^>]*\/?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1733
#T: HTML Tag and InnerHTML Remover
#A: Kerry Jones
#D: Removes all the text between two tags. Replace the "tag1" and "tag2" with the tag you want to remove, you can add more by placing additional "|" between each tag.
<(tag1|tag2)[^>]*\/?>.*<\/(?:\1)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1734
#T: Percentages
#A: Dan Santee
#D: Matches percentages from 0-100 inclusive with two decimal places.
^100(\.0{0,2}?)?$|^\d{0,2}(\.\d{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1735
#T: FQDN Validation
#A: Scott Mulcahy
#D: Validates MS FQDNs. 1) Entire fqdn less than 255 chars. 2) Host and domain names may contain an underscore. 3) 1st char can be a number. 4) No part can be all numbers. 5) Allows any TLD Works in C#. Based on Remi Sabourin's regex.  Based on anonymous feedback I've corrected it to no longer match domains that start or end with a hyphen.
(?=^.{1,254}$)(^(?:(?!\d+\.|-)[a-zA-Z0-9_\-]{1,63}(?<!-)\.?)+(?:[a-zA-Z]{2,})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1736
#T: Port Finder
#A: Sanjeev Bhatt
#D: This will give u detail of port
((?:[\\?&](?:[a-z\d\\.\\[\\]%-]+)(?:=[a-z\\d\\.\\[\\]%-]*)?)*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1737
#T: Date-MM/DD/YYYY MONTH/DATE/YEAR
#A: Ravi Nandan Vaish
#D: This regular expressions matches dates in the format MM/DD/YYYY where MM can be 01 to 12, DD can be 01 to 31 and YYYY is always 4 digits long. 
^((0[1-9])|(1[0-2]))\/((0[1-9])|(1[0-9])|(2[0-9])|(3[0-1]))\/(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1738
#T: Find Relative Paths
#A: Kerry Jones
#D: If when making a website you need to find your relative paths, this regex will find them. You can use the follow to make them absolute:
#D: \1="/\2
(src|href|action)="(?!http://|#|mailto:|&)([^/#"])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1739
#T: Sunday, April 22, 2006
#A: Revathi
#D: Validates date with month in the format "dddd, MMMM dd, yyyy"
^((Sunday|Tuesday|Wednesday|Thursday|Friday|Saturday),\s+)?((January|February|March|April|May|June|July|August|September|October|November|December)\s+([1-2]?[0-9]|3[01])),\s+?(19[0-9]{2}|[2-9][0-9]{3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1740
#T: First and Last Name
#A: Michael Fienen
#D: The pattern matches what would at least appear to be a first and last name, with an optional hyphenated last name.  There is an obvious flaw that it can't distinguish between actual names and any two words that start with capital letters as noted in the matching text.  Also, two part first names like "Mary Jo" can cause problems.
^([A-Z][a-z]+)\s([A-Z][a-zA-Z-]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1741
#T: Date YYYY-MM-DD
#A: Cornelius
#D: This function does basic testing for the YYYY-MM-DD date format.
[0-9]{4}-([0][0-9]|[1][0-2])-([0][0-9]|[1][0-9]|[2][0-9]|[3][0-1])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1742
#T: Split SQL UPDATE statement
#A: Benjamin Nelson
#D: Use with "/i" flag (case-insensitive) to match any valid SQL UPDATE statement, and to parse it into it's component parts.  Most useful will be group $2, the table name, group $4, the field=value list, and group $5, the WHERE clause.
(UPDATE\s+)(\w+)\s+(SET)\s+([\w+\s*=\s*\w+,?\s*]+)\s+(WHERE.+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1743
#T: Floating Complex Number
#A: Fischer, M.
#D: DESCRIPTION
#D: Parses a complex number of kind 'a+bi' from an input string. Please remove all spaces from the input string before using this regex pattern.
#D: MATCHING EXAMPLES
#D: '[]'  means is an optional parameter;
#D: '|'   means OR;
#D: '+'   is the positive sign;
#D: '-'   is the negative sign;
#D: '#'   is one ore more decimal digits;
#D: 'E|e' are the valid exponent symbols;
#D: '...' is the range for the exponent;
#D: 'r'   means the real part of complex number;
#D: 'i'   means the imaginary part of complex number.
#D: NOTE
#D: Has the imaginary part of the input string not a numeric value (e.g. '5-i' is a valid format) it should be interpreted as '5-1i'!
^([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?[r]?|[-+]?((\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)?[i]|[-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?[r]?[-+]((\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)?[i])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1744
#T: Floating Complex Number Accessible
#A: Fischer, M.
#D: This is the same regex pattern as 'Floating Complex Number' but extented by group names. This makes it much easier to extract the parts of the complex number (e.g. string realPart=myMatch.Result("${r}");string imgPart=myMatch.Result("${i}"); ).
^((?<r>([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?[r]?))|(?<i>([-+]?((\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)?[i]))|(?<r>([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?[r]?))(?<i>([-+]((\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)?[i])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1745
#T: Floating Number
#A: Fischer, M.
#D: DESCRIPTION
#D: Parses a floating number (such as double or float) from an input string. Please remove all spaces from the input string before using this regex pattern.
#D: MATCHING EXAMPLES
#D: The following symbols are used:
#D: '[]'  means optional parameter;
#D: '|'   means OR;
#D: '+'   is the positive sign;
#D: '-'   is the negative sign;
#D: '#'   means one or more decimal digits;
#D: '.'   is decimal seperator.
^([-+]?(\d+\.?\d*|\d*\.?\d+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1746
#T: Floating Number With Exponent
#A: Fischer, M.
#D: DESCRIPTION
#D: Parses a floating number with an optional exponent from an input string. Please remove all spaces from the input string before using this regex pattern.
#D: MATCHING EXAMPLES
#D: The following symbols are used:
#D: '[]'  means an optional parameter;
#D: '|'   means OR;
#D: '+'   means the positive sign;
#D: '-'   means the negative sign;
#D: '#'   means one or more numbers (0...9);
#D: '.'   is the decimal seperator;
#D: 'E|e' are the valid exponent symbols;
#D: '...' is the range of values for the exponent.
^([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1747
#T: ISBNs
#A: Michael Ash
#D: This regex match both the old 10 digit ISBNs and the new 13 digit ISBNs.  The ISBN number must be prefixed by the literal text "ISBN:" or "ISBN-10:" or "ISBN-13:".  The colon is optional.  Naturally an ISBN prefixed by "ISBN-10" must be a 10 digit ISBN.  One prefixed by "ISBN-13" must be 13 digits.   If prefixed only by "ISBN:"  it can be either 10 or 13 digits.  This does not evaluate whether the check digit is valid for the given ISBN.  The structure of an ISBN is discribed here http://www.isbn.org/standards/home/isbn/international/html/usm4.htm (this is for 10 digit)  
ISBN(-1(?:(0)|3))?:?\x20+(?(1)(?(2)(?:(?=.{13}$)\d{1,5}([ -])\d{1,7}\3\d{1,6}\3(?:\d|x)$)|(?:(?=.{17}$)97(?:8|9)([ -])\d{1,5}\4\d{1,7}\4\d{1,6}\4\d$))|(?(.{13}$)(?:\d{1,5}([ -])\d{1,7}\5\d{1,6}\5(?:\d|x)$)|(?:(?=.{17}$)97(?:8|9)([ -])\d{1,5}\6\d{1,7}\6\d{1,6}\6\d$)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1748
#T: ISBN-13
#A: Michael Ash
#D: This regex matches the new 13 digit ISBN.  The ISBN number must be preceded by the text "ISBN:" or "ISBN-13:" , the colon is optional. The proper lengthes of the ISBN elements is checked.  The is no check for the validity of the check digit.
ISBN(?:-13)?:?\x20*(?=.{17}$)97(?:8|9)([ -])\d{1,5}\1\d{1,7}\1\d{1,6}\1\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1749
#T: Split SQL INSERT Statement
#A: Benjamin Nelson
#D: Use with "/i" flag (case-insensitive) to match a fully qualified SQL INSERT statement, and to parse it into it's component parts.  Group $2 will contain the table name, $4 the field list, and $6 the value list.
(INSERT INTO\s+)(\w+)(\s+\()([\w+,?\s*]+)(\)\s+VALUES\s+\()(['?\w+'?,?\s*]+)(\))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1750
#T: Split SQL INSERT Statement 2
#A: Benjamin Nelson
#D: Use with "/i" flag (case-insensitive) to match a fully qualified SQL INSERT statement, and to parse it into it's component parts. Group $2 will contain the table name, $4 the field list, and $6 the all of the value lists.
(INSERT INTO\s+)(\w+)(\s+\()([\w+,?\s*]+)(\)\s+VALUES\s+)((\(['?\w+'?,?\s*]+\)\,?;?\s*)+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1751
#T: Phone numbers
#A: Eduardo Mardini
#D: Phone numbers validation with extension number
(((\d{0,2})\(\d{3}\))|(\d{3}-))\d{3}-\d{4}\s{0,}((([Ee][xX][Tt])|([Pp][Oo][Ss][Tt][Ee])):\d{1,5}){0,1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1752
#A: Vince
#D: Decimal values from 1 to .001 with precision of three, leading zero optional.  Can be 1 or 1.0 or 1.000 
^0?.[0]{1,2}[1-9]{1}$|^0?.[1-9]{1}?\d{0,2}$|^(1|1.{1}[0]{1,3})$|^0?.[0]{1}[1-9]{1}\d{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1753
#T: Percentage
#A: vitthal Shinde
#D: This pattern is designed to allow user to enter percentage values. 
^(^(100{1,1}$)|^(100{1,1}\.[0]+?$))|(^([0]*\d{0,2}$)|^([0]*\d{0,2}\.(([0][1-9]{1,1}[0]*)|([1-9]{1,1}[0]*)|([0]*)|([1-9]{1,2}[0]*)))$)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1754
#T: Multisided dice
#A: Michael Fienen
#D: For the geeks out there, you can use this to break down die rolls of multisided dice for things like role playing games.  Includes support for a die multiplier and an end modifier value. Supports a multiplier up to 99, and sides and a modifier of up to 999.
([1-9]{1,2})?(d|D)([1-9]{1,3})((\+|-)([1-9]{1,3}))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1755
#T: E-Mail Validator
#A: Murugan
#D: This can be used to test, the entered email address is valid or not
^([a-zA-Z0-9]+)([\._-]?[a-zA-Z0-9]+)*@([a-zA-Z0-9]+)([\._-]?[a-zA-Z0-9]+)*([\.]{1}[a-zA-Z0-9]{2,})+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1756
#T: RFC2822 Compliant Email Check
#A: David Kearns
#D: RFC2822 compliant email matching regex that doesn't assume TLDs are set for all time. Clearly this means that someone could get a 2 letter country code wrong, but since no TLD is set in stone, I prefer to match future possibilities as well. This also conforms to what traditional DNS can do w/r/t hostnames and domain names.
^(([-\w$%&'*+\/=?^_`{|}~.]+)@(([-a-zA-Z0-9_]+\.)*)([-a-zA-Z0-9]+\.)([a-zA-Z0-9]{2,7}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1757
#T: RegEx for email validation
#A: Rafiq
#D: This expresssion will validate all possible formats except if web site URL contains hyphen characters like aa@a-b-c.com. I will include this feature also in next version.
^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}[a-z0-9]+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1758
#T: ISO Date with leap
#A: Michel Chouinard
#D: This regex match dates in the international standard date notation by ISO (IS0 8601). It can validate any dates between 1900-01-01 and 2099-12-31 ant take account of leap years. The format is mandatory and the hyphen is needed.  You could easily change it to accept other separators.  It has been tested with Regex Coach and PHP.
^(((19|20)(([0][48])|([2468][048])|([13579][26]))|2000)[\-](([0][13578]|[1][02])[\-]([012][0-9]|[3][01])|([0][469]|11)[\-]([012][0-9]|30)|02[\-]([012][0-9]))|((19|20)(([02468][1235679])|([13579][01345789]))|1900)[\-](([0][13578]|[1][02])[\-]([012][0-9]|[3][01])|([0][469]|11)[\-]([012][0-9]|30)|02[\-]([012][0-8])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1759
#T: validate arabic letters
#A: Walid El-Sewaify
#D: Matches strings that only contain Arabic letters (no spaces). if you want to include spaces it should be ^[\u0621-\u064A\040]+$ 
^[\u0621-\u064A]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1760
#T: HTML Image src
#A: Erik
#D: Great for extracting out all the image src attributes.
<[iI][mM][gG][a-zA-Z0-9\s=".]*((src)=\s*(?:"([^"]*)"|'[^']*'))[a-zA-Z0-9\s=".]*/*>(?:</[iI][mM][gG]>)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1762
#T: Check number
#A: Patrick Metz
#D: This RegEx checks whether the input is a number or not. Number may contain commas a seperators, can contain one or two decimal places and can be positive or negative.
^(-?)(((\d{1,3})(,\d{3})*)|(\d+))(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1763
#T: IMG tag
#A: Martin Švec
#D: Use this RegExp to grab SRC($1) and ALT($3) values from IMG tags in valid or invalid HTML (XHTML). SRC param must by before IMG. (thanks to mr. Mrva)
<img[^>]*src=\"?([^\"]*)\"?([^>]*alt=\"?([^\"]*)\"?)?[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1764
#T: Birthday regular expression Dutch
#A: Vincent van Daal
#D: I needed to have a birthday regular expression in dutch format with full year (1900) so i wrote this one.
^([0-9]{0,2})-([0-9]{0,2})-([0-9]{0,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1765
#T: TSQL identifier
#A: Vasiliy Fofanov
#D: Pattern for T-SQL identifier
(?:\[(?:[\u0000-\u005C]|[\u005E-\uFFFF]|\]\])+\])|(?:\u0022(?:[\u0000-\u0021]|[\u0023-\uFFFF]|\u0022\u0022)+\u0022)|(?:[a-zA-Z_][a-zA-Z0-9_]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1766
#T: email
#A: iktuz
#D: I tested all these dummie emails with a Java program. Unfortunately the html fields does not fetch all tested cases, sorry. Enjoy.
[a-zA-Z]+[a-zA-Z0-9]*([\.|\-|_][a-zA-Z0-9]+)*@[a-zA-Z]+[a-zA-Z0-9]*([\.|\-|_][a-zA-Z0-9]+)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1767
#T: International phone number
#A: Maarten De Block
#D: Matches international formated phonenumber. More info on http://maartendeblock.blogspot.com
^\+[0-9]{1,3}\.[0-9]+\.[0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1768
#T: Get one and two numeric digits between 1 and 12 inclusive
#A: Lars Brandt
#D: Get one and two numeric digits between 1 and 12 inclusive, positive numbers only (Zeros are excluded and so is values higher than 12).
^1?[1-2]$|^[1-9]$|^[1]0$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1769
#T: FL DL Number
#A: Brian Stilley
#D: This will accept FL Drivers License numbers with dashes
^([a-z|A-Z]{1}[0-9]{3})[-]([0-9]{3})[-]([0-9]{2})[-]([0-9]{3})[-]([0-9]{1})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1770
#T: (X)HTML & char. replace
#A: Martin Švec
#D: Single & character is not valid in HTML or XHTML code. In this case you can replace this character with its entity (if & character is not member of other entity [š]). example: preg_replace('/&(?!amp;)/', '&', $str).
#D: (thanks to mr. Mrva)
&(?![a-z]+;|#\d+;)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1771
#T: URL
#A: Viktor Nagy
#D: Matches any valid URLs which can activate links in a text.
^((http|https|ftp)\://|www\.)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,4}(/[a-zA-Z0-9\-\._\?=\,\'\+%\$#~]*[^\.\,\)\(\s])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1772
#T: All valid Guid(s)
#A: fancyf
#D: It matches all strings that the .NET Framework API "new Guid(string guid)" can recognize. A String that contains a GUID in one of the following formats ('d' represents a hexadecimal digit whose case is ignored): 
[({]?(0x)?[0-9a-fA-F]{8}([-,]?(0x)?[0-9a-fA-F]{4}){2}((-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})|(,\{0x[0-9a-fA-F]{2}(,0x[0-9a-fA-F]{2}){7}\}))[)}]?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1773
#T: US or Canadian phone number
#A: Yuri Khenokh
#D: Don Johnston's pattern modified to optionally accept a leading 1 or +1. Non-capturing groups are used for efficiency 
^(?:(?:\+?1[\s])|(?:\+?1(?=(?:\()|(?:\d{10})))|(?:\+?1[\-](?=\d)))?(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1774
#T: US or Canadian phone number, allows 7 digit dialing
#A: Yuri Khenokh
#D: Don Johnston's pattern modified to optionally accept leading 1 or +1 and to allow 7 digit dialing (still legal in some states). Non-capturing groups are used for efficiency
(?:^(?:(?:\+?1[\s])|(?:\+?1(?=(?:\()|(?:\d{10})))|(?:\+?1[\-](?=\d)))?(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$)|(?:^[2-9]\d{2}[- ]?\d{4}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1775
#T: email validation
#A: jose aviles
#D: simple email validation
^.+\@.+\..+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1776
#T: url validation
#A: jose aviles
#D: url validation with tiped errors
(((ht|f)tp(s?):\/\/)|(([\w]{1,})\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;"'<>\n\r\t]+)([^\. \[\]\(\),;"'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1777
#T: email
#A: Yuri Khenokh
#D: email validator
^(?:[0-9a-zA-Z](?:[-.\w]*[0-9a-zA-Z])*@(?:(?:[0-9a-zA-Z])+(?:[-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1778
#T: Flexible ISO -> US -> EU Timestamp or Date 
#A: Noel Rivera
#D: Updated: 5-15-2007 @ 2:30pm ---
#D: This expression matches all kinds of possible date or timestamp formats.
#D: No it dose not validate for leap years or months where the 31st day is not valid.
#D: I use it in my code so I can let my site users format a date in any way they please. I am basing it loosely on ISO, US and European standards found.
#D: The reason why it works for me is that I use it along with some code I made that extracts the year, month, day, hour, minute and seconds from the string and use it to create a valid date in my code. This is why I don't care about leap year/Feb rules since, once I got the date parts I can validate for these variations within the language I'm using very easily without making my expression 10,000 chars long. Although that would be an awesome thing to see and if anybody can make it as flexible as this one is and check for leap/Feb rules I would love to see it. I did not want to add anything to my UI to educate my user on how I expect them to format it.
#D: The expression assumes that the date is ISO then US and last European standard. This may not be good for some people but for me I think that if it is not a US date but it’s a valid European date than Ill just take it since where I use this code is not that critical. I just want flexibility and ease of use for my users. Oh, and I really did not think of performance hit due to the length of the pattern. I ran it. It worked fast for me.
#D: It’s only for a small text string. I tested it in PHP and The Regex Coach (The coach was in pain afterward, hee hee). I hope I brake a record with this bad boy. This is the longest expression I have ever seen! Its 2,214 chars long, WOO HOO!
^(?:(?:(?:(?:[1-2][0-9]{3}) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]))|(?:(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3}))))|(?:(?:(?:(?:[1-2][0-9]{3}) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]))|(?:(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:[12][0-9]|3[01]|0?[1-9]) *(?:[\/\-\., ]) *(?:1[0-2]|0?[1-9]) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))|(?:(?:(?:[12][0-9]|3[01]|0?[1-9])|(?:(?i:[23]?1st|2?2nd|2?3rd|[4-9]th|1[0-9]th|20th|2[4-9]th|30th))) *(?:[\/\-\., ]) *(?:(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)) *(?:[\/\-\., ]) *(?:(?:[0-9]{1,2})|(?:[1-2][0-9]{3})))) *(?:(?:(?:1[0-2]|0?[1-9])(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))?(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))? *(?:(?i:[ap]m)))|(?:(?:2[0-3]|[01]?[0-9])(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))(?: *(?:\:) *(?:[1-5][0-9]|0?[0-9]))?))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1779
#T: detecting two or more adjacent capital letters
#A: jose aviles
#D: detecting two or more adjacent capital letters
([A-Z][A-Z]{1,})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1780
#T: Colon-delimited string of positive integers and/or decimal numbers
#A: Phil Heneghan
#D: Accepts a colon-delimited string of positive integers and/or decimal numbers in any combination. Spaces are not permitted. Decimal numbers of less than 1 must be prefixed with a zero (e.g. accepts 0.1, but not .1), and numbers with a trailing decimal point are not accepted (e.g. accepts 3.0, but not 3.). A lone zero is not accpeted (e.g. accepts 1.02:3:4.5, but not 1.02:0:4.5). Developed from a similar expression by Steven Smith on this site.
^(([1-9][0-9]*)|((([0])|([1-9][0-9]*))\.[0-9]+)|((([1-9][0-9]*)|((([0])|([1-9][0-9]*))\.[0-9]+))\:)*(([1-9][0-9]*)|((([0])|([1-9][0-9]*))\.[0-9]+)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1781
#T: Month Full names and 3 char Abbreviations
#A: Noel Rivera
#D: Matches month Full names and Abbreviations. If you can find anyway to optimize its performance, please do so and add a comment with it.
(?i:(?:j(?:an(?:uary)?|u(?:ne?|ly?)))|a(?:pr(?:il)?|ug(?:ust)?)|ma(?:y|r(?:ch)?)|(?:nov|dec)(?:ember)?|feb(?:ruary)?|sep(?:tember)?|oct(?:ober)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1782
#T: Week Full names and 3 char Abbreviations
#A: Noel Rivera
#D: Matches week Full names and Abbreviations. If you can find anyway to optimize its performance, please do so and add a comment with it.
(?i:t(?:ue(?:sday)?|hu(?:rsday)?))|s(?:un(?:day)?|at(?:urday)?)|(?:wed(?:nesday)?|(?:mon|fri)(?:day)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1783
#T: C# Methods
#A: Robert S. Robbins
#D: Finds all public or private C# methods with a return type, with or without parameters. Excludes private and public members which may look like a method.  Private and public members that can be confused with methods typically have a semicolon after the closing parentheses.
#D: NOTE: Visual Studio uses a non-standard regular expression syntax for Find and Replace. The eqivalent pattern is: (private|public|protected):b:w(.)*\((.)*\)$
(private|public|protected)\s\w(.)*\((.)*\)[^;]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1784
#T: Multi-format date regex
#A: Michael Ash
#D: Another date regex. From year 1600-9999, days in month and leap year checks.  Formats include MM-dd-YYYY, dd-MM-yyyy, yyyy-MM-dd, MMM dd,yyyy or dd MMM yyyy. Years are always four digits,  months can be one or two digits, three letter abbreivation or full name.  Named months (non-digit) can have days with a suffix 1st, 2nd, etc. Numeric months must have a separtate between itself and the other date parts.  For Demo only: This was just a mental exercise don't use this for actual validation.  Used .Net regex engines advanced features for easier constuction. Use this website (or .net engine) to test.
^(?ni:(((?:((((((?<month>(?<monthname>(Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)))\ )|(?<month>(?<monthnum>(0?[13578])|10)(?<sep>[-/.])))(?<day>31)(?(monthnum)|st)?)|((((?<month>(?<monthname>Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?))\ )|((?<month>(?<monthnum>(0?[13-9])|1[012]))(?<sep>[-/.])))(?<day>((0?[1-9]|([12]\d)|30)|(?(monthname)(\b2?(1st|2nd|3rd|[4-9]th)|(2|3)0th|1\dth\b))))))|((((?<month>(?<monthname>Feb(ruary)?))\ )|((?<month>0?2)(?<sep>[-/.])))((?(monthname)(?<day>(\b2?(1st|2nd|3rd|[4-8]th)|9th|20th|1\dth\b)|(0?[1-9]|1\d|2[0-8])))|(?<day>29(?=(\k<sep>|(?(monthname)th)?,\ )((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))(?(sep)\k<sep>|((?(monthname)th)?,\ ))(?<year>(1[6-9]|[2-9]\d)\d{2}))$|((?<days>(31(?<suffix>st)?(?!(\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?))|[-/.](0?[2469]|11)))|((30|29)(?<suffix>th)?(?!((\ Feb(ruary)?)|([-/.]0?2))))|(29(?<suffix>th)?(?=((\ Feb(ruary)?\ )|([ -/.]0?2))(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(?<suffix>(?=\d\d?[nrst][dht]\ [JFMASOND])(\b2?(1st|2nd|3rd|[4-8]th)|20th|1\dth\b)|((0?[1-9])|1\d|2[0-8])))(?<month>(\ (?<monthname>(Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?))\ )|(?(\k<suffix>)|((?<sep>[-/.])(0?[1-9]|1[012])\k<sep>)))(?<year>(1[6-9]|[2-9]\d)\d{2}))|\b((?<year>((1[6-9])|([2-9]\d))\d\d)(?<sep>[/.-])(?<month>0?[1-9]|1[012])\k<sep>(?<day>((?<!(\k<sep>((0?[2469])|11)\k<sep>))31)|(?<!\k<sep>(0?2)\k<sep>)(29|30)|((?<=((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\k<sep>(0?2)\k<sep>)29)|((0?[1-9])|(1\d)|(2[0-8]))))\b)(?:(?=\x20\d)\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2}))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1785
#T: Full Windows Folder Path
#A: John Marshall
#D: Validates the format of a Windows folder path ending with a backslash using the drive path or Universal Naming Convention (UNC)--without using lookaround.<br><br>Windows folder components: <br>(I) The drive can only be one letter. <br>(II) The server name (1) can only contain letters, numbers, and hyphens. However, Windows does allow underscores--which aren’t standard characters in the Request for Comments (RFC) 1035 standard--for networks using the Microsoft DNS Server. (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;222823) or (2) can be an IP address <br>(III) The share name (also called the service name) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: " * / : ? | < > \ , ; [ ] + = (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;236388) (2) Can begin or end with a period, but cannot contain all periods (3) Cannot begin or end with a space (4) There must be at least one character that is not a space or period if the rest of the share name contains periods and spaces or just periods. <br>(IV) The folder and subfolder names (without the drive, share, or server name) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: " * / : ? | < > \ (Reference: http://msdn2.microsoft.com/en-us/library/aa365247.aspx) (2) Cannot begin or end with a space or period.
^([A-Za-z]:|\\{2}([-\w]+|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\(([^"*/:?|<>\\,;[\]+=.\x00-\x20]|\.[.\x20]*[^"*/:?|<>\\,;[\]+=.\x00-\x20])([^"*/:?|<>\\,;[\]+=\x00-\x1F]*[^"*/:?|<>\\,;[\]+=\x00-\x20])?))\\([^"*/:?|<>\\.\x00-\x20]([^"*/:?|<>\\\x00-\x1F]*[^"*/:?|<>\\.\x00-\x20])?\\)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1786
#T: Regular expression for validating currency input with £ sign
#A: KundanKumar
#D: This expression is for matching the currency input. The £ is optional. e.g. £12.12, £ 12.12, 12.12, 12.
^(( )*\£{0,1}( )*)\d*(.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1787
#T: Complex Australian Phone Number
#A: A.T.Groom
#D: Australian phone number validator. Accepts all forms of Australian phone numbers in different formats (area code in brackets, no area code, spaces between 2-3 and 6-7th digits, +61 international dialing code). Checks that area codes are valid (when entered).
^\({0,1}((0|\+61)(2|4|3|7|8)){0,1}\){0,1}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{2}(\ |-){0,1}[0-9]{1}(\ |-){0,1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1788
#T: Smarter URL extractor from plain text
#A: Gary F
#D: This regex avoids matching typical mistakes where a sentence ends but there is no space after the full stop (period). Other regexes will think any two words with a dot in between is a URL! My regex does not require http:// and if there isn't http:// it will need to find AT LEAST two dots to guarantee its likely to be a URL and not a sentence that's missing a space like this.It will match www.test.com, http://test.com, test.com/index.htm but it will NOT match test.com. It will not match a dot or a comma at the very end which some people may type when including a URL in a sentence like this www.test.com, or this www.test.com.
(http(s?)://|[a-zA-Z0-9\-]+\.)[a-zA-Z0-9/~\-]+\.[a-zA-Z0-9/~\-_,&\?\.;]+[^\.,\s<]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1789
#T: FAA Tail Number
#A: Eric
#D: FAA Tail Numbers as described here: http://www.faa.gov/licenses_certificates/aircraft_certification/aircraft_registry/special_nnumbers/
^N[1-9][0-9]{0,4}$|^N[1-9][0-9]{0,3}[A-Z]$|^N[1-9][0-9]{0,2}[A-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1790
#T: Danish phone number
#A: Jens Rud Nielsen
#D: This should help in finding european style phone numbers (without hyphens), particularly danish numbers with consist of 8 digits, and can be separated by a whitespace.
^((\(?\+45\)?)?)(\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1791
#T: Match substrings of string seprated by spaces while keeping substring groups enclosed by certain character(s) together.
#A: Doug Drudik
#D: Given that you have a string that is comprised characters/words separated by spaces and you want to creates matches of those words/characters but you also have substring groups of words/characters/spaces enclosed in [] and "" that you want treated as a single match, this pattern is what worked for me.  Feel free to modify this regex to fit your needs if your string groups are not grouped by [] or "".  Please let me know if this doesn't test well for you. ********** Example Test String:
#D: 212.183.143.4 - - [03/May/2007:21:03:27 +0100]  "GET mp4-amrnb.3gp RTSP/1.0" 200 155527 [RealOnePlayer_s60.26.25.01_21-Jun-2005_13:02:43_epoc_av21_thumb] [3e546ed1-f9b1-11db-eb72-1d98b80ca9f5] [UNKNOWN] 454492 102 47 0 0 [0 0 0 0] [03/May/2007:21:02:38] 192.168.0.2 24245 55 ********** Matches:
#D: Matches(0) = "212.183.143.4"
#D: Matches(1) = "-"
#D: Matches(2) = "-"
#D: Matches(3) = "[03/May/2007:21:03:27 +0100]"
#D: Matches(4) = ""GET mp4-amrnb.3gp RTSP/1.0""
#D: Matches(5) = "200"
#D: Matches(6) = "155527"
#D: Matches(7) = "[RealOnePlayer_s60.26.25.01_21-Jun-2005_13:02:43_epoc_av21_thumb]"
#D: Matches(8) = "[3e546ed1-f9b1-11db-eb72-1d98b80ca9f5]"
#D: Matches(9) = "[UNKNOWN]"
#D: Matches(10) = "454492"
#D: Matches(11) = "102"
#D: Matches(12) = "47"
#D: Matches(13) = "0"
#D: Matches(14) = "0"
#D: Matches(15) = "[0 0 0 0]"
#D: Matches(16) = "[03/May/2007:21:02:38]"
#D: Matches(17) = "192.168.0.2"
#D: Matches(18) = "24245"
#D: Matches(19) = "55"
#D: ********** ASP Test Code:
#D: Set regEx = New RegExp
#D: regEx.Global = True
#D: regEx.IgnoreCase = True
#D: regEx.MultiLine = True
#D: teststring = "<<your string>>"
#D: regEx.Pattern = "\S*?[\[|\""].*?[\]|\""]|\S+"
#D: Set Matches = regEx.Execute(teststring)
\S*?[\["].*?[\]"]|\S+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1792
#T: pattern Title
#A: Manish jain
#D: It is use for specific pattern like 1234-568r. 
^(?=.*\d{4}-\d{3})(?=.*[a-zA-Z]{1}).{9,9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1793
#T: Excel range name
#A: Mark
#D: matches excel cell addresses including an optional worksheet name
^(('[^\\/?*\[\]]{1,31}'!)|([^'\\/?*\[\]\ ][^\\/?\*\[\]\ ]{0,30}!))?\${0,1}([a-zA-Z]|[a-hA-H][a-zA-Z]|[Ii][a-vA-V])\${0,1}0*(6553[0-6]|655[0-2]\d{1}|65[0-4]\d{2}|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3})(:\${0,1}([a-zA-Z]|[a-hA-H][a-zA-Z]|[Ii][a-vA-V])\${0,1}0*(6553[0-6]|655[0-2]\d{1}|65[0-4]\d{2}|6[0-4]\d{3}|[1-5]\d{4}|[1-9]\d{0,3}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1794
#T: YAER - Yet Another Email Regex
#A: Major Banzai
#D: Simple email regex following some liberal email address validation. Requires non-whitespace name (but allows any other character), an @ symbol, then a non-period character, then some non-whitespace text (but allows just about everything else), and finishes with a tld that is 2 to 10 chars long. Two-characters is the universal minimum, 10 seemed like a good upper limit for now and allows room to grow. You can use this for a quick sanity check. Yes, the user can still enter invalid email addys, but then they won't get their emails, will they?
^[^\s]+@[^\.][^\s]{1,}\.[A-Za-z]{2,10}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1795
#T: URI with Scheme, Path, Query, and Fragment
#A: Kevin Spencer
#D: Identifies scheme, path, query, and fragment in any URI, putting them into named groups. All groups are optional except path.
(?m)^(?<scheme>\w+?://)?(?<path>(?:[\w.%$\-_+!*'(),=@]+\/|\b)+(?:[\w.%$\-_+!*'(),=@]*))(?<query>\?(?:[\w.%$\-_+!*'(),=@]+=[\w.%$\-_+!*'(),=@]*&?)*)?(?<fragment>#[\w\.%$\-_+!*'(),=@]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1796
#T: TR Content
#A: Kevin Spencer
#D: Matches complete table rows (<tr>...</tr>) and puts everything between the tr tags into a group named "content".
(?s)<tr[^>]*>(?<content>.*?)</tr>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1797
#T: Query String Parameters
#A: Kevin Spencer
#D: Matches name/value pairs in HTTP Query Strings, placing name into group named "name" and value into group named "value"
[\?&](?<name>[^&=]+)=(?<value>[^&=]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1798
#T: METAR Report
#A: Kevin Spencer
#D: Matches any legitimate METAR (Meterological Weather Report) string, and places parts into named groups, "ICAO", "DateUTC", "DayOfMonth", "Hour", "Minutes"
(?i)^(?:(?:METAR|SPECI)\s*)*(?<ICAO>[\w]{4})\s*?(?<DateUTC>(?<DayOfMonth>\d{0,2})(?<Hour>\d{2})(?<Minutes>\d{2}))Z{1}\s*(?:[^\r\n])*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1799
#T: HTML href
#A: Kevin Spencer
#D: Matches a complete HTML href tag, placing the URL into a group named "url" and the innerHTML into a group named "innerHtml"
(?i)(?s)<a[^>]+?href="?(?<url>[^"]+)"?>(?<innerHtml>.+?)</a\s*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1800
#T: Hyperlink attributes
#A: Kevin Spencer
#D: Captures all attributes in HTML anchor tags, putting them into groups named "name" and "value"
(?s)(?<=<a[^>]+?)(?<name>\w+)=(?:["']?(?<value>[^"'>]*)["']?)(?=.+?>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1801
#T: Match IP Address
#A: Fred Miller
#D: Quick and simple way of matching a well-formed IPV4 (dotted quad) ip address.
\d\d?\d?\.\d\d?\d?\.\d\d?\d?\.\d\d?\d?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1802
#T: Currency with two decimals
#A: Hareesh
#D: Looks for a number which can be optionally comma separated at thousands and may or may not have two decimal places. Tweaking: 1. Replace the \$ symbol with your currency. 2. Toggle , and . as separators (Some European countries follow this convention) 3. Mandate comma separation by removing the ? after ,
^\$\d{1,3}(,?\d{3})*(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1803
#T: Indian Zip Code
#A: trupti.gore
#D: I know this is very simple but this is the indian zip code and will allow only 6 digits.
^[1-9][0-9][0-9][0-9][0-9][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1804
#T: Indian Phone Number
#A: trupti.gore
#D: This is indian phone number. where it will take a format of std code 3 to 4 digits, hypen and rest of the 6 to 8 digits, 
^[0-9]\d{2,4}-\d{6,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1805
#T: Number Range
#A: Dexxter Quant
#D: Matches any range of numbers according to the format x;x-xx where "x" is a number between 0 and 9, however 0 may not be a the starting digit of a multi-digit number (i.e. 001). The format specifies that a range is denoted by x-x (numbers are seperated by a hyphen) and multiple range specification or single numbers may be seperated by a semi-colon ";".
^((0|[1-9]+[0-9]*)-(0|[1-9]+[0-9]*);|(0|[1-9]+[0-9]*);)*?((0|[1-9]+[0-9]*)-(0|[1-9]+[0-9]*)|(0|[1-9]+[0-9]*)){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1806
#T: Any character in multi-line modus
#A: Doeke Zanstra
#D: Use /[^]*/m instead of /.*/ A dot matches everything, but newline characters.
#F: m
[^]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1807
#T: Full Windows Folder UNC Path
#A: John Marshall
#D: Validates the format of a Windows folder path ending with a backslash using the Universal Naming Convention (UNC)--without using lookaround.<br><br>Windows UNC folder components: <br>(I) The server name can only contain letters, numbers, and hyphens. However, Windows does allow underscores--which aren’t standard characters in the Request for Comments (RFC) 1035 standard--for networks using the Microsoft DNS Server. (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;222823) <br>(II) The share name (also called the service name) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: " * / : ? | < > \ , ; [ ] + = (Reference: http://support.microsoft.com/default.aspx?scid=kb;en-us;236388) (2) Can begin or end with a period, but cannot contain all periods (3) Cannot begin or end with a space (4) There must be at least one character that is not a space or period if the rest of the share name contains periods and spaces or just periods. <br>(III) The folder and subfolder names (without the share and server names) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: " * / : ? | < > \ (Reference: http://msdn2.microsoft.com/en-us/library/aa365247.aspx) (2) Cannot begin or end with a space or period.
^\\{2}[-\w]+\\(([^"*/:?|<>\\,;[\]+=.\x00-\x20]|\.[.\x20]*[^"*/:?|<>\\,;[\]+=.\x00-\x20])([^"*/:?|<>\\,;[\]+=\x00-\x1F]*[^"*/:?|<>\\,;[\]+=\x00-\x20])?)\\([^"*/:?|<>\\.\x00-\x20]([^"*/:?|<>\\\x00-\x1F]*[^"*/:?|<>\\.\x00-\x20])?\\)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1808
#T: Full Windows Folder Drive Path
#A: John Marshall
#D: Validates the format of a Windows folder path ending with a backslash using the drive path--without using lookaround.<br><br>Windows folder drive path components: <br>(I) The drive can only be one letter. <br>(II) The folder and subfolder names (without the drive) (1) Can contain any character except ones with an ASCII code in the range of 0 (x00) through 31 (x1F) and the following: " * / : ? | < > \ (Reference: http://msdn2.microsoft.com/en-us/library/aa365247.aspx) (2) Cannot begin or end with a space or period.
^[A-Za-z]:\\([^"*/:?|<>\\.\x00-\x20]([^"*/:?|<>\\\x00-\x1F]*[^"*/:?|<>\\.\x00-\x20])?\\)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1809
#T: path/filename
#A: Amgine
#D: a simplistic path/filename for windows (more restrictive than for Mac OS or *nix). Updated escaping, end of string.
^[/]*([^/\\ \:\*\?"\<\>\|\.][^/\\\:\*\?\"\<\>\|]{0,63}/)*[^/\\ \:\*\?"\<\>\|\.][^/\\\:\*\?\"\<\>\|]{0,63}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1810
#T: US & Canadian Zip Code for Input
#A: Jeff Finley
#D: Created for input validation of major part of zip code.  Normal Canadian entry has an optional space between the first group of three and the second group.  Original pattern taken from Steven Smith and modified for our entries.
^(\d{5})$|^([a-zA-Z]\d[a-zA-Z]( )?\d[a-zA-Z]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1811
#T: US Phone Validator
#A: Lin
#D: Based on the pattern from Ricardo Gonzalez.  This one allows for arbitrary space between  parts of the phone number and separates the parts out into different capture groups.
[+]?[\x20]*(?<int>\d+)?[-\x20]*[\(]?(?<area>[2-9]\d{2})[\)\-\x20]*(?<pbx>[0-9]{3})[-\x20]*(?<num>[0-9]{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1812
#T: SQL datetime validation
#A: Martin Švec
#D: SQL accepts time without seconds. Space between date and time representation is not necessary.
#D: $0 returns whole matched string. $1 returns date. $2 returns time.
(\d{4}-\d{2}-\d{2})\s?(\d{2}:\d{2}(:\d{2})?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1813
#T: Names And Addresses Validator
#A: Rex Hurd
#D: Extension of Alsu Fifty's Simple String pattern: ^(\w(\s)?)+$ that allows inclusion of periods and dashes; useful for validating Name and Address fields
^(\w(([.-])*)(\s)?)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1814
#T: Comma Delimited String with Limits
#A: Michael
#D: I need a regular expression to allow entry of a 3 digit number, separated by commas and limited to only 6 occurences.  Based on a regex submitted by Ivan Rodriguez, I found my solution.
^(([0-9]{3})+((,[0-9]{3}){0,5}))+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1815
#T: Credit Card pattern Matching
#A: Poobalan
#D: This regular expression will match the all type of credit card patterns, like AMEX,VISA,MASTER, Dinnerclub, JCB, enRoute ,Discover 
(4\d{12})|(((4|3)\d{3})|(5[1-5]\d{2})|(6011))(-?|\040?)(\d{4}(-?|\040?)){3}|((3[4,7]\d{2})((-?|\040?)\d{6}(-?|\040?)\d{5}))|(3[4,7]\d{2})((-?|\040?)\d{4}(-?|\040?)\d{4}(-?|\040?)\d{3})|(3[4,7]\d{1})(-?|\040?)(\d{4}(-?|\040?)){3}|(30[0-5]\d{1}|(36|38)\d(2))((-?|\040?)\d{4}(-?|\040?)\d{4}(-?|\040?)\d{2})|((2131|1800)|(2014|2149))((-?|\040?)\d{4}(-?|\040?)\d{4}(-?|\040?)\d{3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1817
#T: windows characters other than new line
#A: aeriform
#D: Matches any single characters that don't belong to a windows new line character sequence.
[^\r\n]|(?:\r(?!\n))|(?:(?<!\r)\n)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1818
#T: Validate URL
#A: Justin Toth
#D: A regex I came up with for validating urls, didn't test thoroughly but seems to do the trick.
^((http://)|(https://))((([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*))|(([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*).?([a-zA-Z0-9_-]*)))/?([a-zA-Z0-9_/?%=&+#.-~]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1819
#T: .Net Framework Type Name
#A: Justin Long
#D: Matches a .Net Framework type name. This expression also matches non-strong named types such as:
#D: Namespace.Class
#D: and
#D: Namespace.Class, Assembly
^(([A-Za-z][A-Za-z0-9.+]*?){1,}?)(,\s?([^/\\:*?"<>|]*((,\s?(Version=(\d\.?){1,4}|Culture=(neutral|\w{2}-\w{2})|PublicKeyToken=[a-f0-9]{16})(,\s?)?){3}|))){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1820
#T: Decimal with scale
#A: Mohamed Ahmed
#D: Allow Decimal values as [decimal](*, 2),  scale length between 0 and 2
^\d*[0-9](\.\d?[0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1821
#T: Percentage with scale
#A: Mohamed Ahmed
#D: Allow Percentage with optional scale (max length of 2) between (00.00 and 100)
^((\d{0,1}[0-9](\.\d{0,1}[0-9])?)|(100))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1822
#T: Real Float Number
#A: Trinithis
#D: This regex is designed to fail fast (using possessive quantifiers) while still matching a floating decimal number all the time. Won't match scientific notation or fractions. Can be combined with other patterns.
#D: Note: This site's tester does not support them.
#D: If your language does not support possessive quantifiers try the following:
#D: (?>[+-]?)(?>(?>\d+)(?>\.?)(?>\d*)|(?>\d*)(?>\.?)(?>\d+))
[+-]?+(?>\d++\.?+\d*+|\d*+\.?+\d++)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1823
#T: Multiples of 0.5
#A: Siva Krishna
#D: This is used to match the values that are multiples of 0.5 upto single digit decimal number.
(^\d{1,3}$)|(\d{1,3})\.?(\d{0,0}[0,5])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1824
#T: YYYY-MM-DD HH:MM:SS
#A: Fehér Zsolt
#D: SQL datetime format tester YYYY-MM-DD HH:MM:SS
^([0-9]{4})-([0-1][0-9])-([0-3][0-9])\s([0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1825
#T: US Phone Loose
#A: Sean McKibben
#D: Matches US phone numbers in just about any format which doesn't try to break the 3-3-4 number set. Captures anything after the 4 digit set, such as an extension, for use later. 3 digit area code (ignoring a leading 1), 3 digit prefix, 4 digit line number and any additional extension info are all separated in to different groups for easy formatting. This expression is designed for a replacement, where the replacement string is ($1)$2-$3$4
^[ 1(]{0,3}?([02-9][0-9]{2})\D{0,2}([0-9]{3})\D?([0-9]{4})($|\D+.+$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1826
#T: .Net Assembly Name (With Named Groups)
#A: Justin Long
#D: Matches a .Net assembly name and groups each part of the name using named groups (not supported by all regex engines).
^(?<Assembly>(?<AssemblyName>[^\W/\\:*?"<>|,]+)(?:(?:,\s?(?:(?<Version>Version=(?<VersionValue>(?:\d{1,2}\.?){1,4}))|(?<Culture>Culture=(?<CultureValue>neutral|\w{2}-\w{2}))|(?<PublicKeyToken>PublicKeyToken=(?<PublicKeyTokenValue>[A-Fa-f0-9]{16})))(?:,\s?)?){3}|))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1827
#T: .Net Framework Full Type Name (With Named Groups)
#A: Justin Long
#D: Matches a full .Net type name and breaks all the parts of the type and assembly into named groups (not supported by all regex engines)
^(?<Namespace>(?:[\w][\w\d]*\.?)*)\.(?<Class>[\w][\w\d<>]*(?:(?:\+[\w][\w\d<>]*)+|))(?:|,\W?(?<Assembly>(?<AssemblyName>[^\W/\\:*?"<>|]+)(?:$|(?:,\W?(?:(?<Version>Version=(?<VersionValue>(?:\d{1,2}\.?){1,4}))|(?<Culture>Culture=(?<CultureValue>neutral|\w{2}-\w{2}))|(?<PublicKeyToken>PublicKeyToken=(?<PublicKeyTokenValue>[A-Fa-f0-9]{16})))(?:,\W?)?){3})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1828
#T: Generic URI (RFC3986)
#A: AB Chalmers
#D: Generic RFC3986 compliant hierarchical URI.  Does not support IPv6 literal strings as hosts.  Does not validate a host address against any registry types.  Does not validate a URI structure against scheme constraints.  Provides named groups for scheme(protocol), username, host, port, path, query, and fragment.
(?<scheme>[a-zA-Z][a-zA-Z0-9\+\-\.]*):(?://(?:(?<username>(?:[a-zA-Z0-9_~!&',;=\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))+):?(?:[a-zA-Z0-9_~!&',;=\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*@)?(?<host>(?:[a-zA-Z0-9_~!&',;=\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*)(?::(?<port>[0-9]*))?(?<path>(?:/(?:[a-zA-Z0-9_~!&',;=:@\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*)*)|(?<path>/(?:(?:[a-zA-Z0-9_~!&',;=:@\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))+(?:/(?:[a-zA-Z0-9_~!&',;=:@\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*)*)?)|(?<path>(?:[a-zA-Z0-9_~!&',;=:@\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))+(?:/(?:[a-zA-Z0-9_~!&',;=:@\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*)*))?(?:\?(?<query>(?:[a-zA-Z0-9_~!&',;=:@/?\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*))?(?:\#(?<fragment>(?:[a-zA-Z0-9_~!&',;=:@/?\.\-\$\(\)\*\+]|(?:%[0-9a-fA-F]{2}))*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1829
#T: Accept Positive Integers from 0 to 10
#A: Anindya Sengupta
#D: This will match any positive integer less than or equals to 10
^\d$|^[1][0]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1830
#T: Capture bgcolor attribute for replacing with style attribute
#A: Tom Meier
#D: Variable 1 = "complete attribute and value".
#D: Variable 2 = "attribute value only".
#D: For meeting compliance with W3C AA rules, I've been using this in a simple HTML parser to convert certain background tags from the deprecated 'bgcolor' attribute to now using a 'style=background:' and the passed colour. This had to be only on hexadecimal values for my current needs.
#D: Later modifications :
#D: 1. Only for certain tags (eg. td,tr,table).
#D: 2. If matching an opening apostrophe/quotation mark, only capture variable if there is a closing one.
<.*\b(bgcolor\s*=\s*[\"|\']*(\#\w{6})[\"|\']*).*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1831
#T: Alphanumeric with UnderScore
#A: Anshul Jaiswal
#D: Small w is used in expression. if you'll use capital W then it is for "Not Alphanumeric"
\w*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1832
#T: Match Arabic Letters
#A: Yasir Atabani
#D: Matches only arabic characters
\p{IsArabic}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1833
#T: Positive Number
#A: James Yoder
#D: This pattern will match any positive number(Real or Integer).  It will not match ZERO or any variation of zero (ie 0.00)
(^[0][.]{1}[0-9]{0,}[1-9]+[0-9]{0,}$)|(^[1-9]+[0-9]{0,}[.]?[0-9]{0,}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1834
#T: One syllable word
#A: Dejan Mitev
#D: Finds all one syllable words. the letters in brackets are vowels and they can be changed depending on the language.
\b[^aeiou]+[aeiou][^aeiou]+\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1835
#T: Credit Card Simple Validator
#A: SrikumarGopal
#D: It is used for simple validation. This regular expression will match the all type of credit card patterns, like AMEX,VISA,MASTER, Dinnerclub, JCB, enRoute ,Discover 
^[3|4|5|6]([0-9]{15}$|[0-9]{12}$|[0-9]{13}$|[0-9]{14}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1836
#T: Tag InnerHTML Remover
#A: Kerry Jones
#D: This will remove the InnerHTML of a tag. For instance, if you wanted to clear all paragraphs and h1 tags on a page, you would simply put in "p" and "h1" into those tags, and they would end up looking like <h1></h1> <p></p> <p></p>. It's useful when you're doing work based off a template and you need to get back to the original template.
(<(tag1|tag2)[^>]*\/?>)[\w\S\s]*?(<\/(?:\2)>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1837
#T: US Phone Number
#A: Jon Turlington
#D: This should be pretty complete phone number pattern. I use [0-9] when most people seem to use \d because it is easier for me to read.
^(\{1}[2-9]{1}[0-9]{2}\){1}[ ]?[2-9]{1}[0-9]{2}(-| )?[0-9]{4}|[2-9]{1}[0-9]{2}[ ]{1}[2-9]{1}[0-9]{2}[ ]{1}[0-9]{4}|[2-9]{1}[0-9]{2}[2-9]{1}[0-9]{6}|[2-9]{1}[0-9]{2}-{1}[2-9]{1}[0-9]{2}-{1}[0-9]{4}){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1838
#T: First Given Name
#A: Jon Turlington
#D: This will allow to check to make sure the string is a First or Given Name and it can be initials and it can include a prefix.
^((Sir|Dr.|Mr.|Mrs.|Ms.|Rev.){1}[ ]?)?([A-Z]{1}[.]{1}([A-Z]{1}[.]{1})?|[A-Z]{1}[a-z]{1,}|[A-Z]{1}[a-z]{1,}[-]{1}[A-Z]{1}[a-z]{1,}|[A-Z]{1}[a-z]{0,}[ ]{1}[A-Z]{1}[a-z]{0,}){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1839
#T: Email
#A: San
#D: This pattern validates email address. it allows (1)numeric characters and underscore(_) in an address.(2)numeric characters in domain name. it doesn't match user names with a dot(.). doesn;t allow username starting or ending with @ underscore.
([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1840
#T: Credit Card: Visa + MC
#A: Dan Partain
#D: A simple regex to check for only Visa and MasterCard with no dashes or spaces. Visa starts with a 4 and is 13 or 16 digits long, MasterCard starts with a 51 through 55 and is 16 digits long. I noticed that some of the other formulas don't account for Visa being valid with only 13 digits. I used this for a PayPal processor (which doesn't allow dashes or spaces) and modified it from others on this site. Enjoy.
^(5[1-5]\d{2})\d{12}|(4\d{3})(\d{12}|\d{9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1841
#T: Street Address Pattern
#A: Hamilton Turner
#D: Matches most street addresses. based off of code found on regexlib.com, modified to include city and removed extranneous code. will not find streets with single number digit, did this on purpose--application specific
((\d{2,6}\s[a-z. ]{2,60}\s[a-zA-Z]{2,15})[,. ()]+(([a-z /]+)?)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1842
#T: PO Box
#A: z
#D: Finds PO Box in given string. to make it case incensitive please send test string in lower case. 
^p(ost)?[ |\.]*o(ffice)?[ |\.]*[box|b\.o\.x|b\so\sx][\s0-9a-z]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1843
#T: Time
#A: Hamilton Turner
#D: matches times that typically come after dates, such as july 12 10-12. useful for finding event start and end time
(\d\d?:?\d?\d?)[-pmato ]*(\d\d?:?\d?\d?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1844
#T: Strings inside double quotations 
#A: Amr Salah
#D: Finds strings enclosed in double quotations  
"[^"]+" 

#U: http://regexlib.com/REDetails.aspx?regexp_id=1845
#T: Leap Year
#A: Jon Gray
#D: Validates four-digit leap years after 1582 (when Pope Gregory XIII switched to the Gregorian calendar). The last recognized leap year is 9996, so no worries with the y3k bug.
(15(8[48]|9[26]))|((1[6-9]|[2-9]\d)(0[48]|[13579][26]|[2468][048]))|(([2468][048]|16|3579[26])00)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1846
#T: Chinese Date With /or -
#A: Ryoan Dan
#D: This regular expressions matches dates of the form YYYY/XX/ZZ ,where YYYY is always 4 digits long, XX can be 01 to 12 and ZZ can be 01 to 31
^\d{4}(\/|-)([0][1-9]|[1][0-2])(\/|-)([0][1-9]|[1-2][0-9]|[3][0-1])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1848
#T: Date Validator 
#A: Mahhek Khan
#D: This is the date validator for dates of the format DD-MMM-YYY 
^((31(?!(\-)((F|f)(E|e)(B|b)|(A|a)(P|p)(R|r)|(J|j)(U|u)(N|n)|(S|s)(E|e)(P|p)|(N|n)(O|o)(V|v))))|((30|29)(?!(\-)((F|f)(E|e)(B|b))))|(29(?=(\-)(F|f)(E|e)(B|b)(\-)(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])(\-)((J|j)(A|a)(N|n)|(F|f)(E|e)(B|b)|(M|m)(A|a)(R|r)|((M|m)(A|a)(Y|y))|(A|a)(P|p)(R|r)|(J|j)(U|u)(L|l)|(J|j)(U|u)(N|n)|(A|a)(U|u)(G|g)|(O|o)(C|c)(T|t)|(S|s)(E|e)(P|p)|(N|n)(O|o)(V|v)|(D|d)(E|e)(C|c))(\-)((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1849
#T: Postive/Negative Numbers with 2 digits
#A: Gunarathinamm
#D: It accepts only two integer after a decimal point. The number may be in Positive or negative.
^[-+]?\d+(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1850
#T: check ISO date
#A: Patrick Metz
#D: This regex checks if a date is in ISO-format (yyyy-mm-dd). Leap year should be checked too. Date has to be between 1900-01-01 and 2999-12-31.
^((((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(0[13578]|10|12)([-])(0[1-9]|[12][0-9]|3[01]))|(((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(0[469]|11)([-])([0][1-9]|[12][0-9]|30))|(((19[0-9][0-9])|(2[0-9][0-9][0-9]))([-])(02)([-])(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)([-])(02)([-])(29))|(([13579][26]00)([-])(02)([-])(29))|(([0-9][0-9][0][48])([-])(02)([-])(29))|(([0-9][0-9][2468][048])([-])(02)([-])(29))|(([0-9][0-9][13579][26])([-])(02)([-])(29)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1851
#T: check german date
#A: Patrick Metz
#D: This regex checks if a date is in german date format (dd.mm.yyyy). Leap year should be checked too. Date has to be between 01.01.1900 and 31.12.2999.
^(((0[1-9]|[12][0-9]|3[01])([\.])(0[13578]|10|12)([\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|(([0][1-9]|[12][0-9]|30)([\.])(0[469]|11)([\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|((0[1-9]|1[0-9]|2[0-8])([\.])(02)([\.])((19[0-9][0-9])|(2[0-9][0-9][0-9])))|((29)([\.])(02)([\.])([02468][048]00))|((29)([\.])(02)([\.])([13579][26]00))|((29)([\.])(02)([\.])([0-9][0-9][0][48]))|((29)([\.])(02)([\.])([0-9][0-9][2468][048]))|((29)([\.])(02)([\.])([0-9][0-9][13579][26])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1852
#T: Strip Unquoted Whitespace
#A: Chadwick Posey
#D: When removing any whitespace from something like an excel formula, you need to strip the whitespace from around cell references or other non-quoted strings, while leaving quoted (both single and double quotes) in tact.  It even works when another different quote, or double quote is embedded in the string.  You can execute this with a replacement group $1 to replace the spaces with another character (or empty string to remove the spaces).  Does not match if the quoted string spans multiple lines (if \r\n is inside the quoted string)
(?:\s+)|((?:"(?:.+?)")|(?:'(?:.+?)')) 

#U: http://regexlib.com/REDetails.aspx?regexp_id=1853
#T: Filter HTML Comments
#A: Matt Workman
#D: Removes HTML comments with ease. Based off of Chris Craft's /* ... */ comment removal.
<!--[\d\D]*?-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=1854
#T: URL Validator
#A: Ted Cambron
#D: A simple but powerful URL validating regex. Accepts multiple subdomains and subdirectories. Even accept query strings.
#D: Does not accept ports. That's not what this is for.
#D: UPDATED! with user's suggestions.
#D: Accepts http or https.
#D: Removed underscores from domain name.
#D: Accepts optional "/" on end of address.
^(http(?:s)?\:\/\/[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*\.[a-zA-Z]{2,6}(?:\/?|(?:\/[\w\-]+)*)(?:\/?|\/\w+\.[a-zA-Z]{2,4}(?:\?[\w]+\=[\w\-]+)?)?(?:\&[\w]+\=[\w\-]+)*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1855
#T: Email Validator
#A: Ted Cambron
#D: After reading RFC2822 (then taking two asprin) I've come to the conclusion that I will not allow all RFC compliant email addresses to be entered at the forms on my site and will never have an issue with it. I re-enabled this regex, with a little user suggested edit, because I demand a stricter tolerance for my website than RFC allows. If you're like me and only want to allow minimal characters, then use this regex. Also, I've never met anyone who would submit an email address taking full advantage of RFC2822's allowances nor would I care to accomodate one who would.
^([a-zA-Z0-9]+[a-zA-Z0-9._%-]*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1856
#T: Image URL
#A: Ted Cambron
#D: A nice little regex to verify a URL pointing towards an image. Can be useful.
^(http\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(?:\/\S*)?(?:[a-zA-Z0-9_])+\.(?:jpg|jpeg|gif|png))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1857
#T: NonStop ProcessName
#A: Fred Stephens
#D: NonStop or Guardian OS process or disk volume name. Must start with a "$" and have an initial letter character with up to six more alpha numberic characters
^\${1}[a-z]{1}[a-z\d]{0,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1858
#T: Tandem NonStop filename
#A: Fred Stephens
#D: Tandem NonStop or Guardian OS filename or subvolume name. It must start with a letter then can upto seven alphanumeric characters.
^[a-z]{1}[a-z\d]{0,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1859
#T: Date & Time
#A: MiAz
#D: Validation of date (YYYY-MM-DD format) and time (HH:MM format) with one space between both blocks. I'm not able (with this) to validate the correct last day of each month. Anyway, it helps :-)
[0-9][0-9][0-9][0-9]-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])\s{1}(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1860
#T: Part Numbers
#A: Bruce Holeman
#D: I had a need to validate 7 digit part numbers consisting of 2 characters followed by 1 to 5 numbers. This expression tests for both the characters and at least on non-zero number. Spaces are not allowed. It should be easy to modify to different length numbers
\b[A-Za-z]{2}(?=([0-9]*[1-9]){1,})\d{1,5}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1861
#T: Email matcher
#A: Kamaji
#D: This is a cleanup of Vijay Joshi's "Email" pattern.  It matches the same characters that his does, but matches them anywhere in the line.  It adds useful substitution groups -- [1] - username portion of email (before @), [3] domain portion of email - after the @.  It also was a bit overly-complex, so I reduced this as well..  Remember -- if you're planning to use this with something that uses 1003.2 BREs, you'll have to backquote + | ? ( ) { and }.
([^_.]([a-zA-Z0-9_]*[.]?[a-zA-Z0-9_]+[^_]){2})@([a-z0-9]+[.]([a-z]{2,3}|[a-z]{2,3}[.][a-z]{2,3}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1862
#T: Detects height=1 and width=1
#A: Sharath
#D: Just checks to see if the height and width of a tag is 1. Useful when detecting web bugs.
height\s*=\s*"?1"? width\s*=\s*"?1"?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1863
#T: Invalid Roman Numeral Combinations
#A: John Marshall
#D: All combinations of Roman numeral characters that are needed to invalidate a Roman numeral (to see if the combination isn't a valid Roman numeral).
#D: NOTE: Not case-sensitive
(([IXCM])\2{3,})|[^IVXLCDM]|([IL][LCDM])|([XD][DM])|(V[VXLCDM])|(IX[VXLC])|(VI[VX])|(XC[LCDM])|(LX[LC])|((CM|DC)[DM])|(I[VX]I)|(X[CL]X)|(C[DM]C)|(I{2,}[VX])|(X{2,}[CL])|(C{2,}[DM])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1864
#T: Block pdf Spam
#A: Tuncay BAŞ
#D: use pdf attachment block spam
.*-[0-9]{1,10}.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1866
#T: Simple but affective
#A: sail
#D: [\s0-9a-zA-Z\;\"\,]* match any text just add character or symbol to be matched  inside[ ] like [\<] for  (<) symbol. if u want find between two word then just use  Eg : <div>[\s0-9a-zA-Z\;\"\,]* </div> it will return the  content between <div> tags. Just add all  format  to match all .It is better than (.*) because (.*) is difficult to end at particular part  as we needed.
[\s0-9a-zA-Z\;\"\,\<\>\\?\+\=\)\(\\*\&\%\\$\#\.]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1867
#T: Title Anchor Tags
#A: Kerry Jones
#D: Use the above pattern with this replacement pattern: "<a\1 title="\2">\2</a>" and it will put title tags in all of your anchors that don't have a title tag.
<a((?:(?! title=)[^">]*"[^">]*")+)>([^<]+)<\/a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1868
#T: Mexican CURP RegEx
#A: Sergio Montero
#D: I use this one to validate CURP structure. CURP is a mexican unique identifier for certain intitutions like INFONAVIT and it's very useful
^[a-zA-Z]{4}((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)(H|M)(AS|BC|BS|CC|CL|CM|CS|CH|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|SM|NE)([a-zA-Z]{3})([a-zA-Z0-9\s]{1})\d{1}$+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1869
#T: Email
#A: Sunil Rathore
#D: This regular expression is used to validate any supportable email ID over the Internet.
^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1871
#T: password without using lookaheads
#A: Brian S
#D: Passwords with at least 1 letter, at least 1 non-letter, and at least 6 characters in length.  It is lenthy with a repeating pattern so that I could validate all three conditions in one expression without using a lookahead, "?=", which are not handled correctly in Internet Explorer.
^(.{0,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{4,})|(.{1,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{3,})|(.{2,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{2,})|(.{3,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{1,})|(.{4,}(([a-zA-Z][^a-zA-Z])|([^a-zA-Z][a-zA-Z])).{0,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1872
#T: US Phone - No Toll Free or 900
#A: Derrick Brown
#D: Based on PJ Bijoy's regex for a US phone number, I've added validation that the area code is a valid US Area code (first digit is greater than 2) and that the area code is not a reserved Toll Free Code (800, 822, 833, 844, 855, 866, 877, 888) and not a premium number (900).  It will accept phone patterns of ###-###-#### (3 digits dash 3 digits dash 4 digits), ########## (10 digits), (###)###-#### (3 digits in parens 3 digits dash 4 digits), (###)### #### (3 digits in parens 3 digits space 4 digits), (###) ###-#### (3 digits in parens space 3 digits dash 4 digits), (###) ### #### (3 digits in parens space 3 digits space 4 digits)
^\((([2-7][0-9]{2})|(8(0[^0]|[^0]0|1\d|2[^2]|[^2]2|3[^3]|[^3]3|4[^4]|[^4]4|5[^5]|[^5]5|6[^6]|[^6]6|7[^7]|[^7]7|8[^8]|[^8]8|9\d){1})|(9(0[^0]|[^0]0|[1-9][1-9])))\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^(([2-7][0-9]{2})|(8(0[^0]|[^0]0|1\d|2[^2]|[^2]2|3[^3]|[^3]3|4[^4]|[^4]4|5[^5]|[^5]5|6[^6]|[^6]6|7[^7]|[^7]7|8[^8]|[^8]8|9\d){1})|(9(0[^0]|[^0]0|[1-9][1-9])))-?[0-9]{3}-?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1873
#T: While Not Between
#A: Timothy Khouri
#D: This .NET regex will match "SomeText" while not between the words "aaa" and "bbb". A good use of this is to find certain text while you are not inside of a certain HTML tag.
(?<!aaa((?!bbb)[\s\S])*)SomeText

#U: http://regexlib.com/REDetails.aspx?regexp_id=1874
#T: email regex
#A: Kumar Deepak Ranjan
#D: any email form like any_name@mail.confidential.yahoo.com, any_name@mail.yahoo.com, any_name@yahoo.com, any.name@yahoo.com, anyname@domain.com. You can replace .com with .net | .edu | .uk | .in or anything. I will work.
[\w]+\@[\w]+\.?[\w]+?\.?[\w]+?\.?[\w+]{2,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1875
#T: US Phone (10 digit)
#A: Kumar Deepak Ranjan
#D: Normaly US 10 digit numbers are writen as xxx.xxx.xxxx or xxx-xxx-xxxx or simply 7 digit numbers for local websites where area code is filled by default xxx.xxxx or xxx-xxxx
(\d+)?-?(\d+)-(\d+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1876
#T: Extra Spaces
#A: Alexander
#D: Removes leading, trailing and extra spaces between words.
#D: In the examples '_' means ' '.
(^\x20*)|(\x20*$)|(\x20(?=\x20))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1877
#T: extension
#A: chenjie
#D: match extension
\.?[a-zA-Z0-9]{1,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1879
#T: Number limiting x digits before decimal, and y digits after decimal point.
#A: Ken Palmer
#D: This regular expression is intended to limit numeric entries by allowed places before and after the decimal point.  It also recognizes whole numbers.  In this example the value cannot exceed 99999.999.  To change the range, simply edit the numbers in curly braces.  For example, to allow 7 digits (millions) before the decimal point, change both instances of {0,5} to {0,7}. Likewise, to change the decimals from allowing thousandths (3 digits) to just hundreths, change the {0,3} to {0,2}.  This can be useful for numeric fields in SQL.  This example was made to accommodate a numeric(8,3) field definition.
^([0-9]{0,5}|[0-9]{0,5}\.[0-9]{0,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1880
#T: Swedish Personal Nr (Personnummer)
#A: Linus
#D: Simple regex for the Swedish personal number. It's in the form: YYMMDD-xxxx where xxxx is an arbitrary number from 0000-9999.
^\d{2}([0][1-9]|[1][0-2])([0][1-9]|[1-2][0-9]|[3][0-1])-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1882
#T: Query String Regex
#A: Ted Cambron
#D: This is a very simple regex that check the query part of a string. That is to say anything after the "?" at the end of an URL.
^((?:\?[a-zA-Z0-9_]+\=[a-zA-Z0-9_]+)?(?:\&[a-zA-Z0-9_]+\=[a-zA-Z0-9_]+)*)$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=1883
#T: Indian Mobile Number
#A: sourabh jain
#D: This regular expression will verify all the moblie numbers in india
^([9]{1})([234789]{1})([0-9]{8})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1884
#T: RegExp For EMail
#A: Sridharan
#D: This will help you to catch the Email address with "mailto:" string
mailto:+\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1885
#T: Url validation
#A: Gianluca Esposito
#D: An URL validation pattern with respect for TLD domains. It also validates ip urls, but it doesn't check for ip single parts range (1-255). It supports port specification.
(http|https)\:\/\/(([\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3})|([\w\-]+\.)+(((af|ax|al|dz|as|ad|ao|ai|aq|ag|am|aw|au|at|az|bs|bh|bd|bb|by|be|bz|bj|bm|bt|bo|ba|bw|bv|br|io|bn|bg|bf|kh|cm|ca|cv|ky|cf|td|cl|cn|cx|cc|km|cg|cd|ck|cr|ci|hr|cu|cy|cz|dk|dj|dm|do|ec|eg|sv|gq|er|ee|et|fk|fo|fj|fi|fr|gf|pf|tf|ga|gm|ge|de|gh|gi|gr|gl|gd|gp|gu|gt| gg|gn|gw|gy|ht|hm|va|hn|hk|hu|is|id|ir|iq|ie|im|il|it|jm|jp|je|jo|kz|ke|ki|kp|kr|kw|kg|la|lv|lb|ls|lr|ly|li|lt|lu|mo|mk|mg|mw|my|mv|ml|mt|mh|mq|mr|yt|mx|fm|md|mc|mn|ms|ma|mz|mm|nr|np|nl|an|nc|nz|ni|ng|nu|nf|mp|no|om|pk|pw|ps|pa|pg|py|pe|ph|pn|pl|pt|qa|re|ro|ru|rw|sh|kn|lc|pm|vc|ws|sm|st|sa|sn|cs|sc|sl|sg|sk|si|sb|so|za|gs|es|lk|sd|sr|sj|sz|se|ch|sy|tw|tj|tz|th|tl|tg|tk|to|tt|tn|tr|tm|tc|tv|ug|ua|gb|us|um|uy|uz|vu|ve|vn|vg|vi|wf|eh|ye|zm|zw|uk|com|edu|gov|int|mil|net|org|biz|info|name|pro|aero|coop|museum|arpa|co|in|ne|bi|na|pr|ae|mu|ar))))(:[\d]{1,4})?($|(\/([a-zA-Z0-9\.\?=/#%&\+-])*)*|\/)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1886
#T: Email validation
#A: Gianluca Esposito
#D: Email validation regular expression. It checks for TLD domain correctness and supports for IP addresses. It doesn't check for ip single parts range validity (1-255).
([\w\-\.]*)@(([\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.[\d]{1,3})|([\w\-]+\.)+(((af|ax|al|dz|as|ad|ao|ai|aq|ag|am|aw|au|at|az|bs|bh|bd|bb|by|be|bz|bj|bm|bt|bo|ba|bw|bv|br|io|bn|bg|bf|kh|cm|ca|cv|ky|cf|td|cl|cn|cx|cc|km|cg|cd|ck|cr|ci|hr|cu|cy|cz|dk|dj|dm|do|ec|eg|sv|gq|er|ee|et|fk|fo|fj|fi|fr|gf|pf|tf|ga|gm|ge|de|gh|gi|gr|gl|gd|gp|gu|gt| gg|gn|gw|gy|ht|hm|va|hn|hk|hu|is|id|ir|iq|ie|im|il|it|jm|jp|je|jo|kz|ke|ki|kp|kr|kw|kg|la|lv|lb|ls|lr|ly|li|lt|lu|mo|mk|mg|mw|my|mv|ml|mt|mh|mq|mr|yt|mx|fm|md|mc|mn|ms|ma|mz|mm|nr|np|nl|an|nc|nz|ni|ng|nu|nf|mp|no|om|pk|pw|ps|pa|pg|py|pe|ph|pn|pl|pt|qa|re|ro|ru|rw|sh|kn|lc|pm|vc|ws|sm|st|sa|sn|cs|sc|sl|sg|sk|si|sb|so|za|gs|es|lk|sd|sr|sj|sz|se|ch|sy|tw|tj|tz|th|tl|tg|tk|to|tt|tn|tr|tm|tc|tv|ug|ua|gb|us|um|uy|uz|vu|ve|vn|vg|vi|wf|eh|ye|zm|zw|uk|com|edu|gov|int|mil|net|org|biz|info|name|pro|aero|coop|museum|arpa|co|in|ne|bi|na|pr|ae|mu|ar)))?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1887
#T: Common Name
#A: Troy Skinner
#D: Matches common ASCII names without special characters.
^[^\x00-\x1f\x21-\x26\x28-\x2d\x2f-\x40\x5b-\x60\x7b-\xff]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1888
#T: Linkify 
#A: Erik Silkensen
#D: This regex attempts to "linkify" a url that isn't already part of an <a> tag.
\b(ht|f)tp[s]?://[^\s\n\r\t\<\>]+(?=[\b\s\n\r\t\<])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1890
#T: European Date Time
#A: Rui Miguel Silva
#D: European date time yyyy-mm-dd hh:mm   dont acept seconds
^([2][01])\d{2}-([0]\d|[1][0-2])-([0-2]\d|[3][0-1])(\s([0-1]\d|[2][0-3])(\:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1891
#T: CVV2/CVC2/CID
#A: Tony Fugere
#D: This is a bit shorter than the first CVV2/CVC2/CID regex found on the site. It matches any 3 or 4 character number.
#D: Now featuring change per suggestion in comments. Thanks!
^(?!000)\d{3,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1892
#T: HTML HEX Characters codes
#A: Roberto Santana
#D: This pattern matches any HTML character code in hexadecimal format. Doesn't match numerical code such as Ë or any friendly code character such as  
&#x((?=.*[ABCDEF]))*((?=.*[0-9]))*.{2,5};

#U: http://regexlib.com/REDetails.aspx?regexp_id=1893
#T: HTML Special Characters codes
#A: Roberto Santana
#D: This pattern matches any HTML special character code in the knowed friendly-code.
&[a-zA-Z]+\d{0,3};

#U: http://regexlib.com/REDetails.aspx?regexp_id=1894
#T: HTML Characters numerical codes
#A: Roberto Santana
#D: This pattern matches any HTML special character in numerical code.
&#\d{2,5};

#U: http://regexlib.com/REDetails.aspx?regexp_id=1895
#T: HTML Tags
#A: Roberto Santana
#D: Mathes any HTML tag with any parameters. Very useful to clean HTML of a text.
</?[a-z][a-z0-9]*[^<>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1896
#T: Password complexity
#A: Roberto Santana
#D: Tests if the input consists of 6 or more letters, digits, underscores and hyphens. The input must contain at least one upper case ltter, one lower case letter and one digit.
(?=[-_a-zA-Z0-9]*?[A-Z])(?=[-_a-zA-Z0-9]*?[a-z])(?=[-_a-zA-Z0-9]*?[0-9])[-_a-zA-Z0-9]{6,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1897
#T: Split camelCase word
#A: Speednet
#D: Used with the Regex.Split() function in .NET, this will easily split a camelCase word on the upper case letters, while not dropping any characters.  (That makes it different from most split() functions -- it does not drop any characters.)  More details in my blog - http://blogs.lotterypost.com/speednet/2007/08/simple-function-to-split-camelcase-words.htm
(?<!^)(?=[A-Z])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1898
#T: HTML Tags and Comments
#A: Roberto Santana
#D: Mathes any HTML tag with any parameters and HTML Comments. Very useful to clean HTML of a text.
<!*[^<>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1899
#T: Extract Literal Text from HTML
#A: Chris Morton
#D: This regular expression allows you to extract literal text from an HTML (SGML compliant?) document. i believe it will also work for XML. using code to replace the HTML element you can extract the literal text only.
<[\w\"\ '\#\* \=\',\.\\\(\)\/\-\$\{\}\[\]\|\*\?\+\^\&\:\%\;\!]+>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1900
#T: Find IP Address Block Range
#A: Jonathan Maher
#D: This expression matches IP Addresses between 192.168.0.17 - 192.168.0.32 which is a block range of 16 addresses. I created this expression for Google Analytics to filter out hits from our companies office.
^((192\.168\.0\.)(1[7-9]|2[0-9]|3[0-2]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1901
#T: Password Validation
#A: Sravan
#D: Well, I don't remember where from I got this expression, but I modified it a bit to work with asp.net 2.0's Regular expression validator. This validates if the password has atleast 6 characters, of which, atleast 1 character has to be Upper case, atleast 1 lower case, atleast 1 number and atleast one non-word character(say special symbols). Hope this is helpful.
^.*(?=.{6,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\W]).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1902
#T: Five digit comma separated  numeric value
#A: Navaid Ahmed
#D: This regular expression is used for validating five digit numeric value which can be an amount $ separated with , sign.
^(\$)?((\d{1,5})|(\d{1,3})(\,\d{3})*)(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1903
#T: QueryString extract
#A: slolife
#D: Extracts the querystring from a link tag
<a.*? href=["|'].*\?(?<query>.*?)["|'].*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1904
#T: PGP text
#A: sebastian nielsen
#D: This is very useful if you dont want your employees to send encrypted mail, or downloading public keys from HTTP. It also catches certficates, CSR and other useless stuff that is only used to hide data from antivirus programs and such things.
(.*)-----(BEGIN|END)([^-]*)-----(.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1905
#T: Email Address
#A: Leojhose
#D: Checks for a valid E-mail Id
^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w][^_]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1906
#T: UK Vehicle Registration Numbers (VRM)
#A: John Bayly
#D: ^(([A-Z]{1,2}[ ]?[0-9]{1,4})|([A-Z]{3}[ ]?[0-9]{1,3})|([0-9]{1,3}[ ]?[A-Z]{3})|([0-9]{1,4}[ ]?[A-Z]{1,2})|([A-Z]{3}[ ]?[0-9]{1,3}[ ]?[A-Z])|([A-Z][ ]?[0-9]{1,3}[ ]?[A-Z]{3})|([A-Z]{2}[ ]?[0-9]{2}[ ]?[A-Z]{3})|([A-Z]{3}[ ]?[0-9]{4}))$
Pattern that matches all DVLA Vehicle Registration Marks (VRM). Allows for an optional single space between segments.\NSource:\Nhttp://www.carreg.co.uk/number_plates/registration_numbers

#U: http://regexlib.com/REDetails.aspx?regexp_id=1907
#T: Date Format
#A: Ken
#D: This regular expressions matches dates of the form dd/MMM/yyyy where dd can be 1 or 2 digits long, MMM is a month abbreviation, and yyyy is always 4 digits long.
^(([0-9])|([0-2][0-9])|([3][0-1]))\/(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\/\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1908
#T: AMEX, Discover, MC, Visa
#A: Tony Fugere
#D: Matches Visa, American Express, Discover, and Mastercard only.
^((4(\d{12}|\d{15}))|(5\d{15})|(6011\d{12})|(3(4|7)\d{13}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1909
#T: 32 Character Hex String
#A: Thushan Fernando
#D: Matches only a 32 character hex string (Eg. MD5). Based off Chris Craft's expression:-)
^\{?[a-fA-F\d]{32}\}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1910
#T: Domain restriction check
#A: Leojhose
#D: Just a try....
[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+(?:[A-Z]{2}|com|org|net|gov|biz|info|name|aero|biz|info|jobs|museum)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1911
#T: Remove all attributes related to event handling from inside HTML tags
#A: globalplayer
#D: No idea whether anyone would ever need this, but I had to work half a day on this pattern, so I decided to share it. :) It was never meant for productive use at all; it was rather to filter out all that annoying event handling stuff to find a bug in my DHTML table-generating script. Give it a try with this string (see details):
#D: <div id="TSelect_TD_value_911" class="TSel" onpaste="" onblur="TSelectClose(this);" onClick="TSelectOpen(this);" style="width:250px; padding:2px;">
(\s(\bon[a-zA-Z][a-z]+)\s?\=\s?[\'\"]?(javascript\:)?[\w\(\),\' ]*;?[\'\"]?)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1912
#T: Find special ascii characters
#A: Brooks
#D: Finds those pesky ascii characters that can be entered with the alt-numeric pad 
[\x80-\xFF]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1913
#T: Croatian Phone Number (old style)
#A: Stjepan Obranković
#D: Croatian phone numbers (old style). Area code and phone number, area code optional. Area code in $2 (if specified) phone number is in $4 or $5+$6+$7 or $8+$9.
^((\d{2,4})/)?((\d{6,8})|(\d{2})-(\d{2})-(\d{2,4})|(\d{3,4})-(\d{3,4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1914
#T: EU Date
#A: Stjepan Obranković
#D: This pattern can be used to match EU style dates of formad d.m.yyyy where d and m can be two digits d <= 31 and m <= 12
^(([1..9])|(0[1..9])|(1\d)|(2\d)|(3[0..1])).((\d)|(0\d)|(1[0..2])).(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1915
#T: Reg Ex for Date with Leap Year
#A: Nikhil Shinde
#D: Enter the date in MM/DD/YYYY format. This regular expression validates the day, month and year including the leap year validations.
^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1916
#T: Croatian geographic phone number
#A: Stjepan Obranković
#D: Croatian geographic number is preceeded with country code 385 and then has area code (1 or 2 digits) and subscriber number (6,7 digits). Total length of area code and subscriber number can be 8 digits. This regular expression supports only valid area codes.
^(385)(((1)(\d{2})(\d{1})(\d{1})(\d{3}))|((20|21|22|23|31|32|33|34|35|40|42|43|44|47|48|49|51|52|53)(\d{1})(\d{1})(\d{1})(\d{3})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1918
#T: URL Validation
#A: Thomas Buettner
#D: A regular expression which allows to find most of valid URL's and it is including some picture or packing-format prefixes at the end of an URL.
#D: sorry but www.test.com.php is working too, maybe someone could give me a tip for a workaround.
^((http|https|ftp|ftps)+(:\/\/))?(www\.)?\N(([a-z0-9\.-]{2,})\.(ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|ax|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|dd|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|fx|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|me|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|rs|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tl|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|aero|asia|cat|coop|edu|gov|jobs|mil|mobi|museum|tel|travel|pro|post|biz|com|info|int|name|net|org|pro|arpa)\N|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])))\N(:([1-9][0-9]?[0-9]?[0-9]?|[1-5][0-9][0-9][0-9][0-9]|6[0-4][0-9][0-9][0-9]|65[0-4][0-9][0-9]|655[0-2][0-9]|6553[0-5]|))?\N(((\/(([a-zA-Z0-9_\-\%\~\+\&\;]{1,})+)*)*)|\/$)?\N(\.(php|html|htm|zip$|arj$|rar$|sit$|pdf$|gif$|jpg$|jpeg$|jpe$|tif$|tiff$))?\N(\?([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+)?(\&([a-zA-Z0-9_\-]+\=[a-z-A-Z0-9_\-\%\~\+]+))*)?\N(\=\?([a-zA-Z0-9_\-])*)?(((\+([a-zA-Z0-9_])*)?(\-([a-zA-Z0-9_])*)?)*)?\N(\#([a-z-A-Z0-9_\-\%\~\+\&\;]*$))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1919
#T: Individual Taxpayer Identification Number (ITIN)
#A: Robert Sewell
#D: U.S. Individual Taxpayer Identification Number (ITIN) as defined in December 2006. The valid range is 900-70-0000 through 999-88-9999, all numeric values. This regular expression will accept anything in this range with space, dash or no separators.
^(9\d{2})([ \-]?)([7]\d|8[0-8])([ \-]?)(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1920
#T: DD/MMM/YYYY
#A: Ken
#D: Matches dates in the form of DD/MMM/YYYY.  It also handles leap years.  Days are 2 digits; months are case sensitive with first character upper-case and next 2 characters lower-case; year is 4 digits.
^(?:((31\/(Jan|Mar|May|Jul|Aug|Oct|Dec))|((([0-2]\d)|30)\/(Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))|(([01]\d|2[0-8])\/Feb))|(29\/Feb(?=\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))\/((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1921
#T: Valid Email Address
#A: Parth
#D: This is world's best solution
^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1922
#T: Validate Multiple Email Addresses
#A: Dan Lorenz
#D: This will validate multiple email addresses that are comma delimited.  You can change it to use commas or semilcolons.  If you have to worry about a lot of special characters, you may have to edit it a little bit.  It allows white space before and after the comma.
^((\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)\s*[,]{0,1}\s*)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1923
#T: Strong Password
#A: Scot Baird
#D: This regular expression can be used for validating a strong password. It expects at least 1 lowercase letter, 1 uppercase letter, and 1 digit. It will also allow for some special characters. The length should be greater than 8 characters. The sequence of the characters is not important.
(?=^.{8,}$)(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s)[0-9a-zA-Z!@#$%^&*()]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1924
#T: XML to English
#A: Christopher Furlong
#D: I needed to get all the text from a Flash-based sales CD to a translator. Since all of the CD's data was in XML, I needed something that first removed all commented code, then removed all XML tags, and finally removed all references to image names. This left only the plain english, neatly formatted for legibility.
<!--[\s\S]*?-->|<.*?>|.*?(.jpg|.gif|.png|.swf)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1925
#T: Open Body Tag Good for analytic implementaiton
#A: Michael Davis
#D: This will find the open body tag regardless of any properties or Event Handlers associated with it. This is great for global implementations  of analytics or anything that needs to be placed after the body tag.
<body[\d\sa-z\W\S\s]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1926
#T: Email (with Tags)
#A: Zj6Ul8Eo9
#D: I got tired of sites not recognising my Gmail account when I used tags, so I created this regexp which allows them to be included. Outputted variables are #1 - Username, #2 - Tag (or blank), #3 - Domain
([A-Z][\w\d\.\-]+)(?:(?:\+)([\w\d\.\-]+))?@([A-Z0-9][\w\.-]*[A-Z0-9]\.[A-Z][A-Z\.]*[A-Z])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1927
#T: Allows letters numbers hyphens periods and underscore
#A: adnan
#D: Allows letters,numbers,hyphens,periods and underscores. Such as : Aa.Aa.Aa, .Aa.Aa. , -Aa-Aa- , _Aa_Aa_ , Aa_Aa_Aa , Aa-Aa-Aa , . , - , _
#D: I was asked by my client for this scenario to allow letters,numbers,hyphens,periods and underscores in User ID field in web application.
^((\.)?([a-zA-Z0-9_-]?)(\.)?([a-zA-Z0-9_-]?)(\.)?)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1928
#T: First Name or Last Name
#A: Lee Derks
#D: Checks if a first or last name text box contains a valid name. A valid name consists of a-z, A-Z, 0-9,-,and '.
^[a-zA-Z0-9\s-']+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1929
#T: Password Matcher
#A: Etem Emrah Alicli
#D: 6-10 characters, at least 4 characters and at least 2 numbers
^.*(?=.{6,10})(?=.*[a-zA-Z].*[a-zA-Z].*[a-zA-Z].*[a-zA-Z])(?=.*\d.*\d).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1930
#T: Continuous Spaces
#A: Robert Gonzalez
#D: Matches all chars that are made up of one or more spaces. I found this useful when people were trying to make string length bypasses using consecutive spaces.
(\s{1,})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1931
#T: FITS header line
#A: Keith Rosema
#D: FITS file headers have lines with a variable name, an =, and a value that may be in single quotes, followed by a comment demarcated with a forward slash, like this: VAFACTOR=   1.000030437184E+00 / velocity aberration plate scale factor.  Pattern matches FITS header lines and picks out whether the value is a number, string, or datetime.
^([-\w]+)\s*=\s*(([-+]?(\d+\.?\d*|\d*\.?\d+)([Ee][-+]?[0-2]?\d{1,2})?)|\'([- \w]+)\s*\'|\'([-\(\)\/ :\w]+)\s*\')\s*\/\s*(.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1932
#T: match php in html 
#A: Christian Sager
#D: Matches any php scriptlets in html text. Used to remove php from webpages for security reason.
(<\?php(.(?!\?>))*.\?>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1933
#T: Don't allow zero
#A: Eddie Merkel
#D: Needed to be able to validate positive and numeric values that equate to SQL Server data type decimal(18, 2) but the value could not be 0.  This regex does that.  If you need to change the precision or scale have at it.
[-]?[1-9]\d{0,16}\.?\d{0,2}|[-]?[0]?\.[1-9]{1,2}|[-]?[0]?\.[0-9][1-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1934
#T: Simple Windows filename finder
#A: Nick
#D: Will match a Windows filename containing alphanumerics, hyphens (-) and underscores (_). There is no length limit on the first part of the filename, but the extension must be between 1 and 3 characters.
([0-9a-z_-]+[\.][0-9a-z_-]{1,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1935
#T: Real Number
#A: Mark
#D: Matches a string reprsenting a real number. ie one that may have decimal places. It caters for hundred or thousand separators of either a space or a comma, negative numbers and numbers that either start or end with a decimal point
^[-]?(([.]?[0-9]+)|([0-9]{1,3}((([ ,]?[0-9]{3})*)|(([ ,]?[0-9]{2})*))[.]?[0-9]*))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1936
#T: German License Plate
#A: Kemmeter
#D: This one checks if the value is a possible german License Plate. The trailing H stands for Historical cars.
^[A-ZÄÖÜ]{1,3}\-[ ]{0,1}[A-Z]{0,2}[0-9]{1,4}[H]{0,1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1937
#T: MM/DD/YYYY
#A: shrinidhi
#D: This expression validates dates in the mm/dd/yyyy format and ya..expression will take care of the leap year dates 
^(?:(?:(?:0?[13578]|1[02])(\/|-)31)|(?:(?:0?[1,3-9]|1[0-2])(\/|-)(?:29|30)))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(?:(?:0?[1-9]|1[0-2])(\/|-)(?:0?[1-9]|1\d|2[0-8]))(\/|-)(?:[1-9]\d\d\d|\d[1-9]\d\d|\d\d[1-9]\d|\d\d\d[1-9])$|^(0?2(\/|-)29)(\/|-)(?:(?:0[48]00|[13579][26]00|[2468][048]00)|(?:\d\d)?(?:0[48]|[2468][048]|[13579][26]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1938
#T: phonenumber@email.com
#A: shrinidhi
#D: This is a basic/simple  expression i have come out to check 10digit mobile number and then any valid email ....
\d{10,12}@[a-zA-Z].[a-zA-Z].*

#U: http://regexlib.com/REDetails.aspx?regexp_id=1939
#T: Big or small A letter
#A: megaseparator
#D: Big or small A letter
(a|A)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1940
#T: PA, OH, new MI License Plates
#A: Mickael Caruso
#D: Pattern for Pennsylvania, Ohio, and Michigan (new) regular license plates
^[A-Z]{3}(\s)?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1941
#T: Medicare ID#
#A: Mickael Caruso
#D: An individual's (soon to be) Medicare number in the USA is a social security number (whether it be the individual's, spouse's, or parent) plus a series of 1 or 2 digit characters at the end.
^((\d){3})(-)?(\d){2}(-)?(\d){4}(A|B[1-7]?|M|T|C[1-4]|D)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1942
#T: French Last Names, Part I
#A: Mickael Caruso
#D: You can tell whether a last name is French or not. How do you teach your programs to recognize French last names? Here's an attempt. We haven't really covered other French names like LaMarre or François yet. Those will be in future French-regonition regular expressions.
^[A-Z][a-z]+((i)?e(a)?(u)?[r(re)?|x]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1943
#T: Blue Cross Blue Shield Member ID
#A: Mickael Caruso
#D: For all of you who have Blue Cross Blue Shield insurance coverage (not Federal, though)- check out your insurance cards! It ALWAYS begins with 3 letters (called the alpha prefix) and a series of alpha-numeric characters ranging from 8 to 12 digits.
^[A-Z]{3}(\d|[A-Z]){8,12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1944
#T: Blue Cross Blue Shield Federal ID#
#A: Mickael Caruso
#D: For those who work in the government somewhere who have BCBS coverage, this is your regular expression.
^R(\d){8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1945
#T: French Last Names, Part II
#A: Mickael Caruso
#D: Part II of French last names. Like part 1, it doesn't cover all French names.
^[A-Z][a-z]+(o(i|u)(n|(v)?r(t)?|s|t|x)(e(s)?)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1946
#T: Musical Chords
#A: Mickael Caruso
#D: Play guitar or read sheet music for piano/keyboard? You've got to be familiar with chord notations. They've got to have some format that regular expressions can test.
^[A-G](b|#)?((m(aj)?|M|aug|dim|sus)([2-7]|9|13)?)?(\/[A-G](b|#)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1947
#T: Armenian Last Name
#A: Mickael Caruso
#D: From experience and what I've been told, last names ending in -ian are most likely of Armenian origin. There could be some other foreign names that pass this pattern. Also, not every Armenian has a last name that ends in -ian. -ian is just common enough to stereotype.
~[A-Z][a-z]+(b|ch|d|g|j|k|l|m|n|p|r|s|t|v|z)(ian)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1948
#T: Currency
#A: mp09
#D: match US currency
^((\d{1,3}((,\d{3})*|\d*)(\.{0,1})\d+)|\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1949
#T: Validating the Date
#A: leojhose
#D: It validates the dates in U.S format
^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])\d{4}|([1-2][0,9][0-4][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1950
#T: Dutch Last Names
#A: Mickael Caruso
#D: How do you tell whether a last name is of Dutch origin? This pattern captures the -enga's, -stra's, and -ema's. There are also other Dutch names that don't end with these three "suffixes" but you know it's Dutch if it ends with either of those three.
^[A-Z][a-z]+((e(m|ng)|str)a)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1951
#T: College Course Numbers (USA)
#A: Mickael Caruso
#D: College course numbers are usually in the format LLLLNNN where L is a letter and N is a numeric digit, where the first digit ranges from 1-8 inclusive. 1-4 is undergrad, and 5-8 is masters and above.
^[A-Z]{4}[1-8](\d){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1952
#T: North American Phone Numbering Plan
#A: Eduardo Velasquez
#D: Matches normalized (space separated) phone numbers according to the NANP (North American Numbering Plan). It doesn't support extension numbers.
^((\+?(?<CountryCode>1)\s(?<AreaCode>[2-9][0-8][0-9])\s)|((?<AreaCode>[2-9][0-8][0-9])\s))?(?<ExchangeCode>[2-9][0-9][0-9])\s(?<StationCode>[0-9][0-9][0-9][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1953
#T: Portuguese Last Names
#A: Mickael Caruso
#D: I noticed that a last name is Portuguese if it ends in -eira, -eiro, -nha, or -nho. I know there are other Portuguese names that don't end with these, but I haven't yet come across any other foreign last names (besides Portuguese/Brazilian) that end in those 4.
^[A-Z][a-z]+((eir|(n|l)h)(a|o))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1954
#T: Email Domain
#A: Nitin Kumar Aggarwal
#D: It checks for the domain name validity. A domain name can't start with a dot(.). It can't have consecutive dots. If there are moe than one dot then there can be only 2 to 6 characters after the final dot. e.g. nitin.athena.com is valid.
(([A-Za-z0-9_\\-]+\\.?)*)[A-Za-z0-9_\\-]+\\.[A-Za-z0-9_\\-]{2,6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1956
#T: Capitalized First Name or Last Name or Full Name
#A: Rain
#D: That is just an improved expression for handling capitalized names. Improvement #1 - Allowed using names consisting of 3 parts. Improvement #2 - Introduced restriction that the name must start from capital character.
^([A-Z]+[a-zA-Z]*)(\s|\-)?([A-Z]+[a-zA-Z]*)?(\s|\-)?([A-Z]+[a-zA-Z]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1957
#T: Scientific Notation
#A: Mickael Caruso
#D: Scientific notation from school as best as we can put it on textboxes/textareas.
^(\d)(\.)(\d)+\s(x)\s(10)(e|E|\^)(-)?(\d)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1958
#T: Flight Number
#A: Mickael Caruso
#D: Flight numbers have two parts: The first 2 characters denote the airline's two-letter code. This airline code MUST be either letter-letter, number-letter, or letter-number, NEVER number-number. The 3rd digit has to be a numeric digit from 1 to 9 inclusive. After this 3rd digit, we may append any integer from 0 to 999.
^([A-Z]{2}|[A-Z]\d|\d[A-Z])[1-9](\d{1,3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1959
#T: Jewish Last Names
#A: Mickael Caruso
#D: Legend has it that if a last name ends in -man or -berg, the person who has that last name is Jewish. Of course there are Jewish people whose names don't follow the pattern, and there could be those whose last names end in -man or -berg who are not Jewish (or are they and they don't just know it?).
^[A-Z][a-z]+(tz)?(man|berg)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1960
#T: Classical Music Work Cataloguing System
#A: Mickael Caruso
#D: This is how a composer catalogued his or her musical works in classical music, except for Bach (who used BWV) and Mozart (who used K.). There may have been others. However, most other composers used the format Opus x, Number y. Sometimes, it's just Opus x if it's a big work like a concerto or a symphony.
^(Op(.|us))(\s)[1-9](\d)*((,)?(\s)N(o.|um(.|ber))\s[1-9](\d)*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1961
#T: Brazilian ID - RG
#A: Paulo R. M. Sorrentino
#D: Brazilian ID document, known in Brazil as RG (Registro Geral).
(^(\d{2}\x2E\d{3}\x2E\d{3}[-]\d{1})$|^(\d{2}\x2E\d{3}\x2E\d{3})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1962
#T: Last name check with possible hyphen
#A: Charles Luginbill
#D: This will test a last name field and allow hyphen is someone uses it.
[a-zA-Z]+\-?[a-zA-Z]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=1963
#T: xml and soap correct Time string
#A: Koen de Boeve
#D: This is a pattern that matches the time format as recomended by the w3c for XML formats
^([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1964
#T: Address in minor to major order
#A: Zijian
#D: This regular expression using named groups returns semantic tokens and is designed for Australian addresses in one line. Any part of an address may be omitted, as long as parts are in minor to major order. It should not be difficult to modify the regular express for analysing multi-line addresses. With a little modification, this regex may work for other postal address formats in minor to major order. The syntax is based on dot Net regular expression, with "options = RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace". The order is
#D: [POBox][ExtAdr][Street][Town][State][PostalCode][Country].
((?<strPOBox>((POBox|PO\sBox)\s*\d*)),?\s?)?(((?<strUnit>([\w\d\s\,]*)),\s?)?( (?<strStreet>([\w\s\-]*\w\s(st\s)?[\w]*\s(street|st|road|rd|close|cl|avenue|ave|av|path|ph|drive|drv|LOOP|COURT|CT|CIRCLE|LANE|LN))  ),?\s?))?((?<strTown>([\p{Ll}\p{Lu}\p{Lo}\p{Pc}\p{Lt}\p{Lm}\s]*)),?\s?)?((?<strState>(Victoria|VIC|New South Wales|NSW|South Australia|SA|Northern Territory|NT|West Australia|WA|Tasmania|TAS|ACT|Queensland|QLD))\s*)?(?<strPostalCode>(\d{4}),?\s?)?(?<strCountry>(Australia))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1965
#T: YYYY-MM-DD validation for dates from 1600 to 9999 with leap year check
#A: Koen de Boeve
#D: This regular expression checks dates from 1600 to 9999 in the form of YYYY-MM-DD also takes into account leap years
#D: tested in PHP with PCRE
^((1[6789]|[2-9][0-9])[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))$|^((1[6789]|[2-9][0-9])[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))$|^((16|[248][048]|[3579][26])00)|(1[6789]|[2-9][0-9])(0[48]|[13579][26]|[2468][048])-02-(0[1-9]|1[0-9]|2[0-9])$|^(1[6789]|[2-9][0-9])[0-9]{2}-02-(0[1-9]|1[0-9]|2[0-8])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1966
#T: w3c correct datetime pattern with leapyear support
#A: Koen de Boeve
#D: This pattern matches valid w3c compatible datetime values  from 1600 to 9999 in the form of [-]YYYY-MM-DDTHH:MM:SS[.ssss|[[+|-][HH:MM]][Z] also takes into account leap years.
^[-]?((1[6789]|[2-9][0-9])[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$|^[-]?((1[6789]|[2-9][0-9])[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30))T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$|^[-]?((16|[248][048]|[3579][26])00)|(1[6789]|[2-9][0-9])(0[48]|[13579][26]|[2468][048])-02-(0[1-9]|1[0-9]|2[0-9])T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$|^[-]?(1[6789]|[2-9][0-9])[0-9]{2}-02-(0[1-9]|1[0-9]|2[0-8])T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([Z]|\.[0-9]{4}|[-|\+]([0-1][0-9]|2[0-3]):([0-5][0-9]))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1967
#T: Percentage
#A: Manish
#D: it matches percentage from 1 to 100%. It ignores 0 or 0%. It only support integer matching.
^[0]*?(?<Percentage>[1-9][0-9]?|100)%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1968
#T: Chinese Address
#A: Zijian
#D: An address in Chinese does not use separator, and is in major to minor order. This regex works with addresses in most cities. However, for country towns and villages where most people live, there is no unified administrative division scheme. Some addresses are so ambiguous even human reading may find them hard.  More fine grains and some compromise will be needed for some ambiguous addresses. The regular expression can be easily modified for Japanese addresses.
#D: This regex is based on dot net regular expression. Because the pattern field can not display Chinese properly, I had to list it in the MatchingText field.
((?<strProvince>([^?]*))?)?((?<strCity>([^?]*))?)?((?<strDistrict>(\w*))(?|?))?((?<strDistrictTown>(\w*))(?))?((?<strStreet>(\w*)(?|?|?)))?((?<strStreetNo>(\w?\d*))?)?((?<strPath>(\w*)(?|?|?)))?((?<strPathNo>(\d*))?)?(?<strUnit>(\w*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1969
#T: Phone Number
#A: Stan Neidecker
#D: This expression matches a US phone number with or without the leading 1.
(1 )?\d{3} \d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1970
#T: 0.00 to 25.00
#A: Sridhar
#D: this is reg expression for 0.00 to 25.00
^(([0-9]|1[0-9]|2[0-4])(\.[0-9][0-9]?)?)$|([2][5](\.[0][0]?)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1971
#T: Trimmed AlphaNumeric plus single spaces
#A: Dave A-W
#D: Allows "words" with alphanumeric characters, including the underscore _ character.  Disallows leading or trailing spaces, also doubled-up spaces within the text.  If you want to disallow the underscore character, you can replace the two occurrences of \w with a-zA-Z
^[\w0-9]+( [\w0-9]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1972
#T: Phone number
#A: Josh de Boer
#D: This regex matches US and CAN phone numbers with area code and optional 3 or 4 digit PBX extention.  It does not check for validity of area code or exchange number, other than for starting with a 0 or 1.
^((([\(]?[2-9]{1}[0-9]{2}[\)]?)|([2-9]{1}[0-9]{2}\.?)){1}[ ]?[2-9]{1}[0-9]{2}[\-\.]{1}[0-9]{4})([ ]?[xX]{1}[ ]?[0-9]{3,4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1973
#T: Latitude
#A: Daniel
#D: Marine Latitude
([0-8][0-9]|[9][0])°' '[0-9][0-9]\.[0-9]´' '[NS]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1974
#T: Longitude
#A: Daniel
#D: Marine Longitude
(([01][0-7]|[00][0-9])[0-9]|[1][8][0])°' '[0-9][0-9]\.[0-9]´' '[EW]

#U: http://regexlib.com/REDetails.aspx?regexp_id=1975
#T: Bra Size
#A: Mickael Caruso
#D: Yes, bra sizes can also be tested by regular expressions. The numeric digits represent the rib cage circumference, measured under the breast excluding the breast. It MUST be an even number. The letters determine the cup size - AA is the smallest, H (and beyond, which this regular expression does not represent) is the largest. In summary, the cup sizes are determined by the "full chest circumference" (which includes the breast) MINUS the rib cage circumference. Smaller differences are closer to A and larger differences are closest to DDD or F
^[2-5](2|4|6|8|0)(A(A)?|B|C|D(D(D)?)?|E|F|G|H)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1976
#T: Email
#A: Gabriel Brancolini
#D: With this regular expression you can check emails with more than one extension, emails with only IP address. Has been devided into groups such as NickName and IP or DNS.Enjoy!!!
^(?<nickname>([a-zA-Z]{1}|[_]{1}[A-Za-z]{1})[A-Za-z0-9\.]*)@((?<IP_Number>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(?<DNS>[a-zA-Z0-9]+\.[a-zA-Z]+))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1977
#T: RFC2822 Compliant Email Address
#A: Mike Bronner
#D: RFC2822 compliant. Includes all special characters, except for allowance of quoted local-part. Also disallows '.' (period) to be at the front or end of local-part, or occurr more than once consecutively. It does allow for optional infinite number of sub-domains.
#D: The following standards are not enforced, due to RegExp limitations (unable to check for group string length):
#D: As per RFC2821 the local-part may have a maximum length of 64 characters, while the domain name may have a maximum length of 255 characters.
#D: Each domain label must be between 1 and 63 characters long, while the total length of the domain name may not exceed 255 characters.
^(?i:(?<local_part>[a-z0-9!#$%^&*{}'`+=-_|/?]+(?:\.[a-z0-9!#$%^&*{}'`+=-_|/?]+)*)@(?<labels>[a-z0-9]+\z?.*[a-z0-9-_]+)*(?<tld>\.[a-z0-9]{2,}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1978
#T: RFC Compliant URI
#A: Mike Bronner
#D: RFC compliant. Disallows '.' (period) to be at the front or end, or occurr more than once consecutively. It does allow for optional infinite number of sub-domains. However, the total length of the URI has not been enforced: each label must be between 1 and 63 characters long, while the total length of the domain name may not exceed 255 characters.
#D: Note that this RegEx does not check the validity of the protocol.
^([A-Za-z0-9]+[A-Za-z0-9-_]*\.)*(([A-Za-z0-9]+[A-Za-z0-9-_]*){3,}\.)+([A-Za-z0-9]{2,4}\.?)+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1979
#T: Integer with 1000s Separator
#A: Mike Bronner
#D: Matches whole numbers with the two most common thousands-separators (comma and period). Will not handle decimals.
^[1-9]{1}[0-9]{0,2}([\.\,]?[0-9]{3})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1980
#T: MAIL-ID Validation
#A: Anurag Mishra
#D: It allows only alphanumeric characters and some special symbols like "&",".","-"and"_"before'@'.After'@' symbolagain only alphanumeric character set are allowed.Then there should be a "."and after that it may have either three letter's word or two letter's word with a "."and one more two letter word attached with it. for example: noni@yahoo.com OR noni@yahoo.co.in.
^([a-zA-Z0-9\.\_\-\&]+)@[a-zA-Z0-9]+\.[a-zA-Z]{3}|(.[a-zA-Z]{2}(\.[a-zA-Z]{2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1981
#T: UK Vehicle Registration Plate / Number Plate
#A: Stephen S
#D: UK Vehicle Registration Plate / Number Plate format as specified by the DVLA. Accepts both "Prefix" and "New" style. Allows only valid DVLA number combinations as not all are supported. Registration number must be exactly as is displayed on car, hence all letters must be in uppercase and a space seperating the two sets of characters.
([A-HJ-PR-Y]{2}([0][1-9]|[1-9][0-9])|[A-HJ-PR-Y]{1}([1-9]|[1-2][0-9]|30|31|33|40|44|55|50|60|66|70|77|80|88|90|99|111|121|123|222|321|333|444|555|666|777|888|999|100|200|300|400|500|600|700|800|900))[ ][A-HJ-PR-Z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1982
#T: US Currency (Dollar)
#A: Kumar Deepak Ranjan
#D: It should be universal regular expression for US currency.
^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1983
#T: Pager Number Syntax
#A: Kumar Deepak Ranjan
#D: Requires 10 digit number. Rest is same as email
[\d+]{10}\@[\w]+\.?[\w]+?\.?[\w]+?\.?[\w+]{2,4}/i

#U: http://regexlib.com/REDetails.aspx?regexp_id=1984
#T: Date Notation
#A: Kumar Deepak Ranjan
#D: Date Format notations. Mostly used in DB applications where rigorous pattern matching for DATE is required.
^\$YYYY\$\$MM\$\$DD\$$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1985
#T: URL
#A: Kumar Deepak Ranjan
#D: http://www.url.com || http://url.com || http://first.url.com || https://www.url.com || https://url.com
^(\w+)s?\:\/\/(\w+)?(\.)?(\w+)?\.(\w+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1986
#T: URL v2
#A: Kumar Deepak Ranjan
#D: http://www.url.com || http://url.com || http://first.url.com || https://www.url.com || https://url.com
^(\w+)s?[:]\/\/(\w+)?[.]?(\w+)[.](\w+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1987
#T: Match if any Doctors or PHD. or MBA
#A: Kumar Deepak Ranjan
#D: Good way to quickly search for highly educated people in a list or file
#F: i
Dr[.]?|Phd[.]?|MBA

#U: http://regexlib.com/REDetails.aspx?regexp_id=1988
#T: SSN
#A: RadhaKrishnanMahalingam
#D: This RegularExpression is used to validate the US - SSN. This regular expression wont allow characters as well as all zeros
(^(?!000)\d{3}) ([- ]?) ((?!00)\d{2}) ([- ]?) ((?!0000)\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1989
#T: EIN
#A: RadhaKrishnanMahalingam
#D: This Regular Expression is used to validate the EIN of Employer in US.
(^(?!00)\d{2}) ([- ]?) ((?!0000000)\d{7})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1990
#T: Employer Identification Number (EIN)
#A: C. Brendan Enrick
#D: Accepts valid EIN numbers. It could use a bit of tweaking because these are the current valid prefixes allowed. 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99
^[1-9]\d?-\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1991
#T: Pattern Tittle
#A: Amit Gupta@UCV
#D: validates after dot operator. matches atleast 2 char and max 3 char.www dot is rejected.
^[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1992
#T: Pattern Tittle
#A: Amit Gupta@UCV
#D: Validates for string to be atleast 2 char and max 64 char
^([a-zA-Z0-9-\,\s]{2,64})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1993
#T: MySQL Date Format
#A: xaxdrax
#D: For MySQL Date Time Format
^(\d{4})-((0[1-9])|(1[0-2]))-(0[1-9]|[12][0-9]|3[01])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1994
#T: German Phone number
#A: Anian Baumann
#D: Validates an German area dial code and telephone number.
^((00|\+)49)?(0?[2-9][0-9]{1,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1995
#T: German Cellphone (Mobile) number
#A: Anian Baumann
#D: Validates all German area dial code and telephone numbers.
^((00|\+)49)?(0?1[5-7][0-9]{1,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1996
#T: Pseudo-HTML, Gets a Tag based on [] nomeclature. "b" Tag in this case
#A: Roberto Santana
#D: Checks only for valid ones. Always in lowercase. Separated Tags and contents in three groups for useful handling.
(\[b\])([^\[\]]+)(\[/b\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1997
#T: Pseudo-HTML, Gets Tags based on [] nomeclature. Allowed: [a], [b], [i], [u] Tag in this case
#A: Roberto Santana
#D: Only matches well-constructed tags.
(\[[abiu][^\[\]]*\])([^\[\]]+)(\[/?[abiu]\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1998
#T: Pseudo-HTML, Gets [a] Tag based on [] nomeclature with url parameter
#A: Roberto Santana
#D: Matches well-formed tags.
(\[a url=\"[^\[\]\"]*\"\])([^\[\]]+)(\[/a\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1999
#T: Gets an HTML parameter value of a given Tag. url in this case.
#A: Roberto Santana
#D: Very useful to get a value, Value is in a capture group for best handling.
url=\"([^\[\]\"]*)\"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2000
#T: Counts the number of words in a text
#A: Roberto Santana
#D: This small regex is useful to count the number of words of a text.
\b\w+\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2001
#T: Matches a simple HTML Tag in capturing groups
#A: Roberto Santana
#D: Gets simple tags without parameters
(<b>)([^<>]+)(</b>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2002
#T: Matches any HMTL tag open or close
#A: Roberto Santana
#D: Very useful to detect if there are pieces of HMTL in a text
(</?\w*[^<>]*>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2003
#T: My First RegEx
#A: Craig Palenshus
#D: Matches any single upper- or lower-case letter.
^[a-zA-Z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2004
#T: German Bank Code (Bankleitzahl)
#A: Anian Baumann
#D: Validates the German Bank Code named "Bankleitzahl"
[1-8][0-9]{2}[0-9]{5}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2005
#T: Html Tag finder
#A: Ferdinando Ricchiuti
#D: This pattern can find any HTML tag. It supports attributes whose values may be enclosed between single or double quotes. It aslo support spaces between delimeters.
<\s*/?\s*\w+(\s*\w+\s*=\s*(['"][^'"]*['"]|[\w#]+))*\s*/?\s*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2006
#T: Permutations of a character series
#A: Doug Drudik
#D: Let's say that you have a series of characters "abcde" and you want to match all strings that could be comprised of those characters with each character used exactly once.  This could loosely be termed an anagram matcher, although if the string contains duplicate letters it would require modification of this pattern.  In the example case we have a string "abcde" and we want to match any permutation of "abcde".  Note that the "5" used in the pattern indicates the number of characters specified in the character set "abcde", "5" would still be used if "abcde" would be replaced with "a-e" since there would still be 5 characters in the series.  If you are curious about how to require duplicates in the pattern (to match all permutations of "apple" for example) I would use (?=^.*p.*p$)(?!.*([ale]).*\1)^[aple]{5}$
(?!.*([abcde]).*\1)^[abcde]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2007
#T: UK postcode (any Case allowed)
#A: Dmitri Rechetilov
#D: This is my combination of other UK postcode examples to date in this library. This is similar to Howard Richards’s solution in that it only permits valid combinations of letters, e.g. BN works, BM does not. The space(s) are optional, and the string to match does not have to be in an upper or lower case. On top of that this allows BFPO (http://www.bfpo.mod.uk/bfponumbers_ships.htm) and Overseas Territories Postcodes (http://en.wikipedia.org/wiki/UK_postcodes) Please let me know if you have any suggetion to improve this!
(^[Bb][Ff][Pp][Oo]\s*[0-9]{1,4})|(^[Gg][Ii][Rr]\s*0[Aa][Aa]$)|([Aa][Ss][Cc][Nn]|[Bb][Bb][Nn][Dd]|[Bb][Ii][Qq][Qq]|[Ff][Ii][Qq][Qq]|[Pp][Cc][Rr][Nn]|[Ss][Ii][Qq][Qq]|[Ss][Tt][Hh][Ll]|[Tt][Dd][Cc][Uu]\s*1[Zz][Zz])|(^([Aa][BLbl]|[Bb][ABDHLNRSTabdhlnrst]?|[Cc][ABFHMORTVWabfhmortvw]|[Dd][ADEGHLNTYadeghlnty]|[Ee][CHNXchnx]?|[Ff][KYky]|[Gg][LUYluy]?|[Hh][ADGPRSUXadgprsux]|[Ii][GMPVgmpv]|[JE]|[je]|[Kk][ATWYatwy]|[Ll][ADELNSUadelnsu]?|[Mm][EKLekl]?|[Nn][EGNPRWegnprw]?|[Oo][LXlx]|[Pp][AEHLORaehlor]|[Rr][GHMghm]|[Ss][AEGK-PRSTWYaegk-prstwy]?|[Tt][ADFNQRSWadfnqrsw]|[UB]|[ub]|[Ww][A-DFGHJKMNR-Wa-dfghjkmnr-w]?|[YO]|[yo]|[ZE]|[ze])[1-9][0-9]?[ABEHMNPRVWXYabehmnprvwxy]?\s*[0-9][ABD-HJLNP-UW-Zabd-hjlnp-uw-z]{2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2008
#T: UK postcode (matching caps only)
#A: Dmitri Rechetilov
#D: This is my combination of other UK postcode examples to date in this library. This is similar to Howard Richards’s solution in that it only permits valid combinations of letters, e.g. BN works, BM does not. The space(s) are optional, the string to match should be in upper case. On top of that, this solution allows BFPO (http://www.bfpo.mod.uk/bfponumbers_ships.htm) and Overseas Territories Postcodes (http://en.wikipedia.org/wiki/UK_postcodes) Please let me know if you have any suggetion to improve this!
(^BFPO\s*[0-9]{1,4})|(^GIR\s*0AA$)|(ASCN|BBND|BIQQ|FIQQ|PCRN|SIQQ|STHL|TDCU\s*1ZZ)|(^(A[BL]|B[ABDHLNRST]?|C[ABFHMORTVW]|D[ADEGHLNTY]|E[CHNX]?|F[KY]|G[LUY]?|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]?|M[EKL]?|N[EGNPRW]?|O[LX]|P[AEHLOR]|R[GHM|S[AEGK-PRSTWY]?|Y[ADFNQRSW|UB|W[A-DFGHJKMNR-W]?|[YO]|[ZE])[1-9][0-9]?[ABEHMNPRVWXY]?\s*[0-9][ABD-HJLNP-UW-Z]{2}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2009
#T: (Replacing) Multiple Spaces
#A: Dmitri Rechetilov
#D: Ever tried to use replace function in javascipt? Javascipt only replaces one instance of the match(!), unless you use a regular expression and /g or /gi as parameters. Take this example - create a new html document and paste this between your script tags: v="__test___this___string___";alert(v.replace(/[_]{1,}/gi," "));     - this should replace all the '_' characters. Another paradigm solved!!
[ ]{1,}/gi

#U: http://regexlib.com/REDetails.aspx?regexp_id=2010
#T: Name And Email ID
#A: anisha
#D: This will work with name in UPPER case and  LOWER case with or without spaces may include single quotes and email ID within fish marks.Email Id may include numbers too
([a-z\s.\-_'])*<\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*\>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2011
#T: Phone
#A: Bill Kirkman
#D: looks for match with (), spaces, or hyphens and can extract area code, prefix, and suffix
^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2012
#T: Alpha Numeric Data
#A: Bill Kirkman
#D: Match any alpha numeric string containing a-z, A-Z, 0-9, space, period, and hyphen
^[a-zA-Z0-9\s.\s,\-]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2013
#T: name optional to email ID
#A: anisha
#D: this pattern has the option of entering email ID with or without name .The name will allow '  and spaces as Alex D'souza
([a-z\s.\-_'])*<\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*\>|^\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2014
#T: E-Mail Date and Time
#A: NoBug
#D: Extracts Day, Monthname, Year, Hour and Minute into 5 Groups. This Regex is useful for E-Mail Apps.
(?:[a-z]{3},\s+)?(\d{1,2})\s+([a-z]{3})\s+(\d{4})\s+([01][0-9]|2[0-3])\:([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2015
#T: isNumeric
#A: frank ayer
#D: matches numeric value with optional +/- , optional decimal point, and optional commas
^[-+]?([0-9]{1,3}[,]?)?([0-9]{3}[,]?)*[.]?[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2016
#T: Ini File Regex
#A: Cem Legoz
#D: Once , use first regex to find groups. and then use the second regex. first results to second regex source.
\[(?<GroupName>.*)\](?<GroupContent>[^\[]+)       --------        [\s]*(?<Key>.+)[\s]*=[\s]*(?<Value>[^\r]+) 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2017
#A: Wesley Menezes
#D: Matches quoted strings. Do not use anchors or it will not work as expected
(?<!\\)\"(?:[^\"]*(?<!\\)\\\")*[^\"]*\"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2018
#T: Single-line code-comment groups
#A: T Rob
#D: Matches groups of single-line code comments.  Comment sections will be returned as a single match.
([\r\n ]*//[^\r\n]*)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2019
#T: C# code string literal
#A: T Rob
#D: Matches C# string literals; verbatin and or normal.
(@\s*".*?")|("([^"\\]|\\.)*?")

#U: http://regexlib.com/REDetails.aspx?regexp_id=2020
#T: C# keyword
#A: T Rob
#D: matches a C# keyword.
\b(?<KEYWORD>abstract|event|new|struct|as|explicit|null|switch|base|extern|object|this|bool|false|operator|throw|break|finally|out|true|byte|fixed|override|try|case|float|params|typeof|catch|for|private|uint|char|foreach|protected|ulong|checked|goto|public|unchecked|class|if|readonly|unsafe|const|implicit|ref|ushort|continue|in|return|using|decimal|int|sbyte|virtual|default|interface|sealed|volatile|delegate|internal|short|void|do|is|sizeof|while|double|lock|stackalloc|else|long|static|enum|namespace|string)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2021
#T:  One upper-case US ASCII Letter
#A: C. Brendan Enrick
#D: Matches one Upper-case US ASCII Letter.
^[A-Z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2022
#T: any number of numbers with or without any number of characters
#A: anisha
#D: this will accept any number and any alphabet.
#D: Alphabets are optional but numbers are compulsory 
^\d*$|^\d+$*[a-zA-Z]*$;^\d+$|^\d+$*[a-zA-Z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2023
#T: Software Version Number
#A: C. Brendan Enrick
#D: 4 part version numbers
^\d+\.\d\.\d[01]\d[0-3]\d\.[1-9]\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2024
#T: Simple Currency
#A: C. Brendan Enrick
#D: A Simple Currency Expression. It will validate the number portion only. 
^\d+(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2025
#T: SQL Batch parser (isql-like)
#A: Jon Schoning
#D: simulates sql batch parsing behavior of isql.exe given an inputfile.
#D: The regex matches correspond to sql batches (arbitrary text) which are separated by the GO keyword on a line by itself, but not including this GO keyword. Make sure multiline switches are enabled. (One could use this regex to loop over the matches, executing one sql batch at a time, esp in situations where a Split() function is unavailable).
(?:^.*\r*\n*)*?(?:(?=^\s*GO\s*$)|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2026
#T: Postal code - Latvia
#A: Artis
#D: Latvia's post code
^(LV-)[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2027
#T: Letter Grade
#A: C. Brendan Enrick
#D: This matches a standard set of plus minus letter grades.
#D: A A- B+ B B- C+ C C- D+ D D- F SF NF W
#D: (SF - Stopped Attending F)
#D: (NF - Never Attended F)
#D: (W - Withdraw)
^A-?|[BCD][+-]?|[SN]?F|W$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2028
#T: Page Range
#A: Chalk S. Bareng
#D: Format when entering page ranges in Print dialogs.
(\d+(-\d+)*)+(,\d+(-\d+)*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2029
#T: Time Format
#A: Ajesh Kumar CM
#D: This match time format
(\d{1,2}(\:|\s)\d{1,2}(\:|\s)\d{1,2}\s*(AM|PM|A|P))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2030
#T: Mulitple Emails (Semilcolon delimited)
#A: Kirollos Aziz
#D: Check if string is a list of valid email addresses, separated by a semicolon (ie: ';'). Every email in the list is obviously matched for validity.
^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+\s*\;?\s*$|^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+(\s*\;\s*([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+)+\s*\;?\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2031
#T: Loose DateTime Validation
#A: Nathan Wheeler
#D: This will validate any date (does not check for number of days in month, just 31 days or less) in almost any format as long as the order follows month, day, year, hour, minute, and each part has at least 2 digits.
^(((0[1-9]{1})|(1[0-2]{1}))\/?(([0-2]{1}[1-9]{1})|(3[0-1]{1}))\/?(([12]{1}[0-9]{1})?[0-9]{2}) ?(([01]{1}[0-9]{1})|(2[0-4]{1}))\:?([0-5]{1}[0-9]{1}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2032
#T: Decimal number with 2 digits after comma
#A: jose 
#D: This regex accepts decimal number with exactly 2 numbers after comma and  without point.
^[+-]?\d+(\,\d{2})? *?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2033
#T: Which accepts First Two as uppercase letters and remaining as digits
#A: Srichandana
#D: To maintain both uppercase letters and the digits in the expression.
^([A-Z]{2}?(\d{7}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2034
#T: IPv6 (and IPv4) Address match with optional Port Number
#A: Gerry
#D: Too complex for a short explanation. It doesn't check for valid IP ranges and it also doesn't obey the rule, that a double colon in IPv6 only can exist once in the address notation. The optional port match at the end can be omitted. The RegEx has been constructed the way, that if an explicit identification fails, the complete match fails. For example someone write "My adress:2001::1234" the match will fail 'cos of the leading colon, even though it's an valid IPv6 address. A "My adress: 2001::1234" or "My adress:[2001::1234]" will work. Beware, that the RegEx is build for case-insensitive usage and no whitespaces are allowed inside the address.
#D: If you want to embed it into a larger RegEx, take into account to adjust the conditional matches wich refers to (?(2) -> (\[) inside (^|\s|(\[)) and (?(3) -> (::)? and (?(4) -> ([a-f\d]{1,4}::?) Works not perfectly, but I'm currently out of time.
(^|\s|(\[))(::)?([a-f\d]{1,4}::?){0,7}(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(?=(?(2)\]|($|\s|(?(3)($|\s)|(?(4)($|\s)|:\d)))))|((?(3)[a-f\d]{1,4})|(?(4)[a-f\d]{1,4}))(?=(?(2)\]|($|\s))))(?(2)\])(:\d{1,5})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2035
#T: IPv4 Address match
#A: Gerry
#D: Address match with optional match of protocol and port. Use case-insensitive. The matching brackets are:
#D: bracket 1 = optional protocol without :// -- bracket 3 = IPv4 address, with a more likely correct number range -- bracket 4 = optional port without : as an separator. Should work fine.
(?:^|\s)([a-z]{3,6}(?=://))?(://)?((?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.(?:25[0-5]|2[0-4]\d|[01]?\d\d?))(?::(\d{2,5}))?(?:\s|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2036
#T: Server and port validation
#A: Mauricio Vidotto
#D: Validate if server and port is valid.
^(([A-Z])([a-zA-Z0-9]+)?)(\:)(\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2037
#T: Zero excluding money amount
#A: bask
#D: Zero excluding money amount
((0)+(\.[1-9](\d)?))|((0)+(\.(\d)[1-9]+))|(([1-9]+(0)?)+(\.\d+)?)|(([1-9]+(0)?)+(\.\d+)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2038
#T: Get the empty tags
#A: Slava
#D: Match all empty (that has no text) tags excluding some (TD, TR). The excluded tags list can be changed by adding / removing tags. See: (?!\btd|tr\b)
(<(?!\btd|tr\b)(\w*)[^>/]*>)(\s*)(</\2>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1796
#T: Retrieve all tags
#A: Slava
#D: Retrieve all HTML tags and its content
#D: * in addition to  Kevin Spencer
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=1796
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel"><font size="2">sdfsdfafa<br></font>
(<\b(\w*)\b[^>/]*>)(?<content>.*?)(</\2>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2040
#T: Test Israel Regular and Cell Phone Numbers
#A: Arik U
#D: This is a pattern for Regular and Cell Phone Numbers of israel,
#D: allow using with or without dash (-).
^[0][5][0]-\d{7}|[0][5][2]-\d{7}|[0][5][4]-\d{7}|[0][5][7]-\d{7}|[0][7][7]-\d{7}|[0][2]-\d{7}|[0][3]-\d{7}|[0][4]-\d{7}|[0][8]-\d{7}|[0][9]-\d{7}|[0][5][0]\d{7}|[0][5][2]\d{7}|[0][5][4]\d{7}|[0][5][7]\d{7}|[0][7][7]\d{7}|[0][2]\d{7}|[0][3]\d{7}|[0][4]\d{7}|[0][8]\d{7}|[0][9]\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2041
#T: SIP
#A: betz
#D: A SIP regex.
^(sip|sips):.*\@((\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3})|([a-zA-Z\-\.]+\.[a-zA-Z]{2,5}))(:[\d]{1,5})?([\w\-?\@?\;?\,?\=\%\&]+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2042
#T: Indian Landline
#A: abhilash
#D: this is about land line number in AP .
\d{3}-\d{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2043
#T: PO Box
#A: Chris Myers
#D: This expression will match almost all variations of PO Box.
\b[P|p]*(OST|ost)*\.*\s*[O|o|0]*(ffice|FFICE)*\.*\s*[B|b][O|o|0][X|x]\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2044
#T: Positive non-zero decimal or integer
#A: Anupom Syam
#D: If you want to check for positive and nonzero real numbers (both integer and decimal are supported).
(^([0-9]*[.][0-9]*[1-9]+[0-9]*)$)|(^([0-9]*[1-9]+[0-9]*[.][0-9]+)$)|(^([1-9]+[0-9]*)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2045
#T: Numbers
#A: Agnel Amodia
#D: It just omit 0 as the single number when it accepts all other Numbers
^[1-9]\d*\.?[0]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2046
#T: SQL Object Name Match
#A: Tim McCurdy
#D: This returns the different parts of an Object Name (Database.Owner.Object).  This can be used for matching or pulling out the different pieces.
(((\[?(?<Database>[\w]+)\]?)?\.)?(\[?(?<Owner>[\w]+)\]?)?\.)?\[?(?<Object>[\w]+)\]?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2047
#T: SQL Column Matches
#A: Tim McCurdy
#D: This expression finds all Column within a Select, Update, or Delete query (ex. Column1 = 2, Column2 = 3).  This is useful if you need to refactor a SQL Statement to include a owner prefix before all columns but you aren't sure how many columns there are in the statement.
((?<Owner>\[?[\w\d]+\]?)\.{1})?(?<Column>\[?[\w\d]+\]?)(\s*(([><=]{1,2})|(Not|In\(|Between){1,2})\s*)(?<Value>[\w\d\']+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2048
#T: a
#A: Poonam Jha
#D: To check that maximum 3 digits it should be after decimal
^[0-9]+\.d{3}? *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2049
#T: Israel generic phone number
#A: KeeperOfLogic
#D: Matches almost all Israel phone numbers (without 1800). Generic means it doesn't have a list of allowed prefix (i.e 050,03) because it changes frequently. Instead it accepts any 2-3 digits prefix, with or without hyphen.
^\b\d{2,3}-*\d{7}\b$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2050
#T: Extract quoted attributes from HTML tag
#A: Mitch Baker
#D: Quick and dirty extraction of quoted HTML attributes if you begin with just the tag string.  Not intended for use in a full HTML document.
(?<tagname>[^\s]*)="(?<tagvalue>[^"]*)"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2051
#T: Capitalize Title
#A: Timothy Dutton
#D: I had some mailing contacts in a text file in mailing lable layout, and needed to extract them to database I used this regex to fix capitalization for name and address. THE JIM thomas FAMILY becomes The Jim Thomas Family
s/\b(\w+)\b/ucfirst($1)/ge

#U: http://regexlib.com/REDetails.aspx?regexp_id=2052
#T: Extract Mailing Lables to Database
#A: Timothy Dutton
#D: View the description correctly formatted here:
#D: http://www.perlmonks.org/?viewmode=public;node_id=471216
\s*([a-z\. ]+)\s*\n\s*([a-z0-9\. #]+)\s*\n\s*([a-z \.]+)\s*,\s*([a-z \.]+)\s*\n?(?:\s*(\d{1,15}(?:-\d{1,4})?)\s*\n)?(?:\s*(\+?(?:1\s*[-\/\.]?)?(?:\((?:\d{3})\)|(?:\d{3}))\s*[-\/\.]?\s*(?:\d{3})\s*[-\/\.]?\s*(?:\d{4})(?:(?:[ \t]*[xX]|[eE][xX][tT])\.?[ \t]*(?:\d+))*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2053
#T: Metric and Time Dimensions
#A: Thomas Pietsch
#D: Matches decimal numbers (english or german writing) followed by metric or time units (mm, cm, dm, m, km, s, min and h) in labels surrounded by any digit.
(?<Nbr>[\+-]?((\d*\,\d+)|(\d*\.\d+)|\d+))\s*(?<Unit>mm|cm|dm|min|km|s|m|h)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2054
#T: Phone Numbers: Australian
#A: ptooey
#D: Intended to validate Australian Phone Numbers.
#D: Very loosely based on Bill Hely's regex, but allows for further options for Country code, (un)bracketed Area code, spaced/hyphenated 8-digit/ Mobile/1X00*/13*.
^(\+\d{2}[ \-]{0,1}){0,1}(((\({0,1}[ \-]{0,1})0{0,1}\){0,1}[2|3|7|8]{1}\){0,1}[ \-]*(\d{4}[ \-]{0,1}\d{4}))|(1[ \-]{0,1}(300|800|900|902)[ \-]{0,1}((\d{6})|(\d{3}[ \-]{0,1}\d{3})))|(13[ \-]{0,1}([\d \-]{5})|((\({0,1}[ \-]{0,1})0{0,1}\){0,1}4{1}[\d \-]{8,10})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2055
#T: Australian Phone Numbers
#A: Robert Dyball
#D: This will validate most Australian telephone numbers including 13, 1300, 1800, 1900, std and international +61- format numbers. It allows optional spaces, dashes and brackets in most cases.
(?<local1300>^1300[ |\-]{0,1}\d{3}[ |\-]{0,1}\d{3}$)|(?<tollcall>^1900|1902[ |\-]{0,1}\d{3}[ |\-]{0,1}\d{3}$)|(?<freecall>^1800[ |\-]{0,1}\d{3}[ |\-]{0,1}\d{3}$)|(?<standard>^\({0,1}0[2|3|7|8]{1}\){0,1}[ \-]{0,1}\d{4}[ |\-]{0,1}\d{4}$)|(?<international>^\+61[ |\-]{0,1}[2|3|7|8]{1}[ |\-]{0,1}[0-9]{4}[ |\-]{0,1}[0-9]{4}$)|(?<local13>^13\d{4}$)|(?<mobile>^04\d{2,3}\d{6}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2056
#T: Remove non valid words
#A: Theuns Coetzee
#D: I needed a clean string of keywords submitted in a form. This expression will select every word that doesn't have a vowel, every word that is shorter than 2 characters. It will select all non alphabetical characters.
([^\w]+)|([^A-Za-z])|(\b[^aeiouy]+\b)|(\b(\w{2})\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2057
#T: Bank Routing Transit Number (RTN)
#A: Doug Vanderweide
#D: Ensures a given string matches the basic pattern of a bank routing transit number (RTN), used to identify financial institutions on instruments such as checks. Ensures number is nine digits long and has first two digits that comply with American Bankers Association rules.
^((0[0-9])|(1[0-2])|(2[1-9])|(3[0-2])|(6[1-9])|(7[0-2])|80)([0-9]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2058
#T: ciao:
#A: ciccio
#D: fj
()

#U: http://regexlib.com/REDetails.aspx?regexp_id=2059
#T: Date dd-mm-yyyy with leap year
#A: Dennis Betten
#D: Checks date in format dd-mm-yyyy. Seperation characters can be -/. and space.
#D: dd and mm HAVE to be two characters. Year has to be four characters and minimum 1900.
#D: Expression handles leap year as well
^(((0[1-9]|[12]\d|3[01])[\s\.\-\/](0[13578]|1[02])[\s\.\-\/]((19|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)[\s\.\-\/](0[13456789]|1[012])[\s\.\-\/]((19|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])[\s\.\-\/]02[\s\.\-\/]((19|[2-9]\d)\d{2}))|(29[\s\.\-\/]02[\s\.\-\/]((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2060
#T: Date Pattern of the form: DD-MM-YYYY
#A: olakunle bolarinwa
#D: This is regular expression that check for a particular date match in the following format respectively: DD-MM-YYYY and is only valid for the years between 1900 - 1999
#D: Hint: good for validating age above 9-years old
^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|11|12|10)-(19[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2061
#T: String and dot
#A: Lucasweb
#D: This expression check the input of simple text string from a-z,A-Z and number from 0 to 9 and the dot(.).
#D: But the minimum insert is of 3 character.
^[a-zA-Z0-9\.\s]{3,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2062
#T: Strong Password
#A: Eric Malamisura
#D: Strong password with the following requirements.
#D: - At least 8 characters long.
#D: - At least 1 uppercase, AND at least 1 lowercase
#D: - At least 1 digit OR at least 1 alphanumeric.
#D: - No spaces. 
(?-i)(?=^.{8,}$)((?!.*\s)(?=.*[A-Z])(?=.*[a-z]))(?=(1)(?=.*\d)|.*[^A-Za-z0-9])^.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2063
#T: US Phone Number Excluding 800 & 900 Numbers
#A: Phil Smith
#D: This pattern matches US phone numbers but excludes numbers that are 800 or 900 numbers.  It excludes the following area codes 800, 888,877,866, and 900.
^(((?!\(800\))(?!\(888\))(?!\(877\))(?!\(866\))(?!\(900\))\(\d{3}\) ?)|(?!800)(?!888)(?!877)(?!866)(?!900)(\d{3}-))?\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2064
#T: Dutch Licenceplate
#A: Martin
#D: Test a valid dutch licenceplate. Uppercase and with hyphens
^[A-Z]{2}-[0-9]{2}-[0-9]{2}|[0-9]{2}-[0-9]{2}-[A-Z]{2}|[0-9]{2}-[A-Z]{2}-[0-9]{2}|[A-Z]{2}-[0-9]{2}-[A-Z]{2}|[A-Z]{2}-[A-Z]{2}-[0-9]{2}|}|[0-9]{2}-[A-Z]{2}-[A-Z]{2}|[0-9]{2}-[A-Z]{3}-[0-9]{1}|[0-9]{1}-[A-Z]{3}-[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2065
#T: Nombres hispanos
#A: FERNANDO MARTINEZ
#D: Mapea los nombres. Cualquier caracter, incluyendo la ñ exeptuando los números.
[a-zA-Z Á-Úá-ú][^1234567890]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2066
#T: Dutch Phonenumber
#A: Dennis Betten
#D: Check Dutch phonenumber including 0031 or +31 and optional - characters.
#D: I know it can be shortened, but for readability (and shortage of time ;-)) I kept it like it is...
^((((0031)|(\+31))(\-)?6(\-)?[0-9]{8})|(06(\-)?[0-9]{8})|(((0031)|(\+31))(\-)?[1-9]{1}(([0-9](\-)?[0-9]{7})|([0-9]{2}(\-)?[0-9]{6})))|([0]{1}[1-9]{1}(([0-9](\-)?[0-9]{7})|([0-9]{2}(\-)?[0-9]{6}))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2067
#T: Match fields in a csv row
#A: jeremy chapman
#D: This will match fields in a row of a csv file.  Values can be double quoted or not.  If a value is double quoted it can have commas inside it.  Each value will be captured to word.
(\"(?<word>[^\"]+|\"\")*\"|(?<word>[^,]*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2068
#T: Absolute Path
#A: Ted Cambron
#D: An overly simple UNIX based path regex. The path must begin with a forward slash. The path segments may not lead or end with an underscore or dash which is a good thing. They also can not be doubled (__ or --). Another good thing. I've omitted all the punctuation that RFC allows until further notice.
^((?:\/[a-zA-Z0-9]+(?:_[a-zA-Z0-9]+)*(?:\-[a-zA-Z0-9]+)*)+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2069
#T: Basic Name or Title
#A: Ted Cambron
#D: This is a very basic regex for a simple name or title. It must begin and end with a word character and may contain spaces. No punctuation :(
^([a-zA-Z0-9]+(?: [a-zA-Z0-9]+)*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2070
#T: Date & Time Format dd-MMM-yyyy HH:mm:ss (24 hour)
#A: Babar Javaid
#D: This expression matches date and time (24 hour) both in format dd-MMM-yyyy HH:mm:ss. Only the short form of month is allowed i.e. Jan not January. The month names are also case sensitive. The second part of the time is optional. Also the leading zeros for day, hour, minute and seconds are optional.
^((31(?!([-])(Feb|Apr|June?|Sep|Nov)))|((30|29)(?!([-])Feb))|(29(?=([-])Feb([-])(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])([-])(Jan|Feb|Ma(r|y)|Apr|Ju(l|n)|Aug|Oct|(Sep|Nov|Dec))([-])((1[6-9]|[2-9]\d)\d{2}\s(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2071
#T: Number
#A: Jagadeeswari
#D: It is used to specify a precision
[0-9][.][0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2072
#T: Decimal Number
#A: Girish Yepuri
#D: Expression to match decimal number with 2 digits.
^([1-9]([0-9])?)(\.(([0])?|([1-9])?|[1]([0-1])?)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2073
#A: Jagadeeswari
#D: It is useful to specofy the Precision.For this the precision is 3.
[0-9][.][0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2074
#T: azz
#A: mario cioni
#D: azz
[0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2075
#T: asp.net password createuserwizard default
#A: Jorge Arturo Aviles Nuñez (Mexico)
#D: 7 alphanumeric
#D: 1 non-alphanumeric
(?=^.{7,51}$)([A-Za-z]{1})([A-Za-z0-9!@#$%_\^\&\*\-\.\?]{5,49})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2076
#T: Dutch License Plate
#A: Richard Elias
#D: Test on current types of Dutch license plates
^([A-Z]{2}-[A-Z]{2}-[0-9]{2}$|^([A-Z]{2}-[0-9]{2}-[A-Z]{2}$|^([0-9]{2}-[A-Z]{2}-[A-Z]{2}$|^([A-Z]{2}-[0-9]{2}-[0-9]{2}$/

#U: http://regexlib.com/REDetails.aspx?regexp_id=2077
#T: Email Header Extraction
#A: Melih SARICA
#D: This expression mathes all email header items and their values from email source
((^(?<property>\S+):)|(\s(?<property>)))(?<value>.*)\n

#U: http://regexlib.com/REDetails.aspx?regexp_id=2078
#T: Zipcode for Great Britain
#A: RonyMan
#D: An expression that checks if a zipcode is build according the format for Great Britain. This expression is build on the rules as described on http://www.zipcodeworld.com/addressing/greatbritain.htm
^[a-zA-Z]{1}[a-zA-Z0-9]{1}\s?[a-zA-Z0-9]{0,2}\s?\d{1}[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2079
#T: Log number
#A: Roxanne Cwikowski
#D: Validates a log number to the format AA/00000/00.letters must be capital and delititers forward slashes
^([A-Z]{2})\/(\d{5})\/(\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2080
#T: reference number
#A: Roxanne Cwikowski
#D: valudates refrence number begining AA00000/00. capital letters must be used and forward slash
^([A-Z]{2}\d{5})\/(\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2081
#T: .Net Framework TimeSpan validation
#A: Grim
#D: Can be used to pre-validate strings before calling the TimeSpan.Parse() method in the .Net framework, to ensure that the string can be parsed without throwing an exception.  The regex uses capturing groups instead of non-capturing groups so that it can easily be used as a pattern in XML Schema by simply removing the ^$ from the beginning/end.
#D: This expression fully checks or enforces the [ws][-]{d|[d.]hh:mm[:ss[.ff]] }[ws] format as described in the MSDN help.  It even checks the upper/lower boundaries on day values (10675199 days.)
^\s*-?(\d{0,7}|10[0-5]\d{0,5}|106[0-6]\d{0,4}|1067[0-4]\d{0,3}|10675[0-1]\d{0,2}|((\d{0,7}|10[0-5]\d{0,5}|106[0-6]\d{0,4}|1067[0-4]\d{0,3}|10675[0-1]\d{0,2})\.)?([0-1]?[0-9]|2[0-3]):[0-5]?[0-9](:[0-5]?[0-9](\.\d{1,7})?)?)\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2082
#T: Time Validator
#A: Venkatesh Ellur
#D: This validator check for the Time from 00:00 to 23:59
^(([0]?[1-9]|[1-2][0-3])(:)([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2083
#T: eMail 
#A: Hetes Paul Adrian 
#D: Recognize an eMail adress
^[0-9a-zA-Z\\\.\%\&\^\#\!\^\|\(\)\[\]\{\{\.\>\,\<\$]*\@[0-9a-zA-Z\\\.\%\&\^\#\!\^\|\(\)\[\]\{\{\.\>\,\<\$]*\.[a-z]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2084
#T: Find '&' (ampersands) that are not part of HTML Special Characters
#A: Luke Jernejcic
#D: This expression will match ampersands('&') that are not part an HTML Special Character string.
\x26(?!((amp\x3B)|(nbsp\x3B)|(lt\x3B)|(gt\x3B)|(copy\x3B)|(reg\x3B)|(cent\x3B)|(deg\x3B)|(deg\x3B)|(micro\x3B)|(middot\x3B)|(not\x3B)|(para\x3B)|(plusmn\x3B)|(pound\x3B)|(raquo\x3B)|(sect\x3B)|(yen\x3B)|([\x23][0-9]{1,3}\x3B)|(lsquo\x3B)|(rsquo\x3B)|(sbquo\x3B)|(ldquo\x3B)|(rdquo\x3B)|(bdquo\x3B)|(dagger\x3B)|(Dagger\x3B)|(permil\x3B)|(lsaquo\x3B)|(rsaquo\x3B)|(spades\x3B)|(clubs\x3B)|(hearts\x3B)|(diams\x3B)|(oline\x3B)|(larr\x3B)|(uarr\x3B)|(rarr\x3B)|(darr\x3B)|(trade\x3B)|([\x23]x2122\x3B)|(quot\x3B)|(frasl\x3B)|(ndash\x3B)|(mdash\x3B)|(iexcl\x3B)|(cent\x3B)|(curren\x3B)|(brvbar\x3B)|(brvbar\x3B)|(uml\x3B)|(die\x3B)|(ordf\x3B)|(laquo\x3B)|(not\x3B)|(shy\x3B)|(macr\x3B)|(hibar\x3B)|(sup2\x3B)|(sup3\x3B)|(acute\x3B)|(micro\x3B)|(cedil\x3B)|(sup1\x3B)|(ordm\x3B)|(raquo\x3B)|(frac14\x3B)|(frac12\x3B)|(frac34\x3B)|(iquest\x3B)|(Agrave\x3B)|(Aacute\x3B)|(Acirc\x3B)|(Atilde\x3B)|(Auml\x3B)|(Aring\x3B)|(AElig\x3B)|(Ccedil\x3B)|(Egrave\x3B)|(Eacute\x3B)|(Ecirc\x3B)|(Euml\x3B)|(Igrave\x3B)|(Iacute\x3B)|(Icirc\x3B)|(Iuml\x3B)|(ETH\x3B)|(Ntilde\x3B)|(Ograve\x3B)|(Oacute\x3B)|(Ocirc\x3B)|(Otilde\x3B)|(Ouml\x3B)|(times\x3B)|(Oslash\x3B)|(Ugrave\x3B)|(Uacute\x3B)|(Ucirc\x3B)|(Uuml\x3B)|(Yacute\x3B)|(THORN\x3B)|(szlig\x3B)|(agrave\x3B)|(aacute\x3B)|(acirc\x3B)|(atilde\x3B)|(auml\x3B)|(aring\x3B)|(aelig\x3B)|(ccedil\x3B)|(egrave\x3B)|(eacute\x3B)|(ecirc\x3B)|(euml\x3B)|(igrave\x3B)|(iacute\x3B)|(icirc\x3B)|(iuml\x3B)|(eth\x3B)|(ntilde\x3B)|(ograve\x3B)|(oacute\x3B)|(ocirc\x3B)|(otilde\x3B)|(ouml\x3B)|(divide\x3B)|(oslash\x3B)|(ugrave\x3B)|(uacute\x3B)|(ucirc\x3B)|(uuml\x3B)|(yacute\x3B)|(thorn\x3B)|(yuml\x3B)|(Alpha\x3B)|(Alpha\x3B)|(Beta\x3B)|(beta\x3B)|(Gamma\x3B)|(gamma\x3B)|(Delta\x3B)|(delta\x3B)|(Epsilon\x3B)|(epsilon\x3B)|(Zeta\x3B)|(zeta\x3B)|(Eta\x3B)|(eta\x3B)|(Iota\x3B)|(iota\x3B)|(Kappa\x3B)|(kappa\x3B)|(Lambda\x3B)|(lambda\x3B)|(Mu\x3B)|(mu\x3B)|(Nu\x3B)|(nu\x3B)|(Xi\x3B)|(xi\x3B)|(Omicron\x3B)|(omicron\x3B)|(Pi\x3B)|(pi\x3B)|(Rho\x3B)|(rho\x3B)|(Sigma\x3B)|(sigma\x3B)|(Tau\x3B)|(tau\x3B)|(Upsilon\x3B)|(upsilon\x3B)|(Phi\x3B)|(phi\x3B)|(Chi\x3B)|(chi\x3B)|(Psi\x3B)|(psi\x3B)|(Omega\x3B)|(omega\x3B)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2085
#T: Phone Number Validator
#A: Brad Jasper
#D: The most complete phone number validation I could come up with.
#D: Allows for nearly every variation of entering phone numbers.
#D: This expression is for US (10 digit) numbers only, international numbers will not work.
#F: i
^(1(\/|-|\s|.|))?(\(?\d{3}\)?)?(\/|-|\s|.|)?\d{3}(\/|-|\s|.|)?\d{4}(\/|-|\s|.|)?((x|ext)(.*)\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2086
#T: Time Validator in hours format from 00:00 to 23:59
#A: Venkatesh Ellur
#D: This format accepts only the values between 00:00 to 23:59
^(([0-1]?[1-9]|2[0-3])(:)([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2087
#T: Capture HTML Tags
#A: Kurt McEllhenney
#D: This expression will capture font tags(or any other HTML tag if you change the word font in the expression) with parameters and stop at the closing font tag bracket.  The only keyboard characters it will not find between the starting and ending bracket are additional brackets.  So for example if you are looking for image tags it will not find <img src="..." alt=">My Picture<"> due to the nested brackets.  When I allowed nested brackets like this the expression did not always return only the tag I was looking for.  Sometimes it returned additional tags at the end so I suggest staying away from brackets in alt text and anywhere else you may be allowed to do it.
<font[a-zA-Z0-9_\^\$\.\|\{\[\}\]\(\)\*\+\?\\~`!@#%&-=;:'",/\n\s]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2088
#T: RFC Compliant Path
#A: Ted Cambron
#D: After reading RFC2396 and researching it a little more I put together this regex rather than update my non-compliant, overly simple one. More specificaly an absolute path.
^(/(?:(?:(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*)(?:;(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*))*)(?:/(?:(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*)(?:;(?:(?:[a-zA-Z0-9\\-_.!~*'():\@&=+\$,]+|(?:%[a-fA-F0-9][a-fA-F0-9]))*))*))*))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2089
#T: US Phone Number
#A: Ted Cambron
#D: This is my simple phone number regex. There are many like it but this is mine. It accepts the most common United States phone number formats that normal people use. The number 1 at the beginning is optional and so is the separators. The separators can be a dash (-), a period (.) or a space. Putting the area code in parenthesis is also an option. That's about it.
^(1?(?: |\-|\.)?(?:\(\d{3}\)|\d{3})(?: |\-|\.)?\d{3}(?: |\-|\.)?\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2090
#T: US Zip Code
#A: Ted Cambron
#D: Just for UZ zip codes. The post office number is optional.
^(\d{5}(?:\-\d{4})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2091
#T: Social Security Number
#A: Ted Cambron
#D: A properly formatted US social security number. first three digits must be 001 - 772.
^(00[1-9]|0[1-9][0-9]|[1-6][0-9][0-9]|7[0-6][0-9]|77[0-2]\-\d{2}\-\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2092
#T: Date
#A: Ted Cambron
#D: This is a regular expression to check for a properly formatted date according to the international date and time notation ISO 8601. See ISO 8601 specification for more information.
^(\d{4}(?:(?:(?:\-)?(?:00[1-9]|0[1-9][0-9]|[1-2][0-9][0-9]|3[0-5][0-9]|36[0-6]))?|(?:(?:\-)?(?:1[0-2]|0[1-9]))?|(?:(?:\-)?(?:1[0-2]|0[1-9])(?:\-)?(?:0[1-9]|[12][0-9]|3[01]))?|(?:(?:\-)?W(?:0[1-9]|[1-4][0-9]5[0-3]))?|(?:(?:\-)?W(?:0[1-9]|[1-4][0-9]5[0-3])(?:\-)?[1-7])?)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2093
#T: Time
#A: Ted Cambron
#D: This is a regular expression to check for a properly formatted time according to the international date and time notation ISO 8601. See ISO 8601 specification for more information.
^([0-2][0-4](?:(?:(?::)?[0-5][0-9])?|(?:(?::)?[0-5][0-9](?::)?[0-5][0-9](?:\.[0-9]+)?)?)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2094
#T: Select File Accept Arabic and Englesh File name or Folder name 
#A: Mohamed Antar Ibrahem
#D: Select File Accept Arabic and Englesh File name or Folder name 
^[a-zA-Z]:\\(([\w]|[\u0621-\u064A\s])+\\)+([\w]|[\u0621-\u064A\s])+(.jpg|.JPG|.gif|.GIF|.BNG|.bng)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2095
#T: Class A Network Number
#A: Ted Cambron
#D: The IANA resrved 24-bit block of IP address space for private internets. It's just a single class A network number. This is also RFC 1918 compliant.
^(10\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2096
#T: Class B Network Numbers
#A: Ted Cambron
#D: This is a set of 16 contiguous class B network numbers or a 16-bit block of ip address space as reserved by the IANA. RFC 1918 compliant.
^(172\.1[6-9]|2[0-9]|3[0-1|\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2097
#T: Class C Network Numbers
#A: Ted Cambron
#D: This is the 16-bit block of the IP address space for private internets reserved by the IANA. A set of 256 contiguous class C network numbers per RFC 1918.
^(192\.168\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5]\.[0-9]|[1-9][0-9]|[1-2][0-5][0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2098
#T: Numbers 0 - 100
#A: Vasanth S R
#D: Accepts all integers between 0-100
^0?[0-9]?[0-9]$|^(100)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2099
#T: Email
#A: Key Sutim
#D: Check email format
^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2100
#T: Number
#A: Key Sutim
#D: This regular expression will match on a real / decimal / floating point / numeric string with no more than 2 digits past the decimal. The negative sign (-) is allowed. No leading zeroes or commas. It is based on a currency regular expression by Tom Persing.
^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2101
#T: Telephone
#A: Key Sutim
#D: Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.
(\+)?([-\._\(\) ]?[\d]{3,20}[-\._\(\) ]?){2,10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2102
#T: DateTime
#A: Key Sutim
#D: DateTime format DD/MM/YYYY HH:MM:SS AM
(?n:^(?=\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0?[1-9]|1\d|2[0-8])(?<sep>[/.-])(?<month>0?[1-9]|1[012])\2(?<year>(1[6-9]|[2-9]\d)\d{2})(?:(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2103
#T: Punctuation
#A: Ted Cambron
#D: This is a little goofy regex to allow punctuation. I was reluctant to post it but what the heck. If it puts a smile on somebody's face then it was worth it. It sort of works. :)
^((\'|\")?[a-zA-Z]+(?:\-[a-zA-Z]+)?(?:s\'|\'[a-zA-Z]{1,2})?(?:(?:(?:\,|\.|\!|\?)?(?:\2)?)|(?:(?:\2)?(?:\,|\.|\!|\?)?))(?: (\'|\")?[a-zA-Z]+(?:\-[a-zA-Z]+)?(?:s\'|\'[a-zA-Z]{1,2})?(?:(?:(?:\,|\.|\!|\?)?(?:\2|\3)?)|(?:(?:\2|\3)?(?:\,|\.|\!|\?)?)))*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2104
#T: EMail filter
#A: kub
#D: This filter is able to filter a full of address. It uses extension definition
^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)?@[a-zA-Z0-9-]+(((\.[0-9]{1,3}){0,3})|((\.(co|com|net|org|edu|gov|mil|aero|coop|info|museum|name|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|fx|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nt|nu|nz|om|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw)){1,2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2105
#T: List of digits, CSV
#A: Luc Boudreau
#D: Accepts a list of 4 digits separated by commas. Used to validate a list of years. Can be easily customized to change the number of digits.
^(\d{4},?)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2106
#T: Windows filename
#A: Frank Pottle
#D: Matches valid Windows filenames using local, network and UNC formats.
(?i)^(((\\\\(\?\\(UNC\\)?)?)([A-Z]:\\|([^\\\/\:\*\?\"\<\>\|\.\s][^\\\/\:\*\?\"\<\>\|]+[^\\\/\:\*\?\"\<\>\|\.\s]\\){2}))|[A-Z]:\\)([^\\\/\:\*\?\"\<\>\|\s][^\\\/\:\*\?\"\<\>\|]+[^\\\/\:\*\?\"\<\>\|\s]\\)*([^\\\/\:\*\?\"\<\>\|\.\s][^\\\/\:\*\?\"\<\>\|\.]+[^\\\/\:\*\?\"\<\>\|\.\s])(\.[^\\\/\:\*\?\"\<\>\|\.\s]+)*?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2107
#T: Embedded YouTube Video
#A: Ted Cambron
#D: A simple regex to validate an embedded YouTube video.
(\"http:\/\/www\.youtube\.com\/v\/\w{11}\&rel\=1\")

#U: http://regexlib.com/REDetails.aspx?regexp_id=2108
#T: Embedded Google Video
#A: Ted Cambron
#D: A simple regex for validating an embedded Google video.
(\"http:\/\/video\.google\.com\/googleplayer\.swf\?docId=\d{19}\&hl=[a-z]{2}\")

#U: http://regexlib.com/REDetails.aspx?regexp_id=2109
#T: Date Format
#A: Ajesh Kumar CM
#D: Matches the valid date format MM/DD/CCYY
#D: Year from 2000 to 2008 and the month will accept till 12 and the day will accept till 31
\b(0?[1-9]|1[0-2])(\/)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\/)(200[0-8])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2110
#T: Date Format
#A: Ajesh Kumar CM
#D: Matches the valid date format MM-DD-CCYY
#D: Year from 2000 to 2008 and the month will accept till 12 and the day will accept till 31
\b(0?[1-9]|1[0-2])(\-)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\-)(200[0-8])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2111
#T: Date Match
#A: Ole
#D: This pattern mathces the following date formats: DDMMMYY,DDMMMYYYY,DDMMMYY. The Pattern matches on leap year dates as well
^(d{0}|(31(?!(FEB|APR|JUN|SEP|NOV)))|((30|29)(?!FEB))|(29(?=FEB(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(29(?=FEB(((0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)((1[6-9]|[2-9]\d)\d{2}|\d{2}|d{0})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2112
#T: Password
#A: Ted Cambron
#D: My simple but effective password regex. The password can only contain letters and/or digits and must be at least 6 characters long and no more than 20. I know it says {4,18} but it just works out that way. The question mark was added for optimization. Also, the password can not begin or end with a space or underscore.
^([a-zA-Z0-9]{4,18}?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2113
#T: Valid UK Post Codes Upper and Lower Case
#A: Gareth Wright
#D: Matches valid UK post codes in both upper and lower case, allowing for one or zero spaces between outcode and incodes.
^ ?(([BEGLMNSWbeglmnsw][0-9][0-9]?)|(([A-PR-UWYZa-pr-uwyz][A-HK-Ya-hk-y][0-9][0-9]?)|(([ENWenw][0-9][A-HJKSTUWa-hjkstuw])|([ENWenw][A-HK-Ya-hk-y][0-9][ABEHMNPRVWXYabehmnprvwxy])))) ?[0-9][ABD-HJLNP-UW-Zabd-hjlnp-uw-z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2114
#T: Person's Name
#A: Ted Cambron
#D: Here's a regex for a person's name. Simple but effective.
^([a-zA-Z]+(?:\.)?(?: [a-zA-Z]+(?:\.)?)*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2115
#T: Title
#A: Ted Cambron
#D: Here's a regex for a title. The title may contain basic punctuation and may not have leading or trailing spaces or underscores but that's about it.
^([^_][\w\d\@\-]+(?:s\'|\'[a-zA-Z]{1,2})?(?:\,)?(?: [\w\d\@\-]+(?:s\'|\'[a-zA-Z]{1,2})?(?:\,)?)*(?:\.|\!|\?){0,3}[^\s_])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2116
#T: Numbers
#A: Ted Cambron
#D: Here's another one for numbers. Any kind of number. Money, percentage, ect. Commas are optional and must be properly formatted.
^((?:\+|\-|\$)?(?:\d+|\d{1,3}(?:\,\d{3})*)(?:\.\d+)?(?:[a-zA-Z]{2}|\%)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2117
#T: Domain URL
#A: Ted Cambron
#D: A URL to a domain name. Only for http but that can be changed easily to accept more. the dashes and undescores can only be used between text and/or digits. The slash on the end is optional
^(http\:\/\/(?:www\.)?[a-zA-Z0-9]+(?:(?:\-|_)[a-zA-Z0-9]+)*(?:\.[a-zA-Z0-9]+(?:(?:\-|_)[a-zA-Z0-9]+)*)*\.[a-zA-Z]{2,4}(?:\/)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2118
#T: IP validation
#A: Asen Bozhilov
#D: Valiadation IP RegExp.
^(?:(?:1\d{0,2}|[3-9]\d?|2(?:[0-5]{1,2}|\d)?|0)\.){3}(?:1\d{0,2}|[3-9]\d?|2(?:[0-5]{1,2}|\d)?|0)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2119
#T: Email Validation
#A: Chin Bae
#D: This pattern was based on this reference: http://www.remote.org/jochen/mail/info/chars.html
#D: This expression allows only these symbols (+, -, _, or .) in the local part of the address, but no two consecutive symbols are allowed. The symbols behave like separators for alphanumeric atoms. The local part must begin and end with an atom. Therefore, local part cannot begin or end with a symbol.
#D: For the domain name, I tested what was allowed at various domain registrars. While hyphens are allowed, domain names must abide by the following rules:
#D: -can't begin or end with hyphen
#D: -no more than two hyphens can appear consecutively
^([a-zA-Z0-9]+([\.+_-][a-zA-Z0-9]+)*)@(([a-zA-Z0-9]+((\.|[-]{1,2})[a-zA-Z0-9]+)*)\.[a-zA-Z]{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2120
#T: US Social Security Numbers
#A: Moses Omweno
#D: Detects 9 digit numbers with the pattern DDD-DD-DDDD separated with dashes, spaces, or periods. Must be in valid assigned number ranges. Eliminates common test numbers, such as 123456789 or all the same digit.
^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ .-]?)(?!00)\d\d\3(?!0000)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2121
#T: Yet another URI checker
#A: Claudio Di Ciccio
#D: Checks whether the entered string looks like a URI, with a specified protocol. Optionally, you can add the port number, and some GET variables.
#D: The control is quite loose, but it's a choice of mine.
#D: Comments and corrections are welcome.
^([a-zA-Z]+)://([a-zA-Z0-9_\-]+)((\.[a-zA-Z0-9_\-]+|[0-9]{1,3})+)\.([a-zA-Z]{2,6}|[0-9]{1,3})((:[0-9]+)?)((/[a-zA-Z0-9_\-,.;=%]*)*)((\?[a-zA-Z0-9_\-,.;=&%]*)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2122
#T: Comma separated numbers
#A: Prashant Vedpathak
#D: This regular expression is used to validate only comma separated numbers.
^([0-9]*)+(,[0-9]+)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2123
#T: American Dollar Amount Format
#A: Ajesh Kumar CM
#D: Validate American Dollar Amount Format
(\$\s*[\d,]+\.\d{2})\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2124
#T: Validate Numbers
#A: Ajesh Kumar CM
#D: Validate the numbers 1 to 9
\b[1-9]\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2125
#T: Validate Numbers
#A: Ajesh Kumar CM
#D: Validate the numbers in between 39 to 50 (i.e 40 to 49)
\b4[0-9]\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2126
#T: Special Character Blocker
#A: Paul Verhulpen
#D: This expression stops the characters <>/?&{};# from a string of any length passing the regular expression validator in Visual Studio thereby stopping the HttpRequestValidationException (if client side validation and javascript is on)
[^<>/?&{};#]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2127
#T: Feet-inch to Decimal
#A: Normand Frechette
#D: I needed an expression that would break down a written measurement, like 12' 2-15/16", into groups of feet, inches, fractional inches (num/dem). This is a modified expression based on Trevor Braun's orginal regex. Added the "ft" & "in" suffixes and the fraction's Numerator & Denominator groups.  
(?:(?:(?<Feet>\d+)[ ]*(?:'|ft)){0,1}[ ]*(?<Inches>\d*(?![/\w])){0,1}(?:[ ,\-]){0,1}(?<Fraction>(?<FracNum>\d*)\/(?<FracDem>\d*)){0,1}(?<Decimal>\.\d*){0,1}(?:\x22| in))|(?:(?<Feet>\d+)[ ]*(?:'|ft)[ ]*){1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2128
#T: Integer with comma and dot
#A: Har Pei Fen
#D: Integer with comma and dot
^[-+]?(\d?\d?\d?,?)?(\d{3}\,?)*(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2129
#T: Street Number only
#A: Michael Dallaire
#D: This is my first attempt at creating a regex.  For a street number only field, allows 7 digit number, 6 digit number with one preceding letter (the letter can have a hyphen, space, or nothing between it and the numbers), two 7 digit numbers divided by a "/","\", or "-", variations of P.O. Box we allow, Rural Route, and Highway Contract acoording to U.S. Postal rules.
((\d{1,6}\-\d{1,6})|(\d{1,6}\\\d{1,6})|(\d{1,6})(\/)(\d{1,6})|(\w{1}\-?\d{1,6})|(\w{1}\s\d{1,6})|((P\.?O\.?\s)((BOX)|(Box))(\s\d{1,6}))|((([R]{2})|([H][C]))(\s\d{1,6}\s)((BOX)|(Box))(\s\d{1,6}))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2130
#T: US Phone Number Validation
#A: Kyle Keith
#D: Us phone number validation
1?[ \.\-\+]?[(]?([0-9]{3})?[)]?[ \.\-\+]?[0-9]{3}[ \.\-\+]?[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2131
#T: Email
#A: chandra sekhar
#D: here its accepts valied email only
"/^[-_.[:alnum:]]+@((([[:alnum:]]|[[:alnum:]][[:alnum:]-]*[[:alnum:]])\.)+(ad|ae|aero|af|ag|ai|al|am|an|ao|aq|ar|arpa|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|biz|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|com|coop|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|edu|ee|eg|eh|er|es|et|eu|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gh|gi|gl|gm|gn|gov|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|in|info|int|io|iq|ir|is|it|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly|ma|mc|md|mg|mh|mil|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|museum|mv|mw|mx|my|mz|na|name|nc|ne|net|nf|ng|ni|nl|no|np|nr|nt|nu|nz|om|org|pa|pe|pf|pg|ph|pk|pl|pm|pn|pr|pro|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr|st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zw)$|(([0-9][0-9]?|[0-1][0-9][0-9]|[2][0-4][0-9]|[2][5][0-5])\.){3}([0-9][0-9]?|[0-1][0-9][0-9]|[2][0-4][0-9]|[2][5][0-5]))$/i"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2132
#T: US Dallor
#A: Tayyaba Nosheen
#D: accepts US dallor upto 9,999,999
^\$((\d{1})\,\d{1,3}(\,\d{3}))|(\d{1,3}(\,\d{3}))|(\d{1,3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2133
#T: Percentage
#A: Tayyaba Nosheen
#D: generate percentage with 2 values after point
^(100(?:\.0{1,2})?|0*?\.\d{1,2}|\d{1,2}(?:\.\d{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2134
#T: Web Address
#A: Tayyaba Nosheen
#D: accepts just the web address
^((http|https|ftp)\://)?([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-\N4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9\N]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]\N{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-\NZ0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,4})(\:[0-9]+)*(/[^/][a-zA-Z0-9\.\,\?\'\\/\+&\N%\$#\=~_\-]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2135
#T: Web Address
#A: Tayyaba Nosheen
#D: accepts just the web address
^((http|https|ftp)\://)?([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-\N4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9\N]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]\N{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-\NZ0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,4})(\:[0-9]+)*(/[^/][a-zA-Z0-9\.\,\?\'\\/\+&\N%\$#\=~_\-]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2137
#T: Accepts numeric numbers except zero
#A: Noel G. Francisco
#D: Regular expression that accepts positive numbers with or with decimal places, but will not allow zero or 0.000
^(([1-9]{1}(\d+)?)(\.\d+)?)|([0]\.(\d+)?([1-9]{1})(\d+)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2138
#T: phone
#A: radhika bista
#D: phone number
/*d(9,15)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2139
#T: URL Validation
#A: Rafael de la Torre Consuegra
#D: This pattern can be used to validate URLs starting with ftp, http or https
^(ftp|https?):\/\/([^:]+:[^@]*@)?([a-zA-Z0-9][-_a-zA-Z0-9]*\.)*([a-zA-Z0-9][-_a-zA-Z0-9]*){1}(:[0-9]+)?\/?(((\/|\[|\]|-|~|_|\.|:|[a-zA-Z0-9]|%[0-9a-fA-F]{2})*)\?((\/|\[|\]|-|~|_|\.|,|:|=||\{|\}|[a-zA-Z0-9]|%[0-9a-fA-F]{2})*\&?)*)?(#([-_.a-zA-Z0-9]|%[a-fA-F0-9]{2})*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2140
#T: Email Validator
#A: Kunal Chowdhury
#D: This accepts RFC 2822 email addresses in the form:<br> blah@blah.com OR<br> Blah <blah@blah.com><br> <br> RFC 2822 email 'mailbox':<br> mailbox = name-addr | addr-spec<br> name-addr = [display-name] "<" addr-spec ">"<br> addr-spec = local-part "@" domain<br>
^((?>[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2141
#T: Austria VAT Number
#A: Panayiotis Savva
#D: Vat number for Austria.
#D: Format is
#D: ATU12345678
^(AT){0,1}[U]{0,1}[0-9]{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2142
#T: Bulgaria Vat Number
#A: Panayiotis Savva
#D: Vat number for Bulgaria. Formats are
#D: BG123456789
#D: BG1234567890
^(BG){0,1}([0-9]{9}|[0-9]{10})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2143
#T: C# or Java Comments
#A: Punit Ganshani
#D: This regex searches multi-line, single-line, and XML comments present in C# file.
(/\*[\d\D]*?\*/)|(\/\*(\s*|.*?)*\*\/)|(\/\/.*)|(/\\*[\\d\\D]*?\\*/)|([\r\n ]*//[^\r\n]*)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2145
#T: French postal address
#A: PLAIS Lionel
#D: Find differents parts of a french mail's address.
#D: 0       : Complete address
#D: 1       : Number + BIS, TER or QUATER
#D: 2       : Number
#D: 3 et 4  : BIS, TER or QUATER
#D: 5 à 9   : Nothing
#D: 10      : Street
#D: 11      : Nothing
#D: 12      : Postal code
#D: 13      : City
((^[0-9]*).?((BIS)|(TER)|(QUATER))?)?((\W+)|(^))(([a-z]+.)*)([0-9]{5})?.(([a-z\'']+.)*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2146
#T: Date and Time Validation
#A: Gregg Jensen
#D: Expression to validate a date with or without time in standard or 24 hour format with optional milliseconds (01/12/08 23:31:05 or 5/12/1974 11:59 PM).
(^0?[1-9]|^1[0-2])\/(0?[1-9]|[1-2][0-9]|3[0-1])\/(19|20)?[0-9][0-9](\s(((0?[0-9]|1[0-9]|2[0-3]):[0-5][0-9](:[0-5][0-9])?)|((0?[0-9]|1[0-2]):[0-5][0-9](:[0-5][0-9])?\s(AM|PM))))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2147
#T: domain\user
#A: Ajit
#D: Checks for the format alphanumeric\alphanumeric
^([a-zA-Z0-9])+\\{1}([a-zA-Z0-9])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2148
#T: Date Dashes Two Digit Year
#A: George Goehring
#D: I was looking for a date format that allowed 1 or 2 digit Month and Days and 2 digit years. I found and tweak this one
#D: based off Cliff Schneide Date example. 
^((((0?[13578])|(1[02]))[\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\-]?(0?[1-9]|[0-2][0-9])))[\-]?\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2149
#T: MS.NET MembershipProvider LDAP connection string parser
#A: Igor Werner
#D: matches the Protocol, Domain  with port and the distinguishedName of the directory container.
(?<Protocol>\w+):\/\/(?<Domain>[\w@][\w.:\-@]+)\/(?<Container>[\w= ,@-]+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2150
#T: Indian Landline number
#A: Gaurish Salunke
#D: This validates all the indian landline no. i.e (code)-(phone_no).the code can be 3 or 4 digits andthe hone no can be 7 or 8 digits.
^(\d{3,4}-\d{7,8})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2151
#T: Australian Postcodes
#A: Grant Spencer
#D: Matches all valid Australian postcodes
^[2-7]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2152
#T: Top-Level Domain Names
#A: Pierre Wong
#D: Exact match all the .ccTLD .gTLD and .gTLD.ccTLD names
^(http:\/\/)?(www\.)?[a-z0-9][a-z0-9-]{0,61}[a-z0-9](?<gTLD>\.(biz|com|edu|gov|info|int|mil|name|net|org|aero|asia|cat|coop|jobs|mobi|museum|pro|tel|travel|arpa|root))?(?(gTLD)(\.(a[c-gil-oq-uwxz]|b[abd-jmnorstvwyz]|c[acdf-ik-oruvxyz]|d[ejkmoz]|e[ceghrstu]|f[ijkmor]|g[abd-ilmnp-tuwy]|h[kmnrtu]|i[delmnoq-t]|j[emop]|k[eghimnprwyz]|l[abcikr-uvy]|m[acdeghk-z]|n[acefgilopruzc]|om|p[ae-hk-nrstwy]|qa|r[eosuw]|s[a-eg-ortuvyz]|t[cdfghj-prtvwz]|u[agksyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))?|(\.(a[c-gil-oq-uwxz]|b[abd-jmnorstvwyz]|c[acdf-ik-oruvxyz]|d[ejkmoz]|e[ceghrstu]|f[ijkmor]|g[abd-ilmnp-tuwy]|h[kmnrtu]|i[delmnoq-t]|j[emop]|k[eghimnprwyz]|l[abcikr-uvy]|m[acdeghk-z]|n[acefgilopruzc]|om|p[ae-hk-nrstwy]|qa|r[eosuw]|s[a-eg-ortuvyz]|t[cdfghj-prtvwz]|u[agksyz]|v[aceginu]|w[fs]|y[etu]|z[amw])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2153
#T: Full Name Parser
#A: Jamison White
#D: Finds title, first name, middle initial, last name, and suffix of a name. Middle names are added to first name. Uses .Net capture group names.
^(?<title>.*\.\s)*(?<firstname>([A-Z][a-z]+\s*)+)(\s)(?<middleinitial>([A-Z]\.?\s)*)(?<lastname>[A-Z][a-zA-Z-']+)(?<suffix>.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2154
#A: diniya99
#D: The reqular expression matches those are starts with single character after that any character
^[*a-zA-Z].$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2155
#T: Toll Free phone numbers(800) Not allowed
#A: ajmal
#D: this expression not allowed to enter toll free no.
(8[^0]\d|8\d[^0]|[0-79]\d{2})-\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2156
#T: UK Mobile Phone Numbers
#A: Walter Mann
#D: Validates UK Mobile numbers, expressed as Local (077...) or as international (+447).
#D: Note: 71,72,73,74 are reserved for mobiles in the future (therefore may be added later). 76 is for pagers.
^(0|\+44\s?)7(0|5|7|8|9)\s?\d{2}\s?\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2157
#T: Name and Number
#A: trupti.gore
#D: Will take space, number, no special characters
^\s*[a-zA-Z0-9,\s]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2158
#T: Validates the most of the email formats
#A: Rafiq
#D: This expression will validates most of the email formats.
^([a-zA-Z0-9])(([\-.]|[_]+)?([a-zA-Z0-9]+))*(@){1}([a-z0-9]|([a-z0-9][\-]))+[.]{1}(([a-z]{2,3})|([a-z]{2,3}[.]{1}[a-z]{2,3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2159
#T: rijec1
#A: Dspanic
#D: Nka
(a+b)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2160
#T: VB.NET or VB Comments
#A: Punit Ganshani
#D: Filters out VB.NET and VB6.0 comments.
(REM [\d\D]*?[\r\n])|(?<SL>\'[\d\D]*?[\r\n])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2161
#T: Is Valid XML Node Or Attribute Name
#A: Tim Darius
#D: Valid XML Node or Attribute Names start with a letter <document>, an underscore <_record> or a colon (generally avoid using a colon)
#D: The next characters may be letters, digits, underscore, hyphens, periods and colons (but no whitespaces)
^[a-zA-Z_:]+[a-zA-Z_:\-\.\d]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2164
#T: Swiss Zip Code validation
#A: Michael Freiermuth
#D: Zip code validation for Switzerland.
#D: Forces 4-digits only zipcode starting at 1000
^[1-9][0-9][0-9][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2165
#T: Canadian Phone number validation with Extension
#A: David Bérubé
#D: Validate a Canadian phone number and optional 3 to 4 digits extension
^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}(([ ]{0,1})|([ ]{1}[0-9]{3,4}|))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2168
#T: Check date format YYYYMMDD
#A: Mateja Rajter
#D: Check date format YYYYMMDD
((^((1[8-9]\d{2})|([2-9]\d{3}))(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))(11|0?[469])(30|[12][0-9]|0?[1-9])$)|(^((1[8-9]\d{2})|([2-9]\d{3}))(0?2)(2[0-8]|1[0-9]|0?[1-9])$)|(^([2468][048]00)(0?2)(29)$)|(^([3579][26]00)(0?2)(29)$)|(^([1][89][0][48])(0?2)(29)$)|(^([2-9][0-9][0][48])(0?2)(29)$)|(^([1][89][2468][048])(0?2)(29)$)|(^([2-9][0-9][2468][048])(0?2)(29)$)|(^([1][89][13579][26])(0?2)(29)$)|(^([2-9][0-9][13579][26])(0?2)(29)$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2169
#T: Password validation
#A: ravi pulluri
#D: Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters
(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,10})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2170
#T: css style attribute content
#A: Stéphane Roy
#D: Get the style attribute inner text contained inside " or ' caracters with the "style=" prefix.
style="[^"]*"|'[^']*'

#U: http://regexlib.com/REDetails.aspx?regexp_id=2171
#T: Simple SELECT statements
#A: Kevin Devine
#D: This finds the SELECT part of a SQL select statement.  It does not find the entire FROM statement.  That is a different RegEx I will post later.
(SELECT\s(?:DISTINCT)?[A-Za-z0-9_\*\)\(,\s\.'\+\|\:=]+?)\s(?:FROM\s[\w\.]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2173
#T: Parse file path
#A: Tim
#D: Parses any file path and extracts directory, file name and extension separately.
^(?<1>.*[\\/])(?<2>.+)\.(?<3>.+)?$|^(?<1>.*[\\/])(?<2>.+)$|^(?<2>.+)\.(?<3>.+)?$|^(?<2>.+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2174
#T: MM/DD/YY Expression 
#A: Gillian
#D: Validates dates in the following format: MM/DD/YY
((0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))/\d{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2175
#T: MM/DD/YY(1900 - 2999)
#A: Gillian
#D: Validated date in the following format: MM/DD/YY from 1900 to 2999
((0[1-9])|(1[0-2]))\/((0[1-9])|(1[0-9])|(2[0-9])|(3[0-1]))/\(([1][9][0-9][0-9])|([2][0-9][0-9][0-9])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2177
#T: US States and DC
#A: Mike Hamilton
#D: The 50 US states and DC (Disctrict of Columbia).
^((A[LKZR])|(C[AOT])|(D[EC])|(FL)|(GA)|(HI)|(I[DLNA])|(K[SY])|(LA)|(M[EDAINSOT])|(N[EVHJMYCD])|(O[HKR])|(PA)|(RI)|(S[CD])|(T[NX])|(UT)|(V[TA])|(W[AVIY]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2178
#T: URl Domain names
#A: buzzooka
#D: Used for matching a URL and can be used for extracting the domain name from a given URL ending with '/'.
#D: Concat $2 and $3 to get the domain name.
^http[s]?://([a-zA-Z0-9\-]+\.)*([a-zA-Z]{3,61}|[a-zA-Z]{1,}\.[a-zA-Z]{2})/.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2179
#T: Javascript Tokenizer
#A: Martin Kirk
#D: Tokenize a Javascript document for parsing
#D: each token is a language-token : string, int, float, comment, multiline comment, operator, expression etc. etc.
(\/\*[\s\S.]+?\*\/|[/]{2,}.*|\/((\\\/)|.??)*\/[gim]{0,3}|'((\\\')|.??)*'|"((\\\")|.??)*"|-?\d+\.\d+e?-?e?\d*|-?\.\d+e-?\d+|\w+|[\[\]\(\)\{\}:=;"'\-&!|+,.\/*])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2180
#T: Invalid IF STATEMENT finder
#A: Joel Kirchartz
#D: finds if statements with only one = sign.
if\s[(][A-Za-z]*\s[=]\s

#U: http://regexlib.com/REDetails.aspx?regexp_id=2181
#T: Specific Top-Level Domain (TLD)
#A: Matt Finazzo
#D: Matches the TLD of a given domain (replace yourdomain.com with whatever domain you're trying to enforce).
#D: I was writing an web application in which I wanted to to display a special message to visitors if and only if they were referred to my site by one specific site.  However, because the specific site in question was highly dynamic, referring URLs were all over the place in terms of consistency and the only thing I knew I could count on 100% was the TLD (subdomains and file paths acceptable, so long as the TLD matches exactly).
^.*(yourdomain.com).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2182
#T: SQL Server 2005 datetime validation
#A: Christopher Strolia-Davis
#D: This expression validates most legal dates for a SQL Server 2005 datetime format. It includes checking for leap years. (Written for a default U.S. install, not sure what results would be on versions for different regions)
#D: For double digit dates, 00 is considered to be the year 2000, so leap years will be valid.
#D: This will handle dates in the following formats
#D: yymmdd
#D: yyyymmdd
#D: m/d/yy
#D: mm/dd/yy
#D: m/d/yyyy
#D: mm/dd/yyyy
#D: m-d-yy
#D: mm-dd-yy
#D: m-d-yyyy
#D: mm-dd-yyyy
#D: m.d.yy
#D: mm.dd.yy
#D: m.d.yyyy
#D: mm.dd.yyyy
#D: mmmm dd yy
#D: mmmm dd yyyy
#D: mmmm dd, yy
#D: mmmm dd, yyyy
#D: mmmm d yy
#D: mmmm d yyyy
#D: mmmm d, yy
#D: mmmm d, yyyy
#D: d mmmm yy
#D: d mmmm yyyy
#D: dd mmmm yy
#D: dd mmmm yyyy
#D: d-mmmm-yy
#D: d-mmmm-yyyy
#D: dd-mmmm-yy
#D: dd-mmmm-yyyy
#D: d.mmmm.yy
#D: d.mmmm.yyyy
#D: dd.mmmm.yy
#D: dd.mmmm.yyyy
#D: d/mmmm/yy
#D: d/mmmm/yyyy
#D: dd/mmmm/yy
#D: dd/mmmm/yyyy
#D: mmm dd yy
#D: mmm dd yyyy
#D: mmm dd, yy
#D: mmm dd, yyyy
#D: mmm d yy
#D: mmm d yyyy
#D: mmm d, yy
#D: mmm d, yyyy
#D: dd mmm yy
#D: dd mmm yyyy
#D: d mmm yy
#D: d mmm yyyy
#D: ddmmmyy
#D: ddmmmyyyy
#D: dd-mmm-yy
#D: dd-mmm-yyyy
#D: d-mmm-yy
#D: d-mmm-yyyy
#D: dd.mmm.yy
#D: dd.mmm.yyyy
#D: d.mmm.yy
#D: d.mmm.yyyy
#D: dd/mmm/yy
#D: dd/mmm/yyyy
#D: d/mmm/yy
#D: d/mmm/yyyy
#D: Note: This will also handle mixing and matching of separator characters. for example:
#D: '1/1.2000',
#D: It would appear that this is valid in SQL Server 2005.
#D: This is written to work for ECMA script (include the ignore case parameter i), but should also work in .Net.
#D: I have tested this in firefox 2.0 (Blazing Fast) and IE 7.0 and both seem to work just fine. I have not tested it in .Net.
#D: It's pretty large and I have not attempted to optimize it. Feel free to optimize it any way you like.
^((((((((jan(uary)?)|(mar(ch)?)|(may)|(july?)|(aug(ust)?)|(oct(ober)?)|(dec(ember)?)) ((3[01])|29))|(((apr(il)?)|(june?)|(sep(tember)?)|(nov(ember)?)) ((30)|(29)))|(((jan(uary)?)|(feb(ruary)?|(mar(ch)?)|(apr(il)?)|(may)|(june?)|(july?)|(aug(ust)?)|(sep(tember)?)|(oct(ober)?)|(nov(ember)?)|(dec(ember)?))) (2[0-8]|(1\d)|(0?[1-9])))),? )|(((((1[02])|(0?[13578]))[\.\-/]((3[01])|29))|(((11)|(0?[469]))[\.\-/]((30)|(29)))|(((1[0-2])|(0?[1-9]))[\.\-/](2[0-8]|(1\d)|(0?[1-9]))))[\.\-/])|(((((3[01])|29)[ \-\./]((jan(uary)?)|(mar(ch)?)|(may)|(july?)|(aug(ust)?)|(oct(ober)?)|(dec(ember)?)))|(((30)|(29))[ \.\-/]((apr(il)?)|(june?)|(sep(tember)?)|(nov(ember)?)))|((2[0-8]|(1\d)|(0?[1-9]))[ \.\-/]((jan(uary)?)|(feb(ruary)?|(mar(ch)?)|(apr(il)?)|(may)|(june?)|(july?)|(aug(ust)?)|(sep(tember)?)|(oct(ober)?)|(nov(ember)?)|(dec(ember)?)))))[ \-\./])|((((3[01])|29)((jan)|(mar)|(may)|(jul)|(aug)|(oct)|(dec)))|(((30)|(29))((apr)|(jun)|(sep)|(nov)))|((2[0-8]|(1\d)|(0[1-9]))((jan)|(feb)|(mar)|(apr)|(may)|(jun)|(jul)|(aug)|(sep)|(oct)|(nov)|(dec)))))(((175[3-9])|(17[6-9]\d)|(1[89]\d{2})|[2-9]\d{3})|\d{2}))|((((175[3-9])|(17[6-9]\d)|(1[89]\d{2})|[2-9]\d{3})|\d{2})((((1[02])|(0[13578]))((3[01])|29))|(((11)|(0[469]))((30)|(29)))|(((1[0-2])|(0[1-9]))(2[0-8]|(1\d)|(0[1-9])))))|(((29feb)|(29[ \.\-/]feb(ruary)?[ \.\-/])|(feb(ruary)? 29,? ?)|(0?2[\.\-/]29[\.\-/]))((((([2468][048])|([3579][26]))00)|(17((56)|([68][048])|([79][26])))|(((1[89])|([2-9]\d))(([2468][048])|([13579][26])|(0[48]))))|(([02468][048])|([13579][26]))))|(((((([2468][048])|([3579][26]))00)|(17((56)|([68][048])|([79][26])))|(((1[89])|([2-9]\d))(([2468][048])|([13579][26])|(0[48]))))|(([02468][048])|([13579][26])))(0229)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2183
#T: Decimal Pattern
#A: Vincent Faller
#D: Validates a decimal with up to 8 whole places and up to two decimal places
^(\d{1,8}|(\d{0,8}\.{1}\d{1,2}){1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2184
#T: Simple URL
#A: Francisco Grau
#D: Matches simple root website URLs.
#D: Https and some new domains supported.
^(http(s?):\/\/)(www.)?(\w|-)+(\.(\w|-)+)*((\.[a-zA-Z]{2,3})|\.(aero|coop|info|museum|name))+(\/)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2185
#T: Validation of Mexican RFC for tax payers (individuals)
#A: Julio César Plascencia
#D: This is the expression to validate the personal key for tax payers in Mexico (called RFC) as individuals (not for enterprises).
Validation of Mexican RFC for tax payers (individuals)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2186
#T: Name or Text
#A: Hemalatha
#D: First word and second word should be a single space
^[\w\s]+$\N^[[A-Z]\s]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2187
#T: International Phone Number Capture
#A: Ananda Tracy
#D: International Phone Number separated into its component parts by dashes (International Country Code, International Area Code, International Phone Number, and optional 1-4 digit Extension). (The separator before extension is one or more characters that are not a dash or a number.) This allows explicit parsing/extraction of the extension.
^011-(?<IntlCountryCode>[1-9][0-9]{1,5})-(?<IntlAreaCode>[0-9]+)-(?<IntlPhoneNumber>[0]?\d[0-9]+)(?:[^\d\-]+(?<IntlExtension>\d{1,4}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2188
#T: New Zealand Phones
#A: Jeff Wain
#D: This phone pattern matches all New Zealand phone numbers with formatting and returns a single formatted string as the first return in the array. Does not take into account all specific exclusions, though, in case of changes (like 025 to 027 in 2007). Based off of  CGRdevelopment's New Zealand regex.
^(((\+?64\s*[-\.]?[3-9]|\(?0[3-9]\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{4})|((\+?64\s*[-\.\(]?2\d{1}[-\.\)]?|\(?02\d{1}\)?)\s*[-\.]?\d{3}\s*[-\.]?\d{3,5})|((\+?64\s*[-\.]?[-\.\(]?800[-\.\)]?|[-\.\(]?0800[-\.\)]?)\s*[-\.]?\d{3}\s*[-\.]?(\d{2}|\d{5})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2189
#T: Valid URL without protocol
#A: Craig Palenshus
#D: Use this expression to check that a valid web address is used without any protocol.
^([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2190
#T: Positive number greater than
#A: Michael Dallaire
#D: Allows only a positive whole number greater than 4.  Obviously it can be easily changed to be greater than any number desired.
((?!^[0-4])^(\d+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2191
#T: Validate Date Format
#A: Ajesh Kumar CM
#D: Matches the valid date format MM/DD/YY Year from 2000 (00) to 2008 (08) and the month will accept till 12 and the day will accept till 31
\b(0?[1-9]|1[0-2])(\/)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\/)(0[0-8])\b 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2192
#T: Validate Date Format
#A: Ajesh Kumar CM
#D: Matches the valid date format MM-DD-YY Year from 2000 (00) to 2008 (08) and the month will accept till 12 and the day will accept till 31
\b(0?[1-9]|1[0-2])(\-)(0?[1-9]|1[0-9]|2[0-9]|3[0-1])(\-)(0[0-8])\b 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2193
#T: Validate Time Format (Railway Time 24 hrs)
#A: Ajesh Kumar CM
#D: It will matches the railway time format that 00:00:00 to 23:59:59
\b(0[0-9]|1[0-9]|2[0-3])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2194
#T: Validate Time format (Standard time 12 hrs)
#A: Ajesh Kumar CM
#D: It will matches the Standard time format that 00:00:00 to 11:59:59
\b(0[0-9]|1[0-1])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2195
#T: Validate Time format with AM,PM (Standard time 12 hrs) 
#A: Ajesh Kumar CM
#D: It will matches the Standard time format that 00:00:00 AM to 11:59:59 PM
\b(0[0-9]|1[0-1])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])(\:)(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9])\s*(AM|PM|A|P)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2196
#T: Validate Date format Month Day, CCYY
#A: Ajesh Kumar CM
#D: VALIDATE THE DATE FORMAT FULL MONTH DAY, CCYY i.e August 30, 2006
\b(((J(ANUARY|UNE|ULY))|FEBRUARY|MARCH|(A(PRIL|UGUST))|MAY|(SEPT|NOV|DEC)EMBER|OCTOBER))\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(200[0-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2197
#T: Validate Date format Month Day, YY
#A: Ajesh Kumar CM
#D: VALIDATE THE DATE FORMAT FULL MONTH DAY, YY i.e August 30, 06 (2006)
\b(((J(ANUARY|UNE|ULY))|FEBRUARY|MARCH|(A(PRIL|UGUST))|MAY|(SEPT|NOV|DEC)EMBER|OCTOBER))\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(0[0-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2198
#T: Validate Date format Month Day, CCYY
#A: Ajesh Kumar CM
#D: VALIDATE THE DATE FORMAT SHORT MONTH DAY, CCYY i.e Aug 30, 2006
\b((J(AN|UN|UL))|FEB|MAR|(A(PR|UG))|MAY|SEP|NOV|DEC|OCT)\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(200[0-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2199
#T: Validate Date format Month Day, YY
#A: Ajesh Kumar CM
#D: VALIDATE THE DATE FORMAT SHORT MONTH DAY, YY i.e Aug 30, 06 (2006)
\b((J(AN|UN|UL))|FEB|MAR|(A(PR|UG))|MAY|SEP|NOV|DEC|OCT)\s*(0?[1-9]|1[0-9]|2[0-9]|3[0-1])\s*(\,)\s*(0[0-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2200
#T: US Phone with spaces only
#A: Suriya Supatanasakul
#D: This simple expression validates a USA phone number format where the +1 is required and that the phone number must only consist of numbers and spaces.
(\+1 )?\d{3} \d{3} \d{4} 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2201
#T: Integers with/without positive/negative sign, miles separator (,) and exponential notation
#A: Jose Antonio Gonzalez Prieto
#D: Integers with optional positive/negative sign, miles separator (,) and exponential notation
#D: Valids integer numbers with optional support for:
#D: 1.- positive/negative sign (123 -123 +123 are valid)
#D: 2.- miles separator (,) (12345 12,345 +12,345 are valid)
#D: 2.- exponential notation (+123E+4 -12,345E-4 are valid)
^[-+]?[1-9](\d*|((\d{1,2})?,(\d{3},)*(\d{3})))?([eE][-+]\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2202
#T: Decimals with optional positive/negative sign, miles separator (,) and exponential notation
#A: Jose Antonio Gonzalez Prieto
#D: Valids decimal numbers with optional support for:
#D: 1.- Use a positive/negative sign (123.78 -123.09 +0.123 are valid)
#D: 2.- Use a miles separator (12345.789 12,345.099 +12,345  are valid)
#D: 2.- Use a exponential notation (+0.123E+4 -12.345e-4 are valid)
^[-+]?((\d*|((\d{1,3})?,(\d{3},)*(\d{3})))?)(\.\d*)?([eE][-+]\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2203
#T: Split string by spaces except when within quotes
#A: boris callens
#D: Splits a string by spaces, except when the space is within a quote delimited set of characters. Usefull for splitting search field inputs.
#D: Props to killahbeez
\s(?=([^"]*"[^"]*"[^"]*)*$|[^"]*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2204
#T: Strong password
#A: Alex G
#D: Password must have at least 8 characters with at least one Capital letter, at least one lower case letter and at least one number or special character.
(?-i)(?=^.{8,}$)((?!.*\s)(?=.*[A-Z])(?=.*[a-z]))((?=(.*\d){1,})|(?=(.*\W){1,}))^.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2205
#T: Combination OF Alpha Characters And Period
#A: santosh narayan poojari
#D: Regular expression :Finite automata rule
#D: Values should preceed with characters of set [A-Za-z] and followed with period and character set [A-Za-z]
^[a-zA-Z]+(\.[a-zA-Z]+)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2206
#T: Remove icon data from Firefox bookmark files
#A: Martin Latter
#D: Remove favicon base64 data from Firefox bookmark HTML files, thereby reducing file size (useful for HTML bookmark backup and transfer).
ICON="[^"]+"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2207
#T: Date used for credit cards
#A: rob anna
#D: mm/yy date format for years between '08 and '19. For Credit Cards, date can't be in the past and only out 10 years.
^(|(0?[1-9])|(1[0-2]))\/((0[8-9])|(1[0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2208
#T: Capture International Phone Numbers
#A: Ananda Tracy
#D: Requires the International Phone Number to be separated into its component parts by dashes ("011-CC-AC-PH EXT" where "CC" is the 1 to 5 digit country code, "AC" is the area code, "PH" is the phone number, and "EXT" is the optional 1 to 4 digit extension.) (The separator before extension is one or more characters that are not a dash or a number.) This allows explicit parsing/extraction of the extension.  Also Captures international phone number components, including an optional extension into named groups.
^011-(?<IntlCountryCode>[1-9][0-9]{1,5})-(?<IntlAreaCode>[0-9]+)-(?<IntlPhoneNumber>[0]?\d[0-9]+)(?:[^\d\-]+(?<IntlExtension>\d{1,4}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2210
#T: Longitude  regex
#A: daniel cai
#D: first regex put on site.
#D: longitude must>=-180 & <180.
(^\+?1[0-7]\d(\.\d+)?$)|(^\+?([1-9])?\d(\.\d+)?$)|(^-180$)|(^-1[1-7]\d(\.\d+)?$)|(^-[1-9]\d(\.\d+)?$)|(^\-\d(\.\d+)?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2211
#T: Latitude 
#A: daniel cai
#D: Latitude must<90 >=-90
(^\+?([1-8])?\d(\.\d+)?$)|(^-90$)|(^-(([1-8])?\d(\.\d+)?$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2212
#T: time
#A: daniel cai
#D: validate time
#D: in hh:mm:ss
#D: hh:mm
#D: hh:mm:ss pm(am,PM,AM)
#D: <12h
^((1[01])|(\d)):[0-5]\d(:[0-5]\d)?\s?([apAP][Mm])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2213
#T: html <td>
#A: daniel cai
#D: match <td ***>***</td> in html,so any other html mark with<sth></sth> is just do a little change to this
^<\s*(td|TD)\s*(\w|\W)*\s*>(\w|\W)*</(td|TD)>$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2214
#T: Ip address
#A: daniel cai
#D: match ip
#D: address from 1.0.0.0 to 223.255.255.255
^((([1]\d{2})|(22[0-3])|([1-9]\d)|(2[01]\d)|[1-9]).(([1]\d{2})|(2[0-4]\d)|(25[0-5])|([1-9]\d)|\d).(([1]\d{2})|(2[0-4]\d)|(25[0-5])|([1-9]\d)|\d).(([1]\d{2})|(2[0-4]\d)|(25[0-5])|([1-9]\d)|\d))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2217
#T: USA Date Format. MM/DD/YYYY
#A: sunil kumar bisoyi
#D: This is the USA Date Format. MM/DD/YYYY with checking leaf year
(((0[13578]|10|12)([/])(0[1-9]|[12][0-9]|3[01])([/])([1-2][0,9][0-9][0-9]))|((0[469]|11)([/])([0][1-9]|[12][0-9]|30)([/])([1-2][0,9][0-9][0-9]))|((02)([/])(0[1-9]|1[0-9]|2[0-8])([/])([1-2][0,9][0-9][0-9]))|((02)([/])(29)(\.|-|\/)([02468][048]00))|((02)([/])(29)([/])([13579][26]00))|((02)([/])(29)([/])([0-9][0-9][0][48]))|((02)([/])(29)([/])([0-9][0-9][2468][048]))|((02)([/])(29)([/])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2218
#A: Wing
#D: This regex enable the user to enter all valid email addresses apart from when the user input 'co.uk' immediately after the '@' without stating a domain before it (e.g. 'freeserve.co.uk')
^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@(?!co.uk)[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2219
#T: ISO 8601 (W3 subset)
#A: Ryan Bies
#D: Matches all valid date/datetime strings according to the W3's implementation of ISO 8601, outlined here:
#D: http://www.w3.org/TR/NOTE-datetime
^(\d{4}((-)?(0[1-9]|1[0-2])((-)?(0[1-9]|[1-2][0-9]|3[0-1])(T(24:00(:00(\.[0]+)?)?|(([0-1][0-9]|2[0-3])(:)[0-5][0-9])((:)[0-5][0-9](\.[\d]+)?)?)((\+|-)(14:00|(0[0-9]|1[0-3])(:)[0-5][0-9])|Z))?)?)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2220
#T: Validate PATH
#A: Alex
#D: Match a path location. This regular expression check the file location and validate a file from one to three character extension description.
^([0-9a-zA-Z]+|[a-zA-Z]:(\\(\w[\w ]*.*))+|\\(\\(\w[\w ]*.*))+)\.[0-9a-zA-Z]{1,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2221
#T: Simple Excel Cell Address Parse
#A: Jason Cable
#D: Since MS Excel will be giving you the cell range addresses, this simple regex provides nice match captures.  It may not validate the only possibles that Excel takes, but it is "good enough" for a majority of circumstances.
^\$?([A-Za-z]{0,2})\$?([0-9]{0,5}):?\$?([A-Za-z]{0,2})\$?([0-9]{0,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2222
#T: Full Name
#A: C. Brendan Enrick
#D: Requires a person's name including at least 2 parts. (first and last) Allows optional extra names. It allows plenty of initials as well as symbols in names. Restricts symbol usage quite a bit, but allows even names with 2 symbols. Requires last name to have at least 2 characters and cannot be an initial. Works well for filtering names on validation.
^([a-zA-Z]+[\'\,\.\-]?[a-zA-Z ]*)+[ ]([a-zA-Z]+[\'\,\.\-]?[a-zA-Z ]+)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2223
#T: Email
#A: kp
#D: Checks Email
[a-zA-Z0-9_\\-]+@([a-zA-Z0-9_\\-]+\\.)+(com)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2224
#T: HH:MM:SS AM|PM
#A: Kiran
#D: This will validate only time.
^(|(0\d)|(1[0-2])):(([0-5]\d)):(([0-5]\d))\s([AP]M)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2225
#T: 日期验证
#A: shenruiwen
#D: Validate the year month and day.
((19|20)[0-9]{2})-(([1-9])|(0[1-9])|(1[0-2]))-((3[0-1])|([0-2][0-9])|([0-9]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2226
#T: String contains only Asterisk / begins with Asterisk
#A: G M S
#D: This checks whether the string is equals to "*" i.e., contains only "*(Asterisk)" or begins with Asterisk.
^[:*:]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2227
#T: Find character length strings in a larger string
#A: MyCSharpCorner
#D: Finds single characters strings in a comma separated string. For example:
#D: "3,doors,down,its,not,my,time,Its,Not,My,T,ime,CDM,hh,h"
#D: Will give 3 matches: 3,T,h
(?<=(\A|,))(?<val>(\w|\W){1})(?=(,|\Z))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2228
#T: Duration time
#A: Skoblin Ilya
#D: The time should be fractional number and divisible by 0.005
^[0-9]+\.?[0-9]?[0-9]?[0,5]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2229
#T: CSS commentary
#A: Kees van der Wiel
#D: With this regex you can find or replace any CSS commentary in your stylesheets in once. Build for use with dreamweaver. Probably works also fine in any other circumstances.
\*[^\/]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2230
#T: Get key value pairs separated by colon in a comma separated string
#A: jianghongfei
#D: Sometimes I want to store some key value mapped data in xml or text file, and then retrieve them into hashtable in program. Authough this can be done by split the string by comma and colon, and then trim the white space, I think regular expression should be easier. Note, the key must be single word or single white space separated words, and value can be any none colon or comma charactor serial.
(?<key>[^\s]+(\s\w)*)(?=([\s]*:[\s]*))\2(?<=\2)(?<value>\b[^,:]+\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2231
#T: Match unanchored urls in unstructured text
#A: Bob Clark
#D: Use this regex to match urls (including folder, file and querystring) in unstructured text that are not in anchor tags. Replace with <a href="$1">$1</a> to create anchor tags.
\b((?<!["'>])(?:https?://)?(?<![-@>])(?:[a-z0-9](?:[-a-z0-9]*[a-z0-9])\.)+(?:com|org|net|gov|mil|biz|info|name|aero|mobi|jobs|museum|[A-Z]{2})(?:/[-A-Z0-9\/_.]+)?(?:\?[-A-Z0-9&\._%=,]+)?(?!['"<]))\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2232
#T: Fractions / Fractional Odds
#A: Paul Verhulpen
#D: This simple expression is used to validate fractions or UK odds.
#D: It will match integers, allowing 10/1 to be entered as 10, and fractions.
#D: It will not match negative numbers or fractions, spaces or any alphabetical characters.
^\d+\/?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2233
#T: 0-99
#A: colourforu
#D: >=0 & <100????
^[0-9]$|[1-9]+[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2234
#T: Number with Decimal
#A: AECC
#D: This expression validate the add of numbers with or without decimal
^(\d{1,4}?[.]{0,1}?\d{0,3}?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2235
#T: Rapidshare.com Urls
#A: Robert Pitt
#D: matches all rapidshare.com links /files / 8 numbers / filename
rapidshare\.com\/files\/(\d+)\/([^\'^\"^\s^>^<^\\^\/]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2236
#T: Belgium Phone Number
#A: Marc
#D: matches fixed and mobile phones in ACD format
^0[1-9]\d{7,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2237
#A: Wesley Menezes
#D: Matches URI's!
#D: "filename.ext" is part of path. ER can't differ file name from directory name.
#D: only domain is required.
#D: scheme://usern:passw@domain:port/path/file.ext?querystring#fragment
^(?:(?<scheme>[a-z]+):\/\/)?(?:(?<usern>[a-z0-9_.]*)(?::(?<passw>[a-z0-9_.]*))?@)?(?<domain>(?:(?:[a-z][a-z0-9_-]+\.?)+|[0-9]{1,3}(?:\.[0-9]{1,3}){3}))(?::(?<port>[0-9]+))?(?<path>(?:\/[.%a-z0-9_]*)+)?(?:\?(?<query>(?:&?[][a-z0-9_]+(?:\=?[a-z0-9_;]*)?)+))?(?:#(?<fragment>[a-z0-9_]+))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2238
#T: PHP tags
#A: Philip Robinson
#D: edit: this does not seem to work on php's regex testing, but works on asp and javascript as far as i can tell.
#D: Checks if a string is enclosed in <?php and ?> tags, allows white spacing around the sides. It's not perfect but it suited my tutorial CMS fine because only I edit it and I know how it works, I am working on a fully functional version of this regular expression.
^([\s]*<\?php[\s]+)(.*?)([\s]+\?>[\s]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2239
#T: Local file path
#A: Philip Robinson
#D: A basic regex that matches a file path, windows or linux slash directions both match, apart from ..\
^((\.\./|[a-zA-Z0-9_/\-\\])*\.[a-zA-Z0-9]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2241
#T: Randal L. Schwartz
#A: Ted Cambron
#D: This regex looks for Randal.
^(Randal (?:L\.)? Schwartz|merlyn)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2242
#T: ukrainian phone numbers
#A: Komirenko
#D: ukrainian phone numbers in Kiev
^((8|\+38)-?)?(\(?044\)?)?-?\d{3}-?\d{2}-?\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2243
#T: Dutch Currency
#A: Karin Nooteboom
#D: Optional Amount, with optional thousands seperator (using the point) and optional decimal comma. If decimal comma is in string, then 2 trailing digits are required. Also checks for the optional euro sign
^([\u20AC]?[1-9]\d*\.\d{3}(?:,\d{2})?|[\u20AC]?[1-9]\d*(?:,\d{2})?|[\u20AC]?[1-9]\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2244
#T: uploaded.to Downloadlink
#A: dasnov
#D: Downloadlinks of the 1-Click-Hoster uploaded.to
http://(?:www\.|)uploaded\.to/\?id=[a-z0-9]{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2245
#T: PO Box
#A: greg croasdill
#D: Modified version of Chris Myers' regexp for po boxes.  This one won't match the word "box" in the address. Only matches if there is a number following the po box. Also accepts a # in front of the number and other spelling variations.
\b[P|p]?(OST|ost)?\.?\s*[O|o|0]?(ffice|FFICE)?\.?\s*[B|b][O|o|0]?[X|x]?\.?\s+[#]?(\d+)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2246
#T: AlphaNumeric
#A: Kevin McBrearty
#D: This is a good alpha numeric expression.
(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9\s]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2247
#T: Starts with http[s]
#A: Greg Janco
#D: Checks to make sure that entry starts with http:// or https://  and that contents are limited to alphas . - /
http[s]?://[a-zA-Z0-9.-/]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2248
#T: String 
#A: Heenakausar
#D: This string allows words seperated by single space, no space allowed in beging and allow - and comma(,)
^(\w(\s)?(\-(\s)?)?(|,(\s)?)?)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2249
#T: URL Parsing
#A: Raje
#D: Separates a URL into components viz. schema, domain, port, path and query. Avoids unnecessary numbered groups caused by braces.
(?:(?<scheme>[a-zA-Z]+)://)?(?<domain>(?:[0-9a-zA-Z\-_]+(?:[.][0-9a-zA-Z\-_]+)*))(?::(?<port>[0-9]+))?(?<path>(?:/[0-9a-zA-Z\-_.]+)+)(?:[?](?<query>.+))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2250
#T: date validation
#A: haresh 
#D: complate date validation
#D: in mm/dd/yyyy format
#D: and also it check leap year
^((0[13578]|[13578]|1[02])\/(0[1-9]|[12]\d|3[01])\/(19[0-9]\d|20[0-9]\d|21[0-9]\d))|((0[13456789]|[13456789]|1[012])\/(0[1-9]|[12]\d|30)\/(19[0-9]\d|20[0-9]\d|21[0-9]\d))|((0[2]|[2])\/([1-9]|0[1-9]|[12][0-8])\/(19[0-9]\d|20[0-9]\d|21[0-9]\d))|((0[2]|[2])\/(29)\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2259
#T: GPA Validator
#A: Rex Hurd
#D: Validates student Grade Point Average (GPA) value (based on U.S. Standard 0 thru 4.0 values)
^[0]|[0-3]\.(\d?\d?)|[4].[0]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2260
#T: Number input validation
#A: Berend
#D: This Regex is usefull to validate if the text typed will still lead to a valid number for a international input.
#D: Replace , with \. to get an american notation
[+-]*[0-9]+[,]*[0-9]*|[+-]*[0-9]*[,]+[0-9]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2261
#T: Parse linked url
#A: Tinminator
#D: Given HTMl or CSS source, find the value of all href and src attributes + anything between url().
((?<html>(href|src)\s*=\s*")|(?<css>url\())(?<url>.*?)(?(html)"|\))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2262
#T: Sentence parsing
#A: bask
#D: Parse the sentence to separated words and signs of preposition.
(?<word>([\w]*))(?<prep>([\,\.\!\?\-\:\;\""\(\)])?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2263
#T: Yahoo Search Result Parser
#A: mangesh paranjape
#D: This expression can be used to parse Yahoo search results.
(<div\sclass="res(\sindent)?">.*?)(<a\s.*?href="(?<URL>.*?)".*?>)(?<Title>.*?</div>)((?<Abstract><div\sclass="abstr">.*?</div>)(?<greenURL><span\sclass=url>.*?</span>).*?</div>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2265
#T: Integer with commas
#A: Richard L. Barnes
#D: Integer with or without commas.  Signed or unsigned.
^[-|\+]?[0-9]{1,3}(\,[0-9]{3})*$|^[-|\+]?[0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2267
#T: Numbers
#A: ronaldovn
#D: Match any number , no characters, no empty sets, and accept zero. 
^([0-9]{1}[\d]{0,2}(\,[\d]{3})*(\,[\d]{0,2})?|[0-9]{1}[\d]{0,}(\,[\d]{0,2})?|0(\,[\d]{0,2})?|(\,[\d]{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2268
#T: UK Postcode Validation
#A: Ti Marner
#D: This regex matches all valid, current UK Postcodes, including Girobank and non-geographic postcodes, irrespective of whether they contain a space.  It does not include overseas territories.
#D: Adapted from the BS7666 postcode rules at: http://www.cabinetoffice.gov.uk/govtalk/schemasstandards/e-gif/datastandards/address/postcode.aspx
^(GIR ?0AA|(?:[A-PR-UWYZ](?:\d|\d{2}|[A-HK-Y]\d|[A-HK-Y]\d\d|\d[A-HJKSTUW]|[A-HK-Y]\d[ABEHMNPRV-Y])) ?\d[ABD-HJLNP-UW-Z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2269
#T: Version information
#A: Frank Pottle
#D: A simple regex to check a version information string of the style 1.0.0.0
^(0\.|([1-9]([0-9]+)?)\.){3}(0|([1-9]([0-9]+)?)){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2270
#T: sms
#A: yash
#D: asas
^(NAME)(\s?)<?(\w*)(\s*)([0-9]*)>?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2273
#T: Validate MS DOS 8.3 Directory or File name (without extension)
#A: Charles Forsyth
#D: Use this regular expression to find any invalid characters within a DOS 8.3 Directory or Folder name.
#D: Reference: http://support.microsoft.com/?id=120138
[^ _0-9a-zA-Z\$\%\'\-\@\{\}\~\!\#\(\)\&\^]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2274
#T: Phone
#A: Juma Al-Saleh
#D: Phone
Extn 7859 , 24767859(D)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2275
#T: Match a software version major.minor.maintenance.build 
#A: Tijn Hoekstra
#D: Matches a program version with major, minor, maintenance and build number in digits. 
^(\d+?)\.(\d+?)\.(\d+?)\.(\d+?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2276
#T: ICD-10 Code (World Health Organization)
#A: Veniamin Goldin
#D: This expression matches ICD-10 code
^[A-Z]\d{2}(\.\d){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2277
#T: Name/Value pairs
#A: Dan Harlin
#D: Matches name/value pairs. In the example below, the 'name' of 'a' will have the 'value' of 'b'.  'c' will have the value 'd'.
\[(?<name>[^\]]*)\](?<value>[^\[]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2278
#T: Indian Date Validator
#A: Uma shanker Yadav
#D: Date in DD/MM/YYYY or D/M/YYYY format.
(((0*[1-9]|[12][0-9]|3[01])([-./])(0*[13578]|10|12)([-./])(\d{4}))|((0*[1-9]|[12][0-9]|30)([-./])(0*[469]|11)([-./])(\d{4}))|((0*[1-9]|1[0-9]|2[0-8])([-./])(02|2)([-./])(\d{4}))|((29)(\.|-|\/)(02|2)([-./])([02468][048]00))|((29)([-./])(02|2)([-./])([13579][26]00))|((29)([-./])(02|2)([-./])([0-9][0-9][0][48]))|((29)([-./])(02|2)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02|2)([-./])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2279
#T: Name
#A: Dilip Nikam
#D: Best For First Name or Middle Name or Last Name
#D: This Expression Allows only alphabets with apostrophe (').
[-'a-zA-Z]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2280
#T: Any word but xx and yy
#A: borryz
#D: Matches any word except these from alternation (xx|yy|...). Works in JavaScript
(?!\b(xx|yy)\b)\b[\w]+\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2281
#T: C++/C# identifier
#A: NoBug
#D: This expression validates for valid C# or C++ identifier
^[a-zA-Z_]{1}[a-zA-Z0-9_]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2282
#T: Folder Path Validation (local + netowork) for windows
#A: P Mahender Reddy
#D: I'm very new to reg exp
#D: I've given a try ...
#D: for C#
#D: @"^(((\\\\([^\\/:\*\?""\|<>\. ]+))|([a-zA-Z]:\\))(([^\\/:\*\?""\|<>\. ]*)([\\]*))*)$"
#D: It worked for me ...
#D: Make neccessary changes as required
^(((\\\\([^\\/:\*\?"\|<>\. ]+))|([a-zA-Z]:\\))(([^\\/:\*\?"\|<>\. ]*)([\\]*))*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2283
#T: Percent 0.00-100.00
#A: Greg Knierim
#D: Allows percent values from 0 to 100 without the % sign.  Can be used with up to 2 decimal places or without any.  Also works in ASP.NET regular expression validator control.
^100$|^100.00$|^\d{0,2}(\.\d{1,2})? *%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2284
#T: Validate very strong password
#A: Charles Forsyth
#D: This regular expression can be used to validate a strong password. It will evaluate to true if the following critera are met:
#D: Must be 8 characters in length total.
#D: Must contain at least 1 digit.
#D: Must contain at least 1 lower case letter.
#D: Must contain at least 1 upper case letter.
#D: Must contain at least 1 non-character (such as !,#,%,@, etc).
#D: Must not contain the words "password" or "pass" or "word" or "god"
#D: Must not contain a whitespace.
#D: Note: This version is not compatible with JavaScript
^(?=^.{8,}$)(?=.*\d)(?=.*\W+)(?=.*[a-z])(?=.*[A-Z])(?i-msnx:(?!.*pass|.*password|.*word|.*god|.*\s))(?!^.*\n).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2285
#T: Windows Drive Letter & UNC Path
#A: Tristan DF Wilson
#D: This expression was written for C#, and as such you should just be able to drop it in.
#D: It matches Windows paths, be they the drive letter version or the UNC version. It was not written to specifically match filenames, but it will in most cases anyway.
#D: Be aware that Windows has a maximum path+filename length (260 chars on XP) and this regular expression does not check for this.
#D: This has been tested against large datasets.
^((\\\\[a-zA-Z0-9-]+\\[a-zA-Z0-9`~!@#$%^&(){}'._-]+([ ]+[a-zA-Z0-9`~!@#$%^&(){}'._-]+)*)|([a-zA-Z]:))(\\[^ \\/:*?""<>|]+([ ]+[^ \\/:*?""<>|]+)*)*\\?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2286
#T: Windows Filename
#A: Tristan DF Wilson
#D: This was written for C# and so you should just be able to drop it into your C# program.
#D: Although you can create files with leading and trailing spaces through non-GUI means, the Windows GUI itself eats those spaces if you try to rename the file. For this reason I made the decision to consider file names with leading and trailing spaces invalid.
#D: This has been tested against large data sets.
^[^ \\/:*?""<>|]+([ ]+[^ \\/:*?""<>|]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2287
#T: Mysql Date Validator - Brazilian format
#A: Jonatas 
#D: Brazilian format for date validating in MySql UDF.
#D: Formato brasileiro para validação de data em MySql UDF.
#D: *** Formatos aceitáveis:
#D: dd/mm/yyyy
#D: dd-mm-yyyy
#D: dd-mm-yy
#D: d-m-yy
^([1-9]|0[1-9]|[12][0-9]|3[01])(-|/)(([1-9]|0[1-9])|(1[0-2]))(-|/)(([0-9][0-9])|([0-9][0-9][0-9][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2288
#T: Bible Verse Search/Validator
#A: Art Araya
#D: This RE locates and/or validates standard Bible verse notation.
(?:(?:[123]|I{1,3})\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon).?\s*(?:1?[0-9]?[0-9]):\s*\d{1,3}(?:[,-]\s*\d{1,3})*(?:;\s*(?:(?:[123]|I{1,3})\s*)?(?:[A-Z][a-zA-Z]+|Song of Songs|Song of Solomon)?.?\s*(?:1?[0-9]?[0-9]):\s*\d{1,3}(?:[,-]\s*\d{1,3})*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2289
#T: Strip HTML tags with exceptions
#A: Charles Forsyth
#D: This regex will match all HTML tags except 'a' tags or 'img' tags. You can edit the list of exclusions as you see fit. I use this regex to strip all HTML tags from source data except anchor tags and image tags.
<\/*?(?![^>]*?\b(?:a|img)\b)[^>]*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2290
#T: Strip HTML tags and content between
#A: Charles Forsyth
#D: This regular expression will match only <script> and <style> tags and all content between them. Use this with regex.replace to strip script blocks and style blocks from HTML source.
<(script|style)[^>]*?>(?:.|\n)*?</\s*\1\s*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2291
#T: Days of the Year
#A: Chris Crawford
#D: This expression allows you to select 1-365 as a numeric value for the days of the year.  Must be between 1 and 365 and must be numeric
^[1-9]{1}$|^[1-9]{1}[0-9]{1}$|^[1-3]{1}[0-6]{1}[0-5]{1}$|^365$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2292
#T: c++ function finder
#A: B Horrocks
#D: This (while not perfect) locates c++ function declarations.  Useful for working with large source files
^.*[_A-Za-z0-9]+[\t ]+[\*&]?[\t ]*[_A-Za-z0-9](::)?[_A-Za-z0-9:]+[\t ]*\(( *[ \[\]\*&A-Za-z0-9_]+ *,? *)*\).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2293
#T: Social Security Number
#A: Epaphrodite Dusingizimana
#D: This will accept SSN in the form of 123-45-6789 OR 123456789.
^(\d{3}-\d{2}-\d{4})|(\d{3}\d{2}\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2295
#T: Parse quoted phrases and single words for searching
#A: Charles Forsyth
#D: RegEx will match phrases in double-quotes or words separated by spaces. It excludes the double-quotes from matches
(?<=(?:^|\s|,)")[^"]*?(?=")|(?<=\s|^)(?!")[\w\W]+?(?=\s|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2296
#T: Non localised currency format
#A: Paul Verhulpen
#D: Expression to validate currency formatted numbers without the currency symbol
^(\d?)*(\.\d{1}|\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2297
#T: U.S. social security number
#A: Michael Dallaire
#D: pattern match for U.S. social security number
(\d{3}\-\d{2}\-\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2298
#T: Valid Usernames
#A: Farhan Sajjad
#D: Will verify if the text is is in a valid user name format like: is alphanumeric, starts with an alphabet and contains no special characters other than underscore or dash.
^([a-zA-Z])[a-zA-Z_-]*[\w_-]*[\S]$|^([a-zA-Z])[0-9_-]*[\S]$|^[a-zA-Z]*[\S]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2299
#T: Single or Multiple Phone Numbers
#A: Farhan Sajjad
#D: Verifies if it is a 12 digit phone number or a list of comma separated 12 digit phone numbers.
^([0-9]{12},)+[0-9]{12}$|^([0-9]{12})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2300
#T: Address/Phone
#A: tamer mahfouz
#D: Gulf Area and Middle East Phone Number, must include the country code which consists of 2 or 3 digits and prefixed with '+' or '00', Area code consists of 1 or 2 digits and finally phone number consists of 7 or 8 digits, you can separate between different section using space or '-'
^(\+{1}|00)\s{0,1}([0-9]{3}|[0-9]{2})\s{0,1}\-{0,1}\s{0,1}([0-9]{2}|[1-9]{1})\s{0,1}\-{0,1}\s{0,1}([0-9]{8}|[0-9]{7})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2301
#T: XML Tag Value
#A: Ryan Shripat
#D: This regex gets the value within an XML Tag. For example, given the following tag: <Result>result is here</Result> it returns the string "result is here". Replace TAGNAME with your tag name.
(?<=<TAGNAME.*>).*(?=</TAGNAME>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2302
#T: Parentheses Quote 
#A: Neil Lindberg
#D: Very basic, but couldn't find it, so from one Regex noob to another...
#D: Needed to replace quotes around giant SQL INSERT unique numeric field; that was in quotes... In DW, FYI, I replaced with: ($2  $2 being the second sub exp.
(\(")([0-9]*)(\")

#U: http://regexlib.com/REDetails.aspx?regexp_id=2303
#T: End Parentheses Price Quote Stripper
#A: Neil Lindberg
#D: This was made to change non-decimal prices at the end of a huge SQL Insert... To use to replace in DW (without quotes) use sub expression like: $2,$4)
(")([0-9]*)(",")([0-9]*)("\))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2304
#T: BAPLIE to COPARN segment
#A: Kumar Goundan
#D: Match Segments 2 and 3 of BAPLIE file.  May be repeating.
(LOC[^']*')(GID[^']*')?(GDS[^']*')?(FTX[^']*'){0,9}(MEA[^']*'){1,9}(DIM[^']*'){0,9}(TMP[^']*')?(RNG[^']*')?(LOC[^']*'){0,9}(RFF[^']*')((EQD[^']*')(EQA[^']*'){0,9}(NAD[^']*')?){0,3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2305
#T: Validate string prefix
#A: greg askew
#D: Validate: First five characters are letters; characters six-17 are letters, numbers, or hyphen; string length is eight characters minimum, 17 characters maximum
^([a-zA-Z]{5})([a-zA-Z0-9-]{3,12})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2306
#T: Credit Card Expiration Date Validator
#A: Dan Cardoso
#D: Validates major credit card expiration dates in MM/YY, MM.YY, MM-YY, or MMYY. Year range is 08-19.
^((0[1-9])|(1[0-2]))[\/\.\-]*((0[8-9])|(1[1-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2307
#T: date expression
#A: fake
#D: matches dates in the format day/month/year.
#D: supports / and - charachters.
#D: easily modified to suit your needs.
#D: handles leap years.
^(((((0?[1-9]|[12]\d|3[01])[-/]([0]?[13578]|1[02]))|((0?[1-9]|[12]\d|30)[-/]([0]?[469]|11))|(([01]?\d|2[0-8])[-/]0?2))[-/]((20|19)?\d{2}|\d{1,2}))|(29[-/]0?2[-/]((19)|(20))?([13579][26]|[24680][048])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2308
#T: CSV parser (with Quotes) (.NET)
#A: Iulian Fecioru
#D: Returns the value from a CSV line.
\A[^,"]*(?=,)|(?:[^",]*"[^"]*"[^",]*)+|[^",]*"[^"]*\Z|(?<=,)[^,]*(?=,)|(?<=,)[^,]*\Z|\A[^,]*\Z

#U: http://regexlib.com/REDetails.aspx?regexp_id=2309
#T: Date with Leap year verification
#A: Ali Kaleth Quraizy
#D: This Expression verifies all the valid date in the US Date Format.It also checks the leap year.we can use this expression with or with out the prefix of zero in the date column and month column Eg[01/02/2008 or 1/2/2008].It accepts date which are greater than the year 1900.I can assure that this will be useful for all the developers who are searching for Date entry
^(((0?[1-9]|1[012])/(0?[1-9]|1\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(19|[2-9]\d)\d{2}|0?2/29/((19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2310
#T: Chilean home phone number
#A: César Raúl Cid Méndez
#D: Esta es la expresion regular adaptada por mi para validar telefonos fijos chilenos de cualquier compañia, espero sirva a alguien
^((\(\d{3}\) ?)|(\d{3}-)|(\(\d{2}\) ?)|(\d{2}-)|(\(\d{1}\) ?)|(\d{1}-))?\d{3}-(\d{3}|\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2311
#T: Date With / and Month Name
#A: Umesh Chand Daiya
#D: This regular expressions matches dates of the form XX/XXX/YYYY where XX can be 1 or 2 digits long, XXX can be JAN/Jan/jan(Month name in 3 char) and YYYY is always 4 digits long.
^(3[0-1]|2[0-9]|1[0-9]|0[1-9])[\/](Jan|JAN|Feb|FEB|Mar|MAR|Apr|APR|May|MAY|Jun|JUN|Jul|JUL|Aug|AUG|Sep|SEP|Oct|OCT|Nov|NOV|Dec|DEC)[\/]\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2312
#T: Multiple e-Mail Validator
#A: Jaimohan
#D: This Expression will help you in Validating Multiple e-Mail IDs in a single line seperated by ";"
^(\w+([_.]{1}\w+)*@\w+([_.]{1}\w+)*\.[A-Za-z]{2,3}[;]?)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2313
#T: Validate numbers with commas
#A: Luis Fleitas
#D: Validates numbers with commas.
^(\d{1,3},)?(\d{3},)+\d{3}(\.\d*)?$|^(\d*)(\.\d*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2314
#T: Match invalid operators in a math expression
#A: Eric
#D: Finds improperly used operators in a math expression.
(?<=(\+|-|\*|\\|%|\^){1})(?<invalid_unary>(\*|\\|%\^){1})|(?<invalid_unary>^(\*|\\|%\^){1})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2315
#T: Matches System.Math Functions for the .NET framework
#A: Eric
#D: Matches the function name (case-sensitive) followed by the opening parenthesis. Does not capture the opening parenthesis.
(Sqrt|Acos|Asin|Atan|Atan2|Ceiling|Cos|Cosh|Floor|Sin|Tan|Sinh|Tanh|Round|Log|Log10|Exp|Pow|Abs|Truncate|IEEERemainder|Max|Min|Sign|BigMul)(?:\()

#U: http://regexlib.com/REDetails.aspx?regexp_id=2316
#T: Finds literals (values) in a math expression
#A: Eric
#D: Matches digits (including decimals) starting at beginning of expression or after the beginning but not directly following a letter.
(^[\d\.]+)|(?:\W)([\d\.]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2317
#T: Math Operator Usage
#A: Eric
#D: Invalid_beginning_operator: start of expression cannot be any operator except '+' or '-', Invalid_operator_combo: operators checked in sequence, only valid operator-unary sequence will not match (+-,--,++,-+); Invalid_operator_sequence: matches when more than 2 operators in sequence; invalid_ending_operator: matches when any operator exists as last character.
(?<invalid_beginning_operator>^[\*\\\%\^]+)|(?<invalid_operator_combo>\-\*|\+\*|\*\*|\-\^|\+\^|\^\^|\-\%|\+\%|\%\%|\.\.)|(?<invalid_operator_sequence>[\%\^\*\+\-\/\\]{3})|(?<invalid_ending_operator>[\%\^\*\+\-\/\\]+$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2318
#T: Email Validations
#A: Gauri Karlekar
#D: Validates almost all email addresses. Tested and running fine on a major web portal
^([a-zA-Z0-9][a-zA-Z0-9_]*(\.{0,1})?[a-zA-Z0-9\-_]+)*(\.{0,1})@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|([a-zA-Z0-9\-]+(\.([a-zA-Z]{2,10}))(\.([a-zA-Z]{2,10}))?(\.([a-zA-Z]{2,10}))?))[\s]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2319
#T: Only Characters
#A: Gauri Karlekar
#D: Accepts only characters in small and caps.
^[a-zA-Z\s]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2320
#T: farsi lang 
#A: saeed arab sheybani
#D: Matches persian(farsi) charctes from latin
#F: u
([^\x00-\xFF]\s*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2321
#T: html to uppercase
#A: saeed arab sheybani
#D: Returns string with all alphabetic characters converted to uppercase.
#D: in php programing you can use
#D: preg_replace("/(<\/?)(\w+)([^>]*>)/e",
#D: "'$1'.strtoupper('$2').'$3'",
#D: $html_body) 
#F: e
(<\/?)(\w+)([^>]*>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2322
#T: html to lowercase
#A: saeed arab sheybani
#D: Returns string with all alphabetic characters converted to lowercase.
#D: in php programing you can use
#D: preg_replace("/(<\/?)(\w+)([^>]*>)/e",
#D: "'$1'.strtolower('$2').'$3'",
#D: $html_body) 
#F: e
(<\/?)(\w+)([^>]*>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2323
#T: UK Telephone
#A: Paul Verhulpen
#D: Matches UK landline and mobile telephone numbers with the optional '+44' country code
^(\+44\s?|0)(7?|1?|2?)\d{3}\s?\d{3}\s?\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2324
#T: 0 - 100 Percentage 
#A: Tom Grieve
#D: Match any percentage entered between 0.00 and 100.00%, includes up to 2 decimal places. Percent sign is optional
^100(\.0{0,2})? *%?$|^\d{1,2}(\.\d{1,2})? *%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2325
#T: Percentages between -100 and +100 %
#A: Tom Grieve
#D: Match any percent from -100.00% to +100.00% up to 2 decimla places. Percent sign is optional
^[+-]? *100(\.0{0,2})? *%?$|^[+-]? *\d{1,2}(\.\d{1,2})? *%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2326
#T: Currency
#A: Tom Grieve
#D: Full currency testing, allows up to 2 decimal places.  Checks for corect formatting with commas etc, and allows negative amounts
^[+-]? *(\$)? *((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2327
#T: Anchor Href Link URL
#A: Eric Bouwsema
#D: Matches href links / URLS within html and separates out the Scheme, Email, Domain, Path, Query, Anchor and the full URL.  Based on Andrew Lee's version with some further tweaking.
href=(?<QUOTE>[\""\'])?(?<URL>(?<SCHEME>(file|ftp|http|https|news|nntp):\/\/|mailto\:)?(?<EMAIL>[\w-]+@)?(?<HOST>(?(SCHEME)[\w]+(\.[\w-]+)*?))(?<PATH>\/?\w*[\w-%\:\.\+\/]+)?(?<QUERY>\?[\w-%\+:\.]*(=[\w-%\+:\.]*)?(&[\w-%\+\:\.]*(=[\w-%\+:\.]*)?)*)?(?<ANCHOR>\#[\w-%\+:\.]+)?)(?<-QUOTE>[\""\'])?(?#VALIDATE QUOTES/URL)(?(PATH)|(?(SCHEME)|(?!)))(?(QUOTE)(?!))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2328
#T: HTML Anchor
#A: Eric Bouwsema
#D: Will match an HTML anchor and will include attributes.  It will output various named groups.
<a (?:(?<ATTRIBUTES>[\w-]+=[\""\']?[\w\S ]+?[\""\'])[ ]+)*href=(?<QUOTE>[\""\'])?(?<URL>(?<SCHEME>(file|ftp|http|https|news|nntp):\/\/|mailto\:)?(?<EMAIL>[\w-]+@)?(?<HOST>(?(SCHEME)[\w]+(\.[\w-]+)*?))(?<PATH>\/?\w*[\w-%\:\.\+\/]+)?(?<QUERY>\?[\w-%\+:\.]*(=[\w-%\+:\.]*)?(&[\w-%\+\:\.]*(=[\w-%\+:\.]*)?)*)?(?<ANCHOR>\#[\w-%\+:\.]+)?)?(?<-QUOTE>[\""\'])?(?:[ ]+(?<ATTRIBUTES>[\w-]+=[\""\']?[\w\S ]+?[\""\']))*>(?<TEXT>.+?)<\/a>(?#VALIDATE QUOTES/URL)(?(PATH)|(?(SCHEME)|(?!)))(?(QUOTE)(?!))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2329
#T: URI Validation
#A: Ardjuna Pandu
#D: function isValidURL($url) {
#D: $protocol = "((http|ftp|https):\/\/)?";
#D: $domain = "([[:alpha:]][-[:alnum:]]*[[:alnum:]])(\.[[:alpha:]][-[:alnum:]]*[[:alpha:]])+";
#D: $dir = "(/[[:alpha:]][-[:alnum:]]*[[:alnum:]])*";
#D: $page = "(/[[:alpha:]][-[:alnum:]]*\.[[:alpha:]]{3,5})?";
#D: $getstring = "(\?([[:alnum:]][-_%[:alnum:]]*=[-_%[:alnum:]]+)(&([[:alnum:]][-_%[:alnum:]]*=[-_%[:alnum:]]+))*)?";
#D: $pattern = "^".$protocol.$domain.$dir.$page.$getstring."$";
#D: return eregi($pattern, $url);
#D: }
#D: //-----------------
#D: Be sure to put each variable ($protocol, $domain, $dir, $page, $getstring, $pattern, and 'return') on separate line!
if(!isValidURL($_POST['url']){ echo "do something"; }

#U: http://regexlib.com/REDetails.aspx?regexp_id=2330
#T: Venezuelan Cedula de Identidad
#A: Roger Marin
#D: Regexp to validate Venezuelan Id number Or Cedula de identidad.
^[[V|E|J|G]\d\d\d\d\d\d\d\d]{0,9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2332
#T: Exclude a string
#A: Scott Freemire
#D: Matches everything except lines that begin with SEP.
#D: Now I just need to figure out how to exclude a string that appears in the middle of a line.
^([^S]|S[^E]|SE[^P]).*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2333
#T: 24 hour time
#A: Paul Verhulpen
#D: Based on Morten Henriksen's expression, I just added the check for a . as well as a :
^([0-1]?[0-9]|[2][0-3])[:|.]([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2334
#T: To validate the File Type for a FileUploader
#A: Chandan Kumar
#D: You can use this to check the valid file type you have given to the last in the expression
#D: like
#D: ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+(.pdf)$
#D: This will accept .pdf only
#D: OR
#D: ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+((.pdf)|(.doc))$
#D: This will accept .pdf and .doc
#D: OR
#D: ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+((.pdf)|(.doc)|(.txt))$
#D: This will accept .pdf , .doc and .txt
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w].*))+(.pdf)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2335
#T: 24 hour time
#A: T. Busser
#D: This expression will validate if a string represents a time in 24 hour format.
#D: The expression will evaluate the string from start to finish. It will not accept 24:00, use 00:00 instead.
^([0-1]?[0-9]{1}|2[0-3]{1}):([0-5]{1}[0-9]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2336
#T: COPRAR to COPARN mapping
#A: Kumar Goundan
#D: EDI mapping from COPRAR to COPARN
((EQD[^']*')(RFF[^']*'){0,9}(EQN[^']*')?(TMD[^']*'){0,9}(DTM[^']*'){0,9}(LOC[^']*'){0,9}(MEA[^']*'){0,9}(DIM[^']*'){0,9}(TMP[^']*'){0,9}(RNG[^']*'){0,9}(SEL[^']*'){0,9}(FTX[^']*'){0,9}(DGS[^']*'){0,9}(EQA[^']*'){0,9}(NAD[^']*')?)((TDT[^']*')(RFF[^']*'){0,9}(LOC[^']*'){0,9}(DTM[^']*'){0,9})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2337
#T: 2 literal spaces followed by a digit
#A: Joseph Serrone
#D: 2 literal spaces followed by a digit followed by anything to the end of the line
^  \d.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2338
#T: TLD from URL
#A: Alistair MacDonald
#D: Returns the TLD from a URL.
([.])([a-z,1-9]{3,4})(\/)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2339
#T: Currency amount with or without $ and with commas
#A: dawn schakett
#D: Needed to verify a currency amount entered has commas and two decimal spaces to the right. This has a range between 1.99 to the tens of millions. If you want to make the decimal side optional, add a question mark before the final $ in each expression.
^\$?\d{1,2}\,\d{3}?\,\d{3}?(\.(\d{2}))$|^\$?\d{1,3}?\,\d{3}?(\.(\d{2}))$|^\$?\d{1,3}?(\.(\d{2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2340
#T: Dates of the form YYYY/MM/DD
#A: César Aguilar
#D: This regular expression matches dates of the form YYYY/MM/DD from 1900/01/01 to 2999/12/31
^((19\d{1}\d{1})|(2\d{3}))\/((1[0-2]{1})|(0[1-9]{1}))\/((0[1-9]{1})|([1-2]\d{1})|(3[0,1]{1}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2341
#T: check
#A: Manuel
#D: string 
^[\\s\\<\\>]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2342
#T: DECIMAL CHECK (Max 2 digit after Decimal )
#A: Chandan Kumar
#D: This will validatet the Number for Max Tow decimal place after a number.. it will validate like 12, 12.1, 12.23; but it will invalidate 12.326
^\d+(?:\.\d{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2343
#T: US State Abbreviation
#A: Remo Williams
#D: Matches capitalized US state abbreviations.
[A-Z][A-Z]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2344
#T: Url pattern matching
#A: Amit kumar sinha
#D: match http urls in format
#D: http://kamitsinha.com/regex/191929393-latestnews.htm
(http):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+(\\.[\\w\\-_]+)(\\/)([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?^=%&/~\\+#]+)(\\/)((\\d{8}-)|(\\d{9}-)|(\\d{10}-)|(\\d{11}-))+([\\w\\-\\.,@?^=%&:/~\\+#]*[\\w\\-\\@?+html^])?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2345
#T: Pattern matching for next page
#A: Amit kumar sinha
#D: While screen scraping to validate if Next page exists
(\d)+\<\/a\>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2346
#T: FrontPage RPC response
#A: Sergey Vorushilo
#D: This expression can be used against HTML response from some methods of FrontPage RPC protocol (this protocol is used in SharePoint)
<ul>\n<li>(?<type>document_name|url)=(?<doc>.*?)<li>.*?<ul>\n(?:<li>(?<propName>.*?)\n<li>(?<propValue>.*?))+</ul>\n</ul>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2347
#T: Ultimate PO BOX finder
#A: Senjaya Harianto
#D: Modified version- to capture the PO BOX based on user input on the website - It will not include any Rural Route
#D: or any University Box
[p|P][\s]*[o|O][\s]*[b|B][\s]*[o|O][\s]*[x|X][\s]*[a-zA-Z0-9]*|\b[P|p]+(OST|ost|o|O)?\.?\s*[O|o|0]+(ffice|FFICE)?\.?\s*[B|b][O|o|0]?[X|x]+\.?\s+[#]?(\d+)*(\D+)*\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2348
#T: test
#A: kwon, inhae
#D: test
\d{1,3}.\d{1,4}\d{1,8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2349
#T: Href matching
#A: Amit kumar sinha
#D: pattern matching for "href=\ddd\ss080978"
href\s*=\s*\"((\/)([i])(\/)+([\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#]+)*)\"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2350
#T: US Zipcode Validation
#A: Amith 
#D: Zipcode should be of 5 numerics
^[0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2351
#T: alphanumeric with blank spaces
#A: RAKESH NAYAK
#D: dakjlas
^\\w*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2352
#T: Simple US Phone Numbers
#A: Jeff Chambers
#D: A very simple regex to parse 10-digit US phone numbers.  Captures the leading 1 in $1, the area code in $2, the 3-digit prefix in $3, and the four-digit postfix in $4.
#D: This expression DOES allow for reserved area codes (001,etc) which are not typically in use.
(1)?-?\(?\s*([0-9]{3})\s*\)?\s*-?([0-9]{3})\s*-?\s*([0-9]{4})\s*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2353
#T: Valid Email
#A: Darran Low
#D: Validates your average email, it will not allow two periods to be placed adjacent to one another.
#D: Do note that there is no perfect expression.
^[a-z0-9_.-]*@[a-z0-9-]+(.[a-z]{2,4})+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2354
#T: Polish mobile phone numbers
#A: Andrzej Mroczek
#D: Supported: +48 prefix (optional); separating elements with hyphen or spaces
^(\+48\s+)?\d{3}(\s*|\-)\d{3}(\s*|\-)\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2355
#T: Sentence Split
#A: Rémi
#D: Used with Regex.Split, this pattern split every sentences in a paragraph or a text (it recognizes quotation marks " and » and multiple .!?) It matches the spaces between every sentence.
(?<=[\w\s](?:[\.\!\? ]+[\x20]*[\x22\xBB]*))(?:\s+(?![\x22\xBB](?!\w)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2356
#T: UK Postcode District
#A: Matthew Harris
#D: Matches the first part of a UK Postcode (known as a postcode district).
#D: Case insensitive.
#D: Doesnt match:
#D: GIR # the postcode for the formerly Post Office-owned Girobank is GIR 0AA.
#D: SAN # the postcode for correctly addressed letters to Father Christmas is SAN TA1
([A-PR-UWYZa-pr-uwyz]([0-9]{1,2}|([A-HK-Ya-hk-y][0-9]|[A-HK-Ya-hk-y][0-9]([0-9]|[ABEHMNPRV-Yabehmnprv-y]))|[0-9][A-HJKS-UWa-hjks-uw]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2357
#T: HTML tag
#A: chenkemo
#D: match the content and tag of HTML
<(.*?)[\s>].*?<\/\1>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2358
#T: Define Maximum length to a TextBox
#A: Chandan Kumar
#D: This expression can be use to define the maximum length to a textBox.
#D: U can change the maximum character by replacing the last numeric value that is 10 in my example.
#D: Just change this number to your desired number like
#D: ^(.|\r|\n){1,10}$   : for max 10 character
#D: ^(.|\r|\n){1,20}$   : for max 20 character
^(.|\r|\n){1,10}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2361
#T: Dutch postal codes
#A: René de Leeuw
#D: Dutch postal codes are ranged from "1000 AA" to "9999 ZZ".
\b[1-9]\d{3}\ +[A-Z]{2}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2362
#T: User name
#A: Aleksandar Zivaljevic
#D: My first REGEX pattern. Matches all alphanumerics + underscore (_) + dot (.)
(^([\w]+[^\W])([^\W]\.?)([\w]+[^\W]$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2363
#T: European Format Currencies
#A: Panayiotis Savva
#D: Allow Currencies of European origin in the format of
#D: xx.xxx.xxx,xx
^(-?)(,?)(\d{1,3}(\.\d{3})*|(\d+))(\,\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2364
#T: Named Capture for SQL Server connection strings
#A: Damien Ryan
#D: Capture the information from a SQL Server connection string
Password=(?<Password>.*);.*=(?<Info>.*);.*=(?<User>.*);.*=(?<Catalog>.*);.*=(?<Data>.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2365
#A: Chella Arun Raja
#D: There may be requirements where we need to validate year ranges from certain period. Above mentioned pattern will validate years between 1900 - 2099
^(19|20)[\d]{2,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2366
#T: Numeric Match
#A: Chella Arun Raja
#D: Validates the entered value in the following scenario.
#D: 1) Should have atleast eight digits.
#D: 2) Value should not have only zeor's.
#D: Note: You have to limit the number of characters in the Front end part.
[0-9]{7}[1-9]|[1-9]{8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2367
#T: Simple E-mail Regex
#A: Kevin Herrera
#D: Matches simple e-mail addresses such as me@domain.com, me@domain.co.uk, but does not place any restrictions on TLDs other than they must be lower case and alphabetic.  a-z, A-Z, 0-9, ., _, and - are all allowed on the left side of @.
^[a-zA-Z0-9._\-]+@[a-z0-9\-]+(\.[a-z]+){1,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2368
#T: Pattern Title 
#A: Muhammad Awais Qaisrani
#D: Regular expression to limit types of files accepted. This example matches .aspx files only.
#D: This is the extended virsion of Ramon Hildreth  for asp.net files. 
^([a-zA-Z].*|[1-9].*|[:./].*)\.(((a|A)(s|S)(p|P)(x|X)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2369
#T: Min Three Letters Address
#A: Basharat
#D: US Addresses validation having atleast 3 characters ignoring any spaces. Can have hash "#" comma "," dash "-" dot "." but cannot start with these.
^[a-zA-Z0-9]+[\s]*[a-zA-Z0-9.\-\,\#]+[\s]*[a-zA-Z0-9.\-\,\#]+[a-zA-Z0-9\s.\-\,\#]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2370
#T: U.S. Phone Number
#A: Trampas Kirk
#D: More complete than other patterns I could find here. Matches U.S. Phone numbers with various formats.  Invalid area codes (that start with a 0 or 1) are excluded, as well as invalid exchanges (that start with 0).  Allows, alphabetical exchange+local parts, and many extension notations. Dash and dot delimiters allowed except adjacent to a parenthetical area code. Letters may be used in place of any numbers except the country code and area code.
1?(?:[.\s-]?[2-9]\d{2}[.\s-]?|\s?\([2-9]\d{2}\)\s?)(?:[1-9]\d{2}[.\s-]?\d{4}\s?(?:\s?([xX]|[eE][xX]|[eE][xX]\.|[eE][xX][tT]|[eE][xX][tT]\.)\s?\d{3,4})?|[a-zA-Z]{7})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2371
#T: Check Iranian's Mobile Numbers
#A: Ali Delshad
#D: This Regular Expression Chack Matching Persian Mobile Numbers
#D: It is Checking MCI,MTN Irancell and Talya Operators
#D: For Example In C#.NET:
#D: Regex.IsMatch(MobileNumber, "(^(09|9)[1][1-9]\\d{7}$)|(^(09|9)[3][12456]\\d{7}$)");
(^(09|9)[1][1-9]\\d{7}$)|(^(09|9)[3][12456]\\d{7}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2372
#T: Get Plain Text From Html (Remove Html Tags)
#A: Ali Delshad
#D: This Regex Will Remove All Html Tags And Return Simple Plain Text .
#D: For Example In C#.NET :
#D: Regex.Replace(Html, "<[^>]*>", string.Empty);
<[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2373
#T: Check Farsi Unicode Character
#A: Ali Delshad
#D: This Regex chceck an input string for persian unicode character
#D: Note that it not work in javascript
#D: For Example In C#.NET:
#D: Regex.IsMatch(Text, "[\u0600-\u06FF]");
[\u0600-\u06FF]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2376
#T: Indian PAN
#A: Pankaj Mehta
#D: Allow entering Indian Permenant Account Number allocated by Income Tax Authority
^[A-Z]{5}[0-9]{4}[A-Z]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2377
#T: Canadian Provinces
#A: Adam Cheeseman
#D: Returns ungrouped match on Canadian Province Code, new and old or full province name
\b(?:AB|ALB|Alta|alberta|BC|CB|British Columbia|LB|Labrador|MB|Man|Manitoba|N[BLTSU]|Nfld|NF|Newfoundland|NWT|Northwest Territories|Nova Scotia|New Brunswick|Nunavut|ON|ONT|Ontario|PE|PEI|IPE|Prince Edward Island|QC|PC|QUE|QU|Quebec|SK|Sask|Saskatchewan|YT|Yukon|Yukon Territories)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2379
#T: Awesome US phone number matching
#A: Ray Solomon
#D: This regex matches US phone number formats that I found to be commonly used.
#D: This regex is best used on scanning text. If html is present, strip out the html first.
(?:\+?1[ .*-]?)?(?:\(? ?)?\d{3}(?: ?\)?)? ?(?:\*|(?:\.|-){1,2})? ?\d{3} ?(?:\*|(?:\.|-){1,2})? ?\d{4} 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2381
#T: MIME Media Type
#A: Thomas Berg
#D: Checks for properly formatted Mime-Types. Checks that the Content-Type (before the '/') is one registered with IANA. No spaces allowed.
^(application|audio|example|image|message|model|multipart|text|video)\/[a-zA-Z0-9]+([+.-][a-zA-z0-9]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2382
#T: Patern Title
#A: Yavuz Oztemel
#D: Password matching expression. Password must be at least 8 characters,no more then 25 characters, must include at least 1 lower case letter and 1 numeric digit. Upper case, space and punctuation marks are not allowed. 
^(?=.*\d)(?=.*[a-z])([a-z0-9]{8,25})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2383
#T: Comma Separated String
#A: Navjot Singh
#D: its validating the string as shown in example(matches).
^\s*[a-zA-Z\s]+\,[0-9\s]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2384
#A: Yavuz Oztemel
#D: Designed to verify a MAC address with no spaces allowed, hex values separated by linux style separator ":" or by windows style separator "-". Also empty string entry is allowed.
^(((\d|([a-f]|[A-F])){2}:){5}(\d|([a-f]|[A-F])){2})$|^(((\d|([a-f]|[A-F])){2}-){5}(\d|([a-f]|[A-F])){2})$|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2385
#T: secure password
#A: robert r
#D: this password is 10-20 characters
#D: minimum 2 caps, 2 lower, 2 special characters, and 2 numbers
(?-i)(?=^.{10,20}$)((?!.*\s)(?=.*[A-Z])(?=.*[a-z]))((?=(.*\d){2,})(?=(.*\W){2,})(?=(.*[A-Z]){2,})(?=(.*[a-z]){2,}))^.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2386
#T: allow small character alphabets
#A: mohamed sabirulla
#D: to allow the only small letters.
name.matches("a-z")

#U: http://regexlib.com/REDetails.aspx?regexp_id=2387
#T: phone number
#A: robert r
#D: This will allow any format of a 10 digit phone number
#D: It does not check to make sure the number is valid in any way!
#D: It also allows for n/a and N/A.
^((\(?\d{3}\)?(\s|-)?\d{3}(\s|-)?\d{4})|(N/A)|(n/a))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2388
#T: Czech telephone number
#A: Nixxy
#D: Regexp for czech telephone number format. Fix to bank account number
[^0-9]((\(?(\+420|00420)\)?( |-)?)?([0-9]{3} ?(([0-9]{3} ?[0-9]{3})|([0-9]{2} ?[0-9]{2} ?[0-9]{2})))|([0-9]{3}-(([0-9]{3}-[0-9]{3})|([0-9]{2}-[0-9]{2}-[0-9]{2}))))[^0-9|/]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2389
#T: zip code
#A: robert r
#D: This allows for a 5 digit or 9 digit zip code that uses a -
^\d{5}(-\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2390
#T: UK Passport number
#A: Pradeep Dhiman
#D: The first field consist of 10 numbers, then 3 characters (GBP as its for UK passports), 7 numbers, 1 character and 7 numbers. The final field is for the 2 numbers at the right-hand end of the <<<<< symbols.
^[0-9]{10}GBR[0-9]{7}[U,M,F]{1}[0-9]{9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2391
#T: UK Driving Licence
#A: Pradeep Dhiman
#D: These are identified from the driving license as follows:
#D: • 5 characters (made up of letters and 9's padded on right)
#D: • 6 numbers
#D: • 3 characters (made up of letters and 9's padded on right)
#D: • 2 characters (either 9's or 0's)
^([A-Z]{2}[9]{3}|[A-Z]{3}[9]{2}|[A-Z]{4}[9]{1}|[A-Z]{5})[0-9]{6}([A-Z]{1}[9]{1}|[A-Z]{2})[A-Z0,9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2392
#T: International Passport
#A: Pradeep Dhiman
#D: • 9 characters made up of a combination of numbers and/or letters. Where less than 9 characters it will be padded out to the right with chevrons (<).
#D: • 1 number
#D: • 3 letters
#D: • 7 numbers
#D: • 1 letter
#D: • 7 numbers
#D: • An international passport will have up to 14 characters in this field (numbers and/or letters). If none exist or where less than 14 characters exist, the field will be padded out, but only to the right, with chevrons (<). You should input the data exactly as it is shown on the actual passport field, i.e. input all chevrons to the left of the characters and do not ignore or leave these as blank spaces. Where less than 14 characters, the field will be padded out to the right with chevrons (<), i.e. Z1234567<<<<<
#D: • 1 number
#D: • 1 number
^[A-Z0-9<]{9}[0-9]{1}[A-Z]{3}[0-9]{7}[A-Z]{1}[0-9]{7}[A-Z0-9<]{14}[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2393
#T: Email
#A: leoinfo
#D: || Only alphanum characters accepted at the beginning of the user name and domain name
#D: || Does not allow 2+ adjacent non-alphanum characters
#D: || IP address accepted as domain
#D: || 1+ chars accepted as user name or domain
^([0-9a-zA-Z]+(?:[_\.\-]?[0-9a-zA-Z]+)*[@](?:[0-9a-zA-Z]+(?:[_\.\-]?[0-9a-zA-Z]+)*\.[a-zA-Z]{2,}|(?:\d{1,}\.){3}\d{1,}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2396
#T: Local/UNC Path Discriminator
#A: Keith Stacy
#D: Useful for determining whether a string constitutes a valid local or UNC path.  
^[a-zA-Z]\:\\.*|^\\\\.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2397
#T: one Expression
#A: wang
#D: very long
^if\((\!\()*(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*(\>|\<|\>=|\<=|\=){1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*\)*((and|or){1}(\!\()*(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*(\>|\<|\>=|\<=|\=){1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*\)*)*\)then(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*else(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*([(\+\-\*\/]{1}(abs\()*\(*[\+\-]?\d+(\.?\d+)?\)*)*end$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2398
#T: Block common public domains & validate email
#A: Dan Brewerton
#D: Should you need to validate that an email address is correctly formmatted and need to block hotmail and gmail, this expression will do it for you.  Thanks to Sergei Z from regexadvice.com
\w+([-+.]\w+)*@(?!(hotmail|gmail|yahoo|msn|excite|lycos|aol|live)\.com$)\w+([-.]\w+)*\.\w+([-.]\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2399
#T: Time HHMMSS
#A: ARUN PRASATH
#D: Time, which reg express is very simple to use :)
^((0[1-9]|1[0-9]|2[0-4])([0-5]\d){2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2400
#T: CURP (Mexican Code)
#A: Jose Luis Reyes
#D: Simple Expression to evaluate a Mexican CURP Code
^[a-zA-Z]{4}\d{6}[a-zA-Z]{6}\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2401
#T: RFC (Mexican Code)
#A: Jose Luis Reyes
#D: Mexican RFC code without Homonimia or separators
^[A-Za-z]{3,4}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2402
#T: RFC Homonimia (Mexican Code)
#A: Jose Luis Reyes
#D: Mexican RFC Homonimia Code
^[0-9a-zA-z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2403
#T: Oracle Like TimeStamp validator
#A: Andrei Martin Aszodi
#D: Oracle like time stamp with format:
#D: dd.MM.yyyy HH.mm.SS.xxxxxxx
#D: Based on European full proved date format with easy changeable dot separator.
#D: Optimized regular expresion.
^((((((0[1-9])|(1\d)|(2[0-8]))\.((0[123456789])|(1[0-2])))|(((29)|(30))\.((0[13456789])|(1[0-2])))|((31)\.((0[13578])|(1[02]))))\.\d{4})|((29)\.(02)\.\d{2}(([02468][048])|([13579][26]))))(\s((0\d)|(1\d)|(2[0-3]))\:([0-5]\d)\:([0-5]\d)\.\d{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2404
#T: Match a string containing at least 2 numbers and at least 6 alphabetic
#A: Longge Ruan
#D: Check password containing at least x numbers and y alphabetic. Use look back expression (?= )
(?=(.*\d.*){2,})(?=(.*[a-zA-Z].*){6,})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2405
#T: US zip & Canadian postal codes
#A: paul
#D: Matches all valid US standard, US +4, and Canadian postal codes. Returns results for only either one of them, in groups, regardless of case or whitespace (even dashes).
^ *([AaBbCcEeGgHhJjKkLlMmNnPpRrSsTtVvXxYy]\d[a-zA-Z]) *-* *(\d[a-zA-Z]\d) *$|^ *(\d{5}) *$|^ *(\d{5}) *-* *(\d{4}) *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2406
#T: INI-File section
#A: Gottfried Schipfer
#D: Matches a complete ini-file section
#D: like:
#D: [dgd]
#D: ghgh=123
#D: [test]
#D: jhygvc=agdjf
\[\w+\]\s+((.*=.*\s+)*|[^\[])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2407
#T: Regedit From  Name value
#A: jddy
#D: mix3,max20,chinese ok,a-z ok A-Z 0k 0-9 ok,
#D: custom "@,_,%" ok?
([a-zA-Z0-9\u4e00-\u9fa5@_%]){3,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2408
#T: custom  the length of email
#A: jddy
#D: very good check email exp.
#D: can custom like this:
#D: g@g.cn
#D: ^[\w-]{1,1}(\.[\w-]{1,1})*@[\w-]{1,1}(\.[\w-]{1,2}){1,1}$
#D: Restrictions on the length of email
^[\w-]{1,20}(\.[\w-]{1,20})*@[\w-]{1,20}(\.[\w-]{1,6}){1,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2409
#T: Ordnance Survey Grid Reference
#A: Tim May
#D: Matches standard 0- to 10-figure (non-tetrad) Ordnance Survey of Great Britain (OSGB) Grid References
^((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2410
#T: Strict Phone
#A: Jake
#D: Only matches a single format
^\([0-9]{3}\)[0-9]{3}(-)[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2411
#T: mm/dd/yyyy hh:mm:ss Date Time
#A: anil kumar b
#D: I got a regex for date time from here, which had some bugs. so i referred a few regex from this site and created a regex which i tested and didnt find any errors. I will check again and update if required.
^(0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/][0-9]{4}(\s((0[1-9]|1[012])\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|]{2,2})))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2413
#T: Positive Integers (Data type)
#A: Alex Koller
#D: Matches any integer from 0 to 2147483647 (max Integer size for C#, Java, others)
^(\d|\d{1,9}|1\d{1,9}|20\d{8}|213\d{7}|2146\d{6}|21473\d{5}|214747\d{4}|2147482\d{3}|21474835\d{2}|214748364[0-7])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2414
#T: Url without Querystring
#A: jibu georgy issac
#D: Modified URL RegExp that requires (http, https, ftp,gopher,telnet,file|notes,ms-help)://, A nice domain, and a decent file/folder string.
((https?|ftp|gopher|telnet|file|notes|ms-help):((//)|(\\\\))+[\w\d:#@%/;$()~_\+-=\\\.&]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2415
#T: URL,Website,Weburl
#A: Muthukrishnan
#D: Regular Expression matches any internet URLs. Used with the replace method it comes in very handy.
(http://([\w-]+\.)|([\w-]+\.))+[\w-]*(/[\w- ./?%=]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2416
#T: Mobile number of India
#A: Nandip Makwana
#D: This expression will be useful to check mobile
#D: number of India. This expression will check
#D: various types of number like number in local
#D: format or international number separated by
#D: hyphen(-) or not.
(\+91(-)?|91(-)?|0(-)?)?(9)[0-9]{9}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2417
#T: Postal code or Pin code of India
#A: Nandip Makwana
#D: This expression will be useful to check postal code or pin code of India. This expression will check postal code or pin code in two format. One is code is separated by space after 3 digit and another is code is written in 6 digit.
([0-9]{6}|[0-9]{3}\s[0-9]{3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2418
#T: Anchor Tag, href, title and innerHTML (PHP)
#A: Jeff Flesher
#D: Returns array of full A tag [0], href [1], title [2] and innerHTML [3]. href, title and innerHTML are optional in tag; will return empty if missing.
#D: Test will only work using PHP preg_match_all or similar; I ask this site
#D: to add that option.
#D: Credit goes to user prometheuzz. 
#<a\s*(?:href=[\'"]([^\'"]+)[\'"])?\s*(?:title=[\'"]([^\'"]+)[\'"])?.*?>((?:(?!</a>).)*)</a>#i

#U: http://regexlib.com/REDetails.aspx?regexp_id=2419
#T: URL from a data file (Fields separated by |)
#A: Kumar Deepak Ranjan
#D: ac80016-29181-12246003492|1224600413|ac8001629181-12246003492|M4.0-300-398598-1224600381630-721324|none|190.40.27.239|31,46,51,63,77,82,94,100
#D: ,110,150,353,357,521,891,1171,1352,1744,2700,3286,4482,4552,4568,5500,5526,5665,7258,8586,9109,9255,10016,10810,11693,11784,11819|Mozilla/4.0(com
#D: patible;MSIE7.0;WindowsNT6.0;WOW64;SLCC1;.NETCLR2.0.50727;.NETCLR3.0.04506;.NETCLR1.1.4322;InfoPath.2)|http://www.univision.com/uv/music/1169286/Enrique_Iglesias/fotos|/html.ng/SITE=AUDIT&CHANNEL=PORTAL&SUBCHANNEL=POP&SECTION=IGLESIASENRIQUE&CONTENT=PHOTOGALLERY&PARTNER=UNIVISION&CLIENT=AR
\|(http.*)\|(.*)$/ig

#U: http://regexlib.com/REDetails.aspx?regexp_id=2420
#T: Address Parser
#A: NoBug
#D: A quick and dirty expression for splitting up a generic street address
^(\d{3,})\s?(\w{0,5})\s([a-zA-Z]{2,30})\s([a-zA-Z]{2,15})\.?\s?(\w{0,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2421
#T: Swiss Phone Number
#A: Eric Wilson
#D: This regex will match various ways of entering a Swiss phone number along with the country code.
^(\+?)(\d{2,4})(\s?)(\-?)((\(0\))?)(\s?)(\d{2})(\s?)(\-?)(\d{3})(\s?)(\-?)(\d{2})(\s?)(\-?)(\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2422
#T: Brazilian salary format
#A: Marcello Turnbull
#D: Brazilian salary format between 0 and ten thousand with two decimal places
^(\d{1}\.){0,1}\d{1,3}\,\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2423
#T: uri expression
#A: uberwalla
#D: matches uri's with either ips or domains. http, https, ftp, or ftps. Also matches ports
^((ht|f)tps?://((([a-zA-Z0-9_\-]{2,}\.)+[a-zA-Z]{2,})|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(:[0-9]+)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2424
#T: url bbcode
#A: uberwalla
#D: bbcode for urls. Works for http, https, ftp, ftps. Does both domains and ip address'. Works with ports, and folders/query string
\[url\]((ht|f)tps?://((([a-zA-Z0-9_\-]{2,}\.)+[a-zA-Z]{2,})|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(:[0-9]+)?(/[a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~]*)?)\[/url\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2425
#T: Dni / Nie
#A: Josefield
#D: Dni-nie validator
^[A-z]?\d{8}[A-z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2426
#T: Date in MMYYYY format
#A: LaShandra Knox
#D: Validates dates that are in month/year (MMYYYY) format without slashes, periods, dashes, or spaces.  No special characters or letters allowed.  MM values allowed are 01 thru 12.  YYYY values allowed are 1900 - 2999.
#D: This is an adaptation of Felipe Albacete's MM/YYYY regular expression.
(((0[123456789]|10|11|12)(([1][9][0-9][0-9])|([2][0-9][0-9][0-9]))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2428
#T: UK telephone number match
#A: Ian Smith
#D: Matches most common patterns for UK telephone numbers including +44 prefix , and with or without brackets. Covers 10 and 11 digit number ranges. Should be easy to modify for other number ranges.
(\(?\+44\)?\s?(1|2|3|7|8)\d{3}|\(?(01|02|03|07|08)\d{3}\)?)\s?\d{3}\s?\d{3}|(\(?\+44\)?\s?(1|2|3|5|7|8)\d{2}|\(?(01|02|03|05|07|08)\d{2}\)?)\s?\d{3}\s?\d{4}|(\(?\+44\)?\s?(5|9)\d{2}|\(?(05|09)\d{2}\)?)\s?\d{3}\s?\d{3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2429
#T: Hex Color Codes
#A: Michael Fienen
#D: Matches valid 3 or 6 character hex codes used for HTML or CSS. 
^\#?[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2430
#T: Password 6 symbols and must containt non-captial letter and digit
#A: Marius
#D: Password of 6 symbols. Must containt at leats one non-captial letter and at least digit digit
^(?=.{6,})(?=.*[0-9].*)(?=.*[a-z].*).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2431
#T: Brazilian phone area code
#A: Marcello Turnbull
#D: Brazilian phone area code
^[1-9]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2432
#T: Single quoted string
#A: graffic
#D: This is useful to find single quoted strings in mysql dumps.
#D: It accepts \' inside the strings.
('(?:(?:\\'|[^'])*)'|NULL)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2433
#T: 12 Hour Time
#A: Robert Godwin
#D: Matches hours 0-12:minutes 0-59:seconds 0-59 AM|PM
((\d{0}[0-9]|\d{0}[1]\d{0}[0-2])(\:)\d{0}[0-5]\d{0}[0-9](\:)\d{0}[0-5]\d{0}[0-9]\s(AM|PM))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2434
#T: Date
#A: Marcello Turnbull
#D: Date
^\d{2}\/\d{2}\/\d{4}$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2435
#T: DateTime
#A: Yaron
#D: Date Time with am/pm.
^([0]\d|[1][0-2]\/([0-2]\d|[3][0-1])\/([2][0]\d{2})\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)?\s(AM|am|aM|Am|PM|pm|pM|Pm)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2436
#T: Password Rule
#A: Keith Stacy
#D: Tests that a password contains between 6 and 12 characters, and contains at least one number.
^(?=.*\d)(?=.*[a-zA-Z])(?!.*\s).{6,12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2437
#T: Screen name
#A: Keith Stacy
#D: Tests that a screen name begins and ends with an alphanumeric, and otherwise use alphanumeric characters, hyphens, and underscores.  Dictates length between 6 and 20 characters
^([\w][\w\-_\u0020]{4,18}[\w])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2438
#T: Exclusion
#A: fake
#D: will match anything EXCEPT  what you replace "dont match me" with.
#D: you can replace the last .* with whatever criteria must be matched. example matches anything.
(?s)(?i)^(?!^.*(dont match me).*$).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2439
#T: Checking of currency on key down
#A: CL Yeo
#D: This will allow your app to check currency during events such as key down
#D: (set to decimal(8,2) only)
^(([1-9]{1}[0-9]{0,5}([.]{1}[0-9]{0,2})?)|(([0]{1}))([.]{1}[0-9]{0,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2440
#T: URL and Email addresses validation
#A: fools
#D: i found this regex usefull to checks for valid urls and email addresses, so i want to share to others. all credit goes to
#D: http://www.osix.net/modules/article/?id=586
^(https?://)?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?(([0-9]{1,3}\.){3}[0-9]{1,3}|([0-9a-z_!~*'()-]+\.)*([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\.[a-z]{2,6})(:[0-9]{1,4})?((/?)|(/[0-9a-z_!  ~*'().;?:@&=+$,%#-]+)+/?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2441
#T: Gender Descriptor
#A: Keith Stacy
#D: Classic gender descriptor regex.
^(?:m|M|male|Male|f|F|female|Female)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2442
#T: North American Phone Number Pattern
#A: Keith Stacy
#D: Checks the format of a North American phone number with area code.
^\(\d{3}\)\s?|\d{3}(\.|-|\s)?)\d{3}(\.|-|\s)?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2443
#T: Number lower than a value
#A: Katherinne Cancino
#D: Validates a number lower than another value
^[1-9]{1}$|^[1-9]{1}[0-9]{1}$|^[1-9]{1}[0-9]{1}[0-9]{1}$|^[1-9]{1}[0-9]{1}[0-9]{1}[0-8]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2444
#T: RUT and RUN
#A: Dinko Yaksic
#D: Matches any-length chilean RUT (Rol Unico Tributario) and RUN (RUT (Rol Unico Nacional), with or without dots as thousand separator, and with or without hyphen as verification digit separator. Grab 1st and 3rd match for best results. Delete the dots from 1st match
#D: ===
#D: Calza con RUT chileno (Rol Unico Tributario) y RUN (RUT (Rol Unico Nacional) de cualquier largo, con o sin puntos separadores de miles, y con o sin guion como separador de digitos verificador. Considerar el 1er y 3er calce para mejores resultados. Eliminar los puntos del 1er calce
^0*(\d{1,3}(\.?\d{3})*)\-?([\dkK])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2445
#T: Integers, with optional Commas and Sign
#A: Aaron
#D: Matches integers (no decimal points), that may have an option +/- at the front, and may be grouped by comma every three digits.
^[+-]?(?(\d{1,3},)(\d{1,3}(,\d{3})+)|\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2446
#T: Version Number
#A: chetan kela
#D: this is regular expression for version number upto 3 digits
"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2447
#T: Numerical Strings w & w/o interpunctation
#A: Lars Echterhoff
#D: This validation forces a strict niced or plain input of a numerical value.
#D: The separation per thousand should be a (.) dot and must be used exactly or never to be valid.
(?:^(?:-)?(?:\d{1,3}\.(?:\d{3}\.)*\d{3})(?:\,\d+)?$|^(?:-)?\d*(?:\,\d+)?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2448
#T: German numerical Strings w & w/o interpunctation
#A: Lars Echterhoff
#D: This validation forces a value wheter to be strict niced or plain input of a numerical value.
#D: The separation per thousand should be a (.) dot and must be used exactly or never to be valid.
#D: Currently this RX validates german formed values... Just switch \, with \. and vice versa to get valid US results.
(?:^(?:-)?(?:\d{1,3}\.(?:\d{3}\.)*\d{3})(?:\,\d+)?$|^(?:-)?\d*(?:\,\d+)?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2449
#T: Bible Reference Validator/Finder
#A: Stephen Kaiser
#D: Will find any bible reference even if it uses roman numerals or has multiple chapter/verse and/or multiple verse components. Does not confirm chapter/verse value ranges. It would find/validate Genesis 5340:9387
([0-9]* {0,2}[A-Z]{1}\w+[,.;:]? {0,4}[xvilcXVILC\d]+[.,;:]( {0,2}[\d-,]{1,7})+)([,.;:] {0,4}[xvilcXVILC]*[.,;:]( {0,2}[\d-,]{1,7})+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2450
#T: Miltary Format Date: dd MMM yy
#A: stan naspinski
#D: This will test to see if a date is formatted in the military style of 'dd MMM yy'
^[0-3]{1}[0-9]{1}[ ]{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec){1}[ ]{1}[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2452
#T: Email
#A: Donald Burr
#D: Validates rfc2822 for the mostpart
^[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+(\.[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2453
#T: Limited Number of Digits with 0 or 2 Decimal Places
#A: C. Yon
#D: Limits the max number of digits before the decimal point to 10; if decimal point is entered, requires entry of 2 decimal places. Allows for an optional negative sign. This pattern was derived to meet the maximum number of digits that can be stored in a decimal data type in SQL Server 2005, and allows for the way SQL Server appends the decimal places.  The column in the table is defined as decimal(12,2).
^[-]?\d{1,10}\.?([0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2454
#T: Phone Saudi Arabia
#A: Hisham Al-Qassem
#D: This is for Saudi phone 
^(\d{5}-\d{2}-\d{7})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2455
#T: Multiples of 3
#A: Michael Dumas
#D: Matches any sequence of decimal digits that represent a positive denary multiple of three.
([0369]*([147][0369]*([147][0369]*[258])*[0369]*[147][0369]*([258][0369]*[147])*[0369]*[0369]*([258][0369]*[147])*[0369]*[147]|[258][0369]*([258][0369]*[147])*[0369]*[258][0369]*([147][0369]*[258])*[0369]*[0369]*([147][0369]*[258])*[0369]*[258]|[147][0369]*([147][0369]*[258])*[0369]*[258]|[258][0369]*([258][0369]*[147])*[0369]*[147])*[0369]*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2456
#T: Digit-grouped numbers
#A: Michael Dumas
#D: Matches any positive or negative number, with or without decimal places, where the digits are grouped in threes seperated by commas.
[+-]?(0|[1-9]([0-9]{0,2})(,[0-9]{3})*)(\.[0-9]+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2457
#T: Scientific Notation
#A: Michael Dumas
#D: Matches a number using normalised scientific 'E' notation
[+-]?\d(\.\d+)?[Ee][+-]?\d+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2458
#T: 2-7 character palindrome words
#A: Michael Dumas
#D: Matches any palindromic word of between 2 and 7 characters length. Best to use without case-sensitivity as "Noon" would not match otherwise because of the capitalisation.
(\w)(\w)?(\w)?\w?(?(3)\3)(?(2)\2)\1

#U: http://regexlib.com/REDetails.aspx?regexp_id=2459
#T: Trailing whitespace
#A: Michael Dumas
#D: Use in Java programming code to find trailing spaces (a checkstyle warning). Replace All with the empty string to remove them.
[ \t]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2460
#T: Trailing whitespace
#A: Michael Dumas
#D: Use in Java programming code to find trailing spaces (a checkstyle warning). Replace All with the empty string to remove them.
[ \t]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2461
#T: Unicode non-characters
#A: Michael Dumas
#D: Matches any of the 66 unicode non-characters (guaranteed never to be used for encoding characters). Could be useful for checking if a document is text-renderable.
[\uFDD0-\uFDEF]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2462
#T: Validate  HTM/HTML/ASP/ASPX 
#A: Amitesh Raja
#D: Validate  HTM/HTML/ASP/ASPX
#D: e.g. PageName.html
^([a-zA-Z1-9]*)\.(((a|A)(s|S)(p|P)(x|X))|((h|H)(T|t)(m|M)(l|L))|((h|H)(t|T)(M|m))|((a|A)(s|S)(p|P)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2463
#T: Validate URL
#A: Amitesh Raja
#D: Validate URL
#D: e.g.
#D: http://www.sample.com,
#D: http://61.61.67.123/test.html
(((ht|f)tp(s?):\/\/)(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;"\'<>\n\r\t]+)([^\. \[\]\(\),;"\'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2464
#T: Validate extension of files such as asp,aspx,xls,doc Extensions etc
#A: Pranav
#D: Validate Filename,PageName,ImageName etc
#D: such as
#D: filename.doc
#D: filename.xls
#D: pagename.aspx
#D: pagename.asp
#D: pagename.htm
#D: pagename.html
#D: Extensions
#D: etc ...
([a-zA-Z1-9]*)\.(((a|A)(s|S)(p|P)(x|X))|((h|H)(T|t)(m|M)(l|L))|((h|H)(t|T)(M|m))|((a|A)(s|S)(p|P))|((t|T)(x|X)(T|x))|((m|M)(S|s)(P|p)(x|X))|((g|G)(i|I)(F|f))|((d|D)(o|O)(c|C)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2465
#T: Us zip Code
#A: ABC XYZ
#D: abc
^\d{5}-\d{4}|\d{5}|[A-Z]\d[A-Z] \d[A-Z]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2466
#T: JavaScript number
#A: octavian morosanu
#D: Validates that a string represents a javascript number (as defined by ECMAScript 3 Specs): integer (base-10) or floating
#D: point including in the exponential notation. Doesn't match the empty string.
^[-+]?(?:\d+\.?|\.\d)\d*(?:[Ee][-+]?\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2467
#T: URI
#A: Patrick De Mazière
#D: Matches all kind of URIs: mailto's, http(s), (s)ftp(s), ..., or just www addresses without protocol prefix.
(((s*)(ftp)(s*)|(http)(s*)|mailto|news|file|webcal):(\S*))|((www.)(\S*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2468
#T: Full ISO8601 DateTime
#A: Otavio
#D: Complete date-time format according to the ISO 8601 standard.
\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([0-1][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(?:.\d{7})?[+|-](0[0-9]|1[0-2]):(00|15|30|45)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2469
#T: DD-MM-YYYY Format Date Validator
#A: Arya K Choudhury
#D: This expression can be used to validate any date entered in correct DD-MM-YYYY format. Takes care of Leap Years too..
^((29-02-(19|20)(([02468][048])|([13579][26])))|(31-((0[13578])|(1[02]))|(30-((0[13456789])|(1[0-2])))|(29-((0[13456789])|(1[0-2])))|(((0[1-9]|)|(1[0-9])|(2[0-8]))-((0[1-9])|(1[0-2])))-((19|20)[0-9][0-9])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2470
#T: Scientific Notation
#A: Jared Cook
#D: Matches both normalized and E notations, with or without spaces or negative numbers. Make sure to use a case insensitive pattern matcher. Group 1 is the significand, and either group 5 or group 7 is the exponent (one or the other will be null, but never both).
^(-?[1-9](\.\d+)?)((\s?[X*]\s?10[E^]([+-]?\d+))|(E([+-]?\d+)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2471
#T: Extract paragraphs
#A: Marlom L. Cesar
#D: Multi-line mode.
#D: Extract each paragraph in the text. Using split.
$(\n|\r\n)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2472
#T: Extract sentences
#A: Marlom L. Cesar
#D: It does not work in sentences with abbreviations.
\.\s|$(\n|\r\n)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2473
#T: Cisco dotted MAC notation
#A: Brian Jack
#D: Matches against dumps of Cisco MAC address tables on newer versions of Cisco IOS.
^([0-9a-f]{4}\.[0-9a-f]{4}\.[0-9a-f]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2474
#T: Address analyzer
#A: bask
#D: Analises the complex address string
(?<street>((\d+\-)?[?-?\.]* )*)(?<IsStreet>((?????)|(????????)|(??-?)|(?-?)|(??-?)|(???????)|(???[ \.]?)|(???(?:\.)?)|(?(?:\.)?)|(??\.)|(???(?:\.)?)|(??(?:\.)?))) *(?<street2>[?-?]{2,} )?(?:?\.?)?(?<home>\d+[?-?]?)([ -/?]+(???)?(?<building>\d+)[ -/](?<flat>\d+))*([ -/](??\.? ?)?(?<flat>\d+))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2476
#T: User Name
#A: Vishal Mehta
#D: This Regex allows usernames with or without special char . 
^([a-zA-Z]+)[0-9]*\.*[a-zA-Z0-9]+$|^[a-zA-Z]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2477
#T: SPF checker
#A: Oscar Martín
#D: I use "preg_match" function on PHP with this expression.
#D: Detects a valid SPF expression.
#D: Warnings:
#D: ip6 register only works in "no compressed" form.
#D: "trim" the string before use the expression (or add [ \t]+ after ^ and before $)
^v=spf1[ \t]+[+?~-]?(?:(?:all)|(?:ip4(?:[:][0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})?(?:/[0-9]{1,2})?)|(?:ip6(?:[:]([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})?(?:/[0-9]{1,2})?)|(?:a(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:mx(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:ptr(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exists(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:include(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:redirect(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exp(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|)(?:(?:[ \t]+[+?~-]?(?:(?:all)|(?:ip4(?:[:][0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})?(?:/[0-9]{1,2})?)|(?:ip6(?:[:]([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})?(?:/[0-9]{1,2})?)|(?:a(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:mx(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+)?(?:/[0-9]{1,2})?)|(?:ptr(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exists(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:include(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:redirect(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|(?:exp(?:[:][A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?(?:\.[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+))|))*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2478
#T: Email Address Format
#A: Fred Scott Thompson
#D: Validates format of email addresses including q.com but not q.net
^([a-zA-Z0-9]+[._-])*[a-zA-Z0-9]+@(([a-zA-Z0-9]+|([a-zA-Z0-9]+[.-])+)[a-zA-Z0-9]+\.[a-zA-Z]{2,4}|([a-zA-Z]\.com))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2479
#T: Regular expression to validate "..&.."
#A: meerraj
#D: This regex validate a string that contain anything "anything & anything" i.e "..&.."
.*\".*&.*\"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2480
#T: Date Time
#A: Marco Delgado
#D: Will only validate expressions that have Date and time together.
#D: dd-MM-yyyy HH-mm-ss
(?n:^(?=\d)((?<day>31(?!(.0?[2469]|11))|30(?!.0?2)|29(?(.0?2)(?=.{3,4}(1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|0[1-9]|1\d|2[0-8])(?<sep>[-])(?<month>0[1-9]|1[0-2])\2(?<year>(1[6-9]|[2-9]\d)\d{2})(?:(?=\x20\d)\x20|$))((?<Hours>(([0-1][0-9])|([2][0-3]))):(?<Minutes>([0-5][0-9])):(?<Seconds>([0-5][0-9]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2481
#T: IP Address and Subnet
#A: Rafael Henrique Kato Assis
#D: IP Address validation by Vassilis Petroulias + my subnet validation using numbers between 0 and 32
^((0|1[0-9]{0,2}|2[0-9]{0,1}|2[0-4][0-9]|25[0-5]|[3-9][0-9]{0,1})\.){3}(0|1[0-9]{0,2}|2[0-9]{0,1}|2[0-4][0-9]|25[0-5]|[3-9][0-9]{0,1})(?(\/)\/([0-9]|[1-2][0-9]|3[0-2])|)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2482
#T: Zero or One of a certain character ANYWHERE in the string.
#A: Eric M Franz
#D: An expression to validate a search string which accepts a wildcard(asterik) at most once anywhere in the string.
^[^\*]{0,}[\*]{0,1}[^\*]{0,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2483
#T: BBCode Hyperlink Locator
#A: Doug Vanderweide
#D: This expression locates all BBCode style hyperlinks and breaks out the URL and linked text components. The URL attribute can be double-quoted or not, or not present at all. URL attributes (if present) are at $2, linked text is at $4.
(\[url=?"?)([^\]"]*)("?\])([^\[]*)(\[/url\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2484
#T: UK Phone with country code and area code
#A: Suriya Supatanasakul
#D: Simple expression to validate a UK phone number including country code and area code.  Requires spacing.
\+44\s\(0\)\s\d{2}\s\d{4}\s\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2485
#T: Ireland phone number and country code
#A: Suriya Supatanasakul
#D: This simple expression evaluates an Ireland phone number.  It requires the country code and dialing instructions for an international call plus spaces within the number. 
\+353\(0\)\s\d\s\d{3}\s\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2486
#T: Max length
#A: lokesh
#D: Maxlength test
(^\d{1,3}([,]\d{3})*$)|(^\d{1,16}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2487
#T: Indian Mobile No 
#A: Nilarka Prasanna Das
#D: This expression is to validate indian mobile nos
^((\+){0,1}91(\s){0,1}(\-){0,1}(\s){0,1}){0,1}9[0-9](\s){0,1}(\-){0,1}(\s){0,1}[1-9]{1}[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2488
#A: Nilarka Prasanna Das
#D: To validate a number of 10 digits before the decimal point and atmost 2 digits after it
(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2489
#A: Nilarka Prasanna Das
#D: To validate a number of 10 digits before the decimal point and atmost 2 digits after it
(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2490
#A: Nilarka Prasanna Das
#D: To validate a number of 10 digits before the decimal point and atmost 2 digits after it
(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2491
#A: Nilarka Prasanna Das
#D: To validate a number of 10 digits before the decimal point and atmost 2 digits after it
(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2492
#A: Nilarka Prasanna Das
#D: To validate a number of 10 digits before the decimal point and atmost 2 digits after it
(?!^0*$)(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2494
#T: US and Canada zip code validation
#A: Pavel Terakopov
#D: Will match any valid US or Canada zip code
^(\d{5}-\d{4}|\d{5}|\d{9})$|^([a-zA-Z]\d[a-zA-Z]( )?\d[a-zA-Z]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2495
#T: Allow Decimal only
#A: Gyanendra
#D: Decimal like 123.23
#D: 123.1234
#D: 12345.456
^\d*[0-9](|.\d*[0-9]|)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2496
#T: Bible verse bbcode tags for multiple versions and languages (eregi not preg_match)
#A: Mark A. Boughter
#D: I used this to find bbcode [bible][/bible] tags.  It also allows for multiple versions with a default and other than english languages.
#D: This is eregi, not preg_match
\[bible[=]?([a-zäëïöüæø]*)\]((([0-9][[:space:]]?)?[a-zäëïöüæø]*[[:space:]]{1}([a-zäëïöüæø]*[[:space:]]?[a-zäëïöüæø]*[[:space:]]{1})?)([0-9]{1,3})(:{1}([0-9]{1,3})(-{1}([0-9]{1,3}))?)?)\[\\/bible\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2497
#T: Disallow Special Characters in string
#A: Kiran Patil
#D: This Regular Expression. I have used with ASP.NET Regular expression for validating that input string should not have special characters(e.g. $,#,@ etc.]
^[a-zA-Z0-9]+(([_][a-zA-Z0-9])?[a-zA-Z0-9]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2498
#T: Regx for strong password
#A: bussureddy82
#D: This Expression will allow at least one small letter, one capital and one numeric digit. And length of the password is minimum of 8 and allowed special chars are pre defined(@\$=!:.#%),special chars are optional in password
^.*(?=.{8,})(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(^[a-zA-Z0-9@\$=!:.#%]+$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2499
#T: eeee
#A: seshukumar
#D: sdfsd
^[A-Z0-9a-z'&()/]{0,1}[A-Z0-9a-z'&()/]{0,1}(([A-Z0-9a-z'&()/_-])|(\\s)){0,47}[A-Z0-9a-z'&()/]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2500
#T: Chennai Phone Numbers
#A: Prabhu Bentick
#D: This expression will help you to match chennai telephone numbers. chennai bsnl telephone numbers will start from 2.
^(0)44[\s]{0,1}[\-]{0,1}[\s]{0,1}2[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2501
#T: http & www / subdomain check
#A: Ewel
#D: This checks to see if a URL has http:// in it, and if it has either www or a subdomain before the domain and tld. Without (http\://) it only does the latter check. Replace http by (http|https|ftp) for other protocols. Still not happy about this: http://www.www.passshouldfail.com
^(http\://){1}(((www\.){1}([a-zA-Z0-9\-]*\.){1,}){1}|([a-zA-Z0-9\-]*\.){1,10}){1}([a-zA-Z]{2,6}\.){1}([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2502
#T: Person's Full Name with salutation and suffix
#A: travis weerts
#D: A pattern for matching both simple, and complex names. Will match up to 4 names within a single name. This is a regex expression I created using some of the expressions I have found here, and other places on the web. It has named patterns to make it easier to separate the parts in your application. 
^(?P<salutation>(Mr|MR|Ms|Miss|Mrs|Dr|Sir)(\.?))?\s*((?<first>[A-Za-z\-]*?) )?((?<second>[A-Za-z\-]*?) )?((?<third>[A-Za-z\-]*?) )?(?(?!(PHD|MD|3RD|2ND|RN|JR|II|SR|III))(?<last>([A-Za-z](([a-zA-Z\-\']{1,2})[A-Za-z\-\'])?[a-zA-Z\-\']+)))( (?P<suffix>(PHD|MD|3RD|2ND|RN|JR|II|SR|III)))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2503
#T: mm/dd/yyyy 00:00
#A: viswanatham
#D: date and time. mm/dd/yyyy 00:00 format
#F: ;
^(\d{1,2})(\/)(\d{1,2})(\/)(\d{4})(T|\s{1,2})(([0-1][0-9])|(2[0-3])):([0-5][0-9])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2504
#T: MIME Mail Message Content-Type
#A: Daniel Hill
#D: Matches the Content-Type for a MIME Mail Message and a Non-Mime Mail Message
^Content-Type:\s*(\w+)\s*/?\s*(\w*)?\s*;\s*((\w+)?\s*=\s*((".+")|(\S+)))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2505
#T: MMDD
#A: Aaron Blaquiere
#D: Evaluates a date in the format of MMDD. Will evaluate month day ranges accurately with Feb going up to 29.
^((0[123456789]|1[0-2])(0[1-3]|1[0-9]|2[0-9]))|((0[13456789]|1[0-2])(30))|((0[13578]|1[02])(31))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2506
#T: JavaScript: American Names (No latin/cyrilic characters)
#A: Anton Thorn
#D: Allows:
#D: 1) first last
#D: 2) first mi last
#D: 3) first mi mi last
#D: 4) first mi O'last
#D: 5) first mi mi O'last
#D: 6) first-first last
#D: 7) first-first mi last
#D: 8) first-first mi mi last
#D: 9) first-first mi O'last
#D: 10)first-first mi mi O'last
^(([A-Z]{1}[a-z]+([\-][A-Z]{1}[a-z]+)?)([ ]([A-Z]\.)){0,2}[ ](([A-Z]{1}[a-z]*)|([O]{1}[\']{1}[A-Z][a-z]{2,}))([ ](Jr\.|Sr\.|IV|III|II))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2507
#T: C++ Comments
#A: Bill Krahmer
#D: Matches single line or multi-line comments.
/.*|/\*[\s\S]*?\*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2508
#T: web URL
#A: jc
#D: matches most most web URLs
(https?://)?((?:(\w+-)*\w+)\.)+(?:com|org|net|edu|gov|biz|info|name|museum|[a-z]{2})(\/?\w?-?=?_?\??&?)+[\.]?[a-z0-9\?=&_\-%#]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2510
#T: BFPO - British Forces Post Office
#A: Dean Simpson
#D: Matches BFPO
#D: Allows for BFPO with no spacing
^(b|B)(f|F)(p|P)(o|O)(\s*||\s*C(/|)O\s*)[0-9]{1,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2511
#T: BFPO - British Forces Post Office - STRICT
#A: Dean Simpson
#D: Matches all coorrectly spaced BFPO's
^(b|B)(f|F)(p|P)(o|O)(\s|\sC/O\s)[0-9]{1,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2512
#T: yyyy-mm-dd hh:mm
#A: Kiran Patil
#D: This expression will validate date format to be yyyy-mm-dd hh:mm.
^((\d{2}(([02468][048])|([13579][26]))[-]?((((0?[13578])|(1[02]))[-]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[-]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[-]?((0?[1-9])|([1-2][0-9])))))|(\d{2}(([02468][1235679])|([13579][01345789]))[-]?((((0?[13578])|(1[02]))[-]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[-]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[-]?((0?[1-9])|(1[0-9])|(2[0-8]))))))(\s((([0-1]?[0-9])|([2][0-3]))\:([0-5][0-9])))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2513
#T: .NET MembershipProvider strong password validation for PasswordStrengthRegularExpression
#A: Bram van den Broek
#D: Regex to validate strong password for .NET MembershipProvider ValidatePassword. Regex checks for minimum required password length and for minimum required non-alphanumeric characters. Change value '7' according to MinRequiredPasswordLength and '1' to MinRequiredNonAlphanumericCharacters.
(?=^[!@#$%\^&*()_\-+=\[{\]};:<>|\./?a-zA-Z\d]{7,}$)(?=([!@#$%\^&*()_\-+=\[{\]};:<>|\./?a-zA-Z\d]*\W+){1,})[!@#$%\^&*()_\-+=\[{\]};:<>|\./?a-zA-Z\d]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2514
#T: HH:MM 24hr time
#A: Sudhir Tibrewal
#D: Matches a string if it is a valid time in the format of HH:MM
^(([0-1]?[0-9])|([2][0-3])):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2515
#T: Full Name Validator
#A: Thaynã B. Moretti
#D: Validate full names (w/ accents). A first/last name needed, at least, 2 letters. See examples.
^(?i)([À-ÿa-z\-]{2,})\x20([À-ÿa-z\-']{2,})(?-i)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2516
#T: 10 Digit US Phone Number
#A: Joe Grigg
#D: Basic expression to validate a 10 digit number. Does not allow for any delimiters between numbers. Specifies that numbers cannot start with a one.
(([2-9]{1})([0-9]{2})([0-9]{3})([0-9]{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2517
#T: a
#A: huang
#D: 33aad 3d
\d

#U: http://regexlib.com/REDetails.aspx?regexp_id=2519
#T: Email Expression
#A: Chella Arun Raja
#D: There is no valid expression untill any standard finalizes the pattern. Here's one pattern which matches one . or _ before @ symbol and after that can have maximum of three dots.
^[a-zA-Z0-9]+[._]?{1}+[a-zA-Z0-9]+@[0-9]*[a-zA-z][0-9a-zA-Z]*+([.]?[a-zA-Z][a-zA-Z0-9]*){2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2520
#T: Typical Email Expression
#A: Mitchell Lee
#D: Simple email matching expression, that allows for a friendly name string similar to what you see in outlook 2007.
#D: Example: "Test User" test@user.com
(".+"\s)?<?[a-z\._0-9]+[^\._]@([a-z0-9]+\.)+[a-z0-9]{2,6}>?;?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2521
#T: Versitile North American Phone Number Validation
#A: Mitchell Lee
#D: My goal with this was to have a pretty loose and flexible validation, accept a number of different input strings, but still inforce the core of what a phone number is. Country Code optional, Area Code required, with optional extension as well for business numbers.
#D: I'm still fairly new to Regex's so any suggestions for improvement are great.
[\+]?[\s]?(\d(\-|\s)?)?(\(\d{3}\)\s?|\d{3}\-?)\d{3}(-|\s-\s)?\d{4}(\s(ex|ext)\s?\d+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2522
#T: Man Hour Calculation
#A: Nilarka Prasanna Das
#D: This validates Man Hour values in projects
^\d*\.?(((5)|(0)|))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2523
#T: date format validater
#A: suraj shetty
#D: following date format validator is validates d-m-yy,dd-mm-yy,dd-Mmm-yyyy,dd mm yyyy,dd Mmm yyyy, dd/mm/yy,dd/mm/yyyy
^(3[0-1]|2[0-9]|1[0-9]|0[1-9]|[1-9])[\s{1}|\/|-]((Jan|JAN|Feb|FEB|Mar|MAR|Apr|APR|May|MAY|Jun|JUN|Jul|JUL|Aug|AUG|Sep|SEP|Oct|OCT|Nov|NOV|Dec|DEC)|(0[1-9]|1[1-2]|[1-9]))[\s{1}|\/|-](\d{4}|\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2524
#T: Swedish personnummer with accepted foreigners
#A: Petter Terenius
#D: Other Swedish personnummer regexps do not take into account that at Swedish universities, foreigners might get special temporary personnummers with a "P", "T", or "F" instead of the first of the four last numbers.
#D: This code fixes the problem, but does not check the validity of the date, or the last number.
^[0-9]{6}-[0-9pPtTfF][0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2525
#T: Email address (RFC 2821 mailbox)
#A: Jordan
#D: This validates against the RFC 2821 (SMTP) syntax unit 'Mailbox' [equiv. to addr-spec - not address - element of RFC 2822] (the one a certain critic keeps linking to validates the RFC822 'address' element which includes support for stuff like "Group:User <address>,User <address>;", obsolete smtp routing syntax like <@host1,@host2:user@host>, etc)
#D: There are some differences. This version does not allow line breaks for continuation lines. It also applies the stricter standards of RFC 2821 (SMTP) to the domain portion of the address.
#D: Username may be a quoted string (but not "multiple"."quoted"."strings" - RFC 2822's grammar appears to allow this but the SMTP grammar does not). Also only one piece enclosed in [Brackets] (for IP email addresses) is allowed in the domain; that is you can't have user@[1.2.3.4].[5.6.7.8] as implied by the RFC2822 but not SMTP. Whitespace is only allowed in quoted strings. It is silently ignored at the beginning or end.
#D: Capture group 1 is the email address, group 2 is the username, group 3 is the domain.
^\s*(([/-9!#-'*+=?A-~-]+(?:\.[/-9!#-'*+=?A-~-]+)*|"(?:[^"\r\n\\]|\\.)*")@([A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?(?:\.[A-Za-z][0-9A-Za-z-]*[0-9A-Za-z]?)*|\[(?:[^\[\]\r\n\\]|\\.)*\]))\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2526
#T: Diacritics
#A: Mukundhan (India)
#D: This regex will eliminate all diacritics characters. To make it clear, if this is embedded in a javascript or any other coding it will not accept diacritics
([A-Z]|[a-z])|\/|\?|\-|\+|\=|\&|\%|\$|\#|\@|\!|\||\\|\}|\]|\[|\{|\;|\:|\'|\"|\,|\.|\>|\<|\*|([0-9])|\(|\)|\s

#U: http://regexlib.com/REDetails.aspx?regexp_id=2527
#T: HTML Tag operation - Identification and Extraction
#A: Mukundhan (India)
#D: This will identify all the characters in between html tags irrespective of the length of the character or intiger. If scenario emerges to extract content between tags a replacement string  can be used: $3 
(\<(.*?)\>)(.*?)(\<\/(.*?)\>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2528
#T: Executive Moves
#A: Mukundhan (India)
#D: This regex is really helpful if you are trying to find out executive moves. For instance you have 100 docs with company details but you need to find out the newly joined executives and resigned executives, you can do it with this. 
\b ?(a|A)ppoint(s|ing|ment(s)?|ed)?| ?(J|j)oin(s|ed|ing)| ?(R)?recruit(s|ed|ing(s)?)?| (H|h)(is|er)(on)? dut(y|ies)?| ?(R)?replace(s|d|ment)?| (H)?hire(s|d)?| ?(P|p)romot(ed|es|e|ing)?| ?(D|d)esignate(s|d)| (N)?names(d)?| (his|her)? (P|p)osition(ed|s)?| re(-)?join(ed|s)|(M|m)anagement Changes|(E|e)xecutive (C|c)hanges| reassumes position| has appointed| appointment of| was promoted to| has announced changes to| will be headed| will succeed| has succeeded| to name| has named| was promoted to| has hired| bec(a|o)me(s)?| (to|will) become| reassumes position| has been elevated| assumes the additional (role|responsibilit(ies|y))| has been elected| transferred| has been given the additional| in a short while| stepp(ed|ing) down| left the company| (has)? moved| (has)? retired| (has|he|she)? resign(s|ing|ed)| (D|d)eceased| ?(T|t)erminat(ed|s|ing)| ?(F|f)ire(s|d|ing)| left abruptly| stopped working| indict(ed|s)| in a short while| (has)? notified| will leave| left the| agreed to leave| (has been|has)? elected| resignation(s)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2529
#T: Email Identification - Alternate method
#A: Mukundhan (India)
#D: This RE will be useful in identifying emails. 
\b([A-Za-z0-9]+)(-|_|\.)?(\w+)?@\w+\.(\w+)?(\.)?(\w+)?(\.)?(\w+)?\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2530
#T: DB naming convention - Regex
#A: Mukundhan (India)
#D: Replaces the space character with an underscore, this regex replacement will be useful if you have change the naming convention for DB field names. The replacement string will be: $1_$3 (you can opt anything instead of "_" in the replacement string  for instance, $1-$2
\b([A-Za-z0-9]+)( )([A-Za-z0-9]+)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2531
#T: Doubled word/character  identification
#A: Mukundhan (India)
#D: This RE will find doubled words/characters in a sentence. This will give a helping hand in content QC where you need to  identify and remove unnecessary repetitive words/characters.
\b([A-Za-z]+) +\1\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2532
#T: Douled numerics identification
#A: Mukundhan (India)
#D: Repetition of two numeric sets can be identified with this RE.
\b([0-9]+) +\1\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2533
#T: Doubled alphanumeric/alpha/numeric identification
#A: Mukundhan (India)
#D: Repeated word/character/number/number with alpha character can be identified with this RE
\b([A-Za-z0-9]+) +\1\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2534
#T: Doubled word/character identification & Replacement
#A: Mukundhan (India)
#D: The above RE will identify doubled alphanum/num/alpha and replaces with a single occurance.
\b([A-Za-z0-9]+) +\1\b   replacement string--->$1

#U: http://regexlib.com/REDetails.aspx?regexp_id=2535
#T: Remove Blank lines (Single or Multiple)
#A: Mukundhan (India)
#D: (\n\r) removes single or multiple blank\empty lines. The replacement string will be \n
#D: Simple but powerful and really useful
(\n\r)   replacement string---->\n

#U: http://regexlib.com/REDetails.aspx?regexp_id=2536
#T: Remove leading and trailing spaces
#A: Mukundhan (India)
#D: This RE will identify leading and trailing spaces. To trim this just replace with nothing.
^[ \t]+|[ \t]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2537
#T: US Phone Number - Normalization
#A: Mukundhan (India)
#D: This RE recognizes unformatted US phone numbers. The replacement string is $2-$4-$6. Helps when you want to normalize the phone numbers in a DB field.This also identifies a single space given before are after the part of first, second 3 digits and before the last 4 digits. The replaced format will be "123-456-7890"
^([\.\"\'-/ \(/)\s\[\]\\\,\<\>\;\:\{\}]?)([0-9]{3})([\.\"\'-/\(/)\s\[\]\\\,\<\>\;\:\{\}]?)([0-9]{3})([\,\.\"\'-/\(/)\s\[\]\\\<\>\;\:\{\}]?)([0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2538
#T: Eliminate Junk lines
#A: Mukundhan (India)
#D: This RE will be very useful if you want to eliminate non-alpha\numeric containing lines. For example, you have 10000 records in a DB field and you need to identify and eliminate fully unwanted character containing lines, this will help you.
^[^a-zA-Z0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2539
#T: URL identifier - simple method
#A: Mukundhan (India)
#D: This RE will identify URLS only starting with http or https. Please test this before using.
^(http(s)?\:\/\/\S+)\s

#U: http://regexlib.com/REDetails.aspx?regexp_id=2540
#T: Diacritics identification
#A: Mukundhan (India)
#D: This RE will identify any diacritics. Pretty useful to validate fields wherein you do not want any junk characters to get in.
[\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0A\x0B\x0C\x0D\x0E\x0F\x1C\x1D\x1E\x1F\x60\x80\x8A\x8C\x8E\x9A\x9C\x9E\x9F\xA7\xAE\xB1\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\u0060\u00A2\u00A3\u00A4\u00A5\u00A6\u00A7\u00A8\u00A9\u00AA\u00AB\u00AC\u00AE\u00AF\u00B0\u00B1\u00B2\u00B3\u00B4\u00B5\u00B7\u00B9\u00BA\u00BB\u00BC\u00BD\u00BE\u00BF\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C6\u00C7\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D0\u00D1\u00D2\u00D3\u00D4\u00D5\u00D6\u00D8\u00D9\u00DA\u00DB\u00DC\u00DD\u00DE\u00DF\u00E0\u00E1\u00E2\u00E3\u00E4\u00E5\u00E6\u00E7\u00E8\u00E9\u00EA\u00EB\u00EC\u00ED\u00EE\u00EF\u00F0\u00F1\u00F2\u00F3\u00F4\u00F5\u00F6\u00F8\u00F9\u00FA\u00FB\u00FC\u00FD\u00FE\u00FF\u0100\u0101\u0102\u0103\u0104\u0105\u0106\u0107\u0108\u0109\u010A\u010B\u010C\u010D\u010E\u010F\u0110\u0111\u0112\u0113\u0114\u0115\u0116\u0117\u0118\u0119\u011A\u011B\u011C\u011D\u011E\u011F\u0120\u0121\u0122\u0123\u0124\u0125\u0126\u0127\u0128\u0129\u012A\u012B\u012C\u012D\u012E\u012F\u0130\u0131\u0132\u0133\u0134\u0135\u0136\u0137\u0138\u0139\u013A\u013B\u013C\u013D\u013E\u013F\u0140\u0141\u0142\u0143\u0144\u0145\u0146\u0147\u0148\u0149\u014A\u014B\u014C\u014D\u014E\u014F\u0150\u0151\u0152\u0153\u0154\u0155\u0156\u0157\u0158\u0159\u015A\u015B\u015C\u015D\u015E\u015F\u0160\u0161\u0162\u0163\u0164\u0165\u0166\u0167\u0168\u0169\u016A\u016B\u016C\u016D\u016E\u016F\u0170\u0171\u0172\u0173\u0174\u0175\u0176\u0177\u0178\u0179\u017A\u017B\u017C\u017D\u017E\u017F\u0180\u0181\u0182\u0183\u0184\u0185\u0186\u0187\u0188\u0189\u018A\u018B\u018C\u018D\u018E\u018F\u0190\u0191\u0192\u0193\u0194\u0195\u0196\u0197\u0198\u0199\u019A\u019B\u019C\u019D\u019E\u019F\u01A0\u01A1\u01A2\u01A3\u01A4\u01A5\u01A6\u01A7\u01A8\u01A9\u01AA\u01AB\u01AC\u01AD\u01AE\u01AF\u01B0\u01B1\u01B2\u01B3\u01B4\u01B5\u01B6\u01B7\u01B8\u01B9\u01BA\u01BB\u01BC\u01BD\u01BE\u01BF\u01C0\u01C1\u01C2\u01C4\u01C5\u01C6\u01C7\u01C8\u01C9\u01CA\u01CB\u01CC\u01CD\u01CE\u01CF\u01D0\u01D2\u01D3\u01D4\u01D5\u01D6\u01D7\u01D8\u01D9\u01DA\u01DB\u01DC\u01DD\u01DE\u01DF\u01E0\u01E1\u01E2\u01E3\u01E4\u01E5\u01E6\u01E7\u01E8\u01E9\u01EA\u01EB\u01EC\u01ED\u01EE\u01EF\u01F0\u01F1\u01F2\u01F3\u01F4\u01F5\u01FA\u01FB\u01FC\u01FD\u01FE\u01FF\u0200\u0201\u0202\u0203\u0204\u0205\u0206\u0207\u0208\u0209\u020A\u020B\u020C\u020D\u020E\u020F\u0210\u0211\u0212\u0213\u0214\u0215\u0216\u0217\u021E\u0250\u0252\u0259\u025A\u025B\u025C\u025D\u025E\u025F\u0260\u0263\u0264\u0265\u0266\u0267\u0268\u0269\u026B\u026C\u026D\u026E\u026F\u0270\u0271\u0272\u0273\u0276\u0277\u0278\u0279\u027A\u027B\u027C\u027D\u027E\u027F\u0281\u0282\u0283\u0284\u0285\u0286\u0287\u0288\u0289\u028A\u028B\u028C\u028D\u028E\u028F\u0290\u0291\u0292\u0293\u0294\u0295\u0296\u0297\u0298\u0299\u029A\u029B\u029C\u029D\u029E\u02A0\u02A1\u02A2\u02A3\u02A4\u02A5\u02A6\u02A7\u02A8\u033D\u033E\u0342\u0343\u0344\u0345\u0386\u0388\u0389\u038A\u038C\u038E\u038F\u0390\u0393\u0394\u0398\u039E\u039F\u03A0\u03A3\u03A6\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\u03D0\u03D1\u03D2\u03D3\u03D4\u03D5\u03D6\u03E0\u03E2\u03E3\u03E4\u03E5\u03E6\u03E7\u03EE\u03EF\u03F0\u03F1\u0403\u0404\u0407\u0409\u040A\u040B\u040C\u040E\u040F\u0411\u0414\u0416\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0424\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043F\u0444\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0451\u0452\u0453\u0454\u0457\u0459\u045A\u045B\u045C\u045E\u045F\u0460\u0461\u0462\u0463\u0464\u0465\u0466\u0467\u0468\u0469\u046A\u046B\u046C\u046D\u046E\u046F\u0470\u0471\u0472\u0473\u0476\u0477\u0478\u047

#U: http://regexlib.com/REDetails.aspx?regexp_id=2541
#T: US Address
#A: prasath kumar
#D: This regex is really helpful if you are trying to find out US Address. For instance you have Multiple Country Address details but you need to find out the US Address , you can do it with this.
#D: Matching Examples:
#D: 123, North AVE New York. NY 12345 (or)
#D: 1234 MAIN AURORA
#D: CO
#D: 80010
#D: (or)
#D: 1625 Eye Street, NW
#D: Washington, DC 20006
#D: United States of America
(([0-9]+)(\W|,\W)(.*?)((\r\n)|(\W|,\W|.\W))(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])((\r\n)|(\W|, ))([0-9]+))|(([0-9]+) (.*?)\r\n(.*?)(\W|,\W|.\W)(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])(\W|, )([0-9]+)\r\n(.*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2542
#T: US Phone
#A: Philip
#D: USA Phone number with dash, periods, slashes, spaces, () and only last 7 digit is required but everything else is checked
#D: Here it is broken down feel free to add too it or use it
#D: Begin String: ^
#D: Country Code 1: (1|1(\s|\s?-\s?|\s?\.\s?|\s?/\s?))?
#D: Area Code FirstDigit cannot be 0 or 1:((\(?[2-9]{1}[\d]{2}\)?(\s|\s?-\s?|\s?\.\s?|\s?/\s?)?))?
#D: 3Digit Prefix: (\d{3})
#D: Space/-/. between: (\s|\s?-\s?|\s?\.\s?|\s?/\s?)?
#D: 4Digit Suffix: (\d{4})
#D: End String $
#D: *can add country code with out area code!!
^(1|1(\s|\s?-\s?|\s?\.\s?|\s?/\s?))?((\(?[2-9]{1}[\d]{2}\)?(\s|\s?-\s?|\s?\.\s?|\s?/\s?)?))?(\d{3})(\s|\s?-\s?|\s?\.\s?|\s?/\s?)?(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2543
#T: Comma Separated list of bit numbers
#A: Mike S
#D: I needed a comma separated list containing numbers in the range 1 .. 64 to reflect bits set. This does not identify duplicates.
#D: Doesn't do exactly as I want - so broken - sorry
^([1-9]{1}|[1-5]{1}[0-9]{1}|60|61|62|63|64*)+(,[1-9]{1}|[1-5]{1}[0-9]{1}|60|61|62|63|64+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2544
#T: Discover Card
#A: RGardner
#D: Validates Discover Card numbers starting with 6011 and allows for spaces and -'s.
^((6011)((-|\s)?[0-9]{4}){3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2545
#T: Mastercard
#A: RGardner
#D: Validates all Mastercard numbers starting with 51-55 with a total of 16 digits. Allows for spaces and -'s.
^((5[1-5])([0-9]{2})((-|\s)?[0-9]{4}){3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2546
#T: Email Extractor
#A: Wangz
#D: matches the most of the email addresses.
[_\w-]+(?:\.[_\w-]+)*@(?:[\w-]+\.)+(?:[\w-]{2,4})(?![\w]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2547
#T: Money Brazil
#A: Renato Cugler
#D: Aceita duas casas decimas após a vírgula. Pode ser usado para Real Brasil.
#D: Uses up to two decimal places. Good to use for brazilian money format (Real).
^([1-9]{1}[\d]{0,2}(\.[\d]{3})*(\,[\d]{0,2})?|[1-9]{1}[\d]{0,}(\,[\d]{0,2})?|0(\,[\d]{0,2})?|(\,[\d]{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2548
#T: Validate Numeric values with commas and limited decimal places
#A: Prachi Suhas Kulkarni
#D: Validates Numeric values with commas and limited decimal places. Can change the value d{1,2} to limit decimal places from 1 to n
^(\d)?(\d|,)*\.?\d{1,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2549
#T: SIMPLE UK POST CODE
#A: zan kavtaskin
#D: This is a simple post code regex for UK. It does a wonderfull job.
([a-zA-Z]{2}[0-9]{1,2}\s{0,1}[0-9]{1,2}[a-zA-Z]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2550
#T: File Name
#A: Jose Paulino
#D: This matches a valid windows filename. Not a valid path.I wanted something simple that covered all the bases
^([a-zA-Z]:\\)?[^\x00-\x1F"<>\|:\*\?/]+\.[a-zA-Z]{3,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2551
#T: Alphanumeric Password with Special Character Support
#A: Mike Pillittere
#D: Password length must be between 7 and 20 characters, include at least one alphabetic and one numeric character, and may include some special characters.
(?=^.{7,20}$)(?=.*\d)(?=.*[a-zA-Z])(?!.*\s)[0-9a-zA-Z*$-+?_&=!%{}/'.]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2553
#T: MAX length using regex for Textbox with textmode 'Multiline'
#A: Chandan Kumar
#D: count the space and new line character also .. pass first parameter for minimun and next for maximum character
(.|[\r\n]){1,5}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2554
#T: latitude and logitude in decimal format like google-maps us it in links
#A: Juergen Jungwirth
#D: Allows extraction of values vio name. tested with dotnet 2003.
^(?<lat>(-?(90|(\d|[1-8]\d)(\.\d{1,6}){0,1})))\,{1}(?<long>(-?(180|(\d|\d\d|1[0-7]\d)(\.\d{1,6}){0,1})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2555
#T: UK Postcode (post code)
#A: Jon Bellamy
#D: I used this in C#.NET to check the validity of UK postcode entries.  It successfully matches all acceptable formats (with or without a space) but does not check that the actual postcode is valid due to constant changes.  Hope this helps - Jon
#D: NOTE: If you are not using in .NET yoy may need to replace \d with [0-9], \A with ^, and \Z with $.
\A(([a-zA-Z]{1,2}\d{1,2})|([a-zA-Z]{2}\d[a-zA-Z]{1}))\x20{0,1}\d[a-zA-Z]{2}\Z

#U: http://regexlib.com/REDetails.aspx?regexp_id=2556
#T: Identificaciones Colombia - Cedula
#A: Gustavo Edo. Gil Prado
#D: Colombian identification numbers are a combination of digits, can be 8, 10 or 11 digits long, there is an identity card, which can be 6 digits separated by - and followed by 5 digits
^((\d{8})|(\d{10})|(\d{11})|(\d{6}-\d{5}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2557
#T: Email
#A: Philip
#D: For Email Inputs checks to RFC 5322 Standards (no IP address though Didn't Want them)
#D: localhost:
#D: cannot start or end with .
#D: cannot have .. in it
#D: Domain:
#D: cannot start with - or .
#D: Known problems:
#D: TLDDoesntExist@domain.moc
#D: domains can be longer then 255. But each Domain can only be 63 then a . is required
^[-\w'+*$^&%=~!?{}#|/`]{1}([-\w'+*$^&%=~!?{}#|`.]?[-\w'+*$^&%=~!?{}#|`]{1}){0,31}[-\w'+*$^&%=~!?{}#|`]?@(([a-zA-Z0-9]{1}([-a-zA-Z0-9]?[a-zA-Z0-9]{1}){0,31})\.{1})+([a-zA-Z]{2}|[a-zA-Z]{3}|[a-zA-Z]{4}|[a-zA-Z]{6}){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2558
#T: Email - RFC 2821, 2822 Compliant
#A: Dave Black
#D: According to RFC 2821 (<see cref="http://tools.ietf.org/html/2821"/>)
#D: and RFC 2822 (<see cref="http://tools.ietf.org/html/2822"/>), the local-part
#D: of an email addresses may use any of these ASCII characters:
#D: 1. Uppercase and lowercare letters
#D: 2. The digits 0 through 9
#D: 3. The characters, !#$%&'*+-/=?^_`{|}~
#D: 4. The character "." provided that it is not the first or last character in the local-part.
^((([!#$%&'*+\-/=?^_`{|}~\w])|([!#$%&'*+\-/=?^_`{|}~\w][!#$%&'*+\-/=?^_`{|}~\.\w]{0,}[!#$%&'*+\-/=?^_`{|}~\w]))[@]\w+([-.]\w+)*\.\w+([-.]\w+)*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2559
#T: Phone number
#A: Evgeny Fedotov
#D: Phone number with country prefix +2 or +22 (one or two digits), then City code in parenthesis, like (444)? then phone number 6 to 8 digits and optional extension '#XXX' up to 10 digits
^[+]\d{1,2}\(\d{2,3}\)\d{6,8}(\#\d{1,10})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2560
#T: Ip address
#A: Eugene Zakharov
#D: Accurate IP address verification... Th fist and the fourth numeric part of an IP address must be between 1 and 255. The second and the third numeric part of an IP address must be between 0 and 255. 
(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?|[0])\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?|[0])\.(25[0-5]|2[0-4][0-9]|[1][0-9]?[0-9]?|[1-9][0-9]?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2561
#T: International Phone Number (with optional extension)
#A: Umaisa LLC
#D: This comes from our requirement to have tight clean telephone database column. This expression supports only strict format and none others.It accepts any international country code with optional extension number.
^(\+[0-9]{2,}[0-9]{4,}[0-9]*)(x?[0-9]{1,})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2563
#T: Canada postal code
#A: Nassim Ghods
#D: Matches the Canadian postal code with no space between.
^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]{1}\d{1}[A-Za-z]{1}\d{1}[A-Za-z]{1}\d{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2564
#T: Time hh:mm am/pm
#A: Nassim Ghods
#D: Matches if the string is in hh:mm am/pm format. Also the hour and minute values should have left padding 0's if they are single digit.
^([0][1-9]|[1][0-2]):[0-5][0-9] {1}(AM|PM|am|pm)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2565
#T: Validate password has at least 4 non-alphanumeric characters within it
#A: Charles Forsyth
#D: This RegEx will validate a password that has at least 4 non-alphanumeric characters in it. The characters do not need to be adjacent.
^(?=.*(\W.*){4,}).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2566
#T: DoD CAC Common Name
#A: Brett Peirce
#D: Matches the Common Name (CN) of the subject of a US Department of Defense (DoD) Common Access Card (CAC). In the plain-text part of the client certificate stored on a CAC, a subject, or the person named as the user of the certificate is represented by their Common Name. This regex identifies CNs and groups the parts that represent first and last name and the unique 10-digit identifying number at the end. I optionally matches the middle name or initial and ordinal (or generation) (II,III,IV, etc), if present.
#D: It also accounts for both leading and trailing spaces as well as spaces and dashes within the name parts. It works for all common names I have ever had to deal with, though I do not know where the standard is stated to confirm compliance.
#D: It is formatted for use specifically as validation, but could be modified for search.
^\s*(?<Last>[-A-Za-z ]+)[.](?<First>[-A-Za-z ]+)(?:[.](?<Middle>[-A-Za-z ]+))?(?:[.](?<Ordinal>[IVX]+))?(?:[.](?<Number>\d{10}))\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2567
#T: Indian Passport No Format
#A: Sanjeev Divekar
#D: Indian Passport No Format
^[A-Z]{1}-[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2568
#T: Brazilian Phone Number
#A: Vinicius Herrera
#D: This expression matches brazilian's phone numbers with area codes or not.
^([(][1-9]{2}[)] )?[0-9]{4}[-]?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2569
#T: YouTube Link
#A: Rodrigo Iloro
#D: Validates a YouTube Link
^http://\w{0,3}.?youtube+\.\w{2,3}/watch\?v=[\w-]{11}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2570
#T: Retreive text between parenthesis
#A: Joakim Höglund
#D: This regex will retreive any text between parenthesis characters (including the parenthesis themselfs)
[\(]{1,}((?:(?<t>[^\(]*))[)]{1,})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2571
#T: Retreive text between parenthesis #2
#A: Joakim Höglund
#D: Will find any texts within a string that is enclosed within parenthesis ( )
[\(]{1,}[^)]*[)]{1,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2573
#T: Linux Path Verify
#A: Brandon Vasquez
#D: This expressions was written for C#. Matches all valid Linux absolute paths (files or folders). Will not work for relative paths that do not begin with a /, Also  will only match files that have extensions consisting of 2, 3, or 4 characters. Currently fails with _ . or - in the path, this will be updated at some point.
^/{1}(((/{1}\.{1})?[a-zA-Z0-9 ]+/?)+(\.{1}[a-zA-Z0-9]{2,4})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2574
#T: No. of Identification Card (Slovak Republic)
#A: Juraj Hajdúch (SK)
#D: [en] Every number of Identification Card in SR contains two letters (begin) and six numbers (continue). Number is without spaces.
#D: [sk] Každé císlo obcianskeho preukazu v SR sa musí zacínat dvoma písmenami a pokracuje šiestimi císlicami. Toto císlo neobsahuje medzery.
^(([a-zA-Z]{2})([0-9]{6}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2575
#T: Postal Code (Slovak Republic)
#A: Juraj Hajdúch (SK)
#D: [en] Postal Code in Slovak Republic contains five numbers. Between 3rd and 4th number can be space. [sk] Poštové smerové císlo v Slovenskej Republike má pät císel. Medzi 3. a 4. císlicou môže byt medzera.
^(([0-9]{5})|([0-9]{3}[ ]{0,1}[0-9]{2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2576
#T: Personal identification number (Slovak Republic)
#A: Juraj Hajdúch (SK)
#D: Law 301/1995 z. Z. SR from 14. december 1995. PIN from 1900 to 1953 have sufix with three digits, PIN beyond 1954 have four digits in sufix. In first part of woman PIN is month of birth  (3rd & 4th digit) increase +50.
^([0-9]{2})(01|02|03|04|05|06|07|08|09|10|11|12|51|52|53|54|55|56|57|58|59|60|61|62)(([0]{1}[1-9]{1})|([1-2]{1}[0-9]{1})|([3]{1}[0-1]{1}))/([0-9]{3,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2577
#T: CHMOD #1
#A: Juraj Hajdúch (SK)
#D: no comment :o)
^([0-7]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2578
#T: CHMOD #1 (with/without zero)
#A: Juraj Hajdúch (SK)
#D: no comment :o)
^([0]{0,1}[0-7]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2579
#T: CHMOD #2
#A: Juraj Hajdúch (SK)
#D: no comment :o)
^((\-|d|l|p|s){1}(\-|r|w|x){9})$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2580
#T: CRON (part: date/time of execution)
#A: Juraj Hajdúch (SK)
#D: SUPPORTED constructions:
#D: [*] - all five commands;
#D: [number] - minutes 0...59, hours 0...23, day in month 1...31, months 1...12, day in week 0...7 (0 & 7 is sun);
#D: [*/nubmer] - see construction [number];
#D: [word] - only months (4th command) and days in week (5th command), warning this regexp is case sensitive (lower letters).
#D: NON SUPPORTED constructions:
#D: [number-number] and
#D: [number,number].
^(((([\*]{1}){1})|((\*\/){0,1}(([0-9]{1}){1}|(([1-5]{1}){1}([0-9]{1}){1}){1}))) ((([\*]{1}){1})|((\*\/){0,1}(([0-9]{1}){1}|(([1]{1}){1}([0-9]{1}){1}){1}|([2]{1}){1}([0-3]{1}){1}))) ((([\*]{1}){1})|((\*\/){0,1}(([1-9]{1}){1}|(([1-2]{1}){1}([0-9]{1}){1}){1}|([3]{1}){1}([0-1]{1}){1}))) ((([\*]{1}){1})|((\*\/){0,1}(([1-9]{1}){1}|(([1-2]{1}){1}([0-9]{1}){1}){1}|([3]{1}){1}([0-1]{1}){1}))|(jan|feb|mar|apr|may|jun|jul|aug|sep|okt|nov|dec)) ((([\*]{1}){1})|((\*\/){0,1}(([0-7]{1}){1}))|(sun|mon|tue|wed|thu|fri|sat)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2581
#T: registration number of cars - SPZ (Slovak Republic)
#A: Juraj Hajdúch (SK)
#D: Case sensitive (upper)!
^(B(A|B|C|J|L|N|R|S|Y)|CA|D(K|S|T)|G(A|L)|H(C|E)|IL|K(A|I|E|K|M|N|S)|L(E|C|M|V)|M(A|I|L|T|Y)|N(I|O|M|R|Z)|P(B|D|E|O|K|N|P|T|U|V)|R(A|K|S|V)|S(A|B|C|E|I|K|L|O|N|P|V)|T(A|C|N|O|R|S|T|V)|V(K|T)|Z(A|C|H|I|M|V))([ ]{0,1})([0-9]{3})([A-Z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2582
#T: Chees coordinate
#A: Juraj Hajdúch (SK)
#D: Letter (a - h) + number (1 - 8). Case insensitive.
^([a-hA-H]{1}[1-8]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2583
#T: Tel. number - mobile (Slovak Republic)
#A: Juraj Hajdúch (SK)
#D: no comment
^(([0]{0,1})([1-9]{1})([0-9]{2})){1}([\ ]{0,1})((([0-9]{3})([\ ]{0,1})([0-9]{3}))|(([0-9]{2})([\ ]{0,1})([0-9]{2})([\ ]{0,1})([0-9]{2})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2584
#T: Extract Titles from webpage
#A: Amit kumar sinha
#D: This regular expression can be used to extract titles from web page
<title>(.*?)</title>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2585
#T: Extract script from web page
#A: Amit kumar sinha
#D: Any java script from web page can be extracted using the regular expression
<script[\\.|\\W|\\w]*?</script>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2586
#T: Replace space between words
#A: Amit kumar sinha
#D: this regular expression can be used to replace white space between words
([ ]?[\\*~`!@#\\%\\^\\*\\(\\)_\\-\"\"':;\\,\\.\\?\\-\\+\\{\\}\\/\\& ][ ]?|\\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2587
#T: Extract Feedback score from web page
#A: Amit kumar sinha
#D: Using this regular expression feedback score can be extracted
\\(+\\d{3}|\\d{2}|\\d{1}\\)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2588
#T: Extract date from webpage
#A: Amit kumar sinha
#D: this regular expression can be used to extract the date from webpage
\\s\\d{2}[-]\\w{3}-\\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2589
#T: Extract country from webpage
#A: Amit kumar sinha
#D: this regular expression can be used to extract country code from web page
\\[\\w{2}\\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2590
#T: Extract Price in $
#A: Amit kumar sinha
#D: All the prices available in web page can be extracted
\\$\\d+[.]?\\d*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2591
#T: Replace comment from html page
#A: Amit kumar sinha
#D: the comments on html page can be extracted or removed.
<!--[\\.|\\W|\\w]*?-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=2592
#T: Extract current page number and total page
#A: Amit kumar sinha
#D: Matching pattern like
#D: 1-15 of 15
(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{5})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{4})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{3})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{2})|(\\d{1}-\\d{2}\\s*)(of +)(\\s?\\d{1})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2593
#T: Url pattern matching
#A: Amit kumar sinha
#D: http://www.sell.com/23D2RQ
href\\s*=\\s*\\\"((\\/)([\\w\\-\\.,@?~\\+#]+)*)\\\

#U: http://regexlib.com/REDetails.aspx?regexp_id=2594
#T: Find days and hour from web page
#A: Amit kumar sinha
#D: 82d 10h
\d{1,2}d \d{1,2}h

#U: http://regexlib.com/REDetails.aspx?regexp_id=2595
#T: Country codes ISO 3166-1 (alfa-2)
#A: Juraj Hajdúch (SK)
#D: Table:
#D: http://en.wikipedia.org/wiki/ISO_3166-1
^(A(D|E|F|G|I|L|M|N|O|R|S|T|Q|U|W|X|Z)|B(A|B|D|E|F|G|H|I|J|L|M|N|O|R|S|T|V|W|Y|Z)|C(A|C|D|F|G|H|I|K|L|M|N|O|R|U|V|X|Y|Z)|D(E|J|K|M|O|Z)|E(C|E|G|H|R|S|T)|F(I|J|K|M|O|R)|G(A|B|D|E|F|G|H|I|L|M|N|P|Q|R|S|T|U|W|Y)|H(K|M|N|R|T|U)|I(D|E|Q|L|M|N|O|R|S|T)|J(E|M|O|P)|K(E|G|H|I|M|N|P|R|W|Y|Z)|L(A|B|C|I|K|R|S|T|U|V|Y)|M(A|C|D|E|F|G|H|K|L|M|N|O|Q|P|R|S|T|U|V|W|X|Y|Z)|N(A|C|E|F|G|I|L|O|P|R|U|Z)|OM|P(A|E|F|G|H|K|L|M|N|R|S|T|W|Y)|QA|R(E|O|S|U|W)|S(A|B|C|D|E|G|H|I|J|K|L|M|N|O|R|T|V|Y|Z)|T(C|D|F|G|H|J|K|L|M|N|O|R|T|V|W|Z)|U(A|G|M|S|Y|Z)|V(A|C|E|G|I|N|U)|W(F|S)|Y(E|T)|Z(A|M|W))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2596
#T: Country codes ISO 3166-1 (alfa-3)
#A: Juraj Hajdúch (SK)
#D: Table:
#D: http://en.wikipedia.org/wiki/ISO_3166-1.
^(A(BW|FG|GO|IA|L(A|B)|N(D|T)|R(E|G|M)|SM|T(A|F|G)|U(S|T)|ZE)|B(DI|E(L|N)|FA|G(D|R)|H(R|S)|IH|L(M|R|Z)|MU|OL|R(A|B|N)|TN|VT|WA)|C(A(F|N)|CK|H(E|L|N)|IV|MR|O(D|G|K|L|M)|PV|RI|UB|XR|Y(M|P)|ZE)|D(EU|JI|MA|NK|OM|ZA)|E(CU|GY|RI|S(H|P|T)|TH)|F(IN|JI|LK|R(A|O)|SM)|G(AB|BR|EO|GY|HA|I(B|N)|LP|MB|NQ|NB|R(C|D|L)|TM|U(F|M|Y))|H(KG|MD|ND|RV|TI|UN)|I(DN|MN|ND|OT|R(L|N|Q)|S(L|R)|TA)|J(AM|EY|OR|PN)|K(AZ|EN|GZ|HM|IR|NA|OR|WT)|L(AO|B(N|R|Y)|CA|IE|KA|SO|TU|UX|VA)|M(A(C|F|R)|CO|D(A|G|V)|EX|HL|KD|L(I|T)|MR|N(E|G|P)|OZ|RT|SR|TQ|US|WI|Y(S|T))|N(AM|CL|ER|FK|GA|I(C|U)|LD|OR|PL|RU|ZL)|OMN|P(A(K|N)|CN|ER|HL|LW|NG|OL|R(I|K|T|Y)|SE|YF)|QAT|R(EU|OU|US|WA)|S(AU|DN|EN|G(P|S)|HN|JM|L(B|E|V)|MR|OM|PM|RB|TP|UR|V(K|N)|W(E|Z)|Y(C|R))|T(C(A|D)|GO|HA|JK|K(L|M)|LS|ON|TO|U(N|R|V)|WN|ZA)|U(EN|GA|KR|MI|RY|SA|ZB)|V(AT|CT|GB|IR|NM|UT)|W(LF|SM)|YEM|Z(AF|MB|WE))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2597
#T: Country codes ISO 3166-1 (numeric)
#A: Juraj Hajdúch (SK)
#D: Table:
#D: http://en.wikipedia.org/wiki/ISO_3166-1.
^(0(0(4|8)|1(0|2|6)|2(0|4|8)|3(1|2|6)|4(0|4|8)|5(0|1|2|6)|6(0|4|8)|7(0|2|4|6)|8(4|6)|9(0|2|6))|1(0(0|4|8)|1(2|6)|2(0|4)|3(2|6)|4(0|4|8)|5(2|6)|6(2|6)|7(0|4|5|8)|8(0|4|8)|9(1|2|6))|2(0(3|4|8)|1(2|4|8)|2(2|6)|3(1|2|3|4|8|9)|4(2|4|8)|5(0|4|8)|6(0|2|6|8)|7(0|5|6)|88|9(2|6))|3(0(0|4|8)|1(2|6)|2(0|4|8)|3(2|4|6)|4(0|4|8)|5(2|6)|6(0|4|8)|7(2|6)|8(0|4|8|9)|92)|4(0(0|4|8)|1(0|4|7|8)|2(2|6|8)|3(0|4|8)|4(0|2|6)|5(0|4|8)|6(2|6)|7(0|4|8)|8(0|4)|9(2|6|8|9))|5(0(0|4|8)|1(2|6)|2(0|4|8)|3(0|3)|4(0|8)|5(4|8)|6(2|6)|7(0|4|8)|8(0|1|3|4|5|6)|9(1|8))|6(0(0|4|8)|1(2|6)|2(0|4|6)|3(0|4|8)|4(2|3|6)|5(2|4|9)|6(0|2|3|6)|7(0|4|8)|8(2|6|8)|9(0|4))|7(0(2|3|4|5|6)|1(0|6)|24|3(2|6)|4(0|4|8)|5(2|6)|6(0|4|8)|7(2|6)|8(0|4|8)|9(2|5|6|8))|8(0(0|4|7)|26|3(1|2|3|4)|40|5(0|8)|6(0|2)|76|8(2|7)|94))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2598
#T: HTML - XHTML - XML - Xblahblahblah comment
#A: Juraj Hajdúch (SK)
#D: $i = comment; $2 = X or NO-X;
^<\!\-\-(.*)+(\/){0,1}\-\->$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2599
#T: PORTS 1 - 65536
#A: Juraj Hajdúch (SK)
#D: Communication ports in PC between 1 - 65536.
^([1-9]{1}|[1-9]{1}[0-9]{1,3}|[1-5]{1}[0-9]{4}|6[0-4]{1}[0-9]{3}|65[0-4]{1}[0-9]{2}|655[0-2]{1}[0-9]{1}|6553[0-6]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2600
#T: CSS color
#A: Juraj Hajdúch (SK)
#D: This reg. exp. is ignore color names. Supported only hexadecimal with 3 or 6 chars (with or only prefix #); rgb syntax (0-255) and rgb syntax with % (0-100).
^([\#]{0,1}([a-fA-F0-9]{6}|[a-fA-F0-9]{3})|rgb\(([0-9]{1},|[1-9]{1}[0-9]{1},|[1]{1}[0-9]{2},|[2]{1}[0-4]{1}[0-9]{1},|25[0-5]{1},){2}([0-9]{1}|[1-9]{1}[0-9]{1}|[1]{1}[0-9]{2}|[2]{1}[0-4]{1}[0-9]{1}|25[0-5]{1}){1}\)|rgb\(([0-9]{1}%,|[1-9]{1}[0-9]{1}%,|100%,){2}([0-9]{1}%|[1-9]{1}[0-9]{1}%|100%){1}\))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2601
#T: Replace spaces with " AND " for Full Text query
#A: Charles Forsyth
#D: This regular expression is used to replace all spaces between words that are not within quotes or already next to AND|OR|AND NOT
(?<!and\snot|and|not|or)\s+(?!(and\snot|or|-)|([^"]*"[^"]*")*[^"]*"[^"]*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2602
#T: Find words or phrases
#A: Charles Forsyth
#D: RegEx parses out all whole words, phrases within quotes or parentheses.
\"[^"]+\"|\([^)]+\)|[^\"\s\()]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2603
#T: Match words not in quotes or are AND OR NOT
#A: Charles Forsyth
#D: This regex will match all words in a search term entered by a user. This ignores words within double quotes and also ignores the words "AND" "OR" or "NOT". I use this to add double quotes around each word for full text query building.
(?!\bnot\b|\band\b|\bor\b|\b\"[^"]+\"\b)((?<=\s|\-|\(|^)[^\"\s\()]+(?=\s|\*|\)|$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2604
#T: currency EURO
#A: Juraj Hajdúch (SK)
#D: Supported symbols are € or EUR or EURO (all case sensitive).
^(0|(([1-9]{1}|[1-9]{1}[0-9]{1}|[1-9]{1}[0-9]{2}){1}(\ [0-9]{3}){0,})),(([0-9]{2})|\-\-)([\ ]{1})(€|EUR|EURO){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2605
#T: MySQL 5.1 charset
#A: Juraj Hajdúch (SK)
#D: supported all charsets in MySQL 5.1, case sensitive (lower)
^(big5|euc(kr|jpms)|binary|greek|tis620|hebrew|ascii|swe7|koi8(r|u)|(u|keyb)cs2|(dec|hp|utf|geostd|armscii)8|gb(k|2312)|cp(8(5(0|2)|66)|932|125(0|1|6|7))|latin(1|2|5|7)|(u|s)jis|mac(ce|roman))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2606
#T: MySQL 5.1 collate
#A: Juraj Hajdúch (SK)
#D: supported all collates for all charsets in MySQL 5.1, case sensitive (lower)
^((ucs2|utf8)\_(bin|(general|unicode|roman|slovak|czech|icelandic|(latv|pers)ian|(dan|pol|span|swed|turk)ish|spanish2|(esto|lithua|roma|slove)nian\_ci)))|((mac(ce|roman)|cp(8(5(0|2)|66)|1256)|armscii8|geostd8|ascii|keybcs2|greek|hebrew|koi8(r|u))\_(bin|general\_ci))|((dec8|swe7)\_(bin|swedish\_ci))|((hp8|latin5)\_(bin|english\_ci))|((big5|gb(2312|k))\_(bin|chinese\_ci))|((cp932|eucjpms|(s|u)jis)\_(bin|japanese\_ci))|(euckr\_(bin|korean\_ci))|(tis620\_(bin|thai\_ci))|(latin1\_(bin|(((dan|span|swed)ish|german(1|2))\_ci)|general\_(ci|cs)))|(cp1250\_(bin|czech\_cs|general\_ci))|(latin2\_(bin|czech\_cs|(general|hungarian|croatian)\_ci))|(cp1257\_(bin|(general|lithuanian)\_ci))|(latin7\_(bin|general\_(c(i|s))|estonian\_cs))|(cp1251\_(bin|(general|bulgarian|ukrainian)\_ci|general\_cs))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2607
#T: 身分證格式
#A: Leo
#D: Persional identify number(TW)
^[a-zA-Z](1|2)\d{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2608
#T: Email validation
#A: Chandan Kumar
#D: To validate an Email ID
\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2609
#T: javascript function
#A: Omar Gamil
#D: detect javascript function in HTML
function[\s]+[\S]+[\s]*([\s]*)[\s]*{[\s]*([\S]|[\s])*[\s]*}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2610
#T: FR (French) VAT Number
#A: Ayhan Yerli
#D: 0 or one FR +
#D: 0 or one space +
#D: 11 characters (that may include alphabetical characters - any except O or I (first or second or first and second))
#D: 12345678901 -
#D: X1234567890 -
#D: 1X123456789 -
#D: XX123456789 -
#D: . 
^(FR)?\s?[A-Z0-9-[IO]]{2}[0-9]{9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2611
#T: DENMARK (DK) VAT Number
#A: Ayhan Yerli
#D: Danish VAT Number
#D: 1 block of 8 digits: DK 12345678  OR
#D: 4 blocks of 2 digits:DK 12 34 56 78
^(DK)?\s?(([0-9]{2}\s[0-9]{2}\s[0-9]{2}\s[0-9]{2})|[0-9]{8})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2612
#T: Regular Expression for Phone Numbers in the US
#A: sebastian frohm
#D: I was looking for a regex that allows pretty much any combo of a US phone number. I found some that covered most of the bases, but not all of them.
#D: This regex allows for missing characters, periods, hyphens. It should cover most of the bases. If not, let me know! I want to make it better!
^(1)?(-|.)?(\()?([0-9]{3})(\))?(-|.)?([0-9]{3})(-|.)?([0-9]{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2613
#T: TimeStamp
#A: Danny
#D: Its validates a time stamp
^[1-9]{1}[0-9]{3}-(0[1-9]{1}|1[0-2]{1})-([0-2]{1}[1-9]{1}|3[0-1]{1}) ([0-1]{1}[0-9]{1}|2[0-3]{1}):[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2614
#T: US Currency
#A: Faiz Shaikh
#D: This Expression is used to Validate the US curreny.
\$(\d)*\d

#U: http://regexlib.com/REDetails.aspx?regexp_id=2615
#T: Number or Range of numbers
#A: Dave K
#D: For numbers such as 27 or a range using spaces and/or a hyphen such as 5 - 10 (meaning between 5 and 10).
^(\d*\s*\-?\s*\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2616
#T: Strong Password
#A: Sathishkumar
#D: Password must have at least 8 characters and maximum of 15 characters with at least one Capital letter, at least one lower case letter and at least one number.Special character is optional. Special characters ",;&|' not allowed.
(?=^.{8,15}$)((?!.*\s)(?=.*[A-Z])(?=.*[a-z])(?=(.*\d){1,}))((?!.*[",;&|'])|(?=(.*\W){1,}))(?!.*[",;&|'])^.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2617
#T: Parse & Extract Filename Parts
#A: Matthew
#D: Simple (non-validating) match with numbered group captures that extracts parts of a filename into $1 = folder path, $2 = filename w/o extension, $3 = extension. Should work on Windows, OS X, and Unix/Linux, but not on OS 9 and OSs with folder separators other than slashes (either direction). Tested only on .NET RE engine.
^(.*?)([^/\\]*?)(\.[^/\\.]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2618
#T: Positive Integer
#A: Vineet Gupta
#D: REGULAR EXPRESSION TO CHECK ONLY POSITIVE INTEGERS
^([1-9]+[0-9]* | [1-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2620
#T: 01/01/1753 - 12/31/9999
#A: Ecyrb
#D: Matches all dates (mm/dd/yyyy or mm/dd/yy) greater than or equal to the SQL minimum date of 01/01/1753 and less than or equal to 12/31/9999.  Does not check for leap years.  
^(0?[1-9]|1[0-2])\/(0?[1-9]|[1-2][0-9]|3[0-1])\/(0[1-9]|[1-9][0-9]|175[3-9]|17[6-9][0-9]|1[8-9][0-9]{2}|[2-9][0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2621
#T: Time 24:00 hrs format
#A: VenkatRaj
#D: The Regular Expression to  validate time format in [24:00] hrs.
#D: >> Pemitted values from 00:00 to 23:59
#D: >> Prefix zero for single digit hours 01:00 to 09:59
#D: >> Tested & Certified by Mr. Shripad Pramod Bhende :-)
^(([01][0-9]|[012][0-3]):([0-5][0-9]))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2622
#T: Date Format
#A: VenkatRaj
#D: Regular Expression to validate date in MM/DD/YYYY format.
#D: >> Permitted formats "1/1/2008” or “01/01/2008” or “01/1/2008” or 1/01/2008”
(([1-9]|[0][1-9])|1[012])[- /.](([1-9]|[0][1-9])|[12][0-9]|3[01])[- /.](19|20)\d\d

#U: http://regexlib.com/REDetails.aspx?regexp_id=2623
#T: IP V4 and IP V6 Validate
#A: gan068
#D: validate both IP V4 and IP V6
^\d{1,3}((\.\d{1,3}){3}|(\.\d{1,3}){5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2624
#T: Trim HTML tags with content
#A: Mukundhan (India)
#D: This regex will remove the HTML tags with content
<(.|\n)*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2625
#T: netmask address
#A: ogge ogge
#D: netmask address. I know this is nod good enough :)
^(((0|128|192|224|240|248|252|254).0.0.0)|(255.(0|128|192|224|240|248|252|254).0.0)|(255.255.(0|128|192|224|240|248|252|254).0)|(255.255.255.(0|128|192|224|240|248|252|254)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2626
#T: ip address / netmask
#A: ogge ogge
#D: ip address/netmask couple
^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})(/([0-9]|[0-2][0-9]|3[0-2]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2627
#T: Doubled word/character  - Replace with single word
#A: Mukundhan (India)
#D: "one one" can be replaced with "one". This RE will help you in removing the duplicated successor with single word or character. The replacement string will be $1
\b([A-Za-z]+) +(\1\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2628
#T: E-mail validation
#A: Viktor Nagy
#D: This will validate most legal e-mail adresses with the correct syntax.
^[a-zA-Z][a-zA-Z0-9_\.\-]+@([a-zA-Z0-9-]{2,}\.)+([a-zA-Z]{2,4}|[a-zA-Z]{2}\.[a-zA-Z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2629
#T: Website validation
#A: Viktor Nagy
#D: This will validate most legal websites, including ftp.
^((http|https|ftp):\/\/(www\.)?|www\.)[a-zA-Z0-9\_\-]+\.([a-zA-Z]{2,4}|[a-zA-Z]{2}\.[a-zA-Z]{2})(\/[a-zA-Z0-9\-\._\?\&=,'\+%\$#~]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2630
#T: Website validation
#A: Viktor Nagy
#D: This will validate most legal websites, including ftp.
#D: double-post, please delete me
^((http|https|ftp):\/\/(www\.)?|www\.)[a-zA-Z0-9\_\-]+\.([a-zA-Z]{2,4}|[a-zA-Z]{2}\.[a-zA-Z]{2})(\/[a-zA-Z0-9\-\._\?\&=,'\+%\$#~]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2631
#T: Tel Validation
#A: Viktor Nagy
#D: This validates most telephone numbers in Sweden.
^(([0-9]{3})[-]?)*[0-9]{6,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2632
#T: UK residential phone numbers
#A: Antony Kennedy
#D: Matches valid UK residential telephone numbers in all expected formats, including international.
^(?:\(\+?44\)\s?|\+?44 ?)?(?:0|\(0\))?\s?(?:(?:1\d{3}|7[1-9]\d{2}|20\s?[78])\s?\d\s?\d{2}[ -]?\d{3}|2\d{2}\s?\d{3}[ -]?\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2633
#T: Token Words
#A: Derik Palacino
#D: Matches token words based on the use of a "$" (USD) prefix.
(\$(([0-9]?)[a-zA-Z]+)([0-9]?))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2634
#T: South Africa Cell Mobile Telephone Number
#A: Leon Coetsee
#D: Allows most formats for entering valid South African mobile / cellular phone numbers.
^(\+27|27)?(\()?0?[87][23467](\))?( |-|\.|_)?(\d{3})( |-|\.|_)?(\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2635
#T: .NET RegEx mm/dd/yyyy date validation
#A: Ken Fayal
#D: I needed to have a way where users could type in any date format like the following:  mm/dd/yyyy, mm/dd/yy, mmddyy, mmddyyyy with the ability to use "/" and "." and "-" or nothing as separation characters.  I use this in a RegularExpression Validator control in ASP.NET
\b(((0[13578]|1[02])[\/\.-]?(0[1-9]|[12]\d|3[01])[\/\.-]?(19|20)?(\d{2}))|(0[13456789]|1[012])[\/\.-]?(0[1-9]|[12]\d|30)[\/\.-]?(19|20)?(\d{2}))|(02[\/\.-]?(0[1-9]|1\d|2[0-8])[\/\.-]?(19|20)?(\d{2}))|(02[\/\.-]?29[\/\.-]?(19|20)?((0[48]|[2468][048]|[13579][26])|(00)))\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2636
#T: Column name
#A: Boris Modylevsky
#D: This regular expression is very useful, when it's required to validate a database column name, for example CUSTOMER_NAME, ORDER_ID or even ITEM2
^[A-Z]+[A-Z0-9,\x5F]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2637
#T: hour/minute
#A: david roncancio
#D: regular expresion to evalute time
(^([1-9]|[1][0-2]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([1-9]|[1][0-2])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2638
#T: U.S. Social Security Numbers
#A: John Stoker
#D: Searches for US SSNs that have either a white space, ".", ",", or "=" in front and either a white space, ".", or "," at the end. Ensures that sets are separated with the same format (either spaces, dashes, or nothing).
[/,,/.,/=,\s]([0-6]\d{2}|7[0-6]\d|77[0-2])(\s|\-)?(\d{2})\2(\d{4})[/,,/.,\s]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2639
#T: SQL Parameter
#A: Sean Arme
#D: Can be used to find SQL Server parmeters in a SQL string.  Does not attempt to weed-out "@" characters in embedded string values.
@([_a-zA-Z]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2640
#T: Length Validator
#A: chanaka
#D: This will not allow user to enter more than 5 characters. The "Enter" is also allow to user.
^(.\n){0,5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2641
#T: DateTime type format
#A: João Batista Neto
#D: Will match a date accepted by MySQL datetime type.
#D: Years with 2 or 4 digits from any range.
#D: Months with 2 digits from 00 to 12.
#D: days with 2 digits from 00 to 31.
#D: Hours with 2 digits from 00-23
#D: Minutes with 2 digits from 00 to 59.
#D: Seconds with 2 digits from 00 to 59.
(\d{2}|\d{4})(?:\-)?([0]{1}\d{1}|[1]{1}[0-2]{1})(?:\-)?([0-2]{1}\d{1}|[3]{1}[0-1]{1})(?:\s)?([0-1]{1}\d{1}|[2]{1}[0-3]{1})(?::)?([0-5]{1}\d{1})(?::)?([0-5]{1}\d{1})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2642
#T: Byte type
#A: João Batista Neto
#D: Not just a number, a byte type. Will match any number from range -128 to 127.
^(0|[-]{1}([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-8]{1}))|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-7]{1})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2643
#T: Unsigned Byte type
#A: João Batista Neto
#D: Will match an unsigned byte, from range 0 to 255
(0|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}[0-9]{0,2}|[2]{1}([0-4]{1}[0-9]{1}|[5]{1}[0-5]{1})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2644
#T: Short type
#A: João Batista Neto
#D: Short type, will match a short number from range -32768 to 32767.
^(0|[-]{1}([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-8]{1})))))|(\+)?([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-7]{1}))))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2645
#T: Unsigned Short Type
#A: João Batista Neto
#D: Will match an unsigned short number from range 0 to 65535
^(0|(\+)?([1-9]{1}[0-9]{0,3})|([1-5]{1}[0-9]{1,4}|[6]{1}([0-4]{1}[0-9]{3}|[5]{1}([0-4]{1}[0-9]{2}|[5]{1}([0-2]{1}[0-9]{1}|[3]{1}[0-5]{1})))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2646
#T: Int type
#A: João Batista Neto
#D: Will match any integer from range -2147483648 to 2147483647.
(0|[1-9]{1}[0-9]{0,8}|[1]{1}[0-9]{1,9}|[-]{1}[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-8]{1}))))))))|(\+)?[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-7]{1})))))))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2647
#T: Unsigned Int type
#A: João Batista Neto
#D: Will match any unsigned integer from range 0 to 4294967295
^(0|(\+)?[1-9]{1}[0-9]{0,8}|(\+)?[1-3]{1}[0-9]{1,9}|(\+)?[4]{1}([0-1]{1}[0-9]{8}|[2]{1}([0-8]{1}[0-9]{7}|[9]{1}([0-3]{1}[0-9]{6}|[4]{1}([0-8]{1}[0-9]{5}|[9]{1}([0-5]{1}[0-9]{4}|[6]{1}([0-6]{1}[0-9]{3}|[7]{1}([0-1]{1}[0-9]{2}|[2]{1}([0-8]{1}[0-9]{1}|[9]{1}[0-5]{1})))))))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2648
#T: Compare Number 0-9
#A: Shahbaz Akram
#D: It will compare no. from zero to Nine lenght == 2
"^[0-9]{2}"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2649
#T: Test Details Pattern Title 
#A: Shahbaz Akram
#D: Simple expression to validate PassCode
^[1-9][0-9]{3}$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2650
#T: IP Address Validator
#A: Frank Tanner
#D: This regex expression validates IP addresses when processed as a string.
\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2651
#T: Manage negative double integer with four decimal
#A: yk
#D: Manage negative double integer with four decimal
^[-]?[0-9]*\.?[0-9]?[0-9]?[0-9]?[0-9]?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2652
#A: Rakesh (www.Zed-Axis.com) 
#D: Phone numbers validation for all country and allow all format for phone no ,contact no .
[()+-.0-9]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2653
#T: UK Postcodes (tight and validated)
#A: Stephen Turner
#D: This is the tightest uk postcode validator I can come up with, I have copy of Royal Mail's PAF (Postal Address File) and I've confirmed that it will correctly validate all 1.75 million distinct postcodes.
#D: I figure this regex will accept 54 million strings as valid, which gives a 30:1 false accept ratio, the best I can do.
#D: I'll endeavour to keep it up to date with new post codes.
#D: I've deliberately excluded special cases, These can be added as simple alternates.
#D: 2009-06-05 Improved: Replaced all numbered captured groups with 6 named capture groups (I Incode, O Outcode, d District, s Sector, a Area, u Unit) for separating postcode parts. Also removed begin (^) and end ($) positioning characters ST
(?<O>(?<d>[BEGLMNS]|A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)(?<a>\d\d?)|(?<d>E)(?<a>\dW)|(?<d>EC)(?<a>\d[AMNPRVY0])|(?<d>N)(?<a>\dP)|(?<d>NW)(?<a>\dW)|(?<d>SE)(?<a>\dP)|(?<d>SW)(?<a>\d[AEHPVWXY])|(?<d>W)(?<a>1[0-4A-DFGHJKSTUW])|(?<d>W)(?<a>[2-9])|(?<d>WC)(?<a>[12][ABEHNRVX]))\ (?<I>(?<s>\d)(?<u>[ABD-HJLNP-UW-Z]{2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2654
#T: Canadian Postal Code
#A: Sheir Ali
#D: Matches the Canadian postal code with or without space between.
#D: Also matches uppercase and lower case letters.
^[ABCEGHJKLMNPRSTVXYabceghjklmnprstvxy]{1}\d{1}[A-Za-z]{1}[ ]{0,1}\d{1}[A-Za-z]{1}\d{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2655
#T: Test
#A: Nguyen Hoang Vu
#D: Check valid of input type 2:3,3:4....
([*,1-9]:[1-9]){1}(,([*,1-9]:[1-9]){0,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2656
#T: Password
#A: Timothy Dutton
#D: Password must be 6-40 characters - {6,40}
#D: Must have no spaces, at least 1 digit (?=.*[\d]), at least 1 uppercase letter (?=.*[A-Z]) and at least one lowercase letter (?=.*[a-z]).
#D: Allows specifying special characters - !@#$%_
^(?=.*[\d])(?=.*[A-Z])(?=.*[a-z])[\w\d!@#$%_]{6,40}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2657
#T: Hours (hours:minutes:seconds)
#A: Thaynã B. Moretti
#D: Validate hours with seconds returning mirrors correctly.
^([0-1][0-9]|[2][0-3]|[0-9]):([0-5][0-9])(?::([0-5][0-9]))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2658
#T: Date format
#A: Thaynã B. Moretti
#D: Validate a date format: d/m/Y.
#D: See examples.
^([0-2]\d|3[0-1]|[1-9])\/(0\d|1[0-2]|[1-9])\/(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2659
#T: subtitles SRT - timestamp
#A: Juraj Hajdúch (SK)
#D: e. g. HH:MM:SS:ttt --> HH:MM:SS:ttt;
#D: $1 is start hour;
#D: $2 is start minute;
#D: $3 is start second;
#D: $4 is start s/1000;
#D: $5 is stop hour;
#D: $6 is stop minute;
#D: $7 is stop second;
#D: $8 is stop s/1000;
^([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1} --> ([0-1][0-9]|2[0-3]){1}:([0-5][0-9]){1}:([0-5][0-9]){1},([0-9][0-9][0-9]){1}(.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2660
#T: subtitles SUB - timestamp
#A: Juraj Hajdúch (SK)
#D: e. g. {11510}{11810}Blah, blah, blah.;
#D: $1 is start;
#D: $2 is stop;
^\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\}\{([1-9]{1}|[1-9]{1}[0-9]{1,}){1}\}(.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2661
#T: Text Between Double Quotes
#A: Chandan Kumar
#D: to get the text betwwen double quotes
"([^\\"]|\\.)*"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2662
#T: Day 01 to 31 and 1 to 31
#A: Christophe Perreau
#D: test for valid day, 01 to 31 and 1 to 31
^[0-2]?[1-9]{1}$|^3{1}[01]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2663
#T: French Letters
#A: ReallyNobody
#D: This will match all LOWERCASE French Characters encoded in !!!UTF-8 ONLY!!!
#D: Add /i to ignore lowercase and match all chars
[a-zà-ïò-öù-ü]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2664
#T: Regular Expression to check dollar amount with maximum of 20 numbers
#A: Moiz Tankiwala
#D: This expression will allow whole dollar amounts (along with $ and ,) which are 20 digit wide. So the maximum amount will be $99,999,999,999,999,999,999. Note: This regular expression allows skipped commas, but will not allow multiple or commas at the wrong location. This can be used for all languages that have comma before the 3rd, 6th, 9th... digit.
^(\$?)((\d{1,20})|(\d{1,2}((,?\d{3}){0,6}))|(\d{3}((,?\d{3}){0,5})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2665
#T: Canadian Postal Code
#A: Michel Verrier
#D: Take in account the fact that the first letter cannot be a w or a z  moreover the fact that letters cannot be any of DFIOQU
^([a-z-[dfioquwz]]|[A-Z-[DFIOQUWZ]])\d([a-z-[dfioqu]]|[A-Z-[DFIOQU]])(\s)?\d([a-z-[dfioqu]]|[A-Z-[DFIOQU]])\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2666
#T: IPv6地址
#A: hackvssec
#D: support compression and mixed IPv6/IPv4 addresses
^([\da-fA-F]{1,4}:){6}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^::([\da-fA-F]{1,4}:){0,4}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:):([\da-fA-F]{1,4}:){0,3}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){2}:([\da-fA-F]{1,4}:){0,2}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){3}:([\da-fA-F]{1,4}:){0,1}((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){4}:((25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(25[0-5]|2[0-4]\d|[01]?\d\d?)$|^([\da-fA-F]{1,4}:){7}[\da-fA-F]{1,4}$|^:((:[\da-fA-F]{1,4}){1,6}|:)$|^[\da-fA-F]{1,4}:((:[\da-fA-F]{1,4}){1,5}|:)$|^([\da-fA-F]{1,4}:){2}((:[\da-fA-F]{1,4}){1,4}|:)$|^([\da-fA-F]{1,4}:){3}((:[\da-fA-F]{1,4}){1,3}|:)$|^([\da-fA-F]{1,4}:){4}((:[\da-fA-F]{1,4}){1,2}|:)$|^([\da-fA-F]{1,4}:){5}:([\da-fA-F]{1,4})?$|^([\da-fA-F]{1,4}:){6}:$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2667
#T: Simple Password
#A: Greg Gamble
#D: Check Password: 5 - 10 characters long, start with a letter and contain at least one number. No special characters
^([a-zA-Z])(?=.*\d)\w{4,9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2668
#T: Find Unicode character entities
#A: Brooks
#D: Finds unicode character entities like ‘ (‘ - Left Single Quotation Mark).
\046#\d*;

#U: http://regexlib.com/REDetails.aspx?regexp_id=2669
#T: Domain Name
#A: Vinod Kumar Bhasyam
#D: It Accepts hyphen in the domain name
^\w*[-]*\w*\\\w*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2670
#T: Match range from 4.00 to 6.99
#A: Shiva Harris
#D: Can be used to match numbers in a range, with 2 decimal points. You can change the [4-6] to expand or contract the range of numbers.
\b0*[4-6]\b(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2671
#T: Bloog Group
#A: Sourjya Sankar Sen
#D: Matches all currently known positive and negative blood groups, i.e. A+, A-, B+, B-, O+, O-, AB+, AB-
(A|B|AB|O)[+-]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2672
#T: Clean Domain Name
#A: Matthew Harris
#D: This regex only matches clean domain names. No path after. Ends in a forward slash. Starts with http://www. It is pretty slack on the TLD requiring a 2 or 3 letter ending. This part could be tightened up if you wanted to be restrict it to specific TLDs.
^http\://www.[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}/$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2674
#T: Match File Extension
#A: Akoi Meexx
#D: Pattern matches all file extensions from two(2) to five(5) characters in length (e.g. Adobe Illustrator [*.ai] or Extensible Hypertext Markup Language [*.xhtml]). Input can be an absolute path, relative path, URI, directory path, etc. If there are get variables in a URI input, they are ignored.
\.([A-Za-z0-9]{2,5}($|\b\?))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2675
#T: Parse ISO8601 Dates into parts
#A: Charles Forsyth
#D: This regular expression will parse an ISO8601 date into it's individual parts.
(\d\d\d\d)-?(\d\d)-?(\d\d)T?(\d\d):?(\d\d)(?::?(\d\d)(\.\d+)*?)?(Z|[+-])(?:(\d\d):?(\d\d))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2676
#T: PayPal IPN Timestamp
#A: Brad Williams
#D: Breaks a PayPal IPN (instant payment notification) into it's respective parts via Groups.
^(?<hours>\d{2}):(?<minutes>\d{2}):(?<seconds>\d{2}) (?<month>[a-zA-Z]{3}) (?<day>\d{1,}), (?<year>\d{4}) (?<timezone>[a-zA-Z]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2677
#T: JavaScript Date.toString() Timestamp
#A: Brad Williams
#D: Breaks JavaScript Date.toString() out into groups to allow easy reassembly. Works in FireFox 3.0.8, IE 8, Maxthon, Safari, and Chrome
^(?<dayOfWeek>\w{3}) (?<monthName>\w{3}) (?<day>\d{1,2}) (?<year>\d{4})? ?(?<hours>\d{1,2}):(?<minutes>\d{1,2}):(?<seconds>\d{1,2}) (GMT|UTC)(?<timeZoneOffset>[-+]?\d{4}) (?<year>\d{4})?\(?(?<timeZoneName>[a-zA-Z\s]+)?\)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2678
#T: UK Phone Number in 4-3-4 Format
#A: Matthew Harris
#D: Allows dashes or spaces to separate.
^[\d]{4}[-\s]{1}[\d]{3}[-\s]{1}[\d]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2679
#T: UK Phone Number in 5-3-3 Format
#A: Matthew Harris
#D: Allows dashes or spaces to separate.
^[\d]{5}[-\s]{1}[\d]{3}[-\s]{1}[\d]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2680
#T: UK Phone Number in 5-2-2-2 Format
#A: Matthew Harris
#D: Allows dashes or spaces to separate.
^[\d]{5}[-\s]{1}[\d]{2}[-\s]{1}[\d]{2}[-\s]{1}[\d]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2681
#T: UK Phone Number in 5-4-2 Format
#A: Matthew Harris
#D: Allows dashes or spaces to separate.
^[\d]{5}[-\s]{1}[\d]{4}[-\s]{1}[\d]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2682
#T: UK Phone Number in 5-2-4 Format
#A: Matthew Harris
#D: Allows dashes or spaces to separate.
^[\d]{5}[-\s]{1}[\d]{2}[-\s]{1}[\d]{4}$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2683
#T: Signed Integer
#A: jteeuwen
#D: Single- or multi-digit signed Integer.
^[+-]?[0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2684
#T: Decimal Number
#A: jteeuwen
#D: Matches any integer or decimal number with either dot (.) or comma (,) as decimal- and thousands-separator. Also accepts Scientific notation.
^[+-]?\d*(([,.]\d{3})+)?([,.]\d+)?([eE][+-]?\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2685
#T: ipv4 IP Address
#A: jteeuwen
#D: This matches any valid IPV4 IP Address. It includes 0-255 range checks since none of the IP components may exceed 255.
^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2686
#T: LastName , Name 
#A: Gabriel Jara
#D: Separa <Apellidos>, <Nombres>
^(?n:(?<Apellidos>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,4})?[\s,\s]*(?<Nombres>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,4})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2687
#T: Images FileUpload Control
#A: Gaurav Agrawal
#D: By using this we can upload only images files. This is the simplest and its execution is fast.
^.*([^\.][\.](([gG][iI][fF])|([Jj][pP][Gg])|([Jj][pP][Ee][Gg])|([Bb][mM][pP])|([Pp][nN][Gg])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2688
#T: China Drug Spam Blocked
#A: Tuncay BAS
#D: China Drug Spam Blocked
[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9]\.[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9][\.][cn]{2,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2689
#T: Hexadecimal Colour
#A: jteeuwen
#D: Matches any valid 3 or 6 digit hexadecimal colour value.
^#?(([a-fA-F0-9]{3}){1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2690
#T: IPv6 Address
#A: jteeuwen
#D: This matches all valid forms of an IPv6 address. Including the compatibility form used to map IPv4 addresses. As well as the base-85 encoded integer form.
#D: It takes care of value range checking on the ipv4 part (components cannot exceed 0-255).
#D: This has been tested quite thoroughly, but considering the complexity and possibilities in the formation of an IPv6 address, matching errors are not guaranteed to be absent.
(^\d{20}$)|(^((:[a-fA-F0-9]{1,4}){6}|::)ffff:(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$)|(^((:[a-fA-F0-9]{1,4}){6}|::)ffff(:[a-fA-F0-9]{1,4}){2}$)|(^([a-fA-F0-9]{1,4}) (:[a-fA-F0-9]{1,4}){7}$)|(^:(:[a-fA-F0-9]{1,4}(::)?){1,6}$)|(^((::)?[a-fA-F0-9]{1,4}:){1,6}:$)|(^::$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2691
#T: Split by period/full-stop outside of quotes
#A: Tom Brewer
#D: This is intended to split a string by full stop except when inside a pair of quotes.
\.(?=([^"]*"[^"]*")*(?![^"]*"))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2692
#T: Match by period/full-stop outside of nested brackets
#A: Tom Brewer
#D: Matches groups separated by period/full-stop when outside of one or more balanced and/or nested pairs of brackets (i.e. top level processing).
#D: Note: This may only work with the .Net regex engine due to using stack push/pop
[^.]*\((?>[^()]+|\((?<DEPTH>)|\)(?<-DEPTH>))*(?(DEPTH)(?!))\)[^.]*|[^.]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2693
#T: Universal Validation for phone numbers
#A: Sumit Kumar
#D: This pattern will address almost most of the country phone patterns like UK, US, eurpoe, india etc. 
var phonePattern = /^(([^\.\-\,a-wy-z]([\(]?(\+|[x])?\d+[\)]?)?[\s\.\-\,]?([\(]?\d+[\)]?)?[\s\.\-\,]?(\d+[\s\.\-\,]?)+[^\.\-\,a-z])|((\+|[x])?\d+))$/i

#U: http://regexlib.com/REDetails.aspx?regexp_id=2694
#T: Package Name Validator
#A: Dilip Nilanka Manathunga
#D: This can be used to validate package names ending with %. If % is not needed ^([a-z]+?\.[a-z]+)+. (.....) can be used to make that part common. "+" is for more than one number of occurences. "?" is for one "." (dot) charactor
^([a-z]+?\.[a-z]+)+\%$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2695
#T: double quotes check
#A: Amit kumar sinha
#D: this regular expression can be used to validate the existance of double quotes
^[^\"]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2696
#T: css definition split
#A: Amit kumar sinha
#D: css definition split on space or comma but keep "" enclosed items for string like
#D: '10pt "Times Roman", Helvetica,Arial, sans-serif
\s*("[^"]+"|[^ ,]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2697
#T: Natural Number with or without preceding zeros 
#A: Dilip Nilanka Manathunga
#D: This matches Natural numbers with or without preceding zeros.
#D: ^[0]+?[1-9]\d*\.?[0]*$ this states there should be atleast one zero
^[0]*?[1-9]\d*\.?[0]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2698
#T: tlen.pl
#A: Matesz Charytoniuk
#D: determines if the selected string is valid tlen.pl communicator login
[a-z]{1}[a-z0-9\-_\.]{2,24}@tlen\.pl

#U: http://regexlib.com/REDetails.aspx?regexp_id=2699
#T: Indian Rupees Expression
#A: Vineet Kaushik
#D: When you require "," after every two digits
^([0-9]{1,2},([0-9]{2},)*[0-9]{3}|[0-9]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2700
#T: Source Code String
#A: Luca Jonathan Panetta
#D: match string between chars " " as in source code
("((\\.)|[^\\"])*")

#U: http://regexlib.com/REDetails.aspx?regexp_id=2701
#T: Source Code String singles quote
#A: Luca Jonathan Panetta
#D: match string between chars ' ' as in source code
('((\\.)|[^\\'])*')

#U: http://regexlib.com/REDetails.aspx?regexp_id=2702
#T: DMS Coordinate 
#A: Kurt
#D: Matches common Degree, Minute, Second coordinate values. The last part can be easily modified to be latitude or longitude specific by changing
#D: [N|S|E|W] to [N|S] for latitude or [E|W] for longitude.
[0-9]{1,2}[:|°][0-9]{1,2}[:|'](?:\b[0-9]+(?:\.[0-9]*)?|\.[0-9]+\b)"?[N|S|E|W]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2704
#T: Simple pattern match
#A: Greg Gamble
#D: Simply match to a combination of 5 characters, using capital letters and numbers only. No special characters or lower case letters.
^([A-Z0-9]{5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2705
#T: UK Bank Sort Code
#A: Matthew Harris
#D: Validates the format of a UK bank sort code.
^(\d){2}-(\d){2}-(\d){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2706
#T: UK Bank Account (7-8 Digits)
#A: Matthew Harris
^(\d){7,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2707
#T: UK Bank Account (8 Digits)
#A: Matthew Harris
^(\d){8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2708
#T: No Whitespace
#A: Matthew Harris
#D: No whitespace is allowed in a string
^[^\s]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2709
#T: match csharp string
#A: JifengHuang
#D: match the csharp string Syntax
".*?[^"\\]"(?!")|""

#U: http://regexlib.com/REDetails.aspx?regexp_id=2710
#T: match 2 or 3 string parameters csharp method
#A: JifengHuang
#D: match chsarp method with 2 or 3 string parameters syntax
\(\s*@*(".*?[^"\\]"(?!")||"")\s*,\s*@*(".*?[^"\\]"(?!")|"")\s*(?:\)|(?:,\s*@*(".*?[^"\\]"(?!")||"")\s*))?\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2711
#T: Mobile
#A: Ahmed Muhammed
#D: Regular Expression for Egypt Mobile Network
^(01)[0-9]{8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2712
#T: European Date and Time
#A: ingrbb00
#D: this expression validates a date-time field in European dd/mm/yyyy hh:mm format
(((((0[1-9]|[12][0-9]|3[01])/(0[13578]|1[02]))|((0[1-9]|[12][0-9]|30)/(0[469]|11))|((0[1-9]|[1][0-9]|2[0-8]))/02)/([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3}) ((([0-1][0-9])|([2][0-3]))[:][0-5][0-9]$))|(29/02/(([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00)) ((([0-1][0-9])|([2][0-3]))[:][0-5][0-9]$)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2713
#T: Street Types
#A: Zj6Ul8Eo9
#D: Matches any and all matches of the street types detailed at http://www.abs.gov.au/Ausstats/abs@.nsf/66f306f503e529a5ca25697e0017661f/2a46946e38f31d0cca256c62007dbb98!OpenDocument
A(?:CCESS|LLEY|PPROACH|R(?:CADE|TERY)|VE(?:NUE)?)|B(?:A(?:NK|SIN|Y)|E(?:ACH|ND)|L(?:DG|VD)|O(?:ULEVARD|ARDWALK|WL)|R(?:ACE|AE|EAK|IDGE|O(?:ADWAY|OK|W))|UILDING|YPASS)|C(?:A(?:NAL|USEWAY)|ENTRE(?:WAY)?|HASE|IRC(?:LET?|U(?:IT|S))|L(?:OSE)?|O(?:MMON|NCOURSE|PSE|R(?:NER|SO)|UR(?:SE|T(?:YARD)?)|VE)|R(?:ES(?:CENT|T)?|IEF|OSS(?:ING)?)|U(?:LDESAC|RVE))|D(?:ALE|EVIATION|IP|OWNS|R(?:IVE(?:WAY)?)?)|E(?:ASEMENT|DGE|LBOW|N(?:D|TRANCE)|S(?:PLANADE|TATE)|X(?:P(?:(?:RESS)?WAY)|TENSION))|F(?:AIRWAY|IRETRAIL|O(?:LLOW|R(?:D|MATION))|R(?:(?:EEWAY|ONT(?:AGE)?)))|G(?:A(?:P|RDENS?|TE(?:S|WAY)?)|L(?:ADE|EN)|R(?:ANGE|EEN|O(?:UND|VET?)))|H(?:AVEN|E(?:ATH|IGHTS)|I(?:GHWAY|LL)|UB|WY)|I(?:NTER(?:CHANGE)?|SLAND)|JUNCTION|K(?:EY|NOLL)|L(?:A(?:NE(?:WAY)?)?|IN(?:E|K)|O(?:O(?:KOUT|P)|WER))|M(?:ALL|E(?:A(?:D|NDER)|WS)|OTORWAY)|NOOK|O(?:UTLOOK|VERPASS)|P(?:A(?:R(?:ADE|K(?:LANDS|WAY)?)|SS|TH(?:WAY)?)|DE|IER|L(?:A(?:CE|ZA))?|O(?:CKET|INT|RT)|RO(?:MENADE|PERTY)|URSUIT)?|QUA(?:D(?:RANT)?|YS?)|R(?:AMBLE|D|E(?:ACH|S(?:ERVE|T)|T(?:REAT|URN))|I(?:D(?:E|GE)|NG|S(?:E|ING))|O(?:AD(?:WAY)?|TARY|U(?:ND|TE)|W)|UN)|S(?:(?:ER(?:VICE)?WAY)|IDING|LOPE|PUR|QUARE|T(?:EPS|RAND|R(?:EET|IP))?|UBWAY)|T(?:ARN|CE|ERRACE|HRO(?:UGHWAY|WAY)|O(?:LLWAY|P|R)|RA(?:CK|IL)|URN)|UNDERPASS|V(?:AL(?:E|LEY)|I(?:EW|STA))|W(?:A(?:LK(?:WAY)?|Y)|HARF|YND)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2714
#T: Single Line CSS
#A: Alistair MacDonald
#D: This small regular expression strips newline characters from a CSS file, except where preceded by a right-curly-bracket/brace. This enhances the 'scanability' of your CSS, saving scroll time.  
(?<!})\n

#U: http://regexlib.com/REDetails.aspx?regexp_id=2715
#T: Repeating characters limit
#A: Fredrik Schiller
#D: This pattern matches strings where no more than two equal characters may come in succession.
#D: To modify the amount of characters allowed, change the second number (the two inside "{2,}")to the desired limit.
^((.)(?!\2{2,}))+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2716
#T: AlphaNumeric
#A: Ravi gupta
#D: This regular expression accepts any combination of alphabets or alphanumeric.
^([A-Za-z]|[A-Za-z][0-9]*|[0-9]*[A-Za-z])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2717
#T: CIDR notation (subnet)
#A: Eugene Kardash
#D: Validates subnet specified by CIDR notation. A valid CIDR notation begins with the IP address followed by a '/' character and a decimal number specifying the length, in bits, of the subnet mask or routing prefix (number from 0 to 32).
^(([01]?\d?\d|2[0-4]\d|25[0-5])\.){3}([01]?\d?\d|2[0-4]\d|25[0-5])\/(\d{1}|[0-2]{1}\d{1}|3[0-2])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2718
#T: Remove Java/PHP/C++ style multiline comments
#A: Peter Darling
#D: If you are caching PHP code you may want to remove long comments from the code before caching it.  This expression will remove all /* */ style comments.
\/\*[\d\D]*?\*\/

#U: http://regexlib.com/REDetails.aspx?regexp_id=2719
#T: UserNames
#A: Ahmed Muhammed
#D: validate usernames with dot or underscoures doesn't allow spaces and accept characters between 5 and 15 no other characters
^[\w_.]{5,12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2720
#T: remove space
#A: Ahmed Muhammed
#D: validate text against spaces and accept from 5 to 12 character
^([^\s]){5,12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2721
#T: Link Match
#A: *z3r0*
#D: This will match a lot of uri adresses. Subdomains will be matched as well.
#D: Other Top-Level Domain Endings or Protocols can be added by yourself easily.
#D: I've tested it with PHP but I think it will work with other applications too.
#D: An example:
#D: if(preg_match('~(http\:\/\/|ftp\:\/\/|https\:\/\/|ftps\:\/\/|file\:\/\/|telnet\:\/\/|www\.)([www\.]?)([a-zA-Z0-9\.\-]+)\.(de|net|org|to|com|biz|co|uk|am|pl)~i', $message)) {
#D: do something if the regex is true...
#D: }
#D: Have fun with it. :-)
(http\:\/\/|ftp\:\/\/|https\:\/\/|ftps\:\/\/|file\:\/\/|telnet\:\/\/|www\.)([www\.]?)([a-zA-Z0-9\.\-]+)\.(de|net|org|to|com|biz|co|uk|am|pl)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2722
#T: Ubuntu Linux Repository Link
#A: x
#D: It matches Ubuntu/Linux repository links. 
(deb|deb-src) http:\/\/[a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+){2,}(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)? (jaunty|intrepid|coala|hardy|gutsy)(-security|-backports|-updates)?( partner| main| restricted| universe| multiverse| non-free)?( partner| main| restricted| universe| multiverse| non-free)?( partner| main| restricted| universe| multiverse| non-free)?( partner| main| restricted| universe| multiverse| non-free)?( partner| main| restricted| universe| multiverse| non-free)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2723
#T: Malaysian MyKad
#A: mename.medad
#D: Validation for Malaysian MyKad number, with or without -
^\d{2}[0-1][0-9][0-3][0-9]-{0,1}\d{2}-{0,1}\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2724
#T: India Phone Numbers 
#A: Vishnu
#D: India phone number, accept with optional +91 national code and 0 for land and mobile number prefix . Allows optional - after national code
^((\+)?(\d{2}[-])?(\d{10}){1})?(\d{11}){0,1}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2725
#A: Intikhab Qaiser
#D: This expression would match MM/DD/yyyy date fromat with leap years
^(((0[13578]|1[02])\/(0[1-9]|[12]\d|3[01])\/((19|[2-9]\d)\d{2}))|((0[13456789]|1[012])\/(0[1-9]|[12]\d|30)\/((19|[2-9]\d)\d{2}))|(02\/(0[1-9]|1\d|2[0-8])\/((19|[2-9]\d)\d{2}))|(02\/29\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2726
#T: Numeric Positive and Negative Range -64 to 64
#A: Marcos Gonzalez
#D: This regular expression validate a range between -64 and 64.
^[0-9]{1}$|^[1-6]{1}[0-3]{1}$|^64$|\-[1-9]{1}$|^\-[1-6]{1}[0-3]{1}$|^\-64$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2727
#T: Folder filename extension
#A: Petr Danihlik
#D: This expression returns
#D: $1-folder (including trailing delimiter)
#D: $2-filename (without ext)
#D: $3-extension (excluding dot)
#D: Note: some captures may be blank, in the case the folder, filename or ext is missing
#D: Note2: tested on Perl regular expression engine
(.*[\\\/]|^)(.*?)(?:[\.]|$)([^\.\s]*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2728
#T: Latitude as decimal
#A: Nick Floersch
#D: Matches a latitude in the range of -90 to 90 degrees, with between 1 and 6 trailing decimal places.
^-?([1-8]?[0-9]\.{1}\d{1,6}$|90\.{1}0{1,6}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2729
#T: Longitude as decimal
#A: Nick Floersch
#D: Matches a longitude in the range of -180 to 180 degrees, with between 1 and 6 trailing decimal places.
^-?((([1]?[0-7][0-9]|[1-9]?[0-9])\.{1}\d{1,6}$)|[1]?[1-8][0]\.{1}0{1,6}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2730
#T: MS Project-like Duration Input Validation
#A: Matt Taggart
#D: Duration validation similar to MS Project (5d16h45m, etc).  Does not allow more than 365 days, 23 hrs or 59 min.
^(([0-9]{1})|([0-9]{1}[0-9]{1})|([1-3]{1}[0-6]{1}[0-5]{1}))d(([0-9]{1})|(1[0-9]{1})|([1-2]{1}[0-3]{1}))h(([0-9]{1})|([1-5]{1}[0-9]{1}))m$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2731
#T: Cellphones in Argentina
#A: Ivan Melgrati
#D: This regex will match cellphones from Argentina, which have a 15 prefix. It takes into account optional parenthesis and various digit groupings
((\(?\d{2,5}\)?)?(\d|-| )?(15((\d|-| ){6,13})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2732
#T: Identify Special Characters
#A: Mukundhan (India)
#D: This RE will identify all the special characters(non alpha/numeric).
[^a-zA-Z0-9]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2733
#T: Validate GUID
#A: Charles Forsyth
#D: This regex will validate a GUID. If the GUID starts with an opening curly bracket, then it must also end in a closing curly bracket. If it does not start with one, then it must not end with one.
((^[{])|^)[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}(?(2)[}]$|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2734
#T: Valid GUID (VBScript)
#A: Charles Forsyth
#D: This RegEx validates a GUID number with or without curly brackets. But requires both brackets if any is provided. This version is compatible with VBScript's RegEx engine
^[{][A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}[}]$|^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2735
#T: Almost any date
#A: adam
#D: This will return the 3 parts of a date for you.  Splice out the empty array portions and use the 3 parts to build/verify the date.
(\d{1,2})\W+(\d{1,2})\W*(\d{2,4})?|(\d{4})\W(\d{1,2})\W(\d{1,2})|([a-zA-Z]+)\W*(\d{1,2})\W+(\d{2,4})|(\d{4})\W*([a-zA-Z]+)\W*(\d{1,2})|(\d{1,2})\W*([a-zA-Z]+)\W*(\d{2,4})|(\d{1,2})\W*([a-zA-Z]+)|([a-zA-Z]+)\W*(\d{1,2})|(\d{2})(\d{2})(\d{2,4})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2736
#T: Latitude Validator
#A: Nix
#D: Matches decimal latitude notation (like that used by Google maps)  Matches -90.000000 through +90.000000 with maximum of 6 decimal places, minimum of 1 decimal place.
^(\+|-)?(\d\.\d{1,6}|[1-8]\d\.\d{1,6}|90\.0{1,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2737
#T: Longitude Validator
#A: Nix
#D: Matches decimal longitude format like that returned by Google maps.  Matches from -180.000000 to +180.000000 with between one and six decimal places.
^(\+|-)?(\d\.\d{1,6}|[1-9]\d\.\d{1,6}|1[1-7]\d\.\d{1,6}|180\.0{1,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2738
#T: Wordpress post image dimensions
#A: Leo Dominguez
#D: I wanted to get the original size of an image placed into a Wordpress post. This should find the resized image dimensions, from here you should be able to manipulate the size of the image of remove the dimesions to get the image untouched
-[0-9]*[x][0-9]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2739
#T: Up to 15 digits followed by 0,1 or 2 floating points
#A: Matthew Harris
#D: This might seem like a contrived example but it was written to answer a question on a forum. For regex newbies you can just change the numbers in {} to change the number of required digits to suit your requirements
^[0-9]{1,15}(\.([0-9]{1,2}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2740
#T: http URL matcher
#A: Erik Nygren
#D: Matches http(s) URLs using only URI unreserved characters (alphanumeric and .-~). Matches domain with optional query and anchor. Allows URL encoding in query part. Does not allow - or ~ in filename at end of path. Foreward slashes are escaped as per PCRE syntax, backslashes are not. 
'^http(?:s)?[:]//(([-~\w])+[.])+[\w]+(:?(?:(?:[//][-~\w]+)+(?:[-~\w]+(?:[.][\w]+)?)?(?:[//])?)|[//])?(?:[?])?(?:[?](?:(?:[-\w~]|%[\d]{2})+=(?:[-\w~]|%[\d]{2})+[&;])*(?:[-\w-~]|%[\d]{2})+=(?:[-\w~]|%[\d]{2})+)?(?:[#][\w-~]*)?$'

#U: http://regexlib.com/REDetails.aspx?regexp_id=2741
#T: MD5
#A: Erik Nygren
#D: Matches 32 bit MD5 Hash values, both uppercase and lowercase one's. Mixing cases is allowed. 
^[A-Za-z0-9]{32}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2743
#T: Calendar Date
#A: Kenaniah Cerny
#D: In month/day/year format. Matches valid months (1-12) and valid days (1-31) and a valid 4 digit year (from 1000-2999). $1 = month, $2 = day, $3 = year. Sadly, it doesn't check to make sure that months have a valid number of days (no Feb 30th checks, etc).
^(0?[1-9]|1[012])/([012][0-9]|[1-9]|3[01])/([12][0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2744
#T: IP address validation
#A: Marko Maruna
#D: Validates IP addresses and subnet masks
^((2[0-5][0-5]|1[\d][\d]|[\d][\d]|[\d])\.){3}(2[0-5][0-5]|1[\d][\d]|[\d][\d]|[\d])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2745
#T: Email validation
#A: Marko Maruna
#D: Validates email address
^([\w\._-]){3,}\@([\w\-_.]){3,}\.(\w){2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2746
#T: Valid HTML code
#A: Marko Maruna
#D: validates HTML tags
^\<(\w){1,}\>(.){0,}([\</]|[\<])(\w){1,}\>$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2747
#T: Validate 15 - 30 Character Passwords
#A: Paul Bratcher
#D: For matching passwords (or any words) with the following requirements... 15 - 30 Characters; At least 2 Numeric 0-9, 2 Special !,^,&... & 2 Uppercase A-Z
^(?=.*\d{2})(?=.*[A-Z]{2})(?=.*[\D,\W,\S]{2})(?=.*[a-z]).{15,30}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2748
#T: Username 
#A: Adarsh VC
#D: A regexp for general username entry. Which doesn't allow special characters other than underscore. Username must be of length ranging(3-30). starting letter should be a number or a character.   
^[a-zA-Z0-9][a-zA-Z0-9_]{2,29}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2749
#T: Date
#A: Chris McCall
#D: This regular expression matches the format MM/DD/YYYY. Month and Day can have an optional leading 0. Months are from 01-12, days are from 01-31, and years are from 1000-2999.
^(([0]?[1-9])|(1[0-2]))\/(([0]?[1-9])|([1,2]\d{1})|([3][0,1]))\/[12]\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2750
#T: Picture upload validation
#A: Marko Maruna
#D: validates jpg/jpeg picture extension
^(.)+\.(jpg|jpeg|JPG|JPEG)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2751
#T: Google video
#A: sidious
#D: A simple regex for validating a Google link.
^http://\\.?video\\.google+\\.\\w{2,3}/videoplay\\?docid=[\\w-]{19}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2752
#T: non alpha numeric
#A: Mayur Patel
#D: search special character form a given sting space is ignored.
[^A-Za-z0-9 ]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2753
#T: (Java only) Postal code check for the Netherlands
#A: Henk-Jan de Jong
#D: Java only postcodecheck for the Netherlands, case insensitive.
#D: Characters not allowed: FIOQUY
#D: Strings not allowed: SA, SD, SS
^[1-9]\d{3}\s?(?i)(?!(S[ADS]))([A-Z&&[^FIOQUY]]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2754
#T: Canada Postal Code
#A: John Alpha
#D: It matches canada postal code
^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2755
#T: Email
#A: Fawad Raza
#D: Meets almost all email address, whacky ones included
^([0-9a-zA-Z]+[-._+&])*[0-9a-zA-Z_-]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2756
#T: All number between 0001 and 9999
#A: Amritashan S. Lal
#D: This RE will match all numbers between (including) 0001 and 9999. Four places of digits are mandatory in this expression.
^([1-9]\d{3}|0[1-9]\d{2}|00[1-9]\d{1}|000[1-9]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2757
#T: Number without all zero
#A: Amritashan S. Lal
#D: RE to match numbers with value greater than 0.
^([\d]*[1-9]+[\d]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2758
#T: find HTML tags
#A: Oddmar Dam
#D: Find <table></table> tags in a multiline text
<table[\s\S]*</table>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2759
#T: (Java) Time (hh:mm)
#A: Henk-Jan de Jong
#D: Matches timeformat (hh:mm)
^([01]?\d|2[0-3]):[0-5]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2760
#T: scientific notation
#A: Wayne.Wang
#D: matche standard scientific notation
^[-+]??(\\d++[.]\\d*?|[.]\\d+?|\\d+(?=[eE]))([eE][-+]??\\d++)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2761
#T: Fecha (Date) dd/MM/yyyy
#A: Luis Fernando Forero G
#D: Esta captura fechas en el formato dd/MM/yyyy permitiendo usar tambien el caracter "-" para la fecha
^(([0-9])|([0-2][0-9])|(3[0-1]))((\/)|-)(([1-9])|(0[1-9])|(1[0-2]))((\/)|-)(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2762
#T: XML Tag
#A: Jin Feng
#D: Match a start/end XML tag
(?<STag><)[/\?\s]*(?<Prefix>\w*:)*(?<TagName>\w*)\s*(?<Attributes>(?<Attribute>((?<AttributePrefix>\w*)\s*:\s*)*(?<AttributeName>\w*)\s*=\s*(?<AttributeValue>"[^"]*"|'[^']*'|[^>\s]*)\s*)*)\s*/?(?<ETag>>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2763
#T: Http Url
#A: Jin Feng
#D: http_URL = "http:" "//" host [ ":" port ] [ abs_path [ "?" query ]]
http://(?<Host>[^:/\?]*)(:(?<Port>\d+))?((?<abs_Path>[^\?]+)(\?(?<Query>[^\r\n]*))?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2764
#T: Replace Multiple Occurrence With One...
#A: jdeluna
#D: I was trying to google a pattern that will replace multiple occurrence of a single char with the same char.. Usage: RegEx.Replace(input, "${specialchar}")
(?<specialchar>([\s-'\.,]))\1{1,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2765
#T: Numeric expression
#A: Rémi Lavoie
#D: Number(no space or thousand separator with point(.) as decimal delimiter.
^[-+]?\d+(\.\d)?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2768
#T: Swift Number
#A: Ryan Felton
#D: This is the regex for the bank Swift Number
^[a-zA-Z]{4}[a-zA-Z]{2}[a-zA-Z0-9]{2}[XXX0-9]{0,3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2769
#T: Blood Pressure
#A: Marc Lang
#D: Validates blood pressure in the format systolic/diastolic.
#D: both systolic or diastolic can be any number between 1 and 299
^\b(29[0-9]|2[0-9][0-9]|[01]?[0-9][0-9]?)\\/(29[0-9]|2[0-9][0-9]|[01]?[0-9][0-9]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2770
#T: Empty, Nothing, Nada
#A: Joe Hakooz
#D: Only accepts nothing. I know, sounds stupid, but useful for "Invisible Textbox Captcha". Bots will fill in a hidden textbox, and this expression busts them.
^.{0,0}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2771
#T: UK Telephone Numbers
#A: Darren Moore
#D: Matches over 18 different combinations for UK phone numbers that I could find.  If there are any errors please get in touch.
((\+44\s?\(0\)\s?\d{2,4})|(\+44\s?(01|02|03|07|08)\d{2,3})|(\+44\s?(1|2|3|7|8)\d{2,3})|(\(\+44\)\s?\d{3,4})|(\(\d{5}\))|((01|02|03|07|08)\d{2,3})|(\d{5}))(\s|-|.)(((\d{3,4})(\s|-)(\d{3,4}))|((\d{6,7})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2772
#T: Curl apostrophes
#A: Nabha
#D: Find apostrophes in text.
#D: I use this to curl them, by replacing the above with this expression:
#D: ’$1$2
'([dmstrl])([ .,?!\)\\/<])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2773
#T: Validate dates from 1/1/0001 to 12/31/9999
#A: Jerry Schmersahl
#D: Validates dates from 1/1/0001 to 12/31/9999. Month and day can be preceded by a zero to a max of two digits; however, year must be four digits exactly. This regex was developed in a .NET environment and uses conditional lookahead syntax, so your regex engine must support same. Month, day, and year are captured to groups named "month", "day", and "year" for additional processing if desired.
^(?=0?[1-9]/|1[012]/)(?:(?<month>(?<month31days>0?[13578]|1[02])|(?<month30days>0?[469]|11)|(?<monthFeb>0?2))/)(?<day>(?(month31days)(?:[012]?[1-9]|3[01]))(?(month30days)(?:[012]?[1-9]|30))(?(monthFeb)(?:[01]?[1-9]|2(?(?=\d/(?:(?:(?:04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)00)|(?:\d\d(?:04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96))))[0-9]|[0-8]))))/(?<year>(?!0000)\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2774
#T: Validate US Address Format
#A: Jerry Schmersahl
#D: Validates the format of a US mailing address that includes a maximum of three lines.
#D: line1 (cannot be whitespace)
#D: line2 (optional; if present, cannot be whitespace)
#D: city, ST 00000-0000 (hyphen and last four digits of zip are optional)
#D: Captures line1, line2 (if present), city, state, and zip to groups similarly named for further processing.
^(?<line1>(?!\s+)[^\n]+)\n(?:(?<line2>(?!\s+)[^\n]+)\n)?(?<city>[^,\n]+), +(?<state>-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY]) +(?<zip>(?<zip5>\d{5})(?:[ -]?(?<zip4>\d{4}))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2775
#T: Validate US State Abbreviations
#A: Jerry Schmersahl
#D: Validates US state abbreviations used by the Post Office.
^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2776
#T: GMAT scores validator
#A: Sujay Paranjape
#D: Validates if the GMAT score is in the correct range and format
^([0-9]|[1-9]\d|[1-7]\d{2}|800)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2777
#T: Phone Number (Singapore)
#A: test
#D: In Singapore, the first digit must start with a "6", and the rest is made up of 7 digits, which means that there are 8 digits in a Singapore's telephone number.
^[6]\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2778
#T: National Registry Identification Number (Singapore)
#A: test
#D: The National Registry Identification Number (NRIC) of Singapore is made up of the first character being a S/F/T or G. The next 2 numbers is the year of birth for people born 1967 and later. The last character is a checksum done on the numbers, and the algorithm will not be released.
^[SFTG]\d{7}[A-Z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2779
#T: Duration
#A: Kristijan Prikratki
#D: Displays duration in
#D: 1 d 22:33:44 format. Can be modified to match some other formats e.g. 1.22:33:44 if needed. Takes a 24-hour day into account.
([0-9]+)\s(d)\s(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2780
#T: Excel A1 reference style
#A: Mike Sportsman
#D: Matches Excel's A1 reference style.  Single Cell, absolute, reletive, mixed, whole row, whole column.  Validates it all.
^\$?(?(?=[0-9])[0-9]{1,5}:\$?[0-9]{1,5}|[A-Za-z]{1,2}(?(?=:):\$?[A-Za-z]{1,2}|(?(?!(\$?[0-9])):/$[A-Za-z]{1,2}|\$?[0-9]{1,5})(?(?=:):\$?[A-Za-z]{1,2}\$?[0-9]{1,5}|.)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2781
#T: Match String with keyword
#A: Ajesh Kumar CM
#D: This will match those string which contains the word "kumar"
^.*(?:kumar).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2782
#T: Match the numbers
#A: Ajesh Kumar CM
#D: Match the numbers 1 to 99
(\b(1|2|3|4|5|6|7|8|9)?[0-9]\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2783
#T: Match the numbers
#A: Ajesh Kumar CM
#D: Match the numbers 100 to 199
(\b(10|11|12|13|14|15|16|17|18|19)[0-9]\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2784
#T: 1 to 99 in .5 increments
#A: Matthew Harris
#D: This is a simple regular expression which allows 1 to 99 in .5 increments which I originally developed for a forum post
^[1-9]{1,2}(.5)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2785
#T: Google Video ID from URL
#A: Rick Estrada
#D: This will extract the Video Id From Google Video URL which the number sequence after docid= and will check url.. make sure its a valid google link
'/http:\\/\/\.?video.google.\w{2,3}\/videoplay\?docid=([a-z0-9-_]+)/i'

#U: http://regexlib.com/REDetails.aspx?regexp_id=2786
#T: Host name
#A: Kevin Dean
#D: Multi-part host name validator, RFC-compliant but does not validate length of components or overall length
[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2787
#T: HTTP(S) URL
#A: Kevin Dean
#D: HTTP(S) URL validator with embededded multi-part host name validator, RFC-compliant but does not validate length of components or overall length.  Path portion after host name is free-form and will need refinement if you want to validate it.
https?://[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*/\S*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2788
#T: Email address
#A: Kevin Dean
#D: Email address validator with embededded multi-part host name validator, RFC-compliant but does not validate length of components or overall length.
[A-Za-z0-9!#$%&'*+\-/=?^_`{|}~]+(?:\.[A-Za-z0-9!#$%&'*+\-/=?^_`{|}~]+)*@[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*(?:\.[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2789
#T: Placa de carro nacional BRASIL 
#A: Fernando Bordallo
#D: formatação de placas de carros brasileiros.
#D: ************************
#D: Formatting of license plates Brazilian
^(([a-zA-Z]{3})?([0-9]{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2791
#T: URL File Name
#A: C. Brendan Enrick
#D: Gets the file name from a URL including the "/". If the URL ends in "/" the "/" is matched.
(?<!/)/(\w+\.\w+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2792
#T: German Street Name, Deutsche Strassennamen
#A: Martin Hauck
#D: checks German Street Name with housenumber
#D: without Mannheim
#D: Überprüft Deutsche Strassennamen mit Hausnummer (ohne Mannheit)
^([A-ZÄÖÜ][a-zäöüß]+(([.] )|( )|([-])))+[1-9][0-9]{0,3}[a-z]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2793
#T: US Phone Number
#A: Keyur Shah
#D: match almost all kind of USPhone number
[\+]?[1]?[-. ]?(\(\d{3}\)|\d{3})(|[-. ])?\d{3}(|[-. ])\d{4}|\d{3}(|[-. ])\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2794
#T: Clipser Video ID from URL
#A: Rick Estrada
#D: This will extract the Video Id From Video URL which the number sequence and will check url.. make sure its a valid link - expression is in PHP format
'/http:\\/\/(?:www.)?clipser\.com\/watch_video\/([0-9a-z-_]+)/i'

#U: http://regexlib.com/REDetails.aspx?regexp_id=2795
#T: Blip Video ID from URL
#A: Rick Estrada
#D: extract video id from blip.tv url - expression is in PHP format
'/http:\/\/(?:www\.)?blip\.tv\/file\/(\d+).*/'

#U: http://regexlib.com/REDetails.aspx?regexp_id=2796
#T: Detect onClick Javascript in href tags
#A: Rick Estrada
#D: Needed this to Detect onClick javascript in href tags and strip put with PHP scraping html source
'/\\(?<\w+[^>]*\son\w+=.*[ \/].?>(?:\))?/i'

#U: http://regexlib.com/REDetails.aspx?regexp_id=2797
#T: Números Válidos
#A: Helber L. Tassinari
#D: Expressão Regular para validação de números decimais.
^(\d{1,})$|^(\d{1,}\.)$|^(\d{0,}?\.\d{1,})$|^([+-]\d{1,}(\.)?)$|^([+-](\d{1,})?\.\d{1,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2798
#T: Wii Code format
#A: João Miguel
#D: Validate the Wii Code format. If you like to have slashes and spaces you can change the "\s" for "[\s-]"
\d{4}\s\d{4}\s\d{4}\s\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2799
#T: Strong password
#A: Miljana Grasilovic
#D: Strong passwords with min 8 - max 15 character length, at least two letters (not case sensitive), one number, one special character (all, not just defined), space is not allowed.
^(?=(.*[a-zA-Z].*){2,})(?=.*\d.*)(?=.*\W.*)[a-zA-Z0-9\S]{8,15}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2800
#T: tags
#A: nina
#D: test image, input, form and link html tag + php, jsp and script tag
(<[Ii][Mm][Gg]|<\?|<\?php|<[Ss][Cc][Rr][Ii][Pp][Tt]|<[Ii][Nn][Pp][Uu][Tt]|<%|<[Aa]|<[Ff][Oo][Rr][Mm])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2801
#T:  Phone Number Validation for Finland
#A: Hakan Kucukel
#D: General phone number validation for Finland.
#D: It will pass old and new format numbers.
#D: Between numbers space or dash can be used ones.
#D: number has to start
#D: +358 or 00358 or 0
#D: are code can be 2 or 3 digit. I could not come with better idea then this
^((([\+][\s]{0,1})|([0]{2}[\s-]{0,1}))([358]{3})([\s-]{0,1})|([0]{1}))(([1-9]{1}[0-9]{0,1})([\s-]{0,1})([0-9]{2,4})([\s-]{0,1})([0-9]{2,4})([\s-]{0,1}))([0-9]{0,3}){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2802
#T: Strong password
#A: Miljana Grasilovic
#D: Strong passwords with min 8 - max 15 character length, at least one uppercase letter, one lowercase letter, one number, one special character (all, not just defined), space is not allowed.
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d.*)(?=.*\W.*)[a-zA-Z0-9\S]{8,15}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2803
#T: Date validation
#A: Alex Manetas
#D: Validates strings of type dd/mm/yyyy. checking dd to be between 1-31, mm between 1-12 and yyyy between 1900-2099.
\b([0]?[1-9]|[1,2]\d|3[0,1])[-/]([0]?[1-9]|[1][0,1,2])[-/](\d{1,2}|[1][9]\d\d|[2][0]\d\d)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2804
#T: positive (non-negative) decimal value less than or equal to 24 with maximum 2 floating point values
#A: Ritesh Ravlani
#D: Allows positive(non-negative) decimal values with 2 floating point values and less than or equal to 24.
^([0-2]{0,1})([0-3]{1})(\.[0-9]{1,2})?$|^([0-1]{0,1})([0-9]{1})(\.[0-9]{1,2})?$|^-?(24)(\.[0]{1,2})?$|^([0-9]{1})(\.[0-9]{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2806
#T: Belgian VAT Number
#A: Frank Kilcommins
#D: VAT Number BE. Assumes BE followed by 0 or 1 or ' ' the digits will grouped by xxxxxxxxxx or xxxx.xxx.xxx. If you only want VAT numbers starting with 0 then replace [0-1]{1} with [0]
^(BE)[0-1]{1}[0-9]{9}$|^((BE)|(BE ))[0-1]{1}(\d{3})([.]{1})(\d{3})([.]{1})(\d{3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2807
#T: Date Format: MM-DD-YYYY or MM/DD/YYYY
#A: Jason Shimkoski
#D: This will match date values with the format mm-dd-yyyy or mm/dd/yyyy
^\d{2}[\-\/]\d{2}[\-\/]\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2808
#T: Indian Phone number
#A: chetan
#D: This expression is not working for this +91-020-41056767. If i enter +91555-020555-41056767 still its working. Please help me. Send me the correct expression on my email id cgadgilwar@gmail.com
((\d){2})?(\s|-)?((\d){2,4})?(\s|-){1}((\d){8})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2809
#T: Password Verification
#A: Brad Williams
#D: Validates passwords to be 6-20 characters of letter and numbers and NO special characters (that appear on the keyboard). Adjust numbers at the end and remove special characters (after the "(?!") as needed. Numbers appear at the END to address an IE problem with zero-width look-aheads.
^(?=.*\d)(?=.*[A-Za-z])(?!.*[!@#\$%\^&\*\(\)\+=\|;'"{}<>\.\?\-_\\/:,~`]).{6,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2810
#T: Groups
#A: Brad Williams
#D: Matches the name portion of a named group. Useful for "cleaning" regular expressions for use with ASP controls (since they don't support named groups).
\?<.+?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2811
#T: Email
#A: Brad Williams
#D: Matches valid emails. Suggestions welcome.
(?<username>#?[+_a-zA-Z0-9+-]+(\.[+_a-zA-Z0-9+-]+)*)@(?<domain>[a-zA-Z0-9]+(-(?!-)|[a-zA-Z0-9\.])*?[a-zA-Z0-9]+\.([0-9]{1,3}|[a-zA-Z]{2,3}|(aero|arpa|asia|coop|info|jobs|mobi|museum|name|travel)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2812
#T: US 10-digit Phone Number
#A: Brad Williams
#D: Matches VALID 10 digit US phone numbers. Formatting characters are optional. Valid area codes and prefixes never begin with 0 or 1.
\(?(?<areacode>[1]?[2-9]\d{2})\)?[\s-]?(?<prefix>[2-9]\d{2})[\s-]?(?<linenumber>[\d]{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2814
#T: Validate IP port number (1-65535)
#A: Matthew Harris
#D: This was based on the regex in the source but it was buggy so I fixed it and then optimized it.
#D: It matches port numbers in the form of :1 to :65535
#D: This is designed to be plugged onto the end of your favourite url regex because when I was looking for a IPv4 regex I noticed that a lot of them either didn't match the port or matched it badly (allowing the port number to start with a 0 or be higher than 65535)
#D: This regex solves those two problems.
:(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2816
#T: U.S. Phone numbers, multiple styles
#A: John Koziol
#D: Can handle a variety of standard phone formats.
([(]?\d{3}[)]?(-| |.)?\d{3}(-| |.)?\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2817
#T: Credit Card
#A: Abhay Bhargav
#D: This builds on some of the other credit card regular expressions. This identifies whitespaces, dashes and dots and checks for credit card numbers. Works with Visa Master Card Amex and Discover.
((4\d{3})|(5[1-5]\d{2})|(6011))[\s\-\.]*\d{4}[\s\-\.]*\d{4}[\s\-\.]*\d{4}|3[4,7]\d{13}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2818
#T: ed2k Link
#A: igor
#D: Select the ed2k download link.
#D: It use the hexadecimal range of ascii chars
(ed2k://)([\x00-\xFF]*)(|/)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2819
#T: Degree Range
#A: Leonardo de Miranda Cabral
#D: Pattern that evaluetes a number between 0 and 360
^(3(([0-5][0-9]{0,2})|60))|([1-2][0-9]{2})|(^[1-9]$)|(^[1-9]{2}$)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2820
#T: Phone Number
#A: TTaylor
#D: This expression will find phone numbers regardless of seperators used
(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*[-\/\.]?\s*(\d{3})\s*[-\/\.]?\s*(\d{4})\s*(([xX]|[eE][xX][tT])\.?\s*(\d+))*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2821
#T: Java class name (global)
#A: Attila Varga
#D: Regular Expression for validating fully qualified Java Class Names that follows the Java Naming Conventions for widely available classes (see: http://java.sun.com/docs/books/jls/third_edition/html/names.html#6.8).
#D: Group 1 gives the package name, group 3 gives the class name.
^([a-z]{2,3}(\.[a-zA-Z][a-zA-Z_$0-9]*)*)\.([A-Z][a-zA-Z_$0-9]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2822
#T: private ip range check
#A: blank
#D: validates private ip addresses
#D: needs to  be a bit more refined 
^(1(0|7|9)2?)\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2823
#T: mac 
#A: blank
#D: mac id check/validate
^([0-9a-fA-F][0-9a-fA-F]){5}([0-9a-fA-F][0-9a-fA-F])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2824
#T: Java class name (local)
#A: Attila Varga
#D: Regular Expression for validating fully qualified Java Class Names that follows the Java Naming Conventions for local classes (see: http://java.sun.com/docs/books/jls/third_edition/html/names.html#6.8).
#D: Group 2 gives the package name, group 4 gives the class name.
^(([a-zA-Z][a-zA-Z_$0-9]*(\.[a-zA-Z][a-zA-Z_$0-9]*)*)\.)?([a-zA-Z][a-zA-Z_$0-9]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2825
#T: Hungarian phone number
#A: Attila Varga
#D: Regex for validating format of Hungarian phone numbers.
^(\+?36)?[ -]?(\d{1,2}|(\(\d{1,2}\)))/?([ -]?\d){6,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2826
#T: Private IPs
#A: Rico
#D: RegEx for IPs in private Networks.
((^192\.168)|(^172\.(((01|1)[6-9])|((02|2)[0-9])|((03|3)[0-1]))))\.[0-9]{1,3}\.[0-9]{1,3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2827
#T: 0-10 in 0.5 increments
#A: Gordon
#D: Matches a number from 0-10 in 0.5 increments. Was used for a rating system.
^((10)|([0-9](\.(0|5))?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2828
#T: Match Script block 
#A: Peng Li
#D: match all script blocks in html file or aspx file.
\<script[^>]*>[\w|\t|\r\|\W]*?</script>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2829
#T: Numeric Accept
#A: Mehmet Cakoglu
#D: It just accepts negative and positive numeric entries. Dot (.) or comma (,) signs accepted only once.
^-?\d+([.,]?\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2830
#T: Positive Numeric Accept
#A: Mehmet Cakoglu
#D: It just accepts only positive numbers. Also accepts Dot (.) and comma (,) signs only once.
^\d+([.,]?\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2831
#T: Just Integer
#A: Mehmet Cakoglu
#D: Accepts positive and negative integers.
^-?\d+([^.,])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2832
#T: Just Positive Integer
#A: Mehmet Cakoglu
#D: Accepts positive integers.
^\d+([^.,])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2833
#T: Mobile Phones - Portugal
#A: António Pimba
#D: A regex for cellphone numbers in Portugal, for the three major operators (TMN, Optimus, Vodafone).
#D: 2 numbers (91/96/93/92) + 7 others.
^([9]{1})+(6|3|2|1{1})+([0-9]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2834
#T: Error|Warning|Exception
#A: David Kirchmer
#D: Find any and all occurences of any of the three terms "Error" "Warning" "Exception" in a log or txt file.
#D: Use this as a filter with TextAnalysisTool.NET for quick parsing of log files when looking for errors
(?:Error|Warning|Exception)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2835
#T: Date and Time
#A: vikas s
#D: To parse the above type of detailed date and time format.
^(\s(SUN|MON|TUE|WED|THU|FRI|SAT)\s+(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\s+(0?[1-9]|[1-2][0-9]|3[01])\s+(2[0-3]|[0-1][0-9]):([0-5][0-9]):((60|[0-5][0-9]))\s+(19[0-9]{2}|[2-9][0-9]{3}|[0-9]{2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2836
#T: Canadian Postal Code
#A: Brad Williams
#D: Validates Canadian postal codes.
#D: Format: A9A 9A9
#D: Cannot contain: DFIOQU
#D: First letter must be one of: ABCEGHJKLMNPRSTVXY
^(?![DFIOQU])([ABCEGHJ-NPRSTVXY]\d[A-Z][ ]\d[A-Z]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2838
#T: Search Engine Keywords
#A: Yasin KUYU
#D: url for search engines to receive query word. q=example or  p=example or query=example or  keywords=example ....
[\?|&][q|gs|p|query|search|keywords|key|terms|ask|searchfor|srctxt|text|su|kw]\=([^&]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2839
#T: South African Mobile  or Telephone Number
#A: Kelvin Chikomo
#D: South African 
"^(27|0)[0-9]{9}"

#U: http://regexlib.com/REDetails.aspx?regexp_id=2840
#T: A Liberal, Accurate Pattern for Matching URLs
#A: Scott C
#D: Identifies the URLs in an arbitrary string of text, where by “arbitrary” let’s agree we mean something unstructured such as an email message or a tweet.  Source: daringfireball.net
\b(([\w-]+://?|www[.])[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2841
#T: URL validation .NET URLvalidation
#A: Eric Wai Chan
#D: Validates URL to see if the input pattern is a valid URL (ftp, http, https, etc); can be easily modified to support others such as file:/// | Pattern has been tested using .NET runtime engine | localhost literal support for windows IIS server and visal studio (2005 or later) built-in asp.net web-server
^(ht|f)tp(s?)\:\/\/(([a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+)+)|localhost)(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)?([\d\w\.\/\%\+\-\=\&\?\:\\\"\'\,\|\~\;]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2842
#T: domain
#A: Gustav Kusnir
#D: domain as defined in RFC 2821
[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2843
#T: at domain list
#A: Gustav Kusnir
#D: A-d-l or at-domain-list as defined in RFC 2821
@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+(?:,@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2844
#T: atext
#A: Gustav Kusnir
#D: atext as defined in RFC 2822
[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2845
#T: mailbox
#A: Gustav Kusnir
#D: mailbox as defined in RFC 2821
[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+(?:\.[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+)*@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2846
#T: forward-path
#A: Gustav Kusnir
#D: forward-path and reverse-path as defined in RFC 2821
^<(?:@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+(?:,@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+)*:)?([a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+(?:\.[a-zA-Z0-9!#\$%&'\*\+\-\/=\?\^_`{\|}~]+)*@[a-z0-9][a-z0-9-]*[a-z0-9](?:\.[a-z0-9][a-z0-9-]*[a-z0-9])+)>$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2847
#T: Porcentagem
#A: Hugo
#D: Porcentagem positiva de 0 a 100 com até 2 casas decimais, usando . (ponto) ou , (virgula).
^(100([\.\,]0{1,2})?)|(\d{1,2}[\.\,]\d{1,2})|(\d{0,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2848
#T: Date Format : MM/DD/YYYY
#A: Gaurav Agrawal
#D: It check the date format (MM/DD/YYYY).
^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2849
#T: Non-HTML English sentences
#A: Dan Wygant
#D: Anti-HTML pattern for english sentences. any < or > will make it not match.
^[-\w\s"'=/!@#%&,;:`~\.\$\^\{\[\(\|\)\]\}\*\+\?\\]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2850
#T: Social Security Number - All Rules Enforced
#A: Tim Cartwright
#D: Could not find a regex that truly matched the rules here http://en.wikipedia.org/wiki/Social_Security_number#Valid_SSNs So I modified an existing one to match the valid SSN rules.
#D: The first digit set will not match:
#D: 000, 666, 734 to 749, and greater than 772.
#D: * Numbers with all zeros in any digit group (000-xx-####, ###-00-####, ###-xx-0000)
^((?!000)(?!666)(?:[0-6]\d{2}|7[0-2][0-9]|73[0-3]|7[5-6][0-9]|77[0-2]))-((?!00)\d{2})-((?!0000)\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2851
#T: cn domain Expression
#A: 严德华
#D: select .cn from domain where nic.deleted
^[a-zA-Z0-9\-]+\.cn$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2852
#T: UK Street Address
#A: Vincent Hayward
#D: UK Street Address splits streetname and housenumber.
#D: Feel free to add more suggestions to help optimize this pattern.
\A(\d+[a-zA-Z]{0,1}\s{0,1}[-]{1}\s{0,1}\d*[a-zA-Z]{0,1}|\d+[a-zA-Z-]{0,1}\d*[a-zA-Z]{0,1})\s*+(.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2853
#T: Regular Expression Syntax
#A: Andreas Grebov
#D: Information about Regular Expression Syntax
^*[]!#

#U: http://regexlib.com/REDetails.aspx?regexp_id=2854
#T: NL Street Address
#A: Vincent Hayward
#D: This pattern splits the streetname and housenumber of Dutch Postal Addresses.
\A(.*?)\s+(\d+[a-zA-Z]{0,1}\s{0,1}[-]{1}\s{0,1}\d*[a-zA-Z]{0,1}|\d+[a-zA-Z-]{0,1}\d*[a-zA-Z]{0,1})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2855
#T: Twitter Username
#A: Joseph Cardoza
#D: Simple validation reg ex that requires 1-15 alphanumeric characters
^([a-zA-Z0-9]{1,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=628
#T: Querystring Parse
#A: Tim Cartwright
#D: I wrote this to parse the querystring into its key value parts. It will also match querystring keys without an associated value.
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=628
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">http://www.foo.com/page.aspx?qs1=true&test=foo&bar=true&test#blah
(?<=[\?|\&])(?<key>[^\?=\&\#]+)=?(?<value>[^\?=\&\#]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2857
#T: Currency - Money
#A: Salam Abbas
#D: Handles any kind of money entry. With $ sign or not, with commas or not. With bracket, negative sign or none. Max of 2 decimal points. It's perfect :)
^(-?\$?([1-9]\d{0,2}(,\d{3})*|[1-9]\d*|0|)(.\d{1,2})?|\(\$?([1-9]\d{0,2}(,\d{3})*|[1-9]\d*|0|)(.\d{1,2})?\))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2858
#T: Vat Rate
#A: Mrinmoy Basu
#D: Vat percentage format for Indian and Germany.Maximum two digit before decimal and after decimal
^([1-9]{0,1})([0-9]{1})((\.[0-9]{0,1})([0-9]{1})|(\,[0-9]{0,1})([0-9]{1}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2859
#T: Germany PostCode 
#A: Mrinmoy Basu
#D: Validate Germany postcode contains only 5 digits and starting with 0 to 9.
^([012346789][0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2860
#T: Germany pincode
#A: Mrinmoy Basu
#D: Validate Germany pincode only.It Contains 5 digits only starting with any digit from 0 to 9.
^([012346789][0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2861
#T: WII Wifi Friend Code Validator
#A: Brandon Rampersad
#D: Validates WII Wifi friend codes
(?:[0-9]{4}-){3}[0-9]{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2862
#T: Ordnance Survey Grid Reference (with Tetrads)
#A: Tim May
#D: Matches standard 0- to 10-figure (including 2km tetrad references) Ordnance Survey of Great Britain (OSGB) Grid References
((([sS]|[nN])[a-hA-Hj-zJ-Z])|(([tT]|[oO])[abfglmqrvwABFGLMQRVW])|([hH][l-zL-Z])|([jJ][lmqrvwLMQRVW]))([0-9]{2})?(([a-np-zA-NP-Z]{1}?|([0-9]{2})?([0-9]{2})?([0-9]{2})?([0-9]{2})?))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2863
#T: Url
#A: david paul
#D: This expression matches url that starts with or without http(s) 
^(((h|H)(t|T))(t|T)(p|P)((s|S)?)\:\/\/)?((www|WWW)+\.)+(([0-9]{1,3}){3}[0-9]{1,3}\.|([\w!~*'()-]+\.)*([\w^-][\w-]{0,61})?[\w]\.[a-z]{2,6})(:[0-9]{1,4})?((\/*)|(\/+[\w!~*'().;?:@&=+$,%#-]+)+\/*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2864
#T: Password
#A: david paul
#D: This expression validates alphanumeric with one alphabet compulsory and one numeric compulsory and accepts minimum 6 characters and max 15 characters irrespective of the order and case.It doesnt accept special characters
(?!^[0-9 ]*$)(?!^[a-zA-Z ]*$)^([a-zA-Z0-9 ]{6,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2865
#T: URL
#A: david paul
#D: This expression validates urls that starts with http/HTTP/https/HTTPS/ftp/FTP/www/WWW.Its accepts either capital letters or small letters.Address is not case sensitive
^((http|HTTP|https|HTTPS|ftp|FTP?)\:\/\/)?((www|WWW)+\.)+(([0-9]{1,3}){3}[0-9]{1,3}\.|([\w!~*'()-]+\.)*([\w^-][\w-]{0,61})?[\w]\.[a-z]{2,6})(:[0-9]{1,4})?((\/*)|(\/+[\w!~*'().;?:@&=+$,%#-]+)+\/*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2866
#T: IPV4 and IPV6 address
#A: bxliu
#D: IPV4 and IPV6 address
^(((([1]?\d)?\d|2[0-4]\d|25[0-5])\.){3}(([1]?\d)?\d|2[0-4]\d|25[0-5]))|([\da-fA-F]{1,4}(\:[\da-fA-F]{1,4}){7})|(([\da-fA-F]{1,4}:){0,5}::([\da-fA-F]{1,4}:){0,5}[\da-fA-F]{1,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2867
#T: Any Number with Seperators
#A: Becky Hall
#D: Checks a number to see if it matches any international number formats. With or without decimal characters
(?:(?:^(?<sign>[+-]?)(?<predec>[0-9]{1,3}(?:\,?[0-9]{2,3})*)(?<dec>\.)(?<postdec>[0-9]*)?$)|(?:^(?<sign>[+-]?)(?<predec>[0-9]{1,3}(?:\.?[0-9]{2,3})*)(?<dec>\,)(?<postdec>[0-9]*)?$)|(?:^(?<sign>[+-]?)(?<predec>[0-9]{1,3}(?:\'?[0-9]{2,3})*)(?<dec>\.)(?<postdec>[0-9]*)?$)|(?:^(?<sign>[+-]?)(?<predec>[0-9]{1,3}(?:\,[0-9]{2,3})*)(?<dec>\.)(?<postdec>[0-9]*)?$)|(?:^(?<sign>[+-]?)(?<predec>[0-9]{1,3}(?:\ [0-9]{2,3})*)(?<dec>\,)(?<postdec>[0-9]*)?$)|(?:^(?<sign>[+-]?)(?<predec>[0-9]{1,3}(?:\'?[0-9]{2,3})*)(?<dec>\,)(?<postdec>[0-9]*)?$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2868
#T: Fortran 95 Variable Name
#A: Craig Muller
#D: A simple expression to verify a FORTRAN variable name to within 31 chars.
^[a-zA-Z]\w{0,30}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2870
#T: Alphp numeric Underscore 
#A: Deepak Vishwakarma
#D: This expression checks whether the string contains lower or uppercase characters and numbers from zero to nine and an underscore
^[A-Za-z0-9_]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2871
#T: UserId Validation
#A: Nancy Blackwell
#D: Validates a userID to be between 4 and 8 characters - no whitespace or asterisks and at least one alpha.
#D: ^(?=.*[a-zA-Z])  searches for one alpha
#D: [^\*\s] rejects all white space and asterisks
#D: {4,8} limits from 4-8 characters.
^(?=.*[a-zA-Z])[^\*\s]{4,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2872
#T: CA Drivers License
#A: Robert Hall
#D: Matches California Drivers License Numbers. A Letter followed by 7 Numbers. I have not been able to find a site that shows only the number/letters CA uses, so this will have to do for now.
"^[A-Z]{1}\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2873
#T: US Street Address Only
#A: Robert Hall
#D: This will accept any 6 digit street address only, with min of two and up to four street names.
^\d{1,6}\040([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^\d{1,6}\040([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$|^\d{1,6}\040([A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,}\040[A-Z]{1}[a-z]{1,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2874
#T: US Phone Number
#A: Robert Hall
#D: Phone Number in (###) ###-#### Format Only
\(\d{3}\)\040\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2875
#T: US Phone So CA Area Codes
#A: Robert Hall
#D: Phone Numbers Format (###) ###-#### with only SoCal Area Codes. Use or replace with Area Codes You need.
\(714|760|949|619|909|951|818|310|323|213|323|562|626\)\040\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2876
#T: US Phone So CA Area Codes 2
#A: Robert Hall
#D: Phone Number in ###-###-#### Format Only with Southern California Area Codes. Use or Replace Area Codes
714|760|949|619|909|951|818|310|323|213|323|562|626-\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2877
#T: CA Contractors License 
#A: Robert Hall
#D: Simple 6 digit CA contractors License #
\d{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2878
#T: Vehicle Registration Series for India
#A: Jugal Kishor Choudhary
#D: this is usefull for Series of Vehicle Number of Indian Transport
^([A-Z]{2}\s?(\d{2})?(-)?([A-Z]{1}|\d{1})?([A-Z]{1}|\d{1}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2879
#T: Complete Vehicle Registration Number For Indian Transport Dept.
#A: Jugal Kishor Choudhary
#D: Ex.- RJ21-CA 1232
#D: PB08-PA 4354
^([A-Z]{2}\s?(\d{2})?(-)?([A-Z]{1}|\d{1})?([A-Z]{1}|\d{1})?( )?(\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2880
#T: US Phone Number[ANY format]
#A: Waqas Mehmood
#D: Very useful if you want to use ANY-NON-DIGIT as delimiter and return proper US-Phone-Number. Use "($1) $2-$3$4" to get Number in form: "(234) 567-8901".
#D: Will ignore starting 1, 01, 001, +1 etc.
#D: Validates and also captures AreaCode, Prefix and Suffix for reformatting.
#D: In all matching examples, it will return the same result. I have not found any exception yet.
^\D{0,2}[0]{0,3}[1]{0,1}\D{0,2}([2-9])(\d{2})\D{0,2}(\d{3})\D{0,2}(\d{3})\D{0,2}(\d{1})\D{0,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2881
#T: extract all URLs from a string
#A: NoBug
#D: With this expresion you ll be able to extract all the urls of a given text or HTML page.
#D: Works fine using the PHP preg_match function
'`.*?((http|ftp|https)://[\w#$&+,\/:;=?@.-]+)[^\w#$&+,\/:;=?@.-]*?`i'

#U: http://regexlib.com/REDetails.aspx?regexp_id=2882
#T: HtmlAmpCode
#A: Brad Williams
#D: Matches HTML 'amp' codes
((&#[0-9]+|&[a-zA-Z]+[0-9]*?);)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2883
#T: Parse North American Phone Numbers
#A: Allen Mayes
#D: Validates any format of North American phone number, while parsing the Country Code, Area (City) Code, Prefix and Postfix numbers and the letters ext or x followed by the extension number which cannot begin with 0. Will not accept invalid Area Codes 
^(?<CountryCode>[1]?)\s?\(?(?<AreaCode>[2-9]{1}\d{2})\)?\s?(?<Prefix>[0-9]{3})(?:[-]|\s)?(?<Postfix>\d{4})\s?(?:ext|x\s?)(?<Extension>[1-9]{1}\d*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2884
#T: Ultimate URL Match Expression
#A: ASM™
#D: I think this is the ultimate url match expression to every possible url pattern including named or ip address domain
#D: PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com
^(?:(?:http|https|ftp|telnet|gopher|ms\-help|file|notes)://)?(?:(?:[a-z][\w~%!&',;=\-\.$\(\)\*\+]*):.*@)?(?:(?:[a-z0-9][\w\-]*[a-z0-9]*\.)*(?:(?:(?:(?:[a-z0-9][\w\-]*[a-z0-9]*)(?:\.[a-z0-9]+)?)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(?::[0-9]+)?))?(?:(?:(?:/(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))+)*/(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))*)(?:\?[^#]+)?(?:#[a-z0-9]\w*)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2885
#T: E-mail address
#A: ASM™
#D: I think this is a very good e-mail validation match expression
#D: PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com
^(?:mailto:)?(?:[a-z][\w~%!&',;=\-\.$\(\)\*\+]*)@(?:[a-z0-9][\w\-]*[a-z0-9]*\.)*(?:(?:(?:[a-z0-9][\w\-]*[a-z0-9]*)(?:\.[a-z0-9]+)?)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2886
#T: User Name and Password
#A: ASM™
#D: accepts:
#D: 1. user name
#D: - starting with a letter
#D: - [a-z, 0-9, _, - ]*
#D: 2. : delimiter
#D: 3. password with any characters
^(?<username>[a-z][\w.-]*)(?::(?<pwd>[\w.-]*))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2887
#T: Domain Name or IP
#A: ASM™
#D: accepts
#D: - Domain name
#D: - or ip address
^(?:[a-z0-9][\w\-]*[a-z0-9]*\.)*(?:(?:(?:[a-z0-9][\w\-]*[a-z0-9]*)(?:\.[a-z0-9]+)?)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2888
#T: URL Path
#A: ASM™
#D: parse/match url path with:
#D: 1. optional relative path
#D: 2. optional query string
#D: 3. optional fragments
^(?:(?:\.\./)|/)?(?:\w(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))*\w?)?(?:/\w(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))*\w?)*(?:\?[^#]+)?(?:#[a-z0-9]\w*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2889
#T: Email pattern regular expression
#A: arturo
#D: A simple email checking regex . Works with all regular email addresses . Allows only 'a-z' '-' '_' and '.'  to be included withing the user name which must to be started and teminated with 'a-z' and could not have any symbol sequence (like '-_' '._') in it's body .
#D: Must have at least 1 and max 2 sub-domains and 1 TLD (2-4 letters long a must).
#D: Use tolower() before this regex or just add A-Z or ?i flag within the pattern in order to match both cases .
#D: Please see the examples .
^((([a-z0-9])+([\w.-]{1})?)+([^\W_]{1}))+@((([a-z0-9])+([\w-]{1})?)+([^\W_]{1}))+\.[a-z]{2,3}(\.[a-z]{2,4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2890
#T: HTML Color
#A: ASM™
#D: matches # + 3 hex numbers + optional 3 more hex numbers and 2 more hex numbers for alpha
#D: PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com
^#[\dA-Fa-f]{3}(?:[\dA-Fa-f]{3}[\dA-Fa-f]{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2891
#T: MySQL Connection String
#A: HJennerway
#D: Matches a MySQL connection string if the arguments are in the specified order.
#D: Fails if arguments are missing.
Server=([\w\.]+?);\s*?(?:Port=(\d+?);\s*?)?Database=(\w+?);\s*?(?:(?:User)|(?:Uid))=(\w+?);\s*?(?:(?:Password)|(?:Pwd))=(\w*?);.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2892
#T: URL Capture
#A: ASM™
#D: break apart all possible elements of a url to every possible url part
^(?<scheme>(?:http|https|ftp|telnet|gopher|ms\-help|file|notes)://)?(?:(?<user>[a-z][\w~%!&',;=\-\.$\(\)\*\+]*):(?<password>.*)?@)?(?:(?<domain>(?:[a-z0-9]\w*[a-z0-9]*\.)*(?:(?:(?:[a-z0-9]\w*[a-z0-9]*)(?:\.[a-z0-9]+)?)|(?:(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))))(?::(?<port>[0-9]+))?)?(?:(?<path>(?:/(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))+)*/(?:[\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(?:%\d\d))*)(?<params>\?[^#]+)?(?<fragment>#[a-z0-9]\w*)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2893
#T: XML/XSD URL
#A: ASM™
#D: I think this is the ultimate url match expression to every possible url pattern including named or ip address domain PS: you have got to try RegexBuddy it's a very cool tool that helps realy http://www.regexbuddy.com
((http|https|ftp|telnet|gopher|ms\-help|file|notes)://)?(([a-z][\w~%!&',;=\-\.$\(\)\*\+]*)(:.*)?@)?(([a-z0-9][\w\-]*[a-z0-9]*\.)*(((([a-z0-9][\w\-]*[a-z0-9]*)(\.[a-z0-9]+)?)|(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)))(:[0-9]+)?))?(((/([\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(%\d\d))+)*/([\w`~!$=;\-\+\.\^\(\)\|\{\}\[\]]|(%\d\d))*)(\?[^#]+)?(#[a-z0-9]\w*)?)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=2894
#T: Pakistan Phone Number
#A: jahangir shahzad
#D: Mathes all mobile and landline numbers in pakistan
^(\+)?([9]{1}[2]{1})?-? ?(\()?([0]{1})?[1-9]{2,4}(\))?-? ??(\()?[1-9]{4,7}(\))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2895
#T: DTMF
#A: Kristijan Prikratki
#D: Tests expression for DTMF combinations (numbers 0-9, asterisk, octothorpe and A,B,C,D or a,b,c,d). Does not limit number of occurrences or their order.
^[0-9#\*abcdABCD]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2896
#T: PESEL
#A: Paweł Krawczyk
#D: Polish national ID number PESEL (Powszechny Elektroniczny System Ewidencji Ludnosci).
[0-9]{4}[0-3]{1}[0-9}{1}[0-9]{5}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2899
#T: Numero de tel
#A: Fred
#D: Mise en forme du numéro de téléphone
((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2900
#T: CSV - Numbers
#A: Kristijan Prikratki
#D: Parses comma-separated numbers. Doesn't allow spaces inbetween numbers and/or between numbers and commas. Allows single number to be added. Doesn't allow sequence to end with a comma.
^[0-9]+(,[0-9]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2901
#T: Validate Time
#A: Andrew Tatum
#D: Validates time that's formatted by the ajax MaskedEditEditor (typically in 00:00 AM/PM). Validates 12/24 hour times.
^ *([0-1]?[0-9]|[2][0-3]):[0-5][0-9] *(a|p|A|P)(m|M) *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2902
#T: Validate Time
#A: Andrew Tatum
#D: Validates time that's formatted by the ajax MaskedEditEditor (typically in 00:00 AM/PM). Validates 12/24 hour times.
^ *([0-1]?[0-9]|[2][0-3]):[0-5][0-9] *(a|p|A|P)(m|M) *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2903
#T: Validate Time
#A: Andrew Tatum
#D: Validates time that's formatted by the ajax MaskedEditEditor (typically in 00:00 AM/PM). Validates 12/24 hour times.
^ *([0-1]?[0-9]|[2][0-3]):[0-5][0-9] *(a|p|A|P)(m|M) *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2905
#T: URL Validator
#A: Harry
#D: This expression will test against most URLs and return whether they are valid URL's or not. It will allow some false positives in that it is only checking for the correct character count, but this could be enhanced by adjusting it to check for specific TLDs or file extensions.
^(https?|ftp)(:\/\/)(([\w]{3,}\.[\w]+\.[\w]{2,6})|([\d]{3}\.[\d]{1,3}\.[\d]{3}\.[\d]{1,3}))(\:[0,9]+)*(\/?$|((\/[\w\W]+)+\.[\w]{3,4})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2906
#T: India Mobile Number
#A: Sunny Raheja
#D: India mobile number, accept 0  prefix 
for mobile:^[0][1-9]{1}[0-9]{9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2907
#T: India phone number..that is Landline number
#A: Sunny Raheja
#D: India phone(landline) number, accept 0 for prefix and - (hifen) after the STD code.
^[0][1-9]{2}(-)[0-9]{8}$  and  ^[0][1-9]{3}(-)[0-9]{7}$  and  ^[0][1-9]{4}(-)[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2908
#T: E maill format
#A: Sunny Raheja
#D: This can check the email of any kind..
\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2909
#T: Check Decimal values
#A: Hemant Kumar
#D: check your decimal 13,4 values
^[\-]{0,1}\d{0,8}$|^[\-]{0,1}\d{0,8}(\.\d{0,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2910
#T: India Mobile Number with +91
#A: Sunny Raheja
#D: In this Pattern +91 will be the prefix in the Mobile number(of 10 digits).
^((\+){1}91){1}[1-9]{1}[0-9]{9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2911
#T: Australian Residential Address
#A: Reza
#D: It is not very strong and I am still working on that. Would like to put it up so that people can help to complete it.
#D: The problem is with addresses that do not have unit number, it picks the first digit of the street number as the unit number.
^((unit|u|)\s*)?(?<unit>\d*\w?)?(\s+|/)?(?<streetNo>\d+(\-\d+)?)\s+(?<streetName>\w+)\s+(?<streetType>\w+)\s+(?<suburb>\w+(\s+\w+)?)\s+(?<state>\w+)\s+(?<postcode>\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2912
#T: Dutch License Plate
#A: Christof Verhoeven
#D: Regex to validate Dutch licenseplates. Matches all seven side code formats for cars. Only hyphens will match as separator between groups.
^(?>[A-Z]{2}|\d\d)-(?>[A-Z]{2}|\d\d)-(?<!\d\d-\d\d-)\d\d$| ^(?>[A-Z]{2}|\d\d)-(?>[A-Z]{2}|\d\d)-(?<![A-Z]{2}-[A-Z]{2}-)[A-Z]{2}$| ^\d\d-[A-Z]{3}-\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2913
#T: Belgian License Plate
#A: Christof Verhoeven
#D: Matches all 5 formats for Belgian cars. Only hyphens will match as separators between groups
^[A-Z]-\d{3}(?>\d|-[A-Z])$|^[A-Z]{2,3}-\d{3}$|^\d{3}-[A-Z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2914
#T: Dutch License Plate
#A: Christof Verhoeven
#D: Matches all 7 side code formats for cars. Only hyphens will match as separators between groups
^(?>[A-Z]{2}|\d\d)-(?>[A-Z]{2}|\d\d)-(?<!\d\d-\d\d-)\d\d$|^(?>[A-Z]{2}|\d\d)-(?>[A-Z]{2}|\d\d)-(?<![A-Z]{2}-[A-Z]{2}-)[A-Z]{2}$|^\d\d-[A-Z]{3}-\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2915
#T: Date (dd-mm-yy[yy])
#A: Christof Verhoeven
#D: Limits days to 31 and months to 12. Hyphen, dot and slash are valid separators and have to be consistent.
^[0-3]{1}(?(?<=3)[01]{1}|\d)([-.\/]{1})[01]{1}(?(?<=1)[0-2]{1}|\d)\1(\d{2}|\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2916
#T: Numeric 0 to 29
#A: Gaurav Agrawal
#D: It is use for 0 to 29.
^(([0-2])?([0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=538
#T: SKK-STRING-Parse Comma Delimited Strings
#A: skk
#D: Parse Comma Delimited Strings
#D: ----------------------
#D: #U: http://regexlib.com/REDetails.aspx?regexp_id=538
#D: </tr>
#D: <tr class="matches">
#D: <th scope="row">Matches</th>
#D: <td><div class="overflowFixDiv"><span id="ctl00_ContentPlaceHolder1_MatchesLabel">A,B,C
^(?<field1>[^,]+),(?<field2>[^,]+),(?<field3>[^,]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2919
#T: IPv6 addresses including compressed and IPv4-embedded variants (RFC 2373)
#A: mij
#D: This RE recognizes IPv6 addresses for all the representations described by RFC 2373:
#D: 1) extended format (with both upper and lowercase HEX)
#D: 2) compressed format (eg 2001::6:a)
#D: 3) IPv4-embedded format (eg ::ffff:1.2.3.4) limited to addresses of the traditional dual-stack configuration
#D: Resulting from observation of real-world implementations, case 2) is extended to allow "::" for one 0-group alone. Although the RFC is clear on "::" being for "multiple groups of 16-bits of zeros" only, some tools like "dig" for the mac produce those values.
#D: The RE is simple and quite elegant; it has been tested on over 300 IPv6 addresses collected by dig-ing IPv6-enabled domains; it is used in sshguard's log parser, see http://www.sshguard.net .
(::|(([a-fA-F0-9]{1,4}):){7}(([a-fA-F0-9]{1,4}))|(:(:([a-fA-F0-9]{1,4})){1,6})|((([a-fA-F0-9]{1,4}):){1,6}:)|((([a-fA-F0-9]{1,4}):)(:([a-fA-F0-9]{1,4})){1,6})|((([a-fA-F0-9]{1,4}):){2}(:([a-fA-F0-9]{1,4})){1,5})|((([a-fA-F0-9]{1,4}):){3}(:([a-fA-F0-9]{1,4})){1,4})|((([a-fA-F0-9]{1,4}):){4}(:([a-fA-F0-9]{1,4})){1,3})|((([a-fA-F0-9]{1,4}):){5}(:([a-fA-F0-9]{1,4})){1,2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2920
#T: Simple date
#A: Kocus
#D: simple test for C# inputs and CZ locale. No all accepted inputs are corect.
(^\d{1,2}\.\d{1,2}\.\d{4})|(^\d{1,2}\.\d{1,2})|(^\d{1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2921
#T: Numbers 1-10
#A: Aditya Sunchu
#D: Numbers ranging from 1 through 10 
^[1-9]0?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2922
#T: IP address
#A: Arjun Jaiswal
#D: This regular expression validates an IP address within the range of 1.0.0.0 to 255.255.255.255
^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2923
#T: UK Limited Company Number
#A: David Rose
#D: Matches against a valid UK Limited company numer, either Scotland, Wales England or Northern Ireland. Either 8 numerical digits or SC followed by 6 numerical digits are allowed
^\d{8,8}$|^[SC]{2,2}\d{6,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2924
#T: Megaupload link
#A: Eduardo
#D: Detects megaupload files and folders links.
megaupload\.com.*(?:\?|&)(?:(?:folderi)?d|f)=([A-Z-a-z0-9]{8})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2925
#T: Not contain blank or 0
#A: Steve Holzer
#D: Used for a dropdown list that might have a couple of default selections you want to include.
^[^ ,0]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2926
#T: Test integer value
#A: Sam Moore
#D: This particular expression tests an integer value to see if it's equal to or greater than 250.
#D: Obviously you can alter it to test other values.
#D: The first section passes all four-digit or greater integers.
#D: The second section passes all 3-digit integers greater than 300.
#D: The last section requires that three digit integers with "2" at their start must have 5 or greater for their second digit.
^\d{4,}$|^[3-9]\d{2}$|^2[5-9]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2927
#T: U.S. Phone Number
#A: Yihsun Tsai
#D: Matches most format of valid U.S. phone number. Only numbers whose first digit of area code is between 2 and 9 and whose country code is 1 would be matched. Does not match phones contain characters. See examples for more information.
(\+?1[- .]?)?[.\(]?[\d^01]\d{2}\)?[- .]?\d{3}[- .]?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2928
#T: capture numbers with/without commas
#A: david t
#D: This captures (for filters out non digits) numbers with or without commas (eg currency as above) in the correct order - the other examples I see here don't capture in right order for all combinations. It doesn't check lengths or leading digits or number of digits between commas- that is left as an exercise for the student.
#D: First example gives:[4],[234],[567],[89]
#D: Second gives:
#D: [],[1],[234],[80]
#D: rather than the incorrect:
#D: [1],[],[234],[80]
\$(\d*)??,??(\d*)??,??(\d*)\.(\d*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2929
#T: css single selector pattern
#A: waleed mohamed
#D: to select single selector name of css including id, class name, descendants ,child, direct and indirect siblings.also it's captured into 3 catpuring names
(?<Element>((\*|\w+)?)) (?<Complement>((\.|\#|\-|\w|\:)*)) (?<FamilySeparator>([\s\>\+\~]|[\,\{]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2930
#T: 1 to 9999 Positive Numbers
#A: Gaurav Agrawal
#D: This is only +ive numbers excluding 0. It takes 1 to 9999.
^[1-9]{1}$|^[0-9]{1}[0-9]{1}[0-9]{1}[0-9]{1}$|^9999$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2931
#T: For Accepting only Indian mobile numbers with exactly 10 Digits or blank
#A: Anand Khandelwal
#D: This will accept all the Mobile nos starting with 8 or 9 and having exactly 10 digits (total) or it must be blank
^[89][0-9]{9}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2932
#T: RecID
#A: William
#D: Unecsape Bad Characters
((<data name=){4}[^=]+>)([^=]*)(</data>){4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2933
#T: Dutch date & time combination
#A: nikneem
#D: Validates dutch (european) date and time combination (dd-mm-yyyy). Dates are accepted, date and time is accepted. The time notation (hh:mm:ss) may or may not contain a value for seconds
^([3]{1}[0-1]{1}|[1-1]?[0-9]{1})-([0-1]?[0-2]{1}|[0-9]{1})-[0-9]{4}([\s]+([2]{1}[0-3]{1}|[0-1]?[0-9]{1})[:]{1}([0-5]?[0-9]{1})([:]{1}([0-5]?[0-9]{1}))?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2934
#T: Pattern to validate an Email
#A: Diptesh Patel
#D: This pattern is set to case in-sensitive (i.e '/i').
#F: i
^[a-z][\w\.]+@([\w\-]+\.)+[a-z]{2,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2935
#T: US Phone Validation
#A: Diptesh Patel
#D: Used to check US phone pattern
^[\d]{3}[\s\-]*[\d]{3}[\s\-]*[\d]{4}\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2936
#T: Style background-image attribute
#A: Karan Saini
#D: returns the background-image property with its value. It will not return the uppercase property value like Background-image. 
background-image.[^<]*?;

#U: http://regexlib.com/REDetails.aspx?regexp_id=2937
#T: Javascript regex for URL with optional domain name
#A: nirmalya sinha
#D: Matches the folloings -
#D: http://a (without domain name, for local network machines)
#D: http://abcd (any length)
#D: http://www.abcd.com
#D: http://www.abcd.com/a
#D: http://www.abcd.com:800
#D: http://www.abcd.com:800/a
#D: http://255.255.255.255
#D: http://255.255.255.255:800
#D: http://www.google.co.in/setprefs?sig...fAvHcHs=&hl=hi
#D: The following URLs are invalid
#D: http://a. (any string ending with special character)
#D: http://*a (starting with special character)
#D: One limitation of the regex is that it doesn't check the list of valid domains. I purposefully kept it out since that list is very long (http://www.norid.no/domenenavnbaser/domreg.html). Otherwise I think it will work fine.
^(http|https)\://((([a-z]+)(([a-z0-9\.\,\?\'\\\+&%\#\=~_\-]+)?([a-z0-9\/]+))?)|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]|0)))(\:[0-9]+)*(([a-z0-9\.\,\?\'\\\+&%\#\=~_\-]+)?([a-z0-9\/]+))?\$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2938
#T: Active Directory User@Domain Format
#A: Matthew Harris
#D: This uses named groups to extract the user and domain portions of an Active Directory user in user@domain format.
#D: You can use the following c# code to convert this into domain\user format:
#D: public string ConvertUserAtDomainToDomainUser(string userAtDomain)
#D: {
#D: return Regex.Replace(userAtDomain,
#D: @"^(?<user>.+)@(?<domain>.+)$",
#D: @"${domain}\${user}");
#D: }
#D: This regex is intended to provide extraction from valid user@domain strings rather than validate its format.
^(?<user>.+)@(?<domain>.+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2939
#T: 101/ or 101-
#A: Bhushan
#D: \d[0-9]*
#D: 1)start should be from 0 to 9, any digit number, should not be blank.
#D: [-/]
#D: 2)- or / compulsary.
#D: \d[0-9]*
#D: 3)start should be from 0 to 9, any digit number, should not be blank.
#D: 4)Blank not allowed
^\d[0-9]*[-/]\d[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2940
#T: Time in HHMMSS format
#A: Dennis Piepel
#D: Validates time in HHMMSS format where valid times range from 000000 to 235959
^(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2941
#T: Path extraction
#A: Any
#D: To extract the first path from both windows and unix complete path (need / or \ at the end if we have only one path, but can be easily change)
(^(?:\w\:)?(?:/|\\\\){1}[^/|\\]*(?:/|\\){1})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2942
#T: IP address
#A: Konstantin
#D: This is a standard perl-compatible regexp for ip4 address validation
^(([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])\.){3}([01]?[0-9]{1,2}|2[0-4][0-9]|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2943
#T: Seven digit number with leading zeros
#A: Martin Hawes
#D: This will check to see if the string entered is all digits and is seven digits long. It will allow for leading zeros and also not allow for all zeros to be entered.
^(000000[1-9])$|^(00000[1-9][0-9])$|^(0000[1-9][0-9][0-9])$|^(000[1-9][0-9][0-9][0-9])$|^(00[1-9][0-9][0-9][0-9][0-9])$|^(0[1-9][0-9][0-9][0-9][0-9][0-9])$|^([1-9][0-9][0-9][0-9][0-9][0-9][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2944
#T: date validation javascript
#A: Terry Shannon
#D: Check that a valid date has been entered. Uses mm/dd/yyyy or m/d/yy format or various combinations. Checks for valid leap years.
^((((0?[13578]|1[02])\/([0-2]?[1-9]|20|3[0-1]))|((0?[469]|11)\/([0-2]?[1-9]|20|30))|(0?2\/([0-1]?[1-9]|2[0-8])))\/((19|20)?\d{2}))|(0?2\/29\/((19|20)?(04|08|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96)|2000))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2945
#T: Regular expression for comma separated integer values
#A: pavan kumar
#D: It is for Comma separated integer values only.it won't allow comma before and end string.
#D: Valid Expression :
#D: 123,345,4444444,56,6
#D: Invalid Expressions :
#D: 12,@@34,fsff,333,
#D: ,12,234,456
#D: 34,567,3456,
#D: 111,11fff,&*,fff,567
#D: the above all invalid.
^[0-9][0-9,]*[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2946
#T: MySQL Query File
#A: Patrick Zahra
#D: Splits a mysql query file by matching everything but the semicolon at the end. Handles all three comments ("-- ", "#", "/*...*/"), all three quotes (", ', `), and all three line break styles (\r, \n, \r\n).
#D: Use with multiline and ignore whitespace/comments.
(?:\N""(?:(?:(?:\\.)|[^""\\\r\n])*)""| #double-quoted strings\N'(?:(?:(?:\\.)|[^'\\\r\n])*)'| #single-quoted strings\N`(?:(?:(?:\\.)|[^`\\\r\n])*)`| #backticked names\N(?:\s?(?:\#|--\ ).*(?=[\r\n]))| #hash comments or double-dash comments\N(?:/\*(?:(?:[^*]|\*(?!/))*)\*/)| #multiline comments\N(?:[^;`'""](?!(?:--\ |\#|/\*)))* #everything else not quote or followed by comment\N(?:[^;`'""](?=(?:--\ |\#|/\*)))? #that last possible character before that comment\N)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2947
#T: italian mobile number
#A: enzo contini
#D: Check if the number is a valid italian mobile number. Note: even though 35X is non given yet, this regular expression consider it a valid number just in case it will be!
^(([+]|00)39)?((3[1-6][0-9]))(\d{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2948
#T: ip_regex
#A: Ugur Dogru
#D: Matches ip addresses. Takes into account trailing left zeros.
^((0*[0-1]?[0-9]{1,2}\.)|(0*((2[0-4][0-9])|(25[0-5]))\.)){3}((0*[0-1]?[0-9]{1,2})|(0*((2[0-4][0-9])|(25[0-5]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2949
#T: Password Validation
#A: Terry Palmer
#D: 8-20 chars;
#D: at least one alpha;
#D: at least one number or special char;
#D: up to 3 repeating chars, no more
^(?!.*(.)\1{3})((?=.*[\d])(?=.*[A-Za-z])|(?=.*[^\w\d\s])(?=.*[A-Za-z])).{8,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2950
#T: UK NINO - National Insurance Number
#A: Raymond Jett
#D: First letter cannot be: D, F, I, Q, U, or V
#D: Second letter cannot be: D, F, I, O, Q, U, or V
#D: The first two character combinations BG, GB, NK, KN, TN, NT, and ZZ are not used.
#D: Followed by 6 digits (0-9)
#D: Finished by a suffix: A, B, C, D, F, or M
\b([A-CEGHJ-PR-TW-Z]{1}[A-CEGHJ-NPR-TW-Z]{1}(?<!BG|GB|NK|KN|TN|NT|ZZ))[0-9]{6}[A-DFM]{1}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=2951
#T: strip html tags
#A: Peadarin
#D: Strip html tags, e.g. the ones that can be replaced by a space. Add more tags if needed. Can be used as a weak replacement of HTML tools to convert html to raw text. Could be used for html structure syntax highlighting.
<(/|/?(a|p|img|br|table|td|tr))(\s+\w+\s*=(|\s*[^"\s>]+|\s*"[^"]*"))*/?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=2952
#T: german telephone numbers
#A: Daniel
#D: 'Deutsche Telefonnummern'
#D: Matches German phone and fax numbers (including cell phone numbers) in various formats like:
#D: 004989123456,
#D: +49 89 123456,
#D: +49(89)123456,
#D: 089-1234-5678,
#D: 089 1234 5678,
#D: (089)1234-5678
#D: Max. number of digits is 21.
^(((((((00|\+)49[ \-/]?)|0)[1-9][0-9]{1,4})[ \-/]?)|((((00|\+)49\()|\(0)[1-9][0-9]{1,4}\)[ \-/]?))[0-9]{1,7}([ \-/]?[0-9]{1,5})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2953
#T: Stub URL
#A: Jeff Churchill
#D: Validation for stub urls
^[a-zA-Z]([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*[a-zA-Z])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2954
#T: Stub or Regular URL
#A: Jeff Churchill
#D: This validates a custom Stub URL or a standard URL
^[a-zA-Z]([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*[a-zA-Z])?$|^http(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2955
#T: Strong Password
#A: Kamal Pant
#D: Password length must be between 6-15 and it must contain at least one letter,one special character, and a number.
(?=^.{6,15}$)(?=.*\d)(?=.*\W+)(?![.\n])(?=.*[a-zA-Z]).*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2956
#T: Validate ZA Phone Numbers
#A: Rory Cottle
#D: Matches South African telephone/mobile numbers, with or without the country code. Can also include spaces or hyphens between values. Doesn't match brackets around the area code, but that would be easy to add in. Hope it helps someone...
^((?:\+27|27)|0)(\d{2})-?(\d{3})-?(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2957
#T: SQL Server Connection String
#A: HJennerway
#D: Matches an SQL Server 2008 Connection String
(?:(?:Data Source)|(?:Server))=([\w\.]+?);\s*?(?:(?:Initial Catalog)|(?:Database))=(\w+?);\s*?(?:(?:User Id)|(?:Uid))=(\w+?);\s*?(?:(?:Password)|(?:Pwd))=(\w*?);.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2958
#T: 4 digit year format YYYY
#A: Rajesh Dhanwada
#D: Valid for years 1800-2099. Can be easily modified to extend the range
(1[8,9]|20)[0-9]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2959
#T: HTTP head
#A: V
#D: Matches everything from the beginning to the first empty line. Used to match the head of an HTTP response.
^([^\r\n]*\r?\n(?!\r?\n))*[^\r\n]*\r?\n

#U: http://regexlib.com/REDetails.aspx?regexp_id=2961
#T: Portuguese Postal Code
#A: Moriko Jones
#D: Validates complete portuguese postal code xxxx-yyy or old postal code xxxx
^(\d{4}-\d{3})|\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2962
#T: Verify Absolute and UNC paths
#A: Robert Burke
#D: Allows to match Absolute and UNC paths in Windows.  Can find all characters except the Windows illegal file/filename characters: \/:*?"<>|
(([A-Z]:{1}\\)|\\{2})[(\w\.~`!@#$%^&\(\)+=\{\}\[\];',.\\)]{0,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2963
#T: (="<SCRIPT>ALERT("HELLO...")
#A: richard aquilo jr
#D: security contractor gigged me on what i posted in the title. the validator that detects it, is the expression i posted.
[^<>?&^!*@\\+'"`]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2964
#T: Decimal Number
#A: Mihail Poltorihin
#D: Parses a decimal number. returns two match groups <sign> and <abs_value>. Accepts empty string.
^\s*(?<sign>[+-]?)(?:0*?)(?<abs_value>(?:(?:[1-9]\d*)|0)?(?:(?<=\d)\.|\.(?=\d))(?:(?:(?:\d*[1-9])|0)?)?|(?:(?:[1-9]\d*)|0)?)(?:0*)\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2966
#T: Persian Date
#A: paiman roointan
#D: a simple expression to validate Persian dates.
^1[34][0-9][0-9]\/((1[0-2])|([1-9]))\/(([12][0-9])|(3[01])|[1-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2967
#T: Indonesian Cell Phone Number Validation
#A: Didi Yudhiarto walnutz.net
#D: Validate Indonesian "Mobile Numbers Only" with or without the country code, also base on regular phone number format at http://id.wikipedia.org/wiki/Daftar_kode_telepon_di_Indonesia. This regex only allowed characters that accepted by mobile phone/sms gateway only :D
^((?:\+62|62)|0)[2-9]{1}[0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2968
#T: Allow user to enter AlphaNumeric Values
#A: Ashish Patel
#D: This will allow user to enter only AlphaNumeric values. you can use as a Regular expression in Asp.net from version 1.1,2.0,3.5
#D: eg: Your Textbox can not contain special characters like @ # $ % ^ & * ( )
[a-zA-Z0-9]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=2969
#T: Email
#A: ZOU Ning
#D: match the common email format
(\w+[\.\_\-]*)*\w+@[\w]+(.)*\w+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2970
#T: Mathematical Expression
#A: Bruce Wayne
#D: Useful for validating a basic singleline mathematical expression prior to calculating its value (as with eval).
#D: It allows numbers with optional 4 decimals marked with comma.
#D: Valid operations: addition, substraction, multiplication, division.
#D: Accepts negative numbers.
#D: Accepts only round brackets and balances them (.NET ONLY !!!).
^ (?: (?>                                                             # non backtracking for alternated tokens            (?:                \-                                                  # "-" operator                (?=\d|\()                                      # followed by digit or "("            ) |            (?:               (?<=\d|\))                                    # preceded by digit or ")"               (?:\+|\/|\*)                                    # basic operators except "-"               (?=\d|\(|\-)                                   # followed by digit or "(" or "-"            ) |            (?<parenthesis>                          # incremente balancing group "parenthesis" counter               (?<=^|\+|\/|\-|\*|\()                       # preceded by start of line or basic operator or "("               \(                                                  # opening parenthesis "("               (?=\d|\(|\-)                                   # followed by digit or "-" or "("            ) |            (?<-parenthesis>                        # decrement balancing group "parenthesis" counter               (?<=\d|\))                                    # preceded by digit or ")"               \)                                                  # opening parenthesis ")"               (?!\d)                                           # not followed by digit             ) |            (?:               (?<=\(|\-|\+|\*|\/|^)                       # preceded by start of line or basic operator or "("               (?:\d+(?:\,\d{1,4})?)                   # number with optional 4 decimal with comma as decimal marker               (?=$|\)|\-|\+|\*|\/)                         # followed by end of line or ")" or basic operator             ) ) + (?(parenthesis)(?!))                               # test for balancing group "parenthesis" counter )                                                                 # unnamed group whole expression $

#U: http://regexlib.com/REDetails.aspx?regexp_id=2971
#T: Head Parser
#A: Tim Cartwright
#D: Parses the objects out from an html header. These objects are: meta, style, link, and script. Use with the multiline option to pull from multine scripts and styles.
(<meta [.\w\W]*?\>)|(<style [.\w\W]*?</style>)|(<link [.\w\W]*?\>)|(<script [.\w\W]*?</script>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2972
#T: Location cordinates
#A: binder hamlyn
#D: Latitude and longitude coordinates separated by a comma in the form:
#D: N 0:59:59.99,E 0:59:59.99 No restriction on degrees. Use split on comma to separate Latitude and Longitude then on colon and space for parts to convert into a decimal value. 
[NS] \d{1,}(\:[0-5]\d){2}.{0,1}\d{0,},[EW] \d{1,}(\:[0-5]\d){2}.{0,1}\d{0,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2973
#T: Tex / Latex Matcher
#A: Bashir Magomedov
#D: This expression helps in finding any text inside [tex] – [/tex] tags. For example returns x+y=z for the following input [tex]x+y=z[/tex] Was written for parsing LaTex equations written by users in Html editor. Despite its’ original purpose it can be used for matching of any arbitrary tags in squared brackets.
(?<=[[]tex[]]).*?(?=[[]/tex[]])

#U: http://regexlib.com/REDetails.aspx?regexp_id=2974
#T: extract packge and class from imports
#A: belun
#D: used in java code to get the imported classes together with their package.
#D: test string:
#D: package mysecondpackage;
#D: import mypackage.level0.MyClass;
import (.*);

#U: http://regexlib.com/REDetails.aspx?regexp_id=2975
#T: CUIT CUIL
#A: Vero Massera
#D: Valida nros de CUIT y CUIL de la AFIP - Argentina. No valida el digito verificador
^(20|23|27|30|33)-[0-9]{8}-[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2976
#T: Numeric range from 1-10
#A: Jed Albao
#D: Matches the numbers 1-10 and only the numbers 1-10.
(^[1-9]$)|(^10$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2977
#T: Email address validation
#A: Rafael de la Torre Consuegra
#D: Checks if an email address is valid.
^([+a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,6}|[0-9]{1,3})(\]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2978
#T: One letter and only one letter
#A: Jed Albao
#D: Matches a string that contains exactly one letter in the range A-Z or a-z. 
^[A-Za-z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2979
#T: Match Website
#A: Amit kumar sinha
#D: This regex matches 'http://' optionally followed by 'www.' then starts a group and matches one or more of any character that is not a full stop/period (.) closes the group then matches '.com'.
http://(www\.)?([^\.]+)\.com 

#U: http://regexlib.com/REDetails.aspx?regexp_id=2980
#T: RegEx to match Invalid XML character
#A: dasarath
#D: RegEx to match Invalid XML character
[^\u0009\u000A\u000D\u0020-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]

#U: http://regexlib.com/REDetails.aspx?regexp_id=2981
#T: Sassy Date Match
#A: Andrew Nelder
#D: Will match a variety of different date formats; however, it is not a good example of "simple" regex and can really contribute to processing time.  This was made for a very specific purpose and should only be used when no other faster methods are available.
([A-Za-z]{0,}[\.\,\s]{0,}[A-Za-z]{1,}[\.\s]{1,}[0-9]{1,2}[\,\s]{0,}[0-9]{4})| ([0-9]{0,4}[-,\s]{0,}[A-Za-z]{3,9}[-,\s]{0,}[0-9]{1,2}[-,\s]{0,}[A-Za-z]{0,8})| ([0-9]{1,4}[\/\.\-][0-9]{1,4}[\/\.\-][0-9]{1,4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2982
#T: Sassy Time Match
#A: Andrew Nelder
#D: Made for a very specific purpose.  It's likely pretty slow.  Use at your own risk and don't complain.
([0-9]{1,2}[:][0-9]{1,2}[:]{0,2}[0-9]{0,2}[\s]{0,}[AMPamp]{0,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=2983
#T: Strong Password
#A: Jay French
#D: Password between 8 and 20 characters; must contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character, but cannot contain whitespace.
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\s).{8,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2984
#T: Decimal Points ( Dot) Validation
#A: Vishnuvardhan
#D: It Allows Only One decimal point in a given number
^\d*(\.\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2985
#T: Item Number Pattern 1.236-896.6 valdation
#A: Vishnuvardhan
#D: It Will check for unique Pattern Which we have used in our project
^\d{1}(\.\d{3})-\d{3}(\.\d{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2986
#T: Remove HTML Markup
#A: Burke Harris
#D: Matches any text inside greater than less than characters. Can be used to remove HTML Markup including attributes and comments.
(<(!--|script)(.|\n[^<])*(--|script)>)|(<|<)(/?[\w!?]+)\s?[^<]*(>|>)|(\&[\w]+\;)

#U: http://regexlib.com/REDetails.aspx?regexp_id=2987
#T: MySQL Query Comments and Strings
#A: Patrick Zahra
#D: Isolates MySQL Query strings and comments. Lines that look like comments inside strings are not falsely recognised as comments. To strip comments from a MySQL Query, simply replace all matches with group 1
("(?:(?:(?:\\.)|[^"\\\r\n])*)"|'(?:(?:(?:\\.)|[^'\\\r\n])*)'|`(?:(?:(?:\\.)|[^`\\\r\n])*)`)|((?:-- .*)|(?:#.*)|(?:/\*(?:(?:[^*]|\*(?!/))*)\*/))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2988
#T: Linux Uptime Command
#A: Sam Crookes
#D: Take the output of the uptime command and split it into a useful array.
#D: Use array combine with the below keys array for usefull output.
#D: array('raw','time','up1','unit1','up2','unit2','users','1min','5min','15min')
^([0-2][0-9]\:[0-5][0-9]\:[0-5][0-9])\s+up\s+([0-9\:]{1,5})\s*(days|day|min|mins)?(?:\,\s+([0-9\:]{1,5})\s*(days|day|min|mins)?)?\,\s+([0-9]{1,4})\susers?\,\s+load\s+average\:\s+([0-9\.]{1,6})\,\s+([0-9\.]{1,6})\,\s+([0-9\.]{1,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2989
#T: Currency Fields
#A: Vishnuvardhan
#D: Field Should accept only - and . in special characters and it should allow only numeric data 
^[-]?\d*(\.\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2990
#T: Number as English text
#A: Michael Ash
#D: Match words in English that represent a number
\b(((((one|t((en)|(wo)|(hree)|(welve)|(hirteen))|(evelen)|(f((our)|(ive))|s((ix)|(even))|eight|nine)(teen)?))\b(\s+hundred\s*)?)| ((t((wen)|(hir))|f((or)|(if))|s((ix)|(even))|eigh|nin)ty)(-(one|t((wo)|(hree))|f((our)|(ive))|s((ix)|(even))|eight|nine))?) (\s*(hundred|thousand|((([mb]|(t|quad)r))illion))\s*(and\s+)?)?)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=2991
#T: Password Strength
#A: Jay A. Moritz
#D: This .NET Framework expression tests a submitted password for length, a capital and lower case letter, a number or punctuation character and no spaces.<br />
#D: (?=.{8,32}$) tests for a minimum of 8 characters and maximum of 32.
#D: (?=.*\p{Lu}) tests for at least one upper case letter anywhere in the string.
#D: (?=.*\p{Ll}) tests for at least one lower case letter anywhere in the string.
#D: ((?=.*\p{N})|(?=.*\p{P})) tests that there is at least one number OR one punctuation mark.
#D: (?!.*\s) tests that there are no spaces in the string.
^((?=.{8,32}$)(?=.*\p{Lu})(?=.*\p{Ll})((?=.*\p{N})|(?=.*\p{P}))(?!.*\s))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2992
#T: Strong Password Validation
#A: John Pirkey
#D: This should require all of the following: An uppercase letter, a lowercase letter, a number and a special character from the provided list. Lastly, it needs to be between 8 and 20 characters long.
#D: A lot of expressions I've found here don't require all four, this should.  I'm pretty new at regex though, so I hope that other people will help strengthen this expression.
#D: When testing on this site, make sure you have the Case Insensitive checkbox turned off.
^(?=.*[!@#$%^&*()\-_=+`~\[\]{}?|])(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]).{8,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2993
#T: Quebra um endereço em suas partes
#A: Adislon Carvalho
#D: Quebra um endereço em TIPO LOGRADOURO, ENDERECO, NÚMERO e COMPLEMENTO.
#D: Segue norma da Prefeitura Municipal de Curitiba
^(?<tipo>.{1,3})\s+(?<endereco>.+),\s+(?<numero>\w{1,10})\s*(?<complemento>.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2994
#T: Color Hex
#A: Netken
#D: Hexadecimal color values to validate the system must begin with a # symbol, which can be combination of numbers and letters AF, but the letters must be uppercase.
^#(\d{6})|^#([A-F]{6})|^#([A-F]|[0-9]){6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=2995
#T: Extract all class names from a PHP file
#A: Andris
#D: This expression extract all class names from a php source code. E.g. it will extract A from the following declarations
#F: Usi
class\s+([a-z0-9_]+)(?:\s+extends\s+[a-z0-9_]+)?(?:\s+implements\s+(?:[a-z0-9_]+\s*,*\s*)+)?\s*\{

#U: http://regexlib.com/REDetails.aspx?regexp_id=2996
#T: Local Windows Path
#A: Wolfgang Schliess
#D: This expression matches a local windows path.
^[a-zA_Z]:(\\([a-zA_Z0-9-_@]+(\s*[a-zA_Z0-9-_@]+)*)*)*\\$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2997
#T: Percent 1 to 100 (precision 2 decimal places)
#A: Kieran Hegarty
#D: Only positive values in the range 1.00 to 100.00 (2 decimal places maximum) are valid. The decimal precision is optional. The Percent char % is not used.
^(100(\.0{0,2}?)?$|([1-9]|[1-9][0-9])(\.\d{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2998
#T: Italian mobile phone
#A: Fabrizio Peresson
#D: This pattern matches italian mobile phone numbers:
#D: - Tim (330, 331, 333, 334, 335, 336, 337, 338, 339, 360, 363, 366, 368)
#D: - Vodafone Italia (340, 342, 345, 346, 347, 348, 349)
#D: - Wind (320, 323, 327, 328, 329, 380, 383, 388, 389)
#D: - 3 Italia (390, 391, 392, 393)
#D: - RFI (313)
#D: - virtual operators (370, 373, 377)
^([+]39)?\s?((313)|(32[03789])|(33[013456789])|(34[0256789])|(36[0368])|(37[037])|(38[0389])|(39[0123]))[\s-]?([\d]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3000
#T: Indian Postal/Zip code
#A: Rakes Singh
#D: Indian Postal has siz digit of length and does not start with zero
^(?!0{1})\d{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3001
#A: Ajay Sharma
#D: Regular Expression matches any internet URLs. Used with the replace method it comes in very handy.
(https:[/][/]|http:[/][/]|www.)[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3002
#T: World Wide IBAN VALIDATOR, all 50 countries 
#A: Gerrit Post
#D: Checks all Iban numbers on the first 2 characters example NL has 18 characters less or more is not allowed
^((NO)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(NO)[0-9A-Z]{15}|(BE)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(BE)[0-9A-Z]{16}|(DK|FO|FI|GL|NL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(DK|FO|FI|GL|NL)[0-9A-Z]{18}|(MK|SI)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(MK|SI)[0-9A-Z]{19}|(BA|EE|KZ|LT|LU|AT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(BA|EE|KZ|LT|LU|AT)[0-9A-Z]{20}|(HR|LI|LV|CH)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{1}|(HR|LI|LV|CH)[0-9A-Z]{21}|(BG|DE|IE|ME|RS|GB)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(BG|DE|IE|ME|RS|GB)[0-9A-Z]{22}|(GI|IL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(GI|IL)[0-9A-Z]{23}|(AD|CZ|SA|RO|SK|ES|SE|TN)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(AD|CZ|SA|RO|SK|ES|SE|TN)[0-9A-Z]{24}|(PT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{1}|(PT)[0-9A-Z]{25}|(IS|TR)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(IS|TR)[0-9A-Z]{26}|(FR|GR|IT|MC|SM)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(FR|GR|IT|MC|SM)[0-9A-Z]{27}|(AL|CY|HU|LB|PL)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}|(AL|CY|HU|LB|PL)[0-9A-Z]{28}|(MU)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{2}|(MU)[0-9A-Z]{30}|(MT)[0-9A-Z]{2}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{4}[ ][0-9A-Z]{3}|(MT)[0-9A-Z]{31})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3003
#T: RFC3986 Generic URI
#A: James Lentini
#D: Manually derived this from the grammar in Appendix A of RFC3986 (Uniform Resource Identifier (URI): Generic Syntax).
#D: Matches anything that fits the generic syntax of a URI. Supports IPv6 hosts.
^([a-zA-Z][a-zA-Z0-9+-.]*):((\/\/(((([a-zA-Z0-9\-._~!$&'()*+,;=':]|(%[0-9a-fA-F]{2}))*)@)?((\[((((([0-9a-fA-F]{1,4}:){6}|(::([0-9a-fA-F]{1,4}:){5})|(([0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:){4})|((([0-9a-fA-F]{1,4}:)?[0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:){3})|((([0-9a-fA-F]{1,4}:){0,2}[0-9a-fA-F]{1,4})?::([0-9a-fA-F]{1,4}:){2})|((([0-9a-fA-F]{1,4}:){0,3}[0-9a-fA-F]{1,4})?::[0-9a-fA-F]{1,4}:)|((([0-9a-fA-F]{1,4}:){0,4}[0-9a-fA-F]{1,4})?::))((([0-9a-fA-F]{1,4}):([0-9a-fA-F]{1,4}))|(([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5])))))|((([0-9a-fA-F]{1,4}:){0,5}[0-9a-fA-F]{1,4})?::[0-9a-fA-F]{1,4})|((([0-9a-fA-F]{1,4}:){0,5}[0-9a-fA-F]{1,4})?::))|(v[0-9a-fA-F]+\.[a-zA-Z0-9\-._~!$&'()*+,;=':]+))\])|(([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5]))\.([0-9]|(1[0-9]{2})|(2[0-4][0-9])|(25[0-5])))|(([a-zA-Z0-9\-._~!$&'()*+,;=']|(%[0-9a-fA-F]{2}))*))(:[0-9]*)?)((\/([a-zA-Z0-9\-._~!$&'()*+,;=':@]|(%[0-9a-fA-F]{2}))*)*))|(\/?(([a-zA-Z0-9\-._~!$&'()*+,;=':@]|(%[0-9a-fA-F]{2}))+(\/([a-zA-Z0-9\-._~!$&'()*+,;=':@]|(%[0-9a-fA-F]{2}))*)*)?))(\?(([a-zA-Z0-9\-._~!$&'()*+,;=':@\/?]|(%[0-9a-fA-F]{2}))*))?((#(([a-zA-Z0-9\-._~!$&'()*+,;=':@\/?]|(%[0-9a-fA-F]{2}))*)))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3004
#T: E-Mail Pattern
#A: Rafael Timmerberg
#D: This Expression Validates a string of Email Adresses which are sepereated with one of these[,.] and can have several white spaces between the delimeters. everything can be read out of groups
#D: ^ *(?<FirstEmail>(?<Firstusername>[\.\-\+\w]{2,}[a-z0-9])@(?<FirstProvider>[\.\-\w]+[a-z0-9])\.(?<Firstnamespace>[a-z]{2,3})) *(; *(?<EmailList>(?<UsernameList>[\.\-\+\w]{2,}[a-z0-9])@(?<ProviderList>[\.\-\w]+[a-z0-9])\.(?<namespaceList>[a-z]{2,3})) *)* *$
#D: Must cointain at least 3 char before@, 2char after @ and 2-3 char(a-z) as CountryID. If you don't want to validate and 'just' look for Valid E-mail addresses simply remove the first "^" and the last "$", or remove the optional part after first "{2,3})) *"
^ *(([\.\-\+\w]{2,}[a-z0-9])@([\.\-\w]+[a-z0-9])\.([a-z]{2,3})) *(; *(([\.\-\+\w]{2,}[a-z0-9])@([\.\-\w]+[a-z0-9])\.([a-z]{2,3})) *)* *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3005
#T: Link from HTML Email
#A: Nils Hitze
#D: Filters a Link from a HTML Email where every Link is followed by the <LINK> Expression
(http[s]*\:\/\/)*([^\.\/\<]*\.)*([^\.\/\<]+?)\.[^\/\<]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3006
#T: Din 5008 phone number
#A: Mr. No
#D: Matches a Din 5008 formatted phone number, except of "special  numbers" like "0180 5 12345"
^(\+[1-9]\d+) ([1-9]\d+) ([1-9]\d+)(\-\d+){0,1}$|^(0\d+) ([1-9]\d+)(\-\d+){0,1}$|^([1-9]\d+)(\-\d+){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3007
#T: US State Full Names
#A: Steve Lilley
#D: Just a quick list of all the United States 50 States Full Names (Not Abbreviations)
qr/(Alabama|Alaska|Arizona|Arkansas|California|Colorado|Connecticut|Delaware|Florida|Georgia|Hawaii|Idaho|Illinois|Indiana|Iowa|Kansas|Kentucky|Louisiana|Maine|Maryland|Massachusetts|Michigan|Minnesota|Mississippi|Missouri|Montana|Nebraska|Nevada|New\sHampshire|New\sJersey|New\sMexico|New\sYork|North\sCarolina|North\sDakota|Ohio|Oklahoma|Oregon|Pennsylvania|Rhode\sIsland|South\sCarolina|South\sDakota|Tennessee|Texas|Utah|Vermont|Virginia|Washington|West\sVirginia|Wisconsin|Wyoming)/

#U: http://regexlib.com/REDetails.aspx?regexp_id=3008
#T: Positive Decimals with Commas
#A: Ryan Milbrath
#D: This expression will match all positive numbers that contain decimals and commas.
(^(\d|,)*\.?\d*[1-9]+\d*$)|(^[1-9]+(\d|,)*\.\d*$)|(^[1-9]+(\d|,)*\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3009
#T: International Phone Numbers
#A: Renso Hollhumer
#D: Allows for all kinds of generic international phone numbers, including that of the USA, may include () around area code as well as period, dash, space or nothing seperating numbers. International code needs to be seperated from rest by period, space or dash and my be prefixed with plus. Not overly restrictive but limits size and repetition of codes
^((\+)?[1-9]{1,2})?([-\s\.])?((\(\d{1,4}\))|\d{1,4})(([-\s\.])?[0-9]{1,12}){1,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3010
#T: Drop first subdomain from domain name
#A: Josh Brown
#D: Drops the first subdomain from a domain name with at least one subdomain.  Fails if the domain does not contain a subdomain.
^\w+\.((?:\w+\.)+\w+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3011
#T: Dutch Postal code
#A: Willem Mulder
#D: Check the Dutch postal code offical format of "9999 AA". Since it is often stored in a database without the space, this pattern allows 0 or 1 space.
^[0-9]{4} {0,1}[A-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3012
#T: Currency with Currency Code Prefix
#A: Ullaskumar V
#D: Matching currency entry with upto 3 letter currency code as prefix
^([A-Z]{0,3})?[ ]?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3013
#T: Email separated by semicolon (;) -- Email separados por ponto e vírgula(;)
#A: Renan Nucci
#D: Expression for validation of one or more emails separated by semicolon(;)
#D: --
#D: Expressão para validação de um ou mais emails separados por ponto e vírgula(;)
^([a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+(\.[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,})){1}(;[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+(\.[a-z0-9,!#\$%&'\*\+/=\?\^_`\{\|}~-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*\.([a-z]{2,}))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3014
#T: Valid Medicare HIC number
#A: Brian Thiessen
#D: Matches valid Medicare HIC number according to CMS specifications
(?![A-Z](\d)\1{5,})(^[A-Z]{1,3}(\d{6}|\d{9})$)|(^\d{9}[A-Z][0-9|A-Z]?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3015
#T: Space Delimited Format (SDF)  Parser - backslash escape
#A: Brian \S\s
#D: Intended for single line. JavaScript match() method (or equivalent) creates an array of values each of which is either an unquoted string of non-whitespace chars, or a quoted string which can contain whitespace, escaped quotes (\"), escaped escaped chars (\\), or be empty (""). Splits (only) on whitespace. (Does not split on opening or closing quotes.) An unclosed quote matches all until end of input. The Matching Examples are ready for enclosure in single quotes. Output of Matching Example 1:
#D: [0]=a
#D: [1]=" b b "
#D: [2]=c\"c
#D: [3]=""
#D: [4]="\""
#D: [5]="\\"
#D: Output of Matching Example 2:
#D: [0]=a" a\""a"a"
#D: [1]=" b \" b 
#F: g
("(\\["\\]|[^"])*("|$)|\S)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3016
#T: Space Delimited Format (SDF)  Parser - double quote escape
#A: Brian \S\s
#D: Intended for single line. JavaScript match() method (or equivalent) creates an array of values each of which is either an unquoted string of non-whitespace chars, or a quoted string which can contain whitespace, escaped quotes (""), escaped escaped chars ("""), or be empty (""). Splits (only) on whitespace. (Does not split on opening or closing quotes.) An unclosed quote matches all until end of input. The Matching Examples are ready for enclosure in single quotes. Output of Matching Example 1:
#D: [0]=a
#D: [1]=" b b "
#D: [2]=c""c
#D: [3]=""
#D: [4]=""d""
#D: Output of Matching Example 2: [0]=a" a"""a"a"
#D: [1]=" b "" b 
("(?!")(""|[^"])*("|$)|\S)+/g

#U: http://regexlib.com/REDetails.aspx?regexp_id=3017
#T: Pattern Match(For COBOL's Move Verb)
#A: Yogesh R. Bari
#D: This is Regular Expression for COBOL's Move Verb.
#D: eg.: MOVE WS-IDFD9 TO DF-FD-FF
#D: Here in eg. variables have hyphen instead of underscore. 
(?i)\s*MOVE\s+\w+(\-\w+)*\s+TO\s+\w+(\-\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3018
#T: Text File Parser - splits on unquoted \n - backslash escape - \r\n okay
#A: Brian \S\s
#D: JavaScript match() method (or equivalent) creates an array of lines from a text file. This pattern handles lines ending with \r\n as well as \n at the expense of including the line-ending chars in the output. The Matching Examples are ready for enclosure in single quotes. Output from Matching Example 1: [0]=a " b [\n] " c [\n]
#D: [1]= Line2... [\n]
#D: [2]= Line3...
#D: Output from Matching Example 2: [0]=a " b [\r][\n]" c [\r][\n]
#D: [1]= Line2... [\r][\n]
#D: [2]= Line3... 
#F: gm
^("(\\["\\]|[^"])*"|[^\n])*(\n|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3019
#T: Space Delimited Format (SDF) Parser - backslash escape - splits on whitespace and opening & closing quotes
#A: Brian \S\s
#D: Intended for single line. JavaScript match() method (or equivalent) creates an array of values each of which is either an unquoted string of non-whitespace chars, or a quoted string which can contain whitespace, escaped quotes (\"), escaped escaped chars (\\), or be empty (""). Splits on whitespace AND splits on opening and closing quotes. An unclosed quote matches all until end of input. The Matching Examples are ready for enclosure in single quotes. Output of Matching Example 1:
#D: [0]=a
#D: [1]=" b b "
#D: [2]=c\"c
#D: [3]=""
#D: [4]="\""
#D: [5]="\\"
#D: Output of Matching Example 2:
#D: [0]=a
#D: [1]=" b\""
#D: [2]=c
#D: [3]="d"
#D: [4]=" e \" f
#F: g
"(\\["\\]|[^"])*("|$)|(\\["\\]|[^\s"])+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3020
#T: Space Delimited Format (SDF) Parser - double quote escape - splits on whitespace and opening & closing quotes
#A: Brian \S\s
#D: Intended for single line. JavaScript match() method (or equivalent) creates an array of values each of which is either an unquoted string of non-whitespace chars, or a quoted string which can contain whitespace, escaped quotes (""), escaped escaped chars ("""), or be empty (""). Splits on whitespace AND splits on opening and closing quotes. An unclosed quote matches all until end of input. The Matching Examples are ready for enclosure in single quotes. Output of Matching Example 1:
#D: [0]=a
#D: [1]=" b b "
#D: [2]=c""c
#D: [3]=""
#D: [4]="""d"""
#D: Output of Matching Example 2:
#D: [0]=a
#D: [1]=" b"""
#D: [2]=c
#D: [3]="d"
#D: [4]=" e "" e 
#F: g
"(?!")(""|[^"])*("|$)|(("")+|[^\s"])+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3022
#T: Email Address
#A: Daniel Collicott
#D: SUMMARY: Very selective email address Regex
#D: USE: intended for finding emails in text.
#D: DETAILS: regex is terminated by a match for all possible Top-Level-Domains, so regex can even differentiate the terminating end of the email string from other text (including letters) 
[a-z0-9]+([-+._][a-z0-9]+){0,2}@.*?(\.(a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])\b){1,2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3023
#T: Text File Parser - splits on unquoted \n - backslash escape
#A: Brian \S\s
#D: JavaScript match() method (or equivalent) creates an array of lines from a text file. This pattern only handles lines ending with \n, not \r\n. The Matching Examples are ready for enclosure in single quotes. Output from Matching Example 1:
#D: [0]=a " b [\n] " c
#D: [1]= Line2...
#D: [2]= Line3...
#D: Output from Matching Example 2:
#D: [0]=a " b [\r][\n]" c [\r]
#D: [1]=
#D: [2]= Line2... [\r]
#D: [3]=
#D: [4]= Line3... 
#F: gm
^("(\\["\\]|[^"])*"|[^\n])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3024
#T: Currency w/ Symbols
#A: David Parkin
#D: Currency test for currency symbols and up to three char leading/trailing string
^\p{Sc}?[A-Z]{0,3}?[ ]?(\d{1,3})(\.|\,)(\d{0,4})?[ ]?\p{Sc}?[A-Z]{0,3}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3025
#T: diff line count
#A: Justin Faust
#D: does a mercurial diff and counts the lines removed/added.
hg diff --nodates | egrep -e "---" -v | egrep -e "^-" -c\Nhg diff --nodates | egrep -e "\+\+\+" -v | egrep -e "^\+" -c

#U: http://regexlib.com/REDetails.aspx?regexp_id=3026
#T: Valida email
#A: Thiago Moreira
#D: valida email
(([\w-]+(?:\.[\w-]+)*)@(timbrasil.com.br))*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3027
#T: Coordinate DMS
#A: Nicolás Marzoni
#D: RegEx to validate a coordinate with the format DMS.
^(?<degrees>\d{1,3})°(?<minutes>\d{2})?'(?<seconds>\d{1,2}|\d{1,2}.\d{1,2})?"(?<cardinalPonint>N|S|E|W)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3028
#T: VIN - Vehicle Identification Number for USA
#A: Igor Werner
#D: Validates US VIN. It could be between 10 and 17 character in length and should never contain i, l, o, O, q, Q, ' or -.
^[^iIoOqQ'-]{10,17}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3029
#T: Comma & semi-colon separated email validation
#A: Elvis Furtado
#D: I am using a repeating section to provide multi email check wherein the separator can  be either a comma or a semi-colon. whitespaces are allowed after a delimiter.
^(?:(?:[\w\.\-_]+@[\w\d]+(?:\.[\w]{2,6})+)[,;]?\s?)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3030
#T: DK Street Address (Basic)
#A: Mikkel Petersen
#D: Does a very basic validation on Danish street addresses.
#D: It ensures that the format "Address No" is honored, but also allows any char to be put after the address.
#D: This is to ensure additions like floor, and which door it is. Ex. "Addrees No Floor LeftDoor."
#D: Enjoy!
^((.){1,}(\d){1,}(.){0,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3031
#T: Integer/Float/Currency
#A: Sriram Viswanathan
#D: Matches any integer, float or currency.
(\d+)([,|.\d])*\d

#U: http://regexlib.com/REDetails.aspx?regexp_id=3032
#T: Parse Windows Filename / Pathname (simple version)
#A: Brian \S\s
#D: Does not validate. For parsing a file name known to be valid. Handles periods in the file name. Does not include terminating characters in the output, as preferred. Javascript exec() method produces the following array elements: [1]=drive; [2]=path; IF extension exists THEN [3]=filename; [4]=extension; ELSE [3]=undefined; [4]=filename. (To avoid the awkwardness, see "Parse Windows Filename (complex version)."
#D: Matching Example 1 output: [1]=d
#D: [2]=\p.p\p
#D: [3]=f.f
#D: [4]=e
#D: Matching Example 2 output: [1]=[undefined]
#D: [2]=[empty string]
#D: [3]=[undefined]
#D: [4]=f
#D: Matching Example 3 output: [1]=undefined
#D: [2]=undefined
#D: [3]=f
#D: [4]=e 
(?:(.):)?(?:(.*)\\)?(?:(.*)\.)?(.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3033
#T: For checking 1 email id
#A: AJ
#D: Created by me.It works in almost all the normal cases.
^\s*(([\w-]+\.)+[\w-]+|([a-zA-Z]{1}|[\w-]{2,}))@(\w+\.)+[A-Za-z]{2,5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3034
#T: For checking 1 or more email ids
#A: AJ
#D: Created by me.Allows for checking 1 mail id or more.If more than 1 it should be separated by a , or ; and or space.
^\s*((([\w-]+\.)+[\w-]+|([a-zA-Z]{1}|[\w-]{2,}))@(\w+\.)+[A-Za-z]{2,5}[?= ]?[?=,;]?[?= ]?)+?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3035
#T: Parse Windows Filename / Pathname (complex version)
#A: Brian \S\s
#D: Does not validate. For parsing a file name known to be valid. Handles periods in the file name. Does not include  terminating characters in the output, as preferred. Javascript exec() method produces the following array elements: [1]=drive; [2]=path; [3]=filename; [4]=extension; Matching Example 1 output: [1]=d
#D: [2]=\p.p\p
#D: [3]=f.f
#D: [4]=e
#D: Matching Example 2 output: [1]=[undefined]
#D: [2]=[empty string]
#D: [3]=f
#D: [4]=[undefined]
(?:(.):)?(?:(.*)\\)?((?:[^.]|.(?=[^.]*\.))*)(?:\.(.*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3036
#T: Space Delimited Format (SDF) Parser - ' or " mixed - backslash escape - splits on whitespace and opening & closing quotes
#A: Brian \S\s
#D: Intended for single line. JavaScript match() method (or equivalent) creates an array of values each of which is either an unquoted string of non-whitespace chars, or a quoted string which can contain whitespace, escaped quotes (\' or \"), escaped escaped chars (\\), or be empty ('' or ""). Splits on whitespace AND splits on opening and closing quotes. An unclosed quote matches all until end of input. The Matching Example is ready for enclosure in single quotes. Output of Matching Example: [0]=a
#D: [1]=' b"\'b '
#D: [2]='b2'
#D: [3]="c\"'c"
#D: [4]="d
#F: g
"(\\["\\]|[^"])*("|$)|'(\\['\\]|[^'])*('|$)|(\\["'\\]|[^\s"'])+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3037
#T: Text File Parser - splits on unquoted \n - ' or " mixed - backslash escape - \r\n okay
#A: Brian \S\s
#D: JavaScript match() method (or equivalent) creates an array of lines from a text file. This pattern handles lines ending with \r\n as well as \n at the expense of including the line-ending chars in the output. The Matching Example is ready for enclosure in single quotes. Output from Matching Example: [0]=a " b [\n] " 'c[\n]' [\n]
#D: [1]= "a \" ' "  b  'c " \' ' [\n]
#D: [2]= Line3... 
#F: gm
^("(\\"|[^"])*"|'(\\'|[^'])*'|[^\n])*(\n|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3038
#T: Spanish letters and accents vocals
#A: César Raúl Cid Méndez
#D: in java is : \\p{L}++
\p{L}++

#U: http://regexlib.com/REDetails.aspx?regexp_id=3039
#T: Windows path
#A: flyontheweb
#D: I've come to this expression according with (most of) the naming conventions provided by MS in this page:
#D: http://msdn.microsoft.com/en-us/library/aa365247(VS.85).aspx#naming_conventions
#D: Any corrections or comments will be much appreciated
#D: NOTE: thanks to Ultrapico for freely distributing Expresso (http://www.ultrapico.com/Expresso.htm)
^((?:(?:[a-zA-Z]:)|\\)\\)?((?:\.\.?\\)|(?:[^\0-\31<>:"/\\|?*]+(?<![ .])\\))*([^\0-\31<>:"/\\|?*]+(?<![ .]))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3040
#T: TDPE Puzzle Answer
#A: Toughest Developer Puzzle Ever TDPE
#D: The puzzle answer to save the day! This is the hint clue answer you need to solve the toughest developer puzzle ever TDPE.
#D: (Puzzle level clue hint answer solution solve)
(?<=<\w+ )(\w+-*\w*=[^>]+\s?)(?=>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3041
#T: email regular expressions
#A: mehdi ghasemi
#D: All emails listed below are to be created and You can try all of them on the domain name listed!
^[A-Za-z0-9](\.[\w\-]|[\w\-][\w\-])(\.[\w\-]|[\w\-]?[\w\-]){0,30}[\w\-]?@[A-Za-z0-9\-]{3,63}\.[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3042
#T: Open Close Time
#A: J. Matthew Phipps
#D: This allows for a single line input of open and close times (for a store/office).
^(([0-1][0-9]|2[0-3])[0-5][0-9]\-([0-1][0-9]|2[0-3])[0-5][0-9]|[C|c]losed)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3043
#T: 1-12
#A: ajaidas
#D: you can enter number between 1 to 12
\b(?:1[0-2]?|[2-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3044
#T: Telephone and Mobile number for the Maltese Islands
#A: William Farrugia
#D: Telephone and Mobile number for the Maltese islands including an optional 00356 for country code
#F: g
(00356)?(99|79|77|21|27|22|25)[0-9]{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3045
#T: Pattern Match(For Date)
#A: Yogesh R. Bari
#D: This is regular expression for date.
#D: eg.:02/06/2010
#D: 2/6/10
#D: 02-06-2010
#D: 2-6-10
\d{1,2}(/|-)\d{1,2}(/|-)\d{2,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3046
#T: Root web path
#A: Chris Vandevelde
#D: Will match any web path that's supposed to start in the root (e.g. with "/" in front of it.
^\.{0,2}[\/\\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3047
#T: Leading zeros
#A: Felix
#D: Locates leading zeros in numeric values
^[0]{1,}(?=0[.]\d+|\d+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3048
#T: powerfull username
#A: mehdi ghasemi
#D: this expression is one of the best username regular expressions
[A-Za-z](\.[A-Za-z0-9]|\-[A-Za-z0-9]|_[A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9])(\.[A-Za-z0-9]|\-[A-Za-z0-9]|_[A-Za-z0-9]|[A-Za-z0-9])*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3049
#T: Unsigned integer and double 
#A: Alexei
#D: This expression matches the integer or double. A double is separated by the dot.
^\d+?(\.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3050
#T: Single Email Match - current June 2010
#A: Brent Thomas
#D: Matches email addresses.  Based on expression at regular-expressions.info/email.html modified to include all top-level domains (TLD)listed on wikipedia as of June 2010.  Needs to be updated as new TLDs are added.
#D: Known Issues:
#D: * IP Addresses will not validate
#D: * Double "at" symbols, e.g. email@em@il.com slip by this regex.  Would welcome improvements by a regex ninja.
^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+(?:[a-zA-Z]{2}|aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3051
#T: Identify relative urls
#A: Esteban Smits
#D: After hitting little snags through the years here is a  [WIP] for replacing relative links. Notice that it considers whitespace between the src,href and the equal sign, it also considers the  links may not have any quotes around them. It negates  urls that start with http,ftp,link anchors, https and mailto.
(src|href|action)\s*=\s*('|"|(?!"|'))(?!(http:|ftp:|mailto:|https:|#))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3052
#T: International & Domestic Phone Numbers with Ext
#A: Brent Thomas
#D: Somewhat conservative expression for evaluating phone numbers.  Based off ideas found at http://stackoverflow.com/questions/123559/a-comprehensive-regex-for-phone-number-validation this allows country codes, with or without the + symbol, area codes surrounded by parenthesis (or not) and numbers delimited by spaces, periods or dashes.  You'll want to independently test for string length based on your needs.
^([\+][0-9]{1,3}([ \.\-])?)?([\(]{1}[0-9]{3}[\)])?([0-9A-Z \.\-]{1,32})((x|ext|extension)?[0-9]{1,4}?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3053
#T: Date
#A: Dusko Vuksanovic
#D: This is the US date expression. It's very flexible on omitting numbers.
#D: $1 = month
#D: $2 = day
#D: $3 = year
^(0?\d|1[012])\/([012]?\d|3[01])\/(\d{2}|\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3054
#T: DOCTYPE 
#A: Dean Dal Bozzo
#D: Check and parse a DOCTYPE tag elements: (topElement, availability, registration, organization, type, label, language, url)
\<\!doctype\s+(([^\s\>]+)\s+)?(([^\s\>]+)\s*)?(\"([^\/]+)\/\/([^\/]+)\/\/([^\s]+)\s([^\/]+)\/\/([^\"]+)\")?(\s*\"([^\"]+)\")?\>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3055
#T: Multiple Email Addresses
#A: John C. Pratt
#D: Matches a semi-colon-delimited string of email addresses.  Delimiter can include a space after the semi-colon.  Based on/thanks to David Huyck's pattern, with the domain extension opened up and specific extensions removed.
^([_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,})))(;[ ]?[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,})))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3056
#T: Web Address
#A: Nandlal Krishnia
#D: All urls
#D: with http
#D: without http
#D: without www
([\d\w-.]+?\.(a[cdefgilmnoqrstuwz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmnoz]|e[ceghrst]|f[ijkmnor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortuvyz]|t[cdfghjkmnoprtvwz]|u[augkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]|aero|arpa|biz|com|coop|edu|info|int|gov|mil|museum|name|net|org|pro)(\b|\W(?<!&|=)(?!\.\s|\.{3}).*?))(\s|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3057
#T: RFC5322 spec'd email validation
#A: Jim Michaels
#D: I built this from the ABNF grammars from necessary pieces from RFC2822, 1034, 5234, and based mainly on 5322 in order to build a complete grammar to make the regex.  I learned compiler technology in college.
#D: unfortunately, this web site truncates the regex.
((((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)|((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*)))?[+A-Za-z0-9!#$%&'*/=?\^_`{}|\~-]+(\.[+A-Za-z0-9!#$%&'*/=?\^_`{}|\~-]+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)|((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*)))?|(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)|((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*)))?\x22((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(([\x21\x23-\x5b\x5d-\x7e]|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f])|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))))*(((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\x22(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\

#U: http://regexlib.com/REDetails.aspx?regexp_id=3058
#T: RFC5322 spec'd bracketed email validation
#A: Jim Michaels
#D: RFC5322 is the new email spec that replaces 2822 which replaces 822.
#D: I built this directly from the [A]BNF grammars from RFC5322, 2822, 1034, 5234.
#D: the biggest problem I ran into was the fact that regex can't do recursion, so I replaced it with repetition.
#D: unfortunately, this web site truncates the regex.
((((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)|((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*)))?\<((((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)|((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*)))?[+A-Za-z0-9!#$%&'*/=?\^_`{}|\~-]+(\.[+A-Za-z0-9!#$%&'*/=?\^_`{}|\~-]+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)|((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*)))?|(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)*(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(\(((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21-\x27\x2a-\x5b\x5d-\x7e]|((\\([\x01-\x09\x0b\x0c\x0e-\x7f]|\x0a*\x0d*([\x00-\x09\x0b\x0c\x0e-\x7f]\x0a*\x0d*)*))|\\(\x00|[\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x0a|\x0d))|))*)+((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?\))+)|((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*)))?\x22((((([\x20\x09]*\x0d\x0a)?[\x20\x09]+)|[\x20\x09]+(\x0d\x0a[\x20\x09]+)*))?(([\x21\x23-\

#U: http://regexlib.com/REDetails.aspx?regexp_id=3059
#A: Abram John A. Limpin
#D: Validates a Philippine mobile phone number without International code.
#D: Includes country's six area codes for mobile phones: Express Telecom, Globe Telecom, Next Mobile, Red Mobile, Smart Communications and Sun Cellular
^09(73|74|05|06|15|16|17|26|27|35|36|37|79|38|07|08|09|10|12|18|19|20|21|28|29|30|38|39|89|99|22|23|32|33)\d{3}\s?\d{4} 

#U: http://regexlib.com/REDetails.aspx?regexp_id=3060
#T: UK Date Format
#A: Ben McInerney
#D: Simple UK Date Format dd/mm/yy or dd/mm/yyyy.
^(([0-9])|([0-2][0-9])|(3[0-1]))\/(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3061
#T: Date Time Group (DTG)
#A: Ben McInerney
#D: In military messages and communications (e.g. on naval charts, or maps showing troop movements) the format is DDHHMMZ Mon YY, so for instance, "271545Z FEB 08" represents 15:45 Zulu time (which is to say UTC) on the 27th of February, 2008.
#D: For Radio Navigational Warnings (RNWs), the international format is slightly different, using the explicit UTC text instead of the Zulu character, becoming "DDhhmm UTC Jun YY". E.g. "240923 UTC Jun 10" is "9:23am on 24th June 2010".
^(3[0-1]|2[0-9]|1[0-9]|0[1-9])(0[0-9]|1[0-9]|2[0-3])([0-5][0-9])\sUTC\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3062
#T: Email Address
#A: carpinteyrostv
#D: @ Before you can have underlined, connection, point character, @there are three points after the characters are not allowed
^[\w]+[-\.\w]*@[-\w]+\.[a-z]{2,6}(\.[a-z]{2,6})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3063
#T: Uri
#A: carpinteyrostv
#D: Optional host header that contains as many query strings
[a-z]{3,4}s?:\/\/[-\w.]+(\/[-.\w%&=?]+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3064
#T: UK Vehicle Registration (inc. Northern Ireland)
#A: David Rose
#D: The regular expression above will validate a UK Vehicle Reg number according to the following criteria:
#D: Pre 1932
#D: XX 9999 - 1 or 2 letters followed by 1 to 4 numbers
#D: 1932 - 1963
#D: XXX 999 - 1 to 3 letters followed by 1 to 3 numbers
#D: 9999 XXX - 4 numbers followed by 1 to 3 letters
#D: 1962 - 1982
#D: XXX 999X - 1 to 3 letters followed by 1 to 3 numbers followed by 1 letter
#D: 1983 - 2001
#D: XXX999 XXX - 1 to 3 letters (excluding I, Q and Z) followed by 2 to 3 numbers followed by 3 letter
#D: 2001 to present
#D: XX99 XXX - 2 letters(excluding I, Q and Z) followed by 2 numbers (the first being 0, 5 or 6) followed by 3 letters
#D: Northern Ireland
#D: XXX 9999 - 2 or 3 letters followed by 1 to 4 numbers
#D: 9999 XXX - 1 to 4 numbers followed by 2 or 3 letters
^([A-HJ-PR-Y]{2,2}[056][0-9]\s?[A-HJ-PR-Y]{3,3})$|^([A-HJ-NP-Y]{1,3}[0-9]{2,3}?\s[A-Z]{3,3})$|^([A-Z]{1,3}\s?[0-9]{1,4}([A-Z]{1,1})?)$|^([0-9]{4,4}[A-Z]{1,3})$|^([A-Z]{1,2}\s?[0-9]{1,4})$|^([A-Z]{2,3}\s?[0-9]{1,4})$|^([0-9]{1,4}\s?[A-Z]{2,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3065
#T: IPv6 addresses (RFC 4291)
#A: Aeron
#D: This regex matches all (14.095.120.151.883.281.746.489.830.170.974.347.714.655.937) valid IPv6 address _representations_ as described by RFC 4291.
#D: Current regex is valid for PCRE only, for Perl/Java/Ruby/Phython/.NET/ECMA(JavaScript)/XML specific regex visit
#D: http://home.deds.nl/~aeron/regex/
#F: i
^(((?=.*(::))(?!.*\3.+\3))\3?|([\dA-F]{1,4}(\3|:\b|$)|\2))(?4){5}((?4){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})\z

#U: http://regexlib.com/REDetails.aspx?regexp_id=3066
#T: UK Phone Number
#A: Jay Anslow
#D: Allows both mobile and landline UK Telephone Numbers. Allows either Brackets or international prefix. Allows spaces after international prefix and regional code. No brackets for mobile numbers. Please report any problems. Thanks
^((\+44\s?\d{4}|\(?\d{5}\)?)\s?\d{6})|((\+44\s?|0)7\d{3}\s?\d{6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3067
#T: Validating Currency or Floating Value
#A: Vishnuvardhan
#D: This will validate atleast minimum of one digit in either side of Decimal point
^(\d+\.\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3068
#T: Number
#A: mark
#D: Matches numbers. May include decimals, thousands separators, and sign.
^\s*[+-]?\s*(?:\d{1,3}(?:(,?)\d{3})?(?:\1\d{3})*(\.\d*)?|\.\d+)\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3069
#T: URL Pattern Match
#A: Yoginee Naik
#D: I was making a 301 redirect module and wanted to verify old and new urls
^(http\:\/\/[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(?:\/\S*)?(?:[a-zA-Z0-9_])+\.(?:[a-zA-Z])+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3070
#T: Search sentences with words ending by -тся/-ться
#A: bask
#D: Search sentences with words ending by -???/-????
([^\.]*?(\w+(???|????))[^\.]*?\.+)\s+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3071
#T: French SS
#A: fred denimal
#D: Format od the French Socisl Security Number
([1,2].)(\d{2}.)(\d{2}.)(\d{2}.)(\d{3}.)(\d{3}.)(\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3072
#T: E-mail validation
#A: Christof Verhoeven
#D: Email validation intended for javascript: use of lookahead ('.' not followed by '@') instead of lookbehind ('@' not preceded by '.'). It doesn't allow ip addresses.
^(?:[^@<>;:,.()\s\[\]\\]+(?:\.(?!@))?)+@(?:[\w\-]+(?:\.(?!\.))?)+\.[A-Za-z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3073
#T: UK Postcode
#A: Mike Barnett
#D: Validates UK postcodes, postcode should have $ prefix and suffix as a boundary e.g. $G76 5DB$
\$(GIR 0AA|(([A-PR-UWYZ]([0-9]([0-9]|[A-HJKS-UW]){0,1}|[A-HK-Y]([0-9]([0-9]|[ABEHMNPRV-Y]){0,1})))) [0-9][ABD-HJLNP-UW-X]{2})\$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3074
#T: National Drug Code
#A: Tom Struzik
#D: http://en.wikipedia.org/wiki/National_Drug_Code
\d{4}-\d{4}-\d{2}|\d{5}-\d{3}-\d{2}|\d{5}-\d{4}-\d{1}|\d{5}-\*\d{3}-\d{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3076
#T: Employer ID Number
#A: Brad Williams
#D: US IRS Employee ID Number, aka Federal Tax ID Number
^([07][1-7]|1[0-6]|2[0-7]|[35][0-9]|[468][0-8]|9[0-589])-?\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3077
#T: Indian Mobile numbers
#A: Gaurav Agrawal
#D: Its 10 digits Indian Mobile Number validation.
^([9]{1})([234789]{1})([0-9]{8})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3078
#T: US Postal Sate Abbrev. Upper and Lower Case
#A: Joseph Reilly
#D: This is just a simple US states and territories in 2 character regex. Requires valid 2 letter abbreviations. It accepts the Lower and Upper Case Entries.
^([Aa][LKSZRAEPlkszraep]|[Cc][AOTaot]|[Dd][ECec]|[Ff][LMlm]|[Gg][AUau]|[Hh][Ii]|[Ii][ADLNadln]|[Kk][SYsy]|[Ll][Aa]|[Mm][ADEHINOPSTadehinopst]|[Nn][CDEHJMVYcdehjmvy]|[Oo][HKRhkr]|[Pp][ARWarw]|[Rr][Ii]|[Ss][CDcd]|[Tt][NXnx]|[Uu][Tt]|[Vv][AITait]|[Ww][AIVYaivy])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3079
#T: PO.BOX
#A: san
#D: this regex for pobox<number> i need to modify this, so that pobox and pobox<number> both are included. 
(?i)(?:^|\\s|\\()(?:(?:(?:(?:p[\\s\\.,]{0,1}o[\\s\\.,]{0,1}[\\s]*(?:box)?)|box)[\\s]*(#|no[^\\s]*|num[^\\s]*)?[\\s]*[0-9]{1,})|(?:(?:psc|fpo|apo|pmb)[\\s]{1,}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3080
#T: Simple Malaysian New IC Number Validation (Ignore Gender)
#A: Leos Toh
#D: Simple Malaysian New IC Number Validation.
#D: Length: 8 characters.
#D: Format: YYMMDD-99-9999
([0-9][0-9])((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\-([0-9][0-9])\-([0-9][0-9][0-9][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3081
#T: Email ID
#A: Rajesh
#D: Email validation
^([0-9a-zA-Z]+[-._])*[0-9a-zA-Z]+@([0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3082
#T: ICD9 code validation
#A: Ken Forslund
#D: validates an ICD9 medical code which MAY start with an E or V, 3 digits, and MAY be followed by a period and a 1-2 digit sub-code
^([EV])?\d{3,3}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3083
#T: validation of comma delimited ICD9 codes
#A: Ken Forslund
#D: See my sigle ICD9 validator for ICD9 rules.  This does the same, and validates for comma delitter (with optiona space after comma)
^([EV])?\d{3,3}(\.\d{1,2})?(, *([EV])?\d{3,3}(\.\d{1,2})?)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3084
#T: CPT code
#A: Ken Forslund
#D: a CPT code is a 4 digits + a captial letter or number (forming 5 character code).  The CPT code describes a medical procedure
^\d{4,4}[A-Z0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3085
#T: comma delimited CPT code
#A: Ken Forslund
#D: see my regex for explaining basic CPT.  This validates a comma delimited (with possible spaces after comma) string of CPT codes
^\d{4,4}[A-Z0-9](, *\d{4,4})[A-Z0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3086
#T: Number Range
#A: Alexander du Toit
#D: Validates the Number range from -360 to 360
^(-?[0-2]?[0-9]?[0-9]|-?3[0-5][0-9]|-?36[0]|[0-2]?[0-9]?[0-9]|3[0-5][0-9]|36[0])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3087
#T: IP Address
#A: Gustavo Salvador
#D: Check for IP address
^\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3088
#T: Website URL
#A: Ninu Ann Varghese
#D: Focused on the website url validation
^((http:\/\/www\.)|(www\.)|(http:\/\/))[a-zA-Z0-9._-]+\.[a-zA-Z.]{2,5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3089
#T: user name
#A: Mamoon ur Rasheed
#D: This expression will validate user name with the following rules
#D: 1- It must start and end with a digit or character
#D: 2- It must be exactly 4 to 10 character long
#D: 3- Allowed Special Characters are _.-
^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,8}[a-zA-Z0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3090
#T: C++ Function Parser
#A: Sean Sube
#D: Parses a C++ function, including return type, declaration type, namespace, class, method, exposure (public, private, protected) and params.
(?<expo>public\:|protected\:|private\:) (?<ret>(const )*(void|int|unsigned int|long|unsigned long|float|double|(class .*)|(enum .*))) (?<decl>__thiscall|__cdecl|__stdcall|__fastcall|__clrcall) (?<ns>.*)\:\:(?<class>(.*)((<.*>)*))\:\:(?<method>(.*)((<.*>)*))\((?<params>((.*(<.*>)?)(,)?)*)\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3091
#T: Accepts everything except Zero and Double Zeros(0,00 are invalid Values)
#A: Anand Khandelwal
#D: Accepts everything except Zero and Double Zeros(0,00 are invalid Values) for two Non Zero digits without using a RangeValidator
[0][^0]|([^0]{1}(.){1})|[^0]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3092
#T: File Extension
#A: Gaurav Agrawal
#D: asd
([a-zA-Z]:(\\w+)*\\[a-zA-Z0_9]+)?.*(\.[Jj][Pp][Gg]|\.[Gg][Ii][Ff]|\.[Jj][Pp][Ee][Gg]|\.[Pp][Nn][Gg])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3093
#T: Time
#A: Wisanu Sanchan
#D: match time for : H:nn:ss or HH:nn:ss
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3094
#T: DateTime Australia
#A: NoBug
#D: dd/mm/yyyy HH:MM
^((((31\/(0?[13578]|1[02]))|((29|30)\/(0?[1,3-9]|1[0-2])))\/(1[6-9]|[2-9]\d)?\d{2})|(29\/0?2\/(((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))|(0?[1-9]|1\d|2[0-8])\/((0?[1-9])|(1[0-2]))\/((1[6-9]|[2-9]\d)?\d{2})) (20|21|22|23|[0-1]?\d):([0-5]?)\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3095
#T: Parttern Tittle
#A: Hoang Bui Thanh
#D: this parttern only use for decimal number.
^\d(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3096
#T: Date with Zero Time span
#A: Anindya Chatterjee
#D: This expression will parse the date with zero time span only (e.g. 26/07/2010 00:00:00)
^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s00\:00\:00)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3097
#T: Serial from BIND zone file's SOA
#A: Jyri Turkia
#D: Gets serial from BIND zone file
(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}\.?\t*\s*){2}\(\r*\n*([0-9]{1,})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3098
#T: IEEE float
#A: Gaz Davidson
#D: Used in my SVG parser.
#D: Explanation:
#D: May start with + or -. This is followed by either an integer, or a float ("dot numbers", "numbers dot numbers" or "numbers dot" followed by an optional scientific postfix (+ or - followed by numbers) )
#D: I'm using it to parse lists of floats, add ^$ boundaries if you want it to match whole lines.
[-+]?((\.[0-9]+|[0-9]+\.[0-9]+)([eE][-+][0-9]+)?|[0-9]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3099
#T: Alphanumeric
#A: Shailesh Joge
#D: This expression shows result for the alphanumeric value starts with only alpha bates.
^([a-zA-Z][a-zA-Z0-9]{1,100})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3100
#T: State Abbreviations Upper or Lower Case
#A: Jason Thornhill
#D: This will take all state abbreviations used by the Post Office using either lower or upper case 
^([Aa][LKSZRAEPlkszraep]|[Cc][AOTaot]|[Dd][ECec]|[Ff][LMlm]|[Gg][AUau]|HI|hi|[Ii][ADLNadln]|[Kk][SYsy]|LA|la|[Mm][ADEHINOPSTadehinopst]|[Nn][CDEHJMVYcdehjmvy]|[Oo][HKRhkr]|[Pp][ARWarw]|RI|ri|[Ss][CDcd]|[Tt][NXnx]|UT|ut|[Vv][AITait]|[Ww][AIVYaivy])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3101
#T: Unnecessary Spaces in XHTML Attribute
#A: Andrew Gruden
#D: Needing a way to shrink HTML based email to the smallest amount of characters, we wanted to remove any extra unnecessary white space characters in attributes such as style.  This finds any space with a proceeding comma, semi-colon, or colon, and then checks with a lookahead for the closing > with a negative lookbehind to make sure that a < opening does not exist.  The secondary trailing look behind is done to make sure that it does not change any content contained in the element.
(?<=(,|;|:))\s(?=((?:(?!<).)*>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3102
#T: CNPJ / CPF do Brasil
#A: Ricardo Oliveira
#D: Valida e mascara CNPJ ou CPF dependendo do valor informado. Se informado dois digitos mais o ponto, será mascarado CNPJ se nao , CPF
(\d{2}\.\d{3}\.\d{3}\/\d{4}\-\d{2})|(\d{3}\.\d{3}\.\d{3}\-\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3103
#T: Currency Evaluator with commas and max 2 decimals
#A: Arvind
#D: Accepts non-negative numbers with max two decimals. Commas can be added after every thousand.
^([1-9]+\d{0,2},(\d{3},)*\d{3}(\.\d{1,2})?|[1-9]+\d*(\.\d{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3104
#T: Validate Subnet Mask
#A: Aaron Power
#D: Validates a subnet mask in quad-dotted notation.
^(?:2[0-5](?(?<=5)[0-5]|[0-9])|[01]?[0-9]?[0-9])(?(?<=255)(\.2[0-5](?(?<=5)[0-5]|[0-9])|\.[01]?[0-9]?[0-9])|\.0){3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3105
#T: South African Landline numbers
#A: Ian van den Heuvel
#D: Limited by proper dialing codes as per http://en.wikipedia.org/wiki/Telephone_numbers_in_South_Africa. It will match phone numbers in most common formats that users normally type their phone number.
#D: Tested with Perl engine regex in PHP.
^(?:(?:\(|)0|\+27|27)(?:1[12345678]|2[123478]|3[1234569]|4[\d]|5[134678])(?:\) | |-|)\d{3}(?: |-|)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3106
#T: White Listed Files List
#A: Leos Toh
#D: White Listed Files List
*(.jpg|.gif)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3107
#T: Prefix / Voorvoegsel / Präfix
#A: Willem Mulder
#D: Tests the most common prefixes as used in The Netherlands and Germany . Commom abbreviations "v." and "v.d." are also covered.
(([a-z']?[a-z' ]*)|([a-z][\.])?([a-z][\.]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3108
#T: JQuery filename
#A: Tomás Pica
#D: Checks for filename of any version of minified jquery in string.
jquery\-(\d|\.)*\.min\.js

#U: http://regexlib.com/REDetails.aspx?regexp_id=3109
#T: DokuWiki Bold
#A: Tomás Pica
#D: Replacing match for bold formatting as DokuWiki writes it
(\*\*)(.+)(\*\*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3110
#T: DokuWiki Italic
#A: Tomás Pica
#D: Replacing match for italic formatting as DokuWiki writes it
(\/\/)(.+)(\/\/)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3111
#T: DokuWiki Underline
#A: Tomás Pica
#D: Replacing match for underline formatting as DokuWiki writes it
(\_\_)(.+)(\_\_)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3112
#T: Guid
#A: Ryan Schreiber
#D: Matches a string representation of a Guid, regardless of case, and does the correct brace matching
^(?<BRACE>\{)?[a-fA-F\d]{8}-(?:[a-fA-F\d]{4}-){3}[a-fA-F\d]{12}(?<-BRACE>\})?(?(BRACE)^.)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3113
#T: Parse HTML images
#A: Ricardo Deus
#D: Get all images in html string, ignore white space, tabs and is case insensitive. the result is iMG	sRc		="ricardo.gif, after this just split the string and Enjoy it!
"<[ \t]*[iI][mM][gG][ \t]*[sS][rR][cC][ \t]*=[ \t]*['\"]([^'\"]+)"

#U: http://regexlib.com/REDetails.aspx?regexp_id=3114
#T: Java Doc multiline
#A: Ahmed Samir Srour
#D: Matches java Documentation only with no code inside.
#D: Note : the first expression contains "\R" which is supported only in java engine, for any other engines you should use the second one but it will differs from a platform to another.
\*.*(\R.+)+\*\Nor\N\*.*((\r\n).+)+\*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3115
#T: url chunks
#A: sir-saimn
#D: divides an url into the different parts: protocol, subdomain, tld, port, folder, file, anchor, parameter
(http|ftp|https):\/\/(\w[\w\-_\.]*\.)?([_\-\w]+)(:[0-9]+)?([\/[\w_\.-]+]*)\/(\.?\w[\w._-]*[\w_-])?(#\w+)?([\w\-\.,@?^=%&:\~\+#]*[\w\-\@?^=%&\/\~\+#])?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3116
#T: Spanish cell phones
#A: Jesús Bosch
#D: Validates spanish mobile phones, begining with +34 international code
[+]346[0-9]{8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3117
#T: Matches dates incl. February leap/common years
#A: Lewis TF Choo Man
#D: This .NET regular expression matches all valid dates in dd/MM/yyyy , dd-MM-yyyy or dd MM yyyy formats between 1/1/0000 and 31/12/9999 with the leading zero for the day and month portions being optional. The century for the year is optional for all dates except for the 29th of February of century years divisible by 400. This expression also validates the 29th of February for leap years, defined as (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0).
^\s*((31([-/ ])((0?[13578])|(1[02]))\3(\d\d)?\d\d)|((([012]?[1-9])|([123]0))([-/ ])((0?[13-9])|(1[0-2]))\12(\d\d)?\d\d)|(((2[0-8])|(1[0-9])|(0?[1-9]))([-/ ])0?2\22(\d\d)?\d\d)|(29([-/ ])0?2\25(((\d\d)?(([2468][048])|([13579][26])|(0[48])))|((([02468][048])|([13579][26]))00))))\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3118
#T: Class ID (CLSID)
#A: Nathon Dalton
#D: Matches class ids (CLSID) including the pre & post curly brackets.
^\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3119
#T: To Accept DECIMAL or FLOAT
#A: Chandan Kumar
#D: This Expression will allow to accept the float or decimal values only. We always got stuck to allow only a decimal in the text area at any index along with numbers 
^([0-9]*|\d*\.\d{1}?\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3120
#A: John Megowan
#D: Allows only positive integers that are greater than 0.  Also allows for infinite zeros leading the integer
#D: Based on William Powell's Pattern Title, but modified to allow for leading zeros. 
^[0-9]*[1-9]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3121
#T: Codice Fiscale Italiano
#A: Francesco DAguanno
#D: Pattern to verify Codice Fiscale Italiano (TIN, Tax Identification Number).
#D: Include verification of Codice Fiscale to natural, artificial, legal and juristic person, with and without OMOCODIA (verifica del codice fiscale per persone fisiche e persone giuridiche, anche in caso di omocodia).
#D: Codice Fiscale, CF, omocodia, persone fisiche, persone giuridiche, italian fiscal code, TIN, Tax Identification Number.
^([A-Za-z]{6}[0-9lmnpqrstuvLMNPQRSTUV]{2}[abcdehlmprstABCDEHLMPRST]{1}[0-9lmnpqrstuvLMNPQRSTUV]{2}[A-Za-z]{1}[0-9lmnpqrstuvLMNPQRSTUV]{3}[A-Za-z]{1})|([0-9]{11})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3122
#T: Email address
#A: Francesco DAguanno
#D: Pattern to verify email addresses. Take a look at match / not match. It works very well. E-mail, email, mail, e-mail address, email address, mail address.
^[0-9a-zA-Z]+([0-9a-zA-Z]*[-._+])*[0-9a-zA-Z]+@[0-9a-zA-Z]+([-.][0-9a-zA-Z]+)*([0-9a-zA-Z]*[.])[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3123
#T: Date, European Standard (with Slashes)
#A: Zj6Ul8Eo9
#D: Matches potentially valid dates (from 1/1/1900 - 31/12/2099), according to European Standard (D/M/Y).
#D: DOES NOT check whether the date is completely valid (ie 31st Feb will be considered valid by this expression).
^(?:(?:0?[1-9])|(?:[12]\d)|3[01])/(?:(?:0?[1-9])|(?:1[012]))/(?:(?:19|20))\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3124
#T: Local or International phone number with dialing code
#A: Chris Morton
#D: allows validation of phone numbers in different formats, including local dialing code (eg 033 or 076) or international dialing code in the formats +12 or 0012 or 0912. 
[0](\d{9})|([0](\d{2})( |-|)((\d{3}))( |-|)(\d{4}))|[0](\d{2})( |-|)(\d{7})|(\+|00|09)(\d{2}|\d{3})( |-|)(\d{2})( |-|)((\d{3}))( |-|)(\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3125
#T: Date Format Regular Expression
#A: Gaurav Agrawal
#D: By using this you can validate your date string in (dd-MMM-yyyy) format.
^\d{2}\-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3126
#T: Find URL in text
#A: Marco Alvarado
#D: This could be most complete and readable URL-finder regex. I built it from several good examples. Works with PHP preg_match_all(). Finds whatever string that resembles a URL with scheme://, user:password, subdomains.domain (with up to 6 chars top-domain) or IP address xxx.xxx.xxx.xxx, :port, /file/path/, ?request, and #anchor
#F: i
((https?|ftp)\:\/\/)?([a-z0-9+!*(),;?&=\$_.-]+(\:[a-z0-9+!*(),;?&=\$_.-]+)?@)?(([a-z0-9-.]*)\.([a-z]{2,6}))|(([0-9]{1,3}\.){3}[0-9]{1,3})(\:[0-9]{2,5})?(\/([a-z0-9+\$_-]\.?)+)*\/?(\?[a-z+&\$_.-][a-z0-9;:@&%=+\/\$_.-]*)?(#[a-z_.-][a-z0-9+\$_.-]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3127
#T: Canadian Postal Code 
#A: Doug Vanderweide
#D: Complies with the Canadian Postal Code requirements as described at http://www.infinitegravity.ca/postalcodeformat.htm
#D: Allows for optional center space.
^[ABCEGHJKLMNPRSTVXY][0-9][A-Z]\s?[0-9][A-Z][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3128
#T: HTML image tag
#A: Jerry H
#D: Will match an image with the most common attributes. 
<img\s((width|height|alt|align|style)="[^"]*"\s)*src="(\/?[a-z0-9_-]\/?)+\.(png|jpg|jpeg|gif)"(\s(width|height|alt|align|style)="[^"]*")*\s*\/>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3129
#T: Phone number (Spain)
#A: Jonas Talavera
#D: This regular expression allows to verify mobile phone numbers (600) and telephone numbers (900). Not provide premium charging phones (line 800). The number may be separated by spaces in groups of three digits, or  one group of three number plus two groups of three numbers for fixed phones.
(([+]?34) ?)?(6(([0-9]{8})|([0-9]{2} [0-9]{6})|([0-9]{2} [0-9]{3} [0-9]{3}))|9(([0-9]{8})|([0-9]{2} [0-9]{6})|([1-9] [0-9]{7})|([0-9]{2} [0-9]{3} [0-9]{3})|([0-9]{2} [0-9]{2} [0-9]{2} [0-9]{2})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3130
#T: DNI
#A: Jonas Talavera
#D: Allows to check a identity card (DNI) with a valid verification letter. Not all letters of the alphabet are valid
(0?[1-9]|[1-9][0-9])[0-9]{6}(-| )?[trwagmyfpdxbnjzsqvhlcke]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3131
#T: 1% to 100% percent
#A: Robin Fernando Perdomo
#D: Matches a percentage between 1 and 100. Accepts up to 2 decimal places. No decimal places accepted.
^([1-9][0-9]?|100)%$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3132
#T: UK Driving Licence
#A: Mohamed Corsa
#D: Matches the UK Drivers License format as laid down by the DVLA / dvla. See http
#D: ://www.govtalk.gov.uk/gdsc/html/frames/default.htm Matches: 
^([A-Z]{2}[9]{3}|[A-Z]{3}[9]{2}|[A-Z]{4}[9]{1}|[A-Z]{5})[0-9]{6}([A-Z]{1}[9]{1}|[A-Z]{2})[A-Z0-9]{3}[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3133
#T: US & CAN Phone
#A: Nathon Dalton
#D: Matches U.S. and Canadian phone numbers, without punctuation, that follow the NANP numbering scheme.
^[2-9][0-8]\d[2-9]\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3134
#T: US & CAN Postal Codes
#A: Nathon Dalton
#D: Matches U.S. and Canadian postal codes that follow the proper numbering schemes.
^((\d{5})|(\d{5}-\d{4})|([A-CEGHJ-NPR-TV-Z]\d[A-CEGHJ-NPR-TV-Z]\s\d[A-CEGHJ-NPR-TV-Z]\d))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3135
#T: remove HTML comments from html page
#A: David Havl
#D: matches comments <!-- --> in string. Singleline option must be enabled. It works well also with multiple comment start tags such as: <!--this is comment <!--and this as well and end-- of comment
#D: is!-- >right now-->. It also matches comments in between script or style tags <script> <!-- --> </script>
(\<!--\s*.*?((--\>)|$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3136
#T: Get all code inside of php tag in page
#A: David Havl
#D: Get code in between php tag <?php and ?> or until end of string if end of tag not found. Singleline option must be enabled!  
(\<\?php\s+.*?((\?\>)|$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3138
#T: European VAT code
#A: Richard Smith
#D: Pattern to match European VAT codes based on the formats described at http://www.hmrc.gov.uk/vat/managing/international/esl/country-codes.htm. The pattern is written long-hand and does not follow the character rules to the letter, but in the absence of a true VAT code checking service (the only accurate way to do this) it is pretty good.
^(AT ?U[0-9]{7}|BE ?[0-9]{10}|BG ?[0-9]{9,10}|CY ?[0-9]{8}[A-Z]{1}|CZ ?[0-9]{8,10}|DE ?[0-9]{9}|DK ?[0-9]{8}|EE ?[0-9]{9}|EL ?[0-9]{9}|ES ?[0-9A-Z]{9}|FI ?[0-9]{8}|FR ?[0-9A-Z]{11}|HU ?[0-9]{8}|IE ?[0-9A-Z]{8}|IT ?[0-9]{11}|LT ?([0-9]{9}|[0-9]{12})|LU ?[0-9]{8}|LV ?[0-9]{11}|MT ?[0-9]{8}|NL ?[0-9B]{12}|PL ?[0-9]{10}|PT ?[0-9]{9}|RO ?[0-9]{2,10}|SE ?[0-9]{12}|SI ?[0-9]{8}|SK ?[0-9]{10})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3139
#T: US Number Format
#A: Roger Soucy
#D: Matches standard US number formats.
^[+-]?\d+(\,\d{3})*\.?\d*\%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3140
#T: Decimals and Integers with Negatives
#A: Munim Abdul
#D: Matches decimals and integer in efficient way with minimal grouping allowing you to get the match as a whole decimal/integar
(-?(\d*\.\d{1}?\d*|\d{1,}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3141
#T: Malaysia phone number
#A: Ellykuek
#D: Match Malaysia phone and mobile phone numbers.
^0[0-9]{1,2}([\s]|[\-]{0,1})[1-9]{1}[0-9]{1}[0-9]{4,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3142
#T: Time
#A: Ronnie Overby
#D: I built this expression to validate a time input field.
^([1-9]|1[0-2]):[0-5]\d ?(a|A|p|P)(m|M)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3143
#T: Email validator
#A: edd donaldson
#D: Simple email validator Requires more than three characters for username and domain name
([a-zA-Z0-9\_\-\.]+[a-zA-Z0-9\_\-\.]+[a-zA-Z0-9\_\-\.]+)+@([a-zA-z0-9][a-zA-z0-9][a-zA-z0-9]*)+(\.[a-zA-z0-9][a-zA-z0-9][a-zA-z0-9]*)(\.[a-zA-z0-9]+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3144
#T: Singapore Mobile Number
#A: Chye Fong Yee
#D: To allow for checking of Singapore mobile numbers. Numbers are 8 digits starting with an 8 or 9 in Singapore.
^[89]\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3145
#T: Validate Email Addresses
#A: Jeremiah Sherrill
#D: This will validate all of the most common email addresses, and then others that are not so common. 
^[a-zA-Z0-9._%-]+@[a-zA-Z0-9._%-]+\.[a-zA-Z]{2,4}\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3146
#T: phone 
#A: him
#D: phone 
\\(?(\\d{4})\\)?[- ]?(\\d{5})[- ]?(\\d{6})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3147
#T: Dates dd/mm/yy and dd/mm/yyyy
#A: Paul Glover
#D: Matches english dates with 2 or 4 digit year
^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/((19|20)\d{2}|\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3148
#T: SSN (US Social Security Number)
#A: Robert Helm
#D: Validates SSN for INTEGERS ONLY. This does not allow spaces or dashes.
#D: Following this info:
#D: http://www.socialsecurity.gov/employer/randomization.html
#D: Starting in June 2011, the SSA will begin randomizing SSN creation. The only exclusions are SSNs beginning with 000, 666, or 900-999. That rather simplifies things.
(?!000)(?!666)^([0-8]\d{2})(\d{2})(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3149
#T: identity card(cn)
#A: jackie
#D: identity card(cn)
#D: 15,18
^((11|12|13|14|15|21|22|23|31|32|33|34|35|36|37|41|42|43|44|45|46|50|51|52|53|54|61|62|63|64|65|71|81|82|91)\d{4})((((((19|20)(([02468][048])|([13579][26]))0229))|((20[0-9][0-9])|(19[0-9][0-9]))((((0[1-9])|(1[0-2]))((0[1-9])|(1\d)|(2[0-8])))|((((0[1,3-9])|(1[0-2]))(29|30))|(((0[13578])|(1[02]))31))))((\d{3}(x|X))|(\d{4})))|((((([02468][048])|([13579][26]))0229)|(\d{2}((((0[1-9])|(1[0-2]))((0[1-9])|(1\d)|(2[0-8])))|(((0[1,3-9])|(1[0-2]))(29|30))|(((0[13578])|(1[02]))31))))\d{3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3150
#T: Disallow certain characters
#A: Bryian Tan
#D: Disallow ' or < or > or ? or % or ! or space in a string. Minimum character is 1 and maximum is 20 in a string.
^[^'<>?%!\s]{1,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3152
#T: Decimal values
#A: Gaurav Agrawal
#D: asd
^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3153
#T: Flexible name validation
#A: Jan van der Weijst
#D: Although many complex name validation expressions exist them seem to be error-prone.
#D: This one is basic, design to filter out only obviously aroneous input.
#D: It allows upper and lower case letters, hyphens (-), periods (.), spaces, and apostrophe's (')covering a wide range of international naming conventions.
#D: Strings should be between 3 and 40 characters long
^[a-zA-Z'-'.\s-]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3154
#T: User Agent match for iDevices (iPod iPad and iPhone
#A: Nathan Josiah Smith
#D: A simplified user agent match for Apple's iDevices
iP(?:[ao]d|hone)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3155
#T: RUC
#A: José Bonilla
#D: RUC (Registro Único de Contribuyentes - ECUADOR). Valida la estructura definida por el SRI, mas no comprueba el dígito verificador. Sirve para entidades privadas, públicas, personas naturales y extranjeros.
^((0[1-9]|1[0-9]|2[0-4])[0-59]\\d{7}(00[1-9]|[0-9][1-9][0-9]|[1-9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-4])6\\d{6}(000[1-9]|[0-9][0-9][1-9][0-9]|[0-9][1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3156
#T: National/International phone number format
#A: Paul Popa
#D: Only numbers, +(plus) and .(dot) are  accepted.
^\+?(?:[0-9][-. ]?){6,14}[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3157
#T: Uniprot ID
#A: Brad Langhorst
#D: this matches a valid UniProt identifier
#D: www.uniprot.org/
[A-Z]\d[A-Z0-9]{3}\dd

#U: http://regexlib.com/REDetails.aspx?regexp_id=3158
#T: European (German) monetary number
#A: Volker Paul
#D: Inspired by Dalibor Kalna's regexp, this one accepts numbers with the dot as required thousands separator, comma as decimal separator, and exactly digits after the comma. Minus as sign is optional.
^-?\d{1,3}\.(\d{3}\.)*\d{3},\d\d$|^-?\d{1,3},\d\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3159
#T: URL finder
#A: Demosthenes Koptsis
#D: Find http:// urls.
#D: You can replace at the beginning the http:// with a protocol you like as https:// ftp:// etc.
http://\([a-zA-Z0-9_\-]\+\(\.[a-zA-Z0-9_\-]\+\)\+\)\+:\?[0-9]\?\(/*[a-zA-Z0-9_\-#]*\.*\)*?\?\(&*[a-zA-Z0-9;_+/.\-%]*-*=*[a-zA-Z0-9;_+/.\-%]*-*\)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3160
#T: Straße Hausnummer
#A: Daniel
#D: Erklärt Straße-Hausnummer-Kombinationen nach folgenden Regeln für gültig:
#D: Straße muss mit einem dt. Buchstaben beginnen,
#D: vor der Hausnummer muss (mind.) ein Whitespace stehen,
#D: der Nummer dürfen andere Zeichen folgen ("1/2", "c" etc.).
^(([a-zA-ZäöüÄÖÜ]\D*)\s+\d+?\s*.*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3161
#T: Vorname (first name)
#A: Daniel
#D: Prüft auf einen Namen (evtl. zusammengesetzt mit Bindestrich "-"). Lässt auch Akzentzeichen zu.
#D: Verifies a first name (possibly hyphenated). Accepts also accent marks.
^([^ \x21-\x26\x28-\x2C\x2E-\x40\x5B-\x60\x7B-\xAC\xAE-\xBF\xF7\xFE]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3162
#T: Versioning ( XX.YY.ZZ) Format
#A: Lillian 
#D: Versioning in XX.YY.ZZ format
^([0-9][0-9])[.]([0-9][0-9])[.]([0-9][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3163
#T: Indian Passport Number
#A: Amol Sahare
#D: If it is more then 7 numbers then it will not detect.
^[A-Za-z]{1}[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3164
#T: Application Version
#A: Tsahi Atias
#D: this expression identify application version. the input should contains one or more numbers separated by . (Dot) sign
^\d*((\.\d+)?)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3165
#T: 12-Hour Time (HH:MM:SS)
#A: Nathon Dalton
#D: This regex validates time strings to ensure they're in the format HH:MM:SS. It accepts from 1:00:00-12:59:59
^(0?[1-9]|1[0-2])(\:)([0-5][0-9])(\:)([0-5][0-9]) (AM|PM)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3166
#T: Date - US Format
#A: Nathon Dalton
#D: Accepts dates in the format MM/DD/YYYY. Month and day can have preceeding 0 if less than 10, year is 1900-9999 and months accept 30/31 days appropriately. February accepts 29 (leap year not factored in).
^((0?[2])/(0?[1-9]|[1-2][0-9])|(0?[469]|11)/(0?[1-9]|[1-2][0-9]|30)|(0?[13578]|1[02])/(0?[1-9]|[1-2][0-9]|3[0-1]))/([1][9][0-9]{2}|[2-9][0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3167
#T: IP address in application configuration files
#A: BH
#D: This expression is ideal used for "identifying some plain application configuration files that contain any form of ip addresses, with or without port number followed and with protocol at the beginning".
#D: [\\""=/] can be removed on both ends to seach IPs in text files, but with it, it has better accuracy - there are version numbers in the application configuration files.
#D: It also does not match IPs that have one digit at the first number.
[\\""=/>](25[0-4]|2[0-4][0-9]|1\d{2}|\d{2})\.((25[0-4]|2[0-4][0-9]|1\d{2}|\d{1,2})\.){2}(25[0-4]|2[0-4][0-9]|1\d{2}|\d{2}|[1-9])\b[\\""=:;,/<]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3168
#T: Mobile phone number validation - Jordan
#A: Ghaleb Darwazeh
#D: Regular expression to validate mobile numbers in Jordan provided by Zain, Orange, and Umnia.
^07[789]-\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3169
#T: IP addresses not 127.0.0.1
#A: BH
#D: Match all IP addresses other than 127.0.0.1. It dose not match an IP has 0 at the last number
\b(1(?!27\.0\.0\.1)\d{1,2}|2[0-4][0-9]|25[0-4]|\d{1,2})\.(?:\d{1,3}\.){2}(25[0-5]|2[0-4][0-9]|1\d{2}|\d{2}|[1-9])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3170
#T: Connection string sql database/instance reference in application configuration files
#A: BH
#D: This expression is ideal used for "identifying some plain application configuration files that contain any form of MSSQL database/instance reference in connection string". Dose not match .\sql. [\\""=/] can be removed on both ends to seach server/instance in text files, but with it, it has better accuracy
[\\""=:;,](([\w][\w\-\.]*)\.)?([\w][\w\-]+)(\.([\w][\w\.]*))?\\sql\d{1,3}[\\""=:;,]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3171
#T: Url Pattern
#A: Dan Billingsley
#D: Pattern test for general validity of a Url.  It is a little stricter than many others here, as I found they often passed obviously invalid strings like 'http://foo', but is still fairly concise.
^((f|ht)tp(s)?)\://([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,6}((/|\?)[a-zA-Z0-9\.\?=/#%&\+-]+|/|)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3172
#T: International Phone Number format
#A: Tocher
#D: International Phone Number conventions are really difficult to get a one-size-fits-all regex for. This version forces numbers to start with a plus sign (international dialling symbol), then a country code and then the phone number
^\+(?:[0-9] ?){6,14}[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3173
#T: Date & 24-Hour Time - US Format
#A: Nathon Dalton
#D: This regex accepts date and time values, taking into account 29/30/31 day months. 00 hours (midnight) must have both zeros, but hours 01-09 can leave 0 off, months 1-9 can also leave 0 off.
^((0?[2])/(0?[1-9]|[1-2][0-9])|(0?[469]|11)/(0?[1-9]|[1-2][0-9]|30)|(0?[13578]|1[02])/(0?[1-9]|[1-2][0-9]|3[0-1]))/([1][9][0-9]{2}|[2-9][0-9]{3}) (00|0?[1-9]|1[0-9]|2[0-3])\:([0-5][0-9])\:([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3174
#T: 24-Hour Time (HH:MM:SS)
#A: Nathon Dalton
#D: This regex accepts time in 24-hour format (00:00:00 - 23:59:59). Hours 01-09 can leave the 0 off, but 00 has to have both zeros.
^(00|0?[1-9]|1[0-9]|2[0-3])\:([0-5][0-9])\:([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3175
#T:  Explain the following  regular expressions. Where would they be used? What potential problems do you foresee in using them?
#A: Kanupriya Surana
#D: Explain the following  regular expressions. Where would they be used? What potential problems do you foresee in using them?
^[a-zA-Z0-9]+([_.-]?[a-zA-Z0-9]+)?@[a-zA-Z0-9]+([_-]?[a-zA-Z0-9]+)*([.]{1})[a-zA-Z0-9]+([.]?[a-zA-Z0-9]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3176
#T: Explain the following 2 regular expressions. Where would they be used? What potential problems do you foresee in using them?
#A: Kanupriya Surana
#D: Explain the following 2 regular expressions. Where would they be used? What potential problems do you foresee in using them?
^[^<>&~\s^%A-Za-z\\][^A-Za-z%^\\<>]{1,25}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3177
#T: Comma Separated digits string
#A: Tushar Patil
#D: Positive Whole number matched from 0 to 9999999. Only 9 digits length is allowed in every comma separated value.Can be easily changed to modify the length of the comma separated values.
(^\d{1,9})+(,\d{1,9})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3178
#T: First name(s[2]) XOR Last name(s[2]) validator
#A: Lester Garcia
#D: Validates up to two names. Names must start with uppercase followed by letters (including accented and egne). Separator is assumed to be one hyphen or one space.
(^[ÑA-Z][a-záéíóúñ'ÑA-Z]*$)|(^[ÑA-Z][a-záéíóúñ'ÑA-Z]*[- ]^[ÑA-Z][a-záéíóúñ'ÑA-Z]*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3180
#A: Nguyen Ba Tan
#D: this expression validates a date-time field in yyyy/m/d format. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1900-2999, and all 2 digits years except 00
^(((19|2\d)\d{2}\/(((0?[13578]|1[02])\/31)|((0?[1,3-9]|1[0-2])\/(29|30))))|((((19|2\d)(0[48]|[2468][048]|[13579][26])|(2[048]00)))\/0?2\/29)|((19|2\d)\d{2})\/((0?[1-9])|(1[0-2]))\/(0?[1-9]|1\d|2[0-8]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3181
#A: Nguyen Ba Tan
#D: this expression validates a date-time field in yyyy/m/d format. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00
^(((1[6-9]|[2-9]\d)\d{2}\/(((0?[13578]|1[02])\/31)|((0?[1,3-9]|1[0-2])\/(29|30))))|((((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))\/0?2\/29)|((1[6-9]|[2-9]\d)\d{2})\/((0?[1-9])|(1[0-2]))\/(0?[1-9]|1\d|2[0-8]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3182
#A: Nguyen Ba Tan
#D: this expression validates a date-time field in yyyy/m/d or yyyy-m-d format. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00
^(((1[6-9]|[2-9]\d)\d{2}([-|\/])(((0?[13578]|1[02])([-|\/])31)|((0?[1,3-9]|1[0-2])([-|\/])(29|30))))|((((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))([-|\/])0?2([-|\/])29)|((1[6-9]|[2-9]\d)\d{2})([-|\/])((0?[1-9])|(1[0-2]))([-|\/])(0?[1-9]|1\d|2[0-8]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3183
#A: Nguyen Ba Tan
#D: this expression validates a date-time field in yyyy/m/d h:m:s or yyyy-m-d h:m:s format. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00.
#D: Matches times seperated by either : or . will match a 24 hour time, or a 12 hour time with AM or PM specified. Allows 0-59 minutes, and 0-59 seconds. Seconds are not required.
^(((1[6-9]|[2-9]\d)\d{2}([-|\/])(((0?[13578]|1[02])([-|\/])31)|((0?[1,3-9]|1[0-2])([-|\/])(29|30))))|((((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))([-|\/])0?2([-|\/])29)|((1[6-9]|[2-9]\d)\d{2})([-|\/])((0?[1-9])|(1[0-2]))([-|\/])(0?[1-9]|1\d|2[0-8]))(\s)((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?(\s)?([aApP][mM]))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3184
#T: DateTime
#A: Ralf Koch
#D: Regex to match date and or time either in 12 or 24 hour format.
#D: It will also allow for am/pm with mixed cases.
^(0?[1-9]|[12][0-9]|3[01])[- /.](0?[1-9]|1[012])[- /.](19|20)?[0-9]{2}? ?((([0-1]?\d)|(2[0-3])):[0-5]\d)?(:[0-5]\d)? ?([a,p,A,P][m,M])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3185
#T: Dutch phone number in E.164 internation format, route + length validation
#A: ProBackup.nl
#D: Intended to validate html5 form input of type=tel in internation E.164 format, to validate Dutch phone numbers for valid routes and length. Geographic (open number plan: subscriber number cannot start with 0,1 or 9), and non-geographic (closed number plan), 0800 and 090x numbers including 8/11 digit length checking. Not implemented are 14xxx style government numbers. This regex can be used in PBXes as part of a larger dial plan string to allow immediate dialing as soon as the correct number of digits has been entered. Replace \+ with your international dialing prefix.
^\+31(?:(?#AREA2D)(?:1[035]|2[0346]|3[03568]|4[0356]|5[0358]|7\d)[2-8]\d{6}|(?#AREA3D)(?:11[134578]|16[124-8]|17[24]|18[0-467]|22[2346-9]|25[125]|29[479]|31[3-8]|32[01]|34[1-8]|41[12368]|47[58]|48[15-8]|49[23579]|51[1-9]|52[1-5789]|54[13-8]|56[126]|57[0-3578]|59[1-9])[2-8]\d{5}|(?#OTHER10D)(?:6[1-68]|8[4578]|91)\d{7}|(?#OTHER8D)(?:800(?:0[013-8]|1\d|2[01]|4[1369]|[5-9][01])|90[069](?:0[0-35-9]|1[345789]|8[013468]|9[235-8]))\d{2}|(?#OTHER11D)(?:800(?:0[29]|[26-9][2-9]|3\d|4[24578])|90[069](?:04|1[0126]|[2-7]\d|8[2579]|9[0149]))\d{5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3186
#T: Belgium phone number in E.164 internation format, route + length validation
#A: ProBackup.nl
#D: Intended to validate html5 form input of type=tel in internation E.164 format, to validate Belgian phone numbers for valid routes and length. As Belgium has a closed number plan the regex is relatively short and in theory any subscribing number is possible, even ones starting with 0, 1 or 9 as the area code needs to be dialed always. This regex can be used in PBXes as part of a larger dial plan string to allow immediate dialing as soon as the correct number of digits has been entered. Replace \+ with your international dialing prefix.
^\+32(?#8DIGIT)(?:1[0-69]|[23][2-8]|4[236-9]|5\d|6[01345789]|7[01689]|8[0-79]|9[012])\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3187
#T: German phone number in E.164 internation format, route + length validation
#A: ProBackup.nl
#D: Intended to validate html5 form input of type=tel in internation E.164 format, to validate German phone numbers for valid routes and length. As Germany has an open number plan and area codes that are 2, 3, 4 or 5 digits long and emergency services 19222 that can be dialed from outside of the area and number blocks where the owner can choose to have shorter numbers for number queries this regex is enormous in length. This regex can be used in PBXes as part of a larger dial plan string to allow immediate dialing as soon as the correct number of digits has been entered. Replace \+ with your international dialing prefix.
\+49(?:(?#GEO-A2)(?:30|40|69|89)(?!11)[1-9]\d{3,7}|(?#GEO-A3)(?:20[12389]|21[124]|22[18]|23[14]|2[4-9]1|3[35-9][15]|34[015]|4[2-9]1|5[1-9]1|6[1-8]1|7[1-9]1|8[1-8]1|906|9[1-9]1)(?!11)[1-9]\d{2,6}|(?#GEO-A4)(?:204[135]|205[1-468]|206[456]|210[234]|2129|213[1237]|215[0-46-9]|216[1-6]|217[1345]|218[123]|219[12356]|22[023][2-8]|224[1-8]|225[1-7]|226[1-9]|227[1-5]|229[1-7]|230[1-9]|232[3457]|233\d|235[1-5789]|236\d|23[78][1-5789]|239[1-5]|24[02][1-9]|243[1-6]|244[013-9]|245[1-6]|246[1-5]|247[1-4]|248[2456]|250[124-9]|252\d|253[3-68]|254[1235-8]|25[56][1-8]|257[1-5]|258[1-8]|259\d|260[1-8]|262[0-8]|263\d|264[1-7]|265[1-7]|266[1-467]|267[1-8]|268\d|269[1-7]|272[1-5]|273[2-9]|274[1-57]|275[0-589]|276[1-4]|277\d|280[1-4]|282[1-8]|283[1-9]|284[1-5]|285\d|286[1-7]|287[1-4]|290[2-5]|29[2-5][1-578]|296[1-4]|297[1-57]|298[1-5]|299[1-4]|330[1-467]|332[12789]|333[124578]|33[46][1246]|337[125789]|338[1256]|339[145]|342[135]|34[34][13578]|346[1246]|347[1356]|349[1346]|350[14]|352[123589]|353[1357]|354[1246]|356[1-4]|357[13468]|358[13568]|359[1246]|360[1356]|362[1-489]|363[12456]|364[1347]|366[13]|367[12579]|368[12356]|369[135]|372[1-7]|373[1357]|374[145]|376[1-5]|377[1-4]|3821|383[1468]|384[1347]|386[0135-9]|387[1467]|388[136]|390[12479]|392[1358]|393[1357]|394[134679]|396[1-9]|397[136]|398[147]|399[1468]|410[1-9]|412\d|413[1-9]|414[0-4689]|415[1-689]|41[67][1-9]|418\d|419[1-5]|420[2-9]|422[1-4]|42[34]\d|425[1-8]|426\d|427[1-7]|428[1-9]|429[2-8]|430[23578]|432[0-46-9]|433\d|434[02346-9]|435[1-8]|436[1-7]|437[12]|438[1-5]|439[234]|440[1-9]|442[12356]|443[1-5]|444[1-7]|445[1-68]|446[1-9]|447[1-5789]|448\d|449[1-9]|450[1-689]|452[1-9]|453[1-79]|454[1-7]|455\d|456[1-4]|460[2-9]|462[1-7]|463\d|464[1-46]|4651|466[1-8]|46[78][1-4]|470[2-8]|472[1-5]|473[1-7]|474\d|475[1-8]|476[1-9]|477\d|479[1-6]|480[2-6]|482[1-9]|483[02-9]|484[1-9]|485[1-9]|486[1-5]|487[1-7]|488[1-5]|489[23]|490[23]|492\d|493[1-689]|494[1-8]|495\d|496[1-8]|497[1-7]|502[1-8]|503[1-7]|504[1-5]|505[1-6]|506[02-9]|507[1-4]|508[2-6]|510[123589]|512[136-9]|513[0125-9]|514[1-9]|515[1-9]|516[1-8]|517[1-7]|518[1-7]|519\d|520[1-9]|522[1-68]|523[1-8]|524[124-8]|525[0-5789]|526[1-6]|527[1-8]|528[1-6]|529[2-5]|53[02]\d|533[1-79]|534[14-7]|53[56][1-8]|537[1-9]|538[1-4]|540[1-79]|54[235][1-9]|54[46][1-8]|547[1-6]|54[89][1-5]|550[2-9]|552[0-5789]|55[345][1-6]|556[1-5]|557[1-4]|558[2-6]|559[2-4]|560[1-9]|56[23][1-6]|564[1-8]|565\d|566[1-5]|567[1-7]|56[89][1-6]|570[2-7]|57[24][1-6]|573[1-4]|575[1-5]|576[13-9]|577[1-7]|580[2-8]|582\d|583[1-9]|584[0-689]|585[0-5789]|586[1-5]|587[2-5]|588[23]|590[1-9]|592[1-6]|593[1-79]|594[1-8]|595[1-7]|596[1-6]|597[135-8]|600[23478]|602[0-46-9]|603[1-69]|604[1-9]|605\d|606[12368]|607[1348]|608[1-7]|609[2-6]|610[1-9]|612[02346-9]|613[0-689]|614[24-7]|615[01245789]|616[1-7]|617[1-5]|618[1-8]|619[02568]|62[04][1-79]|622[0-46-9]|62[36][1-9]|62[59][1-8]|627[12456]|628[1-7]|63[09][1-8]|63[235][1-9]|634\d|636[1-4]|637[1-5]|638[1-7]|64[02]\d|643[0-689]|644[0-79]|645[1-8]|646[124-8]|647[1-9]|648[2-6]|650\d|652[2-7]|653[1-6]|654[1-5]|655\d|656[1-9]|657[1-58]|658\d|659[1-79]|66[25]\d|66[36][013-9]|66[49][1-8]|667[02-8]|668[1-4]|670[1346-9]|67[25][1-8]|67[34][1-7]|67[67][1-6]|678[1-9]|680[2-69]|682[14-7]|68[35][1-8]|684[1-489]|686[14-9]|687[1-6]|688[178]|689[3478]|70[245][1-6]|703[1-4]|706[236]|707[123]|708[1-5]|712[1-9]|713[0-689]|714[1-8]|715[0-46-9]|71[67][1-6]|718[1-4]|719[1-5]|720[2-4]|722\d|72[37][1-7]|724[02-9]|72[56]\d|730[02-9]|73[28][1-9]|73[36][1-7]|734[03-8]|735[1-8]|737[13-6]|739[1-5]|740[234]|742[02-9]|743[1-6]|744\d|745[1-9]|746[1-7]|747[1-8]|748[2-6]|750[2-6]|753[0245789]|754[1-6]|755[1-8]|756[1-9]|757[0-9|758[1-7]|7602|762\d|76[347][1-6]|765[1-7]|766\d|768[1-5]|770[2-9]|772\d|773[1-689]|774[1-8]|775[1345]|776[1-5]|777[13457]|780[2-8]|782[1-6]|783[1-9]|78[45][1-4]|790[3-7]|79[34]\d|795[0-5789]|79[67][1-7]|802\d|803[1-689]|804[12356]|80[56][1-7]|80[78][1-6]|809[1-5]|810[2-6]|812[1-4]|813[13-9]|814[1-6]|815[12378]|816[15-8]|817[016-9]|819[1-6]|820[2-8]|82[29][1-6]|823[

#U: http://regexlib.com/REDetails.aspx?regexp_id=3188
#T: Zero not allowed
#A: Gordan Halama
#D: Positive real multi-digit  number: don't allow preciding zero, last decimal digit zero not allowed.
^([1-9]\d*|0)(([.,]\d*[1-9])?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3189
#T: Remove Invalid Chars
#A: Muhammad Waleed Ashraf
#D: This regular expression will remove all invalid chars from a string
^[^<>`~!/@\#},.?"-$%:;)(_ ^{&*=|'+]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3190
#T: Username
#A: Endra Hendrawan S
#D: Username start only with alphabet, and then can combine with any digit, space, and underscore. Reject other special character and space in the begin and the end of characters.
^[a-zA-Z]{1}[\w\sa-zA-Z\d_]*[^\s]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3191
#T: Serie of numbers
#A: el slayer
#D: Evaluates an 'n' series of non decimal numbers separated by a coma
^(\d+(,\d+)*)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3192
#T: Checks Alpha Numberic
#A: lokanath
#D: With this expression we can validate alpha numeric, ie allow only numbers and alphabets. 
^[a-zA-Z0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3193
#T: last Name(s)
#A: John Scott
#D: This regex validates a persons last name. Acceptable names can include a single quote, compound names seperated by a hyphen, or followed by "Jr." or "I", "II", "III". 
(/^[A-Z][a-z]*(([\'\,\.\-]?[A-Z])?[a-z]*)((\s)?((Jr.(\.))|I|II|III]))?$/,

#U: http://regexlib.com/REDetails.aspx?regexp_id=3194
#T: For Email
#A: Jagnarain Singh
#D: Simple email expression. Doesn't allow numbers in the email name.
^([a-zA-Z0_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,3}|[0-9]{1,3})(\]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3195
#T: Two Character Country Abbreviation
#A: Tony Simek
#D: Matches against the two character country abbreviations (as of 2010).
#D: "AD","AE","AF","AG","AI","AL","AM","AN","AO","AQ","AR","AS","AT","AU","AW","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BM","BN","BO","BR","BS","BT","BV","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CS","CU","CV","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GH","GI","GL","GM","GN","GP","GQ","GR","GS","GT","GU","GW","GY","HK","HM","HN","HR","HT","HU","ID","IE","IL","IN","IO","IQ","IR","IS","IT","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PN","PR","PS","PT","PW","PY","QA","RE","RO","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","ST","SV","SY","SZ","TC","TD","TF","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","UM","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","YE","YT","ZA","ZM","ZW"
^(?-i:A[DEFGILMNOQRSTUWZ]|B[ABDEFGHIJMNORSTVWYZ]|C[ACDFGHIKLMNORSUVXYZ]|D[EJKMOZ]|E[CEGHRST]|F[IJKMOR]|G[ABDEFHILMNPQRSTUWY]|H[KMNRTU]|I[DELNOQRST]|J[MOP]|K[EGHIMNPRWYZ]|L[ABCIKRSTUVY]|M[ACDGHKLMNOPQRSTUVWXYZ]|N[ACEFGILOPRUZ]|O[M]|P[AEFGHKLMNRSTWY]|QA|R[EOUW]|S[ABCDEGHIJKLMNORTVYZ]|T[CDFGHJKLMNORTVWZ]|U[AGMSYZ]|V[ACEGINU]|W[FS]|Y[ET]|Z[AMW])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3196
#T: US Monitary Value
#A: Narendra Shrestha
#D: Validate for US monetary value pattern
^-?((([0-9]{1,3},)?([0-9]{3},)*?[0-9]{3})|([0-9]{1,3}))\.[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3197
#T: Ultimate URL URN Regex
#A: Xunnamius
#D: Finally, an expression that can reliably match any valid URL/URN! Future proof against vanity TLDs, doesn't require a schema, can parse IPv4s with or without port, can parse regular URLs with/without port, can accept extra baggage at the end, and, with a slight modification (a la ^$ and changing the final rule around a bit) this can be used to find and activate URLs in bodies of text safely and reliably. Have fun (tell me if it could be improved)!
^((nntp|sftp|ftp(s)?|http(s)?|gopher|news|file|telnet):\/\/)?(([a-zA-Z0-9\._-]*([a-zA-Z0-9]\.[a-zA-Z0-9])[a-zA-Z]{1,6})|(([0-9]{1,3}\.){3}[0-9]{1,3}))(:\d+)?(\/[^:][^\s]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3198
#T: Ultimate Name Regex
#A: Xunnamius
#D: Match to just about any valid human name you could think of.
^\s*([A-Za-z]{2,4}\.?\s*)?(['\-A-Za-z]+\s*){1,2}([A-Za-z]+\.?\s*)?(['\-A-Za-z]+\s*){1,2}(([jJsSrR]{2}\.)|([XIV]{1,6}))?\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3199
#T: Ultimate Phone Number Regex (international + USA)
#A: Xunnamius
#D: After searching for one, I just said "screw it" and wrote my own, and here she is. A regular expression to match against phone numbers, both international and USA!
#D: Very VERY flexible, if I do say so myself (and I do).
^((\+)?[1-9]{1,4})?([-\s\.\/])?((\(\d{1,4}\))|\d{1,4})(([-\s\.\/])?[0-9]{1,6}){2,6}(\s?(ext|x)\s?[0-9]{1,6})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3201
#T: Phone
#A: Ashok Khedkar
#D: Phone Number with (+country code) optional and in 3-3-4 format with or without ()and -
^( )*(\+?( )?\(?( )?(\d{1,3})?)\)?(.|-|_ )?\(?(\d{3})\)?(.|-|_ )?\(?(\d{3})\)?(.|-|_ )?\(?(\d{4})\)?( )*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3202
#T: command line option no duplicate
#A: Wang , Feng
#D: suppose you have a exe/command take options like "a b c" or "b c a", the sequence doesn't matter, but on option should only appear at most once.
#D: The ?! is "negative look ahead", \2 refer the second group.
\s*((a|b|c)\s+(?!.*\2.*))*(a|b|c)\s*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3203
#T: USA Phone Number
#A: Ramesh Sivaperumal
#D: Support 13 Formats (Country Code 1)
^((([+])?[1])?\s{0,1}\d{3}\s{0,1}\d{3}\s{0,1}\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3204
#T: Time with AM/PM
#A: Ramesh Sivaperumal
#D: Allow Time with AM/PM
^([0]?[1-9]|[1][0-2]):([0-5][0-9]|[1-9]) [aApP][mM]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3205
#T: Railway Time(24 Hours)
#A: Ramesh Sivaperumal
#D: Allow 24 hrs time format
^([0]?[1-9]|[1][0-2]|[2][0-3]):([0-5][0-9]|[1-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3206
#T: Multi-Line Start | Middle | End construct
#A: Tod Wulff
#D: A regex that hits on a multi-line sequence that starts with a START phrase on a line, and ends with an END phrase on a different line, which contains a MIDDLE phrase on a line between the START and END lines.
#D: Needs Multi-Line and Single-Line options enabled in PCRE.
^START(?=(?:.(?!END|START))*MIDDLE).*?END[^\n]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3207
#T: Polish stationary phone
#A: Waldemar Lewoń
#D: Polish stationary phone number. Mask +48 XX XXXXXXX
#D: or +48 XX-XXX-XX-XX or +48 XXXXXXXXX
^(\+48\s*)?\d{2}\s*\d{3}(\s*|\-)\d{2}(\s*|\-)\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3208
#T: Polish NIP validation
#A: Waldemar Lewoń
#D: allow to insert input for polish tax identyfication number (NIP). Mask accepted:
#D: XXX-XX-XX-XXX ; XXX-XXX-XX-XX ; XXX XX XX XXX ; XXX XXX XX XX 
^((\d{3}[- ]\d{3}[- ]\d{2}[- ]\d{2})|(\d{3}[- ]\d{2}[- ]\d{2}[- ]\d{3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3209
#T: Extract YouTube ID
#A: Matt B
#D: Extract the 11-character unique video ID from a YouTube video link. The match is caught by the subpattern.
#F: i
v[=|\/]([\w-]{11})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3210
#A: Tienlm
#D: dd/MM/yyyy with leap years 100% integrated Valid years : from 1000 to 9999
^(((0)[13578]|(10)|(12))(/)((0[1-9])|([12][0-9])|((3)[01]))(/)(\d{4}))|(((0)[469]|(11))(/)((0[1-9])|([12][0-9])|(30))(/)(\d{4}))|((02)(/)((0[1-9])|((1)[0-9])|((2)[0-8]))(/)(\d{4}))|((02)(/)((0[1-9])|((1)[0-9])|((2)[0-9]))(/)((\d{2})(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3211
#T: Password with n numbers of digits, upper case character and special character.
#A: Bryian Tan
#D: User can specify n numbers of digits, upper case character and special character.
#D: In this example, we will use two special characters, digits and upper case in the password.
#D: Explanation:
#D: (?=^.{12,25}$) -- password length range from 12 to 25
#D: (?=(?:.*?[!@#$%*()_+^&}{:;?.]){2}) -- at least 2 special characters (!@#$%*()_+^&}{:;?.})
#D: (?=(?:.*?\d){2}) -- at least 2 digits
#D: (?=.*[a-z]) -- characters a-z
#D: (?=.{2,}[A-Z]) -- at least 2 upper case characters
(?=^.{12,25}$)(?=(?:.*?\d){2})(?=.*[a-z])(?=(?:.*?[A-Z]){2})(?=(?:.*?[!@#$%*()_+^&}{:;?.]){2})(?!.*\s)[0-9a-zA-Z!@#$%*()_+^&]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3212
#T: Formatted Numbers (tr-TR competible)
#A: M. Ugur NEMLIOGLU
#D: This expression allow controling to formatted numeric values.
^(\d{1.3}(\.\d{3})*|(\d+))(\,\d{1})|(\d{1.3}(\.\d{3})*|(\d+))(\,\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3213
#T: Formatted Integers (tr-TR)
#A: M. Ugur NEMLIOGLU
#D: You can change \. separator with which you need as a separator like \, (en-US numbers separator) or \. (tr-TR numbers separator) etc.
^(\d{1}|\d{2}|\d{3})(\.\d{3})*?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3214
#T: String match within single quote or double quote
#A: Pankaj Bisane
#D: This expression matches string started with " or ' and ended with " or '
^"|'+(.*)+"$|'$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3215
#T: Persian Date
#A: mostafa satari
#D: Persian date distinguishing between first and second 6 months.
^1[34][0-9][0-9]\/(((0?[1-6])\/((0?[1-9])|([12][0-9])|30|31))|(((0?[7-9])|1[0-2])\/((0?[1-9])|([12][0-9])|30)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3216
#T: UK Phone Number
#A: Masood Ahmed Panezai
#D: UK phone number for both Geographic (landline) and Non-Geographic (Cell) numbering. It validates a complete range of combination of area code, location and formate , it also allows international number starting from +44 or 0044 and it also allows () with area code and spaces.
^(((\+44\s?|0044\s?)?|(\(?0))((2[03489]\)?\s?\d{4}\s?\d{4})|(1[23456789]1\)?\s?\d{3}\s?\d{4})|(1[23456789][234578][0234679]\)?\s?\d{6})|(1[2579][0245][0467]\)?\s?\d{5})|(11[345678]\)?\s?\d{3}\s?\d{4})|(1[35679][234689]\s?[46789][234567]\)?\s?\d{4,5})|([389]\d{2}\s?\d{3}\s?\d{4})|([57][0-9]\s?\d{4}\s?\d{4})|(500\s?\d{6})|(7[456789]\d{2}\s?\d{6})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3217
#T: 10 or 11 digit US Phone # with optional extension and non-standard separators
#A: Joshua Barker
#D: This expression will match a 10 or 11 digit US phone number with optional area code parenthesis, non-standard seperators such as spaces or dot's (.), and an extension up to 6 digits long
^[1]?[-\.\s]?(\(\d{3}\)|\d{3}){1}[-\.\s]?\d{3}[-\.\s]?\d{4}(\s+|\s*[-\.x]{1}\d{1,6})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3218
#T: Email
#A: Tim Gaunt
#D: An email that should work in accordance to the RFC standard (see http://en.wikipedia.org/wiki/Email_address#Syntax)
^(([A-Za-z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^_\`\{\|\}\~]+\.*)*[A-Za-z0-9\!\#\$\%\&\'\*\+\-\/\=\?\^_\`\{\|\}\~]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3220
#T: Shared folder path
#A: meersabir1@gmail.com
#D: This reg is for validating the shared folder path
^((\\{2}\w+)\$?)((\\{1}\w+)*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3221
#T: Credit Card Expiry Date Expression
#A: Wasim  Khan
#D: It is useful to validate Expiry date in mm/yyyy format. But it not support when year comes like 2020,2030,2040etc
'^((0[1-9])|(1[0-2]))\/*((2011)|(20[1-9][1-9]))$'

#U: http://regexlib.com/REDetails.aspx?regexp_id=3222
#T: Australian Date Format
#A: Rino Batin
#D: Australian date format d/m/yyyy or dd/m/yyyy, d/mm/yyyy or dd/mm/yyyy. Valid dates from 1900 to 2099 including leap year. 
^((((([1-9])|(0[1-9])|(1\d)|(2[0-8]))/(([1-9])|(0[1-9])|(1[0-2])))|((31/(((0[13578])|([13578]))|(1[02])))|((29|30)/(((0[1,3-9])|([1,3-9]))|(1[0-2])))))/((20[0-9][0-9]))|(((([1-9])|(0[1-9])|(1\d)|(2[0-8]))/(([1-9])|(0[1-9])|(1[0-2])))|((31/(((0[13578])|([13578]))|(1[02])))|((29|30)/(((0[1,3-9])|([1,3-9]))|(1[0-2])))))/((19[0-9][0-9]))|(29/(02|2)/20(([02468][048])|([13579][26])))|(29/(02|2)/19(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3223
#T: Srilanka NIC validator
#A: Prabodha Eranga
#D: Using this validate srilankan identity card number
(^\d{9}[V|v|x|X]$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3224
#T: Swiss Standard Phone
#A: jairo vasquez
#D: This is a simple expression for Swiss phone and Euro phone in general
^((\+\s?\d{2}|\(?00\s?\d{2}\)?)\s?\d{2}\s?\d{3}\s?\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3225
#T: South African Phone Number
#A: Chaim Chaikin
#D: Matches a South African landline or cellphone number. Can use dashes or spaces. Can be prefexed with +27 or 27 or 0. With support for extensions.
^(\+27|27|0)[0-9]{2}( |-)?[0-9]{3}( |-)?[0-9]{4}( |-)?(x[0-9]+)?(ext[0-9]+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3226
#T: Am I registered domain?
#A: ADam Borowski
#D: check if specified domain or its superdomains are declared as string.
(subdomain\.|^)(domain\.|^)com$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3227
#T: MAC address
#A: Jeff Hervouet
#D: This regular expression will validate against a valid MAC address. The 6 bytes are hexadecimal and separated by semi colon or dash caracters.
^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3228
#T: Pakistan CNIC Validation
#A: Asif Iqbal
#D: This validation is for Pakistan New CNIC.
^[0-9+]{5}-[0-9+]{7}-[0-9]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3229
#T: Regular expression to extract inner text from anchor tags
#A: Bryian Tan
#D: Regular expression to extract inner text from anchor tags.
#D: <a href="somelink.aspx">keep this text</a>
#D: Result: keep this text
#D: <div><A href="a.aspx">Keep this text too</a></div>
#D: Result: <div>Keep this text too</div>
(<[a|A][^>]*>|</[a|A]>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3230
#T: Positive Decimals with optional leading/trailing zeros
#A: Glen Thompson
#D: Matches any positive decimal number > 0 with optional leading '+' symbol and optional leading or trailing zeros on both sides of the decimal point. Decimal point is also optional and either side of the decimal is optional.
^[+]?((\d*[1-9]+\d*\.?\d*)|(\d*\.\d*[1-9]+\d*))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3231
#T: strong password limited character set
#A: V A R
#D: 8 to 64 characters. Spaces not allowed. Require at least one UPPER, one lower and one number. Then limit the input to a-z A-Z 0-9 _-+.$ # @ and !
(?=.*\d)(?=.*[a-z])(?=.*[A-Z])^[\w!@$#.+-]{8,64}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3232
#T: Price
#A: Arun Gopi
#D: This expression validation for price.
^(([$])?((([0-9]{1,3},)+[0-9]{3})|[0-9]+)(\.[0-9]{2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3233
#T: Improved SSN
#A: Bill Fitzpatrick
#D: Used Tim Cartwright example and added \s or - for separators.
^((?!000)(?!666)([0-6]\d{2}|7[0-2][0-9]|73[0-3]|7[5-6][0-9]|77[0-1]))(\s|\-)((?!00)\d{2})(\s|\-)((?!0000)\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3234
#T: UK Driver Licence
#A: allan
#D: Matches the UK Drivers License format:
#D: i. Must be 16 characters
#D: ii. First 5 characters are alphanumeric.
#D: iii. Next 6 characters must be numeric
#D: iv. Next 3 characters are alphanumeric
#D: v. Last 2 characters are alpha
#D: vi. Second character of numeric section can only be 0, 1, 5 or 6. 7.
#D: Fourth and fifth characters of numeric section must be in the range 01 to 31.
\b[A-Z0-9]{5}\d{1}[01567]\d{1}([0][1-9]|[12][0-9]|[3][0-1])\d{1}[A-Z0-9]{3}[A-Z]{2}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3235
#T: mixed case short and long month format - whole word
#A: allan
#D: Is there an easier way of doing this??
\b([Jj](([Aa][Nn][Uu][Aa][Rr][Yy]|[Aa][Nn])|([Uu][Nn][Ee]|[Uu][Nn])|([Uu][Ll][Yy]|[Uu][Ll])))\b|\b((([Ss][Ee][Pp][Tt]|[Nn][Oo][Vv]|[Dd][Ee][Cc])[Ee][Mm])|[Oo][Cc][Tt][Oo])[Bb][Ee][Rr]|([Ss][Ee][Pp]|[Nn][Oo][Vv]|[Dd][Ee][Cc]|[Oo][Cc][Tt])\b|\b([Mm][Aa]([Yy]|([Rr][Cc][Hh]|[Rr])))\b|\b[Aa](([Pp][Rr][Ii][Ll]|[Pp][Rr])|([Uu][Gg][Uu][Ss][Tt]|[Uu][Gg]))\b|\b[Ff]([Ee][Bb][Rr][Uu][Aa][Rr][Yy]|[Ee][Bb])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3236
#T: URL Segments
#A: Ted Cambron
#D: This is an expression I sometimes use to verify segments in a URL or directory path. It must begin and end with a word character and may contain "_" "-" and "." one at a time. It's non-capturing as it sits. More restrictive than RFC2396 and used to prevent directory transversal holes.
(?:[a-zA-Z0-9]+(?:(?:_|\-|\.)[a-zA-Z0-9]+)*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3237
#T: Domain Name
#A: Ted Cambron
#D: This is a little regex to verify domain style names per RFC952. This is also found in RFC1034 and both use the terms domain name and host name interchangeably even though I believe there may be a difference. Only alpha, digit, and dashes allowed with a dot as delimiter. Must begin with alpha and not end with a dash or dot. No spaces.
(?:[^0-9][a-zA-Z0-9]+(?:(?:\-|\.)[a-zA-Z0-9]+)*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3238
#T: URL with Port Option
#A: Ted Cambron
#D: Here's my relaxed version of an URL regex. This one accepts just about anything but a double dot but still must resemble an URL to pass. Also doesn't accept out of place meta characters.
^(\w{3,6}\:\/\/[\w\-]+(?:\.[\w\-]+)+(?:\:\d{2,4})*(?:\/?|(?:\/[\w\-]+)*)(?:\/?|\/\w+\.\w{2,4}(?:\?[\w]+\=[\w\-]+)?)?(?:\&[\w]+\=[\w\-]+)*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3239
#T: safe input of phone/address
#A: Joe Harrington
#D: basic test for web-safe characters on alphanumeric addresses and phone numbers
[a-zA-Z0-9\.\(0-9\)\#\']+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3240
#T: Singapore phone format 
#A: Edwin
#D: Singapore phone number checks possible prefix +65 
^(\+65)?\d{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3241
#T: Positive integer numbers 
#A: Pier Paolo
#D: This pattern match only positive integer numbers without zero (s) before
^[1-9]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3242
#T: person name
#A: Frédéric BROUARD
#D: Check for person name in database for example.
#D: A person name is a string compound of letters in upper or lower case and three more typographical characters, the hyphen (-), the simple quote or apostrophe (') and the space. For these three characters, not at the beginning or the end of the string.
^[a-zA-Z][a-zA-Z\-' ]*[a-zA-Z ]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3243
#T: Date 
#A: vincenzo
#D: dd/mm/yyyy 
((0[1-9]|1[0-9]|2[0-9]|3[01])\/(?:0[13578]|1[02])\/(?:1[2-9]\d+|2[0-9]\d+))|((0[1-9]|1[0-9]|2[0-8])\/(?:02)\/(?:1[2-9]\d+|2[0-9]\d+))|(29\/(?:02)\/((1200|1600|2000|2400)|(1[6-9]|2[0-9])((0[48]|1[26]|2[048]|3[26]|4[048]|5[26]|6[048]|7[26]|8[048]|9[26]))))|((0[1-9]|1[0-9]|2[0-9]|30)\/(?:0[469]|11)\/(?:1[2-9]\d+|2[0-9]\d+))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3244
#T: yyyy/MM/dd
#A: Gunbilegt Byambadorj
#D: Matches yyyy/MM/dd
^(19|20)\d\d[-/.]([1-9]|0[1-9]|1[012])[- /.]([1-9]|0[1-9]|[12][0-9]|3[01])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3245
#T: 12 Hr Time expression
#A: Sachin C
#D: This will validate 12 hours time format with AM/am PM/pm
^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][ ][aApP][mM]){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3246
#T: URI checker
#A: Colin Griffith
#D: This is a Perl regular expression which matches any valid URI. I've extensively tested it (with the help of Wikipedia, and the actual URI specification written by Sir Tim Burners Lee himself), and it seems to work in all cases. Whether it will actually work to validate a URI is questionable... But any URI that is valid, will match. Including those with IPv6 addresses.
#^([a-z0-9+\-.]+):([/]{0,2}([a-z0-9\-._~%!\$&'\(\)\*+,;=:]+@)?([\[\]a-z0-9\-._~%!\$&'\(\)\*+,;=:]+(:[0-9]+)?))([a-z0-9\-._~%!\$&'\(\)\*+,;=:@/]*)(\?[\?/a-z0-9\-._~%!\$&'\(\)\*+,;=:@]+)?(\#[a-z0-9\-._~%!\$&'\(\)\*+,;=:@/\?]+)?#i

#U: http://regexlib.com/REDetails.aspx?regexp_id=3247
#T: Australian mobile phone number
#A: Steve Malikoff
#D: Validates an Australian mobile telephone number that can include an international prefix and four plus (two or three-digit) grouping.
#D: I use it in ASP.NET MVC DataAnnotations [RegularExpression()] attributes where I don't get to easily strip out spaces beforehand.
^((61|\+61)?\s?)04[0-9]{2}\s?([0-9]{3}\s?[0-9]{3}|[0-9]{2}\s?[0-9]{2}\s?[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3248
#T: Date time Expression
#A: faiz shaikh
#D: Regular expression for find date with time.
((\(\d{2}\) ?)|(\d{2}/))?\d{2}/\d{4} ([0-2][0-9]\:[0-6][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3249
#T: Urine Lab Specific Gravity Validator
#A: Michael
#D: Range validator for urine lab panel specific gravity. The valid range is 1.000 to 1.400 inclusive. Sometimes < and > are used but not in the context of <1.000 nor >1.400. To 1, 2 or 3 decimals. Normal range is 1.003 to 1.03 but is left to the viewer.
(((^[>]?1.0)(\d)?(\d)?)|(^[<]?1.0(([1-9])|(\d[1-9])|([1-9]\d)))|(^[<]?1.4(0)?(0)?)|(^[<>]?1.(([123])(\d)?(\d)?)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3250
#T: Return n words before and after a search term
#A: Tim vL
#D: pass in to your search term, a number and an expression to match.  Replace the 2 and ipsum with those.  Use the "matches" array to return all match strings.  Is tolerant of word matches at start and end of string
(\s*\S*){2}(ipsum)(\S*\s*){2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3251
#T: Mysql string literals
#A: Marc van Lieshout
#D: Matches mysql single-quoted string literals. double quotes and backslashed quotes are recognised.
(\'([^\'\\]*\\.)*[^\'\\]*\')+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3252
#T: Hijri Date
#A: Mohamed Bakr
#D: Validate Hijri Dates
#D: thanks to tutoweb
^([1-9]|(0|1|2)[0-9]|30)(/|-)([1-9]|1[0-2]|0[1-9])(/|-)(14[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3253
#T: Latitude (decimal)
#A: Zygimantas Berziunas
#D: [-90.000000 ... 90.000000]
#D: Decimal places: up to 6.
#D: You can increase precision by replacing {1,6} with {1,your_number}
^-?(?:90(?:(?:\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\.[0-9]{1,6})?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3254
#T: Longitude (decimal)
#A: Zygimantas Berziunas
#D: [-180.000000 ... 180.000000]
#D: Decimal places: up to 6.
#D: You can increase precision by replacing {1,6} with {1,your_number}
^-?(?:180(?:(?:\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[1-7][0-9])(?:(?:\.[0-9]{1,6})?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3255
#T: Dutch zip code
#A: Erik Terwiel
#D: Most RegExpr for dutch zip codes are too simple. For historic reasons, the two-letter combinations SS, SA and SD are not allowed.
#D: There should be one space between the numbers and letters, but I allow any number of spaces. Also I allow lowercase. In the early days of dutch zip codes, some letters were not allowed to avoid confusion (F,I,Q, O etc). Nowadays, they are not excluded anymore, because we ran out of letter combinations.
#D: It should be easy to make the RegExpr more strict, by prescribing ONE mandatory space and allowing only uppercase.
[1-9][0-9]{3}[ ]?(([a-rt-zA-RT-Z][a-zA-Z])|([sS][bce-rt-xBCE-RT-X]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3256
#T: Pakistan CNIC
#A: Noman Aftab
#D: This expression is used to validate CNIC numbers. The number must start with either 1,2,3 or 4 which represent the province. The hyphen is optional. But if given must be at the correct index (i.e. first one after 5 numbers and second one before the last number). The total length of numbers is 13.
^[1-4]{1}[0-9]{4}(-)?[0-9]{7}(-)?[0-9]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3257
#T: Even Zeros 
#A: Salma Hossam Mohsen
#D: A string of even zeros and any number of ones anywhere.
(01*0|1)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3258
#T: Age Validation 18 to 99
#A: Leonardo Soto
#D: Validates age range 18 - 99
^(1[89]|[2-9]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3259
#T: 10 digit valid US Phone Number
#A: Steve Holzer
#D: Will not validate numbers starting with 0 or 1.  Only validates digits.
#D: I cannot take credit for this.  I do not remember where I found it.
^[2-9]{2}[0-9]{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3260
#T: Date With Leap Year Detection
#A: Allie Syadiqin
#D: DD/MM/YYYY with leap year detection as most of the date regex are in MM/DD/YYYY format. Allows MM and DD to be 1 or 2 digits, eg. D/M/YYYY, D/MM/YYYY or DD/M/YYYY
^(((0?[1-9]|1\d|2[0-8])|(0?[13456789]|1[012])/(29|30)|(0?[13578]|1[02])/31)/(0?[1-9]|1[012])/(19|[2-9]\d)\d{2}|0?29/0?2/((19|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(([2468][048]|[3579][26])00)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3261
#T: NANP Compliant Telephone Number
#A: Bruce Springthorpe
#D: NANP (North American Numbering Plan) phone numbers do not allow 0 or 1 as first digit of area or exchange.  This includes that test in validating (999) 888-7777 formated input.
^([\(]{1}[2-9]{1}[0-9]{2}[\)]{1}[ ]{1}[2-9]{1}[0-9]{2}[\-]{1}[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3262
#T: Persian date (Jalali)
#A: Vahid Mardani
#D: Regular expression to validate Persian(Jalali) date, that supports days in month except isfand(espand) in leap years
^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3263
#T: Password must contain at least 8 characters including at least 2 numbers 
#A: praveen
#D: it will work in IE8 but its not working in IE7
(?=(?:.*?\d){2})(?=(?:.*?[A-Za-z@#$%^&+=]){2}).{8,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3264
#T: percent validator
#A: nassik
#D: validate percentage value passed as a string. Uses posix syntax only so it can be safely used in oracle 10g+ REGEX_SUBSTR and the likes...
^(-|\+)?(((100|((0|[1-9]{1,2})(\.[0-9]+)?)))|(\.[0-9]+))%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3265
#T: a
#A: hb27947
#D: aaa
^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3266
#T: string
#A: lds123
#D: This expression for validate
#D: \network list\client    this string. please comment is it right or anything wrong
^(\[a-zA-Z '\]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3267
#T: YouTube Video ID Extraction
#A: Matthew Harris
#D: This will match a youtube url and pull the video id out into a named capture group called VideoID. It is intentionally loose on the length and content of the video id so that it doesn't break in the future if YouTube change the format.
http://www\.youtube\.com.*v=(?'VideoID'[^&]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3268
#T: Validate Twitter Account Url
#A: Matthew Harris
#D: Allows http and https, bans www prefix, username portion is clamped to the rules it gives you at signup and also allows an optional trailing slash. [UPDATED] allows the #! notation that twitter used.
^http[s]?://twitter\.com/(#!/)?[a-zA-Z0-9]{1,15}[/]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3269
#T: RegularExpression which does not allow SPACE
#A: Bryian Tan
#D: Regular Expression which does not allow SPACE but allows every possible alpha-numeric and special characters.
(?=^.{1,}$)(?!.*\s)[0-9a-zA-Z!@#$%*()_+^&\[\]]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3270
#T: Facebook Pages
#A: Matthew Harris
#D: Validating a Facebook page can be a little bit tricky. This is because there are two valid formats. The first is facebook.com/pages/USERNAME/numbers/, the second is designed for big business which grants them a clean url such as facebook.com/coca-cola/.  I see this regex being used in a user profile admin page and I think it does a good enough job for this purpose. The problem is bad urls could slip through which meet the criteria for the clean facebook page url but aren't in valid pages on the site.
#D: The main example being that an incomplete numbered url could slip through as http://www.facebook.com/pages/ would validate. Facebook also uses various subdomains such as en-gb.facebook.com to provide localised versions of the site. This regex will accept a prefix of either www or a locale code of two letters dash two letters. It doesn't validate the actual country code though.
#D: [UPDATED] Added full stop to list of valid characters for page names.
http[s]?://(www|[a-zA-Z]{2}-[a-zA-Z]{2})\.facebook\.com/(pages/[a-zA-Z0-9\.-]+/[0-9]+|[a-zA-Z0-9\.-]+)[/]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3271
#T: italian phone
#A: paolo rusconi
#D: validate mobile and land phone numbers.
#D: Allow space - / or nothing number and area codes
^(([0-9]{2,4})([-\s\/]{0,1})([0-9]{4,8}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3272
#T: US SSN pattern match
#A: Jeff Pentz
#D: Finds 9 digit numbers within word boundaries, not separated or separated by - or space, not starting with 000, 666, or 900-999, not containing 00 or 0000 in the middle or at the end of SSN (in compliance with current SSN rules).
\b(?!000)(?!666)(?!9)[0-9]{3}[ -]?(?!00)[0-9]{2}[ -]?(?!0000)[0-9]{4}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3273
#T: Pull Hostname From URI / URL
#A: Matt L
#D: Pull Hostname from URI/URL
(([a-zA-Z0-9\-]*\.{1,}){1,}[a-zA-Z0-9]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3274
#T: US ZIP codes with valid prefixes
#A: Brandon Schlueter
#D: This matches all 5 digit numbers whose first three digits match valid US ZIP code prefixes.
(?!00[02-5]|099|213|269|34[358]|353|419|42[89]|51[789]|529|53[36]|552|5[67]8|5[78]9|621|6[348]2|6[46]3|659|69[4-9]|7[034]2|709|715|771|81[789]|8[3469]9|8[4568]8|8[6-9]6|8[68]7|9[02]9|987)\d{5}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3275
#T: US ZIP and ZIP+4 codes with valid prefixes
#A: Brandon Schlueter
#D: Matches all US ZIP and ZIP+4 codes with vaild prefixes.
(?!00[02-5]|099|213|269|34[358]|353|419|42[89]|51[789]|529|53[36]|552|5[67]8|5[78]9|621|6[348]2|6[46]3|659|69[4-9]|7[034]2|709|715|771|81[789]|8[3469]9|8[4568]8|8[6-9]6|8[68]7|9[02]9|987)\d{5}(-\d{4}){0,1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3276
#T: Valid Base64 string
#A: Vassilis Petroulias
#D: The expression evaluates a Base64 string as a sequence of 4-byte blocks with a possible tail of 2 or 3-byte block with valid padding.
(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3277
#T: HTML encoded characters as dec or hex values
#A: Vassilis Petroulias
#D: Find all html encoded  characters as dec &#[0-9]{1,5}; or hex &#x[0-9a-fA-F]{1,4}; values. Remember to remove "amp;" which is used for making this post possible.
&#([0-9]{1,5}|x[0-9a-fA-F]{1,4});

#U: http://regexlib.com/REDetails.aspx?regexp_id=3278
#T: US and Canada Phone numbers (all variations)
#A: Vassilis Petroulias
#D: US and Canada phones in any usual variation (area code in parenthesis, spaces or dots) including the international notation +1
((\+?1)(\ \.-)?)?\([2-9][0-9]{2}|\([2-9][0-9]{2}\))(\ \.-)?[0-9]{3}(\ \.-)?[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3279
#T: Month names (english)
#A: Vassilis Petroulias
#D: The expression matches any month name (english) in short or full style. Use it with case insensitive mode in your date matching expressions.
(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Oct(ober)?|(Nov|Dec)(ember)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3280
#T: Weekday names (english)
#A: Vassilis Petroulias
#D: The expression matches any weekday name (english) in short (2 or 3 characters) or full style. Use it with case insensitive mode in your date matching expressions.
(Mo(n(day)?)?|Tu(e(sday)?)?|We(d(nesday)?)?|Th(u(rsday)?)?|Fr(i(day)?)?|Sa(t(urday)?)?|Su(n(day)?)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3281
#T: US (5 or 9 digits) Zip Codes with grouping
#A: Vassilis Petroulias
#D: Match 5-digit or 9-digit US zip codes with grouped results. Remember to replace < with open tag char and > with close tag char
(?<group5>[0-9]{5})-?(?<group4>[0-9]{4})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3283
#T: Expression with floating point
#A: buugman
#D: Expression to search for integer and floating point numbers
^[+, -]?([0-9]+|[0-9]+\.[0-9]+|[0-9]+\.[0-9]+([e,E][+,-]?[0-9]+)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3284
#T: Deutsche Postleitzahl (german postal code)
#A: Daniel
#D: Erklärt deutsche Postleitzahlen für gültig, die zwischen dem aktuell kleinsten und größten Wert liegen: von '01001' bis '99998'.
#D: Declares german postal codes as valid, if they lie between the currently smallest and largest value: from '01001' to '99998'.
^((0(1\d\d[1-9])|([2-9]\d\d\d))|(?(?=^(^9{5}))|[1-9]\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3286
#T: Validate alpha-numeric international names (no double-spaces)
#A: Charles Forsyth
#D: Validate alpha-numeric international names with no more than one space between them
^([\u00c0-\u01ffa-zA-Z'\-]+[ ]?[\u00c0-\u01ffa-zA-Z'\-]*)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3288
#T: Basic Emoticons
#A: Tiago Ferreira
#D: Filter basic emoticons
([oO0]*)([|:;=X^])([-']*)([)(oO0\]\[DPp*>X^@])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3289
#T: Valid Email
#A: Peter Kahl
#D: Validates email addresses (except those using IP) according to list of TLD's http://data.iana.org/TLD/tlds-alpha-by-domain.txt .
^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9]+(-?[a-z0-9]+)?(\.[a-z0-9]+(-?[a-z0-9]+)?)*\.([a-z]{2}|xn\-{2}[a-z0-9]{4,18}|arpa|aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|xxx)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3290
#T: Powerful email address validator with support for multiple subdomains and IP Addresses. (RFC 5322-5321)
#A: Salvatore Fresta
#D: The following is a powerful regular expression for e-mail address's validation. It was wrote respecting the e-mail addresses' syntax reported in the RFCs and supports both hostnames with multiple sub domains and IP addresses.
^([\!#\$%&'\*\+/\=?\^`\{\|\}~a-zA-Z0-9_-]+[\.]?)+[\!#\$%&'\*\+/\=?\^`\{\|\}~a-zA-Z0-9_-]+@{1}((([0-9A-Za-z_-]+)([\.]{1}[0-9A-Za-z_-]+)*\.{1}([A-Za-z]){1,6})|(([0-9]{1,3}[\.]{1}){3}([0-9]{1,3}){1}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3291
#T: SQL Title Detector
#A: Alejandro Cons
#D: Expression to detect the name of the stored procedure / function / view, useful to detect automatically the name of the sproc the produced text in SQL
(CREATE|ALTER) +(PROCEDURE|PROC|FUNCTION|VIEW) *(\[(.*)\]|(.*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3292
#T: simple xpath
#A: jarbell
#D: /level2[@name='value]...
^/\w*(/\w+(\[@[A-Za-z]+\w*='\w+'])*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3293
#T: Allow digits but exclude certain numbers
#A: Matthew Harris
#D: Because a regular expression only deals with a single character at a time it can be a challenge to work with numbers as they often contain multiple digits. This regex allows any number except the numbers in the list. It does this by using a negative look ahead to fail the regex if it finds an excluded number.
^(?!^(5|15|18|30)$)\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3294
#T: To allow certain file type while uploading a file using FileUpload
#A: Chandan Kumar
#D: This expression will only allow the .jpg and .gif file to get uploaded.
#D: This handles the case of the file type i.e. it will accept .gif and .GIF both and so on .JPG and .jpg.
\.(?i:)(?:jpg|gif)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3295
#T: Fix broken URLs from plain text document
#A: Ryan Ward
#D: If you are searching a text document for 'full' URLs and something happened during the printing process to break the URL into a space, then this will fix your problem, it will also not latch onto another URL, or a single word containing a period or comma after it.
#D: Modified to ignore < >, which can cause HTML hell.
#D: Note: No characters are escaped
https?://[^<>() ]+([ ](((?!https?://)[^<>() ])+)(?=[^<>() ]*[?!=%&-+/])[^<>() ]*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3296
#T: To Accept Charcters only
#A: Chandan Kumar
#D: To accept only charactes only for both the cases i.e the Upper Case and the Lower Case
[a-zA-Z]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3297
#T: Alphanumeric Space
#A: Saroj Nayak
#D: Matches any alphanumeric string (with spaces in between, not in first and last place)
([0-9a-zA-Z]+)|([0-9a-zA-Z][0-9a-zA-Z\\s]+[0-9a-zA-Z]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3298
#T: 环视:匹配SQL中的字段列表
#A: yzxyang
#D: select ID,PerName,Sr1,Sr2,Kc1,Kc2 from PitTable
(?<=select).*(?]from)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3299
#T: Italian mobile prefixes
#A: Ivan Sammartino
#D: Prefixes for Italian mobiles
^3[234689][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3301
#T: Web urls
#A: Isis The Black
#D: Matches the most common urls in the web
^((https|http)://)?(www.)?(([a-zA-Z0-9\-]{2,})\.)+([a-zA-Z0-9\-]{2,4})(/[\w\.]{0,})*((\?)(([\w\%]{0,}=[\w\%]{0,}&?)|[\w]{0,})*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3302
#T: Uri net.tcp, ftp, http
#A: sarin torrealba
#D: For validate uri directions that must occur at the beginning of the string net.tcp|http|https|ftp|ftps://
^(net.tcp\://|(ht|f)tp(s?)\://)\S+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3303
#T: Vehicle Registration Number: Nigeria
#A: Adeyeye Adesupo
#D: Regular expression for vehicle registration number according to these formats:
#D: STATE PRECODENUMBER-LGA for public (commercial and private) (STATEXXX XX999- XXX), for customized: STATE ANYFORMAT (alphanumeric), and government/diplomatic (House of Assembly, Ministries, Commissions,etc) like LAGOS LA123-A03, OHA 67,..... Enjoy!
^([A-Z]{3,20}\s?[A-Z]{2}[0-9]{1,3}-([A-Z]{3}|[A-Z]{1}[0-9]{2}))|([A-Z]{1,20}\s[A-Z]{1,2}[0-9]{1,4}-[A-Z]{1,3})|([\d,\w,\s]{1,20}\s[A-Z]{3}-[0-9]{1,3})|([A-Z]{1,20}\s?[\d,\w,\s]{1,20})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3304
#T: Is A Number
#A: Robin Marsh
#D: Any number.
^[+-]?[0-9]*\.?([0-9]?)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3305
#T: Switzerland phone number
#A: Chatis
#D: Switzerland phone number expression
^+41 [0-9]{2}[ ][0-9]{3}[ ][0-9]{2}[ ][0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3306
#T: url match
#A: Erik
#D: Match base url's.
#D: it doesn't matter if it has http in front or not. www (or other subdomain) is also optional.
((mailto\:|(news|(ht|f)tp(s?))\:\/\/|)([a-z]+\.|)*[a-zA-Z0-9\-_]+([^\.*])\.[a-z]{2,4}(\.[a-z]{2,4}|))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3307
#T: Non printable ASCII
#A: Fredrik Kuhlau
#D: Matches all non-printable characters in the ASCII-table, such as Data Link Escape and Cancel
[\x00-\x1F\x7F]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3308
#T: Price
#A: Adrian Królik
#D: Checks whether the price is the correct format
^[0-9]+([\,|\.]{0,1}[0-9]{2}){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3309
#T: international phone number
#A: Chuck Sailors
#D: allows only spaces and dashes in the national number.  parantheses are allowed around the national prefix.  no us and canada numbers (+1) are allowed.  can start with 0 instead of +.  no extensions.
^([\+]|0)[(\s]{0,1}[2-9][0-9]{0,2}[\s-)]{0,2}[0-9][0-9][0-9\s-]*[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3310
#T: FTP/HTTP/HTTPS URL
#A: Graham Hudson
#D: this will find any link starting with ftp, http, https, ftp, www., subdomain, and domain.
#D: you can easily add other protocols, domain extensions and file extension.
#D: this will allow for ports to be added in after the domain and variables.
#D: possible issues, I am unsure of the allowed characters in some spots, also I am only allowing specific file types in this, but you can add whatever you want or simply \.[a-z]{2,5}, also some protocols aren't added as stated above.
#D: If there are any links that break and shouldn't or allow characters that it shouldn't or there is a way to optimize the code, I would love to know!
#D: thanks!
^(https://|http://|ftp://([^,@?^=%&:/~\+#\(\)\.\s]{1,}:[^,@?^=%&:/~\+#\(\)\.\s]{1,}@)?)?(((\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|([a-z0-9-_]{1,}\.)?[a-z0-9-_]{1,64}\.(museum|travel|[a-z]{2,4})(\.[a-z]{2,4})?))(:\d{2,5})?(((/[^`/\^\{\}|"<>\\\.]*)*)?(\.php|\.html|\.htm|\.aspx|\.asp|\.cfm|\.jsp)?(\?[^`\^\{\}|"<>\\\.]*)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3311
#T: South African Phone Number (incl. Mobile and Landline) Format
#A: Martin
#D: Tries to match the format of phone numbers within South Africa. Does not try to validate phone numbers based on actual numbers (e.g. cell networks or other landline prefixes)
(\(0\d\d\)\s\d{3}[\s-]+\d{4})|(0\d\d[\s-]+\d{3}[\s-]+\d{4})|(0\d{9})|(\+\d\d\s?[\(\s]\d\d[\)\s]\s?\d{3}[\s-]?\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3312
#T: Regular Expression to validate file path and extension
#A: Bryian Tan
#D: Regular Expression to validate file path and extension.Compatible with JavaScript and ASP.NET
^(?:[\w]\:|\\)(\\[a-z_\-\s0-9\.]+)+\.(txt|gif|pdf|doc|docx|xls|xlsx)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3313
#T: Mobile numbers in China
#A: Scott Crooks
#D: This expression is pretty simple. It validates for mobile phone numbers in mainland China. I needed phone numbers in a certain format for use with an SMS gateway. The formatting is rather strict.
#D: Area codes taken from here: http://en.wikipedia.org/wiki/Telephone_numbers_in_China#Mobile_phones
^(\+86)(13[0-9]|145|147|15[0-3,5-9]|18[0,2,5-9])(\d{8})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3314
#T: match value in comma delim string
#A: Ken Forslund
#D: use this to see if your VALUE is in a given string that is comma delimited.  Replace VALUE with your own
(\A|(.*,))VALUE(\z|([,]?.))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3315
#T: 4 Phase Emoticon Pareser
#A: MrTIggr
#D: Matches emoticons with grouped captures of:
#D: hair/eyebrows
#D: eyes
#D: nose
#D: mouth
([oO\>0]*)([|:;=X8^])([-o~^']*)([3)(oO0\]S\{\}|\/\\\[DPp*>X^@])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3316
#T: Phone Number
#A: Marex Zbikowsky
#D: US Codes
[+ ]?[( ]?\d{1,3}[ )]?\s?\d{3}[- ]?\d{3}[- ]?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3317
#T: Phone Numbers
#A: Marex Zbikowsky
#D: US Phone Numbers
[( ]?\d{1,3}[ )]?[ -]?\d{3}[ -]?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3318
#T: Phone Numbers
#A: Marex Zbikowsky
#D: Us format
[+ ]?\s?\d{1,3}[- ]?\d{1,3}[- ]?\d{4}[- ]?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3319
#T: Phone Number format
#A: Marex Zbikowsky
#D: ?
\([+]?[ ]?\d{1,3}[)][ ]?[(][+]?[ ]?\d{1,3}[)][- ]?\d{4}[- ]?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3320
#T: Number format
#A: Marex Zbikowsky
#D: ?
[+]?[ ]?\d{1,3}[ ]?\d{1,3}[- ]?\d{4}[- ]?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3321
#T: username regex
#A: Adrian Bursill
#D: allows a username of any length a-z 0-9 including one of ._- between each letter or number but not at the start or end of the name
^[^\~\`\!\@\#\$\%\^\&\*\(\)\-\_\=\+\\\|\[\]\{\}\;\:\"\'\,\<\./\>\?\s](([a-zA-Z0-9]*[-_\./]?[a-zA-Z0-9]{1,})*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3322
#T: ISO 8601 time-point
#A: Kacper Gutowski
#D: Validate and parse date/time string in ISO8601 format. Works with complete representation in both with basic and extended formats. Some of turncated representations and most of representations with reduced precision are also supported. It does not validate range of date/time fields in any way.
#D: Captured fields may be empty depending on what kind of representation is used.
#D: Year: $1 two-digit year with implicit century or $2 full 4-digit year.
#D: Calendar date: $3 month, $4 day of the month.
#D: Week date: $5 week of the year, $6 day of the week.
#D: Ordinal date: $7 day of the year.
#D: Time: $8 hours, $9 minutes, $10 seconds, $11 fractional part of last non-empty time field.
#D: Time zone: if $12 is Z then it's UTC zone, otherwise offset may be given as $13 direction (+/-), $14 hours and $15 minutes.
^(?:-([0-9]{1,2})|([0-9]{4}))?(?:-?(?:([0-9]{2})?(?:-?([0-9]{2}))?|W([0-9]{2})(?:-?([1-7]))?|([0-9]{3})))?(?:T([0-9]{2})(?::?([0-9]{2})(?::?([0-9]{2}))?)?(?:[,\.]([0-9]+))?(?:(Z)|([+-])([0-9]{2})(?::?([0-9]{2}))?)?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3323
#T: URL Pattern
#A: Miguel Tugas
#D: Matches internet web address.
^(http(s?)\:\/\/)*[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3324
#T: Non-triplicate character field
#A: Jonathan Kight
#D: This was designed to match a single name field which required a minimum length of 2 characters and no triplicate characters.
^(?i:([a-z])\1?(?!\1)){2,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3325
#T: Separated Elements
#A: jay-em
#D: An expression to verify whether a string contains elements of a specific pattern, separated by some separator. It is written in a generic form, so you can adapt it to your requirements. Of course the expression can be nested, in case you have elements that contain separated elements for their part. Some keywords for comprehension: named capture group, subroutine.
^(?P<element>Element[0-9]+)(Separator(?P>element))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3327
#T: Busy restaurants and CAFS need a solution for fast
#A: AngemLawgaima
#D: In general, pizza ovens are gas or electric styles or wood models. Coal even been used as a heat source. Wood fired oven pizza is excellent, some, but delicious pizzas can be prepared almost any style pizza oven. Try this incredible new discovery: Cone Pizza!
#D: [url=http://pizzaovensale.info/]Pizza oven sale[/url]
m{|.}i{|.}r{|.}i{|.}a{|.}m{|.}a{|.}a{|.}d{|.}a{|.}h{|.}o{|.}p@gmail.com

#U: http://regexlib.com/REDetails.aspx?regexp_id=3328
#T: Canadian Postal Code
#A: Kyle
#D: Matches Canadian style postal codes
^[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}[- ]{0,1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3329
#T: Number and comma
#A: Aparna
#D: It allow number and comma. But on start and end it does not allow comma.
\d+,?\d+\$?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3330
#T: Analytic Goal - ID Changes in every session
#A: Faisal Khan
#D: While submit an inquiry form,only page id is changed. Like the url is
contact-us\s*\?*fid*?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3332
#T: Mobile Number India
#A: Divpreet Singh
#D: First digit can be 7 or 8 or 9.
#D: No. can have any of the following prefixes
#D: 0
#D: 91
#D: 91-
#D: (91)-
#D: +91
#D: (+91)
#D: (+91)-
^(((0|((\+)?91(\-)?))|((\((\+)?91\)(\-)?)))?[7-9]\d{9})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3333
#T: Extract YouTube ID
#A: Charlie Seitz
#D: .NET 3.5 Tested. Used to extract the YouTubeID from a fully qualified YouTube URL.
#D: Dim _Regex As New Regex("(?:[Yy][Oo][Uu][Tt][Uu][Bb][Ee]\.[Cc][Oo][Mm]/watch\?v=)([\w-]{11})", RegexOptions.IgnoreCase Or RegexOptions.Compiled)
#D: Dim _RegexMatch As Match = _Regex.Match("http://www.youtube.com/watch?v=pW2GSdxxwDg")
#D: Dim _YouTubeVideoID As System.String = _RegexMatch.Groups(1).Value
(?:[Yy][Oo][Uu][Tt][Uu][Bb][Ee]\.[Cc][Oo][Mm]/watch\?v=)([\w-]{11})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3334
#T: to accept only alphanumeric with all special characters
#A: Prasanna Kumar
#D: to accept only alphanumeric with all special characters except (double/single Quotes). and if numbers then only positive numbers
^[^-]{1}?[^\"\']*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3335
#T: Find two words, any characters, then number
#A: Dan Brewerton
#D: If you have one or more words that you are searching for, random text and then a number at the end from 0 to 10, this regex should work.
(Word1|Word2).*?(10|[1-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3336
#T: get hex value from wireshark
#A: tRIEU
#D: 71 ab 00 9c 42 11 00 00 00 00 00 01 00 00 00 00   q...B...........
#D: 00 00 00 00 00 00 52 08 00 00 00 00 62 ab 71 dc   ......R.....b.q.
#D: 21 53 d5 22 60 61 be 07 25 cf f1 77 73 78 29 15   !S."`a..%..wsx).
#D: fa 44 d3 ab f8 7c b7 ee af 45 f1 0f 42 a5 fc da   .D...|...E..B...
#D: 43 50 48 78 e8 02 18 dc f6 a2 0b 2a 0b e3 8e da   CPHx.......*....
#D: bb 62 85 54 aa a9 06 d0 1f 05 11 86 26 92 97 ae   .b.T........&...
#D: 8f 57 8b 34 d1 43 ad f2 b4 d1 02 3f 90 40 e8 a5   .W.4.C.....?.@..
#D: ec f0 c8 64 c6 76 92 86 c8 3d 92 cb 0c f6 7b 0b   ...d.v...=....{.
#D: b4 02 a6 28 55 f9 fa 38 20 cb ad 08 2c e2 66 4b   ...(U..8 ...,.fK
#D: 6b db e9 5d b8 15 aa a4 82 cd e8 3c               k..].......< 
.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3337
#T: Html Hex colors in Php
#A: David Hobs
#D: Replace with:
#D: #$1$2$3
#D: This is used to find hex colors (#665533) and make them into shorthand if possible (#653)
#([1-9]){2}([1-9]){2}([1-9]){2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3338
#T: Dollar
#A: Chris King
#D: Matches a dollar amount. You can omit the dollars or the cents but not both. Captures dollars and cents separately.
^\$(?<dollar>[0-9]+)?(?(dollar)\.(?<cents>[0-9]{2})?|\.(?<cents>[0-9]{2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3339
#T: Splitting a regex pattern
#A: Marek Grochowski
#D: This expression splits a regex pattern into its component parts. Three groups emerge: "parentheses", "pattern" and "repetition". These groups can be used for an individual evaluation.
#D: Here the expression is in the details:
#D: (?:
#D: (?:
#D: (?:
#D: (?:
#D: \((?:\?(?:<[^>]*>|.))?                                                      #Parentheses start
#D: )
#D: (?<parentheses>
#D: (?>[^()]+|\((?<number>)|\)(?<-number>))*(?(number)(?!))                     #Parentheses content
#D: )
#D: (?:
#D: \)                                                                          #Parentheses end
#D: )
#D: )|
#D: (?<pattern>
#D: \[(?>(?:\\\[|\\\]|[^\[\]])+|\[(?<number>)|\](?<-number>))*(?(number)(?!))\]  #Specified sets
#D: |\\.                                                                          #Escape sequences
#D: |[^\r\n]                                                                      #Other characters without line breaks
#D: )
#D: )
#D: (?<repitition>
#D: \*|\+|\?|\{.{0,}?\}\??
#D: )?
#D: )
(?:(?:(?:(?:\((?:\?(?:<[^>]*>|.))?)(?<parentheses>(?>[^()]+|\((?<number>)|\)(?<-number>))*(?(number)(?!)))(?:\)))|(?<pattern>\[(?>(?:\\\[|\\\]|[^\[\]])+|\[(?<number>)|\](?<-number>))*(?(number)(?!))\]|\\.|[^\r\n]))(?<repitition>\*|\+|\?|\{.{0,}?\}\??)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3340
#T: email pattern basic
#A: deviant2
#D: v allow Symbol [(_) (-) (DOT)] (number) (a-z and caps), X disallow symbol&number at begining (avoid bad sorting database, including bad subdomain name (1.example.com) & fake email) and ending (before "@") & other symbols are disallowed;
#D: username min,max/maxout = 2, 25/27
#D: --- must exist "@" ---;
#D: after "@" :
#D: FOR DOMAIN NAME :
#D: v Symbol [(_) (-) (DOT)] (number) (a-z and caps), X symbol at begining and ending (including before top level domain extension)
#D: v a-z (with/out caps) total min=2 max 4 in top level domain extension
#D: NOT SUPPORTED PORT NUMBER, if you the administrator ? self edit the database, DONT give user a chance for adding port number.
#D: maximum 25 address length ;
#D: OR standard IP ADDRESS.
#D: WHITE SPACE IS NOT SUPPORTED.
(^([A-Za-z])([-_.\dA-Za-z]{1,10})([\dA-Za-z]{1}))(@)(([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})|(([\dA-Za-z{1}][-_.\dA-Za-z]{1,25})\.([A-Za-z]{2,4}))$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3343
#T: PHP - Telefone Portugal | Portugal Phone
#A: Diogo Osório
#D: I've created this regex expression to parse portuguese phone numbers from an webpage.
#D: As this was made with a very specific purpose, the expression expects the number to be preceded and followed by any character that's not a digit or a letter (basically space or "special" character).
#D: This way I can parse any page with confidence that the results will be adequate.
#D: I'd also recommend that you strip any spaces and "new line" from the haystack before matching it with this regex.
#D: Here's an example: http://paste2.org/p/1610446
(?<=[^a-zA-Z0-9])((\+351|00351|351)?)(2\d{1}|(9(3|6|2|1)))\d{7}(?=[^a-zA-Z0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3345
#T: Database schema pattern
#A: Ricardo
#D: Matches database schema-like strings (xxx.xxx.xxx). To control the allowed characters in xxx, just change \S (non white-space characters) for the desired group. Demands one initial "xxx.", any number of intermediate "xxx." groups and a final "xxx" group.
^(\S+\.{1})(\S+\.{1})*([^\s\.]+\s*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3346
#T: Mobile Number and Landline Number
#A: Praneet Rane
#D: Moblie Number which starts from 7/8/9 (Indian Mobile No.) & 11 digit Landline number
([0-9]{11}$)|(^[7-9][0-9]{9}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3347
#T: Test invalid characters - allow alpha numeric including accent characters
#A: Charles Forsyth
#D: This regex is used to test if a word contains alpha-numeric characters, including accent characters
[a-zA-Z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u01FF]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3349
#T: java.util.Date toString
#A: Chuck Barnes
#D: Validates the toString from a java.util.Date object. It is NOT formatted for java-source.
^(?:\s*(Sun|Mon|Tue|Wed|Thu|Fri|Sat)\s*)(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s+?(0?[1-9]|[1-2][0-9]|3[01])\s+(2[0-3]|[0-1][0-9]):([0-5][0-9]):(60|[0-5][0-9])\s+((?:E|C|M|P)(?:ST|DT))\s+(19[0-9]{2}|[2-9][0-9]{3}|[0-9]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3351
#T: Swedish social security number (Svenskt personnummer)
#A: Emil
#D: Matches a Swedish social security number in format xxYYMMDD-NNNN, xxYYMMDD+NNNN, YYMMDD-NNNN, YYMMDD-NNNN and YYMMDDNNN. Does not allow birth years before 1900 and after 2011.
#D: To raise the birth year to higher level of birth just change the 1[0-1] part to i.e. 1[0-4] to allow birth years up to 2014 etc.
#D: This will find the SSN within a string. Also allow for a comma(,) or period(.) behind the SSN.
\b(((20)((0[0-9])|(1[0-1])))|(([1][^0-8])?\d{2}))((0[1-9])|1[0-2])((0[1-9])|(2[0-9])|(3[01]))[-+]?\d{4}[,.]?\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3352
#T: Hexadecimal Characters
#A: Freddy
#D: Will match valid Hexadecimal characters in a string. 
^[0-9a-fA-F]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3353
#T: search string a and b
#A: yuzheng
#D: some times you want to search string include a and b,so you can search with regular expressions like this:a(.*)b
#D: ^_^
a(.*)b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3354
#T: Swedish social security number (Svenskt personnummer)
#A: Emil
#D: Matches a Swedish social security number in format CCYYMMDD-NNNN, CCYYMMDDNNNN, YYMMDD-NNNN and YYMMDDNNNN on a single line. More useful version of my earlier expression. Will only match 1900 - 2011 years.
^(((20)((0[0-9])|(1[0-1])))|(([1][^0-8])?\d{2}))((0[1-9])|1[0-2])((0[1-9])|(2[0-9])|(3[01]))[-]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3355
#T: Portable Game Notation (PGN)
#A: Siderite
#D: Parses chess games in PGN notation. It supports variation and curly brace commentaries (just make sure you have commentaries after variations if there are both). It does not support semicolon commentaries, NAGs, % comments or international notation of board pieces. As Regex is not recursive,  parsing must be done on found variations, until there are none left.
(?<pgnGame>\s*(?:\[\s*(?<tagName>\w+)\s*"(?<tagValue>[^"]*)"\s*\]\s*)+(?:(?<moveNumber>\d+)(?<moveMarker>\.|\.{3})\s*(?<moveValue>(?:[PNBRQK]?[a-h]?[1-8]?x?[a-h][1-8](?:\=[PNBRQK])?|O(-?O){1,2})[\+#]?(\s*[\!\?]+)?)(?:\s*(?<moveValue2>(?:[PNBRQK]?[a-h]?[1-8]?x?[a-h][1-8](?:\=[PNBRQK])?|O(-?O){1,2})[\+#]?(\s*[\!\?]+)?))?\s*(?:\(\s*(?<variation>(?:(?<varMoveNumber>\d+)(?<varMoveMarker>\.|\.{3})\s*(?<varMoveValue>(?:[PNBRQK]?[a-h]?[1-8]?x?[a-h][1-8](?:\=[PNBRQK])?|O(-?O){1,2})[\+#]?(\s*[\!\?]+)?)(?:\s*(?<varMoveValue2>(?:[PNBRQK]?[a-h]?[1-8]?x?[a-h][1-8](?:\=[PNBRQK])?|O(-?O){1,2})[\+#]?(\s*[\!\?]+)?))?\s*(?:\((?<varVariation>.*)\)\s*)?(?:\{(?<varComment>[^\}]*?)\}\s*)?)*)\s*\)\s*)*(?:\{(?<comment>[^\}]*?)\}\s*)?)*(?<endMarker>1\-?0|0\-?1|1/2\-?1/2|\*)?\s*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3356
#T: UK Postcodes
#A: Jeff Churchill
#D: Validates all UK Postcodes based on format given at cabinetoffice.uk.gov. Must be in uppercase before validation.
^[A-PR-UWYZ]([0-9]([A-HJKSTUW]|[0-9])?|[A-HK-Y][0-9]([ABEHMNPRVWXY]|[0-9])) [0-9][ABD-HJLNP-UW-Z]{2}|GIR 0AA$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3358
#T: UK VAT validation
#A: Rob Clayton
#D: UK VAT Validation
#D: Conforms to format outlined below:
#D: Country code GB followed by either:
#D: standard:
#D: 9 digits (block of 3, block of 4, block of 2 – e.g. GB999 9999 73)
#D: branch traders:
#D: 12 digits (as for 9 digits, followed by a block of 3 digits)
#D: government departments: the letters GD then 3 digits from 000 to 499 (e.g. GBGD001)
#D: health authorities:
#D: the letters HA then 3 digits from 500 to 999 (e.g. GBHA599)
#D: For the 9-digit scheme, the 2-digit block containing the 8th and 9th digits is always in the range 00 to 96 and is derived from a weighted modulus-97 check number (an identical algorithm is used for the 12-digit scheme, ignoring the extra 3-digit block)
^(GB)?(\ )?[0-9]\d{2}(\ )?[0-9]\d{3}(\ )?(0[0-9]|[1-8][0-9]|9[0-6])(\ )?([0-9]\d{2})?|(GB)?(\ )?GD(\ )?([0-4][0-9][0-9])|(GB)?(\ )?HA(\ )?([5-9][0-9][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3359
#T: Oracle SQL, PL/SQL numeric literal
#A: Joseph Stiehm
#D: Matches an Oracle SQL, PL/SQL numeric literal in 11g. Includes integer, reals and scientific notation. Will not match null. Will match a literal which falls outside the range 1E-130..10E125. String must be converted to upper prior to match.  Use the alternative when not upper-case
#D: [+-]?(\d+\.|\.\d+|\d+)\d*(([eE][+-]?)\d+)?
^[+-]?(\d+\.|\.\d+|\d+)\d*((E[+-]?)\d+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3360
#T: Extract Youtube Video ID
#A: Robert Rothermel
#D: This regex should recognize a Youtube video ID from any Youtube URL, embed snippet, or preview image.
(?:youtu\.be\/|youtube.com\/(?:watch\?.*\bv=|embed\/|v\/)|ytimg\.com\/vi\/)(.+?)(?:[^-a-zA-Z0-9]|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3361
#T: (Win32) FormatMessage inserts and format fields extraction
#A: Nikolay Eremin
#D: This expression matches all fields from the format string of the  FormatMessage function. This is .NET version. It is based on Format Fields Specification at http://msdn.microsoft.com/en-us/library/56e442dc.aspx. According to format specification: %1-99[![flags][width][.precision][{h|l|ll|L|I|I32|I64|w}]type!] output match groups will contain: #1 or #7 - argument index, #2 - flags, #3 - width, #4 - precision, #5 - size prefix, #6 - type. If match #7 contains argument number then insert's format string (which is optional) is not specified and defaults to !s!.
(?<!%)(?:%%)*%(?(([1-9]\d?)!([\-\+0\ \#])?(\d+|\*)?(\.\*|\.\d+)?([hLIw]|l{1,2}|I32|I64)?([cCdiouxXeEfgGaAnpsSZ])!)|(?:([1-9]\d?)(?![!\d])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3363
#T: 'C' printf/scanf format fields extraction
#A: Nikolay Eremin
#D: This expression matches all fields from the format string of the printf/scanf functions. This is .NET version. It is based on Format Fields Specification at http://msdn.microsoft.com/en-us/library/56e442dc.aspx.
#D: According to format specification: %[flags][width][.precision][{h|l|ll|L|I|I32|I64|w}]type
#D: output matche groups will contain:
#D: #1 - flags, #2 - width, #3 - precision, #4 - size prefix, #5 - type.
(?<!%)(?:%%)*%([\-\+0\ \#])?(\d+|\*)?(\.\*|\.\d+)?([hLIw]|l{1,2}|I32|I64)?([cCdiouxXeEfgGaAnpsSZ])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3364
#T: XML - finding an entity inside a processing instruction
#A: Michael J. Weed
#D: This will find an entity inside a processing instruction in an XML document when one does not know which entity might exist.  It ignores entities outside the processing instruction.
<?[0-Z =",;]*\&[0-Z =",;]*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3365
#T: XML - find all sections without an id
#A: Michael J. Weed
#D: Finds all sections without an id in XML documents
<section[^section id]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3366
#T: URL Validation
#A: Mahdi Kamel
#D: This Regex check protocol (ftp, http, https), extension should be between 2 and 4 chars example (.co.uk, .com, .us and .info), domain or subdomain name between protocol and extension should contain the following chars
#D: a-z, A-Z, 0-9, "-", and "."
#D: The rest of URL after "/" contain unicode char
(http|ftp|https)://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,4}(/\S*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3368
#T: European short hours
#A: metalsephiroth
#D: European short hours
^((([0-9]|([0-1][0-9])|(2[0-3]))[hH:][0-5][0-9])|(([0-9]|(1[0-9])|(2[0-3]))[hH]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3374
#T: Portuguese bank account number ( NIB )
#A: Nuno
#D: Matches all portuguese bank account numbers.
([\d]{4}[ |-]?){2}([\d]{11}[ |-]?)([\d]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3376
#T: Iran Mobile No
#A: vahidkh
#D: Checking Iran's mobile no with or without country code.
^(((\+{1})|(0{2}))98|(0{1}))9[1-9]{1}\d{8}\Z$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3379
#T: Empty Query String Parameters
#A: Andrew Lawton
#D: Regex to determine query string parameters without an = proceeding it.
#D: For example:
#D: http://www.test.com/?signin&this=that&one&two
(?<=[\?&])[^=&]+(?=[&]|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3380
#T: Slovak Street Names
#A: Mário Moravčík (SK)
#D: Slovak street names with numbers
^([\w\s\W]+[\w\W]?)\s([\d\-\\\/\w]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3381
#T: Comma separated Integers
#A: Colby Brown
#D: Matches all properly formatted integers of 1 or more integer with commas separating each group of 3 integers
^((\d{1,3}(,\d{3})*)|(\d{1,3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3385
#T: Egypt Mobile Last update 11 numbers
#A: Eng Mohamed Momtaz
#D: Regular Expression for Egypt Mobile Network [ Last update 11 numbers ]
^01[0-2]{1}[0-9]{8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3387
#T: PAN Nubmer Validation
#A: Narayaneswar
#D: Valid Pan card
#F: ;
^[A-Z]{3}[G|A|F|C|T|H|P]{1}[A-Z]{1}\d{4}[A-Z]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3388
#T: Skype Name
#A: Aaron Daisley-Harrison
#D: Validate a Skype name based on the Skype faq: https://support.skype.com/en-us/faq/FA94/What-is-a-Skype-Name
[a-zA-Z][a-zA-Z0-9_\-\,\.]{5,31}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3390
#T: Phone number parser
#A: Bill Ingram
#D: Parses most phone numbers into four groups: country code, area code, number, and extension. 
^(?:[\+]?[\(]?([\d]{1,3})[\s\-\.\)]+)?(?:[\(]?([\d]{1,3})[\s\-\/\)]+)([2-9][0-9\s\-\.]{6,}[0-9])(?:[\s\D]+([\d]{1,5}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3392
#T: USA ZIP postcode
#A: Szymon
#D: Matches:
#D: five digits hypen four digits
#D: or just five digits
#D: anywhere within string.
#D: C#
#D: string reg_usa_postcode = @"(\d{5}-\d{4}|\d{5})";
(\d{5}-\d{4}|\d{5})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3394
#T: Strip Markup Tags
#A: Burke
#D: This regex will match all text inside angle brackets and HTML comments.
(<(!--.*|script)(.|\n[^<])*(--|script)>)|(<|<)(/?[\w!?]+)\s?[^<]*(>|>)|(\&[\w]+\;)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3400
#T: South African Mobile Number Match
#A: Saumil Patel
#D: Regular expression to match South African Mobile network ( Range allocated to SPs until Dec'2011 ). 
^(\+27|27)?(\()?0?([7][1-9]|[8][2-4])(\))?( |-|\.|_)?(\d{3})( |-|\.|_)?(\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3401
#T: File Path
#A: Ben C
#D: Matches full windows paths and UNC paths (allowing spaces in quoted text).
#D: For non quoted text, the extension of the file must  be alphanumeric.
("(([a-zA-Z]:)|(\\\\[^/\\:\*\?""<>\|]+(\\[a-zA-Z]\$)?))\\([^/\\:\*\?""<>\|]+\\)*[^/\\:\*\?""<>\|]+(\.[^/\\:\*\?""<>\|]+[^/\\:\*\?""<>\|\s])?")|((([a-zA-Z]:)|(\\\\[^/\\:\*\?""<>\|\s]+(\\[a-zA-Z]\$)?))\\([^/\\:\*\?""<>\|\s]+\\)*[^/\\:\*\?""<>\|\s]+(\.[a-zA-Z0-9]+)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3402
#T: Accept names with accent
#A: Jorge
#D: Simple expresion to accept names for people with accent
^[a-zA-Záéíóú]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3403
#T: Accept names with accent
#A: Jorge
#D: Simple expresion to accept names for people with accent
^[a-zA-Záéíóú]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3404
#T: Accept a url
#A: Jorge
#D: accept pages that start with www, http or https and ends with a word between 2 and 4 letters
^(www\.|http:\/\/|https:\/\/|http:\/\/www\.|https:\/\/www\.)[a-z0-9]+\.[a-z]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3405
#T: Accept a url
#A: Jorge
#D: accept pages that start with www, http or https and ends with a word between 2 and 4 letters
^(www\.|http:\/\/|https:\/\/|http:\/\/www\.|https:\/\/www\.)[a-z0-9]+\.[a-z]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3406
#T: Accept a url
#A: Jorge
#D: accept pages that start with www, http or https and ends with a word between 2 and 4 letters
^(www\.|http:\/\/|https:\/\/|http:\/\/www\.|https:\/\/www\.)[a-z0-9]+\.[a-z]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3407
#T: Google Analytics Account Id
#A: Matthew Harris
#D: This is an intentionally loose implementation. The number in the middle (account num) is constantly increasing as new accounts are made. The number on the end represents the profile number which shouldn't go over 50 but I haven't locked this down so that both elements are future proofed.
^UA-\d+-\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3408
#T: Phone Number Match
#A: Shankar(sh4nx0r)
#D: The above regex matches any phone number of the format (XXX-XXX-XXXX). (With or without hyphens)
\d{3})[- .]?(\d{3}[- .]?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3409
#T: First Line Grabber
#A: Shankar(sh4nx0r)
#D: The above expression pulls the first line of any large text or sentence.
#D: Eg.
#D: The car is speeding at 190mph.<br or \n or nextline>
#D: The car got crashed.
^(.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3410
#T: End String Matcher
#A: Shankar(sh4nx0r)
#D: Matches a string and grabs all data till the end of the string/text/sentence.
#D: Eg.
#D: I wonder why all programming languages start with a hello world program !!
start\s*([^$]*)\s*(.*?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3411
#T: Specific End String Matcher
#A: Shankar(sh4nx0r)
#D: Matches and returns the text provided the match string and the end string. Eg. I wonder why all programming languages start with a hello world program !!
wonder\s*([^$]*)\s*with

#U: http://regexlib.com/REDetails.aspx?regexp_id=3412
#T: Password Validator
#A: Saravana
#D: Password validation with any two of combinations: [A-Z],[a-z],Punctuation Symbols with minimum user requirement without digits.If digit is added , it wont validate.As per requirement add '.{n,m}' without quotes before the $ sign in the expression.
^((\D*[a-z]\D*[A-Z]\D*)|(\D*[A-Z]\D*[a-z]\D*)|(\D*\W\D*[a-z])|(\D*\W\D*[A-Z])|(\D*[a-z]\D*\W)|(\D*[A-Z]\D*\W))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3413
#T: HTML Tag Attribute
#A: Matesz Charytoniuk
#D: Matches valid html tag attribute name (without value).
[a-zA-Z_:][a-zA-Z0-9_,\.\-]*?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3415
#T: Date consisiting of Month Day
#A: Aaron Barrett
#D: Returns the date in a Month day(numeral) format
(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber) (1[0-9]|2[0-9]|3[0-9]|[1-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3416
#T: Month Year Match
#A: Shankar(sh4nx0r)
#D: Matches month and year in the specified format.
((?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Sept|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?))(\s+)[0-9]{2,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3418
#T: Percentage (optional decimals (max 2)) (optional %)
#A: Marcel
#D: Matches a percentage with  or without a '%' at the end.
#D: Optional decimals but no more than 2.
^[-+]?[0-9]\d{0,2}(\.\d{1,2})?%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3419
#T: Positive percentage
#A: Marcel
#D: Matches positive percentage strings with '+' as an optional prefix and '%' as an optional postfix.
^[+]?100(\.0{1,2})?%?$|^[+]?\d{1,2}(\.\d{1,2})?%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3421
#T: Decimal (with optional + or - before number) with 4 digits allowed after decimal after
#A: premanshu
#D: The expression allows to check a number with an optional + or - before it. It allows upto  4 digits after the decimal. 
^(\+|-)?\d+((\.)\d{1,4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3422
#T: Windows NT - Operating System String
#A: Robert McGinley
#D: Matches the "Official" and several other popular expressions of the "Windows NT" line of operating systems. Used to discern one OS version from another. Must include at least one digit of the version number (1 to 4 or  1.0 to 4.9 will match).
#D: Only one capture group will return the full, matching string.
((?:Microsoft)?.?(?:(?:Windows.NT.(?:[1-4].[0-9]))|(?:Win(?:dows)?.?NT).?[1-4](?:.?[0-9])?|NT[1-4]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3423
#T: Full Name
#A: Danilo Guedes Araujo
#D: simple Name or Full Name pattern.
[a-zA-Z]*( [a-zA-Z]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3424
#T: Checking IP RAnge
#A: anu
#D: can test ip ranges as specified
#D: 71.195.91.25-71.95.91.245,71.195.91.25-71.95.91.245,71.195.95.193-71.195.95.240,71.195.1.99-15.195.1.195
^((\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b\-\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b)+,)*((\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b\-\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3425
#T: Command line parsing for command and parameter
#A: J H
#D: This will parse a command line for the command and parameter
(?<cmd>^"[^"]*"|\S*) *(?<prm>.*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3426
#T: Latin chars and letter
#A: José Luís de Oliveira Santos
#D: Esta expressão permite a entrada de nomes compostos com quaisquer letras (incluindo acentos), espaços, alguns símbolos gráfcos, com comprimento entre 1 e 40 posições, mas bloqueia números.
#D: Útil para validação prévia de denominações em geral, como nomes de ruas, bairros, produtos etc.
^([a-zA-ZáéíóúàèìòùãõâêîôûüïçÁÉÍÓÚÀÈÌÒÙÂÊÎÔÛÃÕÜÏÇ£¢$#,.ºª°\s/-[0-9]]){1,40}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3427
#T: sql decimal sql
#A: Vincent Pilote
#D: Currently decimal(9,2)
#D: Just replace 7 and 2 in the formula
\d{0,7}([\.|\,]\d{0,2})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3428
#T: tailling zero(0)
#A: Vincent Pilote
#D: remove the tailling zero (0)
#D: awfully cannot resolve the .00000 problem
\d+([\.|\,][0]+?[1-9]+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3429
#T: Feet and Inches
#A: Byron Hartzler
#D: Feet and Inches. Only allows 1 to 11". Feet can be 0 to higher. No fractions.
^[0-9,]+['][-](\d|1[01])"$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3430
#T: All Capital Letters No Numbers
#A: Byron Hartzler
#D: 1 or 2 words with 1 or no space. Words are in all capital letters. Nothing in front or end of word(s).
^([A-Z]+\s*[A-Z]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3431
#T: Container No Expression
#A: Md Dilshad Ali Ansari
#D: This Expression that accept combination of Alphanumeric.
#D: Eg:ABCD1234567
^[a-zA-Z]{4}\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3432
#T: Pete's Wicked ArcCatalog FeatureClass Path Validator
#A: Peter Butteri
#D: Matches most valid ArcCatalog FeatureClass catalog paths.  Rejects most invalid paths.  Accepts mapped drive letters and UNC network paths.  UNC Server names must begin with a letter and may only include letters and numbers.  Will not accept directories that include ".gdb", ".mdb", ".sde", or ".mdf" in their name.  Otherwise accepts mid-string spaces and "."s (dots) in directory names.  Will not accept special characters in FeatureDataset or BaseName.  Will not accept FeatureDatasets or BaseNames that begin with a number.  Limits total path length to 160 characters.  Accepts file, personal, sde, and SQL GDBs, as well as shapefiles.  Shapefiles have the ".shp" extension and cannot appear in geodatabases.  Accepts GDB Feature Datasets.  Identifies <Workspace>, <Root>, <Drive>, <Server>, <DirectoryTree>, <Directory>, <Geodatabase>, <GDBName>, <Extension>, <FeatureDataset>, and <BaseName> as sub-strings. 
(?=^.{1,160}$)^(?:(?<Workspace>(?<Root>(?:(?<Drive>[a-zA-Z]\:)|(?<Server>\\{2}[a-zA-Z]\w*)))(?<DirectoryTree>(?:\\(?<Directory>(?:(?![\w\.]*\.(?:gdb|mdb|sde|mdf))[^\\/:*?<>"| .]+[^\\/:*?<>"|]*[^\\/:*?<>"| .]+)))*)(?:\\(?<Geodatabase>(?<GDBName>[a-zA-Z]\w*)(?<Extension>\.(?:gdb|mdb|sde|mdf))))?)\\?(?<FeatureDataset>[a-zA-Z]\w*)?(?:\\(?<BaseName>[a-zA-Z]\w*(?:\.shp)?)(?<!.+\k<Extension>.+\.shp|(?<!.+\k<Extension>.+)(?<!.+\.shp))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3433
#T: Generic Credentials
#A: Iphone511
#D: Matches all packets that have the string username and password
username=(.*)&password=(.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3434
#T: email
#A: Iphone511
#D: Regex to grab emil address's
\b[A-z0-9._%-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3435
#T: NMEA Sentence
#A: perlpunk
#D: Matches standard NMEA sentences
\$?GP[a-z]{3,},([a-z0-9\.]*,)+([a-z0-9]{1,2}\*[a-z0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3437
#T: Arabic Word only or Null String  
#A: mhmoud kotb
#D: Arabic Word only or Null String  
^[\u0600-\u06ff\s]+$|[\u0750-\u077f\s]+$|[\ufb50-\ufc3f\s]+$|[\ufe70-\ufefc\s]+$|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3438
#T: Number Begin Specfic Number and Lenght 8 or Null
#A: mhmoud kotb
#D: Number Begin Specfic Number 5 or 6 and Lenght 8 or Null string
^[5,6]\d{7}|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3439
#T: Generic Phone Validator
#A: Deepak Badiger
#D: it will validate phone number formats like -
#D: 1. (91)123-456-7890
#D: 2. +91-123-456-7890
#D: 3. 911234567890
#D: 4. 1234567890
#D: 5. (91)123/456/7890
#D: 6. +91/123/456/7890
#D: 7. (91)123.456.7890
#D: 8. +91.123.456.7890
#D: There is no limitation on the repeating pattern
([+(]?\d{0,2}[)]?)([-/.\s]?\d+)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3440
#T: Valid mobile number match
#A: Prakash Kumar
#D: it will help u to match valid mobile number with std (including zero) and local(excluding zero).including zero it will accept 11 digit and without zero it will accept 10 digit.
([0-0]{1}[1-9]{1}[0-9]{9})|[1-9]{1}[0-9]{9}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3441
#T: valid phone number
#A: Prakash Kumar
#D: it will help u to validate the telephone number with std code. 
[0-0]{1}[1-9]{1}[0-9]{1,3}[1-9]{1}[0-9]{5,7}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3442
#T: BIC / SWIFT code with country codes
#A: hamsafar
#D: Validates 8 or 10 character Bank Idenifier Code (BIC) / SWIFT. Also validates 2-letter country ISO code (5th and 6th characters).
^([a-zA-Z]){4}(AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MC|MN|ME|MS|MA|MZ|MM|MA|NR|NP|NL|AN|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|SH|KN|LC|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SK|SI|SB|SO|ZA|GS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW)([0-9a-zA-Z]){2}([0-9a-zA-Z]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3443
#T: Month names
#A: hamsafar
#D: Validates name of months January, Febuary, ..., December. Also accepts short hand forms jan, feb,..., dec. 
^(Jan(uary)?|Feb(ruary)?|Mar(ch)?|Apr(il)?|May|Jun(e)?|Jul(y)?|Aug(ust)?|Sep(tember)?|Sept|Oct(ober)?|Nov(ember)?|Dec(ember)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3444
#T: Optional Querystring
#A: Matthew Harris
#D: Add this on to the end of your url rewriting regex to allow an optional querystring to be appended to whatever you are matching. Useful for example when you set up a Google PPC campaign and all of your urls break. Note: doesn't handle #fragments.
(?:\?=.*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3445
#T: Match Default Document + Optional Querystring
#A: Matthew Harris
#D: Designed for asp.net default document matching. It allows either a plain url (~/) or a default document url (~/default.aspx) both with an optional querystring. Cassini and IIS7 handle default document matching differently. The user could type it either way. The breadcrumb / sitemap system is funny about omitting default.aspx. Note: Doesn't handle #fragements
^~/(?:default\.aspx)?(?:\?=.*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3446
#T: MySQL Date
#A: Ilia Goranov
#D: Checks for a MySQL valid date  formated as Y-M-D. January, March, May, July, August, Octobe and December are valid with max of 31 days, February is valid with max of 29 days, April, June, September and November are valis with max of 30 days. Valid for years from 1900 to 2099.
^(19|20)[0-9]{2}-((01|03|05|07|08|10|12)-(0[1-9]|[12][0-9]|3[01]))|(02-(0[1-9]|[12][0-9]))|((04|06|09|11)-(0[1-9]|[12][0-9]|30))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3447
#T: NHS Hospital Number (D Number)
#A: max b
#D: I needed to ensure that a valid hospital number is entered into one of my systems.  They must be prefixed with D,J,F (upper case) and a number (5 to 8 digits in length). 
[DJF]{1}[0-9]{5,8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3448
#T: domain with 2 sub domains
#A: Jason
#D: This expression will match city.state.domain.com
#D: Into 4 capture groups.
^([^\.]+).([^\.]+).([^\.]+).([^\.]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3449
#T: URL Validator
#A: Damien Dates
#D: Broad URL Validator
^(?:http|https):\/\/[\w.\-]+(?:\.[\w\-]+)+[\w\-.,@?^=%&:;/~\\+#]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3450
#T: Regex
#A: ranjit mane
#D: Please guid me to have perfect refex which will return a string which contains +,- and that string should start with 0
[+-](^0.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3451
#T: Divisibility by 3
#A: Hans-Peter Störr
#D: Matches decimal numbers that are divisible by 3. :-)
((?=[^147]*([147][^147]*[147][^147]*[147][^147]*)*$)[^258]*([258][^258]*[258][^258]*[258][^258]*)*)|((?=[^147]*([147][^147]*[147][^147]*[147][^147]*)*[147][^147]*$)[^258]*([258][^258]*[258][^258]*[258][^258]*)*[258][^258]*)|((?=[^147]*([147][^147]*[147][^147]*[147][^147]*)*[147][^147]*[147][^147]*$)[^258]*([258][^258]*[258][^258]*[258][^258]*)*[258][^258]*[258][^258]*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3452
#T: Range validator
#A: Carlos Perez
#D: This Expression validates alfanumeric values. This was created to validate a range of values that could start with ?.
#D: It is case sensitive, this means the characters need to be uppercase.
^([A-Z0-9?.+-])+([,]([A-Z0-9?.+-])+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3453
#T: U,S. Phone Number Parser for .NET (with named groups)
#A: Anthony Gatlin
#D: This regular expression parses virtually any variety of U.S. phone numbers--with or without an extension. If you want a version without the named groups, you can use: (\+1|1)?[ \-\.]?\(?[0-9]{3}\)?[ \-\.]?[0-9]{3}[ \-\.]?[0-9]{4}[ \.]*(ext|x)?[ \.]*[0-9]{0,5} 
(\+1|1)?[ \-\.]?\(?(?<areacode>[0-9]{3})\)?[ \-\.]?(?<prefix>[0-9]{3})[ \-\.]?(?<number>[0-9]{4})[ \.]*(ext|x)?[ \.]*(?<extension>[0-9]{0,5})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3454
#T: Regular Expression to Extract Standard Domain Name
#A: Anthony Gatlin
#D: This regular expression is designed just to extract the domain name from a URL. A domain name may neither start with nor end with a dash. I didn't take the time to add in this check and am actually not sure that it could be easily done. Try it for yourself to understand why.
(http[s]?://)?([A-Za-z0-9-]\.)*(?<domainName>([A-Za-z0-9-]+\.)[A-Za-z]{2,3})/?.$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3455
#T: RFC (REGISTRO FEDERAL DE CONTRIBUYENTES) FULL
#A: Juan Luis Ortiz de la Huerta
#D: Regular Expression que permite la validación del RFC usado en México, permitiendo los años bisiestos
^(([ÑA-Z|ña-z|&]{3}|[A-Z|a-z]{4})\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)(\w{2})([A|a|0-9]{1}))$|^(([ÑA-Z|ña-z|&]{3}|[A-Z|a-z]{4})([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3456
#T: Valid directory only path
#A: Craig Prescott
#D: This regex will validate whether the value is a valid directory path. 
([A-Z]:\\[^/:\*;\/\:\?<>\|]+)|(\\{2}[^/:\*;\/\:\?<>\|]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3457
#T: Cool URL checker
#A: Vasya
#D: URL checker with domain name check enable. Accept full and not full URLs.
(^(http|ftp|https)(?i):\/\/)?[?-??-?a-zA-Z0-9\-\.]+\.(AC|AD|AE|AERO|AF|AG|AI|AL|AM|AN|AO|AQ|AR|ARPA|AS|ASIA|AT|AU|AW|AX|AZ|BA|BB|BD|BE|BF|BG|BH|BI|BIZ|BJ|BL|BM|BN|BO|BQ|BR|BS|BT|BV|BW|BY|BZ|CA|CAT|CC|CD|CF|CG|CH|CI|CK|CL|CM|CN|CO|COM|COOP|CR|CU|CV|CW|CX|CY|CZ|DE|DJ|DK|DM|DO|DZ|EC|EDU|EE|EG|EH|ER|ES|ET|EU|FI|FJ|FK|FM|FO|FR|GA|GB|GD|GE|GF|GG|GH|GI|GL|GM|GN|GOV|GP|GQ|GR|GS|GT|GU|GW|GY|HK|HM|HN|HR|HT|HU|ID|IE|IL|IM|IN|INFO|INT|IO|IQ|IR|IS|IT|JE|JM|JO|JOBS|JP|KE|KG|KH|KI|KM|KN|KP|KR|KW|KY|KZ|LA|LB|LC|LI|LK|LR|LS|LT|LU|LV|LY|MA|MC|MD|ME|MF|MG|MH|MIL|MK|ML|MM|MN|MO|MOBI|MP|MQ|MR|MS|MT|MU|MUSEUM|MV|MW|MX|MY|MZ|NA|NAME|NC|NE|NET|NF|NG|NI|NL|NO|NP|NR|NU|NZ|OM|ORG|PA|PE|PF|PG|PH|PK|PL|PM|PN|PR|PRO|PS|PT|PW|PY|QA|RE|RO|RS|RU|RW|SA|SB|SC|SD|SE|SG|SH|SI|SJ|SK|SL|SM|SN|SO|SR|SS|ST|SU|SV|SX|SY|SZ|TC|TD|TEL|TF|TG|TH|TJ|TK|TL|TM|TN|TO|TP|TR|TRAVEL|TT|TV|TW|TZ|UA|UG|UK|UM|US|UY|UZ|VA|VC|VE|VG|VI|VN|VU|WF|WS|??|???????|??|????|?????|?????????|???|???|???|???????????|????|??|??|?????|????|??|????|????|???????|???????|???|??|??????|??????|??|??|???????|????|?????|??????|???????|??????|?????|??????|????????|??????|??|???|?????|??|????|????|???|???|??????|???????|???|??????|???|XXX|YE|YT|ZA|ZM|ZW)(?i)(/\S*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3458
#T: Czech domestic bank acount number
#A: Stanislav Spiridonov
#D: Czech domestic bank acount number.
^(?:(\\d{1,6})-)?(\\d{2,10})/(\\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3459
#T: Password Validation
#A: nathanael
#D: It allows three of the four conditions.
#D: a. Upper Case
#D: b. Lower Case
#D: c. Numeric
#D: d. Special Character
#D: It allows 8-26 characters and doesn't allow space.
(?=^.{8,26}$)(?!.*\s)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3462
#T: Check date for format DD-MM-YYYY
#A: Yalchin Tagizade
#D: Date pattern for date format
#D: DD-MM-YYYY or
#D: DD/MM/YYYY or
#D: DD.MM.YYYY.
#D: Year value limited from 1900-2299
^((((0[1-9]|[1-2][0-9]|3[0-1])[./-](0[13578]|10|12))|((0[1-9]|[1-2][0-9])[./-](02))|(((0[1-9])|([1-2][0-9])|(30))[./-](0[469]|11)))[./-]((19\d{2})|(2[012]\d{2})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3463
#T: e-mail match
#A: Emil
#D: Matches most theoretical e-mail patterns including Swedish letters and custom top domains.
#D: Relies on minimum and maximum allowed length of different parts of the e-mail.
#D: NOTE: Needs to have "case insensitive flag".
^(?=.*\S)[-!#$%&\'*+\/=?^_`{|}~,.a-z0-9]{1,64}[@]{1}[-.a-zåäö0-9]{4,253}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3464
#T: Simple password match
#A: Emil
#D: Check if a string contains at least 6 characters. Can not end or start with whitespace but can contain any other. PCRE optimized with none-capturing parentheses.
^\S{1}(?:.){4,}\S$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3465
#T: Binary Validator
#A: remaxer
#D: A stupid REGEXP that validate a binary number on more rows.
^(0|1)+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3466
#T: Date Validator
#A: remaxer
#D: My first date validator.
^((0?[1-9])|(([1|2]\d)|(3[0|1])))(/|-)((0?[1-9])|(1[0|1|2]))(/|-)(((19|20)\d\d)|(\d\d))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3467
#T: Regex Pattern to replace any special character in a string by any specified character or sting in C#.NET
#A: Chandan Kumar
#D: This Regular Expression Pattern can be used to replace any special character in a string by any other specific character or string.
#D: --------------------
#D: Code Example:(in C#)
#D: --------------------
#D: string SourceString = TextBox1.Text;
#D: string rgPattern = "['`~!@#&$%^&*()-_=+{}|?><,.:;{}\"\\/\\[\\]]";
#D: Regex objRegEx = new Regex(rgPattern);
['`~!@#&$%^&*()-_=+{}|?><,.:;{}\"\\/\\[\\]]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3468
#T: Czech cellphone numbers
#A: Karel Saroch
#D: Regexp for czech cellphone numbers
^(\+?420)? ?[0-9]{3} ?[0-9]{3} ?[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3469
#T: URI
#A: Vara Prasad
#D: Validates URIs
(((ht|f)tp(s?):\/\/)|(([\w]{1,})\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;""'<>\n\r\t]+)([^\. \[\]\(\),;""'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3471
#T: Rotary Member Birthday 
#A: Ross Hanahan
#D: Based on 7750 Birthday Report.
(\w+),[^(]+\((\w+)\)\s+(\d+)\s+(\w+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3472
#T: Partner Birthday
#A: Ross Hanahan
#D: 7750 Birthday & Anniversary report
(\w+),\s+(\w+)\s+ (\((\w+)\)\s+)? (\w+),\s+(\w+)[^\d]+ (\d+)\s+(\w+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3473
#T: Club Anniversarys
#A: Ross Hanahan
#D: 7750 Birthday & Anniversary report
(\w+),[^(]+\((\w+)\)\s+(\d+)\s+(\w+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3474
#T: Wedding Anniversary
#A: Ross Hanahan
#D: 7750 Birthday & Anniversayr Report
(\w+),[^(]+\((\w+)\)\s+(\w+)\s+(\d+)/(\d+)\s+(\d+)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3477
#T: Phones - Portugal
#A: Pedro Fernandes
#D: A regex for phone numbers in Portugal. For the three major operators (TMN, Optimus, Vodafone) and landline number. 1 number (2/9) + 1 number (1-9) + 7 others (0-9).
^(9|2{1})+([1-9]{1})+([0-9]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3478
#T: Medicare HICN RRB
#A: matt m
#D: This will match Medicare Rail Road Board numbers.
^[A-Z]{1,3}\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3479
#T: Full Date
#A: Maverick
#D: Matches full textual date formats. Case insensitive, optional commas, short and long weekdays and months, optional weekdays, optional leading zeros in date.
(?i)((sun(day)?|mon(day)?|tue(sday)?|wed(nesday)?|thu(rsday)?|fri(day)?|sat(urday)?),?\s)?((jan(uary)?|feb(ruary)?|mar(ch)?|apr(il)?|may|jun(e)?|jul(y)?|aug(ust)?|sep(tember)?|oct(ober)?|nov(ember)?|dec(ember)?)\s)+((0?[1-9]|[1-2][0-9]|3[0-1]),?\s)+([1-2][0-9][0-9][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3485
#T: url
#A: Matthew
#D: match url's
(\b|^|\A|\<)((((https?\:\/\/)?www\.)|(https?\:\/\/(www\.)?))([\w\d-~_]+\.)+([\w\d]+))(\/[\w\d-_~]+(\.[\w\d-_~]+)*)*(\b|$|\Z|\>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3486
#T: Remove Markup Tag
#A: Sandeep Kumar
#D: This regex will remove all markup tag except <p></p> and line break tag.
<[^/bp][^><]*>|<p[a-z][^><]*>|<b[^r][^><]*>|<br[a-z][^><]*>|</[^bp]+>|</p[a-z]+>|</b[^r]+>|</br[a-z]+>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3487
#T: Array<Integer>
#A: Jeff Tian
#D: Checks if the target string is an array consisted of integer numbers or not. An integer array string means that a series of integer numbers that separated by comma (,)
^(?:\d+,\s*)*\d+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3488
#T: Base Mobile Phone #01
#A: Mário Moravčík (SK)
#D: Split phone nuber for prefix and number
(?<prefix>[\d]{3})[\s+\/\\\-]+(?<number>[\d\-\s]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3489
#T: Decimal with comma or dot
#A: Mathieu Duperche
#D: Decimal with comma or dot
^\d+((\.|\,)\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3490
#T: Positive Numbers
#A: Byron Hartzler
#D: Matches all Positive Numbers not including zero (0). Does not allow decimals.
^[1-9]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3491
#T: CURP (Clave Unica de Registro Poblacional) FULL
#A: Juan Luis Ortiz de la Huerta
#D: Validación de la Clave Única de Registro Poblacional (CURP) permitiendo años bisiestos
^([A-Z|a-z]{4}\d{2}(((0[13578]|1[02])31)|((0[1,3-9]|1[0-2])(29|30)))[H|M](AS|BC|BS|CC|CL|CM|CS|CH|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B,C,D,F,G,H,J,K,L,M,N,Ñ,P,Q,R,S,T,V,W,X,Y,Z]{3}[0-9,A-Z][0-9])$|^([A-Z|a-z]{4}\d{2}((0[1-9]|1[0-2])(0[1-9]|1\d|2[0-8]))[H|M](AS|BC|BS|CC|CL|CM|CS|CH|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B,C,D,F,G,H,J,K,L,M,N,Ñ,P,Q,R,S,T,V,W,X,Y,Z]{3}[0-9][0-9])$|^([A-Z|a-z]{4}(0[48]|[2468][048]|[13579][26])(0229)[H|M](AS|BC|BS|CC|CL|CM|CS|CH|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B,C,D,F,G,H,J,K,L,M,N,Ñ,P,Q,R,S,T,V,W,X,Y,Z]{3}[0-9,A-Z][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3493
#T: Serial Numbers
#A: Carlos Perez
#D: This expresion validates ranges of serial numbers
^([A-Z0-9?.+-])+([,]([A-Z0-9?.+-])+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3494
#T: FQDN for DNS configuration tool
#A: Andreas Burger
#D: This regex matches FQDNs plus domains starting with an or containing asterisk. This is usefull for DNS configuration tools where you might have domains like *.domain.de or 12.152.80.in-addr.arpa.
^(?=^.{1,254}$)(^(?:(?!\.|-)([a-z0-9\-\*]{1,63}|([a-z0-9\-]{1,62}[a-z0-9]))\.)+(?:[a-z]{2,})$)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3495
#T: Türkçe Alfabetik Karakterler // Turkish Chars
#A: Leo LemogrA
#D: Sadece alfebetik karakterler ve TÜRKÇE karakterleri DE destekleyen en az 2 karakter gerektiren bosluk kullanilabilen yapi.
^([a-zZ-A\s,s,ç,ö,o,i,i,g,ü,S,Ç,Ö,I,Ü]{2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3496
#T: Non-negative even number
#A: Martin Thoma
#D: All even numbers end with either 0, 2, 4, 6 or 8. They can begin with anything.
^[0-9]*[02468]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3497
#T: ISBN-10 and ISBN-13
#A: Muhammad
#D: To find ISBN-10 or ISBN-13 text
ISBN(-1(?:(0)|3))?:?\x20(\s)*[0-9]+[- ][0-9]+[- ][0-9]+[- ][0-9]*[- ]*[xX0-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3498
#T: Los Angeles County, CA Zips
#A: Michael Sabal
#D: Finds all the zips in Los Angeles County.  This regex is useful in Ubercart if you have a business presence in L.A. County but not elsewhere in CA.
#D: List of ZIPS is from http://www.laalmanac.com/communications/cm02_communities.htm
^(900[0-9][0-9]|902[0-9][0-9]|9030[1-5]|9040[1-5]|9050[1-6]|9060[1-6]|90608|90631|90638|90639|90640|90650|90660|90670|90680|9070[1-4]|90706|90710|90712|90713|90715|90716|90717|90723|9073[1-3]|9074[4-6]|90747|90755|9080[2-8]|90810|9081[3-5]|90822|9083[1-2]|90840|90846|910[0-4][0-9]|91101|9110[3-8]|9112[5-6]|9120[1-8]|91214|913[0-6][0-9]|91372|91381|91384|9140[1-3|5-6]|91411|91423|91436|9150[1-2|4|6]|91510|91523|9160[1-2|4-8]|91702|91706|91711|9172[2-4]|9173[1-3]|9174[0-1|4-6|8]|9175[0|4-6]|9176[5-8]|9177[0|3|5-6]|9178[0-1|3]|91789|92621|93510|93523|9353[2|4-6]|93543|93544|9355[0-3]|93563|93591)(-[0-9]{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3499
#T: swiss phone number 
#A: Manuela Grob
#D: This regex matchs nearly all forms off swiss phone numbers, not only the official form.
^(((((\+)?(\s)?(\d{2,4}))(\s)?((\(0\))?)(\s)?|0)(\s|\-)?)(\s|\d{2})(\s|\-)?)?(\d{3})(\s|\-)?(\d{2})(\s|\-)?(\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3500
#T: dd.MM.yyyy
#A: Kristiyan Nikolov
#D: One or two digits for day and month. Four digits for year.
#D: Doesn't check for leap years or months day count.
(0?[1-9]|[12][0-9]|3[01])[.](0?[1-9]|1[012])[.]\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3502
#T: Positive unsigned number with a decimal
#A: JLN SK8
#D: This RegEx allow every positive number except 0 with a limit of 1 decimal.
#D: You can use coma or dot.
^([1-9]+[0-9]*|\d*[.,]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3503
#T: Mark Down
#A: Christopher Brandt
#D: Finds all *bolded* _underlined_ or *_bolded and underlined_* bits of text in a string.
(?:(?:(?<=[\s^,(])\*(?=\S)(?!_)(?<bold>.+?)(?<!_)(?<=\S)\*(?=[\s$,.?!]))|(?:(?<=[\s^,(])_(?=\S)(?!\*)(?<underline>.+?)(?<!\*)(?<=\S)_(?=[\s$,.?!]))|(?:(?<=[\s^,(])(?:\*_|_\*)(?=\S)(?<boldunderline>.+?)(?<=\S)(?:\*_|_\*)(?=[\s$,.?!])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3504
#T: Money format XXX.XX
#A: Mason Thornberg
#D: This will check that the string is made of up numbers in a D.XX with at least on number for D
^[\d]{1,}?\.[\d]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3505
#T: Full Name - Supports hyphens and apostrophes
#A: Philip Ragan
#D: This pattern allow a first and last name to be tested to ensure that each name begins with a capital letter and is separated by just one space.  The pattern also ensures that only one hyphen can be placed in either the first or last name and the succeeding character must be capitalized.  If an apostrophe is used in the last name it too must be succeeded by a capital letter.
^(?-i:[A-Z]{1}[a-z]+(?<fnh>[-]{1})?(?(fnh)[A-Z]{1}[a-z]+)\s[A-Z]{1}(?<apos>[']{1})?(?(apos)[A-Z]{1})[a-z]+(?<lnh>[-]{1})?(?(lnh)[A-Z]{1}[a-z]+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3506
#T: Gregorian Date with month names and leap year support
#A: Paul Kochanowsky
#D: Verifies all valid Gregorian dates of the form DD MONTH YYYY, and short month names, taking days/month and leap years into account. Accepts space, -, . and / between paramters.
^(0[1-9]|[12][0-9]|3[01])[\s\.\-/](J(anuary|uly|an|AN)|M(arch|ar|AR|ay|AY)|A(ugust|ug|UG)|(O(ctober|ct|CT)|(D(ecember|ec|EC))))[\s\.\-/][1-9][0-9]{3}|(0[1-9]|[12][0-9]|30)[\s\.\-/](A(pril|pr|PR)|J(une|un|UN)|S(eptember|ep|EP)|N(ovember|ov|OV))[\s\.\-/][1-9][0-9]{3}|(0[1-9]|1[0-9]|2[0-8])[\s\.\-/]F(ebruary|eb|EB)[\s\.\-/][1-9][0-9]{3}|29[\s\.\-/]F(ebruary|eb|EB)[\s\.\-/]((0[48]|[2468][048]|[13579][26])00|[0-9]{2}(0[48]|[2468][048]|[13579][26]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3507
#T: DateTime 24 Hr
#A: hv
#D: Validates Date and time in the format mm/dd/yyyy hh:mi:ss
(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))\s+(20|21|22|23|[01]\d|\d)(([:.][0-5]\d){1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3508
#T: IPv4
#A: Florian Cechi
#D: Matches any IPv4.
\b([0-1]?\d{1,2}|2[0-4]\d|25[0-5])(\.([0-1]?\d{1,2}|2[0-4]\d|25[0-5])){3}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3509
#T: Regular Expresion for should not start and end with special charectors
#A: Jitesh Pawar
#D: Regular Expresion for should not start and end with special charectors
^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3510
#T: phone number
#A: Saurabh Tiwari
#D: Checks the phone number
^(\(\d{3}\)|\d{3})[\s.-]?\d{3}[\s.-]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3511
#A: Borut Kosic
#D: It allows separators ',' & '.', max. 2 decimals, value must be between 1 & 9999999,99
^[1-9][0-9]{0,6}(|.[0-9]{1,2}|,[0-9]{1,2})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3512
#A: Borut Kosic
#D: It allows separators ',' & '.', max. 2 decimals, value must be between 1 & 9999999,99
^[1-9][0-9]{0,6}(|.[0-9]{1,2}|,[0-9]{1,2})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3513
#T: Title
#A: salah
#D: Description
^[A-Z0-9._%+-]+@morganintl.com$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3514
#T: Youtube video id from url
#A: Owen Hardy
#D: also matches youtu.be/video_id,
#D: the video id is at $9
^(http(s?):\/\/)?(www\.)?youtu(be)?\.([a-z])+\/(watch(.*?)(\?|\&)v=)?(.*?)(&(.)*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3515
#T: PNG images
#A: Pim Stoit
#D: This expression matches exclusively .png files. Filenames may contain hyphens, underscores, plusses or brackets, and may be both lower and uppercase.
[\w\-_\+\(\)]{0,}[\.png|\.PNG]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3516
#T: Valid YouTube links
#A: Pim Stoit
#D: Matches only valid YouTube links. This includes directly linked videos (yimg) and using YouTube's shortening service (youtu.be). Also supports local domains, like youtube.nl, youtube.de, youtube.co.uk, etc.
(http://)?(www\.)?(youtube|yimg|youtu)\.([A-Za-z]{2,4}|[A-Za-z]{2}\.[A-Za-z]{2})/(watch\?v=)?[A-Za-z0-9\-_]{6,12}(&[A-Za-z0-9\-_]{1,}=[A-Za-z0-9\-_]{1,})*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3518
#T: Capture legal numbering
#A: Sergey Podlesny
#D: Captures numbers like found in legal contracts e.g.:
#D: 1.1. Blah blah 1.1.2. Blah blah blah.
#D: Up to 5 levels - or edit {1,5} qualifier.
((?:\d+\.){1,5})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3519
#T: Digits with minus sign
#A: Stan Murray
#D: Allows for 16 digits, decimal point and 2 following digits
^[-+]?[0-9]\d{0,16}(\.\d{1,2})?%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3520
#T: String
#A: Vinay Joshi
#D: This regular expression allows user to add string spaces and numbers.
^\s*[a-zA-Z0-9,\s]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3521
#T: Grades
#A: Vinay Joshi
#D: Regular expression use to add Grades to a producr string
^[\+,-]?[A-Z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3522
#T: Number Tester
#A: george
#D: Match numbers with or without a number before a decimal. If there is a decimal there must be a number after it though
^(^[0-9]*(^[0-9]*[\.][0-9]+){0,1}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3523
#T: Major Credit Card Validator+
#A: Sean Samborski
#D: This is the same as the other credit card validator by Steven Smith but it matches the exact length instead of letting the user continue into non-valid strings. For example, it matches Visa prefix 4 followed by 3 digits and then groups of four after. Once you have 3 groups of four digits (or 3 groups of 5 characters if using the optional hyphen) it will become non-valid if the user continues.
#D: If you've split your credit card inputs into 4 fields with auto-tabbing features, you can use "^\s*((4\d{3})|(5[1-5]\d{2})|(6011))\s*$" on the first field to match the vendor prefixes and not worry about the remaining three fields. That way you can keep your auto-tabs but still validate the right prefix.
^\s*((4\d{3})|(5[1-5]\d{2})|(6011))-?\d{4}-?\d{4}-?\d{4}\s*$|^\s*3[4,7]\d{13}\s*$/

#U: http://regexlib.com/REDetails.aspx?regexp_id=3524
#T: email 
#A: mahesh
#D: email format for registered worlwide domains only country domains are not included
[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?)+(?:\.)+(?:[A-Z]{2}|aero|asia|biz|cat|com|coop|edu|gov|info|int|jobs|mil|mobi|museum|name|net|org|pro|tel|travel|xxx|us)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3525
#T: Date format
#A: mahesh
#D: Date format yyyy-mm-dd
^((19|20)\d\d)[- /.](([1-9]|[0][1-9]|1[012]))[- /.](([1-9]|[0][1-9]|1[012])|([12][0-9]|3[01]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3526
#T: date time format
#A: mahesh
#D: 24 hrs date time format
^((19|20)\d\d)[- /.](([1-9]|[0][1-9]|1[012]))[- /.](([1-9]|[0][1-9]|1[012])|([12][0-9]|3[01]))(?:\s)?([0-1]{1}\d{1}|[2]{1}[0-3]{1})(?::)?([0-5]{1}\d{1})(?::)?([0-5]{1}\d{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3527
#T: temp
#A: Marex Zbikowsky
#D: temp
\<dd class=\"value m_temp c"\>\+?(\d+).+?\</dd\>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3528
#T: Currency
#A: William Whitehead
#D: Useful for matching monetary values formatted without commas, leading zeros, currency symbols.
^[1-9]+\d*\.\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3529
#T: Date Regex
#A: Nick Gent
#D: Validates dates in the format MM/DD/YYYY, M/D/YYYY, or any permutation in between. Takes into account leap year as well as the rule that century marks are leap years only if they are divisible by 400.
^(?!0?2/3)(?!0?2/29/.{3}[13579])(?!0?2/29/.{2}[02468][26])(?!0?2/29/.{2}[13579][048])(?!(0?[469]|11)/31)(?!0?2/29/[13579][01345789]0{2})(?!0?2/29/[02468][1235679]0{2})(0?[1-9]|1[012])/(0?[1-9]|[12][0-9]|3[01])/([0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3530
#T: Macintosh File Name
#A: Hamidreza
#D: Matches Macintosh file names syntax. (does not support paths, just the filename)
^([^:])+\\.([^:])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3531
#T: Non negative real number limited to 2 decimal spaces
#A: Marko Mijuskovic
#D: Matches any non-negative, non-signed real number with maximum of 2 decimal spaces. The decimal is denoted by a . symbol.
^0$|^0\.{1}(\d{1,2})$|^[1-9]{1}[0-9]*\.?(\d{1,2})$|^[1-9]+[0-9]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3532
#T: US ZipCode
#A: megha patel
#D: This expression matches two different formats of zip codes: 5 digit US ZIP code and 5 digit US ZIP code + 4.The first one must be 5 numeric digits. The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits.
(^(?!0{5})(\d{5})(?!-?0{4})(|-\d{4})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3533
#T: USA/Canadian Telephone Number
#A: David Tupponce
#D: Validates US and Canadian telephone numbers in the format CAAAXXXSSSS where C=Country Code,AAA=Area Code, XXX=Exchange and SSSS=Station - allowing number characters only.
^[1[2-9][0-8]\d[2-9]\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3534
#T: Domain check
#A: ijujym
#D: Checks if URL leads to the root domain
^(([hH][tT][tT][pP][sS]?)\:\/\/)?(([\w-]{1,30})\.){1,6}([^\W0-9]{1,6})\/?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3535
#T: Indian Mobile Number
#A: saikumar
#D: indian mobile number perfect validation for three number series's that start with 9,8,7. if you want you can easily add one more series that you want in feature. it validates 10 digit number starting with 9,8,7 and followed by 9 digits 0-9 in any order.
^([987]{1})(\d{1})(\d{8})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3536
#T: validation for Jordan phone numbers
#A: Ahmad abu eid
#D: Jordan mobile numbers, Zain,Umniah and Orange provider .
((079)|(078)|(077)){1}[0-9]{7}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3537
#T: MVC RequestVerificationToken
#A: Rino Batin
#D: MVC RequestVerificationToken
<input type="hidden" value="([^>]*[^/])" name="__RequestVerificationToken"

#U: http://regexlib.com/REDetails.aspx?regexp_id=3538
#T: Decimal Range 0  to 4
#A: vikasmisra
#D: Validates positive numbers with in the 0 to 4 range and up to two decimal places
^((0{1})?([0-3]{0,1}))(\.[0-9]{0,2})?$|^(4)(\.[0]{1,2})?$|^((0{1})?([0-4]{0,1}))(\.)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3543
#T: UAE Mobile No
#A: Mohammed Hamed
#D: Validate UAE Mobile Numbers
#D: 050,055,056 with/without country code.
^(\+971[\s]{0,1}[\-]{0,1}[\s]{0,1}|[\s]{0,1}0)(5[056]{1})[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3544
#T: Comprehensive hyperlink URL
#A: Steven Arebalo
#D: Designed for full url matching in common hyperlink text including: 1. ftp(s),http(s), and mailto protocols. 2. ip, domain names and sub-domains, and standard email addresses. 3. files with extensions and parameters. Match provides whole match and protocol, address, page, file extension, and parameter sub-matches for use in parsing. If you see anything that can be improved, by all means provide me some feedback. Thanks!
^(((?:(?:f|ht)tps?(?!\:\/\/[-\.\w]+@)|mailto(?=\:\/\/[-\.\w]+@))\:\/\/)?(?:((?:(?:(?:2(?:[0-4]\d|5[0-5])|[01]?\d?\d))(?:\.(?:2(?:[0-4]\d|5[0-5])|[01]?\d?\d)){3})|(?:(?:[a-zA-Z0-9](?:[-\w]*[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}(?:(?:\/[-\w]+(?=\/))*)?)|(?:[0-9a-zA-Z](?:[-.\w]*[0-9a-zA-Z])?@(?:[0-9a-zA-Z](?:[-\w]*[0-9a-zA-Z])?\.)+[a-zA-Z]{2,6}(?![\/\?])))(\/[-\w]+)?(?:(?<=\w)\.([a-zA-Z0-9]{2,4}))?(?:(?<=\w)\?([a-zA-Z][-\w]*=[-\w]+(?:&[a-zA-Z][-\w]*=[-\w]+)*))?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3545
#T: Title Pattern
#A: oniram atila
#D: Least 1 upper case letter
#D: and accept any letter,  number and symbols in the expression
(?=.*[A-Z]+.*)[A-Z0-9&%./-]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3548
#T: Greek currency value
#A: George Birbilis
#D: Matches a currency value (without currency symbol) using , for decimal digits separator
^\d+(\,\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3549
#T: Australian Phone Numbers
#A: Nico Dufour
#D: matches australian phone numbers
(^13((\ )?\d){4}$)|(^1[38]00((\ )?\d){6}$)|(^(((\(0[23478]\))|(0[23478]))(\ )?)?\d((\ )?\d){7}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3550
#T: RFC Mexico
#A: InvoiceOne.com.mx
#D: RFC Registro Federal de Contribuyentes en Mexico para el SAT
^([A-ZÑ\x26]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[A-Z|\d]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3551
#T: RFC SAT
#A: InvoiceOne.com.mx
#D: RFC SAT Registro Federal de Contribuyentes en Mexico para el SAT
^([A-ZÑ\x26]{3,4}([0-9]{2})(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[A-Z|\d]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3552
#T: Multiple numeric range
#A: narendra kumar
#D: will match muliple numeric ranges, from range (1 to 59391) , (64512 to 65534) and (131072 to 4294967294)
^(([1-9][0-9]{0,3}|[1-4][0-9]{4}|5([0-8][0-9]{3}|9([0-2][0-9]{2}|3([0-8][0-9]|9[01]))))|(6(4(5(1[2-9]|[2-9][0-9])|[6-9][0-9]{2})|5([0-4][0-9]{2}|5([0-2][0-9]|3[0-4]))))|(1(3(1(0(7[2-9]|[89][0-9])|[1-9][0-9]{2})|[2-9][0-9]{3})|[4-9][0-9]{4})|[2-9][0-9]{5}|[1-9][0-9]{6,8}|[1-3][0-9]{9}|4([01][0-9]{8}|2([0-8][0-9]{7}|9([0-3][0-9]{6}|4([0-8][0-9]{5}|9([0-5][0-9]{4}|6([0-6][0-9]{3}|7([01][0-9]{2}|2([0-8][0-9]|9[0-4]))))))))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3553
#T: 10-digit nbr w/2 decimal places
#A: LaShandra Knox
#D: 1 to 10 digits are allowed before the decimal.  1 to 2 digits are allowed after decimal.   Zero is allowed.  Whole numbers allowed.
(?!^0*\.0*$)^\d{1,10}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3554
#T: DMS Coordinates
#A: David Jacobs
#D: Latitude and Longitude in Degrees Minutes Seconds (DMS) zero padded, separated by spaces or : or (d, m, s) or (°, ', ") or run together and followed by cardinal direction initial (N,S,E,W)
#D: Longitude Degree range: -180 to 180
#D: Latitude Degree range: -90 to 90
#D: Minute range: 0 to 60
#D: Second range: 0.00 to 60.00
#D: Note: Only seconds can have decimals places.  A decimal point with no trailing digits is invalid.
(-?(90[ :°d]*00[ :\'\'m]*00(\.0+)?|[0-8][0-9][ :°d]*[0-5][0-9][ :\'\'m]*[0-5][0-9](\.\d+)?)[ :\?\"s]*(N|n|S|s)?)[ ,]*(-?(180[ :°d]*00[ :\'\'m]*00(\.0+)?|(1[0-7][0-9]|0[0-9][0-9])[ :°d]*[0-5][0-9][ :\'\'m]*[0-5][0-9](\.\d+)?)[ :\?\"s]*(E|e|W|w)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3555
#T: XY Coordinates
#A: David Jacobs
#D: Latitude and Longitude in Decimal Degrees useful for X (longitude), Y (latitude) coordinate systems such as WGS84.
#D: Prefix x: and y: must be used in order.
#D: X range: -180.00 to 180.00
#D: Y range: -90.00 to 90.00
((X|x):-?(180(\.0+)?|[0-1]?[0-7]?[0-9](\.\d+)?))([ ]|,)*((Y|y):-?(90(\.0+)?|[0-8]?[0-9](\.\d+)?))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3556
#T: Proper Names
#A: Kevin Gravier
#D: Find proper names in the form John Doe
[A-Z][a-zA-Z]+ [A-Z][a-zA-Z]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3557
#T: Lineage
#A: Elvis Furtado
#D: This regex will search for all relation types like father, mother, grand father, cousin, brother, etc..
(([Gg]rand)?([Ff]ather|[Mm]other|mom|pop|son|daughter|parent|((p|m)a)|uncle|aunt)s?)|(([cC]ousin)?((?<=[cC]ousin)\s+(?=brother|sister))?(?<siblings>brother|sister)?((?<=brother|sister)s?)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3558
#T: Strip HTML tags
#A: István Dani
#D: This RE strips HTML open and close tags from text with any attributes provided, including not properly formatted tags.
<(\s*/?\s*)\w+?(\s*(([\w-]+="[^"]*?")|([\w-]+='[^']*?')|([\w-]+=[^'"<>\s]+)))*(\s*/?\s*)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3559
#T: date mysql
#A: Razor Whiplash
#D: Validate date in mysql regexp.
^\[0-9]{4}\-\[0-9]{2}\-\[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3560
#T: Currency
#A: Raul Santos
#D: Number: Currency amount (cents optional) Optional thousands separators; optional two-digit fraction; optional finish with point and no fracton
^[+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:.|(?:\.[0-9]{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3562
#T: Any Phone number with or without area code
#A: Tahir Zia
#D: It will allow to enter 10 digits phone number. the number can start with + symbol or any number as well.
^(\+){0,1}\d{1,10}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3563
#T: Pakistani Mobile Phone Number
#A: Tahir Zia
#D: The expression is used to validate all the number which follows the format of pakistani mobile companies cell phone number format.
#D: i.e. Ufone, Warid, Mobilink, Zong, telenor etc
^((\+92)|(0092))-{0,1}\d{3}-{0,1}\d{7}$|^\d{11}$|^\d{4}-\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3569
#T: Words deformed by repetition (Oooooh my!)
#A: Adam Okruhlica
#D: Word deformed by repeating a character, or a pair of characters. Common in internet communication, can be useful for detecting emotions.
(?:\b\w*(\w\w?)\1{2,}\w*\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3570
#T: Date expression with Slovak names of months
#A: Adam Okruhlica
#D: Recognizes dates of format "[d]d.<slovak name of month>.YYYY". Months part can be either a 3-letter long abbreviation of a month, or full name (with a possible declination suffix).
(?:\b(([0-2]\d|3[01])|\d)\.[ ]?(?:jan|feb|mar|apr|máj|jún|júl|aug|sep|okt|nov|dec|január\w{0,2}|február\w{0,2}|mar\w{0,2}|apríl\w{0,2}|máj\w{0,2}|jún\w{0,2}|júl\w{0,2}|august\w{0,2}|septemb\w{0,2}|októb\w{0,2}|novemb\w{0,2}|decemb\w{0,2})[ ][12][0-9]\d\d\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3571
#T: Valid Password
#A: Vinay Joshi
#D: Test the password 
^[a-zA-Z0-9!@#$&_]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3572
#T: Placa de veículo - Brasil
#A: Anderson de Assis
#D: Formato de placas de veículos padrão brasileiro.
^[A-Z]{3}-[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3573
#T: [INI] Value from section and key
#A: Luca Meloni
#D: This regular expression provides a way to get the value associated to the specified key in the specified section: replace with $1.
[^]*\[section\][^\[]*\nkey=(.+)[^]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3574
#T: Date in Arabic Numeral
#A: Fahad CV
#D: Validate date with arabic numeral of the form dd/mm/yy or dd/mm/yy or dd-mm-yy or dd-mm-yyyy or dd.mm.yy or dd.mm.yyyy
^((((\u0660?[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663[\u0660\u0661])[\.\-\/](\u0660?[\u0661\u0663\u0665\u0667\u0668]|\u0661[\u0660\u0662])[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660?[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663\u0660)[\.\-\/](\u0660?[\u0661\u0663\u0664\u0665\u0666\u0667\u0668\u0669]|\u0661[\u0660\u0661\u0662])[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660?[\u0661-\u0669]|\u0661[\u0660-\u0669]|\u0662[\u0660-\u0668])[\.\-\/]\u0660?\u0662[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|(\u0662\u0669[\.\-\/]\u0660?\u0662[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?(\u0660[\u0664\u0668]|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0661\u0663\u0665\u0667\u0669][\u0662\u0666])|((\u0661\u0666|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0663\u0665\u0667\u0669][\u0662\u0666])\u0660\u0660)|\u0660\u0660)))|(((\u0660[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663[\u0660\u0661])(\u0660[\u0661\u0663\u0665\u0667\u0668]|\u0661[\u0660\u0662])((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663\u0660)(\u0660[\u0661\u0663\u0664\u0665\u0666\u0667\u0668\u0669]|\u0661[\u0660\u0661\u0662])((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660[\u0661-\u0669]|\u0661[\u0660-\u0669]|\u0662[\u0660-\u0668])\u0660\u0662((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|(\u0662\u0669\u0660\u0662((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?(\u0660[\u0664\u0668]|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0661\u0663\u0665\u0667\u0669][\u0662\u0666])|((\u0661\u0666|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0663\u0665\u0667\u0669][\u0662\u0666])\u0660\u0660)|\u0660\u0660))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3575
#T: Date with arabic or english numeral
#A: Fahad CV
#D: Validate date of the form dd/mm/yy or dd/mm/yy or dd-mm-yy or dd-mm-yyyy or dd.mm.yy or dd.mm.yyyy in Arabic or English numerals
^((((\u0660?[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663[\u0660\u0661])[\.\-\/](\u0660?[\u0661\u0663\u0665\u0667\u0668]|\u0661[\u0660\u0662])[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660?[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663\u0660)[\.\-\/](\u0660?[\u0661\u0663\u0664\u0665\u0666\u0667\u0668\u0669]|\u0661[\u0660\u0661\u0662])[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660?[\u0661-\u0669]|\u0661[\u0660-\u0669]|\u0662[\u0660-\u0668])[\.\-\/]\u0660?\u0662[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|(\u0662\u0669[\.\-\/]\u0660?\u0662[\.\-\/]((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?(\u0660[\u0664\u0668]|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0661\u0663\u0665\u0667\u0669][\u0662\u0666])|((\u0661\u0666|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0663\u0665\u0667\u0669][\u0662\u0666])\u0660\u0660)|\u0660\u0660)))|(((\u0660[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663[\u0660\u0661])(\u0660[\u0661\u0663\u0665\u0667\u0668]|\u0661[\u0660\u0662])((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660[\u0661-\u0669]|[\u0661\u0662][\u0660-\u0669]|\u0663\u0660)(\u0660[\u0661\u0663\u0664\u0665\u0666\u0667\u0668\u0669]|\u0661[\u0660\u0661\u0662])((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|((\u0660[\u0661-\u0669]|\u0661[\u0660-\u0669]|\u0662[\u0660-\u0668])\u0660\u0662((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?[\u0660-\u0669]{2}))|(\u0662\u0669\u0660\u0662((\u0661[\u0666-\u0669]|[\u0662-\u0669][\u0660-\u0669])?(\u0660[\u0664\u0668]|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0661\u0663\u0665\u0667\u0669][\u0662\u0666])|((\u0661\u0666|[\u0662\u0664\u0666\u0668][\u0660\u0664\u0668]|[\u0663\u0665\u0667\u0669][\u0662\u0666])\u0660\u0660)|\u0660\u0660)))|(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|[12]\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|1\d|2[0-8])02((1[6-9]|[2-9]\d)?\d{2}))|(2902((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3576
#T: Fixed Local code
#A: clara fernandes
#D: Exchange Local code
^[A-Z0-9\\-\\&-]{5,12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3577
#T: match file estension extension
#A: fabio
#D: ([^.]+[\?])|([^.]+$)
([^.]+[\?])|([^.]+$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3580
#T: ssn randomization rule
#A: Bryan Zayas
#D: Current SSN randomization rules, also caled Social Security Number Randomization, effective since June 25, 2011. Validates 9 digit numbers, not separated or separated by - or space, not starting with 000, 666, or 900-999, not containing 00 or 0000 in the middle or at the end of SSN.
^(?!000)(?!666)([0-8]\d{2}) ([ -])? (?!00)\d\d ([ -])? (?!0000)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3581
#T: only accept chara, & ,\
#A: sarvesh
#D: only accept chara, & ,\ , not allowed- @@ ## $$
^\s*[a-zA-Z0-9,&\s]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3582
#T: Only alphaneumeric value
#A: sarvesh
#D: Only alphaneumeric value
^[A-Za-z0-9\s]{3,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3583
#T: Remove html tag from text
#A: sarvesh
#D: Remove html tag from text-- not allowed special charecter
#F: i
([\<])([^\>]{1,})*([\>])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3585
#T: ajax call
#A: sarvesh
#D: $.ajax({
#D: url: baseurl+lang+"/school/gradeBookApp/ChangeAssignmentStatus",
#D: data:{"id":assignment_id,"status":status,'selectedProfessor':selectedProfessor},
#D: dataType:"json",
#D: type:'POST',
#D: async:false,
#D: success: function(data){
#D: //alert(data.mainstatus);
#D: if(data.mainstatus=="Active"){
#D: $('#loader').show();
#D: $('#StatusAssignment_'+data.id).css({'color':'green'});
#D: $('.padd24').load(baseurl+lang+"/school/gradeBookApp/GetAllAdminCourseAssignments",{'GBCourseID':GBCourseID,'selectedProfessor':selectedProfessor},function(){
#D: $('#loader').hide();
#D: });
#D: }else{$('#loader').show();
#D: $('#StatusAssignment_'+data.id).css({'color':'red'});
#D: $('.padd24').load(baseurl+lang+"/school/gradeBookApp/GetAllAdminCourseAssignments",{'GBCourseID':GBCourseID,'selectedProfessor':selectedProfessor},function(){
#D: $('#loader').hide();
#D: });
#D: }
#D: $('#StatusAssignment_'+data.id).html(data.mainstatus);
#D: $('#StatusAssignment_'+data.id).attr('status',data.mainstatus);
#D: //$('#'+assignment_id).attr('status',data.status);
#D: //$('#'+assignment_id).html(data.condition);
#D: $('#loader').hide();
#D: },error:function(){
#D: $('#loader').hide();
#D: alert('Internal server error occured.');
#D: }
#D: });
$.ajax({                                 url: baseurl+lang+"/school/gradeBookApp/ChangeAssignmentStatus",                                 data:{"id":assignment_id,"status":status,'selectedProfessor':selectedProfessor},                                 dataType:"json",                                 type:'POST',                                 async:false,                                 success: function(data){                                                 //alert(data.mainstatus);                                                 if(data.mainstatus=="Active"){                                                 $('#loader').show();                                                 $('#StatusAssignment_'+data.id).css({'color':'green'});                                                 $('.padd24').load(baseurl+lang+"/school/gradeBookApp/GetAllAdminCourseAssignments",{'GBCourseID':GBCourseID,'selectedProfessor':selectedProfessor},function(){                                                 $('#loader').hide();                                                 });                                                                 }else{$('#loader').show();                                                 $('#StatusAssignment_'+data.id).css({'color':'red'});                                                 $('.padd24').load(baseurl+lang+"/school/gradeBookApp/GetAllAdminCourseAssignments",{'GBCourseID':GBCourseID,'selectedProfessor':selectedProfessor},function(){                                                 $('#loader').hide();                                                 });                                                                 }                                                         $('#StatusAssignment_'+data.id).html(data.mainstatus);                                                 $('#StatusAssignment_'+data.id).attr('status',data.mainstatus);                                                                                                  //$('#'+assignment_id).attr('status',data.status);                                         //$('#'+assignment_id).html(data.condition);                                                 $('#loader').hide();                                 },error:function(){                                         $('#loader').hide();                                         alert('Internal server error occured.');                                                                          }                         });

#U: http://regexlib.com/REDetails.aspx?regexp_id=3586
#T: Malaysia Mobile Number
#A: aresh saharkhiz
#D: accepts malaysian mobile number example (011,012,013...) plus 7 additional numbers
^([0])([1])([1,2,3,4,6,7,8,9])([0-9][0-9][0-9][0-9][0-9][0-9][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3589
#T: email validation
#A: sarvesh
#D: email validation
#F: ;
^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3594
#T: Regular expression determines whether a string is a valid URL or not
#A: Ayan Choudhury
#D: 1) Must enter between http or https
#D: 2) Must enter www
#D: 3) Must enter, text should be combination of any letter or number with minimum 3 characters
#D: 4) Optional, text should be any letter, not any number with minimum 2 characters.
#D: 5) This will be end of the web address, must contain any letter, not any number with minimum 2 characters
((https|http):\/\/)(www\.)[a-z0-9\-\.]{3,}\.([a-z]{2,}\.)?[a-z]{2,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3595
#T: Regular expression determines whether a string is a valid email address or not.
#A: Ayan Choudhury
#D: 1) First character should be a-z, A-Z, 0-9
#D: 2) Other character should be a-z, A-Z, 0-9 and underscore
#D: 3) After "@", All character should be a-z, A-Z, 0-9
#D: 4) After ".", All character should be a-z, A-Z. Size of string will be Minimum: 2 Character
#D: Maximum: 5 Character
^[a-zA-Z0-9][a-zA-Z0-9-_].+@[a-zA-Z0-9].+\.[a-zA-Z]{2,5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3598
#T: email
#A: sarvesh
#D: /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
#F: ;
^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3603
#T: URL parameter matching
#A: AndreasSE93
#D: Matches parameters in an URL's query part. The parameters' name and value will be available as subsrting $1 and $2. $2 will be empty if the value is empty (e.g. "…¶m=&…") or undefined if there's no equals to sign (e.g. "…¶m&…").
[?&]([^&#=]+)(?:=([^&#]*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3604
#A: narendra kumar
#D: Matches valids TCP/IP-Adresses
^((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3605
#T: Malaysia Mobile Number 2
#A: aresh saharkhiz
#D: allows the new 8 digit numbers aswell as 7 digit numbers without the 015
^01[1,2,3,4,6,7,8,9]\d{7,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3606
#T: Match UK telephone number in any format.
#A: g1smd
#D: Step 1: Test that the input is a UK phone number. Later patterns extract the prefix, NSN and extension, and further tests check the NSN for length and validity.
#D: The above pattern matches optional opening parentheses, followed by 00 or 011 and optional closing parentheses, followed by an optional space or hyphen, followed by optional opening parentheses. Alternatively, the opening parentheses are followed by a literal + without a following space or hyphen. Any of the previous options are then followed by 44 with optional closing parentheses, followed by optional space or hyphen, followed by optional 0 in optional parentheses, followed by optional space or hyphen, followed by optional opening parentheses (international format). Alternatively, the pattern matches optional opening parentheses followed by the 0 trunk code (national format).
#D: This is followed by the area code and phone number in 2+8, 3+7, 3+6, 4+6, 4+5, 5+5 or 5+4 format with or without spaces and/or hyphens. This also includes provision for optional closing parentheses and/or optional space or hyphen after where the user thinks the area code ends and the local number begins. The pattern allows any format to be used with any UK number. The display format must be corrected by later logic if the wrong format for this number has been used by the user on input.
#D: The pattern finally ends with optional space or hyphen followed by x, ext and optional period, or #, followed by a three or four digit extension number.
#D: Once the input has been confirmed as being a telephone number using the above pattern, another RegEx pattern should extract prefix, NSN and extension and then the NSN should be further tested for length and validity.
#D: (Order fixed for even greater efficiency: shorter area codes match first.)
^\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)44\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)(?:\d{2}\)?[\s-]?\d{4}[\s-]?\d{4}|\d{3}\)?[\s-]?\d{3}[\s-]?\d{3,4}|\d{4}\)?[\s-]?(?:\d{5}|\d{3}[\s-]?\d{3})|\d{5}\)?[\s-]?\d{4,5}|8(?:00[\s-]?11[\s-]?11|45[\s-]?46[\s-]?4\d))(?:(?:[\s-]?(?:x|ext\.?\s?|\#)\d+)?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3607
#T: Extract NSN, prefix and extension from UK telephone number.
#A: g1smd
#D: Step 2: After step 1 has verified the input is likely to be a UK telephone number, this pattern extracts the NSN part of the number so that it can be passed to another routine that will check it for length and validity. $1 is 44 (international format) or null (use 0 for trunk code - national format). $2 is the NSN. $3 is the extension number.
^\(?(?:(?:0(?:0|11)\)?[\s-]?\(?|\+)(44)\)?[\s-]?\(?(?:0\)?[\s-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d-]+)(?:((?:x|ext\.?\s?|\#)\d+)?)$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=3608
#T: Validate UK telephone number NSN by initial digits and length (simple version).
#A: g1smd
#D: Step 3: Validate the NSN produced from the pattern in step 2 and check it for length and validity. The pattern here is fairly basic. More detailed patterns for each number type are available elsewhere.
#D: Step 4 is to format the number correctly. This needs a variety of RegEx patterns each based on the initial digits and number length.
^((1[1-9]|2[03489]|3[0347]|5[56]|7[04-9]|8[047]|9[018])\d{8}|(1[2-9]\d|[58]00)\d{6}|8(001111|45464\d))$ 

#U: http://regexlib.com/REDetails.aspx?regexp_id=3609
#T: Validate UK telephone number NSN by initial digits and length (detailed version).
#A: g1smd
#D: Step 3: Validate the NSN produced from the pattern in step 2 and check it for length and validity. The pattern here is very detailed matching every valid UK prefix, and rejecting large numbers of non-valid ranges.
#D: Step 4 will be to format the number correctly. This needs a variety of RegEx patterns each based on the initial digits and number length as shown in the article mentioned below. 
^(2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[012])\d{7}|1(?:(?:1(?:3[0-48]|[46][0-4]|5[012789]|7[0-49]|8[01349])|21[0-7]|31[0-8]|[459]1\d|61[0-46-9]))\d{6}|1(?:2(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-4789]|7[013-9]|9\d)|3(?:0\d|[25][02-9]|3[02-579]|[468][0-46-9]|7[1235679]|9[24578])|4(?:0[03-9]|2[02-5789]|[37]\d|4[02-69]|5[0-8]|[69][0-79]|8[0-5789])|5(?:0[1235-9]|2[024-9]|3[0145689]|4[02-9]|5[03-9]|6\d|7[0-35-9]|8[0-468]|9[0-5789])|6(?:0[034689]|2[0-689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0124578])|7(?:0[0246-9]|2\d|3[023678]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-5789]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\d|8[02-9]|9[02569])|9(?:0[02-589]|2[02-689]|3[1-5789]|4[2-9]|5[0-579]|6[234789]|7[0124578]|8\d|9[2-57]))\d{6}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-4789]|8[345])))|3(?:638[2-5]|647[23]|8(?:47[04-9]|64[015789]))|4(?:044[1-7]|20(?:2[23]|8\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[123]))|5(?:24(?:3[2-79]|6\d)|276\d|6(?:26[06-9]|686))|6(?:06(?:4\d|7[4-79])|295[567]|35[34]\d|47(?:24|61)|59(?:5[08]|6[67]|74)|955[0-4])|7(?:26(?:6[13-9]|7[0-7])|442\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\d|37(?:5[2-5]|8[239])|84(?:3[2-58]))|9(?:0(?:0(?:6[1-8]|85)|52\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\d{3}|176888[234678]\d{2}|16977[23]\d{3})|7(?:[1-4]\d\d|5(?:0[0-8]|[13-9]\d|2[0-35-9])|624|7(?:0[1-9]|[1-7]\d|8[02-9]|9[0-689])|8(?:[014-9]\d|[23][0-8])|9(?:[04-9]\d|1[02-9]|2[0-35-9]|3[0-689]))\d{6}|76(?:0[012]|2[356]|4[0134]|5[49]|6[0-369]|77|81|9[39])\d{6}|80(?:0(?:1111|\d{6,7})|8\d{7})|500\d{6}|87[123]|9(?:[01]\d|8[0-3]))\d{7}|8(?:4(?:5464\d|[2-5]\d{7})|70\d{7})|70\d{8}|56\d{8}|3[0347]|55)\d{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3611
#T: ajaxsubmit
#A: sarvesh
#D: $('#frmSSAEditSubject').live('submit',function(e){
#D: e.preventDefault();
#D: $('#loader').show();
#D: var retVal = validateEditSubject();
#D: //alert(retVal);
#D: if(retVal == true){
#D: $(this).ajaxSubmit({
#D: target: '.padd24',
#D: success: function(data) {
#D: $('#loader').hide();
#D: $('.div_message').html('Subject updated successfully').addClass('ActionSuccessMessage');
#D: }
#D: });
#D: } else {
#D: $('.div_message').html('<div class="ActionErrorMessage"><p>'+retVal+'</p></div>').removeClass('ActionSuccessMessage');
#D: $('.div_message').show();
#D: $('#loader').hide();
#D: }
#D: });
$('#frmSSAEditSubject').live('submit',function(e){                 e.preventDefault();                 $('#loader').show();                 var retVal = validateEditSubject();                 //alert(retVal);                 if(retVal == true){                         $(this).ajaxSubmit({                                 target: '.padd24',                                 success: function(data) {                                         $('#loader').hide();                                         $('.div_message').html('Subject updated successfully').addClass('ActionSuccessMessage');                                 }                         });                 } else {                         $('.div_message').html('<div class="ActionErrorMessage"><p>'+retVal+'</p></div>').removeClass('ActionSuccessMessage');                         $('.div_message').show();                         $('#loader').hide();                 }         });

#U: http://regexlib.com/REDetails.aspx?regexp_id=3612
#T: Cross-Platform Absolute Path
#A: Joey Sabey
#D: Written to tell absolute and relative paths apart (by matching only absolute paths) on *nix or Windows systems, for a cross-platform PHP project. Admittedly there are a few weird edges cases that will outwit the pattern, like the %FOO% anchor things that can be used in windows paths.
^(~?/|[a-zA-Z]:[\\/]).+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3613
#T: Código Postal Portugues (Portuguese Postal Code)
#A: Nelson Carvalho
#D: Regex for postal code in Portugal
[0-9]{4}-[0-9]{3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3616
#T: Dutch zip/postal code
#A: Siebe Joris Jochems
#D: Regex for Dutch zip/postal codes. A Dutch zip code exists of 4 numbers and 2 letters. The first number must be a 0 or higher. Letter combinations of "SS", "SD" and "SA" are excluded for historical reasons.
[1-9][0-9]{3}(?!SS|SA|SD)[A-Z]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3617
#T: Valid Folder Name
#A: Daniel Foo
#D: Regex for valid folder name.
#D: 1. Do not allow \ / : * ? " < > |  any where in the language (folder) name.
#D: 2. Do not allow . at beginning or end of text. '.' can present in middle of text.
^[^\\/:*?""<>|.][^\\/:*?""<>|]*(?<!\.)(^[^\\/:*?""<>|]|$)|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3618
#T: Java method headers
#A: matt g
#D: \1 references the method signature (eg main(String[] args)), \2 references the method name (eg main), \3 references the args (eg String[] args), and \4 and up reference each arg in turn (including type names). Supports @interfaces, java keywords/primitives, generic classes (including bounded and unbounded parameters), varargs, and array classes, but due to recursion limitations, generic types can only go one level deep (List<String> is ok, but List<List<String>> isn't).
#D: Does not match Constructors.
(?:@[A-Z]\w*\s+)*(?:(?:public|private|protected)\s+)?(?:(?:(?:abstract|final|native|transient|static|synchronized)\s+)*(?:<(?:\?|[A-Z]\w*)(?:\s+(?:extends|super)\s+[A-Z]\w*)?(?:(?:,\s*(?:\?|[A-Z]\w*))(?:\s+(?:extends|super)\s+[A-Z]\w*)?)*>\s+)?(?:(?:(?:[A-Z]\w*(?:<[A-Z]\w*>)?|int|float|double|char|byte|long|short|boolean)(?:(?:\[\]))*)|void)+)\s+(([a-zA-Z]\w*)\s*\(\s*(((?:[A-Z]\w*(?:<(?:\?|[A-Z]\w*)(?:\s+(?:extends|super)\s+[A-Z]\w*)?(?:(?:,\s*(?:\?|[A-Z]\w*))(?:\s+(?:extends|super)\s+[A-Z]\w*)?)*>)?|int|float|double|char|boolean|byte|long|short)(?:(?:\[\])|\.\.\.)?\s+[a-z]\w*)(?:,\s*((?:[A-Z]\w*(?:<[A-Z]\w*>)?|int|float|double|char|byte|long|short|boolean)(?:(?:\[\])|\.\.\.)?\s+[a-z]\w*))*)?\s*\))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3619
#T: mm/dd/yyyy
#A: Hitesh Chopra
#D: will match all dates in mm/dd/yyyy format. takes into account leap-years and months without 31 days.,It will only take years starting with 19 and 20
^(?:(?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)|(?:0?2)(?:(?!\/3[01]|\/29\/(?:(?:0[^48]|[13579][^26]|[2468][^048])00|(?:\d{2}(?:0[^48]|[13579][^26]|[2468][^048]))))))\/(?:0?[1-9]|[12][0-9]|3[01])\/(?:0?19|20)\d{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3620
#T: Second - with 10ths
#A: David Hodgin
#D: Checks for values between 0 to 59.99 seconds.  Does not take into account signage.
^((([0-5])?\d(\.\d{0,2})?)|\.\d{1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3623
#T: Email Address Validation
#A: Amit kumar sinha
#D: Valiation of Email Address based on Wiki\Email_Address
/^[-a-z0-9~!$%^&*_=+}{\'?]+(\.[-a-z0-9~!$%^&*_=+}{\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(:[0-9]{1,5})?$/i 

#U: http://regexlib.com/REDetails.aspx?regexp_id=3624
#T: Good Email Validator
#A: Amit kumar sinha
#D: This regular expression will only validate addresses that have had any comments stripped and replaced with whitespace (this is done by the module).
^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3628
#T: validate a Venezuelan Id number (Cedula de identidad, Cédula Venezuela)
#A: christian salazar
#D: valida una cedula venezolana:
#D: comienza por:
#D: VEGJ (o vejg)
#D: siguiendo con:
#D: entre 5 a 8 digitos.
^([V|E|J|G|v|e|j|g])([0-9]{5,8})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3629
#T: número telefónico venezuela - phone number venezuela - numero telefonico
#A: christian salazar
#D: numeros telefonicos de venezuela
^0[0-9]{3}-[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3630
#T: UK Telephone Format
#A: Craig Hughes
#D: Follows http://en.wikipedia.org/wiki/Telephone_numbers_in_the_United_Kingdom
#D: must have a specific length and be a valid telephone number in the UK
#D: Must start with a 0, have included 01 02 03 05 08 numbers. character spacing have be " ", "-",
#D: accepts 01 02 03 05 07 08 numbers, rejects everything else.
^0(((1[0-9]{2}[ -]?[0-9]{3}[ -]?[0-9]{4})|(1[0-9]{3}[ -]?[0-9]{6})|(1[0-9]{4}[ -]?[0-9]{4,5}))|((1[0-9]1)|(11[0-9]))[ -]?[0-9]{3}[ -]?[0-9]{4}|(2[0-9][ -]?[0-9]{4}[ -]?[0-9]{4})|((20[ -]?[0-9]{4})|(23[ -]?[8,9][0-9]{3})|(24[ -]?7[0-9]{3})|(28[ -]?(25|28|37|71|82|90|92|95)[0-9]{2})|(29[ -]?2[0-9]))[ -]?[0-9]{4}|(7[4-9][0-9]{2}[ -]?[0-9]{6})|((3[0,3,4,7][0-9])[ -]?[0-9]{3}[ -]?[0-9]{4})|((5[5,6][ -]?[0-9]{4}[ -]?[0-9]{4})|(500[ -]?[0-9]{3}[ -]?[0-9]{4}))|(8[0247][0-9]{1}[ -]?[0-9]{3}[ -]?[0-9]{4})|(9[0-9]{2}[ -]?[0-9]{3}[ -]?[0-9]{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3633
#T: Social Security Number (SSN) issued after 6/25/2011
#A: Joseph Marinello
#D: I am publishing this regex that was written by Stephen M. Redd and taken from the following URL:  http://www.reddnet.net/regular-expression-for-validating-a-social-security-number-ssn-issued-after-june-25-2011/.  It allows a dash or space separator and accounts for the new numbers that were previously restricted prior to June 25, 2011.
^(?!000)(?!666)(?!9)\d{3}[- ]?(?!00)\d{2}[- ]?(?!0000)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3634
#T: Brazilian MSISDN Number
#A: Rafael Dantas
#D: Validation to Brazilian telephone number (mobile or not), including DDD and allowing "9o Dígito" (on all DDDs). It also accept 2 or 3 digit DDD (11 or 011).
#D: ----- Valid to: ----- 11 98989-9090, 11 977777777, 83-8855-8981, 1199999888, 011 42511992, 01142511992, 011-42511992, 011 4251-1992, 011-4251-1992, 011 98989-9090, 011 977777777, 083-8855-8981, 011999998888, 083 4251-1010, 01192222-3333
#D: ----- Invalid to: ----- 011 9898-90909, 08 98989-9090, 083 4251.1010
^(0{0,1}[1-9][0-9]){1}(\s){0,1}(\-){0,1}(\s){0,1}[1-9]{1}([0-9]{3}|[0-9]{4})(\-){0,1}(\s){0,1}[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3635
#T: Ip Range within an network
#A: Calamity Jane
#D: finds all addresses in the network starting with "213.61.220." 
^213\.61\.220\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3636
#T: To find a match pattern in a string 
#A: Chandan Kumar
#D: To find a match pattern in a string not matter where the position of the pattern in the string and even no matter what is the suffix and what will be the prefix.
([Cc][Hh][Aa][Nn][Dd][Aa][Nn].*?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3637
#T: Date validation with leap year 2010 to 2099
#A: Moiz Tankiwala
#D: This expression can validate dates in the range of years 2010-2099 with accounting for leap year. Format of date dd-mmm-yyyy.
#D: With a bit of tweaking, the year range can be expanded. Didn't do it myself as requirement was to validate future dates.
^((((((0?[1-9])|([1-2][0-9])|(3[0-1]))-(([jJ][aA][nN])|([mM][aA][rR])|([mM][aA][yY])|([jJ][uU][lL])|([aA][uU][gG])|([oO][cC][tT])|([dD][eE][cC])))|(((0?[1-9])|([1-2][0-9])|(30))-(([aA][pP][rR])|([jJ][uU][nN])|([sS][eE][pP])|([nN][oO][vV])))|(((0?[1-9])|(1[0-9])|(2[0-8]))-([fF][eE][bB])))-(20(([13579][01345789])|([2468][1235679]))))|(((((0?[1-9])|([1-2][0-9])|(3[0-1]))-(([jJ][aA][nN])|([mM][aA][rR])|([mM][aA][yY])|([jJ][uU][lL])|([aA][uU][gG])|([oO][cC][tT])|([dD][eE][cC])))|(((0?[1-9])|([1-2][0-9])|(30))-(([aA][pP][rR])|([jJ][uU][nN])|([sS][eE][pP])|([nN][oO][vV])))|(((0?[1-9])|(1[0-9])|(2[0-9]))-([fF][eE][bB])))-(20(([13579][26])|([2468][048])))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3638
#T: URL without protocol
#A: Lucas Guimarães Felipe
#D: URL without protocol (http|https|ftp)
^([w0-9]{2,4}\.+)?(([\w-])+\.)+(\.?([a-zA-Z]{2,}))+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3639
#T: Simple Phone number
#A: Matthew Walker
#D: 10 digit phone number or 11 digit international number. No spaces, brackets or dashes
^[0-9]{10}$|^\+[0-9]{11}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3641
#T: Website Validation Regular Expression
#A: ark
#D: This expression validate website urls
(((ht|f)tp(s)?://)|www.){1}([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3642
#T: ISBN
#A: Santiago Neira
#D: match isbn 10 and 13
((978[\--– ])?[0-9][0-9\--– ]{10}[\--– ][0-9xX])|((978)?[0-9]{9}[0-9Xx])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3643
#T: Medicare HIC Number (HICN)
#A: Derek
#D: This is the real regex for a non-railroad board HICN. All combinations are accounted for. This does not account for dashes as they are stripped out before I do the validation.
#D: This also only allows 001-772 as the first 3 numbers per spec. It does not take into consideration that 00 is not allowed for 4th and 5th digits and that 0000 is not allowed for last 4 digits.
^(00[1-9]|0[1-9][0-9]|[1-7][0-9][0-9]|7[0-7][0-2]|77[0-2])(\d{6})(A|B([1-9]?|[ADGHJKLNPQRTWY])|C([1-9]|[A-Z])|D([1-9]?|[ACDGHJKLMNPQRSTVWXYZ])|E([1-9]?|[ABCDFGHJKM])|F([1-8])|J([1-4])|K([1-9]|[ABCDEFGHJLM])|T([ABCDEFGHJKLMNPQRSTUVWXYZ2]?)|M|W([1-9]?|[BCFGJRT]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3644
#T: 1st, 2nd, 3rd, 4th, etc. not capturing st, nd, rd, th
#A: Benjamin Heimann
#D: This will only pull the number off of something like 23rd.
([0-9]+)(?:st|nd|rd|th)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3645
#T: To check a valid IP Address
#A: Chandan Kumar
#D: To check a valid IP Address. It will check the valid IP address on the logic of three dots max three digits in each section
\b(?:\d{1,3}\.){3}\d{1,3}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3646
#T: VTU Register number
#A: Channveer Patil
#D: Regular exp to match the VTU USN
@"^\d[a-zA-Z]\w{1}\d{2}[a-zA-Z]\w{1}\d{3}$"

#U: http://regexlib.com/REDetails.aspx?regexp_id=3647
#T: String starting with number
#A: Channveer Patil
#D: Matches a string starting with numeric digit
@"^\d[a-zA-Z0-9]+$"

#U: http://regexlib.com/REDetails.aspx?regexp_id=3648
#T: To allow non-zero numbers only
#A: Chandan Kumar
#D: This will validate a match for a number having no zero
[0-9]*\.?[0-9]*[1-9]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3649
#T: To allow leading and ending ZERO in text box but number greater than ZERO
#A: Chandan Kumar
#D: For a WHOLE number in a text box greater than ZERO. Can start with a Zero, contain Zero in between and end with zero
^\d*[1-9]\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3651
#T: url validation
#A: sarvesh
#D: url_match = /https?:\/\/([-\w\.]+)+(:\d+)?(\/([\w/_\.]*(\?\S+)?)?)?/;
url_match = /https?:\/\/([-\w\.]+)+(:\d+)?(\/([\w/_\.]*(\?\S+)?)?)?/;

#U: http://regexlib.com/REDetails.aspx?regexp_id=3671
#T: html <a> cut on php
#A: Sergey Stremidlo
#D: for cut links on PHP
#D: $text = preg_replace("/<a[\s]+[^>]*?.*?>([^<]+|.*?)?<\/a>/s","",$text);
<a[\s]+[^>]*?.*?>([^<]+|.*?)?<\/a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3672
#T: base IP v6
#A: Jan Elias
#D: IP v6 regular expression that matches non-collapsed address in hexadecimal representation
^(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3673
#T: Cisco IP Phone number - 10 digit number
#A: John Burrey
#D: I needed an expression to allow only a 10 digit number to be entered. No () or dashes or spaces. Cisco IP phones only like the 10 digit number. So here's what I came up with. Very short and simple!
^\d{10}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3674
#T: USA Insurance medicare number
#A: imran a shaikh
#D: Medicare number validation:XXXYYYYYYYYYZBBXXX- can be up to 3 letters. Not requiredYYY- 9 digits – requiredZ- must be letter. No number. Not requiredBB- can be letter or numbers. Not required. Can only exist if Z is exists. 
^([A-Z]{0,3}?[0-9]{9}($[0-9]{0}|[A-Z]{1}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3685
#T: Password
#A: Derek
#D: Min 8 Max 50 chars /r/n
#D: Min 1 upper
#D: Min 1 number
#D: Min 1 special char from the list (there is a space at the end of the list. basically every special char from a US keyboard layout)
#D: Be careful when copy and paste from here. The entities will probably get converted.
^(?=.*[A-Z])(?=.*[a-z])(?=.*[\d])(?=.*[-\]\\`~!@#$%^&*()_=+}{[|'";:><,.?/ ]).{8,50}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3686
#T: Phone number in context
#A: Thomas Wood
#D: Extracts a phone number, including country code, from a sentence in natural language
.*?((?:\b|\+)\d[\d \-\(\)]+\d)\b.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3687
#T: Simplify US phone numbers
#A: Justin McNally
#D: Simplify US phone numbers
(\+1|\+|1)|([^0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3689
#T: Host/domain email expression
#A: Adam Matulewicz
#D: This expression will fail if the host/domain does not end with @gmail.com
(\w+([-+.']\w+)*@(gmail.com))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3698
#T: US State Codes
#A: Rick Edwards
#D: Matches 51 US state codes (inclu. DC).
^(M[ADEINOST]|N[CDEHJMVY]|[CGILPVW]A|A[KLRZ]|I[DLN]|O[HKR]|[CUV]T|[HRW]I|D[CE]|K[SY]|S[CD]|T[NX]|W[VY]|CO|FL)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3699
#T: 12 hour time
#A: Rick Edwards
#D: Validates a 12-hour time (with optional seconds).
^(0[1-9]|1[0-2])(:[0-5]\d){1,2}\s?[AP]M$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3703
#T: U.S. Zip Code
#A: TJB
#D: Matches any 5 or 9 digit U.S. zip code with a period, hyphen, plus sign, space delimiter or no delimiter. The first capture is the first 5 digits and, optionally, the second capture is the last 4 digits.
#D: Add ^ at the beginning and $ to force the entire string to be a valid zip.
(\d{5})[\.\-\+ ]?(\d{4})?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3705
#T: PSG Rta Time
#A: R B
#D: PSG Time parse
T(?<action>\w)?-(?<user>\w+.+\d)=(?<time>\d+(?:\.\d+)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3706
#T: Phone Number
#A: Brad Thomas
#D: Requires area code, optional parentheses but requires both.  Allows '-' or ' '.
^((\([2-9]\d{2}\)[ ]?)|([2-9]\d{2})[- ]?)\d{3}[- ]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3707
#T: Decimal 18,2 valid 16 digits before decimal place
#A: Nilesh Katkar
#D: Decimal 18,2 valid 16 digits before decimal place
#D: i.e. upto 16 digit without decimal place is valid. With decimal place 16digit and 2 digits after decimal place is valid
(?!^0*$)(?!^0*\.0*$)^\d{1,16}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3708
#T: Negative Look-Around
#A: Eric Bach
#D: This expression will NOT match any string that contains the word "string". You can replace "string" with any list of characters you would like to prevent matching on.
^((?!string).)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3709
#T: Allow + , 0 and - whole numbers
#A: Stew Muskie
#D: MS ASP.NET 2010
#D: Allows positive, negative whole numbers. Allows zero. Does not allow real (decimal) numbers nor anything containing alphabet characters. Simple and sweet
[0-9]+|-[0-9]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3710
#T: Integer and Decimal Exchange Rate
#A: Stew Muskie
#D: I was searching for an Exchange rate expression.
#D: Nice thing about this is that it is less sensitive for large numbers and more sensitive (more decimal places) for small decimals to 5 decimal places.
(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,5})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3711
#T: UK Date and Time Full
#A: Stew Muskie
#D: UK Data and Time
#D: Use an 'onupdated' method to correct '31/02/2012' to 28/02/2012, for example.
#D: MS Visual Studio 2010
(([0-2]{1}[0-9]{1})|([3-3]{1}[0-1]))/[1-12]{2}/[1900-2999]{4}\s(([0-0]{1}[0-9]{1})|([1-1]{1}[0-9]{1})|([2-2]{1}[0-3]{1})):[0-5]{1}[0-9]{1}:[0-5]{1}[0-9]{1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3712
#T: Linux Package Name and Version
#A: Mohammad M. Saffari
#D: For most of linux's package names, this regex tries to match the name and version separately. It is useful to know what duplicate packages are installed on a linux system.
(?<name>.+?)(?=-\d)-(?<version>.+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3714
#T: CSS Url
#A: HJennerway
#D: Matches a CSS Background tag. I needed this to replace image links in CSS with data-URI encoded strings.
url\(['"]?([\w\d_\-\. ]+)['"]?\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3715
#T: INI Key/Value match
#A: R B
#D: Matches key/value pairs in standard INI format
#D: Match Groups:
#D: key   - Key name (can't contain spaces)
#D: value - The entry's value (leading/trailing spaces not included)
^(?:(?<key>.+?)\s*?=\s*?(?<value>\S.+?)\s*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3716
#T: Only 2 repeating characters are allowed in password
#A: vanita
#D: Only 2 repeating characters are allowed in password
(.*[A-Za-z]+\d+.*)|(.*\d+[A-Za-z]+.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3717
#T: t
#A: zakaria issa
#D: tt
^((5)/(1|2|5)/([0-9])/([0-9])/([0-9])/([0-9])/([0-9])/([0-9])/([2-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3718
#T: plus
#A: rakesh parchulkar
#D: ADDITION
A + B

#U: http://regexlib.com/REDetails.aspx?regexp_id=3719
#T: U.S. and Canadian postal codes
#A: Douglas Barbin
#D: This expression more loosely matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code. The first one must be 5 numeric digits. The ZIP+4 must be 5 numeric digits, a hyphen (optional), and then 4 numeric digits. The Canadian postal code must be of the form ANANAN where A is any alphabetic character (case insensitive) and N is a numeric digit from 0 to 9.  A space between the 2nd "A" and 2nd "N" is optional but not required, so the form could also be interpreted as "ANA NAN"
^((\d{5}-?\d{4})|(\d{5})|([A-Za-z]\d[A-Za-z]\s?\d[A-Za-z]\d))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3720
#T: Autodesk Registry Cookies
#A: Jacob Holcomb
#D: Matches an Autodesk Registry Cookie and captures Platform, Product, and Locale information as named groups.
\b(?<PlatformID>.+)-(?<ProductID>.+):(?<LocaleID>.+)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3722
#T: ISO date yyyy.MM.dd and yyyy-MM-dd
#A: Silling Péter
#D: Validates yyyy.MM.dd and yyyy-MM-dd format date,and also verifying leap years. 
^((((19|20)(([02468][048])|([13579][26])).02.29))|((20[0-9][0-9])|(19[0-9][0-9])).((((0[1-9])|(1[0-2])).((0[1-9])|(1[0-9])|(2[0-8])))|((((0[13578])|(1[02])).31)|(((0[1,3-9])|(1[0-2])).(29|30)))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3723
#T: Autralian zip code validator
#A: Herberto Graca
#D: Autralian zip postal code validator
^((02[0-9]{2})|(0[8-9][0-9]{2})|(1[0-9]{3})|(2[0-7][0-9]{2})|(28[0-8][0-9])|(289[0-8])|(29[0-9]{2})|([3-5][0-9]{3})|(6[0-6][0-9]{2})|(67[0-8][0-9])|(679[0-7])|(6[8-9][0-9]{2})|([7-9][0-9]{3}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3724
#T: Integer with thousands separator
#A: Edgar Villegas Alvarado
#D: Unsigned integer with ',' (comma) as thousands separator, for example: 1,234,500
(^[1-9]{1,3}(,\d{3})*$)|(^0$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3725
#T: ISO 8601 Time
#A: Antony Kennedy
#D: Matches HH:MM:SS and HHMMSS as well as the special 24:00 and 2400 - check http://en.wikipedia.org/wiki/ISO_8601#Times for more data.
^(?:[0-1][0-9]|[2][0-3]):?(?:[0-5][0-9]):?(?:[0-5][0-9]|60)|2400|24:00$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3726
#T: ISO 8601 Duration
#A: Antony Kennedy
#D: Test for valid ISO 8601 duration value
^P(([0-9]+([.,][0-9]*)?Y)?([0-9]+([.,][0-9]*)?M)?([0-9]+([.,][0-9]*)?D)?T?([0-9]+([.,][0-9]*)?H)?([0-9]+([.,][0-9]*)?M)?([0-9]+([.,][0-9]*)?S)?)|\d{4}-?(0[1-9]|11|12)-?(?:[0-2]\d|30|31)T((?:[0-1][0-9]|[2][0-3]):?(?:[0-5][0-9]):?(?:[0-5][0-9]|60)|2400|24:00)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3727
#T: US & Canadian Phone Numbers
#A: John M. Keefe, Jr.
#D: Matches phone numbers with an optional + before the area code, optional ( and ) around area code, with space, dot, hyphen, or no separators, and an optional extension following the number.
^\+*(?:\(*\d{3}\)*[\s.-]*)\d{3}[\s.-]*\d{4}(?:\se*xt*.*\s*\d*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3728
#T: Date Format(dd/mm/yyyy)
#A: Akshay Mishra
#D: dd/mm/yyyy
((\d{4})|(\d{2}))|(0?[2469]|11)(-|\/)((0[0-9])|([12])([0-9]?)|(3[0]?))(-|\/)((0?[13578]|10|12)(-|\/)((0[0-9])|([12])([0-9]?)|(3[01]?))(-|\/)((\d{4}|\d{2})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3732
#T: URI
#A: getmd5.de
#D: Matching any possible server DNS entries
(?ix-ms:[\wöäüß]{2,}[\.]?)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3733
#T: Valid Date m/d/yyyy
#A: Derick Lebron
#D: ^((((((0?[13578])|10|12)/((0?[1-9])|([12][0-9])|(3[01]))/)|(((0?[469])|11)/((0?[1-9])|([12][0-9])|(30))/)|((0?2)/((0?[1-9])|(1[0-9])|(2[0-8]))/))(19|([2-9][0-9]))[0-9]{2})|(0?2/29/(((([2468][048])|([13579][26]))00)|(19|([2-9][0-9]))(?!00)(([02468][048])|([13579][26])))))$
^((((((0?[13578])|10|12)/((0?[1-9])|([12][0-9])|(3[01]))/)|(((0?[469])|11)/((0?[1-9])|([12][0-9])|(30))/)|((0?2)/((0?[1-9])|(1[0-9])|(2[0-8]))/))(19|([2-9][0-9]))[0-9]{2})|(0?2/29/(19|([2-9][0-9]))(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3734
#T: Gcode Signed Floating Point Number
#A: Aaron Peterson
#D: some machines use multiples of .0001 inch, and some use whole inches if there is no decimal point.
#D: This can lead to expensive crashes of machines.  It is good practice to have a decimal point in most of our numbers, Everything else is a potential error.
#D: I may need to add a \r to the (\s|\n) area on windows, but I don't know.
#D: It will be invalid gcode to start the program with X.5   without something like a G01 in front of it,
#D: So I didn't put any special consideration to the beginning of the file because There should always be an M command at the end and something else beginning
#D: This is probably overkill back detecting the preceding character, as my syntax highlighter will likely use those characters to start a mode, and end on a space, so my single character will be validated for me before hand.
(?<=((\s|\n)[XYZABCIJKxyzabcijk]))-?((\d*\.\d+)|(\d+\.\d*)|(\d+\.\d+))(\s|\n)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3735
#T: Signed Floating Point Number by itself
#A: Aaron Peterson
#D: A number with a single decimal point in it.
#D: Get rid of the ^'s and $'s if it can bump a word.
^-?((\d*\.\d+)|(\d+\.\d*)|(\d+\.\d+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3736
#T: Find Tags and Attributes despite formatting issues
#A: David Hollowell
#D: Designed to find tags and attributes despite formatting issues, since it may help to find tags like <script a>, since they'll render even though not properly formatted.
#D: Also finds closing tags. Designed with the intention of sanitizing html input prior to rendering. However, for some inputs, this can be very slow. I don't recommend doing this with regex
<\s*[\/]?(?<tag>[a-z:_][-a-z0-9._:]*)(\s+(?<attributes>[a-z:_]*[-a-z0-9._:]*[^\s=><]*)\s*=?\s*("[^"]*"|'[^']*'|"|')*[^\s><]*)*\s*[\/]?>?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3737
#T: Distance given in different formats
#A: Adrian Hood
#D: This will extract distances when presented in different formats
\d+\s*[.'-]\s*\d+\s*[\d+.m\"]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3738
#T: Splunk Win Security EventLog Type Filtering
#A: Neil Battersby
#D: RE used by Splunk Forwarder in transforms.conf to select Win Security events from specified list of hostnames. Please note that matching examples do not show newlines between each name=value pair. These newlines are present in the RE input data and so are included in the RE as \n
=(?m)^(LogName=(Security).*)\n(SourceName=.*)\n(EventCode=.*)\n(EventType=.*)\n(Type=(Success Audit|Information).*)\n(ComputerName=(HOSTNAME1|HOSTNAME2|HOSTNAME3).*)\n

#U: http://regexlib.com/REDetails.aspx?regexp_id=3741
#T: Ingress passcode
#A: Gregory Krohne
#D: Matches most common Ingress passcode patterns.
\b([2-9][p-z][a-h][2-9]{1,2}[a-z]+[p-z][2-9][p-z][2-9][p-z]|[a-z][a-z]+\d{2}[a-z]|[2-9][p-z]{2}[a-h][2-9]{1,2}[a-z]+[p-z][2-9]{3}[p-z]|\d{12}|[2-9][p-z][a-h][2-9][a-z0-9]+[p-z][2-9]{3}[p-z])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3742
#T: URL
#A: Dmitry Tranchenko
#D: Matches basic URL strings with optional query string.
#D: Remarks: to use this expression in JavaScript you should do the following:
#D: 1) when using RegExp("pattern") object you should escape all '\' instances, because they appear in double quotes.
#D: 2) when using /pattern/flags syntax, you should escape all '/' instances, because this character indicates an end of an expression.
^(http|https|ftp|ftps)\://([a-zA-Z0-9\-]+)(\.[a-zA-Z0-9\-]+)*(\.[a-zA-Z]{2,3})(:[0-9]*)?(/[a-zA-Z0-9_\-]*)*(\.?[a-zA-Z0-9#]{1,10})?([\?][a-zA-Z0-9\-\._\,\'\+&%\$#\=~]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3743
#T: Username
#A: K A P Swamy
#D: Rules:
#D: Username can consist of lowercase and capitals
#D: Username can consist of alphanumeric characters
#D: Username can consist of underscore and hyphens and spaces
#D: Cannot be two underscores, two hypens or two spaces in a row
#D: Cannot have a underscore, hypen or space at the start or end
^[A-Za-z0-9]+(?:[ _-][A-Za-z0-9]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3746
#T: URL Validation
#A: Krunal Dalia
#D: it work with and withour http or https 
#F: ;
^\s*(http[s]*\:\/\/)?([wwW]{3}\.)+[a-zA-Z0-9]+\.[a-zA-Z]{2,3}.*$|^http[s]*\:\/\/[^w]{3}[a-zA-Z0-9]+\.[a-zA-Z]{2,3}.*$|http[s]*\:\/\/[0-9]{2,3}\.[0-9]{2,3}\.[0-9]{2,3}\.[0-9]{2,3}.*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3747
#T: Replace St., etc, with 'Saint '
#A: David Allen Sparks
#D: Replaces abreviated spellings of the name St, siant, etc, with the proper full name (Saint) expected by many servers. Must NOT insert an 'i' at the end of expression or code may loop and expand spacing.
<script type="text/javascript">\Nfunction fin_city() {   city_c=document.frm_naccnt.City.value;   var toreplace=/(st )|(st.)|(St )|(St.)|(ST )|(saint)|(sant)|(siant)|(SANT)|(SIANT)/mg;   city_d=city_c.replace(toreplace,"Saint ");   document.frm_naccnt.City.value=city_d;   fin_cityb(); } </script>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3748
#T: Chilean RUT RUN
#A: AthosXtreme
#D: Matches chilean  RUT (Rol Unico Tributario)or RUN (RUT (Rol Unico Nacional) in following formats:
#D: With dots and with hyphen , without dots and with hyphen, without dots and without hyphen.
#D: Calza RUT (Rol Unico Tributario)o RUN (RUT (Rol Unico Nacional) chilenos con los siguientes formatos:
#D: Con puntos y con guion, sin puntos y con guion, sin puntos y sin guion.
^(([1-9])|([1-9][0-9]))(((\.\d{3}){2}\-)|((\d{3}){2}\-)|((\d{3}){2}))[\dkK]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3749
#T: Regex for date
#A: yogesh chillale
#D: Validation for date
(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|1[012])-((19|20)\\d\\d)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3750
#T: Item Dimensions
#A: leyla
#D: It matches product dimensions in inches
((\d{1,5})*\.*(\d{0,3})"[W|D|H|DIA][X|\s]).*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3751
#T: South African phone numbers - All formats
#A: Bright
#D: Matches all valid mobile numbers, landline numbers, share call etc in all common phone number notations
^((0|(\(0\)))?|(00|(\(00\)))?(\s?|-?)(27|\(27\))|((\+27))|(\(\+27\))|\(00(\s?|-?)27\))( |-)?(\(?0?\)?)( |-)?\(?(1[0-9]|2[1-4,7-9]|3[1-6,9]|4[0-9]|5[1,3,6-9]|7[1-4,6,8,9]|8[0-9])\)?(\s?|-?)((\d{3}(\s?|-?)\d{4}$)|((\d{4})(\s?|-?)(\d{3})$)|([0-2](\s?|-?)(\d{3}(\s?|-?)\d{3}$)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3753
#T: Phone Number
#A: Michael Dzura
#D: Matches a North American Telephone Number with and without '-' and '(' ')'
^[\\(]{0,1}[0-9]{3}([\\)]{0,1}|-|\s){0,1}[0-9]{3}(-|\s){0,1}[0-9]{4}$

#%#% COMMENTED OUT: THIS ONE IS TOO BIG TO RUN
#U: http://regexlib.com/REDetails.aspx?regexp_id=3755
#T: The Most Complete URI & URL validator, for absolute & relative URLs
#A: Stuart Steedman
#D: Validates completely for relative and absolute paths, and allows port definitions. Also contains parameter validation, and allows for anchors and URL escape characters.
#^((http(s){0,1}\:\/\/){0,1}([a-z|A-Z|0-9|\.|\-|_]){4,255}(\:\d{1,5}){0,1}){0,1}((\/([a-z|A-Z|0-9|\.|\-|_]|\%[A-F|a-f|0-9]{2}){1,255}){1,255}\/{0,1}){0,1}(|\/{0,1}\?[a-z|A-Z|0-9|\.|\-|_]{1,255}\=([a-z|A-Z|0-9|\.|\-|_|\+|\:]|\%[A-F|a-f|0-9]{2}|\&[a-z|A-Z]{2,12}\;){0,255}){0,1}((\&[a-z|A-Z|0-9|\.|\-|_]{1,255}\=([a-z|A-Z|0-9|\.|\-|_|\+|\:]|\%[A-F|a-f|0-9]{2}|\&[a-z|A-Z]{2,12}\;){0,255}){0,255})(\/{0,1}|\#([a-z|A-Z|0-9|\.|\-|_|\+|\:]|\%[A-F|a-f|0-9]{2}|\&[a-z|A-Z]{2,12}\;){0,255})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3760
#T: Strong password
#A: Jonathan Baggaley
#D: Password requires at least 1 lower case character, 1 upper case character, 1 number, 1 special character and must be at least 6 characters and at most 50
((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\W_]).{6,50})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3762
#T: English Months
#A: Mauro De Giorgi
#D: Match months in English, both in short and long form, and numeric month, with or without trailing zero.
((0?[1-9]|1[012])|(?:(J|j)an(?:uary|\.)?|(F|f)eb(?:ruary|\.)?|(M|m)ar(?:ch|\.)?|(A|a)pr(?:il|\.)?|(M|m)ay?|(J|j)un(?:e|\.)?|(J|j)ul(?:y|\.)?|(A|a)ug(?:ust|\.)?|(S|s)ep(?:tember|\.)?|(O|o)ct(?:ober|\.)?|(N|n)ov(?:ember|\.)?|(D|d)ec(?:ember|\.)?))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3763
#T: UK Telephone Numbers
#A: Paul Verhulpen
#D: Validates UK phone numbers based on the Wikipedia page http://en.wikipedia.org/wiki/Telephone_numbers_in_the_United_Kingdom including the international dialing code 0044/+44/44
^(((\+|00)?44|0)([123578]{1}))(((\d{1}\s?\d{4}|\d{2}\s?\d{3})\s?\d{4})|(\d{3}\s?\d{2,3}\s?\d{3})|(\d{4}\s?\d{4,5}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3765
#T: Parsing Html
#A: Adolfo Araya
#D: Paseo de Tag html.
<[^>]*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=3766
#T: Saudi Mobile
#A: Shoodatubcuth
#D: Saudi mobile numbers must start with 05 and just accepts 10 digits 
05\d{8}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3767
#T: Numeric with decimal and negative
#A: Bhavin Shah
#D: Numeric with decimal values. Accepts negative and zeros. Upto 9 digits and upto 4 decimals allowed
^-?[0-9]\d{0,8}(\.\d{1,4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3768
#T: URI
#A: Adam Retter
#D: Relatively loose validation of a URI
([A-Za-z0-9]+:\/\/)?([a-zA-Z0-9]+(\.[a-zA-Z0-9]+)*)?(\/|(\/([A-Za-z0-9\:@!\$&'\(\}\*\+\-_,;=~\.]+|(%[A-F0-9]{2})+))*)(\?[A-Za-z0-9]+=[A-Za-z0-9]+(&[A-Za-z0-9]+=[A-Za-z0-9]+)*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3769
#T: XML Schema DateTime
#A: Adam Retter
#D: Matches xs:dateTime values described in XML Schema 1.0. Handles correct days in each month.
#D: http://www.w3.org/TR/xmlschema-2/#dateTime
-?[0-9]{4}-(((0(1|3|5|7|8)|1(0|2))-(0[1-9]|(1|2)[0-9]|3[0-1]))|((0(4|6|9)|11)-(0[1-9]|(1|2)[0-9]|30))|(02-(0[1-9]|(1|2)[0-9])))T([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-999])?((\+|-)([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3770
#T: XML Schema Date
#A: Adam Retter
#D: Matches xs:date values described in XML Schema 1.0. Handles correct days in each month. http://www.w3.org/TR/xmlschema-2/#date
-?[0-9]{4}-(((0(1|3|5|7|8)|1(0|2))-(0[1-9]|(1|2)[0-9]|3[0-1]))|((0(4|6|9)|11)-(0[1-9]|(1|2)[0-9]|30))|(02-(0[1-9]|(1|2)[0-9])))((\+|-)([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3771
#T: XML Schema Time
#A: Adam Retter
#D: Matches xs:time values described in XML Schema 1.0. Handles correct days in each month. http://www.w3.org/TR/xmlschema-2/#time
([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9]):(0[0-9]|[1-5][0-9])(\.[0-999])?((\+|-)([0-1][0-9]|2[0-4]):(0[0-9]|[1-5][0-9])|Z)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3772
#T: UK Date
#A: Adam Retter
#D: UK Date Format, using '/' as the separator character.
#D: Handles correct days in each month.
(((0[1-9]|(1|2)[0-9]|3[0-1])\/(0(1|3|5|7|8)|1(0|2)))|((0[1-9]|(1|2)[0-9]|30)\/(0(4|6|9)|11))|((0[1-9]|(1|2)[0-9])\/02))\/[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3773
#T: UUID version 4
#A: Adam Retter
#D: Matches a Version 4 UUID as described here http://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29
[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3774
#T: UUID version 3
#A: Adam Retter
#D: Matches a Version 3 UUID as described here http://en.wikipedia.org/wiki/Uuid#Version_3_.28MD5_hash.29
[a-f0-9]{8}-[a-f0-9]{4}-3[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3775
#T: Absolute File Path in UNIX / LINUX
#A: Bijaya Kumar Naik
#D: This will match with all absolute file paths in Unix/Linux. The extensions added are csv|jpg|txt|pdf|dat|xls|doc. Can be customized for specific extensions.
^((?!.*//.*)(?!.*/ .*)/{1}([^\\(){}:\*\?<>\|\"\'])+\.(csv|jpg|txt|pdf|dat|xls|doc))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3777
#T: Match Text in square braces
#A: Praveen
#D: Match Text in square braces
(?<=[[]).*?(?=[]])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3778
#T: 2-80 alpha-numeric with dash
#A: Todd Dill
#D: Can be used for identification numbers.
^([a-zA-Z0-9\-]{2,80})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3779
#T: Website Validation
#A: Bhanu Prakash
#D: This regular expression allows http,https also.
^((http|https):[/][/]|www.)([\w-]+\.)+[\w-]+(/[\w- ./?%&=]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3780
#T: IFSC Code Validation
#A: Bhanu Prakash
#D: IFSC Code normally contains 11 characters.In that first 4 characters are alphabets,5th character is 0 and next 6 characters are numerics
[A-Z|a-z]{4}[0][\d]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3781
#T: PAN Card Validation
#A: Bhanu Prakash
#D: This Expression validates first 3 are alphabets and 4th character is specifically P,C,H,G,A,T,B,L,I,J,G and next 4 characters are numeric and last character is alphabet
^[\w]{3}(p|P|c|C|h|H|f|F|a|A|t|T|b|B|l|L|j|J|g|G)[\w][\d]{4}[\w]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3782
#T: Email Address Validation
#A: Bhanu Prakash
#D: Validates Email Address
\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3783
#T: Mobile Number Validation
#A: Bhanu Prakash
#D: Mobile Number starts with 7,8,9 and total 10 digits
^([7-9]{1})([0-9]{9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3784
#T: Username
#A:  K A P Swamy
#D: Rules: Username can consist of lowercase and capitals Username can consist of alphanumeric characters Username can consist of underscore and hyphens and spaces Cannot be two underscores or any other specified special characters, two hypens or two spaces in a row Cannot have a underscore, hypen or space at the start or end
^[A-Za-z0-9. ]+(?:[_&%$*#@!-][A-Za-z0-9. ]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3785
#T: Military time match only 15 minute increments, or 23:59:59
#A: ___
#D: match only if 23:59:59   OR increments of 15 minutes from 00:00:00 to 23:45:00
#D: hh:mm:ss  format
(23:59:59)|([01]{1}[0-9]|2[0-3]):((00)|(15)|(30)|(45))+:(00)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3786
#T: lager missing ~n
#A: Tarek Zeineddine
#D: This is a regex I made to ifnd all the lines of erlang code that use lager to log information, and that might be missing the line return at the end.
^.*lager(?:(?!~n").)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3787
#T: Siteswap validator
#A: Adrian G
#D: Matches valid siteswaps (juggling patterns) with max height 5
^((0)*|(1|(2|(3|(4|50)0)0)0)*|(01*(2|(3|(4|50)0)0))*|(00(1|20)*(3|(4|50)0))*|(000(1|(2|30)0)*(4|50))*|(0000(1|(2|(3|40)0)0)*5)*|(2|(5(3|50)0|(4|51)(2|40))0|(3|(4|51)1|(52|(4|51)50)0)(501|(4|5050)0)*(1|(3|50(2|40))0))*|(501|(4|5050)0|(1|(3|50(2|40))0)(2|(5(3|50)0|(4|51)(2|40))0)*(3|(4|51)1|(52|(4|51)50)0))*|(0(2|(3|(4|51)1|(52|(4|51)50)0)(501|(4|5050)0)*1)*(5(3|50)0|(4|51)(2|40)|(3|(4|51)1|(52|(4|51)50)0)(501|(4|5050)0)*(3|50(2|40))))*|(0(501)*(4|5050)|0(501)*(1|(3|50(2|40))0)(2|(5(3|50)0|(4|51)(2|40))0|(3|(4|51)1)(501)*(1|(3|50(2|40))0))*(52|(4|51)50|(3|(4|51)1)(501)*(4|5050)))*|((01|0500)(40)*5|(0(2|40)0|(01|0500)(40)*(1|30))(2|(5(3|50)0|(4|51)(2|40))0|(3|(4|51)1|(52|(4|51)50)0)(40)*(1|30))*(3|(4|51)1|(52|(4|51)50)0)(40)*5)*|((1|500)(40)*50|((2|40)0|(1|500)(40)*(1|30))(2|5(3|50)00|(3|520)(40)*(1|30))*(4|51|(3|520)(40)*50))*|(00(2|(4|51)20|(3|(4|51)1|(52|(4|51)50)0)(501|(4|5050)0)*(1|(3|502)0))*(5(3|50)|(4|51)4|(3|(4|51)1|(52|(4|51)50)0)(501|(4|5050)0)*504))*|(00(501|40)*505|00(501|40)*(1|(3|50(2|40))0)(2|(5(3|50)0|(4|51)(2|40))0|(3|(4|51)1|520)(501|40)*(1|(3|50(2|40))0))*((4|51)5|(3|(4|51)1|520)(501|40)*505))*|((((3|50)0|1(2|40))0|(11|(2|150)0)(501|(4|5050)0)*(1|(3|50(2|40))0))(2|4(2|40)0|(3|41|4500)(501|(4|5050)0)*(1|(3|50(2|40))0))*5)*|(000(2|(530|(4|51)(2|40))0|(3|(4|51)1|(52|(4|51)50)0)(501|(4|5050)0)*(1|(3|50(2|40))0))*55)*|(3|55(2|50)0|5(3|51)(1|40)|(4|52|5(3|51)50)(51|(4|550)50)*(2|530|(4|550)(1|40)))*|(51|(4|550)50|(2|530|(4|550)(1|40))(3|55(2|50)0|5(3|51)(1|40))*(4|52|5(3|51)50))*|(50(51)*(4|550)|(1|40|50(51)*(2|530))(3|55(2|50)0|(4|52)(51)*(2|530))*(5(3|51)|(4|52)(51)*(4|550)))*|(0(3|5(3|51)1|(4|52|5(3|51)50)(51|(4|550)50)*(2|(4|550)1))*(55(2|50)|5(3|51)4|(4|52|5(3|51)50)(51|(4|550)50)*(53|(4|550)4)))*|(0(51)*(4|550)5|0(51)*(2|530|(4|550)(1|40))(3|55(2|50)0|5(3|51)(1|40)|(4|52)(51)*(2|530|(4|550)(1|40)))*(5(3|51)5|(4|52)(51)*(4|550)5))*|((1|5050)(450)*5|(30|50(1|40)|(1|5050)(450)*(2|4(1|40)))(3|55(2|50)0|5(3|51)(1|40)|(4|52|5(3|51)50)(450)*(2|4(1|40)))*(4|52|5(3|51)50)(450)*5)*|(050(51|450)*55|(0(1|40)|050(51|450)*(2|530|4(1|40)))(3|55(2|50)0|5(3|51)(1|40)|(4|52|5(3|51)50)(51|450)*(2|530|4(1|40)))*(4|52|5(3|51)50)(51|450)*55)*|((5(2|50)0|(3|51)(1|40)|(2|(3|51)50)(51|(4|550)50)*(2|530|(4|550)(1|40)))(3|4(51|(4|550)50)*(2|530|(4|550)(1|40)))*5)*|(((2|50)0|1(1|40)|150(51|(4|550)50)*(2|530|(4|550)(1|40)))(3|53(1|40)|(4|52|5350)(51|(4|550)50)*(2|530|(4|550)(1|40)))*55)*|(00(3|5520|5(3|51)(1|40)|(4|52|5(3|51)50)(51|(4|550)50)*(2|530|(4|550)(1|40)))*555)*|(4|5(3|5(2|5(1|50))))*|((3|5(2|5(1|50)))4*5)*|((2|5(1|50))(4|53)*55)*|((1|50)(4|5(3|52))*555)*|(0(4|5(3|5(2|51)))*5555)*|(5)*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3788
#T: Siteswap validator
#A: Adrian G
#D: Matches siteswaps with max height 6
#D: --note-- most of the regex is cut off for some reason so it doesn't work
^(0*|(1|(2|(3|(4|(5|60)0)0)0)0)*|(01*(2|(3|(4|(5|60)0)0)0))*|(00(1|20)*(3|(4|(5|60)0)0))*|(000(1|(2|30)0)*(4|(5|60)0))*|(0000(1|(2|(3|40)0)0)*(5|60))*|(00000(1|(2|(3|(4|50)0)0)0)*6)*|(2|((6(4|60)0|(5|61)(3|50))0|(4|(5|61)1)(2|40)|(62|(4|(5|61)1)60)(060)*0(2|40))0|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|(62|(4|(5|61)1)60)(060)*050)0)(6011|(5|60160)(060)*01|(4|602|60600|60150|(5|60160)(060)*050)0)*(1|(3|60(3|50)0|601(2|40)|(5|60160)(060)*0(2|40))0))*|(6011|(5|60160)(060)*01|(4|602|60600|60150|(5|60160)(060)*050)0|(1|(3|60(3|50)0|601(2|40)|(5|60160)(060)*0(2|40))0)(2|((6(4|60)0|(5|61)(3|50))0|(4|(5|61)1)(2|40)|(62|(4|(5|61)1)60)(060)*0(2|40))0)*(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|(62|(4|(5|61)1)60)(060)*050)0))*|(0(2|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|(62|(4|(5|61)1)60)(060)*050)0)(6011|(5|60160)(060)*01|(4|602|60600|60150|(5|60160)(060)*050)0)*1)*((6(4|60)0|(5|61)(3|50))0|(4|(5|61)1)(2|40)|(62|(4|(5|61)1)60)(060)*0(2|40)|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|(62|(4|(5|61)1)60)(060)*050)0)(6011|(5|60160)(060)*01|(4|602|60600|60150|(5|60160)(060)*050)0)*(3|60(3|50)0|601(2|40)|(5|60160)(060)*0(2|40))))*|(0(6011|(5|60160)(060)*01)*(4|602|60600|60150|(5|60160)(060)*050)|0(6011|(5|60160)(060)*01)*(1|(3|60(3|50)0|601(2|40)|(5|60160)(060)*0(2|40))0)(2|((6(4|60)0|(5|61)(3|50))0|(4|(5|61)1)(2|40)|(62|(4|(5|61)1)60)(060)*0(2|40))0|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01)(6011|(5|60160)(060)*01)*(1|(3|60(3|50)0|601(2|40)|(5|60160)(060)*0(2|40))0))*((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|(62|(4|(5|61)1)60)(060)*050|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01)(6011|(5|60160)(060)*01)*(4|602|60600|60150|(5|60160)(060)*050)))*|(060|(01|0500)(6011|(4|602|60600|60150)0)*(5|60160)|(0(2|40)0|(01|0500)(6011|(4|602|60600|60150)0)*(1|(3|60(3|50)0|601(2|40))0))(2|((6(4|60)0|(5|61)(3|50))0|(4|(5|61)1)(2|40))0|(3|(4|(5|61)1)1|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50)0)(6011|(4|602|60600|60150)0)*(1|(3|60(3|50)0|601(2|40))0))*(62|(4|(5|61)1)60|(3|(4|(5|61)1)1|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50)0)(6011|(4|602|60600|60150)0)*(5|60160)))*|(600|(1|500)((4|602|60600)0)*(601|50)|((2|40)0|(1|500)((4|602|60600)0)*(1|(3|60(3|50)0)0))(2|(6(4|60)0|(5|61)(3|50))00|(3|((5|61)2|(63|(5|61)60)0)0)((4|602|60600)0)*(1|(3|60(3|50)0)0))*(4|(5|61)1|620|(3|((5|61)2|(63|(5|61)60)0)0)((4|602|60600)0)*(601|50)))*|(00(2|((4|(5|61)1)2|(62|(4|(5|61)1)60)(060)*02)0|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|(62|(4|(5|61)1)60)(060)*050)0)(6011|(5|60160)(060)*01|(4|602|60600|60150|(5|60160)(060)*050)0)*(1|(3|6012|(5|60160)(060)*02)0))*(6(4|60)0|(5|61)(3|50)|(4|(5|61)1)4|(62|(4|(5|61)1)60)(060)*04|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|(62|(4|(5|61)1)60)(060)*050)0)(6011|(5|60160)(060)*01|(4|602|60600|60150|(5|60160)(060)*050)0)*(60(3|50)|6014|(5|60160)(060)*04)))*|(00(6011|(5|60160)(060)*01|(4|602)0)*(6060|6015|(5|60160)(060)*05)|00(6011|(5|60160)(060)*01|(4|602)0)*(1|(3|60(3|50)0|601(2|40)|(5|60160)(060)*0(2|40))0)(2|((6(4|60)0|(5|61)(3|50))0|(4|(5|61)1)(2|40)|(62|(4|(5|61)1)60)(060)*0(2|40))0|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|(5|61)20)(6011|(5|60160)(060)*01|(4|602)0)*(1|(3|60(3|50)0|601(2|40)|(5|60160)(060)*0(2|40))0))*(63|(5|61)60|(4|(5|61)1)5|(62|(4|(5|61)1)60)(060)*05|(3|(4|(5|61)1)1|(62|(4|(5|61)1)60)(060)*01|(5|61)20)(6011|(5|60160)(060)*01|(4|602)0)*(6060|6015|(5|60160)(060)*05)))*|(006|(001|00500)(6011|501|(4|602|60600|60150|5050)0)*(6016|506)|(00(2|40)0|(001|00500)(6011|501|(4|602|60600|60150|5050)0)*(1|(3|60(3|50)0|601(2|40)|50(2|40))0))(2|((6(4|60)0|(5|61)(3|50))0|(4|(5|61)1)(2|40)|620(2|40))0|(3|(4|(5|61)1)1|6201|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|62050)0)(6011|501|(4|602|60600|60150|5050)0)*(1|(3|60(3|50)0|601(2|40)|50(2|40))0))*((4|(5|61)1)6|6206|(3|(4|(5|61)1)1|6201|((5|61)2|(63|(5|61)60)0|(4|(5|61)1)50|620

#U: http://regexlib.com/REDetails.aspx?regexp_id=3789
#T: Date RegEx Pattern
#A: Arthur LORENT
#D: Very secure RegEx pattern control for your date entries in english/us format YYYY/MM/DD or YYYY-MM-DD (very easy to only authorize / or -).
#D: 28,29,30,31 days month are controled according to the month & leap year.
#D: Check it ! Tested and functionnal !
(((19|20)([2468][048]|[13579][26]|0[48])|2000)/02/29|((19|20)[0-9]{2}/(0[469]|11)/(0[1-9]|[12][0-9]|30)|(19|20)[0-9]{2}/(0[13578]|1[02])/(0[1-9]|[12][0-9]|3[01])|(19|20)[0-9]{2}/02/(0[1-9]|1[0-9]|2[0-8]))) 

#U: http://regexlib.com/REDetails.aspx?regexp_id=3790
#T: MySQL datetime RegEx Pattern
#A: Arthur LORENT
#D: Very secure MySQL datetime RegEx pattern control.
#D: Strictly allow the following format only :
#D: "YYYY-MM-DD HH:MM:SS"
#D: Verify if date is correct (28,29,30,31 days accoring to the month. Leap years with 29/02 also controled.
((((19|20)([2468][048]|[13579][26]|0[48])|2000)-02-29|((19|20)[0-9]{2}-(0[469]|11)-(0[1-9]|[12][0-9]|30)|(19|20)[0-9]{2}-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01])|(19|20)[0-9]{2}-02-(0[1-9]|1[0-9]|2[0-8])))\s([01][0-9]|2[0-3]):([012345][0-9]):([012345][0-9])) 

#U: http://regexlib.com/REDetails.aspx?regexp_id=3791
#T: Regex Name Value Pair
#A: Yasin Kuyu
#D: This pattern can parse the name and value.
(([\w|\.]*)\s*={1}\s*(.*?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3792
#T: Portuguese Phone/Mobile number
#A: Carla
#D: Validates mobile and land-line numbers. Also validates international Portuguese code +351.
((\+351|00351|351)?)(2\d{1}|(9(3|6|2|1)))\d{7}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3793
#T: UK Postcode District (Loose Match)
#A: Matthew Harris
#D: The postcode district is the first block of a UK postcode. For example with DN55 1PT it would match DN55. Its a loose match as it only ensures that the format is correct, it doesn't validate the letters and numbers. It doesn't let in the non-geographic codes postcodes SAN TA1 and GIR 0AA. It will pull out the first block of any of the matching examples below. Examples of the names of the different parts of a UK postcode can be found here: http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Life-cycle_of_post_codes
[A-Za-z]{1,2}[\d]{1,2}[A-Za-z]{0,1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3794
#T: UK Postcode Sector (Loose Match)
#A: Matthew Harris
#D: The postcode sector is the first block (the postcode district) of a UK postcode plus the first number of the second block. For example with DN55 1PT it would match DN55 1. Its a loose match as it only ensures that the format is correct, it doesn't validate the letters and numbers. It doesn't let in the non-geographic codes postcodes SAN TA1 and GIR 0AA. It will pull out the first block & the sector code of any of the matching examples below. Examples of the names of the different parts of a UK postcode can be found here: http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom#Life-cycle_of_post_codes
[A-Za-z]{1,2}[\d]{1,2}[A-Za-z]{0,1}\s*[\d]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3795
#T: Telephone Number
#A: mAsT3RpEE
#D: An inefficient number validator. PHP and JavaScript compatible.
#D: Dashes [-] can be replaced by " " or "."
#D: Support for extention /000
^([(]?[+]{1}[0-9]{1,3}[)]?[ .\-]?)?[(]?[0-9]{3}[)]?[ .\-]?([0-9]{3}[ .\-]?[0-9]{4}|[a-zA-Z0-9]{7})([ .\-]?[/]{1}[ .\-]?[0-9]{2,4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3796
#T: RFC822 Email Address (2011)
#A: mAsT3RpEE
#D: RFC822 email address validator. A bit outdated. Please confirm with current RFC document.
#D: PHP and JavaScript compatible.
^(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){255,})(?!(?:(?:\\x22?\\x5C[\\x00-\\x7E]\\x22?)|(?:\\x22?[^\\x5C\\x22]\\x22?)){65,}@)(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22))(?:\\.(?:(?:[\\x21\\x23-\\x27\\x2A\\x2B\\x2D\\x2F-\\x39\\x3D\\x3F\\x5E-\\x7E]+)|(?:\\x22(?:[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x21\\x23-\\x5B\\x5D-\\x7F]|(?:\\x5C[\\x00-\\x7F]))*\\x22)))*@(?:(?:(?!.*[^.]{64,})(?:(?:(?:xn--)?[a-z0-9]+(?:-[a-z0-9]+)*\\.){1,126}){1,}(?:(?:[a-z][a-z0-9]*)|(?:(?:xn--)[a-z0-9]+))(?:-[a-z0-9]+)*)|(?:\\[(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){7})|(?:(?!(?:.*[a-f0-9][:\\]]){7,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,5})?)))|(?:(?:IPv6:(?:(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){5}:)|(?:(?!(?:.*[a-f0-9]:){5,})(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3})?::(?:[a-f0-9]{1,4}(?::[a-f0-9]{1,4}){0,3}:)?)))?(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))(?:\\.(?:(?:25[0-5])|(?:2[0-4][0-9])|(?:1[0-9]{2})|(?:[1-9]?[0-9]))){3}))\\]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3797
#T: Name
#A: mAsT3RpEE
#D: Validate Firstname or Lastname (PHP and JavaScript Compatible).
#D: Support for Local characters. Max Length 63 characters.
^[\wàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛäëïöüÿÄËÏÖÜŸåÅæÆãñõÃÑÕçÇðÐøØœšŠŒß¿¡]{1}[\w àèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛäëïöüÿÄËÏÖÜŸåÅæÆãñõÃÑÕçÇðÐøØœšŠŒß¿¡\']{4,62}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3798
#T: Full Name / Company Name
#A: mAsT3RpEE
#D: Matches two words or One company name. (PHP and JavaScript compatible).
#D: Support for local characters.
^[\wàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛäëïöüÿÄËÏÖÜŸåÅæÆãñõÃÑÕçÇðÐøØœšŠŒß¿¡]{2,24}[_ \-.]{1}[\w àèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛäëïöüÿÄËÏÖÜŸåÅæÆãñõÃÑÕçÇðÐøØœšŠŒß¿¡\']{1,32}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3799
#T: :))
#A: aaa
#D: WHat the fuck?
\w+@\w+\.\w+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3800
#T: Short Email
#A: Heitor Neiva
#D: Simple email validator.
#D: Should cover most emails.
^.+@[^\.].+\.[a-z]{2,}(\.[a-z]{2,}$|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3801
#T: HTML ID
#A: Alexander Ross
#D: Validate a proper HTML ID attribute. By definition, this must start with a letter, and only include letters, numbers, colons, underscores, hyphens and periods
^([A-Za-z]){1}([A-Za-z0-9-_.\:])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3802
#T: Timespan
#A: HJennerway
#D: Used for matching fuzzy timespans given in days, hours minutes, seconds and any combination thereof.
(\d+(?:\s+d(?:ay)?s?))?\s?(\d+(?:\s+h(?:ou)?r?s?))?\s?(\d+(?:\s+m(?:in)?(?:ute)?s?))?\s?(\d+(?:\s+s(?:ec)?(?:ond)?)?s?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3803
#T: Total Days of the Year
#A: Vinicius Castro
#D: Limit the inclusion of days of the year, between 1 and 366
^([1-9]|[1-9]\d|[1-2]\d{2}|3[0-6][0-6])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3804
#T: Egypt Mobile Numbers
#A: Ahmed Yehia Khairy
#D: Enable you to validate Egypt mobile numbers from 3 mobile networks (Vodafone, Mobinil, Etisalat)
^(010|011|012)[0-9]{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3806
#T: Mobile Number Validation
#A: Deepak Goswami
#D: Indian mobile no. with country code as optional
#D: example:--
#D: function validate()
#D: {
#D: var filter1=/^((\+)?(\d{2}[-]))?(\d{10}){1}?$/,filter2=/^((\+)?(\d{2}[-])(\d{2}[-]))?(\d{8}){1}?$/;
#D: var mobileNo=$("#mobileNo").val(),temp=0;
#D: if (filter1.test(mobileNo)) {
#D: //temp++;
#D: }
#D: if (filter2.test(mobileNo)) {
#D: temp++;
#D: }
#D: if (temp>0) {
#D: alert("Matched with given format!");
#D: } else {
#D: alert("Not Matched with given format!");
#D: }
#D: here mobileNo is an input filed in my html page.. you can use it as per your need..
^((\+)?(\d{2}[-]))?(\d{10}){1}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3807
#T: Matching currency
#A: Rob
#D: Matches a currency value with or without the 3 letter currency code or the Dollar, Euro or Yen signs. The code or currency sign can be in front or in the end of the value. Also supports additional whitespace character between the number and the sign, either in front or in the end. Unicode (UTF-8) compatible and can be used in Java or .NET too.
[\u0024\u20AC\u00A5A-Z\s]{0,4}[0-9.,]+[\s\u0024\u20AC\u00A5A-Z]{0,4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3808
#T: UK Passport Number
#A: Hayley
#D: I think there are issues with some travel websites who don't have the option of parsing the short UK Passport number (the one at the top right hand corner)
#D: This one looks for both the long one(at the bottom) and the short.
#D: Matches uppercase only.
#D: Spaces are optional in both
^(\d{9}\s?GBR|\d{10}\s?GBR\s?\d{7}\s?[U,M,F]\s?\d{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3809
#T: unicode persian alphabet
#A: Farzin Hamrahi
#D: This Regex chceck an input string for persian unicode alphabet characters. For Example In C#.NET: Regex.IsMatch(Text, "^[\u0600-\u06ff\s]+$|[\u0750-\u077f\s]+$|[\ufb50-\ufc3f\s]+$|[\ufe70-\ufefc\s]+$|[\u06cc\s]+$|[\u067e\s]+$|[\u06af\s]$|[\u0691\s]+$|^$");
^[\u0600-\u06ff\s]+$|[\u0750-\u077f\s]+$|[\ufb50-\ufc3f\s]+$|[\ufe70-\ufefc\s]+$|[\u06cc\s]+$|[\u067e\s]+$|[\u06af\s]$|[\u0691\s]+$|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3811
#T: Data com ano bissexto (Date with leap year)
#A: Andre Banderas
#D: Datas com os anos bissextos. Anos de 2 ou 4 digitos
#D: Dates with leap years. Years 2 or 4 digits
^((29\/0?2\/[0-9]{0,2}(04|08|92|96|([1|3|5|7][2|6])|[2|4|6|8][0|4|8]))|(((28|[12][0-7]|0?[1-9])\/0?2)|((30|[12][0-9]|0?[1-9])\/(0?(4|6|9)|11))|((31|[12][0-9]|0?[1-9])\/(0?(1|3|5|7|8))|(10|12)))\/(\d{2}|\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3812
#T: Numero de telefone para o Brasil.
#A: Andre Banderas
#D: Número de telefones Brasileiros inclusive celular de São Paulo
^(\(\d{2}\)?\s?|\d{2}(\-|\s))?\d{2,4}(\-|\s)?\d{4,5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3813
#T: phone no validation
#A: krishan kumar
#D: i want phone no regular expression validation
#F: ;
^\+?([0-9]{2})\)?[-. ]?([0-9]{4})[-. ]?([0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3814
#T: Number
#A: schooley
#D: Matches any floating point numeric string with or without commas.
^-?(\d+(,\d{3})*(\.\d+)?|\d?(\.\d+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3815
#T: URL Validation
#A: Kuldeep Singh
#D: allow almost url patters
(((ftp|http|https):\/\/)|(\w+:{0,1}\w*@))?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3816
#T: GPS DD
#A: Mimic
#D: Matches Google Maps style GPS Decimal format, but not Northing, Easting style or DMS
(\d{1,3}[\.]\d*)[, ]+-?(\d{1,3}[\.]\d*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3817
#T: Emote expression in RPG Shard
#A: Stefano Meoni
#D: Emote expression in RPG Shard ex. hello *smile*
[*][\w ]*[*]

#U: http://regexlib.com/REDetails.aspx?regexp_id=3818
#T: Sql Injection DML
#A: Adolfo Araya
#D: Reemplaza los Sql Injection del Tipo DML.
#D: Previo a esto se deben reemplazar los tab & new line con:
#D: \t|\r|\n
#D: \s+
SELECT\s.*FROM\s.*|DELETE\s+FROM\s.*|UPDATE\s.*SET\s.*|INSERT\s+INTO\s.*\sVALUES|MERGE\s.*ON\s.*|LOCK\s*.*\s*TABLE\s.*|\s+OR\s.*=.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3819
#T: Sql Injection DDL
#A: Adolfo Araya
#D: Reemplaza los Sql Injection del Tipo DDL.
#D: Previo a esto se deben reemplazar los tab & new line con:
#D: \t|\r|\n
#D: \s+
(TRUNCATE|CREATE|ALTER|DROP)\s+(TABLE|DATABASE)\s.*|COMMENT\s+ON\s+(TABLE|COLUMN)\s.*|RENAME\s.*TO\s.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3820
#T: Sql Injection DCL
#A: Adolfo Araya
#D: Reemplaza los Sql Injection del Tipo DCL.
#D: Previo a esto se deben reemplazar los tab & new line con:
#D: \t|\r|\n
#D: \s+
GRANT\s.*ON\s.*TO\s.*|REVOKE\s.*ON\s.*FROM\s.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3821
#T: Sql Injection TCL
#A: Adolfo Araya
#D: Reemplaza los Sql Injection del Tipo TCL.
#D: Previo a esto se deben reemplazar los tab & new line con:
#D: \t|\r|\n
#D: \s+
;\s+(SAVEPOINT|COMMIT|ROLLBACK|SET\s+TRANSACTION)\s.*;

#U: http://regexlib.com/REDetails.aspx?regexp_id=3822
#T: Sql Injection Where Condition
#A: Adolfo Araya
#D: Reemplaza los Sql Injection del Tipo Where Condition.
#D: Previo a esto se deben reemplazar los tab & new line con:
#D: \t|\r|\n
#D: \s+
(\s+OR\s.*(\=|\<\>|\!=|IS\s+|IS\s+NOT\s+|IN\s+\(.*\)|LIKE\s+).*")|(\s+AND\s.*(\=|\<\>|\!=|IS\s+|IS\s+NOT\s+|IN\s+\(.*\)|LIKE\s+).*)|(;\s+USE\s.*|;\s+EXEC\s.*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3823
#T: Prashant
#A: Prashant Sankpal
#D: i want this expression 
MMM\yyyy

#U: http://regexlib.com/REDetails.aspx?regexp_id=3824
#T: Strong Password
#A: Ankhaa
#D: Password expresion that requires one lower case letter, one upper case letter, one digit, one non-word character, 8>= length and no spaces. 
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W)(?!.*\s).{8,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3825
#T: PAC Code
#A: Dimitri Kouvdis
#D: Simple Pac code regex, first 3 should be letters and last 6 should be digits.
^[a-zA-Z]{3}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3826
#T: URL with Cyrillic symbols
#A: Лоскутников
#D: Check URL with Cyrillic symbols
([hH][tT][tT][pP]|[fF][tT][pP]|[hH][tT][tT][pP][sS]):\/\/[\w\u0410-\u042F\u0430-\u044F\u0401\u0451\-_]+(\.[\w\u0410-\u042F\u0430-\u044F\u0401\u0451\-_]+)+([\w\u0410-\u042F\u0430-\u044F\u0401\u0451\-\.,@?^=%&:/~\+#]*[\w\u0410-\u042F\u0430-\u044F\u0401\u0451\-\@?^=%&/~\+#])?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3827
#T: Iran Mobile Number
#A: bahman khalafi
#D: This is any mobile in Iran validation
#D: MCI , Irancell , Rightel , Talia
^((\+989)|(989)|(00989)|(09|9))([1|2|3][0-9]\d{7}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3831
#T: Unit Address (digital Mac Address)
#A: Kari
#D: When working w/ Moto STB, we need to sometimes use the unit address instead of the mac address. The format is always 000-12345-12345-123
^(000-)(\\d{5}-){2}\\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3832
#T: Rather Complete URL regex
#A: Dobri
#D: This works for valid URLs of all sizes. All slashes have been escaped, replace \/ with / to undo.
((http(s)?:\/\/)?[a-z0-9-]{3,}(\.[a-z0-9-]{2,})+(:[0-9]+)?((\/[^\/\s.]+\.[^\/\s.,!]+)|(\/[^\/\s.,!]*))*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3833
#T: Email
#A: Muhammad Noaman Akram
#D: Email Regular exprasion
[a-zA-Z0-9.!#$%&'*+-/=?\^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=3834
#T: domain
#A: kael
#D: domain
#F: i
^[a-z0-9]+(?:-[a-z0-9])*\.(?:(?:(?:com|net|org|gov|edu|mil|biz|tel|xxx|int|info|name|aero|asia|mobi|coop|museum)(?:\.[a-z]{2})?)|[a-z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3835
#T: Connection string
#A: viju
#D: matches connection string with these parameters only with space 
(?:(?:Data Source)|(?:Server))=([\s*\w\.]+?);\s*?(?:(?:Initial Catalog)|(?:Database))=(\s*\w+?);\s*?(?:(?:User Id)|(?:Uid))=(\s*\w+?);\s*?(?:(?:password)|(?:Pwd))=(\s*\w+?);\s*?(?:(?:Integrated Security)|(?:Integrated security))=(\s*\w*);$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3839
#T: YA International phone number
#A: maurizio trezza
#D: International phone number with 6 capturing groups:
#D: international prefix (00 xor '+');
#D: 1 to 3 international code number, no zero allowed;
#D: optional space or hyphen;
#D: 0 to 3 local prefix number;
#D: optional space or hyphen;
#D: 5 to 11 local number without spaces or hyphens;
^((\+|00)[1-9]{1,3})?(\-| {0,1})?(([\d]{0,3})(\-| {0,1})?([\d]{5,11})){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3840
#T: P O Box
#A: Senthur RK
#D: P O Box Regex
\b[P|p]?(OST|ost)?\.?\s*[O|o|0]?(ffice|FFICE)?\.?\s*[B|b][O|o|0]?[X|x]?\.?\s?[#]?\s?([0-9])([0-9a-zA-Z]*)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3841
#T: Validar HH:MM de una cadena
#A: Juan Luis Ortiz de la Huerta
#D: Permite validar si una cadena contieneel formato "hh:mm"(formato de 24 horas)
^(((0[0-9])|(1[0-9])|(2[0-3])):[0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3842
#T: Basic Email Validation
#A: Slavik Meltser
#D: Validates most common varieties of email addresses.
#D: Will accept domain with character-valid TLD, and also will accept an IPv4 address.
#D: It doesn't support validation of IPv6 address.
#D: Will also accept a valid username with tags.
^([a-z0-9]+[.+-])*([a-z0-9]+)+@(([a-z0-9]+[.-])+([a-z]{2,})$|(([0-9]|[1-9][0-9]|1[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\.|$)){4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3844
#T: Regex
#A: urvi
#D: Can some one help for this regex
(^13[a-z]))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3846
#T: Datetime (YYYY-MM-DD HH:mm:ss.fff) with quotation marks.
#A: Varoitere
#D: Matches a string if it is a valid datetime in the format of 'YYYY-MM-DD HH:mm:ss.fff'
#D: . Big parts of it where taken from other samples on RegexLib. Please feel free to take it apart and improve it.
\'20\d{2}(-|\/)((0[1-9])|(1[0-2]))(-|\/)((0[1-9])|([1-2][0-9])|(3[0-1]))(T|\s)(([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9]).([0-9][0-9][0-9])\'

#U: http://regexlib.com/REDetails.aspx?regexp_id=3847
#T: Password
#A: Mustafa Iqbal
#D: It Required Input of a combination of Numbers & Strings also length must be greater than 6...
(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,8})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3848
#T: Email
#A: Mustafa Iqbal
#D: Email Validator as per Standard all validations are included, check and rate please.
^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3849
#T: Pakistan Cell Number
#A: Mustafa Iqbal
#D: I made it because, user must be enter number in standard form, so if you want to use it for sms in future, you will found it very useful, Please Rate!
^[+]\d{2}?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3850
#T: Pakistan National Id Card CNIC
#A: Mustafa Iqbal
#D: It Required Input of National ID Card Number with or without dash(-), Please Rate!
^\d{5}[- .]?\d{7}[- .]?\d{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3851
#T: GUID Validation
#A: David Tupponce
#D: This validates GUID strings. It is not case sensitive and requires the beginning and ending curly brackets - '{' and '}' - to be present.
^\{[A-Fa-f\d]{8}-[A-Fa-f\d]{4}-[A-Fa-f0\d]{4}-[A-Fa-f\d]{4}-[A-Fa-f\d]{12}\}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3852
#T: Password regex
#A: Swetha
#D: Any alphabets are allowed.Passsword must contain atleast 1 digit and none of the characters are allowed.
^(?=.*\d)\w+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3853
#T: Egyptian Mobile phone
#A: Ahmed Alaa Ahmed
#D: help you to use it in your developing project for egyptians
^[0-9]{11}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3854
#T: Egyptian Mobile phone
#A: Ahmed Alaa Ahmed
#D: help you to use it in your developing project for egyptians
^[0-9]{11}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3855
#T: Hijri Date 
#A: Shah Malik M Quadri
#D: Matches DD/MM/YYYY for Arabic Hijri Dates. It starts range from 1434 ( current year ) to 1499
((0[1-9])|(1[0-9])|(2[0-9])|(3[0]))/((0[1-9])|(1[0-2]))/14[3-9]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3856
#T: css invalid classname
#A: fabio vergani
#D: match css invalid classname
([^\w\s\-\_])|(\b\d)|(\b[^a-zA-z\-\s]\b)|(\[^a-zA-z\-\s]+\s)|(\;+[(\s)(\d)(\W)])

#U: http://regexlib.com/REDetails.aspx?regexp_id=3858
#T: Phone Number
#A: Sergei Lewandowski
#D: Validate Russian phone number (mobile, landline)  that accept a space, a dash between the numbers.
([+]?\d[ ]?[(]?\d{3}[)]?[ ]?\d{2,3}[- ]?\d{2}[- ]?\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3859
#T: RFC5322 compliant email address validation
#A: George Pollard
#D: This is a .NET regex that validates email addresses, according to RFC5322.
#D: It uses .NET's "balancing groups" feature.
^(?'localPart'((((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?(([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)|("(([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?(([\u0021\u0023-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])))*([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?"))((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?)(\.(((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?(([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)|("(([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?(([\u0021\u0023-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])))*([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?"))((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[\t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?))*))@(?'domain'((((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?(([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)|("(([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?(([\u0021\u0023-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])))*([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?"))((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?)(\.(((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[\t]+)+))*?(([a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)|("(([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?(([\u0021\u0023-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])))*([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)?"))((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?))*)|(((\((((?'paren'\()|(?'-paren'\))|([\u0021-\u0027\u002a-\u005b\u005d-\u007e]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f])|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+)|\\([\u0021-\u007e]|[ \t]|[\r\n\0]|[\u0001-\u0008\u000b\u000c\u000e-\u001f\u007f]))*(?(paren)(?!)))\))|([ \t]+((\r\n)[ \t]+)?|((\r\n)[ \t]+)+))*?\[(([ \t]+((\r\n)[ \

#U: http://regexlib.com/REDetails.aspx?regexp_id=3860
#T: Indian Mob. No
#A: Bheemsen Singh
#D: This regular expression is to validate indian mobile number`s of any mobilbe operator start with any series likes 9xxxxxxxxx,8xxxxxxxxx,7xxxxxxxxx,6xxxxxxxxx etc
^((\+)?(\d{2}[-]))?([0])?(\d{10}){1}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3861
#T: Mundivox pass e login
#A: Tristriaauf
#D: Gives webmail website acount, login and password. Do not work for mobile browsers. 
actionID=&url=&load_frameset=1&autologin=0&anchor_string=&server_key=imap&imapuser=(.*)&pass=(.*)&new_lang=pt_BR&select_view=imp

#U: http://regexlib.com/REDetails.aspx?regexp_id=3862
#T:  English letters
#A: Mohammadreza  Dehnashe
#D: Using regular expressions, you can just use the English alphabet.
^([a-zA-Z])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3863
#T: Musical chords in online chord sheets
#A: Steve Blair
#D: I crafted this crazy regex for matching chords in song sheets you find online.  It matches a ton of different combinations, including some very weird/advanced chords like double suspended and chords with extra flats/sharps.
#D: The whole matching part is enclosed in parentheses so I can quickly find chords in a document and wrap them with square brackets.
(?<=(\s|-|\/|\\|\())([A-G][b#]?[m]?((6\/9|11|13|[679]))?((dim|dom|aug|sus|min|maj|add|no|m|M|-|\+)(11|13|15|[23456789])?){0,2}([b#\-\+][59]){0,2}(\/[A-G][b#]?)?)(?=(\s|-|\/|\\|\)|$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3864
#T: UK Company Number
#A: Graham Harper
#D: Matches a UK company number. According to HMRC these must have 8 digits, of which up to the first two may be an alpha prefix. This doesn't test for validity of the prefix.
^(([0-9]{2})|([a-zA-Z][0-9])|([a-zA-Z]{2}))[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3865
#T: UK Company Number
#A: Graham Harper
#D: Validates a UK company registration number according to the range of prefixes allowed by the HMRC
^([0-9]{8})|(R[0-9]{7})|((AC|FC|GE|GN|GS|IC|IP|LP|NA|NF|NI|NL|NO|NP|NR|NZ|OC|RC|SA|SC|SF|SI|SL|SO|SP|SR)[0-9]{6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3866
#T: French phone number
#A: axi
#D: Match french phone number with or without french international dialling code
^(0|\+33)[1-9]([-. ]?[0-9]{2}){4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3867
#T: n of digits with any number of spaces
#A: kibria
#D: here n=11;
#D: matches:
#D: 012 34 123456 ;
#D: 012 34 123 456 ;
#D: 01234 123456
^(\s*\d\s*){11}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3868
#T: Indian PAN Code
#A: Michael Sogos
#D: Pan is composed by 5 letters, 4 number, 1 letter. Its length is always of 10 alphanumeric chars.
^([A-Za-z]{5})([0-9]{4})([A-Za-z]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3869
#T: DateTime Regular Expression (regex)
#A: Yasir Ali
#D: DateTime Validation:
#D: For case incensitive :
#D: Start with ^(?i:
#D: And End With )$ .
#D: This will not work for javascript but will work for .net (As I am .net guy :)), you can check with other languages also.
^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])[./-]((JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)|([0-9]{2}))[./-]([0-9]{4}|[0-9]{2})((?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3870
#T: Find standalone integers
#A: Anders Blom
#D: Locates standalone integers, like the 1 and 4 in 1/4, but doesn't match the 5 in 6e-5 (nor the 6, in fact). I use this to convert 1/4 to 1.0/4.0 so that it can be evaluated as a floating number, since 1/4 by itself will normally eval to 0 (integer division). However, 6e-5.0 would not be valid.
(?<!\.)(?<!e[+-])(\b\d+\b)(?!\.)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3872
#T: Non localised currency format
#A: Paul Verhulpen
#D: Expression to validate currency formatted numbers without the currency symbol. This is an updated version of my previous expression and now works in ASP.NET regular expression validators.
^(\d?)*\.?(\d{1}|\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3873
#T: URL finder
#A: Sergi
#D: This regex will match a completly full URL. It filters everything that maybe a URL.
#D: VERY USEFUL for Pirni Pro tool too identify completly websites.
(([\w-]+://?|www[.])[^\s()<>]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3874
#T: Support Arabic or English letter only
#A: Emad Faird
#D: To support Name contains Arabic latter or English letter only
#F: ,
^[a-zA-Z \u0600-\u065F\u066A-\u06EF\u06FA-\u06FF]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3875
#T: UK number plates
#A: Pete Watts
#D: Matches all UK number plates used in England, Scotland, Wales and Northern Ireland, including the dateless formats pre-1932 and 1932-1963 formats, the year prefix and suffix formats, and the current style format brought into use from 2001 onwards.
^((?:[A-HJ-PR-Y][A-HJ-PR-Y]\s?(?:0[2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3})|(?:[A-Z](?:[IZ][A-Z]|[A-Z][IZ])\s?\d{1,4})|(?:[A-HJ-NP-TV-Y]\s?\d{1,3}\s?[A-Z]{3})|(?:[A-Z]{3}\s?\d{1,3}\s?[A-HJ-NPR-TV-Y])|(?:\d{1,3}\s?[A-HJ-Y]{1,3}|[A-HJ-Y]{1,3}\s?\d{1,3})|(?:\d{1,4}\s?(?:[IZ][A-Z]|[A-Z][IZ]))|(?:[A-Z]{1,2}\s?\d{1,4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3876
#T: ROI Mobile Telephone Number
#A: Tim
#D: Matches mobile telephone numbers in Republic of Ireland.  Allows for spaces at any point after the initial 08x part.  Will only validate legitimate mobile prefixes, will not validate old pager numbers (082).
^0(83|85|86|87|88|89)\s?\d{1}\s?\d{1}\s?\d{1}\s?\d{1}\s?\d{1}\s?\d{1}\s?\d{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3877
#T: Find "to" 4 digit SMS number
#A: fuller namer
#D: Catch text containing "to " followed by 4 digit number. Not more than 4 digits, ie 5 or 8 digits.
(t|T)(o|O)\s\d{4}($|\D)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3878
#T: ITU E.123 Phone Validation
#A: Julio Vega
#D: ITU E.123  International Validation Phone. plus initial and only numbers and white spaces.
^\+\d{1,3}\s\d{3}\s\d{3}\s\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3879
#T: R.I.F. (Registro de Información Fiscal) Venezuela
#A: Daniel Peña
#D: Validation for Venezuela's R.I.F. with format VXXXXXXXXX, EXXXXXXXXX, JXXXXXXXXX, PXXXXXXXXX, GXXXXXXXXX (1 letter and 9 numeric digits).
^[VEJPG]{1}[0-9]{9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3880
#T: Cellphone number (Venezuela)
#A: Daniel Peña
#D: Validation for cellphone number (Venezuela) with format 0412XXXXXXX, 0414XXXXXXX, 0416XXXXXXX, 0424XXXXXXX, 0426XXXXXX.
^((041(2|4|6))|(042(4|6)))([0-9]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3881
#T: Fraction Imperial unit
#A: Alon
#D: Accepts fractional inches and feet
(\\d+'{1}-?\\d*\"?\\s?)|(\\d+'{1}-?\\d*\\s?\\d?/{1}\\d{1}\"?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3882
#T: Engineering Imperial units
#A: Alon
#D: Accepts engineering imperial units
\\d+'{1}-?\\d*\"?\\.?\\d*\"?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3883
#T: finding time
#A: Mohamed El Sharnoby
#D: time in any format that a user can write
([0-9]+:)?[0-9]+\s*(am|pm)|[0-9]+:[0-9]+\s*(am|pm)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=3884
#T: Date in many formats
#A: Mohamed El Sharnoby
#D: date in many formats that the user can enter
#F: i
[0-9]+[stndrh]*\s*(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*\s*([0-9][0-9][0-9][0-9])?|(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*\s*[0-9]+[stndrh]*|[0-9]+[\/.-][0-9]+[\/.-][0-9]+[0-9]+|[saturnmoewdhfi]*day

#U: http://regexlib.com/REDetails.aspx?regexp_id=3885
#T: Container Number
#A: Murat
#D: Container Number
^([A-Z]|[a-z]){4} ?[0-9]{6}-?[0-9]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3886
#T: information including new lines between HTML start tag and end tag
#A: ljhoo7
#D: Extracting the wanted information including new lines between HTML start tag and end tag
string pattern = @"(?<=<html>).(\n|\r|[^<]|<(?!/html>))*"

#U: http://regexlib.com/REDetails.aspx?regexp_id=3888
#T: ISO8601 Date Parser v2
#A: Charles Forsyth
#D: Good for JavaScript. Parses an ISO8601 Date into separate Date() object parts, so you can set a Date object by passing in an ISO8601 string. NOTE: Will not match illegal dates such as the 32nd day of a month or the 61st minute of an hour, etc.
#D: Use like this:
#D: if (regexFull.test(dString)) {
#D: matches = dString.toString().match(regexFull);
#D: offset = 0;
#D: date.setUTCDate(1);
#D: date.setUTCFullYear(parseInt(matches[1],10));
#D: date.setUTCMonth(parseInt(matches[2],10) - 1);
#D: date.setUTCDate(parseInt(matches[3],10));
#D: date.setUTCHours(parseInt(matches[4],10));
#D: date.setUTCMinutes(parseInt(matches[5],10));
#D: if (matches[6]) {
#D: date.setUTCSeconds(parseInt(matches[6],10));
#D: }
#D: if (matches[7]) {
#D: date.setUTCMilliseconds(parseInt(matches[7]));
#D: }
#D: if (matches[8] != 'Z') {
#D: offset = (matches[10] * 60) + parseInt(matches[11],10);
#D: offset *= ((matches[9] == '-') ? -1 : 1);
#D: date.setTime(date.getTime() - offset * 60 * 1000);
#D: }
#D: }
^(\d{4})(?:-([0]\d|[1][0-2]))(?:-([0-2]\d|[3][01]))(?:T([01]\d|2[0-3]))(?::([0-5]\d))(?::([0-5]\d)(?:\.(\d{1,7}?)|)|)(Z|([+-])([01]\d|2[0-3])(?::([0-5]\d)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3889
#T: weqw
#A: Ilayaraja
#D: wer
32e3432ew+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3890
#T: Bitcoin Address
#A: Patrick Merrell
#D: Matches bitcoin payment (public-key) address.
#D: Address must begin with a 1 or 3 and have 27-34 total alphanumeric characters.
#D: Will exclude Litecoin addresses.
#D: Does NOT do a checksum.
^[13][a-zA-Z0-9]{26,33}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3891
#T: Litecoin Address
#A: Patrick Merrell
#D: Matches litecoin payment (public-key) address. Address must begin with a L and have 27-34 total alphanumeric characters. Will exclude bitcoin address since they begin with 1 or 3. Does NOT do a checksum.
^L[a-zA-Z0-9]{26,33}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3892
#T: Date YYYY-MM-DD including leap year 
#A: Radek
#D: This expression mathes dates formatted as YYYY-MM-DD from 0000-01-01 to 9999-12-31. It checks leap year including all modulo 400, modulo 100 and modulo 4 rules.
^(((\d{4}-((0[13578]-|1[02]-)(0[1-9]|[12]\d|3[01])|(0[13456789]-|1[012]-)(0[1-9]|[12]\d|30)|02-(0[1-9]|1\d|2[0-8])))|((([02468][048]|[13579][26])00|\d{2}([13579][26]|0[48]|[2468][048])))-02-29)){0,10}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3893
#T: Skype Name 
#A: Avi Azran
#D: Validate for Skype Name:
#D: must be between 6-32 characters, start with a letter and contain only letters and numbers (no spaces or special characters).
^[a-z][a-z0-9\.,\-_]{5,31}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3894
#T: Inidna Phone Number matching
#A: Mukundhan (India)
#D: This regex will match Inidian Phone Numbers
(?:\+\s*\d{2}[\s-]*)?(?:\d[-\s]*){10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3895
#T: Credit Card Scanning (Production)
#A: Andy Serwatuk
#D: Singular Expression standalone or starting with new line, any whitespace or a colon
(^|([:]|\n|\s))(4[0-9]{3}[ -]*[0-9]{4}[ -]*[0-9]{4}[ -]*[0-9]{4}|5[12345][0-9]{2}[ -]*[0-9]{4}[ -]*[0-9]{4}[ -]*[0-9]{4}|3[47][0-9]{2}[ -]*[0-9]{6}[ -]*[0-9]{5}|3(?:0[012345]|[68][0-9])[0-9][ -]*[0-9]{6}[ -]*[0-9]{4}|6(?:011|5[0-9]{2})[ -]*[0-9]{4}[ -]*[0-9]{4}[ -]*[0-9]{4}|35[0-9]{2}[ -]*[0-9]{4}[ -]*[0-9]{4}[ -]*[0-9]{4}|(?:2131|1800)[ -]*[0-9]{6}[ -]*[0-9]{5})

#U: http://regexlib.com/REDetails.aspx?regexp_id=3896
#T: jquery id's without pound
#A: Kirk Olson
#D: jquery id's without pound
\$\([^\#\n\r\)]*?id[^\#\n\r\)]*?\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3897
#T: Facebook Pages URL
#A: Mior Mohd Arif Mior Zamri
#D: Validating facebook pages url with rules such as with "www" or without "www", include localization domain such as "en-gb"
http[s]?://(www.facebook|[a-zA-Z]{2}-[a-zA-Z]{2}.facebook|facebook)\.com/(pages/[a-zA-Z0-9\.-]+/[0-9]+|[a-zA-Z0-9\.-]+)[/]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3899
#T: ip and port
#A: Wayne Deatherage
#D: This Finds the ip and port
\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):\d{1,5}\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3900
#T: celcom
#A: phani chandra kumar
#D: to verify the date format
^([0-3][0-9]-[a-zA-Z][a-zA-Z][a-zA-Z]-[0-9][0-9][0-9][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3902
#T: Password
#A: Corey Fraser
#D: Password 6-20 characters any characters
^[a-zA-Z0-9!@#$%^&*_-.()~+="'?><;:,/|]{6,20}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3903
#T: price
#A: Wayne Deatherage
#D: Find the price
[$][0 -9]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3904
#T: Price
#A: Wayne Deatherage
#D: Another Price Scrape
[$][1-9]+.[1-9]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=3905
#T: Dot Points
#A: Samuel MacLachlan
#D: Matches dot points e.g. when copying a dot point list from Word into plain text and you want to do a find and replace all.
([0-9]|[0-9][0-9])\.\s

#U: http://regexlib.com/REDetails.aspx?regexp_id=3906
#T: Upper and Lower
#A: NILAKANTHA RATH
#D: This expression will accept only for characters both case(upper and lower)
.*[a-zA-Z]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3907
#T: TURKEY Plate No Pattern
#A: Volkan Kayaalp
#D: no custom plate no
\d{2}\s?[A-Z]{1,3}\s?\d{2,4} 

#U: http://regexlib.com/REDetails.aspx?regexp_id=3908
#T: Cisco - display links running over 78%
#A: Fc Elroy
#D: This regex is used with the "show int | inc" command and will list all the interfaces on the device and will display link information when the inbound link is running at 78% or above.  The total command looks like this:
#D: show int | inc (line_protocol|rxload [2]..\/255)
#D: .
#D: Yes, it could have been done without regex but this is good practice using regex with a Cisco device.
(line protocol|rxload [2]..\/255)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3909
#T: Javascript function name including dot notation
#A: Dean Dal Bozzo
#D: Matches a JavaScript function name, including dot notation.
^[\$_a-z][\$\w]*(?:\.[\$_a-z][\$\w]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3910
#T: Email Validation excluding free domains
#A: Randy Walker
#D: Basing this off of the DotNetNuke (DNN) email validator, I made it so I could exclude certain domain names, you should be able to add whatever domain names you want.
^\s*[a-zA-Z0-9_%+#&'*/=^`{|}~-](?:\.?[a-zA-Z0-9_%+#&'*/=^`{|}~-])*@(?!yahoo.|hotmail.|gmail.|outlook.|aol.|email.)(?:[a-zA-Z0-9_-]+\.)*(?:[a-zA-Z]{2,9}|\[(?:2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?:2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?:2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?:2[0-4]\d|25[0-5]|[01]?\d\d?)])\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3911
#T: Remove whitespace with exceptions
#A: Chris Kelly
#D: Removes whitespace except before and after the words "AND" and "OR".  Uses negative lookbehind and lookahead.
#D: E.g. IN -> "Some text with Words    AND more Words and OR statements"
#D: OUT -> "SometextwithWords AND moreWordsand OR statements"
s/(?<!(AND| OR))\s+(?!(AND|OR))//g

#U: http://regexlib.com/REDetails.aspx?regexp_id=3912
#T: from:berhanebahta4@gmail.com
#A: Berhane Bahlibi
#D: DNS record expression berhanebahta4@gmail
\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3913
#T: datetime
#A: Khaled
#D: this regular expression accepts date and optinal time with format
#D: (dd)[.-/](MM)[.-/](yyyy)[ ]
#D: (hh)[:](mm)[:](ss)
^(([0][1-9]|[1|2][0-9]|[3][0|1])[./-]([0][1-9]|[1][0-2])[./-]([0-9]{4})|(([0][1-9]|[1|2][0-9]|[3][0|1])[./-]([0][1-9]|[1][0-2])[./-]([0-9]{4}))[ ]([0|1][0-2])[:](([0-5][0-9]))([:](([0-5][0-9])))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3914
#T: Croatian National Bank (HNB) Exchange Rates List heading record pattern
#A: Ivan
#D: Parses heading record of HNB's Exchange rates formated list
(?<list_no>\d\d\d)(?<date_created_dd>\d\d)(?<date_created_mm>\d\d)(?<date_created_yyyy>\d\d\d\d)(?<date_applicable_dd>\d\d)(?<date_applicable_mm>\d\d)(?<date_applicable_yyyy>\d\d\d\d)(?<records_count>\d+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3915
#T: Swiss standard phone numbers
#A: Tano
#D: useful regex when we only need phone number from and for people inside the country
^(0{1})([1-9]{2})(\s|-|.{0,1})(\d{3})(\s|-|.{0,1})(\d{2})(\s|-|.{0,1})(\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3916
#T: Croatian National Bank (HNB) Exchange Rates List body record pattern
#A: Ivan
#D: Parses body on Croatian National Bank (HNB) Echange rates formated record
(?<currency_no>\d\d\d)(?<currency_code>\w\w\w)(?<parity>\d\d\d)(?<ask_price>\s+\d+\,\d+)(?<average_price>\s+\d+\,\d+)(?<bid_price>\s+\d+\,\d+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3917
#T: Vietnam Mobile Phone Number
#A: TommyDo
#D: Ðây là b?n R.E cho d?u s? di?n tho?i di d?ng c?a Vi?t Nam. Trong bi?u th?c quy d?nh s? di?n tho?i ph?i:
#D: - B?t d?u là s? 0
#D: (VD:091,092,0122,0186,099...)
#D: - S? ? v? trí th? 2 ph?i là s? 1 ho?c 9 (mình nh? k l?m ch? có 2 lo?i này
#D: (VD: 091,092,0122,0186...)
#D: - Các s? còn l?i thì có th? ch?y t? 0 d?n 9 nhung gi?i h?n t? 8 d?n 9 s? d? c?ng thêm 2 s? check lúc d?u tr? thành s? dt d?ng 10 s? (0909.123.456) hay 11 s? (0123.123.4567)
#D: =============================
#D: This is the RE for the mobile phone number of Vietnam. In the expression specified telephone number to:
#D: - Starting with the number 0
#D: (Eg 091,092,0122,0186,099 ...)
#D: - 2nd number is number from 1 or 9 (if I don't have mistakes for remember this one)
#D: (Eg 091,092,0122,0186 ...)
#D: - The remaining numbers can flow from 0 to 9 but limited to 8 to 9 numbers for plus a check at the first two numbers become 10-digit number DT (0909.123.456) or No. 11 (0123.123.4567)
#D: Good Luck...and discuss
^[0]{1}[19]{1}[0-9]{8,9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3918
#T: DEA Number
#A: Tim Claason
#D: A DEA number is a number assigned to a health care provider (such as a medical practitioner, dentist, or veterinarian) by the U.S. Drug Enforcement Administration.  This regex validates correct format
^\S{2}\d{7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3919
#T: GUID Validation
#A: Chris Miller
#D: Matches 32 hex string, with optional hypens and optional closing braces
^[{|\(]?[0-9a-fA-F]{8}[-]([0-9a-fA-F]{4}[-]){3}[0-9a-fA-F]{12}[\)|}]?|[{|\(]?[0-9a-fA-F]{8}([0-9a-fA-F]{4}){3}[0-9a-fA-F]{12}[\)|}]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3920
#T: ip address from 0.0.0.0-255.255.255.255
#A: rejina
#D: all ip address should be accepted within this range 0-255
regexp {[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+}

#U: http://regexlib.com/REDetails.aspx?regexp_id=3921
#T: composite format string arguments
#A: tjgalama
#D: Get the arguments data of a .NET composite format string using explicit capture
(?<!(?<!\{)\{)\{(?<index>\d+)(,(?<alignment>\d+))?(:(?<formatString>[^\}]+))?\}(?!\}(?!\}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3922
#T: Amount of money
#A: Martin Hauck
#D: matches a number with maximum 2 digits after seperator. also american sepratar "." as german/european seperator "," is accepted
^[-+]?\d+([.,]\d{0,2}){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3923
#T: Russian phone numbers|Российские номера телефонов
#A: Daniel Holmes
#D: Regular expression for any format Russian mobile phone numbers. Any non-existent format will not work
^(8-?|\+?7-?)?(\(?\d{3}\)?)-?(\d-?){6}\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3931
#T: Regex first letter must be capital
#A: Amit Rami
#D: Validate first letter of each word must capital.
^((\b[A-Z0-9](\w)*\b)|\s)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3933
#T: Indian CIN Code
#A: Michael Sogos
#D: The correspective VAT code for indian companies is the CIN Number.
#D: It is a composition of:
#D: - First char( U or L)
#D: - 5 numbers
#D: - 2 chars (province code)
#D: - 4 numbers (company registration year)
#D: - 3 chars (company type like LTD)
#D: - 6 numbers
^([L|U]{1})([0-9]{5})([A-Za-z]{2})([0-9]{4})([A-Za-z]{3})([0-9]{6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3934
#T: Russian INN Code
#A: Michael Sogos
#D: The INN code is formed by:
#D: the code of the tax department where INN was given (4 numbers), the record number of a registered company in the territorial section of the Unified State Register of Legal Entities in the tax department where INN was given (5 numbers), check digit (1 numbers)
^([0-9]{4})([0-9]{5})([0-9]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3935
#T: Russian OGRN  code
#A: Michael Sogos
#D: The OGRN code is formed by: the state registration number has the status of the main one (1 number), two last numbers of the year when the record was made (2 numbers), the sequence number of a constituent entity of Russia according to the list of constituent entities of Russia (2 numbers), record number entered in the state register within a year (7 numbers), check digit (1 number)
^([0-9]{1})([0-9]{2})([0-9]{2})([0-9]{7})([0-9]{1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3936
#T: Date (since 1950 to 2014)
#A: Schültz
#D: YYYY-MM-DD
\b(?:19[5-9][0-9]|200[0-9]|201[0-4])([-,.])(?:0?[1-9]|1[12])\1(?:0?[1-9]|[12][0-9]|3[01])\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=3937
#T: Dates between 01/01/1900 and 31/12/2099
#A: Iban
#D: This pattern validates dates with slash (/) separator and with years between 1900 and 2099.
^((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|[1][02])([/])(19[0-9][0-9]|20[0-9][0-9]))|((0[1-9]|[12][0-9]|30)([/])(0[469]|11)([/])(19[0-9][0-9]|20[0-9][0-9]))|((0[1-9]|[1][0-9]|[2][0-8])([/])(02)([/])(19[0-9][0-9]|20[0-9][0-9]))|((29)([/])(02)([/])(190[48]|19[13579][26]|19[2468][048]|20[02468][048]|20[13579][26]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3938
#T: postal code dutch zipcode
#A: richard van haastrecht
#D: Valid dutch zipcode
\A[1-9][0-9]{3}([A-RT-Z][A-Z])|([S]([BC]|[E-R]|[T-Z]))\z

#U: http://regexlib.com/REDetails.aspx?regexp_id=3939
#T: Amount or Price validator
#A: regex maker
#D: validate amount or price
#D: check: Double value
#F: u
^(?!0,?\d)(?:\d{1,3}(?:([, .])\d{2})?(?:\1\d{2})*|(?:\d+))((?!\1)[,.]\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3940
#T: Validate CURP regex
#A: Héctor Cunningham
#D: This regular expression is used to check the correct input of Mexican CURP, this regex has been modified over the years to correct some bugs.
#D: Esta expresión regular la uso para checar la captura de curp en un sistema donde es utilizada como llave universal y se ha actualizado para arreglar pequeños errores como X en el segundo caracter y que la fecha de nacimiento sea valida.
^[A-Z]{1}[AEIOUX]{1}[A-Z]{2}((\d{2}((0[13578]|1[02])(0[1-9]|[12][0-9]|3[01])|(0[13-9]|1[0-2])(0[1-9]|[12][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8])))|([02468][048]|[13579][26])0229)[HM]{1}(AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z]{1}[0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3941
#T: Validate Egyptian Mobile Phone Numbers
#A: Ahmed Samy
#D: Validate Egyptian Mobile Phone Numbers
#D: only Valid Format is
#D: 01#########
^01[0-2]\d{8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3942
#T: useragents of bots 
#A: A Bösefrau
#D: run this against a useragent of your browser and you will get all bots
(bot|spider|crawler|google)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3943
#T: find tablets by useragents
#A: A Bösefrau
#D: run this against a useragent of your browser and you will get all tablets
$sPatternTablet = '/(Tablet|iPad|iPod)/';

#U: http://regexlib.com/REDetails.aspx?regexp_id=3944
#T: mobile devices by useragent
#A: A Bösefrau
#D: find mobile devices by running this regex against  the useragent of the browser
(Windows Phone|iPhone|BlackBerry|Mobile|Android|Opera Mini|Opera Mobile|SymbianOS)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3945
#T: playstation and tv sets by useragent
#A: A Bösefrau
#D: run this against the browsers user agent and you get all playstations and tv sets
(XBOX|Nintendo Wii|smarttv|playstation|hbbtv|philipstv|opera tv|inettv)

#U: http://regexlib.com/REDetails.aspx?regexp_id=3946
#T: Medicare HICN
#A: Gary Proctor
#D: The above regular expression is current as of 5/15/2014 as per any/all documentation easily found online.  CMS guidlines provides the following guidance as of 9/11/2002:  http://www.cms.gov/Regulations-and-Guidance/Guidance/Manuals/downloads/ge101c02.pdf
#D: Since that date all rules have remained steadfast except the range of SSN has been expanded from  a prefix of 772 to include all numbers through the prefix 899.
#D: Note: This regex assumes any/all dashes have been removed.
((A|CA|H|JA|MA|MH|PA|PD|PH|WCA|WCD|WCH|WD|WH)[0-8][0-9]{2}(?!00)[0-9]{2}(?!0000)[0-9]{4})|([0-8][0-9]{2}(?!00)[0-9]{2}(?!0000)[0-9]{4}(A|B|Bl|B2|B3|B4|B5|B6|B7|B8|B9|BA|BD|BG|BH|BJ|BK|BL|BN|BP|BQ|BR|BT|BW|BY|Cl|C2|C3|C4|C5|C6|C7|C8|C9|CA|CB|CC|CD|CE|CF|CG|CH|CI|CJ|CK|CL|CM|CN|CO|CP|CQ|CR|CS|CT|CU|CV|CW|CX|CY|CZ|D|Dl|D2|D3|D4|D5|D6|D7|D8|D9|DA|DC|DD|DG|DH|DJ|DK|DL|DM|DN|DP|DQ|DR|DS|DT|DV|DW|DX|DY|DZ|E|El|E2|E3|E4|E5|E6|E7|E8|E9|EA|EB|EC|ED|EF|EG|EH|EJ|EK|EM|Fl|F2|F3|F4|F5|F6|F7|F8|Jl|J2|J3|J4|Kl|K2|K3|K4|K5|K6|K7|K8|K9|KA|KB|KC|KD|KE|KF|KG|KH|KJ|KL|KM|T|TA|TB|TC|TD|TE|TF|TG|TH|TJ|TK|TL|TM|TN|TP|TQ|TR|TS|TT|TU|TV|TW|TX|TY|TZ|T2|W|Wl|W2|W3|W4|W5|W6|W7|W8|W9|WB|WC|WF|WG|WJ|WR|WT))

#U: http://regexlib.com/REDetails.aspx?regexp_id=3947
#T: Test
#A: Amarjit Saha
#D: d
+919433736446

#U: http://regexlib.com/REDetails.aspx?regexp_id=3951
#T: Kyrguzstan Phone numbers | Кыргызские тел.номер
#A: Emir Mamashov
#D: It checks for Valid Kyrguzstan Phone numbers.
#D: (+996)XXX-XXX-XXX.
^\(?\+([9]{2}?[6])\)?[-. ]?([0-9]{3})[-. ]?([0-9]{3})[-. ]?([0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3952
#T: E-mail
#A: Emir Mamashov
#D: It checks for Valid email.
#D: *@*.*
.+\\@.+\\..+
