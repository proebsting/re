# A large number of expressions scraped 4-Apr-2014 from regxlib.com

#U: http://regexlib.com/REDetails.aspx?regexp_id=1
#T: One Numeric Digit
#A: Steven Smith
#D: Matches exactly 1 numeric digit (0-9).
^\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2
#T: Five Integer US ZIP Code
#A: Steven Smith
#D: Matches 5 numeric digits, such as a zip code.
^\d{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=3
#T: ZIP+4 - XXXXX-XXXX
#A: Steven Smith
#D: Numeric and hyphen 5+4 ZIP code match for ZIP+4.
^\d{5}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=4
#A: Steven Smith
^\d{5}$|^\d{5}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=9
#A: Steven Smith
#D: This regular expression will match a hyphen-separated Social Security Number (SSN) in the format NNN-NN-NNNN.
^\d{3}-\d{2}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=11
#T: A string of any US ASCII letters
#A: Steven Smith
#D: Matches any string of only upper- and lower- case letters (no spaces).
^[a-zA-Z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=12
#T: Alphanumeric
#A: Steven Smith
#D: Matches any alphanumeric string (no spaces).
^[a-zA-Z0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=13
#T: Positive Integer
#A: Steven Smith
#D: Positive integer value.
^\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=14
#T: Signed Integer
#A: Steven Smith
#D: Matches any signed integer.
^(\+|-)?\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=15
#T: Strongish Password
#A: Steven Smith
#D: The password's first character must be a letter, it must contain at least 4 characters and no more than 15 characters and no characters other than letters, numbers and the underscore may be used
^[a-zA-Z]\w{3,14}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=16
#T: Email - Overly Simple
#A: Steven Smith
#D: Simple email expression.  Doesn't allow numbers in the domain name and doesn't allow for top level domains that are less than 2 or more than 3 letters (which is fine until they allow more).  Doesn't handle multiple "." in the domain (joe@abc.co.uk).
^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=18
#A: Steven Smith
#D: The "hello world" of regular expressions, this will match any string with an instance of 'foo' in it.
foo

#U: http://regexlib.com/REDetails.aspx?regexp_id=19
#A: Steven Smith
#D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[12345]$.
^[1-5]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=20
#A: Steven Smith
#D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[1-5]$. 
^[12345]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=21
#A: Steven Smith
#D: This expression matches email addresses, and checks that they are of the proper form.  It checks to ensure the top level domain is between 2 and 4 characters long, but does not check the specific domain against a list (especially since there are so many of them now).
^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=22
#A: Steven Smith
#D: This expression matches a hyphen separated US phone number, of the form ANN-NNN-NNNN, where A is between 2 and 9 and N is between 0 and 9.
^[2-9]\d{2}-\d{3}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=25
#A: G. Andrew Duthie
#D: Domain names:
#D: This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in .com, .org, .net, .mil, or .edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.
^[a-zA-Z0-9\-\.]+\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=26
#A: Andy Smith
#D: Email validator that adheres directly to the specification for email address naming. It allows for everything from ipaddress and country-code domains, to very rare characters in the username.
^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=27
#A: Steven Smith
#D: US Phone Number -- doesn't check to see if first digit is legal (not a 0 or 1).
((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=28
#A: Steven Smith
#D: Yet another simple email validator expression.
[\w-]+@([\w-]+\.)+[\w-]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=29
#A: Steven Smith
#D: Major credit card validator.  Only checks that the format is 16 digits (optionally separated by hyphens), not the value of any of the digits.
\d{4}-?\d{4}-?\d{4}-?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=31
#A: Steven Smith
#D: Password matching expression.  Password must be at least 4 characters, no more than 8 characters, and must include at least one upper case letter, one lower case letter, and one numeric digit.
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=32
#A: G. Andrew Duthie
#D: RegExp for validating the format of IP Addresses. This works great with the ASP.NET RegularExpressionValidator server control.
^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=33
#A: Steven Smith
#D: This expression uses a BackReference to find occurrences of the same word twice in a row (separated by a space).
#D: Matches things like 'mandate dated', which may not be desirable.  See Sean Carley's update for a better expression for true repeated word matching.
(\w+)\s+\1

#U: http://regexlib.com/REDetails.aspx?regexp_id=34
#A: Samuel Mota
#D: Match diferent styles for brazilian Phone number code.
#D: Only DDD (12), complete DDD (012), complete DDD + Telephony Company (0xx12) plus 3 or 4 digits (city code) plus 4 digits (phone number).
\(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=35
#A: Eric Lebetsamer
#D: Email validation.  With this short expression you can validate for proper email format.  It's short and accurate.
^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=36
#A: Chris Craft
#D: Tests for valid HTML hexadecimal color codes. The # symbol is optional. And it will except either the 3 digit form for the 216 Web safe colors, or the full 6 digit form. I am use it on my site to allow users to customize the site's colors.
^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=37
#A: Justin Saunders
#D: Regular Expression matches any internet URLs. Used with the replace method it comes in very handy.
((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=38
#A: Dave Sparks
#D: Matches UK postcodes according to the following rules
#D: 1. LN NLL     eg N1 1AA
#D: 2. LLN NLL    eg SW4 0QL
#D: 3. LNN NLL    eg M23 4PJ
#D: 4. LLNN NLL  eg WS14 0JT
#D: 5. LLNL NLL   eg SW1N 4TB
#D: 6. LNL NLL     eg W1C 8LQ
#D: Thanks to Simon Bell for informing me of LNL NLL rule for postcodes which I had omitted in an earlier version.
^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=39
#A: Gregory Beamer
#D: Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the .COM section.
^[\w\.=-]+@[\w\.-]+\.[\w]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=40
#A: Chris Craft
#D: If you need to extract or remove any /* */ sytle comments from any Java, JavaScript, C, C++, CSS, etc code you have this regular expression can help.
/\*[\d\D]*?\*/

#U: http://regexlib.com/REDetails.aspx?regexp_id=41
#A: Bob Levittan
#D: Validates a dollar amount including a dollar sign and 2 decmals. The decimal and cents are optional.
^\$[0-9]+(\.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=43
#A: Chris Craft
#D: "Be careful when opening or creating files by using Scripting File System Object. If the filename is based on the user's input, the user might attempt to open a serial port or printer."
(AUX|PRN|NUL|COM\d|LPT\d)+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=44
#A: Michael Scovetta
#D: This re was used for a security routine. The format is:
#D: [user=name1,name2,...,nameN;][group=group1,group2,...,groupN;][level=number;]
#D: Each component is optional, but they must appear the in order listed if applicable.
^(user=([a-z0-9]+,)*(([a-z0-9]+){1});)?(group=([a-z0-9]+,)*(([a-z0-9]+){1});)?(level=[0-9]+;)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=45
#A: Laurence O'Donnell
#D: This RegEx requires a US phone number WITH area code. It is written to all users to enter whatever delimiters they want or no delimiters at all (i.e. 111-222-3333, or 111.222.3333, or (111) 222-3333, or 1112223333, etc...).
^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=46
#A: Laurence O'Donnell
#D: This pattern allows standard e-mail addresses (e.g. user@domain.com), sub domains (e.g. user@foo.domain.com), the new two- and four-letter domains (e.g. user@domain.tv and user@domain.name) and country codes (e.g. user@foo.com.us). Also, this patter follows the Network Solutions standard length of 67 characters for top-level domains. The reason I allow numbers to be entered in the domain suffix is for future planning. If you do not want numbers to be able to be added as a domain suffix (e.g. user@domain.123), simply delete the last two occurrences of "\d".
^([\w\d\-\.]+)@{1}(([\w\d\-]{1,67})|([\w\d\-]+\.[\w\d\-]{1,67}))\.(([a-zA-Z\d]{2,4})(\.[a-zA-Z\d]{2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=48
#A: Steven Smith
#D: Credit card validator.  Just checks that the format is either 16 numbers in groups of four separated by a "-" or a " " or nothing at all.
^(\d{4}[- ]){3}\d{4}|\d{16}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=49
#A: Steven Smith
#D: Matches major credit cards including:
#D: Visa (length 16, prefix 4), Mastercard (length 16, prefix 51-55), Discover (length 16, prefix 6011), American Express (length 15, prefix 34 or 37).  All 16 digit formats accept optional hyphens (-) between each group of four digits. 
^((4\d{3})|(5[1-5]\d{2})|(6011))-?\d{4}-?\d{4}-?\d{4}|3[4,7]\d{13}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=50
#A: Steven Smith
#D: Matches any string between 4 and 8 characters in length.  Limits the length of a string.  Useful to add to password regular expressions.
^.{4,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=51
#A: Steven Smith
#D: Accepts an unsigned integer number.  Also matches empty strings.
^\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=52
#A: Steven Smith
^[-+]?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=53
#A: Steven Smith
#D: Matches any unsigned floating point number/numeric string.  Also matches empty strings.
^\d*\.?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=54
#A: Steven Smith
#D: Matches any floating point numer/numeric string, including optional sign character (+ or -).  Also matches empty strings.
^[-+]?\d*\.?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=55
#A: James Bray
#D: GUID Tester. It tests SQL Server GUIDs, which are alphanumeric characters grouped 8-4-4-4-12 (with the dashes). Make sure they don't have the brackets around them before you check them and have fun!
^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=56
#A: Prasad DV
#D: Validates an email address
(\w+?@\w+?\x2E.+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=57
#A: Prasad DV
#D: Plucks the last quote of a Stock from the MSN MoneyCentral WebQuote page for any given stock symbol. The URL of the web page where this RegEx should be applied is:
#D: http://localhost/asp/webquote.htm?ipage=qd&Symbol=,give the stock symbol here> You must also use the singleline option.
Last.*?(\d+.?\d*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=58
#A: Igor Kravtsov
#D: Matches US phone number format. 1 in the beginning is optional, area code is required, spaces or dashes can be used as optional divider between number groups. Also alphanumeric format is allowed after area code.
^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=59
#A: Koen Hoorelbeke
#D: Matches a string if it is a valid time in the format of HH:MM
^([0-1][0-9]|[2][0-3]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=61
#A: Mart Maasikas
#D: US Phone number that accept a dot, a space, a dash, a forward slash, between the numbers. Will Accept a 1 or 0 in front.  Area Code not necessary
((\(\d{3}\)?)|(\d{3}))([\s-./]?)(\d{3})([\s-./]?)(\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=62
#A: Mart Maasikas
#D: Any Expression Upper/Lower Case, with commas and space between the text, with any amount of space before or after
^\s*[a-zA-Z,\s]+\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=63
#A: Mart Maasikas
#D: ANY alphanumeric string with spaces, commas, dashes.
^[a-zA-Z0-9\s.\-]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=64
#A: Ryan S
#D: This can be used in conjunction with the replace method to provide pseudo-code support without having to enable HTML. The replacement string (in ASP.NET, use RegExp.Replace(SourceString, RegularExpressionPattern, ReplacementString) is <a href="${link}">${text}</a>.
\[link="(?<link>((.|\n)*?))"\](?<text>((.|\n)*?))\[\/link\]

#U: http://regexlib.com/REDetails.aspx?regexp_id=67
#A: Chris Love
#D: This provides an expression to calidate the four major credit cards.  It can be easily broken up to use for a specific type of card.  It does not validate the number being a potential real number, only in the correct format.
(^(4|5)\d{3}-?\d{4}-?\d{4}-?\d{4}|(4|5)\d{15})|(^(6011)-?\d{4}-?\d{4}-?\d{4}|(6011)-?\d{12})|(^((3\d{3}))-\d{6}-\d{5}|^((3\d{14})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=68
#A: Scott Frampton
#D: This regular expression matches 'Switch' card numbers - a payment method used extensively in the UK.
^([0-9]{6}[\s\-]{1}[0-9]{12}|[0-9]{18})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=69
#A: Chris Becker
#D: Matches U.S. dates with leading zeros and without and with 2 or four digit years
^(([1-9])|(0[1-9])|(1[0-2]))\/((0[1-9])|([1-31]))\/((\d{2})|(\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=70
#A: Brian Orrell
#D: Matches currency input with or without commas.
^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=73
#A: James Burton
#D: A regular expression to match phone numbers, allowing for an international dialing code at the start and hyphenation and spaces that are sometimes entered.
^(\(?\+?[0-9]*\)?)?[0-9_\- \(\)]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=74
#A: Blake Facey
#D: Matches standard 5 digit US Zip Codes, or the US ZIP + 4 Standard.
^\d{5}(-\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=75
#A: Jon van Leuven
#D: Regular expression to evaluate dutch-style phone numbers. Possible example prefixes: +31, +31(0), (+31)(0), 0, 0031
#D: followed by 9 numbers (which can contain a space or -).
(^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=76
#A: Jon van Leuven
#D: Regular expression to evaluate dutch zipcodes. This is an updated version of Roland Mensenkamp.
^[0-9]{4}\s{0,1}[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=77
#A: David Good
#D: Will match the following date formats: Preceded by a Space, Left-parentheses, or at the beginning of a line.  Followed by a Space, Right-parentheses, or Colon(:), word boundary or End of line.  Can have / or - as separator.  Accepts 2 digit year 00-99 or 4 digit years 1900-2099 (can modify to accept any range)
(^|\s|\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:])|(^|\s|\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:|$|\>])){1}){1}){1}){1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=78
#A: Sean Carley
#D: Uses backreferences and word boundaries to match repeated words seperated by whitespace without matching a word with the same ending as the next words beginning.
\b(\w+)\s+\1\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=79
#A: Steven Smith
#D: A very simple ISBN validation expression - it just checks for a 10 digit number where the last digit could also be a capital 'X'.  Complete specs for ISBN available here:
#D: http://www.isbn.org/standards/home/isbn/international/html/usm4.htm.  An enhancement would be to allow exactly 3 or 0 hyphens or 3 or 0 spaces, since these are also valid formats.
^\d{9}[\d|X]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=80
#A: Scott Thompson
#D: Dates
#D: day: d or dd, <= 31,
#D: month: m or mm, <= 12,
#D: year: yy or yyyy >= 1900, <= 2099
^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=82
#A: narsi v
#D: This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok !!
^\d*\.?((25)|(50)|(5)|(75)|(0)|(00))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=83
#A: Tommy Ullberg
#D: Validates swedish zipcodes (postnr) with or without space between groups. With leading s- or not. Can be disconnected by removing ''(s-|S-){0,1}''.
^(s-|S-){0,1}[0-9]{3}\s?[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=84
#A: Sean McAnally
#D: Regex used in .NET to validate a date.  Matches the following formats mm/dd/yy, mm/dd/yyyy, mm-dd-yy, mm-dd-yyyy
#D: This covers days with 30 or 31 days but does not handle February, it is allowed 30 days.
((0?[13578]|10|12)(-|\/)((0[0-9])|([12])([0-9]?)|(3[01]?))(-|\/)((\d{4})|(\d{2}))|(0?[2469]|11)(-|\/)((0[0-9])|([12])([0-9]?)|(3[0]?))(-|\/)((\d{4}|\d{2})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=85
#A: Andre Van Der Merwe
#D: Checks for a valid windows file name (Must be used with the case-insensitive option
#D: Checks that the file has at lease one char, does not contain any invalid characters and does not have a reserved word as a file name.
#D: "If you see a " in the regex replace it with a " character"
^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*:\";|/]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=86
#A: Marc-Antoine Latour
#D: Match any image insert in a tag .
#D: simply replace the .jpg in the pattern whit a variable of content type ex:.swf,.js,.gif and loop the pattern to retrieve all tag whit the contenttype pass trought....
#D: Very useful when you have people uploading html document in your site and you want to retrieve all dependecy.
<[^>]*\n?.*=("|')?(.*\.jpg)("|')?.*\n?[^<]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=88
#A: David Lott
#D: Expression 1 of 2 used to check email address syntax.
^([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=89
#A: David Lott
#D: Expression 2 or 2 for matching email address syntax. This one matches the <angle bracket syntax>.
^(([-\w \.]+)|(""[-\w \.]+"") )?<([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))>$

#U: http://regexlib.com/REDetails.aspx?regexp_id=90
#A: Klaxon Mindjammer
#D: Verifies URLs.  Checks for the leading protocol, a good looking domain (two or three letter TLD; no invalid characters in domain) and a somwhat reasonable file path.
^http\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=92
#A: Santosh Potadar
#D: UK National Insurance Number validation. Especially useful to validate through clientside/server side script on a website.
^[A-Za-z]{2}[0-9]{6}[A-Za-z]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=93
#A: Peter Pfeifer
#D: Sql date format tester. 
20\d{2}(-|\/)((0[1-9])|(1[0-2]))(-|\/)((0[1-9])|([1-2][0-9])|(3[0-1]))(T|\s)(([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=95
#A: Rex Po
#D: - validates a yyyy-mm-dd, yyyy mm dd, or yyyy/mm/dd date
#D: - makes sure day is within valid range for the month
#D: - does NOT validate Feb. 29 on a leap year, only that Feb. CAN have 29 days
^\d{4}[\-\/\s]?((((0[13578])|(1[02]))[\-\/\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\s]?(([0-2][0-9])|(30)))|(02[\-\/\s]?[0-2][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=96
#A: M H
#D: *CORRECTED: Again thanks for all the comments below. If you want to include internal domain as well change the partial code (\.[\w-_]+)+ to (\.[\w-_]+)?
#D: See the comments below*
#D: This is the regular expression I use to add links in my email program. It also ignores those suppose-to-be commas/periods/colons at the end of the URL, like this sentence "check out http://www.yahoo.com/." (the period will be ignored) Note that it requires some modification to match ones that dont start with http.
(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?

#U: http://regexlib.com/REDetails.aspx?regexp_id=97
#A: jay gann
#D: US Telephone Reg expression that allows 7, 10 or 11 digits with or without hyphens.
^(1?(-?\d{3})-?)?(\d{3})(-?\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=98
#A: Andrew Freese
#D: This RX is used to find get all named tags in an html string. If you find a problem with it, please email drew@lordstrange.com
<[^>]*name[\s]*=[\s]*"?[^\w_]*"?[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=101
#A: vinod kumar
#D: This RegEx will help to validate a physical file path with a specific file extension (here xls)
([a-zA-Z]:(\\w+)*\\[a-zA-Z0_9]+)?.xls

#U: http://regexlib.com/REDetails.aspx?regexp_id=102
#A: Steven Smith
#D: This regular expression will match a 24 hour time with no separators.
^(20|21|22|23|[0-1]\d)[0-5]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=103
#A: Steven Smith
#D: Matches a 12-hour time value expressed as either 4 numeric digits, 3 numeric digits, or a space and 3 numeric digits.  3 digit times (930) can be expressed with leading 0's (0930) or not.  AM/PM designation is not included in this expression.
^( [1-9]|[1-9]|0[1-9]|10|11|12)[0-5]\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=104
#A: Mike Hensley
#D: Accepts 1-2 digits followed by a slash followed by 2-4 digits.  Useful for numeric month/year entry.
^\d{1,2}\/\d{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=107
#A: Dalibor Kalna
#D: This regex match numeric data in the following format: thousands are separated by (') apostrophe, decimal places are separated by dot (.) Maximum three decimal places are not required. It's easy to change to other separators as well.
^(\d{1,3}'(\d{3}')*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=109
#A: Josh Bailyr
#D: This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003.  It can easily be adapted for different date ranges.  It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003.  The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month.  An example of an invalid date that it would allow to pass through would be 11/31/2002.  This date is invalid because 11/31 of any year does not exist, but this expression would allow it pass through since the day part is in the range 01-31.
#D: This regular expression has been used successfully in ASP with VBScript using the windows scripting library RegExp object.
^(0[1-9]|1[0-2])\/((0[1-9]|2\d)|3[0-1])\/(19\d\d|200[0-3])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=110
#A: Scott Watermasysk Watermasysk
#D: This expression can be used validate a datetime column from SQL Server. Big parts of it where taken from other samples on RegexLib. Please feel free to take it apart and improve it.
^((((([13578])|(1[0-2]))[\-\/\s]?(([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?(([1-9])|([1-2][0-9])|(30)))|(2[\-\/\s]?(([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s((([1-9])|(1[02]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=111
#A: anup kallingal
#D: This can be used to match indian style pincodes / postal codes used by the indian postal departments which are 6 digits long and may have space after the 3rd digit
^\d{3}\s?\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=112
#A: Matt Adams
#D: The following validates dates with and without leading zeros in the following formats: MM/DD/YYYY and it also takes YYYY (this can easily be removed).  All months are validated for the correct number of days for that particular month except for February which can be set to 29 days. date day month year
^((((0[13578])|([13578])|(1[02]))[\/](([1-9])|([0-2][0-9])|(3[01])))|(((0[469])|([469])|(11))[\/](([1-9])|([0-2][0-9])|(30)))|((2|02)[\/](([1-9])|([0-2][0-9]))))[\/]\d{4}$|^\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=113
#T: M/d/y Date
#A: Michael Ash
#D: This expression validates dates in the US m/d/y format from 1/1/1600 - 12/31/9999.
^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=114
#A: Jason West
#D: My meager attempt at a date validator with leap years using a strict mm/dd/yyyy format.
(((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|11)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2[0-8])([-./])(\d{4}))|((2)(\.|-|\/)(29)([-./])([02468][048]00))|((2)([-./])(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=115
#A: Frederico Knabben
#D: Use it for breaking-down a URI (URL, URN) reference into its main components: Scheme, Authority, Path, Query and Fragment.
#D: This is not a simple match regular expression. so it not works to verify a URI. It returns 1 matching group for each URI component.
#D: For example, for the following URI:
#D: http://regexlib.com/REDetails.aspx?regexp_id=x#Details
#D: returns: scheme="http", authority="regexlib.com", path="/REDetails.aspx", query="regexp_id=x" and fragment="Details".
#D: This is a W3C raccomandation (RFC 2396).
^(?=[^&])(?:(?<scheme>[^:/?#]+):)?(?://(?<authority>[^/?#]*))?(?<path>[^?#]*)(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=116
#A: Bill Anderson
#D: US Telephone Number where this is regular expression excludes the first number, after the area code,from being 0 or 1; it also allows an extension
#D: to be added where it does not have to be prefixed by 'x'.
^[\\(]{0,1}([0-9]){3}[\\)]{0,1}[ ]?([^0-1]){1}([0-9]){2}[ ]?[-]?[ ]?([0-9]){4}[ ]*((x){0,1}([0-9]){1,5}){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=117
#A: Steven Smith
#D: This matches any real number, with optional decimal point and numbers after the decimal, and optional positive (+) or negative (-) designation.
^[-+]?\d+(\.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=118
#A: Qing Jiang
#D: Match Canadia Zip Code. You can have a space in the middle Like T2P 3C7, or no space like T2P3C7
^[a-zA-Z][0-9][a-zA-Z]\s?[0-9][a-zA-Z][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=122
#A: Qing Jiang
#D:  This expression matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code. The first one must be 5 numeric digits. The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits. The Canadian postal code must be of the form ANA NAN where A is any uppercase alphabetic character and N is a numeric digit from 0 to 9.  
^((\d{5}-\d{4})|(\d{5})|([A-Z]\d[A-Z]\s\d[A-Z]\d))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=123
#A: Daniel Hou
(a|b|c).(a.b)*.b+.c

#U: http://regexlib.com/REDetails.aspx?regexp_id=124
#A: Alessandro Vergani
#D: Matches quoted string, using \" as an escape to place quotes in the string
"((\\")|[^"(\\")])+"

#U: http://regexlib.com/REDetails.aspx?regexp_id=125
#A: Carlos Nascimento
#D: Matches standard 5 digit Brazilian Postal Codes (CEP), or the CEP + 3 digits (distribution identifiers - suffix).
#D: For more info refer to: http://www.correios.com.br/servicos/cep/Estrutura_CEP.cfm (in portuguese).
^\d{5}(-\d{3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=126
#T: US currency
#A: Michael Ash
#D: This re matches US currency format with lead dollar sign. Dollar value must have at least one digit and may or may not be comma separated. Cents value is optional.
^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=127
#A: Alban Schmid
#D: This regular expression pattern can be used to check the validity of paths for file upload controls. The uploaded file can be either stored locally or accessible through UNC. It cannot contain illegal characters for the windows OS - that may be supported e.g. on Mac OS – and cannot be a URL (Yes, as weird as it may seem, some users enter URLs in the file upload box, even though there is a browse button...)
([A-Z]:\\[^/:\*\?<>\|]+\.\w{2,6})|(\\{2}[^/:\*\?<>\|]+\.\w{2,6})

#U: http://regexlib.com/REDetails.aspx?regexp_id=128
#T: Roman numerials
#A: Michael Ash
#D: This RE validates alpha characters that evaluate to Roman numerials, ranging from 1(I) - 3999(MMMCMXCIX). Not case sensitive.
^(?i:(?=[MDCLXVI])((M{0,3})((C[DM])|(D?C{0,3}))?((X[LC])|(L?XX{0,2})|L)?((I[VX])|(V?(II{0,2}))|V)?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=129
#A: Nacho Varas
#D: Matches a string if it is a valid time in the format of HH:MM / H:MM / HH / H
(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=130
#A: Al Kahler
#D: Matches US currency input with or without commas.  This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the . (period) to ensure that no other characters may be used in it's place.
^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(\.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=132
#A: Andrew Balaschak
#D: Fromat check for MM/YY, checks month is 1-12 and any 2 digit year.
((0[1-9])|(1[02]))/\d{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=133
#A: Tom Svensson
#D: Will match a VBScript string and/or comment
#D: Ex:
#D: ' userinfo
#D: strUsername = "tomsve"
#D: iAge = 20
#D: ' temp
#D: strPassword = "halloj"
#D: ...Would result in the following matches:
#D: ' userinfo
#D: "tomsve"
#D: ' temp
#D: "halloj"
#D: Good luck!
#D: Tom S. info@tomsvensson.com
("[^"]*")|('[^\r]*)(\r\n)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=134
#A: V. Lorz
#D: GUID Tester.
#D: This is a modification from the regular expression submitted by James Bray (james@jamesbray.com). It allows the use of mixed upper and lowercase letters in the GUID string.
^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=138
#A: Stewart Haddock
#D: Checks domain names.  This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.) and hypens(-).
^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=140
#A: David Huyck
#D: Matches e-mail addresses, including some of the newer top-level-domain extensions, such as info, museum, name, etc.  Also allows for emails tied directly to IP addresses.
^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=143
#A: Robert Dugre
#D: Person's name (first, last, or both) in any letter case.  Although not perfect, this expression will filter out many incorrect name formats (especially numerics and invalid special characters).
^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=144
#A: Steve Valaitis
^((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=145
#A: Sonal Bordia
#D: Alphanumeric, hyphen apostrophe, comma dash spaces
^[a-zA-Z0-9\s.\-_']+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=146
#A: Brandon Luhring
#D: Modified URL RegExp that requires (http, https, ftp)://, A nice domain, and a decent file/folder string. Allows : after domain name, and these characters in the file/folder sring (letter, numbers, - . _ ? , ' / \ + & % $ # = ~). Blocks all other special characters-good for protecting against user input!
^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=151
#A: Marco Storti
#D: This expression validates dates in the ITALIAN d/m/y format from 1/1/1600 - 31/12/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00 since it could be any century (1900, 2000, 2100). Days and months must be 1 or 2 digits and may have leading zeros. Years must be 2 or 4 digit years. 4 digit years must be between 1600 and 9999. Date separator may be a slash (/), dash (-), or period (.)
#D: Thanks to Michael Ash for US Version
^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=152
#A: Jaime Borges
#D: This regular expression validates that the data entered is a number with a maximum of two integers and two decimals and a minimum of one integer or one decimal.
^\d{0,2}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=153
#A: Michael Krutwig
#D: This Regex (can be used e.g. in PHP with eregi) will match any valid URL. Unlike the other exapmles here, it will NOT match a valid URL ending with a dot or bracket. This is important if you use this regex to find and "activate" Links in an Text
^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*[^\.\,\)\(\s]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=154
#A: Ted Rudyk
#D: This will grep for a valid MAC address , with colons seperating octets. It will ignore strings too short or long, or with invalid characters.  It will accept mixed case hexadecimal. Use extended grep.
^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=155
#A: Samir AZZA
#D: Percentage with 3 number after comma.
^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=156
#A: Samir AZZA
#D: Correct French DateTime(DD/MM/YYYY OR DD/MM/YYYY HH:MM:SS)
^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=157
#A: Jeremy Samuel
#D: Password expresion that requires one lower case letter, one upper case letter, one digit, 6-13 length, and no spaces. This is merely an extension of a previously posted expression by Steven Smith (ssmith@aspalliance.com) . The no spaces is new.
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{4,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=158
#A: Nathan Pitts
#D: Host/Domain name validation for perl.
#D: Should be combined with a check for
#D: length <= 63 characters and that $2
#D: is in a list of top-level domains.
^([a-zA-Z0-9][-a-zA-Z0-9]*[a-zA-Z0-9]\.)+([a-zA-Z0-9]{3,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=159
#A: Peter Friese
#D: This one matches all strings that do not contain the single quotation mark (').
^[^']*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=160
#A: K Thompson
#D: This validates a number between 1 and 255. Could be modified to IP, or just to verify a number in a range.
^([1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=161
#A: Benjamin Gray
#D: Using other regular experssions from this page, combining others for email addresses, and mixing in my own ideas - I came up with this regular expression.  Can be used to validate input into a database.
^((https?|ftp)\://((\[?(\d{1,3}\.){3}\d{1,3}\]?)|(([-a-zA-Z0-9]+\.)+[a-zA-Z]{2,4}))(\:\d+)?(/[-a-zA-Z0-9._?,'+&%$#=~\\]+)*/?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=162
#A: Snikwad Kcirtap
#D: matches non-negative decimal floating points numbers less than 10
^[0-9](\.[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=163
#A: Snikwad Kcirtap
#D: Dollar Amount
(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=164
#A: Snikwad Kcirtap
\$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9]?)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=165
#A: yahnique barrett
\$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=166
#A: martin devos
#D: this expression validates a date-time field in European d/m/y h:m:s format. It is a european variation of Michael Ash's date-validation expression in this library.
#D: The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00
^((((31\/(0?[13578]|1[02]))|((29|30)\/(0?[1,3-9]|1[0-2])))\/(1[6-9]|[2-9]\d)?\d{2})|(29\/0?2\/(((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))|(0?[1-9]|1\d|2[0-8])\/((0?[1-9])|(1[0-2]))\/((1[6-9]|[2-9]\d)?\d{2})) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$

#U: http://regexlib.com/REDetails.aspx?regexp_id=167
#A: Zrekam makerZ
#D: Easy expression that checks for valid email addresses.
^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=172
#A: Greg Burns
#D: Validate “Time” Data to Work with SQL Server
#D: This is a fix (I hope) for a problem with the original expression.  It originally allowed any combination of am or pm. For example: ma, aa, mm, mp, etc.
(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=173
#A: Michael Trefry
#D: This regular expression validates a number NOT 0, with no more than 5 places ahead and 3 places behind the decimal point.
(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,3})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=174
#A: Thor Larholm
#D: Most email validation regexps are outdated and ignore the fact that domain names can contain any foreign character these days, as well as the fact that anything before @ is acceptable. The only roman alphabet restriction is in the TLD, which for a long time has been more than 2 or 3 chars (.museum, .aero, .info). The only dot restriction is that . cannot be placed directly after @.
#D: This pattern captures any valid, reallife email adress.
^.+@[^\.].*\.[a-z]{2,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=175
#A: john hamman
#D: This will match results in a template situation. For example:
#D: template reads
#D: Dear @@Name@@,
#D: ....
#D: would become
#D: Dear John,
#D: If you dont want to use the @@ change the @ to what ever characters you want.
@{2}((\S)+)@{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=185
#A: Erik Pettersson
#D: A regular expression that matches numbers. Integers or decimal numbers with or without the exponential form.
^[+-]?([0-9]*\.?[0-9]+|[0-9]+\.?[0-9]*)([eE][+-]?[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=186
#A: Paul Miller
^([1-zA-Z0-1@.\s]{1,255})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=187
#A: lynn eriksen
#D: this works with ASP.net regular expression valiadtors, ecma script compliant
^(\d{5}-\d{4}|\d{5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=188
#A: Fernando Cerqueira
#D: Validar o do CEP Brasileiro com 8 posicoes podendo usar
#D: mascara . e - ou somente numeros
(^\d{5}-\d{3}|^\d{2}.\d{3}-\d{3}|\d{8})

#U: http://regexlib.com/REDetails.aspx?regexp_id=190
#T: yy/mm/dd Date
#A: Michael Ash
#D: This expression validates dates in the y/m/d format from 1600/1/1 - 9999/12/31. Follows the same validation rules for dates as my other date validator (m/d/y format) located in this library.
^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=191
#A: asdf asdfa
#D: Validates a file path on your local drive or a network drive. A similar one was written by Vinod Kumar but it does not reject asterisks in the path. Moreover, his did not work with RegularExpressionValidators. This one does.
^([a-zA-Z]\:|\\)\\([^\\]+\\)*[^\/:*?"<>|]+\.htm(l)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=192
#A: J. Washam
#D: Matches 99.99% of e-mail addresses (excludes IP e-mails, which are rarely used).  The {2,7} at the end leaves space for top level domains as short as .ca but leaves room for new ones like .museum, etc.  The ?: notation is a perl non-capturing notation, and can be removed safely for non-perl-compatible languages.  See also email.
^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=193
#A: Mike T Spike
#D: Checks for Date in the typical MySQL DB Format. Not mutch but simple to for converting to German date format:
#D: $date = "2003-12-03";
#D: if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs))
#D: {
#D: echo "$regs[3].$regs[2].$regs[1]"; // prints 03.12.2003
#D: }
([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=194
#A: Andrew Polshaw
#D: This matches an IP address, putting each number in its own group that can be retrieved by number. If you do not care about capturing the numbers, then you can make this shorter by putting everything after ^ until immediately after the first \. in a group ( ) with a {3} after it. Then put the number matching regex in once more.
#D: It only permits numbers in the range 0-255.
^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=196
#A: Tom Persing
#D: Many currency expresssions allow leading zeros, thus $01.40 passes thru them.  This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and .0 Keywords: money dollar currency
^\$?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=197
#A: Jörg Maag
#D: This expression validates a date field in the European DD-MM-YYYY format. Days are validate for the given month and year. 
^(((((0[1-9])|(1\d)|(2[0-8]))-((0[1-9])|(1[0-2])))|((31-((0[13578])|(1[02])))|((29|30)-((0[1,3-9])|(1[0-2])))))-((20[0-9][0-9]))|(29-02-20(([02468][048])|([13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=198
#A: Hugues Gauthier
#D: This is permit all decimal number, exclude all alphanumeric caracter
^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=199
#A: Fernando Cerqueira
#D: Valida os todos Estados Brasileiros (UF)
#D: e o distrito Federal
^(ac|AC|al|AL|am|AM|ap|AP|ba|BA|ce|CE|df|DF|es|ES|go|GO|ma|MA|mg|MG|ms|MS|mt|MT|pa|PA|pb|PB|pe|PE|pi|PI|pr|PR|rj|RJ|rn|RN|ro|RO|rr|RR|rs|RS|sc|SC|se|SE|sp|SP|to|TO)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=200
#A: Henk de Vries
#D: Checks whether the string specified is in the same format as the UK postcode format defined on:
#D: http://www.magma.ca/~djcl/postcd.txt
#D: It allows:
#D: A = Letter
#D: N = Number
#D: AN NAA, ANA NAA, ANN NAA, AAN NAA, AAA NAA (rare), AANN NAA, AANA NAA
#D: It gives the option to have the two parts of the uk postcode to be separated by a space or a hyphen.
#D: (restriction is set to all-capitals)
^([A-Z]{1,2}[0-9]{1,2}|[A-Z]{3}|[A-Z]{1,2}[0-9][A-Z])( |-)[0-9][A-Z]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=201
#A: Henk de Vries
#D: Postcode for Belgium
^[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=202
#A: Henk de Vries
#D: Postcode for Germany
^[A-Z]{1}( |-)?[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=203
#A: Henk de Vries
#D: Postcode check for France (including colonies)
#D: -----
#D: Edited; sorry I didn't know about Corsica, no offense :)
^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=204
#A: Henk de Vries
#D: Postcode check for Italy (including possible Vatican/Italy indications)
^(V-|I-)?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=205
#A: Henk de Vries
#D: Postcode check for Netherlands
^[1-9]{1}[0-9]{3} ?[A-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=206
#A: Henk de Vries
#D: Postcode check for Spain
^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=209
#A: Serafeim Zanikolas
#D: matches any day of
#D: month 0?1-31
^((0?[1-9])|((1|2)[0-9])|30|31)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=210
#A: Lewis Moten
#D: Removes pesky comments and commented javascript from HTML
<!--[\s\S]*?-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=211
#A: Lewis Moten
#D: Finds any HTML tag and sub-matches properties weather it has an apposterphee, quote, or no quote/apposterphee
</?(\w+)(\s+\w+=(\w+|"[^"]*"|'[^']*'))*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=212
#A: Lewis Moten
#D: Validates a GUID with and without brackets. 8,4,4,4,12 hex characters seperated by dashes.
^\{?[a-fA-F\d]{8}-([a-fA-F\d]{4}-){3}[a-fA-F\d]{12}\}?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=213
#A: lawson law
^([a-zA-Z0-9@*#]{8,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=214
#A: Al Val
#D: Regular Expression that validate a phone number inside israel.
^0[23489]{1}(\-)?[^0\D]{1}\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=219
#A: Joel Dooris
#D: This pattern returns the font section from an RTF document. The first parenthetical subexpression captures the font number, the second returns the actual font enumeration. Lame-o, but fun! :-)
(\{\\f\d*)\\([^;]+;)

#%#% COMMENTED OUT: THIS ONE IS TOO BIG TO RUN
#U: http://regexlib.com/REDetails.aspx?regexp_id=220
#A: Lewis Moten
#D: Searches for tags and there atributes according to the HTML 2.0 specification to limit length of tags to 72 characters, and length of attribute values to 1024 characters.
# </?([a-zA-Z][-A-Za-z\d\.]{0,71})(\s+(\S+)(\s*=\s*([-\w\.]{1,1024}|"[^"]{0,1024}"|'[^']{0,1024}'))?)*\s*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=222
#A: Henric Rosvall
#D: Will locate an URL in a webpage.
#D: It'll search in 2 ways - first it will try to locate a href=, and then go to the end of the link. If there is nu href=, it will search for the end of the file instead (.asp, .htm and so on), and then take the data between the "xxxxxx" or 'xxxxxx'
(("|')[a-z0-9\/\.\?\=\&]*(\.htm|\.asp|\.php|\.jsp)[a-z0-9\/\.\?\=\&]*("|'))|(href=*?[a-z0-9\/\.\?\=\&"']*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=223
#T: MM/YYYY MONTH/YEAR
#A: Jony Ferreira
#D: This regular expressions matches dates in the format MM/YYYY where MM can be 01 to 12 and YYYY is always 4 digits long. 
^((0[1-9])|(1[0-2]))\/(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=224
#A: Gerald Martin
#D: Meets german norm-standard: DIN 5008: 1996-05 for telephone numbers
^\(\d{1,2}(\s\d{1,2}){1,2}\)\s(\d{1,2}(\s\d{1,2}){1,2})((-(\d{1,4})){0,1})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=225
#A: Scott Kahler
#D: This RE validates standard Bible verse notation.
(?:\d|I{1,3})?\s?\w{2,}\.?\s*\d{1,}\:\d{1,}-?,?\d{0,2}(?:,\d{0,2}){0,2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=226
#A: Alessandro Olivi
#D: Jason West (jason.west@mail.state.ky.us) date validator with leap years using a strict dd/mm/yyyy  (ITALIAN) format
(((0[1-9]|[12][0-9]|3[01])([-./])(0[13578]|10|12)([-./])(\d{4}))|(([0][1-9]|[12][0-9]|30)([-./])(0[469]|11)([-./])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([-./])(02)([-./])(\d{4}))|((29)(\.|-|\/)(02)([-./])([02468][048]00))|((29)([-./])(02)([-./])([13579][26]00))|((29)([-./])(02)([-./])([0-9][0-9][0][48]))|((29)([-./])(02)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02)([-./])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=227
#A: Bertrand Perrin
#D: Regular Expression that validate phone in France.
^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=229
#A: Peter Whyte
^[A-Z]{1,2}[1-9][0-9]?[A-Z]? [0-9][A-Z]{2,}|GIR 0AA$

#U: http://regexlib.com/REDetails.aspx?regexp_id=230
#A: Spring Zhang
#D: This is a regular expression to validate a date string in "MM/DD/YYYY" format, a date time string in "MM/DD/YYYY HH:MM" or a date time string in "MM/DD/YYYY HH:MM:SS" format.
#D: It can validate date from 1600 to 2199.
^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0-1]\d|[2][0-3])(\:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=231
#A: Karsten Grombach
#D: Usesful for importing vcards. Matches vcard elements and values.
((?<strElement>(^[A-Z0-9-;=]*:))(?<strValue>(.*)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=233
#A: Bill LaPrade
#D: This is a combination of a few regular expressions found on this site.  It allows for a flexible date and time combination, but requires a 12-hour clock (am/pm).  Many versions of the am/pm are supported.
^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0]\d|[1][0-2])(\:[0-5]\d){1,2})*\s*([aApP][mM]{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=235
#A: Brad Williams
#D: improved date validation M/D/YY or M/D/YYYY or MM/DD/YYYY or MM/DD/YY: 1/1/1920 through 12/31/2019; Feb 29 and 30 always allowed, deal with it
^((0?[13578]|10|12)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1}))|(0?[2469]|11)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=237
#A: Ken Madden
#D: This time validation expression accepts an hour between 1 and 9 (with optional leading zero) and minutes between 01 and 59.  This is primarily for use with an AM/PM drop down list or radio button.
^(([0]?[1-9]|1[0-2])(:)([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=238
#A: Jim Tebbel
#D: validate 12-hour time with am/pm after it, with optional spaces before or after, and optionally between time and am/pm.
^ *(1[0-2]|[1-9]):[0-5][0-9] *(a|p|A|P)(m|M) *$

#U: http://regexlib.com/REDetails.aspx?regexp_id=239
#A: s4 s
\({1}[0-9]{3}\){1}\-{1}[0-9]{3}\-{1}[0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=241
#A: Bob Duffett
#D: MM-DD-20YY HH:MM AP
#D: MM-DD-20YY H:MM AP
#D: MM-DD-20YY HH:MM
#D: MM-DD-20YY H:MM
#D: MM-DD-YY HH:MM AP
#D: MM-DD-YY H:MM AP
#D: MM-DD-YY HH:MM
#D: MM-DD-YY H:MM
#D: M-D-YY HH:MM AP
#D: M-D-YY H:MM AP
#D: M-D-YY HH:MM
#D: M-D-YY H:MM
#D: where - can be / or - or .
#D: where : can be : or - or .
#D: Definition:
#D: ^(                       ;Start of Line
#D: ([0]?[1-9]|[1][0-2])     ;00-09 or 10-12 or 1-9
#D: [\/|\-|\.]               ;/ or - or .
#D: ([0-2]\d|[3][0-1]|[1-9]) ;00-29 or 30-31 or 1-9
#D: [\/|\-|\.]               ;/ or - or .
#D: ([2][0])?\d{2}           ;2000-2099 or 00-99
#D: \s+                      ;one or more spaces
#D: (                        ;must be either 12H notation w/AM|PM
#D: (
#D: ([0][0-9]|[1][0-2]|[0-9])
#D: [\:|\-|\.]              ;: or - or .
#D: ([0-5]\d)               ;01 thru 59
#D: \s*                     ;zero or more spaces
#D: ([aApP][mM])?           ;nothing or AM or PM (case insensitive)
#D: )
#D: |                        ;or 24H notation w/out AM|PM
#D: (
#D: ([0-1][0-9]|[2][0-3]|[0-9]) ;00-19 or 20-23
#D: [\:|\-|\.]              ;: or - or .
#D: ([0-5]\d)               ;00-59
#D: )
#D: )
#D: )$                       ;End of Line
^(([0]?[1-9]|[1][0-2])[\/|\-|\.]([0-2]\d|[3][0-1]|[1-9])[\/|\-|\.]([2][0])?\d{2}\s+((([0][0-9]|[1][0-2]|[0-9])[\:|\-|\.]([0-5]\d)\s*([aApP][mM])?)|(([0-1][0-9]|[2][0-3]|[0-9])[\:|\-|\.]([0-5]\d))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=242
#A: Michael Gaertner
#D: Match any number between 1 and 50, no characters, no empty sets, and not zero. Match numbers greater than 1 and less than 51, no spaces, no characters.
^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$

#U: http://regexlib.com/REDetails.aspx?regexp_id=244
#A: Mekonnen Mekonnen
#D: Matches dates with the following format
#D: Month - either MM (like 01) or M (like 1) - from 1 to 12
#D: Day - either DD (like 01) or D ( like 1) - from 1 to 31
#D: Year - either YYYY ( like 1998) or YY (like 98)
#D: Separater - either - or /
^([1][12]|[0]?[1-9])[\/-]([3][01]|[12]\d|[0]?[1-9])[\/-](\d{4}|\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=248
#A: Patrick O'Hara
#D: Validates time in MySQL time format.  24 hour time colon seperated hours:minutes:seconds
(([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=249
#A: Rick Yokum
#D: This expression will allow a time value with 15 minute increments.  It will not accept seconds.  You can use either US time or Military time format.
^((([0]?[1-9]|1[0-2])(:|\.)(00|15|30|45)?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)(00|15|30|45)?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=250
#A: Diego dos Santos
#D: Validate brazilian date formats: dd/mm/yyyy or d/m/yy or d.m.yyyy
#D: with separators: . - /
#D: Valid dates only! d (1-31)/ m (1-12)/ y (0..)
#D: (rizzipereira.com.br)
#D: For American date format: http://www.regexlib.com/REDetails.aspx?regexp_id=932
^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=251
#A: Bri Gipson
#D: Accepts only positive decimal values. Zero and negatvie numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits.
(^\d*\.?\d*[1-9]+\d*$)|(^[1-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=252
#A: Bri Gipson
#D: Accepts only negative decimal values. Zero and positive numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits. 
(^-\d*\.?\d*[1-9]+\d*$)|(^-[1-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=253
#A: martix wang
#D: this is a regular expression that for chinese programer!
#D: yyyy/mm/dd hh:mm:ss
^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1]))$|^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=257
#A: Ramon Durães
#D: This re was used for set numbers only!
#D: Somente numeros são requeridos!
^[+]?\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=261
#A: Morten Henriksen
#D: Accepts data of time in format h:mm and hh:mm
#D: ^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
#D: in php [0-23]:[0-59]{2} (posix)
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=262
#A: Kevin Coleman
#D: Validates MM/YY for rough checking credit card expiration dates.
^((0[1-9])|(1[0-2]))\/(\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=265
#A: Bassel Issa
#D: this pattern can find all lines of script in HTML code from open to close tag range
<script[^>]*>[\w|\t|\r|\W]*</script>

#U: http://regexlib.com/REDetails.aspx?regexp_id=266
#A: Dennis Flynn
#D: Incorporated other people's examples; removed extraneous parenthesis on 10/7/04.  Currently the SSA site says 772 is the highest AREA number generated (http://www.ssa.gov/employer/highgroup.txt).  Old expression was:  (^|\s)\d{3}(-?|[\. ])\d{2}\2\d{4}($|\s|[;:,!\.\?]).  Looks for either the beginning of a line or whitespace before the beginning of the social security number, then either zero or one hyphen OR one of a period or space, then uses the \3 to reference the value returned in the parenthesis that includes the -?|[\. ] (basically says if the first dash, period, or space is there, then the second one is required; and if the first dash, period, or space is not there, then the second one can't be either), and finally looks for the end of a line, whitespace, or punctuation characters after the social security number.
(^|\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\d{2}|7[0-6]\d|77[0-2])(-?|[\. ])([1-9]0|0[1-9]|[1-9][1-9])\3(\d{3}[1-9]|[1-9]\d{3}|\d[1-9]\d{2}|\d{2}[1-9]\d)($|\s|[;:,!\.\?])

#U: http://regexlib.com/REDetails.aspx?regexp_id=267
#A: Gregory Entin
#D: Matches comma-separated list of IP address and IP ranges. E.g. 192.168.101.1-192.168.101.255,192.168.102.12
^(((((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])-(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))),)*)(((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-

#U: http://regexlib.com/REDetails.aspx?regexp_id=268
#A: Chuck Scholton
#D: This will check if a number is an integer.  Positive integers are all the whole numbers greater than zero: 1, 2, 3, 4, 5, ... . Negative integers are all the opposites of whole numbers: -1, -2, -3,-4, -5, ... .  Zero is not a whole number with either a positive or negative value, and is not an interger.  Null or Empty values are not intergers.     
^[-+]?[1-9]\d*\.?[0]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=269
#A: nick bennett
#D: Matches a valid email address including ip's which are rarely used. Allows for a-z0-9_.- in the username, but not ending in a full stop i.e user.@domain.com is invalid and a-z0-9- as the optional sub domain(s) with domain name and a 2-7 char (a-z) tld allowing for short tld's like ca and new ones like museum.
^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=270
#A: X Man
#D: This expression finds all opening and closing tags.  Good for stripping out tags in an XML or HTML document.
#D: I used it to clean-up HTML documents that had XML mixed in.  It found all the tags, then I just deleted the ones that weren't standard.  I used it in HOMESITES extended find.
<[^>]+>

#U: http://regexlib.com/REDetails.aspx?regexp_id=271
#A: Jason N. Gaylord
#D: This regex is to validate the time of a ~60 minute CD where the most time on the CD is 59:59 (minutes:seconds). It is derived from Ken Madden's time regex for a project for Erik Porter (Windows/Web guru). Written by Jason Gaylord.
^(([0]?[0-5][0-9]|[0-9]):([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=272
#A: Nicholas Rathwell
#D: It could be use to validate html input form (checkbox, optionbox, selectbox) when you have multiple numeric value under one field name. The validation is that the user have at lease chose one or more!
^[0-9]{1,}(,[0-9]+){0,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=273
#A: Rahul Pandit
#D: Additional checks for <> and " characters
^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*<>:\;|\"/]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=274
#A: Zeljko Stanfel
#D: ICD9 code pattern
^\d{3,3}\.\d{0,2}$|^E\d{3,3}\.\d{0,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=275
#A: Jeff Howden
#D: [Note: this regex was tested with Macromedia's ColdFusion MX.  I'm sure it'll need some massaging to work with other regex engines.]  Of the few domain validating regular expressions I found in my search I didn't find a single one that reliably handled multiple levels of subdomains or TLDs.  So, I wrote one and thoroughly tested it.  There are a ton of matching and non-matching examples that need to be included to show the completeness of this regex.
#D: Non-matching:  -.domain.com, -a.domain.com, -domain.com, domain-.com, any domain where the portion before the tld is greater than 63 characters.
#D: Matching: a.domain.com, a-a.domain.com, a--a.domain.com, a--defg.com, domain.co.uk.
^([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?\.){0,}([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?){1,63}(\.[a-z0-9]{2,7})+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=276
#A: brent stineman
#D: Expression to handle US currency entry in .NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.
^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=278
#A: James T. Kirk
#D: matches a six character "password" that has to consist of numbers and letters with at least one letter in it.
^(?![0-9]{6})[0-9a-zA-Z]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=279
#A: Saurabh Nath
#D: This Validator Validates any date from 1800 - 9999. It takes special care of Leap years and validates any format of type mm/dd/yyyy , m/dd/yyyy , mm/d/yyyy , m/d/yyyy.
#D: Since SQL Server does not accept any date before 1/1/1753, so i hope it will meet Your Requirements.(Modified Version of Jason West's Date Validator.)
((^(10|12|0?[13578])([/])(3[01]|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])([/])(30|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(2[0-8]|1[0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(29)([/])([2468][048]00)$)|(^(0?2)([/])(29)([/])([3579][26]00)$)|(^(0?2)([/])(29)([/])([1][89][0][48])$)|(^(0?2)([/])(29)([/])([2-9][0-9][0][48])$)|(^(0?2)([/])(29)([/])([1][89][2468][048])$)|(^(0?2)([/])(29)([/])([2-9][0-9][2468][048])$)|(^(0?2)([/])(29)([/])([1][89][13579][26])$)|(^(0?2)([/])(29)([/])([2-9][0-9][13579][26])$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=280
#A: scott cole
#D: Simple, but it gave me trouble in the c#...
{.*}

#U: http://regexlib.com/REDetails.aspx?regexp_id=283
#A: kode kode
#D: This regular expression matches 10 digit US Phone numbers in different formats. Some examples are
#D: 1)area code in paranthesis.
#D: 2)space between different parts of the phone number.
#D: 3)no space between different parts of the number.
#D: 4)dashes between parts.
^\(?[\d]{3}\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=286
#A: Mike t
#D: Can be used to remove
#D: &lt;SCRIPT language=&quot;JavaScript&quot;&gt;
#D: &lt;!--
#D: //--&gt;
#D: &lt;/SCRIPT&gt;
#D: from embeded javascript
#D: Should be used as case insensitive
(\/\/-->\s*)?<\/?SCRIPT([^>]*)>(\s*<!--\s)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=295
#A: Gavin Sharp
#D: It verifies that: - Only letters, numbers and email acceptable symbols (+, _, -, .) are allowed - No two different symbols may follow each other - Cannot begin with a symbol - Ending domain must be at least 2 letters - Supports subdomains - TLD must be between 2 and 6 letters (Ex: .ca, .museum) - Only (-) and (.) symbols are allowed in domain, but not consecutively.
#D: Problems:
#D: See comments below
^(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\-+)|([A-Za-z0-9]+\.+)|([A-Za-z0-9]+\++))*[A-Za-z0-9]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=296
#A: Dmitry Kandiner
#D: International phone number check - optional country code followed by area code surrounded with '-' or '(' and ')', or just an area code optionally starting with 0, followed by phone numder. The number itself may contain spaces and '-'
^(\+[1-9][0-9]*(\([0-9]*\)|-[0-9]*-))?[0]?[1-9][0-9\- ]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=297
#A: Joe Gass
#D: UK Phone Number Allows leading and trailing spaces and optional spaces after the dialing code.
#D: Initially the expression I posted was
#D: \s*0\d{4}\s*\d{6}\s*|\s*0\d{3}\s*\d{7}\s*
#D: But this didn't include optional brackets e.g. (01603) 123123 or phone numbers in a London format e.g. 0208 123 1234
(\s*\(?0\d{4}\)?\s*\d{6}\s*)|(\s*\(?0\d{3}\)?\s*\d{3}\s*\d{4}\s*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=298
#A: Dennis Zweigle
#D: 167 different US telephone patterns. Options includes a)0 or 1 dial, b)area code, c).+-()space between number dial-area code-number.  
(([01][\.\- +]\(\d{3}\)[\.\- +]?)|([01][\.\- +]\d{3}[\.\- +])|(\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=301
#A: Dominic Allkins
#D: First attempt at reg ex - work in progress - can't quite get it to work absolutely correctly so any comments would be great.
#D: Matches everything as it should apart from the last part of the IP, i.e. allows http://255.255.255.999 (which obviously it shouldn't but ran out of inspiration) so any corrections humbly and gratefully accepted.
#D: TLD check is not complete - just added most of the major ones but easy to dd to if you want to.
#D: BTW - you'll need to replace the & with just the ampersand in the reg ex
^(http|https|ftp)\://(((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([a-zA-Z0-9_\-\.])+\.(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum|uk|me))((:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=302
#A: Carlos R. L. Rodrigues
#D: Checks if has the first and the last name, and check the capital letters.
#D: Use with the RegExp.test method
(^[A-ZÀ-Ü]{1}[a-zà-ü']+\s[a-zA-Zà-üÀ-Ü]+((([\s\.'])|([a-zà-ü']+))|[a-zà-ü']+[a-zA-Zà-üÀ-Ü']+))

#U: http://regexlib.com/REDetails.aspx?regexp_id=303
#A: Carlos R. L. Rodrigues
#D: dd/mm/yy
#D: Check dates between 1/1/1900 - 31/12/2099
(^((((0[1-9])|([1-2][0-9])|(3[0-1]))|([1-9]))\x2F(((0[1-9])|(1[0-2]))|([1-9]))\x2F(([0-9]{2})|(((19)|([2]([0]{1})))([0-9]{2}))))$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=305
#A: Jag fire
#D: Matches "clan" nicks/names.
^(\{|\[|\().+(\}|\]|\)).+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=306
#A: Nicholas Berardi
#D: Is used to evaluating domain names, none of the extras such as paths or protocols.
^(([\w][\w\-\.]*)\.)?([\w][\w\-]+)(\.([\w][\w\.]*))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=307
#A: Rico lour
#D: Regular expression to match a canadian postal code where it matches a string with or without the hyphen and in upercase or lowercase
^([A-Za-z]\d[A-Za-z][-]?\d[A-Za-z]\d)

#U: http://regexlib.com/REDetails.aspx?regexp_id=308
#A: Daren Salter
#D: UK Mobile phone regular expression.
#D: I usually run this against a telephone field to split out landlines and mobile numbers.
^07([\d]{3})[(\D\s)]?[\d]{3}[(\D\s)]?[\d]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=309
#A: John Smart
#D: This is just a regular special char expression used to get the hax0rs off your back (hopefully).  You can use this for regular open name checking if you wanted.  It only fails on the insert of anything other than a-z, A-Z, and ' or whitespace. I'm open to suggestions, but try to email them to me as well as posting them to help others.  Thanks.
^([a-zA-Z.\s']{1,50})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=310
#A: Michael Matusiewicz
#D: This Regular expression validates a string that contains all printable characters with a minimum length of 1 and maximum length of 5.
#D: Obviously the min and max can be changed to meet the users needs.
#D: ^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$ This is the string, I keep getting &lt and other characters when I save it.
^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=314
#A: gabe g
#D: Validates US phone numbers. Phone number can be delimited with dashes or spaces. Area code can optionally include parentheses. To optionally validate area codes, try this expression.
#D: ^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$
^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=315
#A: Jason N. Gaylord
#D: I modified the existing phone number regex for another user looking to only allow 082, 083, 084, or 072 exchanges. Written by Jason Gaylord
^\(?082|083|084|072\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=316
#A: Felipe Braga
#D: This expression validates dates in the Brazilian d/m/y format from 1/1/1600 - 12/31/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999. Days and months must be 1 or 2 digits and may have leading zeros. Years must be 4 digit years, between 1600 and 9999. Date separator must be a slash (/)
^(?:(?:(?:0?[1-9]|1\d|2[0-8])\/(?:0?[1-9]|1[0-2]))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:(?:(?:31\/0?[13578]|1[02])|(?:(?:29|30)\/(?:0?[1,3-9]|1[0-2])))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:29\/0?2\/(?:(?:(?:1[6-9]|[2-9]\d)(?:0[48]|[2468][048]|[13579][26]))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=317
#A: Cal Guisti
#D: This is an update of Paul Miller's RegEx.  It will cut out literal <> but I haven't fully tested it, it's just a quick fix since his didn't work all that well.
#D: I also took out the \s.  You could add this back in but I use this for very simple password verification, and I certainly have no use for spaces in my passwords.
^([0-9A-Za-z@.]{1,255})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=319
#A: Markus Unterauer
#D: Correct German DateTime. Does not check leap year rules!
#D: Possible Formats of date part:
#D: D.M.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.M.YYYY
#D: Possible formats of time part:
#D: h:mm or hh:mm
^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2})$|^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2}\s([1-9]|[0-1]\d|[2][0-3])\:[0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=320
#A: Dany Lauener
#D: Date with leap years. Accepts '.' '-' and '/' as separators
#D: d.m.yy to dd.mm.yyyy (or d.mm.yy, etc)
#D: Ex: dd-mm-yyyy   d.mm/yy   dd/m.yyyy  etc etc
#D: Accept 00 years also.
^((((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|[12]\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|1\d|2[0-8])02((1[6-9]|[2-9]\d)?\d{2}))|(2902((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=321
#A: Jag fire
#D: Matches simple IP addresses. It's not too complex or long, but it does the job if you want something short/simple.
^(([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=322
#A: Asim Goheer
<[iI][mM][gG]([^>]*[^/>])

#U: http://regexlib.com/REDetails.aspx?regexp_id=323
#A: Gabriel Fróes
#D: This regular expressions matches CNPJ number. CNPJ is a Registration Number of Brazilian Companies.
\d{2}.?\d{3}.?\d{3}/?\d{4}-?\d{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=324
#A: Ed Preston
#D: Pulls out comments (both Rem and ') and string literals from VB or VBScript. Usefull for spell checking or review.
#D: Notes: The VBScript for "Rem" documentation says that it must be followed by a space but VBScript seems to accept tab characters as well.
#D: The multiline flag is assumed for this search.
('.*$|Rem((\t| ).*$|$)|"(.|"")*?")

#U: http://regexlib.com/REDetails.aspx?regexp_id=325
#A: stephen lam
#D: valid date base on Month
^\d{2}\s{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Apr|Sep|Oct|Nov|Dec)\s{1}\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=326
#A: Dany Lauener
#D: Date expression validator with format YYMMDD
#D: Validates leap years.
#D: Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years !
^((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=327
#A: Richard Slade
#D: Validates a UK Bank Sort code
^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=328
#A: Roger Ramjet
#D: Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is valid: !#$%^&amp;amp;*-+~/'`|{}@xyz.com
#D: Sorry looks like this site is mangling the quote and ampersand characters - you'll have to fix that yourself.
^((\"[^\"\f\n\r\t\v\b]+\")|([\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+(\.[\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+)*))@((\[(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))\])|(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))|((([A-Za-z0-9\-])+\.)+[A-Za-z\-]+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=331
#A: Richard Slade
#D: Validates a UK mobile phone number in International format
^[+]447\d{9}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=332
#A: Tomas Andrysek
#D: reg. expr. 4 checking 24 time
^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=333
#A: bilou mcgyver
#D: does not allow IP for domain name : hello@154.145.68.12
#D: does not allow litteral addresses "hello, how are you?"@world.com
#D: allows numeric domain names
#D: after the last "." minimum 2 letters
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=334
#A: Demo Gorgon
#D: Whilst writing a plain-text to HTML function, I ran into the problem of links that users had written with <a> tags (as opposed to just writing the URL) were linking improperly.  This regular expression returns many types of URL, and preceding characters, if any.  This allows you to handle each type of match appropriately
\b(((\S+)?)(@|mailto\:|(news|(ht|f)tp(s?))\://)\S+)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=335
#A: Matt Biggin
#D: This matches Java class names such as "com.test.Test". It's being used within an XML Schema to validate classname as specified in XML documents.
^(([a-z])+.)+[A-Z]([a-z])+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=336
#A: Andrew Deren
#D: Matches variable names/identifier from C# (and most other languages)
^[a-zA-Z_][a-zA-Z0-9_]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=337
#A: Mike Stancombe
(at\s)(?<fullClassName>.+)(\.)(?<methodName>[^\.]*)(\()(?<parameters>[^\)]*)(\))((\sin\s)(?<fileName>.+)(:line )(?<lineNumber>[\d]*))?

#U: http://regexlib.com/REDetails.aspx?regexp_id=338
#A: Martin Henningsson
#D: Swedish phone numbers according to SIS standard
^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=339
#A: Jonathan Crossland
#D: Detects HTML tags open and/or closed with and without whitespace or characters in between. Good for stripping all tags from a string.
>(?:(?<t>[^<]*))

#U: http://regexlib.com/REDetails.aspx?regexp_id=340
#A: Rick Spiewak
#D: Credit card validator for AMEX, VISA, MasterCard only. Allows spaces, dashes, or no separator between digit groups according to the layout (4-6-5 for AMEX, 4-4-4-4 for Visa and Mastercard)
^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}

#U: http://regexlib.com/REDetails.aspx?regexp_id=341
#A: Paul Auger
#D: This allows a sequence of real numbers to be added, separated by a comma (required) and a space (optional).  Based pretty heavily on an expression by Steven Smith on this site.
^((\d?)|(([-+]?\d+\.?\d*)|([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d+\.?\d*))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d+\.?\d*)))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=343
#A: Pete Samwel
#D: Matches a file name to be either a .wma or .mp3 file. This can be used to check file uploads to make sure they are of a certain type. Substitute letters where appropriate for specific file types. To include more simply add logical 'or' (|) operator and append.
(.*\.([wW][mM][aA])|([mM][pP][3])$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=347
#A: Joseph Warwick
#D: Heres my sql clause parser regexp for recordset filtering. Does recursive query parsing all by its self. Only problem I cant figure is how to match comma separated lists of quoted strings. Tell me if you figure out how!
#D: The unicodes in the re was put in by the entry form please replace them with their ascii equivalents to use it.
(NOT)?(\s*\(*)\s*(\w+)\s*(=|<>|<|>|LIKE|IN)\s*(\(([^\)]*)\)|'([^']*)'|(-?\d*\.?\d+))(\s*\)*\s*)(AND|OR)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=350
#A: Vitaly Kompot
#D: This is my basic phone number verification. it allows a + - , signs digits, spaces and blank entry
(^(\+?\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=351
#A: Steve Fisher
#D: Validates Microsoft Project-type duration entries. Accepts a number and a unit. The number part can be integer or decimal. The unit can be several variations of weeks, days, and hours: e.g., w, wk, week, ws, wks, weeks are all valid. Whitespace between the number and the unit is optional: e.g., 1d, 2 days, 3.5w are all valid. Captures the number value in a group named num and the unit string in a group named 'unit'.
^\s*(?'num'\d+(\.\d+)?)\s*(?'unit'((w(eek)?)|(wk)|(d(ay)?)|(h(our)?)|(hr))s?)(\s*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=352
#A: David Yack
#D: Limit Length - limit the length of a text box or other area to contain any character plus new line
^(.|\n){0,16}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=354
#A: Doug Moore
#D: This expression will match all of the commands(escape codes) used in ANSI files.  These are what were used to create the colors/blocks on BBS's for those of us that once dialed into them.
#D: http://www.wikipedia.org/wiki/ANSI_escape_code has a reference for ANSI escape codes.
#D: http://idledreams.net/lordscarlet/posts/153.aspx shows an example of the engine I have created surrounding the expression
(?s)(?:\e\[(?:(\d+);?)*([A-Za-z])(.*?))(?=\e\[|\z)

#U: http://regexlib.com/REDetails.aspx?regexp_id=355
#A: Darren Neimke
#D: Matches C style strings allowing for escaped string delimiters to be included in the match.
#D: ALTERED 13-Dec-2003
#D: -------------------
#D: Previous pattern was :
#D: "([^"](?:\\.|[^\\"]*)*)"
#D: Changed to:
#D: "([^"]*(?:\\.|[^\\"]*)*)"
#D: Making the first character after the opening quote optional allows the pattern to match on empty quotes: "".
"([^"](?:\\.|[^\\"]*)*)"

#U: http://regexlib.com/REDetails.aspx?regexp_id=356
#A: Darren Neimke
#D: This is my all-time favourite e-mail validator.  I've used it for years and it's never failed me :-)
(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})

#U: http://regexlib.com/REDetails.aspx?regexp_id=357
#A: Darren Neimke
#D: Matches filenames.
#D: UPDATED on 1st Jan 2004.
^([a-zA-Z]\:)(\\[^\\/:*?<>"|]*(?<![ ]))*(\.[a-zA-Z]{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=358
#A: Volker Roth
#D: We've come across the situation where we had to extract the IIS-Log entries without the header information. The data is far more complex than the sample given.
#D: Explanation:
#D: ^[^#] = lines not beginnin with #
#D: ([^ ]+ ){6} = 6 times no space until one space
#D: [^ ]+ = no spaces allowed...
#D: $ = ...until end of line
#D: For further explanation don't hesitate to write E-Mail.
^[^#]([^ ]+ ){6}[^ ]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=359
#A: Darren Neimke


#U: http://regexlib.com/REDetails.aspx?regexp_id=360
#A: mana deys
#D: For testing 24H based time entry.  Tests if there is a colon to separate the hours from the minutes
^(([0-9])|([0-1][0-9])|([2][0-3])):?([0-5][0-9])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=361
#A: David Darling
^(((((0[13578])|([13578])|(1[02]))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(30)))|((02|2)[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s(((0[1-9])|([1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=362
#A: Stefan Beylen
#D: Validates Austrian Cellular Phone Numbers. Works with ONE, T-Mobile, A1, Telering and new Provider "Drei". WITHOUT Country Code Verification.
^0(6[045679][0469]){1}(\-)?(1)?[^0\D]{1}\d{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=363
#A: Daniel Pickles
#D: Matches a whole number between 1 and 20 inclusively
^1?[1-9]$|^[1-2]0$

#U: http://regexlib.com/REDetails.aspx?regexp_id=364
#A: Hakim SALHI
#D: For Date format MM-JJ-YYYY validation
^[\w-\.]+@([\w-]+\.)+[\w-]{2,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=367
#A: Jos Krause
#D: Validates Dutch Postal Codes (ZipCode). There was a previous one listed here, but it's not entirely correct. Namely that dutch postal codes can contain a zero but cannot start with one, so this one is the adjusted version.
^[1-9][0-9]{3}\s?[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=368
#A: sanjayanthan vijayakeerthi
#D: Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric .This will be usefull in money related
#D: fields or decimal fields. 
^([0-9]*|\d*\.\d{1}?\d*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=369
#T: DateTime M/d/y hh:mm:ss
#A: Michael Ash
#D: DateTime Validator. 
^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=370
#T: Time
#A: Michael Ash
#D: This RE validates times patterns.
^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=372
#A: Mladen Mihajlovic
#D: Matches HTML Color strings. Like #FFFFFF is white and #000000 is black and #FF0000 is red and so on...
^(#){1}([a-fA-F0-9]){6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=373
#A: Darren Neimke
#D: Matches and segments the sections of an opening tag. For more detailed information refer to this blog entry: http://weblogs.asp.net/dneimke/posts/25616.aspx


#U: http://regexlib.com/REDetails.aspx?regexp_id=374
#A: Mathews Inga
#D: Date in DD/MM/YYYY format.
#D: Fecha en formato DD/MM/AAAA.
(((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])(\d{4}))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])(\d{4}))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=376
#A: Sung Lee
^((((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9]))))[\-\/\s]?\d{2}(([02468][048])|([13579][26])))|(((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))[\-\/\s]?\d{2}(([02468][1235679])|([13579][01345789]))))(\s(((0?[1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=377
#A: David Tersigni
#D: matches IP address in hex form in dotted or not dotted notation
[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=378
#A: David Tersigni
#D: Very Simple Match for dotted Decimal IP address.  Doesn’t Validate addresses
[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=379
#A: Danil Sholokhov
#D: Matches number in format XX.XX Please note that this expression allows maximum of 8 digits before the dot and 2 (optional) digits after the dot.
(^[0-9]{1,8}|(^[0-9]{1,8}\.{0,1}[0-9]{1,2}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=380
#A: David Tersigni
#D: Simple match for U.S. Amateur Radio Call signs
#D: Must start with an A,K,N or W.
#D: 1 or two prefix letters (not case sensitive),
#D: Exactly one zone digit,
#D: One to three suffix digits( not case sensitive).
#D: 73
^[AaWaKkNn][a-zA-Z]?[0-9][a-zA-Z]{1,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=381
#A: Sjef van Leeuwen
#D: Based of from Steward Haddock's domain nam
#D: Checks domain names. This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.), hypens(-). and valid extension.
^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly| ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk| pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr| st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|AERO|BIZ|COM|COOP|EDU|GOV|INFO|INT|MIL|MUSEUM|NAME|NET|ORG|AC|

#U: http://regexlib.com/REDetails.aspx?regexp_id=382
#A: Yosi Taguri
#D: using match.Result("$1.$2.$3.$4")
#D: will return the assembly version of a given c# AssemblyInfo.cs file
^\[assembly: AssemblyVersion\(\"([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=383
#A: Tony Austin
<!--.*?-->

#U: http://regexlib.com/REDetails.aspx?regexp_id=384
#A: paolo beltrami
#D: This simple regexp should match any possible italian address entry and doesn't match NULL entries (good if address is required). Should work well for any other address (it's been verified against 250 addresses from most european countries, usa and australia. Please mail me if there's something missing
^[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\']+[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\' ]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=385
#T: Days of the week
#A: Michael Ash
#D: This RE matches Days of the week or their abbreviations.
^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=387
#A: Joshua Olson
#D: Matches a valid "empty" tag (has trailing slash).  Note, if you run it against a string such as <img src="test.gif" alt="<hr />"> it will indeed return a match.  But, the match is not at character 1 like you'd suspect, but rather it's matching the internal <hr />.  If you look at the source of this tag (http://concepts.waetech.com/unclosed_tags/) you'll find a whoe suite of regex's for matching html tags.  Using them you could feasibly step though a document and avoid this mismatch as the outer tag would match *in totality* and you'd completely skip this inner match.
<[a-zA-Z]+(\s+[a-zA-Z]+\s*=\s*("([^"]*)"|'([^']*)'))*\s*/>

#U: http://regexlib.com/REDetails.aspx?regexp_id=388
#A: Laurent J
#D: for validate a email, but with this regex it 's possible : a._-z@a_.....____---.com
^[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9]@[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9][\.][a-z0-9]{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=391
#A: Remi Sabourin
#D: Checks domain names. This validates domains based on latest specifications (RFCs 952 and 1123 dealing with hostnames and RFC 1035 dealing with domain name system requirements) except that it only includes realistic fully-qualified domains: 1. requires at least one subdomain 2. allows shortest top-level domains like "ca", and "museum" as longest.
#D: Other validation rules: 1. Labels/parts should be seperated by period. 2. Each label/part has maximum of 63 characters. 3. First and last character of label must be alphanumeric, other characters alphanumeric or hyphen. 4. Does not check maxlength of domain which incidentally is 253 characters of text (255 binary representation).
#D: For a regular expression that matches ALL domains:
#D: ^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)*[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$
^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=395
#A: Max Lu
#D: Double byte charactors validator.
#D: The rule applies to double byte charactor input validation.
^[\u0081-\uFFFF]{1,}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=396
#A: Jason N. Gaylord
#D: This validates the states and territories of the United States in a 2 character uppercase format. Very poor excuse for a regular expression!  ;)
#D: Written by Jason Gaylord.
^((AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=397
#A: Jason N. Gaylord
#D: It is the exact phone number regular expression for '(###) ###-####'.
#D: Written by Jason Gaylord.
^([\(]{1}[0-9]{3}[\)]{1}[ ]{1}[0-9]{3}[\-]{1}[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=399
#D: Matches positive whole numbers from 0-999
^\d(\d)?(\d)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=401
#A: Michiel Lankamp
#D: Used for dutch postalcodes; no leading zero. 4 numbers and 2 letters.
^[1-9]{1}[0-9]{3}\s{0,1}?[a-zA-Z]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=402
#A: Rod Early
#D: This validates Length times Width times Height measurements, which consists of 3 whole or decimal numbers separated by an x.
^\s*(((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*) )\s*[xX]\s*){2}((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*))\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=403
#A: andrew stone
#D: Simple expression for matching all commas and all whitespace characters:  ASCII (13,10,44)
[\\s+,]

#U: http://regexlib.com/REDetails.aspx?regexp_id=404
#T: MMM dd, yyyy Date
#A: Michael Ash
#D: This RE validate Dates in the MMM dd, yyyy format from Jan 1, 1600 to Dec 31, 9999. The format is as follows: The name or 3 letter abbreivation, without a period, of the month, then a space then the day value then a comma then a space finally the year. The correct number of day are validated for each month include leap years. The name of month is case sensitive.
^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\ ((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\,\ ((1[6-9]|[2-9]\d)\d{2}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=405
#T: dd MMM yyyy Date
#A: Michael Ash
#D: This RE validates dates in the dd MMM yyyy format. Spaces separate the values.
^((31(?!\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=406
#T: Months
#A: Michael Ash
#D: This RE validate the full name of the months.
^(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=409
#A: Dany Lauener
#D: dd/MM/yyyy with leap years 100% integrated
#D: Valid years : from 1600 to 9999
#D: As usual, many tests have been made.
#D: I think this one should be fine.
^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((1[6-9]|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=410
#A: Paul Ashton
#D: validate a number 5 digits and 2 decimal places allowing zero
^\d{1,5}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=411
#A: Paul Ashton
#D: validates  to 5 digits and 2 decimal places but not allowing zero
(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=412
#A: Brenden Salta
#D: A general string validation to insure that NO malicious code or specified characters are passed through user input.  This will allow you to input any characters except those specified.  The expression above does not allow user input of <>`~!/@\#}$%:;)(_^{&*=|'+. Input as many invalid characters you wish to deny.  This really works!
^[^<>`~!/@\#}$%:;)(_^{&*=|'+]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=413
#A: Jeff Gabriel
#D: More permissive than others on the site, this one allows you to let a user enter US phone numbers in the way they most commonly use, without letting them enter non-valid combinations.
^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=414
#A: Craig Pearson
#D: Matches a comma-seperated list of year(s).
^([1-9]{1}[0-9]{3}[,]?)*([1-9]{1}[0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=415
#A: luca milan
#D: Match the content of any regular tag/s 
<(?<tag>.*).*>(?<text>.*)</\k<tag>>

#U: http://regexlib.com/REDetails.aspx?regexp_id=418
#A: Scott Long
#D: I wrote this regular expression because a project I was working on required a stricter validator on social security numbers. There are actually gov't standards on what is a valid social: The first 3 digits can't be > 779, The first 3 digits can't be 000, The second 2 digits can't be 00, and the last 4 digits can't be 0000. This regex handles all these cases and checks formatting for numbering and dashes (###-##-####)
^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=419
#A: Ashish Sheth
#D: This expression validates for valid C# or C++ identifier
^[a-zA-Z_]{1}[a-zA-Z0-9_]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=420
#A: Josh Crosby
#D: This will match single numbers,the first block [1346] checks for single digits of 1, 3, 4 or 6, could easily by [1-5] as well. The second block [10] checks for 10 only.
#D: This matches inclusively.
^[1]$|^[3]$|^[4]$|^[6]$|^[1]0$

#U: http://regexlib.com/REDetails.aspx?regexp_id=422
#A: Martin Schwedes
#D: this is a very little regex for use within a content management software.  links within textfields has not to be written in html.  the editor of the cms is instructed to use it like this:  1. mention spaces in front and behind the url  2. start url with http://, mailto://, ftp:// ...  3. use optional linktext within #linktext# (separated with single space)  4. if there is no linktext the url/email will show up as linktext  5. avoid url with spaces in filename (use %20 urldecode)   replace pattern (space in front):   <a href="\\1\\3\\4" target="_blank">\\3\\6</a>
 (mailto\:|(news|(ht|f)tp(s?))\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) 

#U: http://regexlib.com/REDetails.aspx?regexp_id=424
#A: T H
^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=425
#A: Roberto Misticoni
#D: This regular expression match any valid file path. It checks local drives and network path. The file extension is required.
^([a-zA-Z]\:|\\\\[^\/\\:*?"<>|]+\\[^\/\\:*?"<>|]+)(\\[^\/\\:*?"<>|]+)+(\.[^\/\\:*?"<>|]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=426
#A: David Walker
#D: A regex that attempts to accurately parse the elements from a proper name where the format is in <<First, Last>> order or some permutation of that order.  Critiques and suggestions for improvement are welcome. 
(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w*|[A-Z]?\.?)\s?(?<LastName>[A-Z]\w*\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=427
#A: David Walker
#D: Fine-tuned the previous version to handle surnames with embedded caps like McCoy and DeCarlo.
(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>[A-Z]?\w{0,3}[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=428
#A: David Walker
#D: Getting closer now...  this one has the functionality of the previous two and matches on names like "Jill St. John" as well.
(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>(?:[A-Z]\w{1,3}|St\.\s)?[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)

#U: http://regexlib.com/REDetails.aspx?regexp_id=429
#A: David Walker
#D: Regex parses elements from a proper name in <<Last, First>> order and permutations.  Comments and critiques are welcome.
(?<LastName>[A-Z]\w+\-?[A-Z]?\w*),\s(?<Suffix>Jr\.|Sr\.|IV|III|II)?,?\s?(?<FirstName>[A-Z]\w*\-?[A-Z]?\w*\.?)\s?(?<MiddleName>[A-Z]?\w*\.?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=431
#A: Logan Tran
#D: HTML Pattern Matching
#D: PLEASE HELP
#D: /<[^>]*>/ig
#D: The above pattern is only successful when html tag are simple (they don't include any javascript).  This mean that the pattern will fail if something like this is within the tag <input type=button value=test onclick='if(n.value>5)do_this();'>.  It will not match the entire open n close sign.
#D: How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign and not when it just see a > within a '' or "".
#D: Any help would be greatly appreciate.  Thanks a whole lot.
#D: Logan
<[^>]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=432
#A: Giorgio Spugnesi
#D: Match italian telephone number with prefix followed by "/", "-" or blank and number. Usefull with numeric keybord!
^([0-9]*\-?\ ?\/?[0-9]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=433
#T: XML Tag
#A: Michael Ash
#D: This RE will match XML tag elements.  All elements must be closed. Won't match nested tags
<(\w+)(\s(\w*=".*?")?)*((/>)|((/*?)>.*?</\1>))

#U: http://regexlib.com/REDetails.aspx?regexp_id=436
#A: Darren Neimke
#D: Simple Postcode - this is the first test of the new WebService :-)
(\d{4,6})

#U: http://regexlib.com/REDetails.aspx?regexp_id=445
#A: Darren Neimke
(?s)/\*.*\*/

#U: http://regexlib.com/REDetails.aspx?regexp_id=446
#A: Ed Stafford
#D: My first Expression. This will match US postal codes (zip codes) using simple 5 digit format with optional 4 digit extention seperated by a space or hyphen. Will not accept letters.
#D: example: 12345 or 12345-1234 or 12345 1234.
^[0-9]{5}([\s-]{1}[0-9]{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=454
#A: Nitesh Waghela
^[a-z]+[0-9]*[a-z]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=455
#A: Joe Gass
#D: Credit card validator
#D: Works for switch card numbers too
#D: Switch card bit is (\d{6}[-\s]?\d{12})
#D: Credit card bit is (\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})
#D: I use this as a client side test before running a more comprehensive server side check.
(\d{6}[-\s]?\d{12})|(\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=456
#A: Steven Smith
#D: This is a regex I wrote to capture requests to AspAlliance.com with an article id as the only thing after the domain.  So http://aspalliance.com/123 would go to article number 123.  It maps the URL to the actual aspx file that displays the article based on the ID.
\.com/(\d+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=457
#A: Darren Neimke
#D: Matches a string to ensure that it does not end with .aspx; sure, you'd probably use string handling to do something this simple but, in the real world you'd whack a regex which validates a valid url to the front of this.
#D: The pattern was created by Wayne King; you can read about it here:
#D: http://scottwater.com/blog/posts/10204.aspx 
.*?$(?<!\.aspx)

#U: http://regexlib.com/REDetails.aspx?regexp_id=458
#T: Phone Numbers
#A: Dean Dal Bozzo
#D: This regular expressions matches phone numbers with area codes and optional US country code and optional phone extension.  User have so many ways of entering phone numbers into input fields.  This allows for some of the ones I've encountered.  Feel free to contact me if you find ones that do not match.
^(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*[-\/\.]?\s*(\d{3})\s*[-\/\.]?\s*(\d{4})\s*(([xX]|[eE][xX][tT])\.?\s*(\d+))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=460
#A: Bernard Martin-Rabaud
#D: matches any string  with characters repeated more than twice, sometimes used as fake input
(.)\1{2,}

#U: http://regexlib.com/REDetails.aspx?regexp_id=461
#A: Darryl Kuhn
#D: This expression is useful for determining if an address is a PO Box type address. This can be useful in shipping systems as well as other systems that need to  make determinations based on the type of address imputed.
^p(ost)?[ |\.]*o(ffice)?[ |\.]*(box)?[ 0-9]*[^[a-z ]]*

#U: http://regexlib.com/REDetails.aspx?regexp_id=462
#T: Font Sizes
#A: Vincent Faller
#D: It can be used to validate Font Sizes.
#D: Thanks to Gideon Engelberth for the shorter version of my original expression.
^\d+\x20*([pP][xXtT])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=463
#T: ISBN-10
#A: Michael Ash
#D: This RE validates the format of an ISBN number
ISBN\x20(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=464
#A: Tanguy Pruvot
#D: grab all tags attributes...
#D: (1:img)
#D: (2: src="truc")
#D: >
#D: i use it to clean html pages to grab infos...
#D: use a RegEx Replace with "<$1>" to keep only tags codes...
<([^\s>]*)(\s[^<]*)>

#U: http://regexlib.com/REDetails.aspx?regexp_id=465
#A: Tanguy Pruvot
#D: All tags in first submatche
#D: All attributes in second one...
<([^<>\s]*)(\s[^<>]*)?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=466
#A: Eli Robillard
#D: "Starts with but does not end with."
#D: I needed a pattern to require certain first (and optional middle) names, but to fail for certain last names. So if Bob, John, and Mary are acceptable first names but the White's are always rejected then...
^((Bob)|(John)|(Mary)).*$(?<!White)

#U: http://regexlib.com/REDetails.aspx?regexp_id=470
#A: Shawn Hall
#D: This pattern returns as much of the first x characters of a string as full words or sentences as a match, where x is currently 20. Change x to adjust the length supported in your database field.
#D: I'm currently using this within a string shortening utility to shrink large text regions to word/sentance-boundary elements and appending an ellipsis as a text continuator.
^([\s\S]){1,20}([\s\.])

#U: http://regexlib.com/REDetails.aspx?regexp_id=471
#T: State Codes
#A: Michael Ash
#D: The RE match U.S. state abbreviation used by the U.S. Post Office.
^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=472
#T: U.S. Street Address
#A: Michael Ash
#D: captures US street address.
#D: Address format: ##### Street 2ndunit City, ST zip+4
#D: address1 - must have street number and proper case street name. no punctuation or P.O Box #### punctuation manditory for P.O.
#D: address2 - optional secondary unit abbr.  Secondary range required for some units.
#D: City - Proper case city name.
#D: State - State abbreviation.  All caps
#D: zip - zip+4. Can't be all zeroes
#D: Abbreviations for secondary units and States are those used by the US Postal Service.
#D: http://www.usps.com/ncsc/lookups/usps_abbreviations.html
#D: Certain secondary units require a secondary range, see the above link
#D: THis RE isn't unbreakable, Probably will allow some false positives but should work for most addresses.
^(?n:(?<address1>(\d{1,5}(\ 1\/[234])?(\x20[A-Z]([a-z])+)+ )|(P\.O\.\ Box\ \d{1,5}))\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\x20\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\.?)\s{1,2})?)(?<city>[A-Z]([a-z])+(\.?)(\x20[A-Z]([a-z])+){0,2})\, \x20(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])\x20(?<zipcode>(?!0{5})\d{5}(-\d {4})?))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=473
#A: Giorgio Spugnesi
#D: This pattern match italian fiscal code (codice fiscale).
^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=474
#A: Alsu Fifty
#D: Used to verify that the string consists of only A-z, 0 - 9 and underscore. Several words allowed, only one space between them. No spaces up front. Hey, I know it's easy, but it was not in the library! Plus, the test option here is not working well all the time.
(\w(\s)?)+

#U: http://regexlib.com/REDetails.aspx?regexp_id=476
#A: James Fal
#D: Updated, changed [\w]* to [\w]+ because pattern should not match Sub (), there would be no function name which would be incorrect.
#D: Will extract function declarations from ASP or also VB I assume. Will even capture declarations that break across new lines or ones that use the underscore(line continuation character) in Microsoft's VB, VBA, ASP, etc. Had to put this together to document some code on a project and didn't see anything like it on the web. I hope it helps out anyone else who has to re-engineer ASP or VB code. 
^(Function|Sub)(\s+[\w]+)\([^\(\)]*\)

#U: http://regexlib.com/REDetails.aspx?regexp_id=477
#A: Roy Osherove
#D: This pattern matches..
regex

#U: http://regexlib.com/REDetails.aspx?regexp_id=478
#A: Jon Stephens
#D: Basic US phone number matching pattern.  I found this place and used a regex, so figured I'd share.
^(\(?\d\d\d\)?)?( |-|\.)?\d\d\d( |-|\.)?\d{4,4}(( |-|\.)?[ext\.]+ ?\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=482
#A: Manpreet Grewal
#D: Its extracts telephone numbers
(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)([ ]|[:]|\t|[-])*(?<Where>Home|Office|Work|Away|Fax|FAX|Phone)|(?<Where>Home|Office|Work|Away|Fax|FAX|Phone|Daytime|Evening)([ ]|[:]|\t|[-])*(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)|(?<Telephone>([(]([0-9]){3}[)]([ ])?([0-9]){3}([ ]|-)([0-9]){4}))

#U: http://regexlib.com/REDetails.aspx?regexp_id=483
#A: Manpreet Grewal
(?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=484
#A: Manpreet Grewal
#D: E-mail addresses matcher
(?<email>(?![ ])(\w|[.])*@(\w|[.])*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=485
#A: Jared Tullis
#D: This was used to process a bunch of lines of information to determine if a line was a North American phone number or not.  It accepts numbers with or without area code with or without parenthesis and sepearated by space, dash or period.
([\(]?(?<AreaCode>[0-9]{3})[\)]?)?[ \.\-]?(?<Exchange>[0-9]{3})[ \.\-](?<Number>[0-9]{4})

#U: http://regexlib.com/REDetails.aspx?regexp_id=486
#A: Michael Ash
#D: This pattern captures <lastname><suffix>,<prefix><firstname><mname> Names must start with a capital letter. Last names may be hyphenated. First names can have two parts ie "Mary Anne" if there are more than two names after the comma. Suffixes can number up to XXX (30th). Standard prefixes are optional (Mr Miss)
^(?n:(?<lastname>(St\.\ )?(?-i:[A-Z]\'?\w+?\-?)+)(?<suffix>\ (?i:([JS]R)|((X(X{1,2})?)?((I((I{1,2})|V|X)?)|(V(I{0,3})))?)))?,((?<prefix>Dr|Prof|M(r?|(is)?)s)\ )?(?<firstname>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,2})?(\ (?<mname>(?-i:[A-Z])(\'?\w+?|\.))){0,2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=487
#A: Darren Neimke
^ISBN\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=488
#A: Dany Lauener
#D: Matching : dd/MM/yy
#D: Leap years compatible
#D: Italian style, just for more fun.
#D: Please, don't forget to rate it if you use it. THX
^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/(\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/(\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/(\d{2}))|(29\/02\/((0[48]|[2468][048]|[13579][26])|(00))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=491
#A: Alanski Perryman
#D: Spam Stopper
.*[Oo0][Ee][Mm].*

#U: http://regexlib.com/REDetails.aspx?regexp_id=492
#A: Alanski Perryman
#D: Spam Stopper
.*\$AVE|\$ave.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=493
#A: Alanski Perryman
#D: Spam Stopper
.*[Pp]re[Ss\$]cr[iI1]pt.*

#U: http://regexlib.com/REDetails.aspx?regexp_id=495
#A: M h
#D: Matches UK phone numbers - London and regional. It started off with something fairly short posted by liljim at www.forums.devshed.com but I wanted a little more precision to weed out all the zeros. Now it also weeds out premium phone numbers (as of 19/12/03).
^\s*\(?(020[7,8]{1}\)?[ ]?[1-9]{1}[0-9{2}[ ]?[0-9]{4})|(0[1-8]{1}[0-9]{3}\)?[ ]?[1-9]{1}[0-9]{2}[ ]?[0-9]{3})\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=496
#A: T H
#D: This regular expression matches on postive whole numbers and 0.  Whole numbers that are left padded with 0's are not a match.
^(0)$|^([1-9][0-9]*)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=497
#A: Andres Garcia
#D: Matches a string used to rewrite urls under the WSRP specification.  It captures the URL-Encoded string that represents a url.  Url validation is not provided.
wsrp_rewrite\?(?<wsrp_uri>[\w%:&\\/;.]*)/wsrp_rewrite

#U: http://regexlib.com/REDetails.aspx?regexp_id=498
#A: Andres Garcia
#D: Percentage (From 0 to 100)
^(0*100{1,1}\.?((?<=\.)0*)?%?$)|(^0*\d{0,2}\.?((?<=\.)\d*)?%?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=499
#A: Brian Bothwell
#D: None of the other URL regex's seemed to work right for me, so i threw this together. works well with PHP's ereg().
^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)?((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,4})(\:[0-9]+)?(/[^/][a-zA-Z0-9\.\,\?\'\\/\+&%\$#\=~_\-@]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=500
#A: mike harber
#D: Matches on MMDDYYYY only, requires all 8 digits
((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=501
#A: Brian Bothwell
#D: Ok here's an updated URL regex for you folks. It allows localhost and all TLDs. Feel free to add each country code individually if you want a tighter match.
^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&%\$#\=~_\-]+))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=502
#A: Prashant Nayak
#D: Positive Whole number matched from 0 to 9999999. Only 7 digits length is allowed.
^\d{1,7}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=504
#T: mm/dd/yyyy  hh:MM:ss AM/PM DateTime
#A: Michael Ash
#D: New DateTime Regex. Rebuilt better than before, better, stronger, faster. 
(?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d)\d{2})(?(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=506
#T: Resale License Number (CA)
#A: Dean Dal Bozzo
#D: California Resale License number validator. Validates Letters and Numbers or Number only. Letters: First 2 letters can be SR, SS, ST , SX, SY, SZ (TAT Code)  Next optional letter can be S,X,Y,Z.  Next letters must be a minimum of two and a maximum of 3 (District Code).  Numbers:  Can be 8-9 numbers. Numbers can be delimited with a hypen or spaces after the first 2 numbers.  Note: I use () to extract the information I want for use in other scripts.
^((([sS][r-tR-Tx-zX-Z])\s*([sx-zSX-Z])?\s*([a-zA-Z]{2,3}))?\s*(\d\d)\s*-?\s*(\d{6,7}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=508
#A: Steven Smith
#D: In response to a question on the regex list at www.aspadvice.com, this expression should ensure that a login field's username includes a 'DOMAIN\' prefix.  The latter part of the expression should probably be limited so that it only allows usernames of appropriate lengths, perhaps 3 to 20 characters (by replacing + with {3,20} for instance).
^DOMAIN\\\w+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=509
#A: Joseph Lundgren
#D: Simple email subject line matching. This regex matches those really annoying emails that begin with 0-5 spaces, followed by a fake reply, contain a random string of letters (usually CAPITALIZED) from 1-10 characters long followed by a comma, and then followed by three lower-case words each from 1-10 characters long. In my experience, the 3 trailing words are always lower-case. the words make begin with, contain, or end in common punctuation marks.
^\W{0,5}[Rr]e:\W[a-zA-Z0-9]{1,10},\W[a-z]{1,10}\W[a-z]{1,10}\W[a-z]{1,10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=512
#A: Roman Lukyanenko
#D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.jpg
#D: or C:\Windows\Microsoft.NET etc
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(jpg|JPG)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=515
#A: Pete Lindquist
#D: I built this expression to test a string in ASP for valid username and password constraints.  It can be adapted for any number of scenerios.  For instance in this case, we needed to ensure the username someone wanted was not all numbers or all letters and was 6-15 characters in length with no special characters.  This expression tests negatively for all number cases, then all letter cases, and lastly tests for only alphanumeric characters in the required range.  In other words: the match must be alphanumeric with at least one number, one letter, and be between 6-15 character in length.  
(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=517
#A: paul Snabilie
#D: Postalcode Danmark
^[D-d][K-k]-[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=518
#A: paul Snabilie
#D: match all danish postal code
#D: update from last danish postal code expression
^[D-d][K-k]( |-)[1-9]{1}[0-9]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=519
#A: paul Snabilie
^[S-s]( |-)?[1-9]{1}[0-9]{2}( |-)?[0-9]{2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=520
#A: Simon Christensen
#D: Peseudo-HTML code matcher. Allows for one parameter within the first tag (name is optional), the value of which can be optionally delimited by either double or single quotes. Uses backreferencing to ensure that the end and start tags match, and that any single or double quotes match. Very useful for web forums or any situation where users may be prompted to enter text for display on a webpage somewhere, as it can be quickly processed into HTML without allowing HTML to be specified within the input itself (which may pose a security risk). 
(\[(\w+)\s*(([\w]*)=('|")?([a-zA-Z0-9|:|\/|=|-|.|\?|&]*)(\5)?)*\])([a-zA-Z0-9|:|\/|=|-|.|\?|&|\s]+)(\[\/\2\])

#U: http://regexlib.com/REDetails.aspx?regexp_id=521
#A: Sadaf Ahmed
#D: Address
#D: It has now been enhanced to accept # too!!
^[a-zA-Z\d]+(([\'\,\.\- #][a-zA-Z\d ])?[a-zA-Z\d]*[\.]*)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=523
#A: Michael Ash
(<\/?)(?i:(?<element>a(bbr|cronym|ddress|pplet|rea)?|b(ase(font)?|do|ig|lockquote|ody|r|utton)?|c(aption|enter|ite|(o(de|l(group)?)))|d(d|el|fn|i(r|v)|l|t)|em|f(ieldset|o(nt|rm)|rame(set)?)|h([1-6]|ead|r|tml)|i(frame|mg|n(put|s)|sindex)?|kbd|l(abel|egend|i(nk)?)|m(ap|e(nu|ta))|no(frames|script)|o(bject|l|pt(group|ion))|p(aram|re)?|q|s(amp|cript|elect|mall|pan|t(r(ike|ong)|yle)|u(b|p))|t(able|body|d|extarea|foot|h|itle|r|t)|u(l)?|var))(\s(?<attr>.+?))*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=524
#T: (X)HTML click events
#A: Michael Ash
#D: This regex will match all the valid on event attributes in HTML 4.01/XHTML 1.0
(?i:on(blur|c(hange|lick)|dblclick|focus|keypress|(key|mouse)(down|up)|(un)?load|mouse(move|o(ut|ver))|reset|s(elect|ubmit)))

#U: http://regexlib.com/REDetails.aspx?regexp_id=526
#A: W. D.
#D: Canadian Postal Code / Codes / Canada / Zip
#D: Google for DFIOQU and you'll see where I got the
#D: info for this.
#D: Can anyone simplify this?
^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY][0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ] {0,1}[0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ][0-9]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=528
#A: Dean Dal Bozzo
^#?(([fFcC0369])\2){3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=529
#A: Sachin Bhatt
#D: Used to validate Credit Card numbers, Checks if it contains 16 numbers in groups of 4 separated by -, ,or nothing
^(\d{4}-){3}\d{4}$|^(\d{4} ){3}\d{4}$|^\d{16}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=532
#A: Frederick Samson
#D: The goal of this regular expression is to replace all & (ampersand) characters by & if they are not the start of HTML entities. I used
#D: http://www.w3schools.com/html/html_entitiesref.asp as a reference. You can then use RegExp Replace method to do the work. Was helpful for me, might helpful be for you...
&(?![a-zA-Z]{2,6};|#[0-9]{3};)

#U: http://regexlib.com/REDetails.aspx?regexp_id=533
#A: William Rohrbach
#D: This regular expression matches a series of names and/or email addresses much like you would do in Outlook's To field (e.g. To: wrohrbach@carlson.com;miles, er;roemer;lagrander, nitra). The first entry must be a name (in the form of last name followed by a comma and first name) or an email address. The following entries are a semicolon followed by one name or email address. The comma and first name are optional components of the name part.
^((([a-zA-Z\'\.\-]+)?)((,\s*([a-zA-Z]+))?)|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})))(;{1}(((([a-zA-Z\'\.\-]+){1})((,\s*([a-zA-Z]+))?))|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})){1}))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=535
#T: Social Security Number
#A: Michael Ash
#D: This regex validates U.S. social security numbers, within the range of numbers that have been currently allocated. 
^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=538
#T: Parse Comma Delimited Strings
#A: Jerry Schmersahl
#D: Example of a regular expression that can be used to parse a comma delimited string into constituent, named sub-strings. Add or remove regex subfield definitions (?<field1>[^,]+) and corresponding delimiting characters in the regular expression as necessary to accommodate the string and subfields you intend to parse. Optionally, rename the subfield names in the regular expression to more meaningful names if you are using the parsed sub-strings in a program. Replace all occurrences of the comma in the regular expression with any required alternative delimiting character. As long as the delimiting character used does not occur naturally in any of the sub-strings, you should be good-to-go. NOTE: To change the delimiter character you must replace all occurrences of the comma in the current regex (of which there are 5) with the new delimiter character. e.g. (?<field1>[^;]+); changes the delimiter character to a semi-colon for the first field.
^(?<field1>[^,]+),(?<field2>[^,]+),(?<field3>[^,]+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=539
#A: Jerry Schmersahl
#D: Updated on 3/4/2004 per feedback to additionally exclude SSNs that begin with 666 which, as reported, are also not valid.
#D: Regular expression for validating US Social Security Numbers. Accepts optional hyphens or spaces as formatting characters. Parses the three subfields of the SSN into three named sub-strings (SSN1, SSN2, and SSN3) to facilitate program use. Rejects matches on all zeros for any individual subfield of the Social Security Number. Matches only on those SSNs that fall within the range of numbers currently allocated by the Social Security Administration.
^(?!000)(?!666)(?<SSN3>[0-6]\d{2}|7(?:[0-6]\d|7[012]))([- ]?)(?!00)(?<SSN2>\d\d)\1(?!0000)(?<SSN4>\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=541
#T: Email
#A: Rob Eberhardt
#D: regex to validate email address
#D: noteworthy:
#D: (1) It allows usernames with 1 or 2 alphanum characters, or 3+ chars can have -._ in the middle. username may NOT start/end with -._ or any other non alphanumeric character.
#D: (2) It allows heirarchical domain names (e.g. me@really.big.com). Similar -._ placement rules there.
#D: (3) It allows 2-9 character alphabetic-only TLDs (that oughta cover museum and adnauseum :>).
#D: (4) No IP email addresses though -- I wouldn't Want to accept that kind of address. 
^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=542
#A: Paul Haines
#D: Validates a UNC to conform to \\server\service
#D: Must have a "\\" at the start
#D: Server may contain alpha/numeric/underscore/dash,
#D: Followed by another single "\"
#D: Service may contain alpha/numeric/underscore/dash/$/space
#D: Note:
#D: Service may not start nor end with a space
#D: Service may only contain one $, and only at the end
#D: No additional "\" may follow afterwards
^\\{2}[\w-]+\\(([\w-][\w-\s]*[\w-]+[$$]?$)|([\w-][$$]?$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=543
#A: Andrew van der Stock
#D: Matches positive whole numbers with exactly zero or two decimal points if a . is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25. 
^\d+(?:\.\d{0,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=544
#A: Lloyd Sturge
#D: This expression will return the src (source) property of an image tag <IMG>. The source returned is limited to the file extensions supplied. It doesn't matter if the image is prefixed with '../' or 'http://..blah' or 'drive\path' or nothing. This expression could be modifed to return other sources or for the tags (ie <BGSOUND>, <SCRIPT>, etc.) depending on the file extensions given.
#D: I needed this to replace the source of images in a HTML page when I wanted to save the page to a local drive and keep the images intact.
#D: If anybody could modify this further to include only the <IMG> tag, I would appreciate the effort.
src[^>]*[^/].(?:jpg|bmp|gif)(?:\"|\')

#U: http://regexlib.com/REDetails.aspx?regexp_id=545
#A: Tim Walters
#D: Simple parser of XPath, it doesn't handle the more complex statements but can be of use in some situations.
^(?<path>(/?(?<step>\w+))+)(?<predicate>\[(?<comparison>\s*(?<lhs>@\w+)\s*(?<operator><=|>=|<>|=|<|>)\s*(?<rhs>('[^']*'|"[^"]*"))\s*(and|or)?)+\])*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=547
#A: Jerry Schmersahl
#D: Regular expression for validating a decimal IP address. Matches 4 groups of from 1 to 3 digits, where each group of digits ranges from 0 to 255 in value. Groups of digits must be separated by a single period (.) with no other formatting characters present. Uses conditional regex with lookahead syntax to prevent a match on a period following the final group of digits.
^(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.?\d)\.)){4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=551
#A: Jerry Schmersahl
#D: Regular expression for validating a US currency string field. Matches an unlimited number of digits to the left of an optional decimal point. Digits to the left of the decimal point can optionally be formatted with commas, in standard US currency format. If the decimal point is present, it must be followed by exactly two digits to the right. Matches an optional preceding dollar sign. Uses regex lookahead to preclude leading zeros and to match the optional formatting comma.
(?n:(^\$?(?!0,?\d)\d{1,3}(?=(?<1>,)|(?<1>))(\k<1>\d{3})*(\.\d\d)?)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=552
#A: Jerry Schmersahl
#D: Regular expression for validating a person's full name. Matches on two general formats: 1) first second third last (where first, second, and third names are optional and all present are separated by a space); 2) last, first second third (where second and third are optional, last is followed immediately by a comma and a space, and second, and third, if present, are separated by a space from each other and from first). First corresponds to surname and last corresponds to family name. Each name part is captured to a named group to facilitate program manipulation. Each name part must begin with an uppercase letter, followed by zero or more lowercase letters, except for the last name. Last name must begin with an uppercase letter, followed by one or more lowercase letters, but will match exceptions formatted like the following: McD..., MacD..., O'R... Only format is validated, not spelling. NOTE: This regular expression uses positive and negative regex lookahead to determine the general format of the name, i.e. the presence or the absence of the comma determines the general format that will match. Furthermore, this initial version is not designed to accommodate titles and things like "3rd".
(?n:(^(?(?![^,]+?,)((?<first>[A-Z][a-z]*?) )?((?<second>[A-Z][a-z]*?) )?((?<third>[A-Z][a-z]*?) )?)(?<last>[A-Z](('|[a-z]{1,2})[A-Z])?[a-z]+))(?(?=,)(, (?<first>[A-Z][a-z]*?))?( (?<second>[A-Z][a-z]*?))?( (?<third>[A-Z][a-z]*?))?)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=554
#A: Alanski Perryman
#D: spam stopper, catches non english language flocks for letter A
(À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|a|A|@|@|α|À|Á|Â|Ã|Ä|Å|À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|à|á|â|ã|ä|å)

#U: http://regexlib.com/REDetails.aspx?regexp_id=555
#A: Alanski Perryman
#D: Spam stopper, catches non english characters used in flocks.
(È|É|Ê|Ë|è|é|ê|ë|E|e|È|É|Ê|Ë|È|É|Ê|Ë|è|é|ê|ë|è|é|ê|ë)

#U: http://regexlib.com/REDetails.aspx?regexp_id=563
#A: Martin Matusiak
#D: A very crude url pattern.
^http://([a-zA-Z0-9_\-]+)([\.][a-zA-Z0-9_\-]+)+([/][a-zA-Z0-9\~\(\)_\-]*)+([\.][a-zA-Z0-9\(\)_\-]+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=565
#A: Rohan Pathare
#D: Validates date format by DD MMM YYYY. Validates days for each month also.
#D: Ensures that month is uppercase.
^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC) ((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=567
#A: Donald Schneider
^[-+]?\d+(\.\d+)?|[-+]?\.\d+?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=568
#A: Donald Schneider
#D: matches 0 and all positive integers only. will accept comma formatting only.
^(\d|,)*\d*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=569
#A: Vladimir Klykov
#D: This regular expression matches "c" format strings for printf/scanf functions. 
%[\-\+0\s\#]{0,1}(\d+){0,1}(\.\d+){0,1}[hlI]{0,1}[cCdiouxXeEfgGnpsS]{1}

#U: http://regexlib.com/REDetails.aspx?regexp_id=570
#A: Frederic Trudeau
#D: This expression will help match Quebec's postal codes.
^[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}(\-| |){1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=571
#A: Sean Ziencik
#D: String formater matching.
.\{\d\}

#U: http://regexlib.com/REDetails.aspx?regexp_id=574
#A: Andrew Yeaman
#D: Validates hours and minutes. Allows for entry in the form of hours:minutes with optional minutes and optional hours indicator (H or h).
^(\d{1,2})(\s?(H|h)?)(:([0-5]\d))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=575
#A: Neville Clark
^(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=576
#A: Wayne Herndon
#D: Validates numeric input of 99,999,999 to 0 with or without commas. but no decimal places. Very simple, but not bad for a novice.
^\d{1,8}$|^\d{1,3},\d{3}$|^\d{1,2},\d{3},\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=578
#A: Uris Virott
#D: Date validation in the dd/mm/yyyy format for years 1000+ (i.e 999 or 0999 not matching) and taking february leap years into account.
((([0][1-9]|[12][\d])|[3][01])[-/]([0][13578]|[1][02])[-/][1-9]\d\d\d)|((([0][1-9]|[12][\d])|[3][0])[-/]([0][13456789]|[1][012])[-/][1-9]\d\d\d)|(([0][1-9]|[12][\d])[-/][0][2][-/][1-9]\d([02468][048]|[13579][26]))|(([0][1-9]|[12][0-8])[-/][0][2][-/][1-9]\d\d\d)

#U: http://regexlib.com/REDetails.aspx?regexp_id=579
#A: Marc Ziss
#D: Matches either an explicitly input percentage or dollar amount, variety of formats of currency borrowed from another example on this board. This is useful when you want to prompt the user to specify either dollars or percent using only one field, and want to validate the entered text is one or the other.
(^\$(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$|^\d{1,2}(\.\d{1,2})? *%$|^100%$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=580
#A: Michael Ash
#D: This regex can be used to restrict passwords to a length of 8 to 20 aplhanumeric characters and select special characters. The password also can not start with a digit, underscore or special character and must contain at least one digit.
^(?=[^\d_].*?\d)\w(\w|[!@#$%]){7,20}

#U: http://regexlib.com/REDetails.aspx?regexp_id=581
#T: yyyy/mm/dd hhMMss Date
#A: Michael Ash
#D: YYYY/MM/DD hh:mm:ss format DateTime Regex.
#D: This regex will validate a date, time or a datetime.
#D: It will also capture the date fields and the time.
#D: Dates are in the YYYY/MM/DD format and validated for months, number of days in a month and leap years (29/2)
#D: Date field can be separated by matched periods(.), dashes(-) or forward slashes(/)
#D: Time is either 12 hour AM/PM format (hh:mm:ss AM), where minutes and seconds are optional.
#D: AM or PM required. or 24 hour military format (hh:mm:ss), from 00:00:00 to 23:59:59,
#D: where hours and minutes fields are required, including leading 0 for hours less than 10.
#D: Please refer to http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for additional info
#D: Datetime is the above date and time formats separated by a space,
#D: with the date first (YYYY/MM/DD hh:mm:ss)
#D: !IMPORTANT NOTE: your regex engine must support lookbehinds and named groups to use this expression
^(?ni:(?=\d)((?'year'((1[6-9])|([2-9]\d))\d\d)(?'sep'[/.-])(?'month'0?[1-9]|1[012])\2(?'day'((?<!(\2((0?[2469])|11)\2))31)|(?<!\2(0?2)\2)(29|30)|((?<=((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\2\3\2)29)|((0?[1-9])|(1\d)|(2[0-8])))(?:(?=\x20\d)\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2}))?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=582
#A: Julio de la Yncera
#D: This regular expression is for admitting wild card searches on Emails the wild card character is * and in my case will only allow to do the search when the * is place after the first 3 alphanumeric characters. If you need to modify this behavior change the {3,40} to {n,m} where n is how many characters before the * and m is the total number if characters.
\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$|^([0-9a-zA-Z'\.]{3,40})\*|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\.([0-9a-zA-Z']+)$|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\*+$|^$

#U: http://regexlib.com/REDetails.aspx?regexp_id=586
#A: Senthil Gunabalan
#D: This is a basic telephone number vaildation which needs a compulsory prefix of a '+' sign with three digits and followed by a hipen, another three digits and finally followed by another hipen and four more digits.
#D: Regards,
#D: Senthil Gunabalan
^[+][0-9]\d{2}-\d{3}-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=587
#A: Fabrizio Fortini
#D: Validates a Italian mobile phone number with (or without) the International code
^([+]39)?((38[{8,9}|0])|(34[{7-9}|0])|(36[6|8|0])|(33[{3-9}|0])|(32[{8,9}]))([\d]{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=588
#A: W. D.
#D: U. S. or Canadian telephone number regular expression. <BR>
#D: //           # Checks phone numbers for validity                           <BR>
#D: //  [01]?    # optional '0', or '1'                                        <BR>
#D: //  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
#D: //  \(?      # optional parentheses                                        <BR>
#D: //  [2-9]    # first # of the area code must not be a '0' or '1'           <BR>
#D: //  \d{2}    # next 2 digits of area code can be 0-9                       <BR>
#D: //  \)?      # optional parentheses                                        <BR>
#D: //  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
#D: //  \d{3}    # 3-digit prefix                                              <BR>
#D: //  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
#D: //  \d{4}    # 4-digit station number                                      <BR>
^[01]?[- .]?\(?[2-9]\d{2}\)?[- .]?\d{3}[- .]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=589
#T: UK Phone Number
#A: Amos Hurd
#D: UK phone number. Allows 3, 4 or 5 digit regional prefix, with 8, 7 or 6 digit phone number respectively, plus optional 3 or 4 digit extension number prefixed with a # symbol. Also allows optional brackets surrounding the regional prefix and optional spaces between appropriate groups of numbers.
^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=590
#A: Jon Galloway
#D: This pattern matches a decimal value with up to 3 digits after the decimal. Comma is allowed as a thousands separator but not required. N/A is also allowed.
(^N/A$)|(^[-]?(\d+)(\.\d{0,3})?$)|(^[-]?(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{1,3})?)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=591
#A: Cliff Schneide
#D: After looking for a date regular expression, I could not find one that meet my need, so I develop one that handles 1 or 2 digets in the month and day and also handle feb up to 29.  This will allow both / and - for separators, which is what I needed.  I hope this helps others too.  Thanks,
#D: Cliff Schneide
^((((0?[13578])|(1[02]))[\/|\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\/|\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\/\-]?(0?[1-9]|[0-2][0-9])))[\/\-]?\d{2,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=592
#T: UK Mobile Phone Number
#A: Amos Hurd
#D: UK mobile phone number, with optional +44 national code. Allows optional brackets and spaces at appropriate positions.
^(\+44\s?7\d{3}|\(?07\d{3}\)?)\s?\d{3}\s?\d{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=593
#T: Modified UK Phone Number
#A: Amos Hurd
#D: Modified version of UK phone number regular expression. Now allows +44 national code in addition to extension numbers of 3 or 4 digits. Previous expression was: ^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$
^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=595
#T: Current UK Vehicle Registration
#A: Amos Hurd
#D: UK vehicle registration system currently in use (as defined by the DVLA and put into effect from September 2001, and therefore does not allow registrations prior to this date).
^([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=596
#T: Older UK Vehicle Registration
#A: Amos Hurd
#D: UK vehicle registration system prior to September 2001. Allows both older suffix and the later prefix formats in simple form, with optional spaces.
^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=599
#A: Shaune Stark
#D: Email validation based on Rob Eberhardt's (Thanks, Rob!) email expression, but allows single letter subdomains...
^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=600
#A: Sebastian Hiller
#D: Not a 100% email validation. It doesn't work with IP-Adresses, but it's good for most common cases. At least I hope so.
^((?:(?:(?:\w[\.\-\+]?)*)\w)+)\@((?:(?:(?:\w[\.\-\+]?){0,62})\w)+)\.(\w{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=602
#A: Alan Ferrandiz Langley
#D: A regular expression that validates the any format of fixed telephone numbers inside Lima - Peru, including an optional extension of at least one number up to four numbers.
^([2-9])(\d{2})(-?|\040?)(\d{4})( ?|\040?)(\d{1,4}?|\040?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=603
#A: Alan Ferrandiz Langley
#D: A regular expression that validates the any of the new formats of cellular phones numbers in Peru, allows an optional dash in the middle of the number.
^([8-9])([1-9])(\d{2})(-?|\040?)(\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=604
#A: Matt Wickless
#D: This pattern handles currency including the following:
#D: optional period with two or more digits to the right of the period
#D: optional commas
#D: optional dollar sign($)
^(\$)?((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{2,})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=605
#A: JP Honeywell
#D: Validates *usable* US telephone numbers (possibly Canadian and Caribbean Islands as well?) Numbers cannot beginning with zero, one, (any number)11, or 555. It will allow either a hyphen, space or period as a separator.
#D: Technically (and contrary to popular belief) most 555- numbers ARE valid numbers [see http://www.nanpa.com/nas/public/form555MasterReport.do?method=display555MasterReport ] but they are unlikely to be used by normal folks. Therefore, excluding them with this regex is useful to prevent bogus/fraudulent telephone numbers in forms.
#D: FYI, the fictitious 555- numbers used in the movies and TV are only in the range of 555-0100 through 555-0199. Not very many, huh?
^(?!\d[1]{2}|[5]{3})([2-9]\d{2})([. -]*)\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=606
#T: Currency
#A: Michael Ash
#D: This regex validates Currency. The base monetary unit (ex. US dollar) followed by option two digit cent denomination. Base unit can't have leading zero. Comma's are optional on base units. Note: Your regex engine must support the \p character class to use this. For example this will work in .net but not javascript which doesn't support \p Also the ¢ is removed from the match by force. Any other cent symbol would need to be added to the exclude to not match.


#U: http://regexlib.com/REDetails.aspx?regexp_id=607
#A: Don Johnston
#D: US Phone Number: This regular expression for US phone numbers conforms to NANP A-digit and D-digit requirments (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. Format validation accepts 10-digits without delimiters, optional parens on area code, and optional spaces or dashes between area code, central office code and station code. Acceptable formats include 2225551212, 222 555 1212, 222-555-1212, (222) 555 1212, (222) 555-1212, etc. You can add/remove formatting options to meet your needs.
^(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=608
#A: Sebastian Hiller
#D: Captures Submatches, problem:domainname length can be longer than 64 chars, because every [a-zA-Z0-9][\.\-_] is only countet as one char.
^((?:(?:(?:[a-zA-Z0-9][\.\-\+_]?)*)[a-zA-Z0-9])+)\@((?:(?:(?:[a-zA-Z0-9][\.\-_]?){0,62})[a-zA-Z0-9])+)\.([a-zA-Z0-9]{2,6})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=609
#A: Danny Garber
#D: Validates a date expression (or empty value) in CCYYMMDD format, checking a leap year from 00000101 A.D. to 99991231
^(((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|((\d{2}[02468][048]|\d{2}[13579][26]))0229)){0,8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=610
#A: Michael Ash
#D: DateTime Validator. This RE validates both dates and/or times patterns. Days in Feb. are also validated for Leap years. Dates: in  dd/mm/yyyy or d/m/yy format between 1/1/1600 - 31/12/9999. Leading zeroes are optional. Date separators can be either matching dashes(-), slashes(/) or periods(.) Times: in the hh:MM:ss AM/PM 12 hour format (12:00 AM - 11:59:59 PM) or hh:MM:ss military time format (00:00:00 - 23:59:59). The 12 hour time format: 1) may have a leading zero for the hour. 2) Minutes and seconds are optional for the 12 hour format 3) AM or PM is required and case sensitive. Military time 1) must have a leading zero for all hours less than 10. 2) Minutes are manditory. 3) seconds are optional. Datetimes: combination of the above formats. A date first then a time separated by a space. ex) dd/mm/yyyy hh:MM:ss This RE is an variation of one of my other Datetime (mm/dd/yyyy) validator already in this library http://www.regexlib.com/REDetails.aspx?regexp_id=369, so the same rules for leap year apply. All 4 digit year and all two digit years except 00, which might not be a leap year.
^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=611
#A: Ernesto Giralt
#D: Capture the attributes "content", "name" and "scheme" used to parse META tags from any XHTML or HTML input. Useful for developers looking for expresions to parse & get Dublin Core single elements from HTML pages.
(<meta\s+)*((name\s*=\s*("|')(?<name>[^'("|')]*)("|')){1}|content\s*=\s*("|')(?<content>[^'("|')]*)("|')|scheme\s*=\s*("|')(?<scheme>[^'("|')]*)("|'))

#U: http://regexlib.com/REDetails.aspx?regexp_id=612
#A: c raz
#D: Wrote this to accept either decimals or zero, but not whole numbers - for a particular project...
(^([0-9]+[.]+[0-9]+)|(0)$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=617
#T: Combined UK Vehicle Registration
#A: Amos Hurd
#D: UK vehicle registration system. This is the obvious combination of two previous expressions posted here, to merge the older system with the current system.
^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})|(([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=618
#A: Rohan Pathare
^((31(?! (FEB|APR|JUN|SEP|NOV)))|(30|29)|(0[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=621
#A: Michael Ash
#D: This regex can be used to split the values of a comma delimitted list. List elements may be quoted, unquoted or empty.  Commas inside a pair of  quotation marks are not matched. 
,(?!(?<=(?:^|,)\s*\x22(?:[^\x22]|\x22\x22|\\\x22)*,)(?:[^\x22]|\x22\x22|\\\x22)*\x22\s*(?:,|$))

#U: http://regexlib.com/REDetails.aspx?regexp_id=622
#A: Brad Dobyns
#D: Version 1.3.0: I needed a regexp to validate URL's without the ht(f)tp(s):// and include North American domains (like .us and .ca) and there didn't seem to be one available...so I created one. It will also work with ASP QueryStrings and anchor URL's. If you have a problem with the expression or have any suggestions to improve, please write me and let me know. Added .uk domain and expression now allows for URLs that contain JSP session IDs. 4/14/04 - added ability to include URLs that start with server names.
^(((ht|f)tp(s?))\://)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk)(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&%\$#\=~_\-]+))*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=623
#A: Valmir Cinquini
#D: Brazilian Postal Box RegExp validation
\d{5}\-\d{3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=624
#A: blake wolf
#D: Use in a .net Regex.Split() to pull the protocol out of a url into the first array entry.
(^[a-zA-Z0-9]+://)

#U: http://regexlib.com/REDetails.aspx?regexp_id=625
#A: gregg durishan
#D: currency format that allows optional $, optional "-"(MinusSignNegative) OR "()" (ParenNegative) but not both, optional cents, and optional commas separating thousands. Minus sign can be before or after $, but parens must be outside the $. UPDATED: now fails to match a "$" without any further numbers
^\$?\-?([1-9]{1}[0-9]{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\-?\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\(\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))\)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=626
#T: Enitity notation
#A: Michael Ash
#D: This regex can be used to find general entites in HTML, XML and SGML files.
#D: The entity can consist of
#D: 1) an ampsand (&)
#D: 2) followed by
#D: (a) ASCII alphanumerics or period between 2 and 31  characters  or
#D: (b) a pound sign #
#D: (i) followed by an x followed by a unicode value  up to 5 hex digits or
#D: (ii) followed by a decimal value from 0 to 1048575
#D: 3) ending with a semi-colon (;)


#U: http://regexlib.com/REDetails.aspx?regexp_id=627
#A: Thomas Keegan
#D: for checking a value is between 99.99% and 00.00%
^((\d{1,2})?([.][\d]{1,2})?){1}[%]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=628
#A: Ariel Merrell


#U: http://regexlib.com/REDetails.aspx?regexp_id=629
#A: Bret Greenwood
#D: PCRE (PHP) regular expression for validating US telephone numbers with OPTIONAL area code, and OPTIONAL extension. Promiscuous formatting (parenthesis or slash, space, dash, dot or no separator). Captures the telephone number area code, prefix, suffix, and extension to named groups. Rejects area codes that begin with 0 or 1 and prefixes that begin with 0. Rejects all telephone numbers that do not match on exactly 7 digits, or on exactly 10 digits with the optional area code, not counting the extension or the format. Seperators, when used, must be in the right place. Extension can be preceded by a space(s) and/or "x", "X", or "Ext" and matches on 1 to 5 digits.
#D: Written from the view that getting phone numbers from customers should be as easy and tolerant as possible. Matched number can be parsed and entered into database correctly on the business end.
#D: Based on similar regex by Jerry Schmersahl in this library. Case insensitivity could simplify this expression, but implementation is left up to you.
#D: For PHP/PCRE compatibility, put a "P" in front of each capture name (ie: "(?P<AreaCode>"). This server does not recognize the Python/PCRE naming convention.


#U: http://regexlib.com/REDetails.aspx?regexp_id=631
#A: Gaurav Shrivastava
#D: Validates windows path and invalidates UNC path
^([a-zA-Z]\:) (\\{1}| ((\\{1}) [^\\] ([^/:*?<>"|]*(?<![ ])))+)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=635
#A: Carlos R. L. Rodrigues
#D: Matches files extension
(?!\.)[a-z]{1,4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=636
#A: Eric Lewis
#D: Used to dynamically find acronyms in a sentence. The first pair of brackets gets the acronym, the second gets the text after the acronym.
([A-Zäöü0-9\/][^a-z\:\,\(\)]*[A-Zäöü0-9])($|[\.\:\,\;\)\-\ \+]|s\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=637
#A: Darren Neimke
#D: This pattern matches a simple Decimal Literal.  Leading digits limited to 8 and does not support commification.


#U: http://regexlib.com/REDetails.aspx?regexp_id=638
#A: Darren Neimke
#D: Match the VB Language specification BNF for DateTime literal.  http://msdn.microsoft.com/library/en-us/vbls7/html/vblrfvbspec2_4_6.asp?frame=true
#D: DateLiteral ::= # [ Whitespace+ ] DateOrTime [ Whitespace+ ] #
#D: DateOrTime ::=
#D: DateValue Whitespace+ TimeValue |
#D: DateValue |
#D: TimeValue
#D: DateValue ::=
#D: MonthValue / DayValue / YearValue |
#D: MonthValue – DayValue - YearValue
#D: TimeValue ::=
#D: HourValue : MinuteValue [ : SecondValue ] [ WhiteSpace+ ] [ AMPM ]
#D: MonthValue ::= IntLiteral
#D: DayValue ::= IntLiteral
#D: YearValue ::= IntLiteral
#D: HourValue ::= IntLiteral
#D: MinuteValue ::= IntLiteral
#D: SecondValue ::= IntLiteral
#D: AMPM ::= AM | PM


#U: http://regexlib.com/REDetails.aspx?regexp_id=641
#A: Ricardo Gonzalez
#D: Filter US telephone numbers.  This particular one accepts only area code 939 or 787.  Area code parentesis or hyphens optional.
^(\()?(787|939)(\)|-)?([0-9]{3})(-)?([0-9]{4}|[0-9]{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=642
#A: Dave Turner
#D: Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.
(\+)?([-\._\(\) ]?[\d]{3,20}[-\._\(\) ]?){2,10}

#U: http://regexlib.com/REDetails.aspx?regexp_id=643
#A: andrea mele
#D: Check italian fiscal code (codice fiscale) with "OMOCODIA" control


#U: http://regexlib.com/REDetails.aspx?regexp_id=644
#T: mm/dd/yyyy Julian and Gregrian Datetime
#A: Michael Ash
#D: Datetime for Julian and Gregorian Calenders
#D: Matchs dates from  0001 A.D. to 9999 A.D.
#D: Days  and months are  1 or 2 digits
#D: Years are 4 digit with leading zeros if required.
#D: February is validate in all leap years
#D: Leap year rules for Julian and Gregorian calendars (http://scienceworld.wolfram.com/astronomy/LeapYear.html)
#D: Missing days for 1582 and 1752 are not matched.  Though only one set should be applied to a calendar since they are caused by when the calendar was adopted
#D: Missing days (http://scienceworld.wolfram.com/astronomy/GregorianCalendar.html)
#D: Time can be either 12 or 24 hour format
#D: 12 hour format hh:MM:ss AM|PM
#D: minutes and seconds are optional
#D: 24 hour format hh:mm:ss
#D: seconds are optional, hours less than ten require leading zero
#D: Datetome format is a date, a space then a time.


#U: http://regexlib.com/REDetails.aspx?regexp_id=646
#A: Andrew Lee
#D: I wrote up this regular expression to fetch the href attribute found in <a> tags as well as a few other HTML tags.
href=[\"\'](http:\/\/|\.\/|\/)?\w+(\.\w+)*(\/\w+(\.\w+)?)*(\/|\?\w*=\w*(&\w*=\w*)*)?[\"\']

#U: http://regexlib.com/REDetails.aspx?regexp_id=647
#A: hayri hayri
^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d)?(\x20?((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=648
#A: Roman Lukyanenko
#D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.txt or C:\Windows\Microsoft.NET etc
^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(txt|TXT)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=649
#A: Roman Lukyanenko
#D: I know its simple, yet there was no Russian postal code regular expression on the RegExLib. Just in case some needs to know the format.
^[0-9]{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=651
#A: Artu
#D: it's for date in the format: "yyyymmdd" and it validates the empty string and some special values (00000000,88888888,99999999) but you can delete these last values. It works with leap years.
^(((\d{4})(0[13578]|10|12)(0[1-9]|[12][0-9]|3[01]))|((\d{4})(0[469]|11)([0][1-9]|[12][0-9]|30))|((\d{4})(02)(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)(02)(29))|(([13579][26]00) (02)(29))|(([0-9][0-9][0][48])(02)(29))|(([0-9][0-9][2468][048])(02)(29))|(([0-9][0-9][13579][26])(02)(29))|(00000000)|(88888888)|(99999999))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=652
#A: Roman Lukyanenko
#D: Matches the copyright symbol (©). Pretty simple, yet I dont think existed on RegExLib before. 
\xA9

#U: http://regexlib.com/REDetails.aspx?regexp_id=653
#A: Steve Wagner
#D: Validates dates formatted like "dd.mm.yyyy" or "dd.mm.yy". Also the separators "/" and "-" are validated "ok". This expression does not check leap years!
#D: I did this expression cause I could hardly find any date regex that supports those "dot-formats".
 ^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\d{2}|\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=654
#A: Rehan Azam
#D: This regular expression can be used to parse a comma delimited string. Leading whitespaces (at the beginning of the entire string) and ending commas are not acceptable. Any combination of letters and numbers with zero or one white space between them are acceptable. Note: To change the delimiter, simply replace the comma in the square brackets to the delimiter of choice.
^([A-Za-z0-9]\s?)+([,]\s?([A-Za-z0-9]\s?)+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=655
#A: Osaro bare
(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})([AM|PM|am|pm]{2,2})$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=656
#A: Sante Boscolo
#D: Spam trap
#D: Catches many and many way to write viagra (replacing letters with similar chars, spacing chars with one space, etc).
[v,V,(\\/)](\W|)[i,I,1,l,L](\W|)[a,A,@,(\/\\)](\W|)[g,G](\W|)[r,R](\W|)[a,A,@,(\/\\))]

#U: http://regexlib.com/REDetails.aspx?regexp_id=658
#A: Vathachira Joseph Bino
#D: regex which matches UAE mobile phone numbers.
#D: Its capable to take inputs +97150 3827741, +97-150-3827741, +97150 - 3827741,050 3827741, 050 - 3827741
#D: Enjoy REGEXXXXXXX!!!!!!!
^(\+97[\s]{0,1}[\-]{0,1}[\s]{0,1}1|0)50[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=659
#A: Vathachira Joseph Bino
#D: The regex matches the UAE land phone numbers. Checks the area codes[04,02,06...etc] strictly. Force user to input phone numbers in strict manner(it take input 04 3452488, but not 04______spaces_______3452488)
^0[234679]{1}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=661
#A: Vathachira Joseph Bino
#D: The regex that matches the telephone numbers in India.
#D: ####Enjoy Regex####
^0{0,1}[1-9]{1}[0-9]{2}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=664
#A: Friedel Wittrock
#D: match for 0 - 65535
^([0-5]?\d?\d?\d?\d|6[0-4]\d\d\d|65[0-4]\d\d|655[0-2]\d|6553[0-5])$

#U: http://regexlib.com/REDetails.aspx?regexp_id=666
#A: Dany Lauener
#D: This regexp has been posted specialy for "Mike O Shea" as he requested a mono digit year validation.
#D: matches DD/MM/Y or DD/MM/YYYY or D/M/Y or DD/M/YYYY
#D: Leap years treated. (Italian style with tomato)
#D: Years 0-9 equal years 2000 to 2009 for leap years
^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=667
#A: Darren Neimke
#D: Matches a percentage between 0 and 100 (inclusive).  Accepts up to 2 decimal places.


#U: http://regexlib.com/REDetails.aspx?regexp_id=668
#A: Chandrasing Patil
#D: This expression is little tricky since the $ sign is includeded in the
#D: expression itself. So whenever you want to make use of the expression be
#D: sure to prepend $ sign to the value if it's not present.
^\$[+-]?([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(\.[0-9]{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=669
#A: Jason N. Gaylord
#D: This is derived from Steven Smith's Integer expression (http://www.regexlib.com/REDetails.aspx?regexp_id=51). The only difference is that this does not accept blanks. Written by Jason N. Gaylord.
^\d+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=670
#A: yoram o
#D: DD/MM/YY
#D: D/M/YY
#D: DD/MM/YYYY


#U: http://regexlib.com/REDetails.aspx?regexp_id=671
#A: Liu Wei
#D: telphone number check.
((\(\d{3,4}\)|\d{3,4}-)\d{4,9}(-\d{1,5}|\d{0}))|(\d{4,12})

#U: http://regexlib.com/REDetails.aspx?regexp_id=672
#A: Nicholas Berardi
#D: Specifier Format of Guid Values that this RegEx supports:  32 digits: [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]  32 digits separated by hyphens: [xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]  32 digits separated by hyphens, enclosed in brackets: [{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}]  32 digits separated by hyphens, enclosed in parentheses: [(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)]
^[{|\(]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[\)|}]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=673
#A: Roman Lukyanenko
#D: Matches the ™ symbol. Pretty simple, yet I dont think existed on RegExLib before.
\u2122

#U: http://regexlib.com/REDetails.aspx?regexp_id=674
#A: Roman Lukyanenko
#D: Matches the registered trademark (®). Pretty simple, yet I dont think existed on RegExLib before.
\u00AE

#U: http://regexlib.com/REDetails.aspx?regexp_id=675
#A: Roman Lukyanenko
#D: Matches the British Pound symbol. Pretty simple, yet I dont think existed on RegExLib before. 
\u00A3

#U: http://regexlib.com/REDetails.aspx?regexp_id=676
#A: Roman Lukyanenko
#D: Matches the Euro sign. Pretty simple, yet I dont think existed on RegExLib before.
\u20AC

#U: http://regexlib.com/REDetails.aspx?regexp_id=677
#A: Roman Lukyanenko
#D: Matches the Yen sign. Pretty simple, yet I dont think existed on RegExLib before. 
\u00A5

#U: http://regexlib.com/REDetails.aspx?regexp_id=678
#A: Roman Lukyanenko
#D: Matches infinity symbol. Pretty simple, yet I dont think existed on RegExLib before. 
\u221E

#U: http://regexlib.com/REDetails.aspx?regexp_id=679
#A: Michael Ash
#D: Matches any character is the Basic Latin Unicode Range \U0000-U007F  (Ascii 0-127)
#D: I've blogged about this and other expressions here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
\p{IsBasicLatin}

#U: http://regexlib.com/REDetails.aspx?regexp_id=680
#A: Michael Ash
#D: Matches numbers.  Note: the second match (?) and the second non-match (IV) are not the same. I cover this in more detail here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
\p{N}

#U: http://regexlib.com/REDetails.aspx?regexp_id=681
#A: Michael Ash
#D: Math Symbols.  NOTE: the second examples of match and non-match are not the same.  The non-match is the keyboard dash.  The match is the unicode minus sign.
\p{Sm}

#U: http://regexlib.com/REDetails.aspx?regexp_id=682
#A: khoi le
#D: This will match US most common telephones format with extension or with out extension.  Works with both Java and .NET.
((\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}(\s(x\d+)?){0,1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=683
#A: Matt Baskey
#D: another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
#D: I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced.
(\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=684
#A: Matt Baskey
#D: another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
#D: I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced.
(\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=685
#T: Validate 12hour clock
#A: Ariel Merrell
#D: A co-worker needed a regex to validate time.  He could only find patterns that match a 24hour clock.  I whipped this expression up to validate a 12hour clock. Hope somebody finds it useful.
(?<Time>^(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d(?:[ap]m)?)

#U: http://regexlib.com/REDetails.aspx?regexp_id=688
#A: Nicholas Berardi
#D: This allows the formatting of most phone numbers.
^(?:(?:[\+]?(?<CountryCode>[\d]{1,3}(?:[ ]+|[\-.])))?[(]?(?<AreaCode>[\d]{3})[\-/)]?(?:[ ]+)?)?(?<Number>[a-zA-Z2-9][a-zA-Z0-9 \-.]{6,})(?:(?:[ ]+|[xX]|(i:ext[\.]?)){1,2}(?<Ext>[\d]{1,5}))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=689
#A: Don Johnston
#D: This US phone number edit with restricted format options: Accepts optional parens on area code with or without following space, and dashes between area code, central office code and station code. Formats include only (222) 555-1212 (with or without a space) and 222-555-1212. Conforms to NANP A-digit and D-digit requirements (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. 
^(?:\([2-9]\d{2}\)\ ?|(?:[2-9]\d{2}\-))[2-9]\d{2}\-\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=690
#A: yoram o
#D: evaluates dates in the format of DD/MM/YY or DD/MM/YYYY
#D: DD & YY - can be of the form:
#D: One digit            2
#D: Zero leading        02
(?<Day>[0-3][0-9]|[1-9])/(?<Month>[1-9]|1[0-2]|0[1-9])/(?<Year>[12]\d{3}|\d{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=691
#T: dd/mm/yyyy hhMMss Julian to Gregorian DateTime
#A: Michael Ash
#D: dd-mm-yyyy Datetime for AD, with leap year.
#D: See http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for details on this and similar regexs


#U: http://regexlib.com/REDetails.aspx?regexp_id=692
#A: de kleine Gerardus
^([0-1]?\d|2[0-3]):([0-5]\d)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=693
#A: Kevin Wennemuth
#D: Matches german standard postal codes named 'Postleitzahl'
^[0-9]{5}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=698
#A: Thijs Wijnmaalen
#D: Matches a md5 hash, simple yet powerful
^([a-z0-9]{32})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=701
#A: Jason N. Gaylord
#D: This expression is a very simplex expression that allows null values or 3 digits, dash, 3 digits, dash, 4 digits. It validates a basic US phone number. Written by Jason N. Gaylord.
^(\d{3}-\d{3}-\d{4})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=702
#A: Jason N. Gaylord
#D: This expression is a simplex expression that checks to see if a value is a valid phone system terminal number. It allows a null value or 2 digits, dash, 2 digits. Written by Jason N. Gaylord.
^(\d{2}-\d{2})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=703
#A: ic onur
#D: will match free floating valid protocol + urls in text ... will not touch the ones wrapped in a tag, so that you can auto-link the ones that aren't :) couple of things to know :
#D: 1. if the url is next to a tag this won't work (eg : <br>http://www.acme.com), the url must either start with a \s, \n or any character other than >.
#D: 2. the pattern will match the preceding \s and \n too, so when you replace put them back in place $1 will either be \s or \n, $2 will be the exact match
#D: vb usage :
#D: set re = New RegExp
#D: re.Pattern ="(\s|\n|^)(\w+://[^\s\n]+)"
#D: strResult = re.Replace(strText, "$1<a href='$2' target='_new'>$2</a>")
(\s|\n|^)(\w+://[^\s\n]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=704
#A: Joseph Lamb
#D: This expression filters all variations of Post Office Box or PO Box.


#U: http://regexlib.com/REDetails.aspx?regexp_id=705
#A: marrik
#D: Match for dutch zipcodes.
#D: Dutch zipcodes are always in the format of 4 digits and 2 letters.
[0-9]{4}[A-Z]{2}

#U: http://regexlib.com/REDetails.aspx?regexp_id=706
#A: Michael Ash
#D: This pattern matches lower-case letters
(?-i:\b\p{Ll}+\b)

#U: http://regexlib.com/REDetails.aspx?regexp_id=709
#A: Felipe Albacete
#D: This is the Brazilian Date Format.
#D: DD/MM/YYYY with the right days per month.
#D: Dates >=1900 <=2999.
(((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))

#U: http://regexlib.com/REDetails.aspx?regexp_id=710
#A: Felipe Albacete
#D: Expression to validate values to fields Decimal 5,2 or 5 numbers. values >=100,00 <=99999,99
#D: 100,00=100
#D: 5000,00 = 5000
(^\d{3,5}\,\d{2}$)|(^\d{3,5}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=711
#A: Mark Cranness
^((?>[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=712
#A: Rohan Pathare
#D: Mathces in format DD-MON-YYYY (hyphen between results). Validates for leap years. Ensures month is in uppercase.
^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])-(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)-((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=713
#A: Fabiano Santiago
#D: Essa expressão é uma validação de data simplicada onde não aceita datas com ano inferior a 1900. Interessante pra validação de data de idade, data atual, etc
(0?[1-9]|[12][0-9]|3[01])[/ -](0?[1-9]|1[12])[/ -](19[0-9]{2}|[2][0-9][0-9]{2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=716
#A: Manny Ruiz
#D: This pattern matches whole numbers 1-100. 
^([1-9]|[1-9]\d|100)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=718
#A: wallace dos santos damiao
#D: A simple expression to brazilian phone number code modified expression of Rafael, beyond international code, simple DDI without "+" 99 plus simple DDD (99) plus simple and whitout parentheses em trace, local phone number 3 or 4 digits plus "-" plus 4 digits.
^([0-9]{2})?((\([0-9]{2})\)|[0-9]{2})?([0-9]{3}|[0-9]{4})(\-)?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=721
#A: Felipe Albacete
#D: This is an new data Validation to MM/YYYY from 1900 to 2999 this is an validation expression  to Client From MOnth/Year.
(((0[123456789]|10|11|12)([/])(([1][9][0-9][0-9])|([2][0-9][0-9][0-9]))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=723
#A: jeremy chapman
#D: Matches 12 hour time format
^(([1-9]{1})|([0-1][1-2])|(0[1-9])|([1][0-2])):([0-5][0-9])(([aA])|([pP]))[mM]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=724
#A: Les Portugal
#D: This is a regular expression I used to validate negative and positive WHOLE numbers, including 0.
(^[0]{1}$|^[-]?[1-9]{1}\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=726
#A: Ullrich Clemenz Canaan
#D: This ist the Expression for a happy smiley. It should find all the usual writings of the emotion icon :)
[:]{1}[-~+o]?[)>]+

#U: http://regexlib.com/REDetails.aspx?regexp_id=727
#A: Michael Ash
#D: Height notation for feet (') and inches(")
^\d?\d'(\d|1[01])"$

#U: http://regexlib.com/REDetails.aspx?regexp_id=728
#A: Michael Ash
#D: Temperature scale.  From ABSOLUTE ZERO  up.  Can use the Fahrenheit, Celsius or Kelvin Scale.  The Degree symbol is required for Fahrenheit and Celsius. Numbers over 1,000 must be comma delimited.


#U: http://regexlib.com/REDetails.aspx?regexp_id=729
#A: Murray Roke
#D: Matches all positive & negative decimal floating point numbers, to any magnitude. Allows empty string.
^-?\d*(\.\d+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=731
#A: Peter Donker
#D: Word HTML cleanup code. Use this expression to get rid of most of the stuff that Word adds to an HTML document such as: lots of span elements, font-family and font-size style attributes, class attributes, a whole bunch of if-then statements. Use this expression in a regex.replace(originalHtml, regExpr, "").
(?s)( class=\w+(?=([^<]*>)))|(<!--\[if.*?<!\[endif\]-->)|(<!\[if !\w+\]>)|(<!\[endif\]>)|(<o:p>[^<]*</o:p>)|(<span[^>]*>)|(</span>)|(font-family:[^>]*[;'])|(font-size:[^>]*[;'])(?-s)

#U: http://regexlib.com/REDetails.aspx?regexp_id=732
#A: John Main
#D: Cheap and cheerful URL checker. Requires a http/https/ftp at the start and will then allow anything starting with at least a <something>.<something>.<something> then valid characters separated by dots and slashes
^(ht|f)tp(s?)\:\/\/[a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+){2,}(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=735
#A: Lewis Moten
#D: Validates 1 or more email addresses.  Email addresses can be delimited with either comma or semicolon.  White space is allowed after delimiter, but not necessary.  I needed this to allow my users to specify multiple email addresses if they choose to do so.
\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*([,;]\s*\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)*

#U: http://regexlib.com/REDetails.aspx?regexp_id=745
#A: krest krest
#D: For who use a space as thousands separator like french, deutsch ....
(^(((\d)|(\d\d)|(\d\d\d))(\xA0|\x20))*((\d)|(\d\d)|(\d\d\d))([,.]\d*)?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=746
#A: Toby Henderson
#D: This will match all tags in a string, it's good for stripping HTML or XML tags to get the plain text.It works with attributes that include javascript or "<>".
#D: It will match all these
#D: noshade
#D: color="#000000"
#D: align="left">
#D: align="center"><font face="Times New Roman"
#D: size="5"><b>UNITED STATES</b></font></p>
<(?:[^"']+?|.+?(?:"|').*?(?:"|')?.*?)*?>

#U: http://regexlib.com/REDetails.aspx?regexp_id=747
#A: Michael Ash
#D: Internationally capable currency formats.  It is NOT local aware.  Should be modify for local specific validations.
#D: More detail at http://blogs.regexadvice.com/mash/archive/2004/06/08/1246.aspx


#U: http://regexlib.com/REDetails.aspx?regexp_id=749
#A: Mohit  Yadav
#D: This Works good until we want a multiple email address validator, I am working on it to make it work with the multiple email address, If anyone can work on this part as to validate a multiple email address then that will produce a very good expression, i think the best of this kind. AIM - to Validate Mohit <myadav@yahoo.com>; Rohit <ryadav@yahoo.com>; .........(any number of times)
^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*\s+<(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})>$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=750
#A: anil agarwal
^((31(?!\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=752
#A: Bruce Hatherly
#D: Here is a regular expression I wrote that validates U.S. phone numbers with area codes. You can't have a leading '0' or '1' but you can separate the number blocks with a space, a dot, a slash, or a hyphen. It also prevents a '0' or '1' for the first digit of the prefix. No extension is allowed and it must be 10 digits.
^[\(]? ([^0-1]){1}([0-9]){2}([-,\),/,\.])*([ ])?([^0-1]){1}([0-9]){2}[ ]?[-]?[/]?[\.]? ([0-9]){4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=758
#A: Jason Paschal
#D: the regex's on this site for pulling links off a page always seemed to be faulty, or at least never worked with PHP, so i made this one.  simple, as i'm an amateur with regex's, but stumbled thru it and this one actually works.  tested with PHP function: preg_match_all("/href[ ]*=[ ]*('|\")([^\"'])*('|\")/",$string,$matches)
href[ ]*=[ ]*('|\")([^\"'])*('|\")

#U: http://regexlib.com/REDetails.aspx?regexp_id=760
#T: A.D. Calendar dates
#A: Michael Ash
#D: yyyy-mm-dd Datetime for AD, with leap year. See http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for details on similar regexs
(?#Calandar from January 1st 1 A.D to December 31, 9999 )(?# in yyyy-mm-dd format )(?!(?:1582\D10\D(?:0?[5-9]|1[0-4]))|(?#Missing days from 1582 )(?:1752\D0?9\D(?:0?[3-9]|1[0-3]))(?#or Missing days from 1752 )(?# both sets of missing days should not be in the same calendar so remove one or the other))(?n:^(?=\d)(?# the character at the beginning a the string must be a digit )((?'year'\d{4})(?'sep'[-./])(?'month'0?[1-9]|1[012])\k'sep'(?'day'(?<!(?:0?[469]|11).)31|(?<!0?2.)30|2[0-8]|1\d|0?[1-9]|(?# if feb 29th check for valid leap year )(?:(?<=(?!(?#exclude these years from leap year pattern ) 000[04](?#No year 0 and no leap year in year 4 )|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)(?# centurial years > 1500 not evenly divisible by 400 are not leap year))(?:(?:\d\d)(?# century)(?:[02468][048]|[13579][26])(?#leap years))\k'sep'(?:0?2)\k'sep')|(?# else if not Feb 29 )(?<!\k'sep'(?:0?2)\k'sep')(?# and day not Feb 30 or 31 ))29)(?(?=\x20\d)\x20|$))?(?# if there is a space followed by a digit check for time )(?<time>((?# 12 hour format )(0?[1-9]|1[012])(?# hours )(:[0-5]\d){0,2}(?# optional minutes and seconds )(?i:\x20[AP]M)(?# required AM or PM ))|(?# 24 hour format )([01]\d|2[0-3])(?#hours )(:[0-5]\d){1,2})(?#required minutes optional seconds )?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=761
#A: Michael Ash
#D: mm/dd/yyyy hh:MM:ss Datetime for all AD years, including leap years.
#D: Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=644.  Please see that regex for details of what is being checked
(?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=762
#A: Michael Ash
^(?=\d)(?:(?!(?:(?:0?[5-9]|1[0-4])(?:\.|-|\/)10(?:\.|-|\/)(?:1582))|(?:(?:0?[3-9]|1[0-3])(?:\.|-|\/)0?9(?:\.|-|\/)(?:1752)))(31(?!(?:\.|-|\/)(?:0?[2469]|11))|30(?!(?:\.|-|\/)0?2)|(?:29(?:(?!(?:\.|-|\/)0?2(?:\.|-|\/))|(?=\D0?2\D(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|2[0-8]|1\d|0?[1-9])([-.\/])(1[012]|(?:0?[1-9]))\2((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:$|(?=\x20\d)\x20)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=763
#A: Michael Ash
#D: yyyy/mm/dd hh:MM:ss Datetime for all AD years, including leap years.
#D: Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=760.  Please see that regex for details of what is being checked
^(?=\d)(?:(?!(?:1582(?:\.|-|\/)10(?:\.|-|\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\.|-|\/)0?9(?:\.|-|\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\.|-|\/)(?:29|30))))(\d{4})([-\/.])(0?\d|1[012])\2((?!00)[012]?\d|3[01])(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=764
#A: Josh Aversa
#D: This is a pretty flexable phone number validator for US numbers.  Allows optional country code and area code.  Allows separation of numbers with " ", "-", "." or nothing to seperate.  Area codes can be in parenthesis or not.  Validates that you'll get 7, 10, or 11 digits in the way the most number of people option when writing them.
^((\d[-. ]?)?((\(\d{3}\))|\d{3}))?[-. ]?\d{3}[-. ]?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=779
#A: Chris Strolia-Davis
(?<commentblock>((?m:^[\t ]*\/{2}[^\n\r\v\f]+[\n\r\v\f]*){2,})|(\/\*[\w\W]*?\*\/))

#U: http://regexlib.com/REDetails.aspx?regexp_id=784
#A: PJ Bijoy
#D: US telephone check
^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=793
#A: Kristijan Mitrovic
#D: As I could understand the HTML standard, this is the valid reg.exp. for comments.
#D: The only differenc from the last one is that the comment can be terminated by two minuses followed by none OR SOME space caracters and then by character >
<!--[\s\S]*?--[ \t\n\r]*>

#U: http://regexlib.com/REDetails.aspx?regexp_id=920
#A: Justin Elsberry
#D: Javascript matches US zipcodes not allowing all zeros in first 5 or +4
(^(?!0{5})(\d{5})(?!-?0{4})(-?\d{4})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=924
#A: MARK J KRISBURG
#D: Single field zip code validator, useful for Web Forms.  Allows user to enter 5-digit or 5-digit plus 4 zip code, with hyphen or space or NO space between last 4 digits.
^\d{5}((-|\s)?\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=925
#A: MARK J KRISBURG
#D: Single field zip code validator useful for web forms, where user may enter 5 digit or 9 digit zip code, and may use hyphen, space, or no space between the first 5 digits and last 4 digits.
^\d{5}((\-|\s)?\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=926
#A: MARK J KRISBURG
#D: Telephone validator allowing user to enter 10 digit telephone number with segments of number separated by hyphens, periods or spaces.  Also braces allowed around area code.
^(\([2-9]|[2-9])(\d{2}|\d{2}\))(-|.|\s)?\d{3}(-|.|\s)?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=927
#A: Tomas Axelsson
#D: Swedish person number. Don't work on persons older then 100 years, but they are so few that it shouldn't be a problem. Easy to fix, but I choose not to accept oldies...
[1-2][0|9][0-9]{2}[0-1][0-9][0-3][0-9][-][0-9]{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=929
#A: MARK J KRISBURG
#D: US telephone number with area code.  Validates and also captures AreaCode, Prefix and Suffix for reformatting.
^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=930
#T: Validate US Postal Code
#A: Jerry Schmersahl
#D: Validate US zip codes. Matches all zip codes of exactly 5 digits except 00000. Optionally, matches zip5+zip4 where zip5 is exactly 5 digits, zip4 is exactly 4 digits, and zip5 and zip4 are, optionally, separated by a single space or hyphen. Captures zip5 and zip4 to named groups to facilitate program manipulation.
^(?!00000)(?<zip>(?<zip5>\d{5})(?:[ -](?=\d))?(?<zip4>\d{4})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=931
#A: MARK J KRISBURG
#D: Zip Code (Zip or Zip-Plus4 format).  Accepts a hyphen, a space, or nothing between Zip and Plus4 segments.  Named segments <zip> and <plus4> may be used to reformat users input to desired format using Regex replace function (re.replace).
(?<zip5>^\d{5})([\- ]?(?<plus4>\d{4})?$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=932
#A: Diego dos Santos
#D: Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators: . - /
#D: Valid dates only! m (1-12)/ d (1-31)/ y (0..)
#D: (rizzipereira.com.br)
#D: For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250
^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=935
#A: Dennis de Jong
#D: Meets dutch phone number requirements.. One posted here before didn't allow the 0 after the first digit of the call ID (so the second number or later after the prefix), which should be allowed. I modified that one to meet full requirements now..
#D: Enjoy!!
([0]{1}[6]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){7})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){5})|([0]{1}[1-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){6})

#U: http://regexlib.com/REDetails.aspx?regexp_id=936
#T: AMD Athlon/Duron Codes (not Athlon 64)
#A: Amos Hurd
#D: Matches valid reference codes for AMD Athlon and Duron processors (not Athlon 64).
^((A(((H[MX])|(M(P|SN))|(X((D[ACH])|(M[DS]))?)))?)|(K7(A)?)|(D(H[DLM])?))(\d{3,4})[ABD-G][CHJK-NPQT-Y][Q-TV][1-4][B-E]$

#U: http://regexlib.com/REDetails.aspx?regexp_id=940
#A: mahesh mandhare
^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=941
#A: Max Cacchiotti
#D: Validates US or Canadian phone numbers with the use of "-" or numbers stuck together. No parantheses allowed as well as spaces. Area code is optional. The "9," is optional as well, which on some phone systems is needed to dial out.
^(9,)*([1-9]\d{2}-?)*[1-9]\d{2}-?\d{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=942
#A: Richard Johnn
#D: Useful for grabbing pipe delimited text from a string.
(\S*)+(\u007C)+(\S*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=943
#A: Rich Franzmeier
^\-?\(?([0-9]{0,3}(\,?[0-9]{3})*(\.?[0-9]*))\)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=944
#A: Error Reporter
#D: Required and regular expression validator. For supporting
#D: -999.99 to +999.99 . Positive and Negative integer/ decimal validations. Percentage sign is also supported. Will not allow empty strings. Can increase/decrease the range as you need.
^[-+]?[0-9]\d{0,2}(\.\d{1,2})?%?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=945
#A: Gabriel Fróes
#D: This RE match the SQL Basics Queries (SELECT, UPDATE, INSERT and DELETE).


#U: http://regexlib.com/REDetails.aspx?regexp_id=946
#A: Jeff Johns
#D: Validates against a U.S. postal code in either a 5 digit format or a 5 dash 4 format.
^([0-9]{5})([\-]{1}[0-9]{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=947
#A: Jeff Johns
^([4]{1})([0-9]{12,15})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=948
#A: Jeff Johns
#D: Validate against any mastercard number. All MC's start with a number between 51 and 55 and are followed by 14 other numbers.
^([51|52|53|54|55]{2})([0-9]{14})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=949
#A: Jeff Johns
#D: Validate against any american express number. All american express numbers start with either a 34 or 37, followed by 13 other numbers.
^([34|37]{2})([0-9]{13})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=950
#A: Jeff Johns
#D: Validate against any discover card number. All DC's start with 6011 and are followed by 12 other numbers.
^([6011]{4})([0-9]{12})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=951
#A: Jeff Johns
#D: Validate against any diner's club card. All diner club cards start with 30,36, or 38, followed by 12 other numbers.
^([30|36|38]{2})([0-9]{12})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=952
#A: Mike Reeves-McMillan
#D: Finds sentences (assuming they end with a full stop, question mark or exclamation mark).
([^\.\?\!]*)[\.\?\!]

#U: http://regexlib.com/REDetails.aspx?regexp_id=953
#A: Mpho Molahloe
#D: Verifies South African mobile numbers with or without the country code.
^((?:\+27|27)|0)(=72|82|73|83|74|84)(\d{7})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=954
#A: Phil A
#D: Matches UK postcodes of the below formats. The space is optional.
#D: AN NAA
#D: AAN NAA
#D: ANN NAA
#D: ANA NAA
#D: AANA NAA
#D: AANN NAA
^(([A-Z]{1,2}[0-9]{1,2})|([A-Z]{1,2}[0-9][A-Z]))\s?([0-9][A-Z]{2})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=956
#A: Jorrit Janszen
#D: I use this expression to read bounced email addresses returned by the system administrator. The body of the subject should contain the email address somewhere but the location varies.
#D: Examples:
#D: To:      blah.v.blah@blah-blah.net ||
#D: blah-blah.blah@blah.com ||
#D: blah@blah.net 0n 25-12-2004 21:09
^[\n <"']*([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=959
#A: Bernat Sales
#D: My definitive Date and Time pattern (dd/mm/yyyy hh:mm:ss). It recognizes all correct dates (>1900) and time (even february). What can I say, I'm proud of it
^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/((19\d{2})|([2-9]\d{3}))|(29\/0?2\/(((([2468][048])|([3579][26]))00)|(((19)|([2-9]\d))(([2468]0)|([02468][48])|([13579][26]))))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=962
#A: Evan Tao
#D: Just test in C#.
#D: Validates a China Unicom mobile phone number with (or without) the International code.
^(?<national>\+?(?:86)?)(?<separator>\s?-?)(?<phone>(?<vender>13[0-4])(?<area>\d{4})(?<id>\d{4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=963
#A: Joao Maia
#D: Match a string in CCYYMM/YYYYMM format.
^[0-9]{4}((0[1-9])|(1[0-2]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=966
#A: qi gao
#D: forbidden tele numbers when it starts with 0,
#D: 860+,8613,character or has any SBC case.
#D: you can also use it to any international phone dialed by E1 ,etc . this regex has been tested by java, perl,.net
#D: PS: the last regex [0-9]is in SBC case
(^0.*[1-9]*)|(^860+)|(^8613)|(\D)|([0-9])

#U: http://regexlib.com/REDetails.aspx?regexp_id=968
#A: Jacek Sompel
#D: This regex will extract the link and the link title for every a href in HTML source. Useful for crawling sites.
#D: Note that this pattern will also allow for links that are spread over multiple lines.
<a[\s]+[^>]*?href[\s]?=[\s\"\']+(.*?)[\"\']+.*?>([^<]+|.*?)?<\/a>

#U: http://regexlib.com/REDetails.aspx?regexp_id=971
#A: Andrei Bozantan
#D: Matches a negative or positive percentage between 0 and 100 (inclusive). Accepts up to 2 decimal places.
^-?[0-9]{0,2}(\.[0-9]{1,2})?$|^-?(100)(\.[0]{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=972
#A: Chris Richards
#D: This will match just about everything after href=
#D: Its good if you just need a list of all the href= values
href=[\"\']?((?:[^>]|[^\s]|[^"]|[^'])+)[\"\']?

#U: http://regexlib.com/REDetails.aspx?regexp_id=975
#A: Cliff Wagner
#D: Expression validating a Binary string of any length


#U: http://regexlib.com/REDetails.aspx?regexp_id=977
#A: Shahar Bracha
#D: This Blacklist RegEx is designed to search a user input for any malicious code or SQL injection attempts.
(script)|(<)|(>)|(%3c)|(%3e)|(SELECT) |(UPDATE) |(INSERT) |(DELETE)|(GRANT) |(REVOKE)|(UNION)|(<)|(>)

#U: http://regexlib.com/REDetails.aspx?regexp_id=978
#A: Cliff Wagner
#D: Hex number/string validation method for the Electronic Serial Number(ESN) used in Cellular Phone products.
^([0-9a-fA-F]){8}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=979
#A: Alex Cons
#D: Expresion Regular para Teléfonos con clave lada en México
#D: separada o no con guiones o espacios. Sirve para teléfonos estacionarios y/o celulares, con o sin paréntesis, 10 números a fuerzas, funciona en .net
^\(\d{3}\) ?\d{3}( |-)?\d{4}|^\d{3}( |-)?\d{3}( |-)?\d{4}

#U: http://regexlib.com/REDetails.aspx?regexp_id=980
#A: Micah Duke
#D: this will validate most legal email addresses, even allows for some discouraged but perfectly legal characters in local part; allows IP domains with optional []; keeps final tld at a minmum of 2 chars; non capturing groups for efficiency
^(?:[a-zA-Z0-9_'^&/+-])+(?:\.(?:[a-zA-Z0-9_'^&/+-])+)*@(?:(?:\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\]?)|(?:[a-zA-Z0-9-]+\.)+(?:[a-zA-Z]){2,}\.?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=981
#A: Carlos R. L. Rodrigues
^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=982
#A: John Chivers
(02\d\s?\d{4}\s?\d{4})|(01\d{2}\s?\d{3}\s?\d{4})|(01\d{3}\s?\d{5,6})|(01\d{4}\s?\d{4,5})

#U: http://regexlib.com/REDetails.aspx?regexp_id=983
#A: John Chivers
#D: Validates UK mobile phone numbers. Valid formats are `077', `078' or `079' followed by another 8 digits, with an optional space after the dialling code and/or between the 4th and 5th characters of the remainder of the number. These formats are taken from the official guidelines from Ofcom, the organisation responsible for UK telecoms issues. Brackets are not valid and STD code must be entered.
(077|078|079)\s?\d{2}\s?\d{6}

#U: http://regexlib.com/REDetails.aspx?regexp_id=986
#A: Ross Hammer
#D: Based on a regular expression from Michael Ash, this captures US street addresses and mailing addresses, single or multi-line (multi-line is more reliable), and breaks them into discrete parts for address line 1 and 2, city, state, and postal code.  This expression is not perfect - with the interpreter I am using, some addresses refuse to match correctly.  It should however work for most addresses, particularly when lines are delimited with carriage returns, tabs, or some other whitespace line delimiter that is not a space (\x20).  Note: For improved compatibility, this expression does not use named groups.
#D: **Output**
#D: \1 = Address 1,
#D: \2 = Address 2,
#D: \3 = City,
#D: \4 = State,
#D: \5 = Postal Code
^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])\s+(\d+(?:-\d+)?)\s*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=988
#A: Gideon Engelberth
^[ \w]{3,}([A-Za-z]\.)?([ \w]*\#\d+)?(\r\n| )[ \w]{3,},\x20[A-Za-z]{2}\x20\d{5}(-\d{4})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=989
#A: Andreas Næsager
#D: Well it pretty much accepts all kinds of users, about the domain i didn't write it special for any TLD so there's no length defined, ohh and it accepts some IDN stuff
^[\.\wæøå-]+@([a-zæøå0-9]+([\.-]{0,1}[a-zæøå0-9]+|[a-zæøå0-9]?))+\.[a-z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=991
#A: Tim Macrina
#D: Matches month, requires that months 1-9 have a leading 0
^((0[1-9])|(1[0-2]))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=994
#A: Tim Macrina
#D: Matches numbers 0 through 99.9
#D: Allows only one preceding zero and does not require the decimal point
^([1-9]{0,1})([0-9]{1})(\.[0-9])?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=996
#A: Jack Yang
^\.([rR]([aA][rR]|\d{2})|(\d{3})?)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=999
#A: Paul DeMarco
#D: This is just a very simple matcher for real numbers.
([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)|([0-9]+)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1000
#A: Jeff Johnston
#D: Matches full and compressed IPv6 addresses as defined in RFC 2373 (http://www.faqs.org/rfcs/rfc2373.html). No useful captures.
#D: Various implementations require different terminators. (i.e. ^-$ or \b-\b)
^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1003
#A: Joe Lynwood
#D: By combining the contributions from Bri Gipson and Michael Ash in this site.  I have come up with this RE to exclude the zero dollar amounts such as $0.00, 0.00, 0, etc.
^(\$|)([1-9]+\d{0,2}(\,\d{3})*|([1-9]+\d*))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1004
#A: James Tikitiki
(((ht|f)tp(s?):\/\/)|(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;"'<>\n\r\t]+)([^\. \[\]\(\),;"'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1005
#A: Joe Lynwood
#D: Combine Michael Ash's US Dollar amount and Bri Gipson's eliminating zero input to create this RE to accept Optional leading dollar sign, optional well-formed comma separator dollar amount with no zero amount allowed.
#D: *** Correction: Remove the "+" otherwise it will incorrectly matches 4 leading digits like 1234,345,678.00 03-03-2005
^(\$|)([1-9]\d{0,2}(\,\d{3})*|([1-9]\d*))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1006
#A: Randal L. Schwartz
#D: Match the full names of the four main characters of The Flintstones.
^((Fred|Wilma)\s+Flintstone|(Barney|Betty)\s+Rubble)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1007
#A: narendiran dorairaj
#D: this will accept multiple email ids separated only by semi-colons (anyway u can change it).
^(([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+([;.](([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+)*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1008
#A: Dan Hall
#D: This script attempts to return phrases from a string (Example above looks for {3} word phrases)  Combine this with some .Net code, you can display most popular X word phrases in a string.
#D: -If anyone can help me count "Phrase and Phrase as 2 instances of Phrase please contact me
(\b)(\w+(\b|\n|\s)){3}

#U: http://regexlib.com/REDetails.aspx?regexp_id=1009
#A: Graeme Allwood
#D: Validator for New Zealand Mobile phone numbers. Will look for the first number being a 0 and must be a number or either 6 or 7 digits long after to initial (021) suffix
(^\([0]\d{2}\))(\d{6,7}$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1010
#A: Roberto Hernández
^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][aApP][mM]){1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1012
#A: Luke Arms
#D: A short and sweet email address validator. Checks that the username starts and ends with an alphanumeric character, allows a few non-repeating 'special characters' (namely -, ., _, +, &) and checks for a sensible domain name (2-6 character TLD required). Some unconventional, yet technically valid, addresses will not be matched, but this is only a simple expression ;-)
^([0-9a-zA-Z]+[-._+&])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1013
#A: himraj love
#D: it will check for the +ve decimal numbers
^[0-9]*(\.)?[0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1014
#A: himraj love
^[a-zA-Z0-9]+$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1016
#A: James Johnston
#D: This will find URLs in plain text.  With or without protocol. It matches against all toplevel domains to find the URL in the text.
([\d\w-.]+?\.(a[cdefgilmnoqrstuwz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmnoz]|e[ceghrst]|f[ijkmnor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortuvyz]|t[cdfghjkmnoprtvwz]|u[augkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]|aero|arpa|biz|com|coop|edu|info|int|gov|mil|museum|name|net|org|pro)(\b|\W(?<!&|=)(?!\.\s|\.{3}).*?))(\s|$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1018
#A: János Cservenák
#D: Litle regexp for my portal engie. Only cut the {CHBLOCK:'modulename'} item
\{CHBLOCK\:(.*?\})

#U: http://regexlib.com/REDetails.aspx?regexp_id=1020
#A: Louis Ostendorf
#D: AntiSpam: matches variations on the word "pharmacy"
(?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))

#U: http://regexlib.com/REDetails.aspx?regexp_id=1026
#A: Markus Matern
#D: This is my attempt to find out valid german postal codes (PLZ or Postleitzahlen).
#D: After the German Unification the numbers were changed to a five digit system. The postal codes starts with the two digit "Leitzahl". This is a number between 00 and 99 excluding the  not yet used numbers: 00, 05, 43 and 62! After that follows directly a three digit number, 000-999.
#D: Comments welcome. This works for me, however I think it could be written more compact, but could not figure out how ;-)
#D: For more information on german postal codes see:
#D: http://de.wikipedia.org/wiki/Liste_der_Postleitbereiche_Deutschland
#D: http://de.wikipedia.org/wiki/Postleitzahl_%28Deutschland%29
#D: http://en.wikipedia.org/wiki/List_of_postal_codes_in_Germany
\b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1027
#A: Alessandro Pellegrini
#D: This regular expression allows you to match all image tags
<(\/{0,1})img(.*?)(\/{0,1})\>

#U: http://regexlib.com/REDetails.aspx?regexp_id=1028
#A: Miguel Gutierrez
#D: Accepts only positive decimal values. Zero and negative numbers are non-matching.Allows zeros after last non-zero numeric value after decimal place for significant digits
(^[+]?\d*\.?\d*[1-9]+\d*$)|(^[+]?[1-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1029
#A: Rosco Pikotrain
#D: Used to match windows filenames.  Fails if there is leading or trailing spaces. Fails if the input contains /\:*?"<>| . Fails if the input begins or ends with '.'


#U: http://regexlib.com/REDetails.aspx?regexp_id=1031
#A: Nikolay Yordanov
#D: Validation of a Folder Name. Excludes all forbidden characters
^[^\\\/\?\*\"\'\>\<\:\|]*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1036
#A: Derek Noonan
#D: This matches all positive decimal values. There was one here already which claimed to but would fail on value 0.00 which is positive AFAIK...
(^\d*\.?\d*[0-9]+\d*$)|(^[0-9]+\d*\.\d*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1039
#A: German Gonzalez
#D: Formatted Number with "," as thousand separator and "." as decimal separator. now accept numbers without separators of thousands.
^\-?[0-9]{1,3}(\,[0-9]{3})*(\.[0-9]+)?$|^[0-9]+(\.[0-9]+)?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1041
#A: Harry Chou
#D: I need a pattern to match the whole number / integer (0-99999...), but also allow users to put comma in the thousand positions.
#D: This is what I got.
^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1042
#A: Johky Cheng
#D: Url matching
\b([\d\w\.\/\+\-\?\:]*)((ht|f)tp(s|)\:\/\/|[\d\d\d|\d\d]\.[\d\d\d|\d\d]\.|www\.|\.tv|\.ac|\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.museum|\.co)([\d\w\.\/\%\+\-\=\&\?\:\\\"\'\,\|\~\;]*)\b

#U: http://regexlib.com/REDetails.aspx?regexp_id=1047
#A: Howard Richards
(((^[BEGLMNS][1-9]\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] | JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \d\d?) | (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\s?0AA)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1049
#A: Bri Gipson
#D: Allows up to seven digits to the left and up to nine digits to the right of an optional decimal place.
#D: Leading zeros on the left of the decimal are accepted.
#D: Only positive values are accepted.
^(?=.*[1-9].*$)\d{0,7}(?:\.\d{0,9})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1050
#A: Jason Roe
#D: Modified Joe Lynwood's to allow zero amounts.  Handles US Dollars including zero dollars.  
^(\$)?(([1-9]\d{0,2}(\,\d{3})*)|([1-9]\d*)|(0))(\.\d{2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1052
#T: Currency
#A: Vincent Faller
#D: Validates US currency but allows for spaces between the dollar sign and dollar amount. If there is cents the period validates to two decimal places
^\$( )*\d*(.\d{1,2})?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1055
#A: Gregory Lyons
#D: Matchs comma delimited numbers. Easily changed to allow for other delimiters. (Edit ",")
#D: Does not allow a leading 0
#D: Does not allow groups of numbers with less than 3 numbers, exculding the first group.
^([1-9]{1}(([0-9])?){2})+(,[0-9]{1}[0-9]{2})*$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1057
#A: Martin Ille
#D: You can use this regular expression in your PHP scripts to convert entered URL in text to URL link. Example:
#D: $text=ereg_replace("(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?","<a href=\"./redir.php?url=\\0\" target=\"_blank\">\\0</a>",$text);
(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?

#U: http://regexlib.com/REDetails.aspx?regexp_id=1059
#A: Sonal Bordia
#D: returns string between two quotes
"[^"\r\n]*"

#U: http://regexlib.com/REDetails.aspx?regexp_id=1060
#A: DOZENROSES T
#D: Airway bill no that allows only the format 999-99999998 and does not allow the last digit to be 7,8,9.
^\d{3}-\d{7}[0-6]{1}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1062
#A: Ben Vaughan
#D: Expression to parse Australian landline telephone numbers. Will only accept valid STD codes. Allows for brackets around the STD code and either spaces or dashes between number groups.
^\({0,1}0(2|3|7|8)\){0,1}(\ |-){0,1}[0-9]{4}(\ |-){0,1}[0-9]{4}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1063
#A: will gunby
#D: Positive real number greater than zero.
(^[0-9]*[1-9]+[0-9]*\.[0-9]*$)|(^[0-9]*\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1064
#A: Howard Richards
#D: For the terminally hard of thinking, a version of my UK postcode validator without WHITESPACE. Unlike most validators on regexlib, this knows valid postcode combinations, e.g. W1A is permitted, W1 is not, but W2 is. It should catch between 95-98% of invalid postcodes.
(((^[BEGLMNS][1-9]\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\d\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\s?0AA$)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1065
#A: Leo Hinojosa
#D: Registro Federal de Contribuyentes (RFC) , used in Mexico as a unique set of caracters for a person or corporation registration .
#D: Registro Federal de Contribuyentes utilizado en Mexico para el registro en hacienda.
^([A-Z|a-z|&]{3}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$|^([A-Z|a-z]{4}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)((\w{2})([A|a|0-9]{1})){0,3}$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1066
#T: All existing TLDs (Top-Level Domains) according to IANA specifications
#A: Daniel Beck
#D: This regexp matches all existing TLDs (Top-Level Domains) according to IANA specifications as of 14/07/2007.
(a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])

#U: http://regexlib.com/REDetails.aspx?regexp_id=1067
#A: Trevor Green
#D: Validates email addresses according to the RFC 822 specification. The only exception is the exclusion of control characters, which should be sufficient for human input from a keyboard.
(?<user>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\"))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\")))*)@(?<domain>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\]))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\])))*)

#U: http://regexlib.com/REDetails.aspx?regexp_id=1079
#A: Corey Charlton
#D: Allows for a dollar sign with no space after, a dollar sign with a space after, and no dollar sign.  Also makes sure theres no more than 4 decimal places.  Takes out leading zeros if the number isn't 0, and protects against blank entries.
^(\$\ |\$)?((0|00|[1-9]\d*|([1-9]\d{0,2}(\,\d{3})*))(\.\d{1,4})?|(\.\d{1,4}))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1080
#T: UK National Insurance Number
#A: Amos Hurd
#D: UK National Insurance (NI) Number, updated 14 Dec 2005 and current for 2006.
^((A[ABEHKLMPRSTWXYZ])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTWXYZ])|(GY)|(H[ABEHKLMPRSTWXYZ])|(J[ABCEGHJKLMNPRSTWXYZ])|(K[ABEHKLMPRSTWXYZ])|(L[ABEHKLMPRSTWXYZ])|(M[AWX])|(N[ABEHLMPRSWXYZ])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTWXYZ])|(S[ABCGHJKLMNPRSTWXYZ])|(T[ABEHKLMPRSTWXYZ])|(W[ABEKLMP])|(Y[ABEHKLMPRSTWXYZ])|(Z[ABEHKLMPRSTWXY]))\d{6}([A-D]|\s)$

#U: http://regexlib.com/REDetails.aspx?regexp_id=1082
#A: Tristen Fielding
^((?<DRIVE>[a-z]:)|(\\\\(?<SERVER>[0-9]*[a-z\-][a-z0-9\-]*)\\(?<VOLUME>[^\.\x01-\x1F\\""\*\?<>:|\\/][^\x01-\x1F\\""\*\?|><:\\/]*)))?(?<FOLDERS>(?<FOLDER1>(\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))?(?<FOLDERm>[\\/](\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))*)?[\\/]?$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2642
#T: Byte type
#A: João Batista Neto
#D: Not just a number, a byte type. Will match any number from range -128 to 127.
^(0|[-]{1}([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-8]{1}))|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-7]{1})))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2643
#T: Unsigned Byte type
#A: João Batista Neto
#D: Will match an unsigned byte, from range 0 to 255
(0|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}[0-9]{0,2}|[2]{1}([0-4]{1}[0-9]{1}|[5]{1}[0-5]{1})))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2644
#T: Short type
#A: João Batista Neto
#D: Short type, will match a short number from range -32768 to 32767.
^(0|[-]{1}([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-8]{1})))))|(\+)?([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-7]{1}))))))$

#U: http://regexlib.com/REDetails.aspx?regexp_id=2646
#T: Int type
#A: João Batista Neto
#D: Will match any integer from range -2147483648 to 2147483647.
(0|[1-9]{1}[0-9]{0,8}|[1]{1}[0-9]{1,9}|[-]{1}[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-8]{1}))))))))|(\+)?[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-7]{1})))))))))

#U: http://regexlib.com/REDetails.aspx?regexp_id=2647
#T: Unsigned Int type
#A: João Batista Neto
#D: Will match any unsigned integer from range 0 to 4294967295
^(0|(\+)?[1-9]{1}[0-9]{0,8}|(\+)?[1-3]{1}[0-9]{1,9}|(\+)?[4]{1}([0-1]{1}[0-9]{8}|[2]{1}([0-8]{1}[0-9]{7}|[9]{1}([0-3]{1}[0-9]{6}|[4]{1}([0-8]{1}[0-9]{5}|[9]{1}([0-5]{1}[0-9]{4}|[6]{1}([0-6]{1}[0-9]{3}|[7]{1}([0-1]{1}[0-9]{2}|[2]{1}([0-8]{1}[0-9]{1}|[9]{1}[0-5]{1})))))))))$
