
# source not recorded

regexp: C(AC|B)D
tree:   (C((AC)|(B))D)
length: 3 to 4
ex(0):  CBD  CBD  CACD  CBD  CACD  CBD  CACD  CACD  CBD  CBD  CBD  CACD  CACD
ex(1):  CBD  CBD  CACD  CBD  CBD  CBD  CACD  CBD  CBD  CBD  CACD  CBD  CBD  CBD
ex(2):  CBD  CACD  CBD  CACD  CBD  CBD  CACD  CBD  CBD  CACD  CBD  CACD  CBD
ex(3):  CBD  CACD  CACD  CBD  CBD  CBD  CACD  CBD  CBD  CBD  CBD  CACD  CBD
ex(5):  CBD  CBD  CBD  CBD  CACD  CACD  CBD  CBD  CACD  CACD  CBD  CACD  CACD
ex(8):  CBD  CBD  CACD  CBD  CACD  CACD  CBD  CACD  CACD  CBD  CBD  CBD  CACD

# Dragon2: automata example

regexp: (a|b)*abb
tree:   (((a)|(b))*abb)
length: 3 to *
ex(0):  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb
ex(1):  abb  abb  babb  babb  aabb  abb  abb  abb  aabb  abb  abb  abb  babb
ex(2):  abb  bbabb  abb  bbabb  abb  babb  abb  ababb  ababb  aabb  abb  babb
ex(3):  aaabb  abb  abb  ababb  abb  baabb  abb  babb  abb  abb  aaabb  baabb
ex(5):  bbaabb  aabaabb  bbbabb  babb  bbbabb  abb  bbabb  bbababb  abb  aabb
ex(8):  babb  bbbaaabb  abbabb  abb  abb  abb  baaaaabb  abaabbabb  aababb  abb

# Sedgewick: genome marker

regexp: gcg(cgg|agg)*ctg
tree:   (gcg((cgg)|(agg))*ctg)
length: 6 to *
ex(0):  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg
ex(1):  gcgctg  gcgctg  gcgaggctg  gcgaggctg  gcgcggctg  gcgctg  gcgctg  gcgctg
ex(2):  gcgctg  gcgctg  gcgctg  gcgaggaggctg  gcgctg  gcgaggaggctg  gcgctg
ex(3):  gcgctg  gcgaggcggaggctg  gcgaggctg  gcgcggaggctg  gcgcggaggctg
ex(5):  gcgcggctg  gcgctg  gcgctg  gcgctg  gcgaggaggaggctg  gcgcggaggcggaggctg
ex(8):  gcgcggaggaggcggcggctg  gcgcggcggctg  gcgaggaggcggctg  gcgcggctg

# Sedgewick: multiples of 3, in binary

regexp: (0|1(01*0)*1)*
tree:   (((0)|(1(01*0)*1))*)
length: 0 to *
ex(0):                                                                        
ex(1):      1001  0        0        11    11    11    1001  11  11  1001      0
ex(2):        111001    100011010  1010011010  0    010100101          011
ex(3):      011  0  0  10101  1010010111  0011  0    110  010010
ex(5):  0  0  010101  1010111  10111100111100001100111101010100001101011
ex(8):  000  0  100001101100010

# Experiments with word construction

regexp: [bcfpt][lr]?([aeiou]|oo|ee)[dmnt]
tree:   ([bcfpt][lr]?(([aeiou])|(oo)|(ee))[dmnt])
length: 3 to 5
ex(0):  fom  cad  bood  tom  beed  beed  pood  tum  coot  com  teem  ceem  ceed
ex(1):  treen  feen  peem  poom  pom  coom  cled  bid  cloon  breed  fleet
ex(2):  flam  feen  peen  pom  broon  tan  teen  preen  cloot  treem  tron
ex(3):  freet  coot  been  bim  fleed  bood  bret  flood  toon  freed  plim
ex(5):  peet  ceed  peen  blad  peem  blin  foot  coon  freem  tlood  froot
ex(8):  poon  coon  foot  peem  bin  ploot  preem  ton  tlad  croot  fleed

regexp: W(hit|ens|at|in|est|al)[eioa][lmnrxs](ford|by|dale|bot|man|son|gard|hold)
tree:   (W((hit)|(ens)|(at)|(in)|(est)|(al))[aeio][lmnrsx]((ford)|(by)|(dale)|(bot)|(man)|(son)|(gard)|(hold)))
length: 7 to 10
ex(0):  Walilhold  Walamby  Whitambot  Watamson  Westelgard  Winarhold
ex(1):  Watisman  Walilby  Winaldale  Westorby  Wensergard  Watalgard  Walalson
ex(2):  Westilford  Wensenbot  Wensosman  Waloldale  Watanby  Wininson  Winenby
ex(3):  Watilman  Walexgard  Whitilhold  Wensemman  Walelford  Winolby
ex(5):  Wensirman  Whitosdale  Watindale  Whitenhold  Winonby  Wensimford
ex(8):  Wensexdale  Wensindale  Westimman  Wensaxhold  Winilhold  Walirbot
