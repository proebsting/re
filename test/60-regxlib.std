
# A large number of expressions scraped 4-Apr-2014 from regxlib.com




#A: Steven Smith
#D: Matches exactly 1 numeric digit (0-9).
#T: One Numeric Digit
#U: http://regexlib.com/REDetails.aspx?regexp_id=1

regexp: ^\d$
tree:   [0-9]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1  7  0  5  1  9  8  5  7  8  6  2  4  8  1  9  1  5  7  8  2  0  6
ex(2):  2  1  0  7  4  4  4  2  1  7  3  0  5  1  4  7  6  8  5  9  5  2  4  2
ex(3):  6  1  8  4  3  6  3  2  6  7  6  9  0  2  6  0  0  6  6  9  7  2  1  3
ex(5):  1  7  7  5  0  6  8  0  4  2  1  6  1  8  6  3  1  1  9  9  9  6  0  7
ex(8):  9  9  2  7  9  2  6  0  6  7  0  1  8  5  5  9  9  4  3  0  3  1  6  4


#A: Steven Smith
#D: Matches 5 numeric digits, such as a zip code.
#T: Five Integer US ZIP Code
#U: http://regexlib.com/REDetails.aspx?regexp_id=2

regexp: ^\d{5}$
tree:   [0-9]{5}
length: 5 to 5
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  30514  76859  52423  61843  63267  69026  00669  72138  17750
ex(2):  16186  31199  96075  99279  26067  01855  99430  31643  11736  30508
ex(3):  75550  09314  33509  61942  80540  87595  26114  98029  88108  03870
ex(5):  32668  51874  57619  79200  09684  81659  44843  86713  41855  81594
ex(8):  87671  81764  58178  99121  91976  88091  11881  72011  32042  79987


#A: Steven Smith
#D: Numeric and hyphen 5+4 ZIP code match for ZIP+4.
#T: ZIP+4 - XXXXX-XXXX
#U: http://regexlib.com/REDetails.aspx?regexp_id=3

regexp: ^\d{5}-\d{4}$
tree:   (([0-9]{5}-)[0-9]{4})
length: 10 to 10
-------------------- Examples --------------------
ex(0):  70168-2781  00944-3405  49066-0181  70519-8578  62481-9157  82062-2107
ex(1):  14768-5952  42361-8436  32676-9026  00669-7213  81775-0680  42161-8631
ex(2):  92792-6067  01855-9943  03164-3117  36305-0818  95175-5500  93143-3509
ex(3):  08759-5261  14980-2988  10803-8706  19483-2668  51874-5761  97920-0096
ex(5):  84386-7134  18558-1594  63295-8767  18176-4581  78991-2191  97688-0911
ex(8):  32042-7998  74209-2705  08589-9914  60303-7720  32835-5247  66289-2316


#A: Steven Smith
#U: http://regexlib.com/REDetails.aspx?regexp_id=4

regexp: ^\d{5}$|^\d{5}-\d{4}$
ERROR:  rx: Embedded '$' unimplemented: in "^\d{5}$|^\d{5}-\d{4}$"


#A: Steven Smith
#D: This regular expression will match a hyphen-separated Social Security Number (SSN) in the format NNN-NN-NNNN.
#U: http://regexlib.com/REDetails.aspx?regexp_id=9

regexp: ^\d{3}-\d{2}-\d{4}$
tree:   (((([0-9]{3}-)[0-9]{2})-)[0-9]{4})
length: 11 to 11
-------------------- Examples --------------------
ex(0):  701-68-2781  009-44-3405  490-66-0181  705-19-8578  624-81-9157
ex(1):  444-21-7305  147-68-5952  423-61-8436  326-76-9026  006-69-7213
ex(2):  421-61-8631  199-96-0759  927-92-6067  018-55-9943  031-64-3117
ex(3):  951-75-5500  931-43-3509  619-42-8054  087-59-5261  149-80-2988
ex(5):  194-83-2668  518-74-5761  979-20-0096  848-16-5944  843-86-7134
ex(8):  632-95-8767  181-76-4581  789-91-2191  976-88-0911  188-17-2011


#A: Steven Smith
#D: Matches any string of only upper- and lower- case letters (no spaces).
#T: A string of any US ASCII letters
#U: http://regexlib.com/REDetails.aspx?regexp_id=11

regexp: ^[a-zA-Z]+$
tree:   [A-Za-z]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  V  o  l  j  I  L  u  o  r  a  l  E  X  y  w  r  x  c  Y  a  z  z  a
ex(1):  g  F  t  s  K  l  m  d  C  b  J  V  i  D  P  v  z  P  r  D  y  z  s  e
ex(2):  Dx  L  l  ST  qw  bD  Wx  dW  Ps  B  e  uh  yX  Yd  x  SC  Qd  l  h  kn
ex(3):  XD  Cel  iX  tds  oO  mW  Fv  gDP  pp  P  e  Yly  thf  I  Qn  Cb  bBj
ex(5):  M  lV  vrU  SK  GZh  NqU  BAXXe  C  mEX  kDNuU  aB  yvcz  qZM  yed
ex(8):  a  u  gskCH  kdYN  r  sgxn  UkKksZ  ckGmdX  Whx  NlMhJxQk  t  IfD  vuVE


#A: Steven Smith
#D: Matches any alphanumeric string (no spaces).
#T: Alphanumeric
#U: http://regexlib.com/REDetails.aspx?regexp_id=12

regexp: ^[a-zA-Z0-9]+$
tree:   [0-9A-Za-z]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  H  X  L  W  4  8  G  3  E  T  l  i  E  k  Y  5  d  A  X  c  K  w  I
ex(1):  u  U  h  b  U  I  E  O  2  s  F  0  n  7  E  i  d  P  d  a  H  Q  g  i
ex(2):  zZ  g  lM  D  JK  Y  fD  4Y  A  N  XV  h  7  P  5H  kA  D  x  j8  K  V
ex(3):  r  F7  L  U7  p5B  z9J  MK  b  5  U4  H  N  7k  O  x  m  xK  Y  gaL
ex(5):  s1Y  gIfk  QL  a  Aql  e  x9s9j  vahl  SX2vQ  rsJR  aWI  cB  S  kb
ex(8):  DL  DZCATqz  mKkm9  fd9BrKF  FbFwI  Dlx  rNYy  gKmO  GLed  0  6W


#A: Steven Smith
#D: Positive integer value.
#T: Positive Integer
#U: http://regexlib.com/REDetails.aspx?regexp_id=13

regexp: ^\d+$
tree:   [0-9]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1  7  0  5  1  9  8  5  7  8  6  2  4  8  1  9  1  5  7  8  2  0  6
ex(2):  0  6  1  2  8  1  2  87  30  68  19  9  0  9  7  95  61  6  7  27  89
ex(3):  71  610  88  3  669  3  05  0  7  832  0  35  70  2  479  94  9  1  76
ex(5):  29  6  9279  09  04  802  42  89  193  97  3  43  4  068  67222  85
ex(8):  60  582495  1639932  6194  7109  72144  9634846  44  531730  0112466


#A: Steven Smith
#D: Matches any signed integer.
#T: Signed Integer
#U: http://regexlib.com/REDetails.aspx?regexp_id=14

regexp: ^(\+|-)?\d+$
tree:   ((+|-)?[0-9]+)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1  -3  +4  4  +9  4  8  9  6  -4  8  4  -1  7  8  +4  -2  -2  +1  0
ex(2):  +3  90  73  +06  -7  1  0  4  87  1  28  60  +26  4  +11  6  +36  -9
ex(3):  +6  +87  -4  +00  8  436  0  0  94  9  25  35  -3  +40  1  -186  303
ex(5):  +8406  -79844  94183  7601  +9430  -60  34086  8  630  36685  04  -5
ex(8):  -979  0  505434  -3177  4194  +522322  69653254  -97619576  +94  -4


#A: Steven Smith
#D: The password's first character must be a letter, it must contain at least 4 characters and no more than 15 characters and no characters other than letters, numbers and the underscore may be used
#T: Strongish Password
#U: http://regexlib.com/REDetails.aspx?regexp_id=15

regexp: ^[a-zA-Z]\w{3,14}$
tree:   ([A-Za-z][0-9A-Z_a-z]{3,14})
length: 4 to 15
-------------------- Examples --------------------
ex(0):  ZWI6  cNIz  Q4X9  f0Ej  L0VE  XlB0  RlvY  OFDm  CnGj  UMeX  ZpJe  UT2u
ex(1):  fGTyWHzxuMs  RtuC7QNT  w_Z44anNo0yt  ZDTixeEII  JCvfWj1vg  Qhtco6fBc
ex(2):  mXV3iCng  idoBM63EaO  ttdsRkdU4h  VhQQHscYgd  Mqrn9AVMj  xOdLQ6vExTR
ex(3):  xyu6ghHEv4C  TgUpfApv  tirDWDsPLkW  zHSkX6cRcQ  EjYrj2DV0J  k4pULq
ex(5):  KwPCWQaKzDf  onu6p28  UpD5MjvkWe  BFWlKl5cOsk  i7WQ0G  Kk493nzE8
ex(8):  CJqgzgnU  PBWjqMlbbNeM  R3xTqW5FMz  w9AhBByYt  uUwCzydO7lZf  opxXGIX


#A: Steven Smith
#D: Simple email expression.  Doesn't allow numbers in the domain name and doesn't allow for top level domains that are less than 2 or more than 3 letters (which is fine until they allow more).  Doesn't handle multiple "." in the domain (joe@abc.co.uk).
#T: Email - Overly Simple
#U: http://regexlib.com/REDetails.aspx?regexp_id=16

regexp: ^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$
ERROR:  rx: prefer-fewer '?' unimplemented: in "^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$"


#A: Steven Smith
#D: The "hello world" of regular expressions, this will match any string with an instance of 'foo' in it.
#U: http://regexlib.com/REDetails.aspx?regexp_id=18

regexp: foo
tree:   ((fo)o)
length: 3 to 3
-------------------- Examples --------------------
ex(0):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(1):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(2):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(3):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(5):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(8):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo


#A: Steven Smith
#D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[12345]$.
#U: http://regexlib.com/REDetails.aspx?regexp_id=19

regexp: ^[1-5]$
tree:   [1-5]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  3  5  2  2  5  1  1  5  5  4  2  1  3  1  2  4  1  5  3  5  2  3  2  2
ex(1):  5  3  2  3  2  3  3  4  5  1  4  2  4  4  4  4  2  1  2  4  4  4  1  1
ex(2):  4  2  2  1  3  1  2  1  1  3  3  5  5  2  2  2  1  1  3  3  2  5  4  1
ex(3):  4  3  3  2  5  1  2  5  3  4  4  2  5  2  1  3  3  4  4  4  4  2  5  2
ex(5):  4  5  2  5  1  3  3  1  2  1  1  3  1  4  1  4  2  5  1  2  3  4  3  4
ex(8):  4  3  2  1  2  5  4  2  4  2  3  2  1  1  5  1  2  4  3  4  2  3  4  3


#A: Steven Smith
#D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[1-5]$. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=20

regexp: ^[12345]$
tree:   [1-5]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  3  5  2  2  5  1  1  5  5  4  2  1  3  1  2  4  1  5  3  5  2  3  2  2
ex(1):  5  3  2  3  2  3  3  4  5  1  4  2  4  4  4  4  2  1  2  4  4  4  1  1
ex(2):  4  2  2  1  3  1  2  1  1  3  3  5  5  2  2  2  1  1  3  3  2  5  4  1
ex(3):  4  3  3  2  5  1  2  5  3  4  4  2  5  2  1  3  3  4  4  4  4  2  5  2
ex(5):  4  5  2  5  1  3  3  1  2  1  1  3  1  4  1  4  2  5  1  2  3  4  3  4
ex(8):  4  3  2  1  2  5  4  2  4  2  3  2  1  1  5  1  2  4  3  4  2  3  4  3


#A: Steven Smith
#D: This expression matches email addresses, and checks that they are of the proper form.  It checks to ensure the top level domain is between 2 and 4 characters long, but does not check the specific domain against a list (especially since there are so many of them now).
#U: http://regexlib.com/REDetails.aspx?regexp_id=21

regexp: ^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$
ERROR:  rx: invalid range: in "^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"


#A: Steven Smith
#D: This expression matches a hyphen separated US phone number, of the form ANN-NNN-NNNN, where A is between 2 and 9 and N is between 0 and 9.
#U: http://regexlib.com/REDetails.aspx?regexp_id=22

regexp: ^[2-9]\d{2}-\d{3}-\d{4}$
tree:   ((((([2-9][0-9]{2})-)[0-9]{3})-)[0-9]{4})
length: 12 to 12
-------------------- Examples --------------------
ex(0):  769-634-0267  257-180-1103  305-314-5154  276-413-9829  623-817-9220
ex(1):  396-084-1230  749-069-2562  736-326-7690  288-364-7611  484-832-5242
ex(2):  512-676-6265  689-493-2723  960-171-9388  528-252-8754  436-685-1242
ex(3):  354-347-9201  451-036-7070  248-462-0737  230-252-0082  620-000-8124
ex(5):  867-650-4981  560-242-4814  386-713-4185  527-672-5367  306-357-4280
ex(8):  488-318-2214  468-591-1098  531-974-7003  611-763-2672  765-102-5015


#A: G. Andrew Duthie
#D: Domain names:
This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in .com, .org, .net, .mil, or .edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.
#U: http://regexlib.com/REDetails.aspx?regexp_id=25

regexp: ^[a-zA-Z0-9\-\.]+\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$
tree:   (([-.0-9A-Za-z]+.)(((co)m)|((or)g)|((ne)t)|((mi)l)|((ed)u)|((CO)M)|((OR)G)|((NE)T)|((MI)L)|((ED)U)))
length: 5 to *
-------------------- Examples --------------------
ex(0):  Z.MIL  i.NET  W.com  e.MIL  w.EDU  Q.EDU  A.net  p.org  J.ORG  f.NET
ex(1):  o.com  6.MIL  e.mil  d.mil  B.MIL  E.com  g.MIL  x.com  V.net  H.EDU
ex(2):  -.org  R.mil  K.mil  2v.net  z.edu  b.EDU  g.MIL  a.MIL  Fd.net  9N.net
ex(3):  B1.org  G.MIL  LDL.net  GK.edu  0Tc.MIL  Kzk.edu  qq..NET  .Eb.MIL
ex(5):  mqz4.COM  WNP.com  yDgX8.NET  72qfL.com  iXpp.mil  n9b.org  SC.EDU
ex(8):  xEHUB9p.MIL  I8.net  O.org  N46EVV.EDU  fQXu-.MIL  RDy.MIL  4wXwo.EDU


#A: Andy Smith
#D: Email validator that adheres directly to the specification for email address naming. It allows for everything from ipaddress and country-code domains, to very rare characters in the username.
#U: http://regexlib.com/REDetails.aspx?regexp_id=26

regexp: ^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$
tree:   (((([-.0-9A-Z_a-z]+@)((((((([[0-9]{1,3}).)[0-9]{1,3}).)[0-9]{1,3}).)|([-0-9A-Za-z]+.)+))([A-Za-z]{2,4}|[0-9]{1,3}))]?)
length: 5 to *
-------------------- Examples --------------------
ex(0):  _@[6.8.9.je  J@[6.5.8.8  o@[9.7.8.1  p@[6.5.3.iZ  3@[9.2.5.7  D@h.4
ex(1):  e@i.AgB]  Z@[28.71.168.wdKZ]  q@[075.00.834.Og]  D@[92.15.1.48
ex(2):  aV@Ax.vq.drJ  W@e.r8.TDYS  f@UT.C.574  A@t6.aM.XD]  l@[58.01.57.TO]
ex(3):  G@DM.j.58]  zq@[41.49.33.LgSy  kHq@fVa.R.89]  sW@kh.I.LQH
ex(5):  43a@[2.0.6.6  uE2@3Urz.dv  4e@[39.61.976.CvNn  _GK@u.IK8.577]
ex(8):  o@r.ZX.E8CYOp.8q01pWQ.zFhDufI.-XY6lI2.ZE5s.A56c.64]


#A: Steven Smith
#D: US Phone Number -- doesn't check to see if first digit is legal (not a 0 or 1).
#U: http://regexlib.com/REDetails.aspx?regexp_id=27

regexp: ((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}
tree:   (((((((([0-9]{3}))) ?)|([0-9]{3}-))?[0-9]{3})-)[0-9]{4})
length: 8 to 14
-------------------- Examples --------------------
ex(0):  701-6827  810-0944  340-5490  660-1817  051-9857  862-4819  157-8206
ex(1):  (322) 705-1978  (119)791-1665  884-790-1456  026-0066  470-587-5183
ex(2):  338-745-7652  (629)637-8949  067-0185  (581)751-6014  252-8754
ex(3):  (058)303-7311  279-843-6317  341-945-5889  267-2854  (005)622-6088
ex(5):  832-6685  (747) 759-9418  (824)262-0183  577-2810  (386)490-6515
ex(8):  292-6378  998-9770  (717)237-8688  034-0019  911-1881  144-9949


#A: Steven Smith
#D: Yet another simple email validator expression.
#U: http://regexlib.com/REDetails.aspx?regexp_id=28

regexp: [\w-]+@([\w-]+\.)+[\w-]+
tree:   ((([-0-9A-Z_a-z]+@)([-0-9A-Z_a-z]+.)+)[-0-9A-Z_a-z]+)
length: 5 to *
-------------------- Examples --------------------
ex(0):  _@y.j  f@_.n  d@a.U  D@Z.n  T@1.M  e@-.4  J@4.0  I@M.R  A@K.W  k@K.l
ex(1):  x@Q.G  N@7.k  0@X.7  8@y.B  a@B.s  m@6.K  s@7.w  l@m.M  a@V.x  H@m.q
ex(2):  s@s.y  Ua@DT.Fg  t4@o.rC.3  4E@v.NE  7I@9.b.C  s@v.a  V@-.s  U0@F.v
ex(3):  e@3DL.4NK.pt_  L@yC4.Mqy  w4@1.2  U@I.dZ.lR.w  mCR@v.E.zvM.rO  2@tT.4K
ex(5):  Gi@GIoSc.u3POF.16p.be  GY@jd.SJBTr.FN5B.EXoN.5KB4.PwE  m@8_L.2A.sOC.rG
ex(8):  Sjm3aiU@bUC-P2.w.Jh9.s57Wlf.l9t.ZqUyvmZ4  RtM@vmIppqv.YBY.sO3PleDP


#A: Steven Smith
#D: Major credit card validator.  Only checks that the format is 16 digits (optionally separated by hyphens), not the value of any of the digits.
#U: http://regexlib.com/REDetails.aspx?regexp_id=29

regexp: \d{4}-?\d{4}-?\d{4}-?\d{4}
tree:   (((((([0-9]{4}-?)[0-9]{4})-?)[0-9]{4})-?)[0-9]{4})
length: 16 to 19
-------------------- Examples --------------------
ex(0):  7016827810094434  0549066018170519  8578624819157820  6221074442173051
ex(1):  6326138352198077  7204-21022425-3317  1381-31289840-9927
ex(2):  601425282875-5223  2426-8582-7311-4335  0961-17718572-5889
ex(3):  1246-268400816851  8745-8579-1772-8788  079407284171-3490
ex(5):  767137855539-8048  2442579267145472  4102-5319-70779987
ex(8):  702567671206-4846  12558636-28498610  2648-1564-21981675


#A: Steven Smith
#D: Password matching expression.  Password must be at least 4 characters, no more than 8 characters, and must include at least one upper case letter, one lower case letter, and one numeric digit.
#U: http://regexlib.com/REDetails.aspx?regexp_id=31

regexp: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$
ERROR:  rx: '(?...' unimplemented: in "^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$"


#A: G. Andrew Duthie
#D: RegExp for validating the format of IP Addresses. This works great with the ASP.NET RegularExpressionValidator server control.
#U: http://regexlib.com/REDetails.aspx?regexp_id=32

regexp: ^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$
tree:   (((((((((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[0-9]))
length: 7 to 15
-------------------- Examples --------------------
ex(0):  1.250.255.72  6.252.220.7  77.17.55.045  251.252.7.8  4.7.030.5
ex(1):  60.43.251.082  57.254.0.9  156.255.180.242  120.42.9.254  2.247.222.32
ex(2):  255.91.128.6  73.254.255.16  7.87.136.1  46.253.5.090  46.019.8.0
ex(3):  250.98.027.48  54.9.017.181  30.10.255.52  062.0.126.7  218.255.7.2
ex(5):  4.5.043.021  88.207.255.0  245.252.252.036  044.236.89.255
ex(8):  250.0.0.195  14.133.070.214  4.82.0.245  255.8.58.2  5.84.102.250


#A: Steven Smith
#D: This expression uses a BackReference to find occurrences of the same word twice in a row (separated by a space).
Matches things like 'mandate dated', which may not be desirable.  See Sean Carley's update for a better expression for true repeated word matching.
#U: http://regexlib.com/REDetails.aspx?regexp_id=33

regexp: (\w+)\s+\1
ERROR:  rx: \1 (backref) unimplemented: in "(\w+)\s+\1"


#A: Samuel Mota
#D: Match diferent styles for brazilian Phone number code.
Only DDD (12), complete DDD (012), complete DDD + Telephony Company (0xx12) plus 3 or 4 digits (city code) plus 4 digits (phone number).
#U: http://regexlib.com/REDetails.aspx?regexp_id=34

regexp: \(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4}
tree:   (((((((([0-9]{2}|(0((x|[0-9]){2}[0-9]{2}))))))[\t-\r ]*)[0-9]{3,4})[ -]*)[0-9]{4})
length: 11 to *
-------------------- Examples --------------------
ex(0):  (10)0047351  (96)5038377  (78)0531451  (0x648)7344684  (80)5489329
ex(1):  (01221)05149011  (09x79) 423 9792  (48) 9276-6869  (00)9157-5657
ex(2):  (0x999) 7451281  (84)  599-6457  (94)641--8559  (01x75)855- 6000
ex(3):  (71)555  4929  (06)9823-6194  (00419)  6447  -9526  (62) 072-5317
ex(5):  (24)    146 4708  (0xx18)  036-- 3811  (02x06)    7960   -8334
ex(8):  (0xx18)  5817 - 2407  (0x295)        203 9989


#A: Eric Lebetsamer
#D: Email validation.  With this short expression you can validate for proper email format.  It's short and accurate.
#U: http://regexlib.com/REDetails.aspx?regexp_id=35

regexp: ^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$
ERROR:  rx: invalid range: in "^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$"


#A: Chris Craft
#D: Tests for valid HTML hexadecimal color codes. The # symbol is optional. And it will except either the 3 digit form for the 216 Web safe colors, or the full 6 digit form. I am use it on my site to allow users to customize the site's colors.
#U: http://regexlib.com/REDetails.aspx?regexp_id=36

regexp: ^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$
tree:   ((#?([a-f]|[A-F]|[0-9]){3})([a-f]|[A-F]|[0-9]){3}?)
length: 3 to 7
-------------------- Examples --------------------
ex(0):  bC7  35a  cDd  A19  87d  3da  1Eb  bA8  Bc3  0be  0af  8BE  df3  CB3
ex(1):  Eec  #Dde  818  9eBAF6  30CCec  #AEc  2D3  #BBAA5f  #c3C  fAB  #9A1
ex(2):  Fec  9f2AC3  #EAfBdC  #1cD2D7  CcBa8a  c3e  bB8c30  8feD89  #ef1  bfc
ex(3):  B45446  #B5c  #34c  #Ea28ed  #E8E  #e9Af5a  #a4c01c  #3ceAEc  0DEAF9
ex(5):  e53911  #D33  Adf  #b8593b  FE8E0E  Ce58Cd  C77  #beD  2BAbde  #c20
ex(8):  dFccD6  ebf  bC4  D9D  Dfb  F5d  Bd5cc3  84F  #50cabF  C04E3b  EaBc07


#A: Justin Saunders
#D: Regular Expression matches any internet URLs. Used with the replace method it comes in very handy.
#U: http://regexlib.com/REDetails.aspx?regexp_id=37

regexp: ((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)
tree:   ((((((((ma)i)l)t)o):)|(((((((ne)w)s)|(((((ht)|f)t)p)s?)):)/)/))[\x01-\b\x0e-\x1f!-\u007f]+)
length: 7 to *
-------------------- Examples --------------------
ex(0):  mailto:M  mailto:2  news://A  http://Q  news://7  news://4  mailto:T
ex(1):  news://G  mailto:Z  news://w  news://S  mailto:4  mailto:n  news://B
ex(2):  mailto:)f  ftp://OE  https://5b  ftps://7;  ftps://n]  mailto:b
ex(3):  http://-6  ftps://u  news://<E  mailto:-  news://SR  mailto:T  ftps://P
ex(5):  mailto:&L3T  mailto:yGq%a  mailto:6fW,\\  news://1  mailto:)A\\
ex(8):  mailto:e;hHX0  mailto:IG||  mailto:?C  mailto:6O  mailto:gE3


#A: Dave Sparks
#D: Matches UK postcodes according to the following rules
1. LN NLL     eg N1 1AA
2. LLN NLL    eg SW4 0QL
3. LNN NLL    eg M23 4PJ
4. LLNN NLL  eg WS14 0JT
5. LLNL NLL   eg SW1N 4TB
6. LNL NLL     eg W1C 8LQ
Thanks to Simon Bell for informing me of LNL NLL rule for postcodes which I had omitted in an earlier version.
#U: http://regexlib.com/REDetails.aspx?regexp_id=38

regexp: ^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$
tree:   ((((([A-Za-z]{1,2}[0-9])[0-9A-Za-z]?) ?)[0-9])[A-Za-z]{2})
length: 5 to 8
-------------------- Examples --------------------
ex(0):  Z38xq  V58xP  Z47WX  C47Gv  r52Mb  x42Bg  Z04qX  S01Yi  T52Tv  K82jO
ex(1):  pF4 8Xd  Dd20jY  J2M7Pa  S01 0eW  dT65ar  d6m 0Ri  xb6f 9zT  ry8 0Ga
ex(2):  K24lH  f1Z5RA  DG2 8gs  p1N7tw  EU09RK  d5y 3Vm  d90UB  Jp3v 4na
ex(3):  NN91In  r9 1nm  sx12nY  LH374lc  fy2z2qi  L36Qa  Y5c 2vV  gn6j 4xc
ex(5):  hz48xl  jt326Ch  ce6s 4iu  S4u2QN  I40 1FR  F70Fd  Mj8k7Gt  P9Y9Rk
ex(8):  A1c 1VW  Z3 6aY  WW3s0VE  vV8r 8Uh  Ep44cH  C9 6hi  l9s9me  y06EX


#A: Gregory Beamer
#D: Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the .COM section.
#U: http://regexlib.com/REDetails.aspx?regexp_id=39

regexp: ^[\w\.=-]+@[\w\.-]+\.[\w]{2,3}$
tree:   (((([-.0-9=A-Z_a-z]+@)[-.0-9A-Z_a-z]+).)[0-9A-Z_a-z]{2,3})
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@C.nU  P@T.5R  .@u.T2  4@E.TS  2@_.Ub  R@g.eZ  1@N.hL  1@W.qN  E@v.6R
ex(1):  J@M.KB  T@k.n03  f@n.SP  M@r.xMw  H@2.MG  L@M.HW  K@J.qvL  7@l.i4R
ex(2):  8@PF._L4  e@nk.0p  h=@e.df  C@m.Jeq  -@mQ.Sf  2@x.y8V  yk@tU.JNM
ex(3):  uHG@5c.NA  1ss@71s.Zk  dcG@3n.eox  e48@Xxb.ZzM  iI@7sk.Ou  y@fX.tOL
ex(5):  -6t@fmLd.e4  vmKR-@f.Ugx  U18@Pw.WY  D@s4hwY.3Fm  Bn@LDoq.tBc
ex(8):  rB@g7._2  A3@si._G  l_dKq0@fHzjol.9iJ  bc8xM@D6.wCy  aZCJY@9bc3J4p..Pa


#A: Chris Craft
#D: If you need to extract or remove any /* */ sytle comments from any Java, JavaScript, C, C++, CSS, etc code you have this regular expression can help.
#U: http://regexlib.com/REDetails.aspx?regexp_id=40

regexp: /\*[\d\D]*?\*/
ERROR:  rx: prefer-fewer '?' unimplemented: in "/\*[\d\D]*?\*/"


#A: Bob Levittan
#D: Validates a dollar amount including a dollar sign and 2 decmals. The decimal and cents are optional.
#U: http://regexlib.com/REDetails.aspx?regexp_id=41

regexp: ^\$[0-9]+(\.[0-9][0-9])?$
tree:   (($[0-9]+)((.[0-9])[0-9])?)
length: 2 to *
-------------------- Examples --------------------
ex(0):  $7  $0  $1  $6  $8  $2  $7  $8  $1  $0  $0  $9  $4  $4  $3  $4  $0  $5
ex(1):  $9  $9.02  $1.45  $1.36  $9.81  $8.46  $8.48  $0.23  $8  $5  $2  $3.36
ex(2):  $6.11  $2.32  $1  $1  $60  $4  $87  $1  $28  $60.11  $8  $6  $6.92  $4
ex(3):  $45  $8  $717.59  $27  $6.53  $3  $75.95  $27.42  $33  $3  $79.94
ex(5):  $6529  $29  $99  $9844  $94183  $7601.74  $942.16  $06  $4159.54  $5059
ex(8):  $75550.35  $9.87  $839  $9225937.45  $4907.59  $012629  $2073.39  $3


#A: Chris Craft
#D: "Be careful when opening or creating files by using Scripting File System Object. If the filename is based on the user's input, the user might attempt to open a serial port or printer."
#U: http://regexlib.com/REDetails.aspx?regexp_id=43

regexp: (AUX|PRN|NUL|COM\d|LPT\d)+\s*$
tree:   ((((AU)X)|((PR)N)|((NU)L)|(((CO)M)[0-9])|(((LP)T)[0-9]))+[\t-\r ]*)
length: 3 to *
-------------------- Examples --------------------
ex(0):  LPT1  COM4  AUX  COM7  COM1  LPT0  COM0  NUL  NUL  COM5  NUL  COM6  NUL
ex(1):  COM0   LPT8   LPT7   AUX   PRN   NUL  NUL  AUX   PRN  LPT1   LPT0  LPT5
ex(2):  PRN  AUX  AUXPRN    AUX    COM5AUX   PRN  COM0AUX    PRN    NUL 
ex(3):  COM6LPT4PRN   COM9    LPT0AUXPRN   AUX     PRNNULPRN   PRNLPT3AUX   
ex(5):  LPT7AUXLPT9NULCOM5       PRNPRNNULLPT9    PRNCOM6NULNUL   
ex(8):  LPT3LPT0PRNPRN          LPT1NULLPT5AUXLPT6COM5COM4AUX       


#A: Michael Scovetta
#D: This re was used for a security routine. The format is:
[user=name1,name2,...,nameN;][group=group1,group2,...,groupN;][level=number;]
Each component is optional, but they must appear the in order listed if applicable.
#U: http://regexlib.com/REDetails.aspx?regexp_id=44

regexp: ^(user=([a-z0-9]+,)*(([a-z0-9]+){1});)?(group=([a-z0-9]+,)*(([a-z0-9]+){1});)?(level=[0-9]+;)?$
tree:   (((((((((us)e)r)=)([0-9a-z]+,)*)[0-9a-z]+);)?((((((((gr)o)u)p)=)([0-9a-z]+,)*)[0-9a-z]+);)?)(((((((le)v)e)l)=)[0-9]+);)?)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  level=2;  user=9;group=5;        user=t;  group=6,g;level=1;
ex(2):  user=v,h,o;  group=w,w;level=76;  user=ah,t;level=7;    user=52,l;
ex(3):  user=osd,0z7,j;level=90;  level=6;  user=jx,qia,nu,q8;level=535;
ex(5):    user=7xdz,5e0s;  user=zj7qc,v8,q;    
ex(8):  group=tpd,l66x8ez,yh,m,z5,hv,rb9exl,okvv7;level=9527546;


#A: Laurence O'Donnell
#D: This RegEx requires a US phone number WITH area code. It is written to all users to enter whatever delimiters they want or no delimiters at all (i.e. 111-222-3333, or 111.222.3333, or (111) 222-3333, or 1112223333, etc...).
#U: http://regexlib.com/REDetails.aspx?regexp_id=45

regexp: ^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$
tree:   (((((([\x01-/:-\u007f]?[0-9]{3})[\x01-/:-\u007f]?)[\x01-/:-\u007f]?)[0-9]{3})[\x01-/:-\u007f]?)[0-9]{4})
length: 10 to 14
-------------------- Examples --------------------
ex(0):  7016827810  0944340549  0660181705  1985786248  1915782062  2107444217
ex(1):  e729j<280s4303  w809R9281582  155_6414390  h509.f9025597  w684832v2358
ex(2):  X754!!8912945  +6776234053  H900 8912269  835wG3020546  619943H8883
ex(3):  O6502513065  883043v6224  v1058984899  840\\7934233  )398*c437$6816
ex(5):  O444C1433617  311\\629|8650  0259818204  A832)0933599  495<^7666225
ex(8):  127B:837.8606  295MH166]5657  n912q2134380  X822I744Y7883  !093834C7231


#A: Laurence O'Donnell
#D: This pattern allows standard e-mail addresses (e.g. user@domain.com), sub domains (e.g. user@foo.domain.com), the new two- and four-letter domains (e.g. user@domain.tv and user@domain.name) and country codes (e.g. user@foo.com.us). Also, this patter follows the Network Solutions standard length of 67 characters for top-level domains. The reason I allow numbers to be entered in the domain suffix is for future planning. If you do not want numbers to be able to be added as a domain suffix (e.g. user@domain.123), simply delete the last two occurrences of "\d".
#U: http://regexlib.com/REDetails.aspx?regexp_id=46

regexp: ^([\w\d\-\.]+)@{1}(([\w\d\-]{1,67})|([\w\d\-]+\.[\w\d\-]{1,67}))\.(([a-zA-Z\d]{2,4})(\.[a-zA-Z\d]{2})?)$
tree:   (((([-.0-9A-Z_a-z]+@)([-0-9A-Z_a-z]{1,67}|(([-0-9A-Z_a-z]+.)[-0-9A-Z_a-z]{1,67}))).)([0-9A-Za-z]{2,4}(.[0-9A-Za-z]{2})?))
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@C.Wf  L@n.dL  g@O.Uc  6@0.-.M3  T@W.2F  X@I.R.4w  b@3.C.pi  T@Y.S.kU
ex(1):  O@j.kMHxPpHlKA36TjWwAUWQJIQNTx3Bf7S98CE.9LzD
ex(2):  dA@k.k5v_zxOkzMcQR6gLQRWXw35ZwDyqsae.Fq.sT
ex(3):  7m@_.PsPgOT305zdXdjrI9fJWTkMn3J-zSyrk64ERDs3.GOW
ex(5):  qec@cHGM.h_3RgHD7AOqMbjOG2mEQr4jpVz8JVA.VT4
ex(8):  TKx@xOrP.bJec-eTswAdQQpu5R3ZkaVBipehLKalbGSY8Ca.Rzca


#A: Steven Smith
#D: Credit card validator.  Just checks that the format is either 16 numbers in groups of four separated by a "-" or a " " or nothing at all.
#U: http://regexlib.com/REDetails.aspx?regexp_id=48

regexp: ^(\d{4}[- ]){3}\d{4}|\d{16}$
tree:   ((([0-9]{4}[ -]){3}[0-9]{4})|[0-9]{16})
length: 16 to 19
-------------------- Examples --------------------
ex(0):  1000 4046 6089 1643  1033-8364-0537 6584  5786248191578206
ex(1):  9271490692562716  9120-3816-7442-5670  4181 6858-8042 4796
ex(2):  7393802244437516  5282528754074859  0667862353506719
ex(3):  1262-0725-3729 8406  7941-5112 4294-4232  7457619792000968
ex(5):  0069 8772-2536 6207  6718-7853-5391-0482  6845792517576816
ex(8):  0492 9437 3674 9914  2025406966033772  6445411425740369


#A: Steven Smith
#D: Matches major credit cards including:
Visa (length 16, prefix 4), Mastercard (length 16, prefix 51-55), Discover (length 16, prefix 6011), American Express (length 15, prefix 34 or 37).  All 16 digit formats accept optional hyphens (-) between each group of four digits. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=49

regexp: ^((4\d{3})|(5[1-5]\d{2})|(6011))-?\d{4}-?\d{4}-?\d{4}|3[4,7]\d{13}$
tree:   (((((((((4[0-9]{3})|((5[1-5])[0-9]{2})|(((60)1)1))-?)[0-9]{4})-?)[0-9]{4})-?)[0-9]{4})|((3[,47])[0-9]{13}))
length: 15 to 19
-------------------- Examples --------------------
ex(0):  4241040468965038  3,1103350303042  4047067094805489  5388665668522716
ex(1):  3,5840711691161  5525-690366979079  55108587-04217964
ex(2):  5539-1838-4689-1938  5301-82522287-3522  4984175591359005
ex(3):  6011-15010030-2073  372365011246651  6011-4832-31357470
ex(5):  342381896769349  345554038032298  4870-1586-2793-4581  378048244201138
ex(8):  42974279-7804-1076  371343441053126  3,3489522698814  554455183618-4925


#A: Steven Smith
#D: Matches any string between 4 and 8 characters in length.  Limits the length of a string.  Useful to add to password regular expressions.
#U: http://regexlib.com/REDetails.aspx?regexp_id=50

regexp: ^.{4,8}$
tree:   [\x01-\u007f]{4,8}
length: 4 to 8
-------------------- Examples --------------------
ex(0):  VR^L  W%yx  l:Qp  89PL  u Wi  {<~W  `Lq]  QM:X  `*]2  TGCV  Gl,a  /W&E
ex(1):   [\"^  U9:`  G*4s  ]A)e  8$Z%  SR8)   (B1  Hnk2  @*3~  +wNh  swYN  |QI{
ex(2):  ?=x:  EbPS  eJ?8  ,&(`  ERq?  W\"bJ  =m3+  9]!)  A}nX  8H:\"  SEX8
ex(3):  a\\/^  =8N9  jXvb  5~dZ  =bx6  Y&G}  y}o,  &H/}  /J:i  \\^Or  4Gim
ex(5):  G{s{  Joa]S  #m#]  MUJf  ,,\"l  _f|g  =OY}  .-V\"  q[gjd  uJ|a  /xq;
ex(8):  W8f)`  iI17'CGG  !J%D  (9<}jxES  xsxm-@  yU6\\  I_4?Q\\  Yc>,MFJW


#A: Steven Smith
#D: Accepts an unsigned integer number.  Also matches empty strings.
#U: http://regexlib.com/REDetails.aspx?regexp_id=51

regexp: ^\d*$
tree:   [0-9]*
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      2  7      6    8  7    5  4  3                      1  8  4  1  3  
ex(2):  03  98    38  1  85    5  6  4  73  6  6    98      68  5    4  81  7
ex(3):  11  79  8    114  9  2    62  11  197    011  079    2    84  5  792  
ex(5):  8524  5  68690  06  1  4  772  5  483    72  87  0  2847  894  945  23
ex(8):  97222  966  272390    8827969  17  48  528754  50593  2  205  0303    


#A: Steven Smith
#U: http://regexlib.com/REDetails.aspx?regexp_id=52

regexp: ^[-+]?\d*$
tree:   ([+-]?[0-9]*)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    +4    +  2  +5    -    +    +5  +7  -    +2  1  +      -6  -8  +  7  
ex(2):  1  98  +60    +30  +  +  -2    5  7  +18  -6  98    5  05  +76  -8  7
ex(3):  745  +6  71  +    -88  +2  62  05  30  +704  +149  -08      25  -  -8
ex(5):  +8  -06652  +3  174  427    +  -656  +1  17750  +8210  +317  -86  30
ex(8):  04  8406  -7984480  183  7601  +943  -1  82340862  +9853  +6  +93  -847


#A: Steven Smith
#D: Matches any unsigned floating point number/numeric string.  Also matches empty strings.
#U: http://regexlib.com/REDetails.aspx?regexp_id=53

regexp: ^\d*\.?\d*$
tree:   (([0-9]*.?)[0-9]*)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  2  7  68  75  4.  7      1.    1  .3  .0  0.  8  6.0    5  .  .  28
ex(2):  6.8  7.85  3938  2  541  9  88  06  .7  67  944  14.17  6.04  .  539
ex(3):  5  5375  111  6.63  1  .466  596  56.  74.67  .1  .04  2.2  50  62
ex(5):  3.6  78  9204044  87880.2606  018.2  229283885  8311  69472228
ex(8):  824.93143  9843159  85  4500574  5.6348462  4.052365  0881112694832668


#A: Steven Smith
#D: Matches any floating point numer/numeric string, including optional sign character (+ or -).  Also matches empty strings.
#U: http://regexlib.com/REDetails.aspx?regexp_id=54

regexp: ^[-+]?\d*\.?\d*$
tree:   ((([+-]?[0-9]*).?)[0-9]*)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  .  +6.  .  .  .  +5  -  +  +5.  -8  0  1.    10  .0  +3.    +5.7  3  .
ex(2):  +30.  -.5  3.47  -  81.09  .  68.4  -.7  687  27  +56.  340  7.  92.1
ex(3):  +0  .412  370  -906.671  7.847  -848.  -5.  +8.517  36697  0.6  +18175
ex(5):  +84796  +261.7604  8406.5  -691374  728118  43.  -949  -5285643
ex(8):  6306678  824.93143  -5086159.809510  +0771426.6  4064  156220803870


#A: James Bray
#D: GUID Tester. It tests SQL Server GUIDs, which are alphanumeric characters grouped 8-4-4-4-12 (with the dashes). Make sure they don't have the brackets around them before you check them and have fun!
#U: http://regexlib.com/REDetails.aspx?regexp_id=55

regexp: ^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$
tree:   (((((((([0-9A-Z]{8}-)[0-9A-Z]{4})-)[0-9A-Z]{4})-)[0-9A-Z]{4})-)[0-9A-Z]{12})
length: 36 to 36
-------------------- Examples --------------------
ex(0):  9U6DI16M-NNHZ-K269-9R82-XVFZQM4EQ9X9
ex(1):  VK4JTJF7-681F-H9XB-UAB3-UR821UF11RAO
ex(2):  YBUBXJR9-KS3R-HY2Q-AKTF-X3A5D4BG49RH
ex(3):  GMICZQQ2-YELZ-4TAU-Q60G-GDCW2Z2BZEP0
ex(5):  627WN82B-GVMI-AABS-3SP8-XJB8IWHDUMEV
ex(8):  U531X1MR-LOXO-7X8J-6PAH-WKKYV9T7OG1V


#A: Prasad DV
#D: Validates an email address
#U: http://regexlib.com/REDetails.aspx?regexp_id=56

regexp: (\w+?@\w+?\x2E.+)
ERROR:  rx: prefer-fewer '?' unimplemented: in "(\w+?@\w+?\x2E.+)"


#A: Prasad DV
#D: Plucks the last quote of a Stock from the MSN MoneyCentral WebQuote page for any given stock symbol. The URL of the web page where this RegEx should be applied is:
http://localhost/asp/webquote.htm?ipage=qd&Symbol=,give the stock symbol here> You must also use the singleline option.
#U: http://regexlib.com/REDetails.aspx?regexp_id=57

regexp: Last.*?(\d+.?\d*)
ERROR:  rx: prefer-fewer '?' unimplemented: in "Last.*?(\d+.?\d*)"


#A: Igor Kravtsov
#D: Matches US phone number format. 1 in the beginning is optional, area code is required, spaces or dashes can be used as optional divider between number groups. Also alphanumeric format is allowed after area code.
#U: http://regexlib.com/REDetails.aspx?regexp_id=58

regexp: ^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$
tree:   (((([0-9]( |-)?)?((((?[0-9]{3}))?)|[0-9]{3}))( |-)?)((([0-9]{3}( |-)?)[0-9]{4})|[0-9A-Za-z]{7}))
length: 10 to 16
-------------------- Examples --------------------
ex(0):  100MhyE7XR  5296232877  0515313629  069IQjfWdi  840BIB2HGW  5069829225
ex(1):  9-63411qh3ss  602 767-1019  5 (522937-9942  006 5GjyBq6  2558-6084928
ex(2):  8-254)-3918554  (552 oC5k8hF  9-175385-9523  6863851767  894)2008514
ex(3):  2-929667-1385  832430-2232  2(817)ZGAXxNr  (114)-0441951  3009018839
ex(5):  9 9878033205  7-(738 0PcKXdT  721-h2iu5Px  2-(504Ss8FX6L  840-vcsW3z3
ex(8):  597851 0265  1200)-404 0917  (1740206123  2-335)2914691  675 Pc8Skjq


#A: Koen Hoorelbeke
#D: Matches a string if it is a valid time in the format of HH:MM
#U: http://regexlib.com/REDetails.aspx?regexp_id=59

regexp: ^([0-1][0-9]|[2][0-3]):([0-5][0-9])$
tree:   (((([01][0-9])|(2[0-3])):)([0-5][0-9]))
length: 5 to 5
-------------------- Examples --------------------
ex(0):  02:09  06:42  00:31  23:30  05:38  10:34  20:30  05:29  01:56  22:22
ex(1):  06:51  20:28  08:30  23:34  14:45  14:48  22:12  22:53  20:50  20:19
ex(2):  13:44  10:28  02:42  23:24  18:32  13:31  22:39  23:06  21:22  11:18
ex(3):  13:52  23:31  20:59  09:47  23:40  02:35  21:09  12:03  22:56  11:10
ex(5):  20:53  00:47  21:49  22:52  21:31  21:32  10:02  20:03  23:54  00:27
ex(8):  18:03  17:41  06:24  20:34  12:29  21:19  21:07  14:40  19:23  09:44


#A: Mart Maasikas
#D: US Phone number that accept a dot, a space, a dash, a forward slash, between the numbers. Will Accept a 1 or 0 in front.  Area Code not necessary
#U: http://regexlib.com/REDetails.aspx?regexp_id=61

regexp: ((\(\d{3}\)?)|(\d{3}))([\s-./]?)(\d{3})([\s-./]?)(\d{4})
tree:   (((((((([0-9]{3}))?)|[0-9]{3})[\t-\r -/]?)[0-9]{3})[\t-\r -/]?)[0-9]{4})
length: 10 to 14
-------------------- Examples --------------------
ex(0):  (1000473516  (6503837768  0531451540  4605469685  1994307216
ex(1):  (306)4763629  069+1846911  (803)816-9824  772+4513501  (1042333817
ex(2):  250.2721855  827$203%5643  (737)508*1205  (030)1359005  (508)(796)0540
ex(3):  (559)9281127  466,2519201  065785#3580  (580)*1328304  (728.293%0555
ex(5):  780/7855539  8043266989  (429)/487\"3179  (464974-7121  (088+672*5102
ex(8):  (256)*981$0555  1425722674  (234)3595223  427'7364094  (963083)9904


#A: Mart Maasikas
#D: Any Expression Upper/Lower Case, with commas and space between the text, with any amount of space before or after
#U: http://regexlib.com/REDetails.aspx?regexp_id=62

regexp: ^\s*[a-zA-Z,\s]+\s*$
tree:   (([\t-\r ]*[\t-\r ,A-Za-z]+)[\t-\r ]*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  k  z  w  E  X  S  x  S  I  k  m  c  c  O  b  L  K  W  N  h  E  J  d
ex(1):  F   o  e   W   a   T    s  M  q  V   d  S   k    h   N   q  O   o   g 
ex(2):  qU     rn      c      ,   v    D   xI  xp    ed    x    r      Pu  
ex(3):  O    IMY    u,G      qNT       J        wB     Pkr      IL       hcy
ex(5):  aOo       ,RwLC            j,GS     X         bHrbj     
ex(8):  mhlzCAZ             MTEKAPg        i,,Ba            t         A       


#A: Mart Maasikas
#D: ANY alphanumeric string with spaces, commas, dashes.
#U: http://regexlib.com/REDetails.aspx?regexp_id=63

regexp: ^[a-zA-Z0-9\s.\-]+$
tree:   [\t-\r -.0-9A-Za-z]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  i     e  w  Q  A  p  J  f  h     6  e  d  B  E  g  x  V  H  Z  g  e
ex(1):  B  x  .  K  3  s  T  D  M  J  v  j  X  C  T  q  m  T  m  v  x  7  h  x
ex(2):  .Q  Z  XZ  ED  A  Lk  Ev   l  gd  k  g  Kb  Lc  9p  oN  j  l  N  kG  N
ex(3):  z  uz  yu  U46  yb-  8zs  59  Ym  j9  3  -O  8-t  q  iT   bSh  wO8  jZ
ex(5):  XQs  S5b  52xh  u  5LQ  gkZ   o0  1IS  kDFbE  STS  Vrv  k   3LX  t-  S
ex(8):  sh8  8  Yv  x  -Bnd3q  QFEj  YYN93.  Cf5  U5j182cz   9V  qP  Va  B5 Ki3


#A: Ryan S
#D: This can be used in conjunction with the replace method to provide pseudo-code support without having to enable HTML. The replacement string (in ASP.NET, use RegExp.Replace(SourceString, RegularExpressionPattern, ReplacementString) is <a href="${link}">${text}</a>.
#U: http://regexlib.com/REDetails.aspx?regexp_id=64

regexp: \[link="(?<link>((.|\n)*?))"\](?<text>((.|\n)*?))\[\/link\]
ERROR:  rx: '(?...' unimplemented: in "\[link="(?<link>((.|\n)*?))"\](?<text>((.|\n)*?))\[\/link\]"


#A: Chris Love
#D: This provides an expression to calidate the four major credit cards.  It can be easily broken up to use for a specific type of card.  It does not validate the number being a potential real number, only in the correct format.
#U: http://regexlib.com/REDetails.aspx?regexp_id=67

regexp: (^(4|5)\d{3}-?\d{4}-?\d{4}-?\d{4}|(4|5)\d{15})|(^(6011)-?\d{4}-?\d{4}-?\d{4}|(6011)-?\d{12})|(^((3\d{3}))-\d{6}-\d{5}|^((3\d{14})))
ERROR:  rx: Embedded '^' unimplemented: in "(^(4|5)\d{3}-?\d{4}-?\d{4}-?\d{4}|(4|5)\d{15})|(^(6011)-?\d{4}-?\d{4}-?\d{4}|(6011)-?\d{12})|(^((3\d{3}))-\d{6}-\d{5}|^((3\d{14})))"


#A: Scott Frampton
#D: This regular expression matches 'Switch' card numbers - a payment method used extensively in the UK.
#U: http://regexlib.com/REDetails.aspx?regexp_id=68

regexp: ^([0-9]{6}[\s\-]{1}[0-9]{12}|[0-9]{18})$
tree:   ((([0-9]{6}[\t-\r -])[0-9]{12})|[0-9]{18})
length: 18 to 19
-------------------- Examples --------------------
ex(0):  100047 468965038377  780531 207369460546  951519943072167653
ex(1):  618788479014568690  066972 079451526632  298894-945388211904
ex(2):  851556-587376629912  710303 093143350961  177109801315012629
ex(3):  514638963210220936  824551 018304868902  992365417627672536
ex(5):  572883182214009882  802667-617310361331  326727563196094942
ex(8):  745157043785552811  999431157364044187  869808016348314893


#A: Chris Becker
#D: Matches U.S. dates with leading zeros and without and with 2 or four digit years
#U: http://regexlib.com/REDetails.aspx?regexp_id=69

regexp: ^(([1-9])|(0[1-9])|(1[0-2]))\/((0[1-9])|([1-31]))\/((\d{2})|(\d{4}))$
tree:   ((((([1-9]|(0[1-9])|(1[012]))/)((0[1-9])|[123]))/)([0-9]{2}|[0-9]{4}))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1/04/00  04/02/46  06/1/70  9/1/71  3/1/10  5/09/8364  8/05/37
ex(1):  8/3/38  8/05/1968  03/08/72  1/2/21  12/05/22  8/01/24  11/1/05
ex(2):  6/04/4679  04/02/36  7/01/16  06/2/9271  12/09/02  11/3/8364  01/1/7058
ex(3):  10/2/27  10/1/12  10/1/21  07/3/99  07/1/0906  09/1/21  8/3/8788
ex(5):  12/1/67  1/08/11  05/08/1814  06/1/5155  08/1/6941  10/05/05  12/1/64
ex(8):  11/03/03  7/09/3143  09/08/4363  12/09/80  7/05/8752  4/07/3265


#A: Brian Orrell
#D: Matches currency input with or without commas.
#U: http://regexlib.com/REDetails.aspx?regexp_id=70

regexp: ^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$
tree:   (($?(((([0-9]{1,3},)([0-9]{3},)*)[0-9]{3})|[0-9]+))(([\x01-\u007f][0-9])[0-9])?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1,000  4,046  6,089  1,643  1,033  8  5  8,063  7  2  0,707  1,903
ex(1):  $3  $5,263,607?05  47,011,960z48  $491,988  68,436  $13,945
ex(2):  483,279,260,670  24,017,193  $307,484,159,672  6E49  $926,335C75
ex(3):  $81,822  $0)82  $39,349,066M10  $37,952  $045,558,159,463
ex(5):  0429L66  $39,707,752,055,254  $652,434,410,531,264X82
ex(8):  02,354,777,276  $613314  34699  $17  $362995  $18,797,543,884,711,576


#A: James Burton
#D: A regular expression to match phone numbers, allowing for an international dialing code at the start and hyphenation and spaces that are sometimes entered.
#U: http://regexlib.com/REDetails.aspx?regexp_id=73

regexp: ^(\(?\+?[0-9]*\)?)?[0-9_\- \(\)]*$
tree:   (((((?+?)[0-9]*))?)?[ ()-0-9_]*)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    +)3    )  +-      +  0  +3      2    (+4)9  (+7  +    +4))  6  )    
ex(2):  6  )  9)  57  15  03  3  33  26  )  (06)9  ( 9  (+  )  +)_  3  11  (11
ex(3):  25  +81)  _6  98   2)953  -7  (+0194    (8)5  (388)  -_1  +6-1   (  _-
ex(5):  1  24  )3  76    028_   -_23  +8392)  )  6 2  (500  2  6  30  +7255)4
ex(8):  (15-7 15  38963210049   )10(1)  153836  13 223  +12(  8-   8(9(980_


#A: Blake Facey
#D: Matches standard 5 digit US Zip Codes, or the US ZIP + 4 Standard.
#U: http://regexlib.com/REDetails.aspx?regexp_id=74

regexp: ^\d{5}(-\d{4})?$
tree:   ([0-9]{5}(-[0-9]{4})?)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  86685-9271  49069-5979  28991  74381-1744  27441  56042  72353
ex(2):  86311-1267  66265-9844  80439  22444  28685  23408  43807  66299
ex(3):  93143-9843  63177  58572-5889  63484  54471-1730  11279-6651  12588
ex(5):  49266-1979  20009-1475  23818-8141  78680  73322-8032  29849-0635
ex(8):  78779-6883  85466-9568  59110-2011  32042  45780  61076-5635  15630


#A: Jon van Leuven
#D: Regular expression to evaluate dutch-style phone numbers. Possible example prefixes: +31, +31(0), (+31)(0), 0, 0031
followed by 9 numbers (which can contain a space or -).
#U: http://regexlib.com/REDetails.aspx?regexp_id=75

regexp: (^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$)
ERROR:  rx: Embedded '^' unimplemented: in "(^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$)"


#A: Jon van Leuven
#D: Regular expression to evaluate dutch zipcodes. This is an updated version of Roland Mensenkamp.
#U: http://regexlib.com/REDetails.aspx?regexp_id=76

regexp: ^[0-9]{4}\s{0,1}[a-zA-Z]{2}$
tree:   (([0-9]{4}[\t-\r ]?)[A-Za-z]{2})
length: 6 to 7
-------------------- Examples --------------------
ex(0):  7016PQ  0737Yl  7344kw  2062AT  5197yl  7698Ub  6697EY  1043Yh  4497sp
ex(1):  9672GX  2495dr  0585 GU  6500mX  0985 PD  8235MP  1659mM  5403nw
ex(2):  2442vJ  0865 lp  7961 NV  2362yR  3772 LF  7035 IS  4274 CJ  4368 Vc
ex(3):  1662 gE  0931Ki  2187 Uy  2249uA  5178 BB  0098 Xb  2331 qC  7059 GU
ex(5):  8754bS  2993 MZ  5873jH  4082GU  2463fL  2398 GD  2552bg  6414 FL
ex(8):  5135 cm  8289 iP  1338TA  5909kj  8753 Ut  0960un  4404 VD  9167 an


#A: David Good
#D: Will match the following date formats: Preceded by a Space, Left-parentheses, or at the beginning of a line.  Followed by a Space, Right-parentheses, or Colon(:), word boundary or End of line.  Can have / or - as separator.  Accepts 2 digit year 00-99 or 4 digit years 1900-2099 (can modify to accept any range)
#U: http://regexlib.com/REDetails.aspx?regexp_id=77

regexp: (^|\s|\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:])|(^|\s|\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:|$|\>])){1}){1}){1}){1}
ERROR:  rx: Embedded '^' unimplemented: in "(^|\s|\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:])|(^|\s|\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:|$|\>])){1}){1}){1}){1}"


#A: Sean Carley
#D: Uses backreferences and word boundaries to match repeated words seperated by whitespace without matching a word with the same ending as the next words beginning.
#U: http://regexlib.com/REDetails.aspx?regexp_id=78

regexp: \b(\w+)\s+\1\b
ERROR:  rx: \b (boundary) unimplemented: in "\b(\w+)\s+\1\b"


#A: Steven Smith
#D: A very simple ISBN validation expression - it just checks for a 10 digit number where the last digit could also be a capital 'X'.  Complete specs for ISBN available here:
http://www.isbn.org/standards/home/isbn/international/html/usm4.htm.  An enhancement would be to allow exactly 3 or 0 hyphens or 3 or 0 spaces, since these are also valid formats.
#U: http://regexlib.com/REDetails.aspx?regexp_id=79

regexp: ^\d{9}[\d|X]$
tree:   ([0-9]{9}[0-9X|])
length: 10 to 10
-------------------- Examples --------------------
ex(0):  7016827812  650383776X  476320736|  7344684826  3817922053  290441462X
ex(1):  0812198174  0665259885  6697213810  835012029X  9926192338  4497222139
ex(2):  9690706498  9672228643  6678623530  4505434794  2805408751  1600307257
ex(3):  6511258884  232492669|  3490667149  9480807359  287220069X  7672536737
ex(5):  3916735360  5792517578  724102931|  7077520554  8263309008  304770253X
ex(8):  212486361X  698610264X  0546219816  3394295335  3148073025  3483148939


#A: Scott Thompson
#D: Dates
day: d or dd, <= 31,
month: m or mm, <= 12,
year: yy or yyyy >= 1900, <= 2099
#U: http://regexlib.com/REDetails.aspx?regexp_id=80

regexp: ^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$
tree:   ((((([1-9]|(0[1-9])|(1[012]))/)([0-9]|([012][0-9])|(3[01])))/)(([0-9][0-9])|((([12][,09])[0-9])[0-9])))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1/0/10  11/0/02  8/3/09  08/30/2051  10/27/51  03/01/38  01/10/15
ex(1):  4/30/19  06/9/51  04/7/1069  9/31/1094  10/15/2013  12/05/14
ex(2):  07/2/2,14  12/30/1019  09/11/2995  05/5/92  12/30/1062  2/8/1030
ex(3):  10/0/88  3/5/2,07  6/5/1,03  11/28/1075  2/18/88  6/28/1,88  07/31/1050
ex(5):  12/16/39  11/03/1964  11/9/93  6/31/39  10/09/55  08/23/1909
ex(8):  05/6/1,69  11/13/1043  2/19/32  2/30/17  12/29/1991  2/22/2916


#A: narsi v
#D: This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok !!
#U: http://regexlib.com/REDetails.aspx?regexp_id=82

regexp: ^\d*\.?((25)|(50)|(5)|(75)|(0)|(00))?$
tree:   (([0-9]*.?)((25)|(50)|5|(75)|0|(00))?)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  0  4  4  0.  2  25  5.  7.25  0  20  .00  775  6.50  .  1.75  0.  .  8
ex(2):  55  60    5875  .50  2  25  .50  47.25  7800  68.  .    8.  8.  .25  4
ex(3):  30  20.50  79.  71.    730  0  62  608.  23.  13.25  9600  2  375.
ex(5):  363.  12098.25  .  48  5.  647.  .75  41325  81.  950.  .  6804.  43380
ex(8):  861  33688.  8725  9844804.  41846892.5  3.0  25  2036000.25  59672


#A: Tommy Ullberg
#D: Validates swedish zipcodes (postnr) with or without space between groups. With leading s- or not. Can be disconnected by removing ''(s-|S-){0,1}''.
#U: http://regexlib.com/REDetails.aspx?regexp_id=83

regexp: ^(s-|S-){0,1}[0-9]{3}\s?[0-9]{2}$
tree:   (((((s-)|(S-))?[0-9]{3})[\t-\r ]?)[0-9]{2})
length: 5 to 8
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  s-63217  s-35378  S-04495  S-069 59  s-981 88  s-01469  s-25240  743 41
ex(2):  858 80  284 88  s-92657  S-28184  59962  s-573 41  418 60  77494
ex(3):  20696  40759  32405  030 00  s-09076  S-19122  S-857 80  980 14  89667
ex(5):  471 81  252 69  s-71880  S-142 12  s-350 47  s-022 35  87515  s-09647
ex(8):  74129  S-59734  51556  243 29  26406  s-451 81  853 53  S-595 71


#A: Sean McAnally
#D: Regex used in .NET to validate a date.  Matches the following formats mm/dd/yy, mm/dd/yyyy, mm-dd-yy, mm-dd-yyyy
This covers days with 30 or 31 days but does not handle February, it is allowed 30 days.
#U: http://regexlib.com/REDetails.aspx?regexp_id=84

regexp: ((0?[13578]|10|12)(-|\/)((0[0-9])|([12])([0-9]?)|(3[01]?))(-|\/)((\d{4})|(\d{2}))|(0?[2469]|11)(-|\/)((0[0-9])|([12])([0-9]?)|(3[0]?))(-|\/)((\d{4}|\d{2})))
tree:   (((((((0?[13578])|(10)|(12))(-|/))((0[0-9])|([12][0-9]?)|(3[01]?)))(-|/))([0-9]{4}|[0-9]{2}))|((((((0?[2469])|(11))(-|/))((0[0-9])|([12][0-9]?)|(30?)))(-|/))([0-9]{4}|[0-9]{2})))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  8/3-0004  5-2-51  11-07-0944  11-1/57  10-1-03  12/3-10  12-1-0181
ex(1):  08-13-81  11/08/7660  11/07/8179  11/3-0216  12-3/85  06-2-2929  6/3-30
ex(2):  11-30/67  11/02/8121  11/3/92  12/07-32  1/1/4381  6-30/61  11-09-0777
ex(3):  11/02-8587  06/00-2161  10/30-15  5/09/12  11-1-60  6/3/9479  12/2/50
ex(5):  4-30-46  10-09/18  12-14-90  6-30-48  2/30-6228  01/30/5081  12/31/8471
ex(8):  04/30/9314  02/29-08  11-04/19  10/3-01  05-05/40  10/1/7714  3-30-4846


#A: Andre Van Der Merwe
#D: Checks for a valid windows file name (Must be used with the case-insensitive option
Checks that the file has at lease one char, does not contain any invalid characters and does not have a reserved word as a file name.
"If you see a " in the regex replace it with a " character"
#U: http://regexlib.com/REDetails.aspx?regexp_id=85

regexp: ^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*:\";|/]+$
ERROR:  rx: '(?...' unimplemented: in "^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*:\";|/]+$"


#A: Marc-Antoine Latour
#D: Match any image insert in a tag .
simply replace the .jpg in the pattern whit a variable of content type ex:.swf,.js,.gif and loop the pattern to retrieve all tag whit the contenttype pass trought....
Very useful when you have people uploading html document in your site and you want to retrieve all dependecy.
#U: http://regexlib.com/REDetails.aspx?regexp_id=86

regexp: <[^>]*\n?.*=("|')?(.*\.jpg)("|')?.*\n?[^<]*>
tree:   (((((((((((<[\x01-=?-\u007f]*)[\n]?)[\x01-\u007f]*)=)("|')?)(((([\x01-\u007f]*.)j)p)g))("|')?)[\x01-\u007f]*)[\n]?)[\x01-;=-\u007f]*)>)
length: 7 to *
-------------------- Examples --------------------
ex(0):  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>
ex(1):  <r=K.jpg\"e>  <s\n='.jpg\"\n_>  <g\nf='.jpg'r\n>  <\n=.jpg'i\n>
ex(2):  <ImV\\=.jpgzK\n>  <X2='!.jpg!\n=>  <UL\n='2.jpg\"\n>  <x5\n=':v.jpg>
ex(3):  <.\n$r{=\"VG.jpg'O@Y\n4V>  <eB='.jpg@>  <4NV=\"\"m .jpg\nzO>
ex(5):  <t7P=\"0IG.jpgDL!\n-I#>  <509IW-{hC=\";qd-|.jpgkw@^!>
ex(8):  <^,69=\".jpg\"XSm*}\\\";\n:i+>  <|%eIx$!Z=.jpg]N.vjg;!%=>


#A: David Lott
#D: Expression 1 of 2 used to check email address syntax.
#U: http://regexlib.com/REDetails.aspx?regexp_id=88

regexp: ^([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))$
tree:   (([-.0-9A-Z_a-z]+@)(((([([0-9]{1,3}.){3})[0-9]{1,3})])|(([-0-9A-Z_a-z]+.)+[A-Za-z]{2,4})))
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@[6.8.9.6]  B@S.Bn  u@x.ra  l@b.cl  j@[3.9.0.7]  P@Q.az  z@[3.2.7.2]
ex(1):  a@[67.552.99.9]  7@P.XVk  T@[5.492.9.0]  3@2.EcN  5@[08.6.387.67]
ex(2):  Sl@a.GS  U@[8.1.10.2]  Fq@iA.G.eO  Y@[32.16.3.0]  6j@[95.3.54.26]
ex(3):  Fw2@[1.68.05.78]  W_s@r.niS  y@[60.469.1.32]  o@mj.U.3Ak.HL
ex(5):  ubc3o@[11.6.67.27]  V@[42.1.7.13]  6u5@[5.437.65.1]  R@[951.89.0.3]
ex(8):  o4vFcvB@[40.56.6.956]  .@[86.974.1.31]


#A: David Lott
#D: Expression 2 or 2 for matching email address syntax. This one matches the <angle bracket syntax>.
#U: http://regexlib.com/REDetails.aspx?regexp_id=89

regexp: ^(([-\w \.]+)|(""[-\w \.]+"") )?<([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))>$
tree:   (((((([ -.0-9A-Z_a-z]+|((((("")[ -.0-9A-Z_a-z]+)")") ))?<)[-.0-9A-Z_a-z]+)@)(((([([0-9]{1,3}.){3})[0-9]{1,3})])|(([-0-9A-Z_a-z]+.)+[A-Za-z]{2,4})))>)
length: 8 to *
-------------------- Examples --------------------
ex(0):  <_@[6.8.9.6]>  <B@S.Bn>  <u@x.ra>  <l@b.cl>  <j@[3.9.0.7]>  <P@Q.az>
ex(1):  <r@G.sIG>  d<N@2.PC>   <s@[220.65.21.6]>  T<j@g.PPgX>  <A@Y.vTD>
ex(2):  <qA@[74.9.26.040]>  \"\"02\"\" <00@[94.136.754.75]>
ex(3):  <Z@[35.178.71.437]>  \"\"IP\"\" <7N@5.J.z.GG>  TD6<U@[56.3.288.30]>
ex(5):  <eE@[2.28.70.69]>  <C73@[2.87.21.2]>  <h@6nxQ.cbyGi.KJxY>
ex(8):  P<pa@[45.7.5.160]>  \"\"8fk\"\" <ktl9qr@0bLVR.jdHB.7.EV1B.UNx>


#A: Klaxon Mindjammer
#D: Verifies URLs.  Checks for the leading protocol, a good looking domain (two or three letter TLD; no invalid characters in domain) and a somwhat reasonable file path.
#U: http://regexlib.com/REDetails.aspx?regexp_id=90

regexp: ^http\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$
tree:   ((((((((((ht)t)p):)/)/)[-.0-9A-Za-z]+).)[A-Za-z]{2,3})(/[\x01-\b\x0e-\x1f!-\u007f]*)?)
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://Z.yr  http://x.UP  http://u.MQ  http://n.cH  http://k.dH
ex(1):  http://1.hu/  http://-.WS/  http://F.wdK/  http://h.jO/-  http://B.MNP
ex(2):  http://D.Ibe/Z  http://v.Et/  http://L.nWP  http://Nd.xV  http://B.fOI/
ex(3):  http://PE..GR  http://YO.yrg/~\\  http://J.EHf/4  http://-NE.fp/uq
ex(5):  http://W.Gn  http://N.Gi/*#  http://i5fak.nf/H  http://--n.cfy
ex(8):  http://GDMw1x.GP  http://0UdSZ1by.sR/\"*[R  http://kTn5o.xf/hucKC


#A: Santosh Potadar
#D: UK National Insurance Number validation. Especially useful to validate through clientside/server side script on a website.
#U: http://regexlib.com/REDetails.aspx?regexp_id=92

regexp: ^[A-Za-z]{2}[0-9]{6}[A-Za-z]{1}$
tree:   (([A-Za-z]{2}[0-9]{6})[A-Za-z])
length: 9 to 9
-------------------- Examples --------------------
ex(0):  ZV920307o  iu903825w  kx617051F  Ow991209b  XG068210F  ii464573p
ex(1):  QM987650E  sn348462n  NN418093p  JF880794h  uk212437w  bE180482H
ex(2):  AD515630p  Nl817631x  WI777619R  xT136391L  Gl767691U  Jj661393O
ex(3):  dw031488o  VA285633Y  Kx980961i  Hz190913K  oT018355y  AL135281t
ex(5):  aJ394716j  Kr170619C  AC425519a  Zv197873D  as659531e  EK206192A
ex(8):  uT065876a  YW716737h  Iv846155z  of967625Y  XG882209w  SJ328266B


#A: Peter Pfeifer
#D: Sql date format tester. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=93

regexp: 20\d{2}(-|\/)((0[1-9])|(1[0-2]))(-|\/)((0[1-9])|([1-2][0-9])|(3[0-1]))(T|\s)(([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9])
tree:   ((((((((((((20)[0-9]{2})(-|/))((0[1-9])|(1[012])))(-|/))((0[1-9])|([12][0-9])|(3[01])))(T|[\t-\r ]))(([01][0-9])|(2[0-3]))):)([0-5][0-9])):)([0-5][0-9]))
length: 19 to 19
-------------------- Examples --------------------
ex(0):  2070-01/26 04:15:58  2030-12/30 22:25:03  2007-11-15T08:06:23
ex(1):  2078-12/18 03:49:05  2019/10-20 22:26:02  2005-09-31 07:07:32
ex(2):  2012-12-03T21:52:59  2011-01-30 11:18:01  2072/10/21T21:04:59
ex(3):  2075/04-30 22:17:37  2075/05-19T23:25:28  2047/08/31T11:16:11
ex(5):  2059/10/06 22:25:33  2074-07-11T18:05:18  2092/11-15T18:41:38
ex(8):  2035/11-18 09:41:47  2010/02-14T03:10:52  2045/10-03 23:12:36


#A: Rex Po
#D: - validates a yyyy-mm-dd, yyyy mm dd, or yyyy/mm/dd date
- makes sure day is within valid range for the month
- does NOT validate Feb. 29 on a leap year, only that Feb. CAN have 29 days
#U: http://regexlib.com/REDetails.aspx?regexp_id=95

regexp: ^\d{4}[\-\/\s]?((((0[13578])|(1[02]))[\-\/\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\s]?(([0-2][0-9])|(30)))|(02[\-\/\s]?[0-2][0-9]))$
tree:   (([0-9]{4}[\t-\r -/]?)(((((0[13578])|(1[02]))[\t-\r -/]?)(([012][0-9])|(3[01])))|((((0[469])|(11))[\t-\r -/]?)(([012][0-9])|(30)))|((((02)[\t-\r -/]?)[012])[0-9])))
length: 8 to 10
-------------------- Examples --------------------
ex(0):  70160210  45161100  38600125  07671210  30300531  36940220  67091130
ex(1):  364711/00  21650831  9829 0212  443501/04  7685-02 15  24230221
ex(2):  16130630  869008/28  0777 09-30  84830215  2663-1002  98891027
ex(3):  1867 0226  4573 1001  838404-30  292809/18  8515 0205  2875 0730
ex(5):  20580430  62350930  9876 1209  229702 16  0585 07/30  5747/1130
ex(8):  0244/1030  63020221  1246-03-20  2418-02/19  35530214  9266/08/31


#A: M H
#D: *CORRECTED: Again thanks for all the comments below. If you want to include internal domain as well change the partial code (\.[\w-_]+)+ to (\.[\w-_]+)?
See the comments below*
This is the regular expression I use to add links in my email program. It also ignores those suppose-to-be commas/periods/colons at the end of the URL, like this sentence "check out http://www.yahoo.com/." (the period will be ignored) Note that it requires some modification to match ones that dont start with http.
#U: http://regexlib.com/REDetails.aspx?regexp_id=96

regexp: (http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?
tree:   ((((((((((ht)t)p)|((ft)p)|((((ht)t)p)s)):)/)/)[-0-9A-Z_a-z]+)(.[-0-9A-Z_a-z]+)+)([#%&+-:=?-Z^_a-z~]*[#%&+-/-9=?-Z^_a-z~])?)
length: 9 to *
-------------------- Examples --------------------
ex(0):  http://M.i  ftp://X.U  https://2.T  https://5.2  http://D.I  ftp://c.B
ex(1):  http://t.g  https://4.Y^b  ftp://-.n  ftp://3.dav  ftp://0.K/P
ex(2):  https://Vd.of  https://p_.a.5  http://n.0O.1  ftp://E3.5z
ex(3):  https://jsi.6C7S8Xa  ftp://vLU.Dip.kbw.t_  http://YFF.F-Q
ex(5):  https://H0.d4my6.2.FW1m  https://cZ_jv.Emak.VZ.u3t.u.26Z
ex(8):  https://T_z8aP.lp4G8cL.BOERrviU.ST5NlD5j.I  https://k6.s


#A: jay gann
#D: US Telephone Reg expression that allows 7, 10 or 11 digits with or without hyphens.
#U: http://regexlib.com/REDetails.aspx?regexp_id=97

regexp: ^(1?(-?\d{3})-?)?(\d{3})(-?\d{4})$
tree:   ((((1?(-?[0-9]{3}))-?)?[0-9]{3})(-?[0-9]{4}))
length: 7 to 14
-------------------- Examples --------------------
ex(0):  7016827  8100944  3405490  6601817  0519857  8624819  1578206  2210744
ex(1):  8532714  1-008665-5767  901-7690  4859824  1-4136040723  16322988769
ex(2):  -984-739-1838  16774690316  -484287-8750  1-829951-0509  120-9876
ex(3):  5401315  1267-7505005  6220448  911202-5146  0116535  1576-793-7722
ex(5):  8768902  1-867-9068675  1298-407-6735  7451817  9441591714  860-9762140
ex(8):  1293199-0775  1-879-3162672  -742-748-9146  12537671206  814247-0555


#A: Andrew Freese
#D: This RX is used to find get all named tags in an html string. If you find a problem with it, please email drew@lordstrange.com
#U: http://regexlib.com/REDetails.aspx?regexp_id=98

regexp: <[^>]*name[\s]*=[\s]*"?[^\w_]*"?[^>]*>
tree:   (((((((((((((<[\x01-=?-\u007f]*)n)a)m)e)[\t-\r ]*)=)[\t-\r ]*)"?)[\x01-/:-@[-^`{-\u007f]*)"?)[\x01-=?-\u007f]*)>)
length: 7 to *
-------------------- Examples --------------------
ex(0):  <name=>  <name=>  <name=>  <name=>  <name=>  <name=>  <name=>  <name=>
ex(1):  <name= #.>  <name=\"]<>  <dname= \"*k>  <rname= \"#3>  <gname=>
ex(2):  <Lname  = \":*'>  <d<name  = }?\"$>  <% name  =  /'e'>  <name= \\?>
ex(3):  <Qiname  = \"\"%q>  <8name  =\"`=?\"4>  <GjQname  =   $\"Vn>
ex(5):  <l*I:*name     =   \"\"+)#;>  <Aname=  \"#\".yB`>
ex(8):  <Bname   =      :+{;>=)?\"'_^WGw!>  <ETname  =     Ga>


#A: vinod kumar
#D: This RegEx will help to validate a physical file path with a specific file extension (here xls)
#U: http://regexlib.com/REDetails.aspx?regexp_id=101

regexp: ([a-zA-Z]:(\\w+)*\\[a-zA-Z0_9]+)?.xls
tree:   (((((((([A-Za-z]:)(\w+)*)\)[09A-Z_a-z]+)?[\x01-\u007f])x)l)s)
length: 4 to *
-------------------- Examples --------------------
ex(0):  Vxls  Rxls  ^xls  Lxls  Wxls  %xls  yxls  xxls  lxls  :xls  Qxls  pxls
ex(1):  l:\\0nxls  m:\\w\\p2xls  c:\\w\\V\"xls  n:\\I(xls  axls  gxls  Rxls
ex(2):  &xls  G:\\ww\\w\\__xls  A:\\ww\\w\\T@xls  s:\\XW4xls  i:\\ww\\CAxls
ex(3):  U:\\w\\ww\\HSzxls  &xls  rxls  g:\\w\\www\\www\\0sIZxls  pxls
ex(5):  -xls  r:\\wwww\\wwwww\\www\\w\\xqcxls  g:\\wwww\\wwwww\\ULxls
ex(8):  u:\\wwwwww\\w\\VYVavMxls  Jxls  `xls  Yxls  Yxls  j:\\Xp6xls  Q:\\eIxls


#A: Steven Smith
#D: This regular expression will match a 24 hour time with no separators.
#U: http://regexlib.com/REDetails.aspx?regexp_id=102

regexp: ^(20|21|22|23|[0-1]\d)[0-5]\d$
tree:   ((((20)|(21)|(22)|(23)|([01][0-9]))[0-5])[0-9])
length: 4 to 4
-------------------- Examples --------------------
ex(0):  0209  2136  2237  2002  2344  2314  2119  1400  1743  2139  2258  2013
ex(1):  2003  2346  1830  0017  2158  0758  2111  2338  2148  1744  2220  2256
ex(2):  1344  2102  2144  2108  2040  2214  2053  0944  1259  2113  2323  2355
ex(3):  2143  2158  0047  1620  1126  2111  1524  2003  1700  2344  2001  2318
ex(5):  2341  2240  2119  2138  2348  2327  2320  0909  2024  2321  0826  0428
ex(8):  2118  2152  2134  2203  2240  2118  2331  2239  2105  0701  2343  2006


#A: Steven Smith
#D: Matches a 12-hour time value expressed as either 4 numeric digits, 3 numeric digits, or a space and 3 numeric digits.  3 digit times (930) can be expressed with leading 0's (0930) or not.  AM/PM designation is not included in this expression.
#U: http://regexlib.com/REDetails.aspx?regexp_id=103

regexp: ^( [1-9]|[1-9]|0[1-9]|10|11|12)[0-5]\d$
tree:   (((( [1-9])|[1-9]|(0[1-9])|(10)|(11)|(12))[0-5])[0-9])
length: 3 to 4
-------------------- Examples --------------------
ex(0):   105   554   238  639  0819  1026   440  1106  451  1113  0722  0237
ex(1):  0430   247  353  0634  109  1259   940   421  1131  0105  1044   640
ex(2):  1125  1113  0753   247  939  1052  0247  0118  1139   748  1201  713
ex(3):   546   338   706  1015  318   433   812  0429  1020  1211  1137  344
ex(5):  1047  1026  826  1208  1226  1138  0835   603   638  1018  1256   234
ex(8):  1105  1141   157  0641  1143  1200   733  1018  159  1201  1205  1140


#A: Mike Hensley
#D: Accepts 1-2 digits followed by a slash followed by 2-4 digits.  Useful for numeric month/year entry.
#U: http://regexlib.com/REDetails.aspx?regexp_id=104

regexp: ^\d{1,2}\/\d{2,4}$
tree:   (([0-9]{1,2}/)[0-9]{2,4})
length: 4 to 7
-------------------- Examples --------------------
ex(0):  7/01  6/82  7/81  0/09  4/43  4/05  4/90  6/60  1/81  7/05  1/98  5/78
ex(1):  81/7602  6/6616  5/29  44/1427  0/0808  47/395  2/585  91/187  80/66
ex(2):  75/977  6/113  8/45  5/2749  3/288  1/649  4/920  4/6209  9/6247
ex(3):  7/679  97/9690  18/25  48/735  5/56  6/902  68/580  05/89  7/839  9/478
ex(5):  5/4002  2/6564  9/2457  22/841  11/11  6/98  4/148  87/0827  44/8591
ex(8):  27/4936  51/891  5/528  96/545  5/8174  32/988  7/51  63/9389  9/09


#A: Dalibor Kalna
#D: This regex match numeric data in the following format: thousands are separated by (') apostrophe, decimal places are separated by dot (.) Maximum three decimal places are not required. It's easy to change to other separators as well.
#U: http://regexlib.com/REDetails.aspx?regexp_id=107

regexp: ^(\d{1,3}'(\d{3}')*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$
tree:   ((((([0-9]{1,3}')([0-9]{3}')*)[0-9]{3})(.[0-9]{1,3})?)|([0-9]{1,3}(.[0-9]{3})?))
length: 1 to *
-------------------- Examples --------------------
ex(0):  1'000  4'046  6'089  1'643  1'033  8  5  8'063  7  2  0'707  1'903
ex(1):  963  84  616  39'776.0  67'305'147  22'960.19  35'792'899.476  28
ex(2):  37.395  2'353'028.89  92.457  6.960  69  72  75'739.11  29  449'221'582
ex(3):  85.750  299  6  668'303'731'163.3  0  361.177  54'103'670.226  1
ex(5):  87'282'020'241  98'242'324.44  905'875'802'620.48
ex(8):  76.815  0.298  67'074'512.1  97  88.737  782.669


#A: Josh Bailyr
#D: This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003.  It can easily be adapted for different date ranges.  It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003.  The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month.  An example of an invalid date that it would allow to pass through would be 11/31/2002.  This date is invalid because 11/31 of any year does not exist, but this expression would allow it pass through since the day part is in the range 01-31.
This regular expression has been used successfully in ASP with VBScript using the windows scripting library RegExp object.
#U: http://regexlib.com/REDetails.aspx?regexp_id=109

regexp: ^(0[1-9]|1[0-2])\/((0[1-9]|2\d)|3[0-1])\/(19\d\d|200[0-3])$
tree:   ((((((0[1-9])|(1[012]))/)(((0[1-9])|(2[0-9]))|(3[01])))/)((((19)[0-9])[0-9])|(((20)0)[0-3])))
length: 10 to 10
-------------------- Examples --------------------
ex(0):  01/04/1910  11/04/1902  11/30/2003  10/20/1947  01/05/2003  03/31/1973
ex(1):  12/03/1930  10/30/1901  12/31/2002  04/29/2002  09/30/1978  09/30/2003
ex(2):  12/31/2001  11/30/2001  12/01/1957  08/31/2000  04/20/2003  12/01/1934
ex(3):  08/20/1997  07/31/1966  04/31/2000  10/31/1923  12/31/1962  12/30/2003
ex(5):  09/25/2002  10/27/2002  11/31/2002  04/30/2003  02/31/2001  04/02/2002
ex(8):  10/26/2000  12/30/1900  09/30/1907  12/25/2001  10/02/1933  07/21/1935


#A: Scott Watermasysk Watermasysk
#D: This expression can be used validate a datetime column from SQL Server. Big parts of it where taken from other samples on RegexLib. Please feel free to take it apart and improve it.
#U: http://regexlib.com/REDetails.aspx?regexp_id=110

regexp: ^((((([13578])|(1[0-2]))[\-\/\s]?(([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?(([1-9])|([1-2][0-9])|(30)))|(2[\-\/\s]?(([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s((([1-9])|(1[02]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$
tree:   ((((((([13578]|(1[012]))[\t-\r -/]?)([1-9]|([12][0-9])|(3[01])))|((([469]|(11))[\t-\r -/]?)([1-9]|([12][0-9])|(30)))|((2[\t-\r -/]?)([1-9]|([12][0-9]))))[\t-\r -/]?)[0-9]{4})([\t-\r ]((((([1-9]|(1[02])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))[AMPamp|]{2}))?)
length: 6 to 22
-------------------- Examples --------------------
ex(0):  8224344  1145164  11307164  8173780  4303806  11115403  11303446
ex(1):  6/16/8886  216/7941  1228124  5-31 1441 2:54:19 a|  11/21/2361
ex(2):  2/6/7690  12190066 10:37:01 Ap  214 4280 8:12 pa  131713
ex(3):  2278809  9173832 10:56 mA  229/6942 12:34 aM  268622  11304436 8:29 |M
ex(5):  2/16719  1161597  21 0540  11124732 10:02 Pp  2 65005  2-193011
ex(8):  21-0008 10:04:09 ap  73-9266 12:58:06 m|  11130498 1:45 MA  11-42481


#A: anup kallingal
#D: This can be used to match indian style pincodes / postal codes used by the indian postal departments which are 6 digits long and may have space after the 3rd digit
#U: http://regexlib.com/REDetails.aspx?regexp_id=111

regexp: ^\d{3}\s?\d{3}$
tree:   (([0-9]{3}[\t-\r ]?)[0-9]{3})
length: 6 to 7
-------------------- Examples --------------------
ex(0):  701682  781009  443405  490660  181705  198578  624819  157820  622107
ex(1):  305853  136490  692979  289 947  438 517  442 567  056 810  723 770
ex(2):  311 126  766947  984 739  380 842  292215  823556  438376  629 984
ex(3):  093927  984087  960 419  455090  267 750  645523  650881  112200
ex(5):  518864  857 917  722788  079207  287 171  287 009  370276  725 366
ex(8):  817 539  273 673  536 201  138 175  768 364  385319  747524  686254


#A: Matt Adams
#D: The following validates dates with and without leading zeros in the following formats: MM/DD/YYYY and it also takes YYYY (this can easily be removed).  All months are validated for the correct number of days for that particular month except for February which can be set to 29 days. date day month year
#U: http://regexlib.com/REDetails.aspx?regexp_id=112

regexp: ^((((0[13578])|([13578])|(1[02]))[\/](([1-9])|([0-2][0-9])|(3[01])))|(((0[469])|([469])|(11))[\/](([1-9])|([0-2][0-9])|(30)))|((2|02)[\/](([1-9])|([0-2][0-9]))))[\/]\d{4}$|^\d{4}$
ERROR:  rx: Embedded '$' unimplemented: in "^((((0[13578])|([13578])|(1[02]))[\/](([1-9])|([0-2][0-9])|(3[01])))|(((0[469])|([469])|(11))[\/](([1-9])|([0-2][0-9])|(30)))|((2|02)[\/](([1-9])|([0-2][0-9]))))[\/]\d{4}$|^\d{4}$"


#A: Michael Ash
#D: This expression validates dates in the US m/d/y format from 1/1/1600 - 12/31/9999.
#T: M/d/y Date
#U: http://regexlib.com/REDetails.aspx?regexp_id=113

regexp: ^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$
ERROR:  rx: \1 (backref) unimplemented: in "^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"


#A: Jason West
#D: My meager attempt at a date validator with leap years using a strict mm/dd/yyyy format.
#U: http://regexlib.com/REDetails.aspx?regexp_id=114

regexp: (((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|11)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2[0-8])([-./])(\d{4}))|((2)(\.|-|\/)(29)([-./])([02468][048]00))|((2)([-./])(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9][13579][26])))
tree:   (((((((0[13578])|(10)|(12))[-./])((0[1-9])|([12][0-9])|(3[01])))[-./])[0-9]{4})|((((((0[469])|(11))[-./])((0[1-9])|([12][0-9])|(30)))[-./])[0-9]{4})|((((2[-./])((0[1-9])|(1[0-9])|(2[0-8])))[-./])[0-9]{4})|((((2(.|-|/))(29))[-./])((([02468][048])0)0))|((((2[-./])(29))[-./])((([13579][26])0)0))|((((2[-./])(29))[-./])((([0-9][0-9])0)[48]))|((((2[-./])(29))[-./])((([0-9][0-9])[2468])[048]))|((((2[-./])(29))[-./])((([0-9][0-9])[13579])[26])))
length: 9 to 10
-------------------- Examples --------------------
ex(0):  2.12-0550  03.30-8100  2/29/7104  2-29/7600  2-29/5600  2/29-0552
ex(1):  03-18.1540  2/29-8412  2-29-7824  2/29-2904  2.29/5472  2/29-7600
ex(2):  2-29/8452  2/29/7200  2-29/7980  2/29-5248  2-29-8172  2.29/3404
ex(3):  2-29.7108  2-08/9261  10/01-9817  2.13/4803  2.29/5904  11.09-4427
ex(5):  08-21.1775  2-29-2408  11-30.8407  2-29-6400  11/30/7694  2/29-5200
ex(8):  2.29.6604  2/29.8704  2.29/6904  2-29.0980  2-29-5200  12-08/3842


#A: Frederico Knabben
#D: Use it for breaking-down a URI (URL, URN) reference into its main components: Scheme, Authority, Path, Query and Fragment.
This is not a simple match regular expression. so it not works to verify a URI. It returns 1 matching group for each URI component.
For example, for the following URI:
http://regexlib.com/REDetails.aspx?regexp_id=x#Details
returns: scheme="http", authority="regexlib.com", path="/REDetails.aspx", query="regexp_id=x" and fragment="Details".
This is a W3C raccomandation (RFC 2396).
#U: http://regexlib.com/REDetails.aspx?regexp_id=115

regexp: ^(?=[^&])(?:(?<scheme>[^:/?#]+):)?(?://(?<authority>[^/?#]*))?(?<path>[^?#]*)(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?
ERROR:  rx: '(?...' unimplemented: in "^(?=[^&])(?:(?<scheme>[^:/?#]+):)?(?://(?<authority>[^/?#]*))?(?<path>[^?#]*)(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?"


#A: Bill Anderson
#D: US Telephone Number where this is regular expression excludes the first number, after the area code,from being 0 or 1; it also allows an extension
to be added where it does not have to be prefixed by 'x'.
#U: http://regexlib.com/REDetails.aspx?regexp_id=116

regexp: ^[\\(]{0,1}([0-9]){3}[\\)]{0,1}[ ]?([^0-1]){1}([0-9]){2}[ ]?[-]?[ ]?([0-9]){4}[ ]*((x){0,1}([0-9]){1,5}){0,1}$
tree:   ((((((((((([(\]?[0-9]{3})[)\]?) ?)[\x01-/2-\u007f])[0-9]{2}) ?)-?) ?)[0-9]{4}) *)(x?[0-9]{1,5})?)
length: 10 to *
-------------------- Examples --------------------
ex(0):  7012030737  805V446848  247(074442  173P237597  928N172567  056S161863
ex(1):  384 '31 - 1596730  685:24- 7984  \\227\\l81 2375  (980 941 -2000 x803
ex(2):  752`90 -4185   (380) m39 8977  (990\\ #15-1956   (053 577- 5879
ex(3):  895\\ ]10 0405   x2970  (516\"63 -1157   x540  (441 #756682  927
ex(5):  743>93 5121    273  301~820694     x7  (850 )21  5742   
ex(8):  \\727) X80 -0846        5687  (885)u91 - 7916        95012


#A: Steven Smith
#D: This matches any real number, with optional decimal point and numbers after the decimal, and optional positive (+) or negative (-) designation.
#U: http://regexlib.com/REDetails.aspx?regexp_id=117

regexp: ^[-+]?\d+(\.\d+)?$
tree:   (([+-]?[0-9]+)(.[0-9]+)?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1.3  +4  5  +0  0  -7.3  -8  8.8  -4.4  8  -0.2  +0  4.0  -5.0  -8
ex(2):  4  -8.2  +6  +43  -5  97  -77.59  -52.8  8  0  -9  -4  89.92  -45
ex(3):  3.669  7.5  +41  +51  25  +68  +84  +3  8  38  50.612  -368  987  +98
ex(5):  32.01  2  -6777  7969.01484  62287.66299  951.2  0.533  -9.9  +067.5
ex(8):  +95103  +7.48160030  -645  71060448.0  202024  -4294708.874  +59941


#A: Qing Jiang
#D: Match Canadia Zip Code. You can have a space in the middle Like T2P 3C7, or no space like T2P3C7
#U: http://regexlib.com/REDetails.aspx?regexp_id=118

regexp: ^[a-zA-Z][0-9][a-zA-Z]\s?[0-9][a-zA-Z][0-9]$
tree:   (((((([A-Za-z][0-9])[A-Za-z])[\t-\r ]?)[0-9])[A-Za-z])[0-9])
length: 6 to 7
-------------------- Examples --------------------
ex(0):  Z3X2q9  H8x0X8  O0E1M7  m4V3k3  O6r8G8  J8B8a9  S7s9I5  z8i5K8  d0M9J9
ex(1):  D3C3N1  k8h 3v2  p3B 0A2  l1c7P9  G2J6c5  Z0b1J0  O1N9q5  W7J 4x1
ex(2):  P4d9v8  R0G 3c0  X8y6y7  G3z1c1  l0a7z7  e4M 9n8  P3S3p5  E7m1r1
ex(3):  M6E9t9  r9G 0Z5  y1Y 4l8  l7I8R9  K5z4L1  f3P5S0  e5f 1T8  U2k 0G2
ex(5):  H6T1J5  e0x 6c9  r8k2J7  j9G2Z5  z5P 0A2  c2Z 7I1  Q3x8r8  S8Y7p5
ex(8):  Q2Q2h4  Z3d 8c6  d2E0N7  j4U 6V9  I5n 2n2  E0S3n0  N2c2a6  Y4l4D4


#A: Qing Jiang
#D: This expression matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code. The first one must be 5 numeric digits. The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits. The Canadian postal code must be of the form ANA NAN where A is any uppercase alphabetic character and N is a numeric digit from 0 to 9.  
#U: http://regexlib.com/REDetails.aspx?regexp_id=122

regexp: ^((\d{5}-\d{4})|(\d{5})|([A-Z]\d[A-Z]\s\d[A-Z]\d))$
tree:   ((([0-9]{5}-)[0-9]{4})|[0-9]{5}|(((((([A-Z][0-9])[A-Z])[\t-\r ])[0-9])[A-Z])[0-9]))
length: 5 to 10
-------------------- Examples --------------------
ex(0):  10004-7351  Z4D 7Y3  N3S 9D9  41398-2961  78093  K5M 4K0  O3V 7Y6
ex(1):  V1R 9Q6  25988  35117-5303  F7S 2V3  99926  57652-9186  72221
ex(2):  64694-2036  31173-6305  C9K 6Q5  B9E 9C6  19428-0540  E1K 2E4  45317
ex(3):  W6Q 9T0  E5X 8I2  02620-1830  77281  K3U 5G7  S4G 3W0  15866-4149
ex(5):  19197  22140  F8Y 5A3  97470-0368  D5F 6O0  D9R 8R1  49085  30490
ex(8):  89231  B5B 5E4  30080-9943  53068-5526  Y7G 6H0  S2X 2E2  48204-9128


#A: Daniel Hou
#U: http://regexlib.com/REDetails.aspx?regexp_id=123

regexp: (a|b|c).(a.b)*.b+.c
tree:   (((((((a|b|c)[\x01-\u007f])((a[\x01-\u007f])b)*)[\x01-\u007f])b+)[\x01-\u007f])c)
length: 6 to *
-------------------- Examples --------------------
ex(0):  aM2bic  b,tbEc  c)Sb)c  ay1bIc  b+ubkc  aYHb8c  adjb?c  cbHbyc  bO6b_c
ex(1):  cfa\\bJb^c  bFa]bMbSc  a'a(bEb}c  c*a@b'b'c  a+a5b\\b&c  as\\b*c
ex(2):  b}afbaAb=bbjc  a~a%bapbEbdc  bIa~baqb;bb!c  ai?bbec  ama:ba(b^bhc
ex(3):  cXa,banbRbbbOc  a^a\"baUb]byc  c`aTba5bYbbb?c  b/gbbb'c  cAa^bvbbbzc
ex(5):  avaNbaSb[bb%c  bDa%bHbbbbbUc  aXaybaibaEbakbYbbbbbzc  bGa)ba)bmbbbbb6c
ex(8):  cTaebaFbawbadbaIbaIb\\bbbbbbbbNc  b#aubaLbarbaqbapba#baVbaPbNbbbbb=c


#A: Alessandro Vergani
#D: Matches quoted string, using \" as an escape to place quotes in the string
#U: http://regexlib.com/REDetails.aspx?regexp_id=124

regexp: "((\\")|[^"(\\")])+"
tree:   (("((\")|[\x01-!#-'*-[]-\u007f])+)")
length: 3 to *
-------------------- Examples --------------------
ex(0):  \"\\\"\"  \"\\\"\"  \"r\"  \"\\\"\"  \"\\\"\"  \"x\"  \"\\\"\"  \"^\"
ex(1):  \"P\"  \"\\\"\"  \"\\\"\"  \"\\\"\"  \"2\"  \"^\"  \"\\\"\"  \"\\\"\"
ex(2):  \"\\\"\"  \"\\\"\"  \">\"  \"Zz\"  \">\"  \"2\"  \"\\\"\"  \"h\"
ex(3):  \"5\\\"\"  \":\\\"x\"  \"\\\"\\\"b\"  \"+v\"  \"\\\"\"  \"\\\"\\\"\"
ex(5):  \"\\\"\"  \"\\\"\\\"8\"  \"\\\"&\"  \"\\\"\"  \"\\\"\"  \"7\\\"\"
ex(8):  \"\\\"\\\"\\\"=\"  \"/\\\"\"  \"\\\"\"  \"[\\\"4\\\"qh\\\"\"


#A: Carlos Nascimento
#D: Matches standard 5 digit Brazilian Postal Codes (CEP), or the CEP + 3 digits (distribution identifiers - suffix).
For more info refer to: http://www.correios.com.br/servicos/cep/Estrutura_CEP.cfm (in portuguese).
#U: http://regexlib.com/REDetails.aspx?regexp_id=125

regexp: ^\d{5}(-\d{3})?$
tree:   ([0-9]{5}(-[0-9]{3})?)
length: 5 to 9
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  86685-927  14906-759  79289-947  43816-744  27441  56042  72353
ex(2):  86311-126  76626  79844  39380-842  29286  58234  56438  37662-298
ex(3):  93143-984  36317-058  57214  89634  28544-531  73011  12466-684
ex(5):  24926-619  79200-671  47523  42481  57095  05554-982  98277-987  06500
ex(8):  99037-991  21919-822  14009  07480  96616  62357  53608  49286-374


#A: Michael Ash
#D: This re matches US currency format with lead dollar sign. Dollar value must have at least one digit and may or may not be comma separated. Cents value is optional.
#T: US currency
#U: http://regexlib.com/REDetails.aspx?regexp_id=126

regexp: ^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$
tree:   (($(([0-9]{1,3}(,[0-9]{3})*)|[0-9]+))(.[0-9]{2})?)
length: 2 to *
-------------------- Examples --------------------
ex(0):  $1  $4  $2  $6  $2  $3  $2  $8  $0  $4  $5  $2  $6  $0  $1  $8  $7  $9
ex(1):  $0  $605.37  $02.46  $8.46  $92,961  $89,470  $24,206  $53.23  $2
ex(2):  $0  $11  $43.39  $72.37  $2.57  $84  $68.12  $491.69  $0,080  $6  $21
ex(3):  $2  $806,120,298  $98,163,128  $76  $157,222  $26  $938  $3  $855.82
ex(5):  $0.73  $844.22  $832.47  $75,045,979,876.39  $1,648
ex(8):  $5,881,080,387  $0202.51  $98,242,324,926,699.79  $722796.07  $86876


#A: Alban Schmid
#D: This regular expression pattern can be used to check the validity of paths for file upload controls. The uploaded file can be either stored locally or accessible through UNC. It cannot contain illegal characters for the windows OS - that may be supported e.g. on Mac OS – and cannot be a URL (Yes, as weird as it may seem, some users enter URLs in the file upload box, even though there is a browse button...)
#U: http://regexlib.com/REDetails.aspx?regexp_id=127

regexp: ([A-Z]:\\[^/:\*\?<>\|]+\.\w{2,6})|(\\{2}[^/:\*\?<>\|]+\.\w{2,6})
tree:   (((((([A-Z]:)\)[\x01-)+-.0-9;=@-{}~\u007f]+).)[0-9A-Z_a-z]{2,6})|(((\{2}[\x01-)+-.0-9;=@-{}~\u007f]+).)[0-9A-Z_a-z]{2,6}))
length: 6 to *
-------------------- Examples --------------------
ex(0):  D:\\[.rL  D:\\a.ik  C:\\@.8f  B:\\m.Yt  \\\\5.Pl  N:\\g.72  G:\\P.FW
ex(1):  T:\\s.j13b  O:\\z.sUeH  \\\\c.j1Ll  \\\\V.fMPcm  L:\\m.UcUY
ex(2):  M:\\3.6NrK  L:\\EI.xqfG  \\\\}.zFf  \\\\WY.OqG  \\\\2X.qUYEZ
ex(3):  U:\\p .6R5z  \\\\4}.NTot  C:\\J.n50  \\\\Oc.xp9H_  O:\\ea.aEtN
ex(5):  \\\\=.Hxy  \\\\ZiJO.oE  \\\\h@0)1.PPN_  \\\\o6`.dw7k  V:\\LdK.IG7s
ex(8):  \\\\o(d.re  \\\\JX\"3\"~.OX6  \\\\k.yb7P  N:\\H%1z0(.MeEG


#A: Michael Ash
#D: This RE validates alpha characters that evaluate to Roman numerials, ranging from 1(I) - 3999(MMMCMXCIX). Not case sensitive.
#T: Roman numerials
#U: http://regexlib.com/REDetails.aspx?regexp_id=128

regexp: ^(?i:(?=[MDCLXVI])((M{0,3})((C[DM])|(D?C{0,3}))?((X[LC])|(L?XX{0,2})|L)?((I[VX])|(V?(II{0,2}))|V)?))$
ERROR:  rx: '(?...' unimplemented: in "^(?i:(?=[MDCLXVI])((M{0,3})((C[DM])|(D?C{0,3}))?((X[LC])|(L?XX{0,2})|L)?((I[VX])|(V?(II{0,2}))|V)?))$"


#A: Nacho Varas
#D: Matches a string if it is a valid time in the format of HH:MM / H:MM / HH / H
#U: http://regexlib.com/REDetails.aspx?regexp_id=129

regexp: (^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$)
ERROR:  rx: Embedded '^' unimplemented: in "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$)"


#A: Al Kahler
#D: Matches US currency input with or without commas.  This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the . (period) to ensure that no other characters may be used in it's place.
#U: http://regexlib.com/REDetails.aspx?regexp_id=130

regexp: ^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(\.[0-9][0-9])?$
tree:   (($?(((([0-9]{1,3},)([0-9]{3},)*)[0-9]{3})|[0-9]+))((.[0-9])[0-9])?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1,000  4,046  6,089  1,643  1,033  8  5  8,063  7  2  0,707  1,903
ex(1):  $3  $5,263,607.68  1.82  $4.46  7.60  48,768  $8  $792,236  7.18  $8
ex(2):  4.99  96,569,153,907.75  $32.02  80  $00,171  $4  $45  $99.67  $8
ex(3):  $457  $72,701,855,994,303.07  825  6  $967.07  2.29  124  095.24
ex(5):  $278,428.09  6440.07  26965  $707,317,301  40,911,380,288,616,057.08
ex(8):  89,687,674,171,287,220.37  $5815.00  68,870,650,037,430.86  136,482,442


#A: Andrew Balaschak
#D: Fromat check for MM/YY, checks month is 1-12 and any 2 digit year.
#U: http://regexlib.com/REDetails.aspx?regexp_id=132

regexp: ((0[1-9])|(1[02]))/\d{2}
tree:   ((((0[1-9])|(1[02]))/)[0-9]{2})
length: 5 to 5
-------------------- Examples --------------------
ex(0):  01/01  09/82  10/46  06/96  12/71  08/43  01/51  03/47  03/32  02/73
ex(1):  12/84  10/13  12/03  06/25  12/19  10/93  09/94  10/62  09/10  10/77
ex(2):  02/49  03/08  10/78  12/04  10/62  12/52  10/81  06/19  06/17  08/92
ex(3):  10/90  04/60  06/66  12/47  12/56  10/60  01/28  12/58  10/63  10/04
ex(5):  09/69  10/57  12/28  09/62  10/59  10/79  04/44  03/04  10/83  08/42
ex(8):  02/68  10/85  10/60  12/49  06/94  04/10  12/28  05/41  04/15  12/86


#A: Tom Svensson
#D: Will match a VBScript string and/or comment
Ex:
' userinfo
strUsername = "tomsve"
iAge = 20
' temp
strPassword = "halloj"
...Would result in the following matches:
' userinfo
"tomsve"
' temp
"halloj"
Good luck!
Tom S. info@tomsvensson.com
#U: http://regexlib.com/REDetails.aspx?regexp_id=133

regexp: ("[^"]*")|('[^\r]*)(\r\n)?
tree:   ((("[\x01-!#-\u007f]*)")|(('[\x01-\f\x0e-\u007f]*)([\r][\n])?))
length: 1 to *
-------------------- Examples --------------------
ex(0):  \"\"  \"\"  '  \"\"  '  \"\"  '  '  \"\"  \"\"  \"\"  '  '  \"\"  \"\"
ex(1):  '  \"L\"  'P  'Q\r\n  'J\r\n  \"\"  \"o\"  '\r\n  \"+\"  \"J\"  \"i\"
ex(2):  'mS\r\n  \"3'\"  'S%  \"Vp\"  '|\r\n  '  'lT\r\n  '2D  \"t\"  '6{
ex(3):  'O  '*\r\n  '.  ':\r\n  '  '4j  \"`\"  \"R-Y\"  '@\r\n  '  \"i\"  \"\"
ex(5):  \"c4\"  'v  \"\"  \"%wWp#\"  '1n  '>8_\r\n  \"Voh?\"  \" r\"  \"l\"
ex(8):  \"7k)pJz=\"  \"CT;CB_M)\"  '  \"{,,d$m$d\"  '%vG?.gH  \"oeE(noK\"  'MKX


#A: V. Lorz
#D: GUID Tester.
This is a modification from the regular expression submitted by James Bray (james@jamesbray.com). It allows the use of mixed upper and lowercase letters in the GUID string.
#U: http://regexlib.com/REDetails.aspx?regexp_id=134

regexp: ^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$
tree:   (((((((([0-9A-Za-z]{8}-)[0-9A-Za-z]{4})-)[0-9A-Za-z]{4})-)[0-9A-Za-z]{4})-)[0-9A-Za-z]{12})
length: 36 to 36
-------------------- Examples --------------------
ex(0):  ZHXLW48G-3ETl-iEkY-5dAX-cKwIGuUhbUIE
ex(1):  OivSGeX2-mfKS-pyLU-jKyC-Ke76AHYeBkso
ex(2):  rIls11So-v5QD-hI9a-sCU3-B3pOqjUjFeeD
ex(3):  AEgxX2TZ-PKOY-1jIN-BXIL-cjeUzKeMVYDp
ex(5):  ouQ8ju5t-RlCh-Ywz6-eCaF-oFmqtHic9bmE
ex(8):  IdeQQF4E-WWBR-5V79-wPOq-Un4mpTled3c2


#A: Stewart Haddock
#D: Checks domain names.  This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.) and hypens(-).
#U: http://regexlib.com/REDetails.aspx?regexp_id=138

regexp: ^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$
tree:   ((([0-9A-Za-z]+[-.0-9A-Za-z]+?).)(((co)m)|((or)g)|((ne)t)|((mi)l)|((ed)u)|((CO)M)|((OR)G)|((NE)T)|((MI)L)|((ED)U)))
length: 5 to *
-------------------- Examples --------------------
ex(0):  Z.NET  p.MIL  A.org  N.ORG  c.org  U.ORG  3.org  G.EDU  c.com  c.org
ex(1):  js.org  kF.COM  4.mil  t.COM  h.EDU  D.net  Iq.MIL  l.COM  PT.mil
ex(2):  uIS.org  p.com  p.mil  g.EDU  Ff.com  c3.EDU  xW.mil  nJ.com  R.NET
ex(3):  7dj.EDU  aAs.com  d5TZAW.com  luEby.mil  d1S.COM  q3n.edu  Q.org
ex(5):  QD3uUTKeu.net  KP.NET  lpW.edu  Ls6.mil  FbyCO..org  RQl.NET  8SmAF.EDU
ex(8):  YO04WR2z.org  a.com  kLDMuk.NET  n2L.EDU  lx3ILzpE.COM  Xd0Spf0f.MIL


#A: David Huyck
#D: Matches e-mail addresses, including some of the newer top-level-domain extensions, such as info, museum, name, etc.  Also allows for emails tied directly to IP addresses.
#U: http://regexlib.com/REDetails.aspx?regexp_id=140

regexp: ^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$
tree:   (((((([-0-9A-Z_a-z]+(.[-0-9A-Z_a-z]+)*)@)[-0-9A-Za-z]+)(.[-0-9A-Za-z]+)*).)([0-9]{1,3}|[A-Za-z]{2,3}|(((ae)r)o)|(((co)o)p)|(((in)f)o)|(((((mu)s)e)u)m)|(((na)m)e)))
length: 5 to *
-------------------- Examples --------------------
ex(0):  _@y.coop  j@f.coop  _@n.coop  d@a.4  D@f.aero  l@n.6  I@a.JG  4@p.name
ex(1):  Z.v@0.aero  t@d.name  v.2@z.Y.name  c@g.museum  0@q.museum  K.9@c.RXB
ex(2):  p.0@-M.w.B.name  1.-.6@Z.museum  IE@o.museum  Wf@nV.9.77  b.B.n9@y.7
ex(3):  z@B5.668  WC.Orj.GPS.l@E.info  nS7.Otj.tgB@5.aero
ex(5):  i.B.N-j5@jXYB.XLO.AQ.yL.zaN.G5MQy.info  XR5o@p6QKP.4M.5hk4.V.tb
ex(8):  ZMH1ga3_.AhS8p.FuhcSTj.s8UzU8b.JHLVi16@3KTqrHq0.emu8HKR.Q04B9.1SuGOplf.-.5X6ZDIG.o.g36Z0XF.MadJ6Orx.museum


#A: Robert Dugre
#D: Person's name (first, last, or both) in any letter case.  Although not perfect, this expression will filter out many incorrect name formats (especially numerics and invalid special characters).
#U: http://regexlib.com/REDetails.aspx?regexp_id=143

regexp: ^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*$
tree:   ([A-Za-z]+(([ ',-.][ A-Za-z])?[A-Za-z]*)*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  V  o  l  j  I  L  u  o  r  a  l  E  X  y  w  r  x  c  Y  a  z  z  a
ex(1):  g  so  O  r.Y  c  v  z  S  eC  X  v-S  v,k  N  H  r  l  O  w  dY  r.mh
ex(2):  M  KT'XA  yi  H'RDz  qn-h izA  ZC.Aj  rx sU-gv  TVy  sR  wO.usoaR
ex(3):  LNT dUeA  o lGCb'L  ghNy  WAI,Jj  gK  QS KBB RTi  QFP,zTgFM  bc
ex(5):  vaWMmMKBSUg  TsiuS  ms,iJpfJtlfql  ZXtJBrm  jUsF,zBXoB eL-Iwh.NKsBdFk
ex(8):  roq iCUuSJU-kojTg'HZYErTQ.Vbw  ibZRkMGKpUSSj


#A: Steve Valaitis
#U: http://regexlib.com/REDetails.aspx?regexp_id=144

regexp: ^((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$
tree:   (((((((((0?[1-9])|(1[012]))(:|.))[0-5])[0-9])(((:|.)[0-5])[0-9])?) ?)((AM)|(am)|(aM)|(Am)|(PM)|(pm)|(pM)|(Pm)))|((((((0?[0-9])|(1[0-9])|(2[0-3]))(:|.))[0-5])[0-9])(((:|.)[0-5])[0-9])?))
length: 4 to 11
-------------------- Examples --------------------
ex(0):  2:09aM  9:00AM  7.49PM  3:25  12:41PM  3:11  22:47  10:40pm  15:20
ex(1):  09:06:37  10:36 am  04:26:28aM  05.23pm  09:02 Am  9:06 aM  02:47AM
ex(2):  4.50  9.37:06Am  4:31:06pM  01.54.52  03.31am  11:57:41pm  10.38.14AM
ex(3):  23:09  22.35  23.17.14  04.05  6.43.51  2.36pm  09.20 AM  18.49.39
ex(5):  06.15 AM  20.12:16  03.18  09.33  1:13:33aM  12.56 am  12:18:34Am
ex(8):  10.34 am  10:13 PM  11.54:47 PM  11:07:10 pm  6:49  12:35.05AM


#A: Sonal Bordia
#D: Alphanumeric, hyphen apostrophe, comma dash spaces
#U: http://regexlib.com/REDetails.aspx?regexp_id=145

regexp: ^[a-zA-Z0-9\s.\-_']+$
tree:   [\t-\r '-.0-9A-Z_a-z]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  _  f  e  L  a  u  x  Y  L  3  k  V  P  l  C  2  9  z  L  Z  i  M  O  0
ex(1):  l  8  r  Y  5  t  q  N  w  E  E  C  c  '  i  5  l  B  I  a  x  c  u  m
ex(2):  I  ok  wn  Ym  Y  6  k  o'  l  G  j  9  v1  e  7  01  b  2  b  AR  b  b
ex(3):  k7  E  FLN  xrn  lr  9'y  6a  Pp  .L  UwF  Q  FX  Ns  l3A  hm  Oy  j 
ex(5):  t   qNp  8nx  jmL  w  x  c  i_'jo  anf  I  FM7U6  qu  9efe  6yvxU  T
ex(8):  lZ3 C.N  UUcQN  vx  v  BZ54vJ  tqm.8  nWf  OTKFC  Ayef _S9  wSA  OKwMr


#A: Brandon Luhring
#D: Modified URL RegExp that requires (http, https, ftp)://, A nice domain, and a decent file/folder string. Allows : after domain name, and these characters in the file/folder sring (letter, numbers, - . _ ? , ' / \ + & % $ # = ~). Blocks all other special characters-good for protecting against user input!
#U: http://regexlib.com/REDetails.aspx?regexp_id=146

regexp: ^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*$
tree:   (((((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)[-.0-9A-Za-z]+).)[A-Za-z]{2,3})(:[0-9A-Za-z]*)?)/?)[#-'+-9=?A-Z\_a-z~]*)
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://L.if  http://a.qg  http://W.xJ  http://e.Tl  https://E.pC
ex(1):  ftp://t.hap  ftp://M.KQ/'  http://G.pwi:N  https://5.ddI:k
ex(2):  https://23.INx  https://by.gxq:CSE-  ftp://Vt.AUl/L  https://1.rey:Z5/
ex(3):  https://-z.Iba  https://1.Y.rf  https://s.qM  https://Q.yH:Pf
ex(5):  http://3OYnM.In4/Q  http://dFG6.upXEyF,  http://vTNx.SVC/2
ex(8):  https://luIlMUj.dsj:0SJojMk/YhaK=QQ  http://HENwETK.xLt/0/tQ


#A: Marco Storti
#D: This expression validates dates in the ITALIAN d/m/y format from 1/1/1600 - 31/12/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00 since it could be any century (1900, 2000, 2100). Days and months must be 1 or 2 digits and may have leading zeros. Years must be 2 or 4 digit years. 4 digit years must be between 1600 and 9999. Date separator may be a slash (/), dash (-), or period (.)
Thanks to Michael Ash for US Version
#U: http://regexlib.com/REDetails.aspx?regexp_id=151

regexp: ^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$
ERROR:  rx: \1 (backref) unimplemented: in "^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"


#A: Jaime Borges
#D: This regular expression validates that the data entered is a number with a maximum of two integers and two decimals and a minimum of one integer or one decimal.
#U: http://regexlib.com/REDetails.aspx?regexp_id=152

regexp: ^\d{0,2}(\.\d{1,2})?$
tree:   ([0-9]{0,2}(.[0-9]{1,2})?)
length: 0 to 5
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  .27  .6  87  54.3        18.41  3.00  52  3    62  85.9  3.87  45.39
ex(2):  .4  5.19  63  84  6.16    .4  1.82  44.27  65    .91  03.36  55  36
ex(3):  2.2  7  3.1  .76  28  .19  4.6  65.77  68.0  6.1  .5  37.0  0.0  3.8  9
ex(5):  .25  6  2.09  59  0  4.6  0.1  12.9  .42  91.04  9.1    8.34  05.78  .5
ex(8):  2  9.6    2  0.50  5  43.3  0.1  0.90  3  2.52  78.05  44  7  55.13  77


#A: Michael Krutwig
#D: This Regex (can be used e.g. in PHP with eregi) will match any valid URL. Unlike the other exapmles here, it will NOT match a valid URL ending with a dot or bracket. This is important if you use this regex to find and "activate" Links in an Text
#U: http://regexlib.com/REDetails.aspx?regexp_id=153

regexp: ^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*[^\.\,\)\(\s]$
tree:   ((((((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)[-.0-9A-Za-z]+).)[A-Za-z]{2,3})(:[0-9A-Za-z]*)?)/?)[#-'+-9=?A-Z\_a-z~]*)[\x01-\b\x0e-\x1f!-'*+-/-\u007f])
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://L.if1  https://Q.Qx>  http://C.fxV  http://1.exA  https://r.gWC
ex(1):  ftp://m.BIlx  http://X.XMB/V*  ftp://q.MrI/p  https://t.uM:LbG
ex(2):  https://y.VFh:X8/+m  https://X.ybJ:/V  https://Oc.rFNU
ex(3):  http://vVM.Sbk:V  https://iHS.ji/O\\Ly  ftp://os.CnA/O
ex(5):  http://S.VW:ps  ftp://Zerbm.Dno:24k~1wp2d  ftp://D8.MMP:9sG7}
ex(8):  http://Cce.lj55=zg0  http://TFHo.RPk:JgfT2t/Xf3Z?


#A: Ted Rudyk
#D: This will grep for a valid MAC address , with colons seperating octets. It will ignore strings too short or long, or with invalid characters.  It will accept mixed case hexadecimal. Use extended grep.
#U: http://regexlib.com/REDetails.aspx?regexp_id=154

regexp: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$
tree:   ((([0-9A-Fa-f][0-9A-Fa-f]):){5}([0-9A-Fa-f][0-9A-Fa-f]))
length: 17 to 17
-------------------- Examples --------------------
ex(0):  5E:5e:91:5d:b1:70  AF:a9:Aa:DB:65:4D  93:E7:eB:bB:c9:eb
ex(1):  8B:df:4a:95:F2:AA  f3:1A:16:8B:E8:8C  1f:6F:CE:9F:26:BE
ex(2):  e5:7d:ad:9d:04:3c  ed:aF:B8:65:5f:51  e0:15:91:D4:ae:d5
ex(3):  8C:60:F7:18:eE:cD  fc:8c:e0:7A:c8:A0  2b:AF:4d:f6:cd:Af
ex(5):  fD:ED:Ae:2B:26:E5  8C:f6:7A:8E:CB:e1  06:7A:dE:ec:2A:B3
ex(8):  eb:cC:61:9B:b3:eB  63:B9:aC:19:fb:87  53:69:5a:2e:7A:Ef


#A: Samir AZZA
#D: Percentage with 3 number after comma.
#U: http://regexlib.com/REDetails.aspx?regexp_id=155

regexp: ^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$
ERROR:  rx: Embedded '$' unimplemented: in "^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$"


#A: Samir AZZA
#D: Correct French DateTime(DD/MM/YYYY OR DD/MM/YYYY HH:MM:SS)
#U: http://regexlib.com/REDetails.aspx?regexp_id=156

regexp: ^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$
ERROR:  rx: Embedded '$' unimplemented: in "^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$"


#A: Jeremy Samuel
#D: Password expresion that requires one lower case letter, one upper case letter, one digit, 6-13 length, and no spaces. This is merely an extension of a previously posted expression by Steven Smith (ssmith@aspalliance.com) . The no spaces is new.
#U: http://regexlib.com/REDetails.aspx?regexp_id=157

regexp: ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{4,8}$
ERROR:  rx: '(?...' unimplemented: in "^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{4,8}$"


#A: Nathan Pitts
#D: Host/Domain name validation for perl.
Should be combined with a check for
length <= 63 characters and that $2
is in a list of top-level domains.
#U: http://regexlib.com/REDetails.aspx?regexp_id=158

regexp: ^([a-zA-Z0-9][-a-zA-Z0-9]*[a-zA-Z0-9]\.)+([a-zA-Z0-9]{3,5})$
tree:   (((([0-9A-Za-z][-0-9A-Za-z]*)[0-9A-Za-z]).)+[0-9A-Za-z]{3,5})
length: 6 to *
-------------------- Examples --------------------
ex(0):  ZH.XLW  48.G3E  Tl.iEk  Y5.dAX  cK.wIG  uU.hbU  IE.O2s  F0.n7E  id.Pda
ex(1):  1Z.B1Pjr  1ne.DGv  Gyc.IrT  cR6.z48up  UB1.pdz  J4G.Wj6Rn  6KL.Ee8G1
ex(2):  w-9.Wz6Xo  ttZ.qxnL.h91h  LPl.i5JG9  mp.Ii.Q2P  ivk.nHhSD  7pC.8K.Hg22A
ex(3):  o9yr.Zu-XY.wgNS  TJvj.9en8  n6.ziY  Bh4.1S8p.ZgYL  I5.Nb1zT.gSX7.ROs2
ex(5):  v9.hJoLuq.o58t9Y.45foqZA.idtv  Orxj.SqrlM  oE.tv.UBu
ex(8):  x1UAt.siX.AYmc5r-W.iNGk59.C10


#A: Peter Friese
#D: This one matches all strings that do not contain the single quotation mark (').
#U: http://regexlib.com/REDetails.aspx?regexp_id=159

regexp: ^[^']*$
tree:   [\x01-&(-\u007f]*
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      r      K    P      e  H    /  >        8  +  I  $    s  8  )    X
ex(2):  zg  V      C  `\\  <=  q  }9  vx  5  f/    :1    g    H,    Vd  |I  u
ex(3):    9  0  4  r  @  <XN  .\\  %  y  n  oxm  P  8y  `<d      P    )  [1%
ex(5):    S  eKA  bBQh&    kETV  ~,  V+\\  A    ~    F*v_  9  T  w7?;Y  @QF1  h
ex(8):  +fF)ki w  y]:$Ow!  \\T_>t  37e]U3    f4\\$U    H+  sEU2zoh    EQZGO  0


#A: K Thompson
#D: This validates a number between 1 and 255. Could be modified to IP, or just to verify a number in a range.
#U: http://regexlib.com/REDetails.aspx?regexp_id=160

regexp: ^([1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$
tree:   ([1-9]|([1-9][0-9])|(1[0-9]{2})|((2[0-4])[0-9])|((25)[0-5]))
length: 1 to 3
-------------------- Examples --------------------
ex(0):  251  169  33  204  254  209  253  46  255  46  214  1  251  176  254
ex(1):  216  41  8  251  253  228  5  204  10  14  251  72  212  5  43  193
ex(2):  66  251  206  251  250  107  4  250  243  6  217  253  30  221  153
ex(3):  4  250  196  245  6  192  255  250  78  97  89  250  206  52  186  6
ex(5):  117  147  7  207  252  7  91  151  135  235  70  5  3  188  81  236
ex(8):  236  206  252  231  254  2  217  122  2  9  218  94  180  239  251  78


#A: Benjamin Gray
#D: Using other regular experssions from this page, combining others for email addresses, and mixing in my own ideas - I came up with this regular expression.  Can be used to validate input into a database.
#U: http://regexlib.com/REDetails.aspx?regexp_id=161

regexp: ^((https?|ftp)\://((\[?(\d{1,3}\.){3}\d{1,3}\]?)|(([-a-zA-Z0-9]+\.)+[a-zA-Z]{2,4}))(\:\d+)?(/[-a-zA-Z0-9._?,'+&%$#=~\\]+)*/?)$
tree:   ((((((((((((ht)t)p)s?)|((ft)p)):)/)/)(((([?([0-9]{1,3}.){3})[0-9]{1,3})]?)|(([-0-9A-Za-z]+.)+[A-Za-z]{2,4})))(:[0-9]+)?)(/[#-'+-.0-9=?A-Z\_a-z~]+)*)/?)
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://2.4.1.0  ftp://6.6.8.4  ftp://7.7.0.7  ftp://U.iB  http://g.IR
ex(1):  http://731.64.45.1:9/2/  http://[77.177.673.2/n  https://77.65.33.93]:3
ex(2):  https://y.YiH:5/Te/  ftp://[39.96.41.704]:5/7r/  http://O.Wk:42/&7/
ex(3):  ftp://02.95.85.174/t\\/  https://[871.6.414.78/CL/dS/  ftp://p.TDYS/
ex(5):  ftp://435.54.86.87:80730/s/  https://EVM8.aB.4bg.O.SdB/rQw4F/CIU/
ex(8):  ftp://[4.53.75.709]  ftp://e.xUB:0004229/


#A: Snikwad Kcirtap
#D: matches non-negative decimal floating points numbers less than 10
#U: http://regexlib.com/REDetails.aspx?regexp_id=162

regexp: ^[0-9](\.[0-9]+)?$
tree:   ([0-9](.[0-9]+)?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8.5  9  2  0.4  6.8  1.6  8.4  8  4.1  9  6.0  9.6  3.6  5.6  7  7.9
ex(2):  3.46  2  1  5  8.7  8.04  4  9.90  6.67  1  9  6.4  7.11  6  0  9  8.0
ex(3):  3  6.247  0.6  5.0  4  0  8.2  6  1  1  4  9  1.8  8.47  8  3.233  6  1
ex(5):  8.5  0.393  8  3  8.6777  4  9  0.917  9.25287  5.7  3  6.8  1  3.1815
ex(8):  9.33599509  8.3264857  7.098013  1.9634846  2  4.0523650  1  8


#A: Snikwad Kcirtap
#D: Dollar Amount
#U: http://regexlib.com/REDetails.aspx?regexp_id=163

regexp: (\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$
tree:   ((((([0-9]{1,3},)([0-9]{3},)*)[0-9]{3})(.[0-9]{1,3})?)|([0-9]{1,3}(.[0-9]{3})?))
length: 1 to *
-------------------- Examples --------------------
ex(0):  1,000  4,046  6,089  1,643  1,033  8  5  8,063  7  2  0,707  1,903
ex(1):  963  84  616  39,776.0  67,305,147  22,960.19  35,792,899.476  28
ex(2):  37.395  2,353,028.89  92.457  6.960  69  72  75,739.11  29  449,221,582
ex(3):  85.750  299  6  668,303,731,163.3  0  361.177  54,103,670.226  1
ex(5):  87,282,020,241  98,242,324.44  905,875,802,620.48
ex(8):  76.815  0.298  67,074,512.1  97  88.737  782.669


#A: Snikwad Kcirtap
#U: http://regexlib.com/REDetails.aspx?regexp_id=164

regexp: \$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9]?)?$
tree:   ((((($[0-9]?)[0-9]?)[0-9]?)(((,[0-9])[0-9])[0-9])*?)((.[0-9])[0-9]?)?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $
ex(1):  $2  $4.00  $8.9  $80  $18  $04.7  $7.1  $2.3  $  $1  $53.9  $38,840.7
ex(2):  $27,812.8  $.71  $67  $9.72  $9.42  $765  $.91  $033,952  $36  $67.22
ex(3):  $31  $762,026,006.14  $753.1  $15  $203,804,216,186  $91,760,404.9
ex(5):  $0,260,670,185,599.71  $.21  $74  $3.9  $578  $5.24
ex(8):  $0.36  $116,574,664,409,026,728,544,713,928  $


#A: yahnique barrett
#U: http://regexlib.com/REDetails.aspx?regexp_id=165

regexp: \$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9])?$
tree:   ((((($[0-9]?)[0-9]?)[0-9]?)(((,[0-9])[0-9])[0-9])*?)((.[0-9])[0-9])?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $
ex(1):  $2  $4.04  $8  $9.42  $1  $.15  $55.76  $.21  $6  $05,170.27  $3
ex(2):  $13,578,206.50  $4.11  $24,221,114.97  $03.59  $903  $  $51,576.79  $2
ex(3):  $5,725,670  $3,439,506  $490  $83,338,745,765  $6.13  $97  $224,694,183
ex(5):  $42,719  $49,014,841,596  $73.08  $44.06  $68,091,358,927,984
ex(8):  $34.02  $  $7,106,500,523,650,112,466,511.14  $.09


#A: martin devos
#D: this expression validates a date-time field in European d/m/y h:m:s format. It is a european variation of Michael Ash's date-validation expression in this library.
The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00
#U: http://regexlib.com/REDetails.aspx?regexp_id=166

regexp: ^((((31\/(0?[13578]|1[02]))|((29|30)\/(0?[1,3-9]|1[0-2])))\/(1[6-9]|[2-9]\d)?\d{2})|(29\/0?2\/(((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))|(0?[1-9]|1\d|2[0-8])\/((0?[1-9])|(1[0-2]))\/((1[6-9]|[2-9]\d)?\d{2})) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$
tree:   ((((((((((((((((31)/)((0?[13578])|(1[02])))|((((29)|(30))/)((0?[,13-9])|(1[012]))))/)((1[6-9])|([2-9][0-9]))?)[0-9]{2})|((((((29)/)0?)2)/)((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)))|((((((0?[1-9])|(1[0-9])|(2[0-8]))/)((0?[1-9])|(1[012])))/)(((1[6-9])|([2-9][0-9]))?[0-9]{2}))) )((20)|(21)|(22)|(23)|([01]?[0-9]))):)[0-5]?)[0-9]):)[0-5]?)[0-9])
length: 12 to 19
-------------------- Examples --------------------
ex(0):  31/10/27 21:3:1  31/1/45 4:4:2  29/2/04 20:9:4  22/11/43 1:0:3
ex(1):  11/09/20 20:09:4  31/3/1732 07:01:09  31/12/1880 21:48:00
ex(2):  29/11/44 21:32:1  31/10/1830 23:4:58  29/02/1600 14:32:7
ex(3):  29/2/1600 23:6:9  31/08/8988 0:6:1  19/9/1626 21:1:35
ex(5):  29/2/04 23:0:31  31/12/2027 23:8:11  29/2/5200 20:11:7
ex(8):  29/01/5607 20:9:0  30/7/89 23:33:6  31/5/83 20:1:1  29/02/2800 23:06:52


#A: Zrekam makerZ
#D: Easy expression that checks for valid email addresses.
#U: http://regexlib.com/REDetails.aspx?regexp_id=167

regexp: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
tree:   (((([-.0-9A-Z_a-z]+@)[-.0-9A-Z_a-z]+).)[A-Za-z]{2,5})
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@i.Wx  q@a.vo  3@W.yl  n@W.QS  e@G.Uw  D@j.HA  L@N.fe  c@E.TH  k@1.jp
ex(1):  e@K.LDBJ  W@e.yCIzx  A@..DS  A@G.GI  h@I.poLU  e@r.Ey  W@F.Pk  y@U.ADG
ex(2):  f@Ce.Kd  up@m5.Yv  F6@o.KXyp  q@4I.OAYU  o@UY.eJM  x@F.eZdS  H@a.ETtR
ex(3):  q@vJ.jJM  8dl@KGV.NAp  L@..vTe  qlQ@K.tNtx  -@Kw.xb  _@Zc0.QeuYz
ex(5):  3@Lhs.jKsb  PGyE9@6xZoZ.HYrP  OXk@_.PKSy  596B@c.FcT  5r@g.mOj
ex(8):  pqZ6sd@74_Jw.WEuL  xTmG@75ShfrI.IDw  QPS94b@Pr.Ed  ptko.hXY@km.THrE


#A: Greg Burns
#D: Validate “Time” Data to Work with SQL Server
This is a fix (I hope) for a problem with the original expression.  It originally allowed any combination of am or pm. For example: ma, aa, mm, mp, etc.
#U: http://regexlib.com/REDetails.aspx?regexp_id=172

regexp: (^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)
ERROR:  rx: Embedded '^' unimplemented: in "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)"


#A: Michael Trefry
#D: This regular expression validates a number NOT 0, with no more than 5 places ahead and 3 places behind the decimal point.
#U: http://regexlib.com/REDetails.aspx?regexp_id=173

regexp: (?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,3})?$
ERROR:  rx: '(?...' unimplemented: in "(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,3})?$"


#A: Thor Larholm
#D: Most email validation regexps are outdated and ignore the fact that domain names can contain any foreign character these days, as well as the fact that anything before @ is acceptable. The only roman alphabet restriction is in the TLD, which for a long time has been more than 2 or 3 chars (.museum, .aero, .info). The only dot restriction is that . cannot be placed directly after @.
This pattern captures any valid, reallife email adress.
#U: http://regexlib.com/REDetails.aspx?regexp_id=174

regexp: ^.+@[^\.].*\.[a-z]{2,}$
tree:   ((((([\x01-\u007f]+@)[\x01--/-\u007f])[\x01-\u007f]*).)[a-z]{2,})
length: 6 to *
-------------------- Examples --------------------
ex(0):  V@R.fm  '@f.sz  $@(.py  |@y.go  3@E.kp  K@`.xv  c@p.px  N@_.gi  Z@<.hx
ex(1):  K@b.rv  ]@B .au  7@L.em  w@R@.rr  L@~.hd  y@yK.tf  $@n.qf  4@Q\".eb
ex(2):  z*@SA:.qtr  C@Jz.ia  z@N_\\.sy  fv@<9.upf  b@GW).ph   -@f\".svo
ex(3):  LM-@p.ytf  i@i_73.cynh  R_D@hfQ|.mvq  N@8pBe.el  C@K.nmd  $8@p]PA.xcb
ex(5):  zIQ@17Js7T.eel  keY@_z~.jbe  sce^u@IN.uc  2@M.htjl  -/,y@~$FG.mzro
ex(8):  a@+.ixrzcqj  V@4wK#Loj).gsb  C`Tfi;2)@Cp.cztfbiuf  {{?^[t=@gJw.cafskw


#A: john hamman
#D: This will match results in a template situation. For example:
template reads
Dear @@Name@@,
....
would become
Dear John,
If you dont want to use the @@ change the @ to what ever characters you want.
#U: http://regexlib.com/REDetails.aspx?regexp_id=175

regexp: @{2}((\S)+)@{2}
tree:   ((@{2}[\x01-\b\x0e-\x1f!-\u007f]+)@{2})
length: 5 to *
-------------------- Examples --------------------
ex(0):  @@V@@  @@:@@  @@,@@  @@T@@  @@D@@  @@i@@  @@)@@  @@l@@  @@?@@  @@,@@
ex(1):  @@?@@  @@B@@  @@E@@  @@?@@  @@P@@  @@2@@  @@T@@  @@R@@  @@_@@  @@t@@
ex(2):  @@>[@@  @@_@@  @@q?@@  @@@_@@  @@#T@@  @@B@@  @@j;@@  @@''@@  @@'+@@
ex(3):  @@;@E@@  @@`@@  @@Ai@@  @@v@@  @@DDJ@@  @@J@@  @@!@@  @@E>n@@  @@ogd@@
ex(5):  @@([@@  @@'bY8[@@  @@`@@  @@Ei^@@  @@\\')`#@@  @@5J@@  @@|V@@
ex(8):  @@hyiYli3@@  @@L6;[3*.@@  @@p>5vh~@@  @@fW7x!9U@@  @@X!f[G@@


#A: Erik Pettersson
#D: A regular expression that matches numbers. Integers or decimal numbers with or without the exponential form.
#U: http://regexlib.com/REDetails.aspx?regexp_id=185

regexp: ^[+-]?([0-9]*\.?[0-9]+|[0-9]+\.?[0-9]*)([eE][+-]?[0-9]+)?$
tree:   (([+-]?((([0-9]*.?)[0-9]+)|(([0-9]+.?)[0-9]*)))(([Ee][+-]?)[0-9]+)?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  4  2  6  2  3  2  8  0  4  5  2  6  0  1  8  7  9  9  0  3  3  3  8
ex(1):  +2e+4  +6  +0.7  -2.4  4E-4  -7.8e4  -8.4  6.  20e6  -4  -2e+3  6e7
ex(2):  .41e-6  29  5.06e+8  079E67  112  -5  +169  402e+53  -14  7.21E8  -.2
ex(3):  331.8  76.4e1  +2330e6  590.  2.573E+2  -81  855.  -740.03e-2  6.64e6
ex(5):  8951759312E+5245  -0.922e-194  -57.5875E31501  72854.005  630253
ex(8):  51488206535e48  093.758026E-65860242  7.1019E+9  900937.9942  -207987


#A: Paul Miller
#U: http://regexlib.com/REDetails.aspx?regexp_id=186

regexp: ^([1-zA-Z0-1@.\s]{1,255})$
tree:   [\t-\r .0-z]{1,255}
length: 1 to 255
-------------------- Examples --------------------
ex(0):  `  Y  C  2  o  6  a  3  P  r  T  J  z  P  M  ?  \\  7  7  S  ^  q  K  I
ex(1):  q  L  I  3  n  _  h  I  9  8  S  R  0  =  b  <  0  W  9  t  J  @  A  h
ex(2):  C  ao  n[  ^z  uM  N  `o  cn  :  <3  b  J  ?7  XU  4V  go  Bi  NA  ??
ex(3):  ^s_  E^  K  pjs  ^P8  8  w  8tn  qM=  Vy  Bms  0  w9=  rCK  zna  p  o1
ex(5):  0I;  wrJ  >bQ?8  ^:G  drx0X  2.:Oo  ^  SL.6  1h  x  [J  8  jq  G3S3W
ex(8):  ^5UL02  vi  B8aXl  q6M  TGK[AVZ  YdhH  ns=rz5z:  ;q2  2h1u  8D_Gqg4


#A: lynn eriksen
#D: this works with ASP.net regular expression valiadtors, ecma script compliant
#U: http://regexlib.com/REDetails.aspx?regexp_id=187

regexp: ^(\d{5}-\d{4}|\d{5})$
tree:   ((([0-9]{5}-)[0-9]{4})|[0-9]{5})
length: 5 to 10
-------------------- Examples --------------------
ex(0):  10004-7351  96503-8377  78053-1451  36946  81329  82473-6470
ex(1):  32877  05147  13629-5584  56271  99120-9871  95974  44138  04280  35302
ex(2):  99607-5992  25090  43931-4581  75160-1484  28754-0748  33066
ex(3):  50543  64857  80540  13150-1262  07255  72942  06237-1822  60920-1164
ex(5):  31577  47583-3456  48438  34906  86756-7130  62926-3780  98977
ex(8):  77030  46649  68591  17201  94908  55587-9610  45563  56319  53126-4551


#A: Fernando Cerqueira
#D: Validar o do CEP Brasileiro com 8 posicoes podendo usar
mascara . e - ou somente numeros
#U: http://regexlib.com/REDetails.aspx?regexp_id=188

regexp: (^\d{5}-\d{3}|^\d{2}.\d{3}-\d{3}|\d{8})
ERROR:  rx: Embedded '^' unimplemented: in "(^\d{5}-\d{3}|^\d{2}.\d{3}-\d{3}|\d{8})"


#A: Michael Ash
#D: This expression validates dates in the y/m/d format from 1600/1/1 - 9999/12/31. Follows the same validation rules for dates as my other date validator (m/d/y format) located in this library.
#T: yy/mm/dd Date
#U: http://regexlib.com/REDetails.aspx?regexp_id=190

regexp: ^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$
ERROR:  rx: \1 (backref) unimplemented: in "^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$"


#A: asdf asdfa
#D: Validates a file path on your local drive or a network drive. A similar one was written by Vinod Kumar but it does not reject asterisks in the path. Moreover, his did not work with RegularExpressionValidators. This one does.
#U: http://regexlib.com/REDetails.aspx?regexp_id=191

regexp: ^([a-zA-Z]\:|\\)\\([^\\]+\\)*[^\/:*?"<>|]+\.htm(l)?$
tree:   (((((((((([A-Za-z]:)|\)\)([\x01-[]-\u007f]+\)*)[\x01-!#-)+-.0-9;=@-{}~\u007f]+).)h)t)m)l?)
length: 7 to *
-------------------- Examples --------------------
ex(0):  L:\\n.htm  i:\\h.htm  P:\\x.htm  w:\\-.htm  \\\\f.htm  \\\\y.htm
ex(1):  T:\\4\\+.htm  k:\\>\\e.htm  \\\\T.htm  \\\\ .htm  C:\\%.htm  \\\\4.html
ex(2):  \\\\L\\-.html  f:\\4C\\1.html  c:\\?\\?G\\Kp.htm  \\\\LL\\+.html
ex(3):  \\\\R.html  \\\\&h\\m\\ed[.htm  h:\\,\\R.htm  \\\\4\\[\\%A_\\-]].htm
ex(5):  \\\\N>\\Kn?.4\\%6A.html  \\\\n\\&g\\J\\u.html  T:\\,T\\.lZ\\v\\5.html
ex(8):  l:\\30?P\\+2h.b>\\a]T\\fE(\\^@QFyhS.html


#A: J. Washam
#D: Matches 99.99% of e-mail addresses (excludes IP e-mails, which are rarely used).  The {2,7} at the end leaves space for top level domains as short as .ca but leaves room for new ones like .museum, etc.  The ?: notation is a perl non-capturing notation, and can be removed safely for non-perl-compatible languages.  See also email.
#U: http://regexlib.com/REDetails.aspx?regexp_id=192

regexp: ^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$
tree:   (((([-0-9A-Z_a-z]+(.[-0-9A-Z_a-z]+)*)@)([-0-9A-Z_a-z]+.)+)[A-Za-z]{2,7})
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@y.jz  V@Q.HS  a@Z.Gv  r@B.BW  z@g.lw  3@b.Yi  U@5.Rh  q@P.pb  6@i.ez
ex(1):  Z@C.ermba  A.S@v.JTdD  k@r.dyhK  l@H.XyXYo  x.P@y.NA  X.1@a.MfBKx
ex(2):  Y.q6.t6@vp.7.oSFYC  g@Q-.z.flIN  eK.1@a.YuxZ  7p.R8@q.sK.fCEX
ex(3):  Jl.I.9@vB.mlx  amD.ZgB.n8.N@S2S.Hktm  Q@u.Z.VC.OBm  Re@bUk.UYvop
ex(5):  tbe.Tl.jd.SJBTr.FN5B@Q1Ji5.9l9.E.vC.QSlPDj
ex(8):  4Kz9g.nRE@3DY.PQ.PzwwsXJ.FzN1DG.qLYNSY


#A: Mike T Spike
#D: Checks for Date in the typical MySQL DB Format. Not mutch but simple to for converting to German date format:
$date = "2003-12-03";
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs))
{
echo "$regs[3].$regs[2].$regs[1]"; // prints 03.12.2003
}
#U: http://regexlib.com/REDetails.aspx?regexp_id=193

regexp: ([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})
tree:   (((([0-9]{4}-)[0-9]{1,2})-)[0-9]{1,2})
length: 8 to 10
-------------------- Examples --------------------
ex(0):  7016-8-2  7810-0-9  4434-0-5  4906-6-0  1817-0-5  1985-7-8  6248-1-9
ex(1):  6221-00-4  6322-1-0  0841-2-17  0791-1-8  8788-4-61  1613-8-21
ex(2):  1384-82-82  3530-2-3  6186-3-8  3265-21-15  9069-02-84  3137-6-7
ex(3):  7064-9-6  9672-24-83  3066-7-98  2495-26-33  5096-11-70  5857-25-8
ex(5):  6500-5-60  6044-88-7  2098-58-80  9355-3-2  9182-3-1  1131-54-86
ex(8):  2481-47-01  3055-5-60  8772-4-53  6620-7-63  9378-5-5  4418-0-41


#A: Andrew Polshaw
#D: This matches an IP address, putting each number in its own group that can be retrieved by number. If you do not care about capturing the numbers, then you can make this shorter by putting everything after ^ until immediately after the first \. in a group ( ) with a {3} after it. Then put the number matching regex in once more.
It only permits numbers in the range 0-255.
#U: http://regexlib.com/REDetails.aspx?regexp_id=194

regexp: ^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$
tree:   ((((((([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5])).)([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5]))).)([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5]))).)([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5])))
length: 7 to 15
-------------------- Examples --------------------
ex(0):  204.0.163.204  239.224.125.228  3.3.235.205  3.249.252.3  0.0.0.1
ex(1):  246.254.8.250  9.3.5.105  138.5.247.244  219.207.168.5  182.251.1.97
ex(2):  131.227.255.217  124.231.6.178  4.208.238.250  217.252.226.202
ex(3):  105.201.213.110  251.5.9.193  2.1.254.188  252.8.253.201  112.251.242.8
ex(5):  4.243.60.243  211.250.159.127  250.250.203.107  98.152.28.244
ex(8):  232.7.105.255  00.135.98.118  119.243.8.7  193.1.105.180  255.75.150.6


#A: Tom Persing
#D: Many currency expresssions allow leading zeros, thus $01.40 passes thru them.  This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and .0 Keywords: money dollar currency
#U: http://regexlib.com/REDetails.aspx?regexp_id=196

regexp: ^\$?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$
tree:   ($?(((([1-9][0-9]{0,2})(,[0-9]{3})*)(.[0-9]{0,2})?)|(([1-9][0-9]*)(.[0-9]{0,2})?)|(0(.[0-9]{0,2})?)|(.[0-9]{1,2})?))
length: 0 to *
-------------------- Examples --------------------
ex(0):  0  0  2      5  0  5  5  4  0  5  0    8  0  1  0  9  6    9  2  7  3
ex(1):  8.8  0.  0  $7  $  36,205.72  0.4  $84.  542,482  $.1  0.3  $57.8
ex(2):  $0  .41  $0  67,751,587  22  $.65  $3.21    9.7  $  .2  $88.2  0  71.28
ex(3):  $69.  0  1  .41  30,204.82  0  $0  .03  $  2  3331.8  9430  765  0.71
ex(5):  $0.7    0    $0.2  $  $0  $  1,224,443.9    $4917.8    $496941  $
ex(8):  $845979876.12  $  $4,974,857,466,440,902,672,854,471.22


#A: Jörg Maag
#D: This expression validates a date field in the European DD-MM-YYYY format. Days are validate for the given month and year. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=197

regexp: ^(((((0[1-9])|(1\d)|(2[0-8]))-((0[1-9])|(1[0-2])))|((31-((0[13578])|(1[02])))|((29|30)-((0[1,3-9])|(1[0-2])))))-((20[0-9][0-9]))|(29-02-20(([02468][048])|([13579][26]))))$
tree:   ((((((((0[1-9])|(1[0-9])|(2[0-8]))-)((0[1-9])|(1[012])))|(((31)-)((0[13578])|(1[02])))|((((29)|(30))-)((0[,13-9])|(1[012]))))-)(((20)[0-9])[0-9]))|((((((((29)-)0)2)-)2)0)(([02468][048])|([13579][26]))))
length: 10 to 10
-------------------- Examples --------------------
ex(0):  12-10-2005  30-04-2027  31-12-2044  29-02-2044  31-08-2048  06-10-2011
ex(1):  29-04-2067  03-02-2040  29-01-2073  29-02-2020  29-02-2032  04-06-2001
ex(2):  29-02-2016  29-02-2076  29-02-2044  31-08-2025  29-02-2076  09-06-2012
ex(3):  29-02-2024  25-05-2079  29-02-2028  05-11-2082  29-02-2052  29-02-2040
ex(5):  15-08-2097  31-12-2077  29-02-2012  29-02-2096  31-05-2095  30-08-2067
ex(8):  29-02-2012  29-02-2020  29-02-2024  30-12-2091  31-12-2065  29-02-2084


#A: Hugues Gauthier
#D: This is permit all decimal number, exclude all alphanumeric caracter
#U: http://regexlib.com/REDetails.aspx?regexp_id=198

regexp: ^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$
tree:   (([0-9]*[0-9])(()|(([\x01-\u007f][0-9]*)[0-9])|((,[0-9]*)[0-9]))?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1s60  68  94,9  20]77  05  4P0  684  2  59  25  75q02  3  7,9  87
ex(2):  26,29  449  3  98  069  4  723%87  006  941  222  933  47  0.509  631
ex(3):  44  15  88,4  4(809  8,0817  926,3  41  0824  7757  481  8  7  2810Z8
ex(5):  171j7379  353695  79251  5,111881  1  96616  9,077520  74  107677902  5
ex(8):  08554846  71g179649  03315223m41873543  0801  02193960  2905232


#A: Fernando Cerqueira
#D: Valida os todos Estados Brasileiros (UF)
e o distrito Federal
#U: http://regexlib.com/REDetails.aspx?regexp_id=199

regexp: ^(ac|AC|al|AL|am|AM|ap|AP|ba|BA|ce|CE|df|DF|es|ES|go|GO|ma|MA|mg|MG|ms|MS|mt|MT|pa|PA|pb|PB|pe|PE|pi|PI|pr|PR|rj|RJ|rn|RN|ro|RO|rr|RR|rs|RS|sc|SC|se|SE|sp|SP|to|TO)$
tree:   ((ac)|(AC)|(al)|(AL)|(am)|(AM)|(ap)|(AP)|(ba)|(BA)|(ce)|(CE)|(df)|(DF)|(es)|(ES)|(go)|(GO)|(ma)|(MA)|(mg)|(MG)|(ms)|(MS)|(mt)|(MT)|(pa)|(PA)|(pb)|(PB)|(pe)|(PE)|(pi)|(PI)|(pr)|(PR)|(rj)|(RJ)|(rn)|(RN)|(ro)|(RO)|(rr)|(RR)|(rs)|(RS)|(sc)|(SC)|(se)|(SE)|(sp)|(SP)|(to)|(TO))
length: 2 to 2
-------------------- Examples --------------------
ex(0):  ma  ma  DF  pb  GO  go  AP  GO  rj  pe  mt  CE  PB  df  mt  rr  SC  rn
ex(1):  ac  RO  pe  ba  rr  CE  ac  am  rj  RR  go  MG  pa  RO  go  rs  MA  al
ex(2):  AM  ac  RJ  df  se  sp  SE  RJ  pe  pe  df  ES  rn  pr  ap  sc  PE  se
ex(3):  rn  es  sp  df  MS  ES  sp  ro  GO  RR  rn  PR  SE  AL  se  pa  PA  pb
ex(5):  PE  ro  RN  BA  rj  mt  mg  AP  pb  PI  mg  pi  ma  mt  pa  rs  ba  sc
ex(8):  pe  RN  ro  se  RJ  AC  PR  MS  RO  ma  SP  AL  pb  to  sp  go  ce  ap


#A: Henk de Vries
#D: Checks whether the string specified is in the same format as the UK postcode format defined on:
http://www.magma.ca/~djcl/postcd.txt
It allows:
A = Letter
N = Number
AN NAA, ANA NAA, ANN NAA, AAN NAA, AAA NAA (rare), AANN NAA, AANA NAA
It gives the option to have the two parts of the uk postcode to be separated by a space or a hyphen.
(restriction is set to all-capitals)
#U: http://regexlib.com/REDetails.aspx?regexp_id=200

regexp: ^([A-Z]{1,2}[0-9]{1,2}|[A-Z]{3}|[A-Z]{1,2}[0-9][A-Z])( |-)[0-9][A-Z]{2}
tree:   ((((([A-Z]{1,2}[0-9]{1,2})|[A-Z]{3}|(([A-Z]{1,2}[0-9])[A-Z]))( |-))[0-9])[A-Z]{2})
length: 6 to 8
-------------------- Examples --------------------
ex(0):  D3-8NM  D6 0IX  Q1 8DL  GEO 9XX  J6 5NA  E1 5LI  V9-2WV  D9-4NQ
ex(1):  AHU-8AI  KKW-9PZ  EC42-9SR  XIY 7TO  CD5Q 1DM  R7U-4NF  JO1J-4ES
ex(2):  T70 1AT  JCK-2KH  AUZ-0BP  DH3E 0EQ  YCJ-9IA  LJ3X 0BN  VCE 3WK
ex(3):  MYZ 0EA  W54-0HO  OW5H-3LR  RN0-0RI  E08 8IJ  ONO-6XT  HJO 8VE  U60 9NA
ex(5):  K3B 9WH  V0E 0DH  HAL 1LR  DAS 8DB  US9-9BY  Q9 8CY  WC9R-6QT  MD2G 2TB
ex(8):  N6-3KZ  U9I-8QD  N5S 8OB  F2 7QB  BP56-6RI  XNO 4KY  B2I 2PQ  Y1W-8YE


#A: Henk de Vries
#D: Postcode for Belgium
#U: http://regexlib.com/REDetails.aspx?regexp_id=201

regexp: ^[1-9]{1}[0-9]{3}$
tree:   ([1-9][0-9]{3})
length: 4 to 4
-------------------- Examples --------------------
ex(0):  7243  4402  6770  7180  1051  8053  1601  9227  6857  8479  4548  9470
ex(1):  7852  2306  1111  4853  1859  5926  1695  7988  5271  9816  9408  7470
ex(2):  5750  6770  5839  3381  7765  2688  5046  4448  2201  8855  9469  4974
ex(3):  4228  7074  8641  8425  9913  5314  3993  2479  2377  5103  6090  2348
ex(5):  5456  3108  2863  7268  4258  8011  6321  3599  4917  7066  7684  8334
ex(8):  4293  4722  4540  3124  3056  6122  9671  8793  4863  8877  9466  9579


#A: Henk de Vries
#D: Postcode for Germany
#U: http://regexlib.com/REDetails.aspx?regexp_id=202

regexp: ^[A-Z]{1}( |-)?[1-9]{1}[0-9]{3}$
tree:   ((([A-Z]( |-)?)[1-9])[0-9]{3})
length: 5 to 6
-------------------- Examples --------------------
ex(0):  J6503  Y2892  Q2549  N1458  X9330  F8248  R9470  K6941  X1217  M6784
ex(1):  K6116  B6456  Y 2364  J 1560  G-3242  V7387  P3126  J5637  K6743
ex(2):  S8601  U-1688  U5818  O1858  J9506  J2615  O5098  F-1952  W5564  D-2650
ex(3):  Y1809  T7186  J-7979  G 5847  P5486  J7521  F7867  J4946  T2515  Y7802
ex(5):  D 8201  R 9877  A2172  F 3970  B-2686  Y-1866  R4196  Q8185  U-6660
ex(8):  F4361  Y 4437  Y4547  J-7911  O-9547  C-9888  K9801  N 8299  F-4914


#A: Henk de Vries
#D: Postcode check for France (including colonies)
-----
Edited; sorry I didn't know about Corsica, no offense :)
#U: http://regexlib.com/REDetails.aspx?regexp_id=203

regexp: ^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$
tree:   (((F-)?((2[AB|])|[0-9]{2}))[0-9]{3})
length: 5 to 7
-------------------- Examples --------------------
ex(0):  2B212  66684  32571  2A045  2B768  05314  2A876  2B519  2A019  2A848
ex(1):  78206  F-20667  F-27164  F-2B751  2B978  F-2|739  52423  56271  89474
ex(2):  2A691  F-2A441  2A381  F-2A102  2|877  2|043  F-33874  F-31281  2B139
ex(3):  F-2|509  F-2|264  26677  94303  F-17932  F-2B438  85398  F-43612
ex(5):  F-24952  F-43350  F-2A297  93775  49077  F-50126  2A506  41562  2|195
ex(8):  2A209  2A060  F-2A266  2A963  2B492  F-85793  F-06387  13208  2B659


#A: Henk de Vries
#D: Postcode check for Italy (including possible Vatican/Italy indications)
#U: http://regexlib.com/REDetails.aspx?regexp_id=204

regexp: ^(V-|I-)?[0-9]{4}$
tree:   (((V-)|(I-))?[0-9]{4})
length: 4 to 6
-------------------- Examples --------------------
ex(0):  7016  8278  1009  4434  0549  0660  1817  0519  8578  6248  1915  7820
ex(1):  I-6776  I-1649  3530  V-3773  V-9524  8407  I-9289  I-9271  I-2598
ex(2):  9721  7945  8350  V-8840  2338  8177  V-6098  7599  6250  V-3938  3842
ex(3):  3885  V-6000  I-6941  4366  6418  3909  I-3359  V-1639  V-8436  V-5973
ex(5):  3670  I-3265  V-1498  4456  6195  V-6237  1980  I-1429  V-6851  1864
ex(8):  8063  0498  V-1830  I-4563  V-6769  8680  7332  3803  2772  V-7351


#A: Henk de Vries
#D: Postcode check for Netherlands
#U: http://regexlib.com/REDetails.aspx?regexp_id=205

regexp: ^[1-9]{1}[0-9]{3} ?[A-Z]{2}$
tree:   ((([1-9][0-9]{3}) ?)[A-Z]{2})
length: 6 to 7
-------------------- Examples --------------------
ex(0):  7243UY  2892QQ  6215RQ  4070XN  8247TG  1450JK  8244GO  1859VA  1118BL
ex(1):  3772 JH  3877UT  8261 KK  6599WM  4641XS  8969 RI  5380FV  4124VF
ex(2):  9597VE  8771 KO  1447 IC  5038EM  2092 YW  7648TX  1026 CK  8424XW
ex(3):  9437EP  7451 YE  5159RH  8197DZ  5733PL  7490RK  8504 VR  5510 CI
ex(5):  6409ZU  2405 LV  3746JD  4493DF  2430 EA  4348BD  3668 ZD  5038 IZ
ex(8):  7875KM  9220 PC  1401CB  9728QE  6609ZF  5739 RB  8628 BF  7826 EK


#A: Henk de Vries
#D: Postcode check for Spain
#U: http://regexlib.com/REDetails.aspx?regexp_id=206

regexp: ^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$
tree:   (([1-9]{2}|([0-9][1-9])|([1-9][0-9]))[0-9]{3})
length: 5 to 5
-------------------- Examples --------------------
ex(0):  14434  27983  63954  47884  71512  65764  47344  38482  57364  20021
ex(1):  48164  46519  12928  65237  79627  86116  73902  80066  53213  94775
ex(2):  23393  15631  68404  99722  21374  81184  01922  38823  50862  88407
ex(3):  66909  23929  11839  12974  85419  65144  91600  46725  39630  95200
ex(5):  58326  18232  79573  98113  95775  74905  47689  42934  37200  79380
ex(8):  64754  59989  97091  99048  24695  11790  37098  72414  66949  38279


#A: Serafeim Zanikolas
#D: matches any day of
month 0?1-31
#U: http://regexlib.com/REDetails.aspx?regexp_id=209

regexp: ^((0?[1-9])|((1|2)[0-9])|30|31)$
tree:   ((0?[1-9])|((1|2)[0-9])|(30)|(31))
length: 1 to 2
-------------------- Examples --------------------
ex(0):  30  30  12  5  30  5  13  30  31  31  2  4  30  31  31  9  17  30  5  3
ex(1):  30  30  30  1  31  5  31  31  4  31  27  30  30  16  16  31  01  31  7
ex(2):  30  31  8  11  30  5  7  31  30  31  28  02  7  30  31  01  31  30  01
ex(3):  9  31  30  9  5  2  31  02  19  30  18  31  04  31  31  08  31  31  23
ex(5):  30  9  30  30  25  31  30  27  30  30  4  30  17  31  31  30  30  30
ex(8):  31  31  03  31  31  08  9  27  31  1  31  30  05  30  6  30  14  29  03


#A: Lewis Moten
#D: Removes pesky comments and commented javascript from HTML
#U: http://regexlib.com/REDetails.aspx?regexp_id=210

regexp: <!--[\s\S]*?-->
ERROR:  rx: prefer-fewer '?' unimplemented: in "<!--[\s\S]*?-->"


#A: Lewis Moten
#D: Finds any HTML tag and sub-matches properties weather it has an apposterphee, quote, or no quote/apposterphee
#U: http://regexlib.com/REDetails.aspx?regexp_id=211

regexp: </?(\w+)(\s+\w+=(\w+|"[^"]*"|'[^']*'))*>
tree:   ((((</?)[0-9A-Z_a-z]+)((([\t-\r ]+[0-9A-Z_a-z]+)=)([0-9A-Z_a-z]+|(("[\x01-!#-\u007f]*)")|(('[\x01-&(-\u007f]*)')))*)>)
length: 3 to *
-------------------- Examples --------------------
ex(0):  <_>  <p>  <B>  <O>  <c>  <V>  <4>  <H>  <c>  <c>  <w>  <j>  <s>  <M>
ex(1):  <5>  <P 9=''>  </E>  <X>  </v I='V'>  </l v=\"^\">  </7 t=3>  <S>  </j>
ex(2):  <95 nr=sh l=XA>  <8 Ha=D  N='7'>  </CW x=''>  <A>  <We  Ex=5 z=m>
ex(3):  <g  Y7='uIL'  9=O>  </XkI   RjX=\":5\\\"  h=':S'   Fv=''>
ex(5):  </2eqf  Q2=ou     Os=\"h7\"    8='o)'>  </0   k='CKm^@'>
ex(8):  </r3  y=T     yc=\" e\"      SVWLG=k    y=tDXbZs3e    bh=\"x6\"  nu89=vwRqB5O       KPJgUp=fl4nq_08   ycL=pS0El>


#A: Lewis Moten
#D: Validates a GUID with and without brackets. 8,4,4,4,12 hex characters seperated by dashes.
#U: http://regexlib.com/REDetails.aspx?regexp_id=212

regexp: ^\{?[a-fA-F\d]{8}-([a-fA-F\d]{4}-){3}[a-fA-F\d]{12}\}?$
tree:   ((((({?[0-9A-Fa-f]{8})-)([0-9A-Fa-f]{4}-){3})[0-9A-Fa-f]{12})}?)
length: 36 to 38
-------------------- Examples --------------------
ex(0):  5E5e915d-b170-AFa9-AaDB-654D93E7eBbB
ex(1):  Ab426Fae-1f8d-fB1b-b171-2e31f0E1E1D1
ex(2):  68cCB99e-CbFb-C123-2B66-ef07eaDA7e2F
ex(3):  {5225B138-0204-1B94-Ec09-e8AC6Fd57fdB}
ex(5):  9b2F58b2-Ed1D-A90a-d13B-7AB3ae4d8b83}
ex(8):  {D9A57F06-989B-75E8-9e3B-A576bDdd0BE9}


#A: lawson law
#U: http://regexlib.com/REDetails.aspx?regexp_id=213

regexp: ^([a-zA-Z0-9@*#]{8,15})$
tree:   [#*0-9@-Za-z]{8,15}
length: 8 to 15
-------------------- Examples --------------------
ex(0):  Zi#ewQAp  Jfh#7edB  EgxVHZge  vBx0K4sT  DMJvjXCT  qmTmvx8h  xR111DKJ
ex(1):  rNsyTACC  VZsxUqIq  H63*uiFV  omUzdjtX  eG5XQuoq  @MByG2i0  dB2F7ktl
ex(2):  0HpbkfVZ  ky@S#88N  G434dn6U  5A4U94MA  pM5VeCqG  HlCVw@Eu  hlPcLYTA
ex(3):  A6*U6j29  3czrR#mF  ewO79ff0  dRxS4MGx  90cdLh#3  Kl94hcdN  MxNPoVWw
ex(5):  seejJDMu  ty04g5ZJ  CyRbPVi9  Hburbkl1  b92Q*rzE  87XACTBo  aIcAZ#HM
ex(8):  5BVAkgQ3  7X8pTj5S  UJrRomBA  tLd7TTcN  mcxHgSlB  uq45#V06  PHo7ZB5P


#A: Al Val
#D: Regular Expression that validate a phone number inside israel.
#U: http://regexlib.com/REDetails.aspx?regexp_id=214

regexp: ^0[23489]{1}(\-)?[^0\D]{1}\d{6}$
tree:   ((((0[23489])-?)[1-9])[0-9]{6})
length: 9 to 10
-------------------- Examples --------------------
ex(0):  042122045  096770715  093054906  036145154  024734468  092481915
ex(1):  094982929  04-7114419  08-7707911  032071169  02-5271995  02-8006697
ex(2):  04-3877003  08-9876945  086816298  044984480  048137601  04-1796907
ex(3):  041508189  026390954  099116399  022615973  081500574  049160030
ex(5):  029520082  03-5806092  04-1851874  028209367  03-6548475  08-2480807
ex(8):  027867567  04-7407987  08-1033937  08-3285691  04-9912191  09-9925175


#A: Joel Dooris
#D: This pattern returns the font section from an RTF document. The first parenthetical subexpression captures the font number, the second returns the actual font enumeration. Lame-o, but fun! :-)
#U: http://regexlib.com/REDetails.aspx?regexp_id=219

regexp: (\{\\f\d*)\\([^;]+;)
tree:   ((((({\)f)[0-9]*)\)([\x01-:<-\u007f]+;))
length: 6 to *
-------------------- Examples --------------------
ex(0):  {\\f\\V;  {\\f\\9;  {\\f\\+;  {\\f\\T;  {\\f\\D;  {\\f\\i;  {\\f\\(;
ex(1):  {\\f4\\z;  {\\f7\\|;  {\\f3\\_;  {\\f3\\>;  {\\f4\\P;  {\\f\\N;
ex(2):  {\\f6\\DU;  {\\f\\YS;  {\\f\\1;  {\\f25\\zn;  {\\f\\|s;  {\\f\\2;
ex(3):  {\\f84\\pi;  {\\f3\\|@;  {\\f362\\N;  {\\f4\\<;  {\\f\\M;  {\\f5\\/b>;
ex(5):  {\\f43\\Ki;  {\\f\\P;  {\\f78\\\\;  {\\f549\\~;  {\\f556\\DJIT;
ex(8):  {\\f\\^9 [;  {\\f211644\\)D\\?;  {\\f1207053\\s(^@xF]`;  {\\f\\[;



#%#% COMMENTED OUT: THIS ONE IS TOO BIG TO RUN

# </?([a-zA-Z][-A-Za-z\d\.]{0,71})(\s+(\S+)(\s*=\s*([-\w\.]{1,1024}|"[^"]{0,1024}"|'[^']{0,1024}'))?)*\s*>


#A: Lewis Moten
Henric Rosvall
#D: Searches for tags and there atributes according to the HTML 2.0 specification to limit length of tags to 72 characters, and length of attribute values to 1024 characters.
Will locate an URL in a webpage.
It'll search in 2 ways - first it will try to locate a href=, and then go to the end of the link. If there is nu href=, it will search for the end of the file instead (.asp, .htm and so on), and then take the data between the "xxxxxx" or 'xxxxxx'
#U: http://regexlib.com/REDetails.aspx?regexp_id=220
http://regexlib.com/REDetails.aspx?regexp_id=222

regexp: (("|')[a-z0-9\/\.\?\=\&]*(\.htm|\.asp|\.php|\.jsp)[a-z0-9\/\.\?\=\&]*("|'))|(href=*?[a-z0-9\/\.\?\=\&"']*)
ERROR:  rx: prefer-fewer '?' unimplemented: in "(("|')[a-z0-9\/\.\?\=\&]*(\.htm|\.asp|\.php|\.jsp)[a-z0-9\/\.\?\=\&]*("|'))|(href=*?[a-z0-9\/\.\?\=\&"']*)"


#A: Jony Ferreira
#D: This regular expressions matches dates in the format MM/YYYY where MM can be 01 to 12 and YYYY is always 4 digits long. 
#T: MM/YYYY MONTH/YEAR
#U: http://regexlib.com/REDetails.aspx?regexp_id=223

regexp: ^((0[1-9])|(1[0-2]))\/(\d{4})$
tree:   ((((0[1-9])|(1[012]))/)[0-9]{4})
length: 7 to 7
-------------------- Examples --------------------
ex(0):  01/0168  10/4516  02/8920  10/1136  11/9066  04/1817  11/4033  05/1903
ex(1):  06/1263  11/2165  02/1141  02/6342  12/5147  01/8595  10/2375  11/5769
ex(2):  10/6902  11/7408  04/7772  12/6042  07/0289  11/4216  12/8769  10/7760
ex(3):  07/2221  06/7431  10/1855  11/4375  08/6014  02/4159  10/0735  10/8189
ex(5):  09/0093  09/4335  10/8615  11/9377  10/5408  10/8896  06/4846  10/5005
ex(8):  08/1246  11/6194  01/3266  03/5187  10/7599  09/1806  10/0262  10/8481


#A: Gerald Martin
#D: Meets german norm-standard: DIN 5008: 1996-05 for telephone numbers
#U: http://regexlib.com/REDetails.aspx?regexp_id=224

regexp: ^\(\d{1,2}(\s\d{1,2}){1,2}\)\s(\d{1,2}(\s\d{1,2}){1,2})((-(\d{1,4})){0,1})$
tree:   ((((((([0-9]{1,2})([\t-\r ][0-9]{1,2}){1,2})))[\t-\r ])([0-9]{1,2}([\t-\r ][0-9]{1,2}){1,2}))(-[0-9]{1,4})?)
length: 9 to 24
-------------------- Examples --------------------
ex(0):  (7 0) 1 6  (8 2) 7 8  (1 0) 0 9  (4 4) 3 4  (0 5) 4 9  (0 6) 6 0
ex(1):  (02 7 3) 0 16-429  (06 8 94) 7 9-716  (6 61 82) 32 1-765
ex(2):  (0 1) 1 6-71  (9 7 31) 6 0 3-166  (0 68) 0 34 0  (0 8) 59 5 5-370
ex(3):  (3 20 20) 69 22 47  (9 2) 8 2  (32 42 91) 9 92 1-74  (0 65) 36 3-25
ex(5):  (98 63 43) 11 47 00  (22 25 27) 70 58 25  (00 7 26) 9 1 02
ex(8):  (5 6 2) 1 7  (3 0 02) 5 21-156  (3 15 56) 61 93 7-647  (7 48) 76 0


#A: Scott Kahler
#D: This RE validates standard Bible verse notation.
#U: http://regexlib.com/REDetails.aspx?regexp_id=225

regexp: (?:\d|I{1,3})?\s?\w{2,}\.?\s*\d{1,}\:\d{1,}-?,?\d{0,2}(?:,\d{0,2}){0,2}
tree:   (((((((((((([0-9]|I{1,3})?[\t-\r ]?)[0-9A-Z_a-z]{2,}).?)[\t-\r ]*)[0-9]+):)[0-9]+)-?),?)[0-9]{0,2})(,[0-9]{0,2}){0,2})
length: 5 to *
-------------------- Examples --------------------
ex(0):  _p4:5  gj4:8  4_6:3  C46:6  RZ8:8  IY2:5  fW4:0  B99:4  xc9:9  Iq7:6
ex(1):  4NP9:0,4,33  2Kl2:0,9,   Jt7:0,66,91   AG 6:7-,8,47,2  9dP 2:9,7
ex(2):  KWn.31:1-,,5,  aRI  17:8-,38  U_Q  5:10,6,90   lH34:53,,9
ex(3):   H8D.7:4,,2,  zR  020:877-,5  4 fgEd 7:8-,1  nEsB.  51:9,38
ex(5):  05b.     7:6,4,09   kX. 826:13-75,9   IQj00f 8396:588,,1
ex(8):   P8JVpL     751:78-,3,3  IBRdXJy.      626:2582,9


#A: Alessandro Olivi
#D: Jason West (jason.west@mail.state.ky.us) date validator with leap years using a strict dd/mm/yyyy  (ITALIAN) format
#U: http://regexlib.com/REDetails.aspx?regexp_id=226

regexp: (((0[1-9]|[12][0-9]|3[01])([-./])(0[13578]|10|12)([-./])(\d{4}))|(([0][1-9]|[12][0-9]|30)([-./])(0[469]|11)([-./])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([-./])(02)([-./])(\d{4}))|((29)(\.|-|\/)(02)([-./])([02468][048]00))|((29)([-./])(02)([-./])([13579][26]00))|((29)([-./])(02)([-./])([0-9][0-9][0][48]))|((29)([-./])(02)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02)([-./])([0-9][0-9][13579][26])))
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))[-./])((0[13578])|(10)|(12)))[-./])[0-9]{4})|((((((0[1-9])|([12][0-9])|(30))[-./])((0[469])|(11)))[-./])[0-9]{4})|((((((0[1-9])|(1[0-9])|(2[0-8]))[-./])(02))[-./])[0-9]{4})|(((((29)(.|-|/))(02))[-./])((([02468][048])0)0))|(((((29)[-./])(02))[-./])((([13579][26])0)0))|(((((29)[-./])(02))[-./])((([0-9][0-9])0)[48]))|(((((29)[-./])(02))[-./])((([0-9][0-9])[2468])[048]))|(((((29)[-./])(02))[-./])((([0-9][0-9])[13579])[26])))
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02.02-5312  29-02.3588  29-02.9616  29.02.2052  29-02-3044  29.02-3320
ex(1):  29.02/1200  29-02-3200  31.12.5154  29/02.5852  29.02.0400  07/06/6968
ex(2):  23.12.6888  29-02.9200  09-10/2066  02-06/4146  17/02.3062  29-02-8976
ex(3):  29-02/3200  12-02.5769  29-02/6880  06/02.0987  14/06.5974  29-02.4000
ex(5):  29-02.1880  29-02.6808  29-02-2408  20-04/2839  29.02/7608  29-02/1108
ex(8):  06-12/4063  29.02/6904  29-02.0980  29-02-5200  31-10.1376  02-02/8181


#A: Bertrand Perrin
#D: Regular Expression that validate phone in France.
#U: http://regexlib.com/REDetails.aspx?regexp_id=227

regexp: ^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$
tree:   (((0[1-6])[0-9]{2}{4})|([\t-\r ][0-9]{2}){4}|(-[0-9]{2}){4})
length: 10 to 12
-------------------- Examples --------------------
ex(0):  0240550387  0408920307  0249066018  0276487344  -09-48-05-48
ex(1):  -65-38-81-24  -42-04-78-43   39 89 59 86   78 84 79 01   76 90 26 00
ex(2):   10 72 35 30  0207999261   76 52 91 86   72 22 13 74  0580224443
ex(3):  -86-22-87-50   22 32 42 60   58 24 95 24  -39-93-26-48  0180951036
ex(5):  -56-41-56-22  0440623718   80 60 92 01  -06-53-54-47   38 11 31 57
ex(8):   67 41 71 28  0680186756  -24-37-62-92  0487671817  0200717877


#A: Peter Whyte
#U: http://regexlib.com/REDetails.aspx?regexp_id=229

regexp: ^[A-Z]{1,2}[1-9][0-9]?[A-Z]? [0-9][A-Z]{2,}|GIR 0AA$
tree:   ((((((([A-Z]{1,2}[1-9])[0-9]?)[A-Z]?) )[0-9])[A-Z]{2,})|((((((GI)R) )0)A)A))
length: 6 to *
-------------------- Examples --------------------
ex(0):  D3 3UZ  H3 1TX  M4 2QD  GIR 0AA  G7 3JL  GIR 0AA  GIR 0AA  GIR 0AA
ex(1):  GIR 0AA  E6K 2YV  GIR 0AA  GIR 0AA  WW1A 1CY  LT6I 6OU  GIR 0AA
ex(2):  CT6 9BJ  GIR 0AA  Y3U 2OX  GIR 0AA  GIR 0AA  GIR 0AA  XV32C 6NIW
ex(3):  GIR 0AA  S25 6SKB  T1Q 0GAP  GIR 0AA  GIR 0AA  GIR 0AA  GIR 0AA
ex(5):  LC6 3QLKH  S7 1EI  GIR 0AA  GIR 0AA  P96I 7VPZ  GIR 0AA  Q47 4IU
ex(8):  U9Y 7VJUOBAY  GIR 0AA  GIR 0AA  QY6 9LRPP  H48 7LQC  GIR 0AA  MN4U 6AW


#A: Spring Zhang
#D: This is a regular expression to validate a date string in "MM/DD/YYYY" format, a date time string in "MM/DD/YYYY HH:MM" or a date time string in "MM/DD/YYYY HH:MM:SS" format.
It can validate date from 1600 to 2199.
#U: http://regexlib.com/REDetails.aspx?regexp_id=230

regexp: ^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0-1]\d|[2][0-3])(\:[0-5]\d){1,2})?$
tree:   ((((((((0[0-9])|(1[012]))/)(([012][0-9])|(3[01])))/)((2[01])|(1[6-9])))[0-9]{2})(([\t-\r ](([01][0-9])|(2[0-3])))((:[0-5])[0-9]){1,2})?)
length: 10 to 19
-------------------- Examples --------------------
ex(0):  01/27/2055  04/13/2116  02/01/1803  03/11/1845  08/31/2183  01/30/2060
ex(1):  07/26/1806  09/09/2082  12/21/1981 09:29  00/31/2056 20:46:07
ex(2):  11/30/2011  00/06/1819  11/30/2036  11/07/1923 22:47  11/16/1969
ex(3):  06/10/1925 04:46  03/08/2043 21:01  04/19/2139  11/15/2068  02/31/2042
ex(5):  03/31/2177 09:52:21  01/31/2187  11/30/1889  10/23/2032 21:40
ex(8):  09/30/1955  01/30/1884  06/23/1667 13:16:42  11/30/1784


#A: Karsten Grombach
#D: Usesful for importing vcards. Matches vcard elements and values.
#U: http://regexlib.com/REDetails.aspx?regexp_id=231

regexp: ((?<strElement>(^[A-Z0-9-;=]*:))(?<strValue>(.*)))
ERROR:  rx: '(?...' unimplemented: in "((?<strElement>(^[A-Z0-9-;=]*:))(?<strValue>(.*)))"


#A: Bill LaPrade
#D: This is a combination of a few regular expressions found on this site.  It allows for a flexible date and time combination, but requires a 12-hour clock (am/pm).  Many versions of the am/pm are supported.
#U: http://regexlib.com/REDetails.aspx?regexp_id=233

regexp: ^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0]\d|[1][0-2])(\:[0-5]\d){1,2})*\s*([aApP][mM]{0,2})?$
tree:   ((((((((((0[0-9])|(1[012]))/)(([012][0-9])|(3[01])))/)((2[01])|(1[6-9])))[0-9]{2})(([\t-\r ]((0[0-9])|(1[012])))((:[0-5])[0-9]){1,2})*)[\t-\r ]*)([APap][Mm]{0,2})?)
length: 10 to *
-------------------- Examples --------------------
ex(0):  01/27/2055  04/13/2116  02/01/1803  03/11/1845  08/31/2183  01/30/2060
ex(1):  07/26/1806pMm  11/24/2094 10:23aMM  12/30/1978 10:20:01  02/14/2053Am
ex(2):  02/31/2168 10:53 09:44  11/07/1923 11:45:41 01:39    12/30/2030
ex(3):  03/08/2043 10:15:17     10/30/1839     07/31/1779 12:38 10:10pMm
ex(5):  00/17/1699 02:12:15     PM
ex(8):  09/24/1685 06:32 06:06 10:48:35 05:15:08       


#A: Brad Williams
#D: improved date validation M/D/YY or M/D/YYYY or MM/DD/YYYY or MM/DD/YY: 1/1/1920 through 12/31/2019; Feb 29 and 30 always allowed, deal with it
#U: http://regexlib.com/REDetails.aspx?regexp_id=235

regexp: ^((0?[13578]|10|12)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1}))|(0?[2469]|11)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1})))$
tree:   (((((((0?[13578])|(10)|(12))(-|/))([1-9]|(0[1-9])|([12][0-9]?)|(3[01]?)))(-|/))((((19)[2-9])[0-9])|(((20)[01])[0-9])|([0189][0-9])))|((((((0?[2469])|(11))(-|/))([1-9]|(0[1-9])|([12][0-9]?)|(30?)))(-|/))((((19)[2-9])[0-9])|(((20)[01])[0-9])|([0189][0-9]))))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  8/02/12  9/4/1927  10/3-11  12/2-2000  11-1-2001  12/03-1935  10/1/1961
ex(1):  12-01-1948  10-2/1977  10/8-1936  1/1/1928  6/22/12  12/01/2008
ex(2):  12/3-94  03-30-1987  11/5-1941  6/1/2014  12/1-1964  2-2-96  12-1-19
ex(3):  11/30-2018  10-8/90  11-1-2001  10/9/1952  11-9/1972  11-02-2008
ex(5):  11-2-1956  10-05-1948  01/14/09  10/3-1926  06/3-1962  10-3-2015
ex(8):  10/1/18  10-13/18  7/6/2014  11-3-1951  3/31-2004  10-6/1935  6-03-86


#A: Ken Madden
#D: This time validation expression accepts an hour between 1 and 9 (with optional leading zero) and minutes between 01 and 59.  This is primarily for use with an AM/PM drop down list or radio button.
#U: http://regexlib.com/REDetails.aspx?regexp_id=237

regexp: ^(([0]?[1-9]|1[0-2])(:)([0-5][0-9]))$
tree:   ((((0?[1-9])|(1[012])):)([0-5][0-9]))
length: 4 to 5
-------------------- Examples --------------------
ex(0):  1:05  5:54  2:38  10:33  7:14  6:35  10:01  12:05  3:40  12:13  7:22
ex(1):  11:06  11:37  10:04  10:33  11:09  8:06  06:38  11:54  11:40  4:21
ex(2):  09:33  2:03  6:27  10:23  10:24  08:58  11:27  11:52  12:52  6:46
ex(3):  10:41  9:39  11:52  8:26  12:59  9:02  05:35  12:17  10:37  03:00
ex(5):  12:51  5:13  10:29  11:06  10:47  10:58  08:33  7:27  10:55  1:21  8:56
ex(8):  7:50  10:23  10:04  11:01  2:56  05:29  12:07  11:44  11:40  10:44


#A: Jim Tebbel
#D: validate 12-hour time with am/pm after it, with optional spaces before or after, and optionally between time and am/pm.
#U: http://regexlib.com/REDetails.aspx?regexp_id=238

regexp: ^ *(1[0-2]|[1-9]):[0-5][0-9] *(a|p|A|P)(m|M) *$
tree:   (((((((( *((1[012])|[1-9])):)[0-5])[0-9]) *)(a|p|A|P))(m|M)) *)
length: 6 to *
-------------------- Examples --------------------
ex(0):  11:22Am  10:36am  6:10PM  11:58Am  12:00pM  9:25PM  1:01PM  11:06pm
ex(1):   3:16 pm  4:45 Pm    3:06 am   8:28am  4:59am    4:46 aM   2:08PM
ex(2):   8:02 PM     1:22  AM      10:05AM     11:32 Pm    10:06  Pm   10:02 Pm
ex(3):    8:58 AM     11:33   AM   10:39 Pm   2:57 am       11:19 Am 
ex(5):   11:49     pM  10:46    aM        3:48  Am        1:50AM  
ex(8):  5:34aM     10:23 Pm        7:45      Am               10:15      Pm 


#A: s4 s
#U: http://regexlib.com/REDetails.aspx?regexp_id=239

regexp: \({1}[0-9]{3}\){1}\-{1}[0-9]{3}\-{1}[0-9]{4}
tree:   ((((((([0-9]{3})))-)[0-9]{3})-)[0-9]{4})
length: 14 to 14
-------------------- Examples --------------------
ex(0):  (701)-682-7810  (094)-434-0549  (066)-018-1705  (198)-578-6248
ex(1):  (210)-744-4217  (305)-147-6859  (524)-236-1843  (632)-676-9026
ex(2):  (177)-506-8042  (161)-863-1199  (960)-759-9279  (260)-670-1855
ex(3):  (117)-363-0508  (189)-517-5550  (093)-143-3509  (619)-428-0540
ex(5):  (980)-298-8108  (038)-706-1948  (326)-685-1874  (576)-197-9200
ex(8):  (448)-438-6713  (418)-558-1594  (632)-958-7671  (817)-645-8178


#A: Bob Duffett
#D: MM-DD-20YY HH:MM AP
MM-DD-20YY H:MM AP
MM-DD-20YY HH:MM
MM-DD-20YY H:MM
MM-DD-YY HH:MM AP
MM-DD-YY H:MM AP
MM-DD-YY HH:MM
MM-DD-YY H:MM
M-D-YY HH:MM AP
M-D-YY H:MM AP
M-D-YY HH:MM
M-D-YY H:MM
where - can be / or - or .
where : can be : or - or .
Definition:
^(                       ;Start of Line
([0]?[1-9]|[1][0-2])     ;00-09 or 10-12 or 1-9
[\/|\-|\.]               ;/ or - or .
([0-2]\d|[3][0-1]|[1-9]) ;00-29 or 30-31 or 1-9
[\/|\-|\.]               ;/ or - or .
([2][0])?\d{2}           ;2000-2099 or 00-99
\s+                      ;one or more spaces
(                        ;must be either 12H notation w/AM|PM
(
([0][0-9]|[1][0-2]|[0-9])
[\:|\-|\.]              ;: or - or .
([0-5]\d)               ;01 thru 59
\s*                     ;zero or more spaces
([aApP][mM])?           ;nothing or AM or PM (case insensitive)
)
|                        ;or 24H notation w/out AM|PM
(
([0-1][0-9]|[2][0-3]|[0-9]) ;00-19 or 20-23
[\:|\-|\.]              ;: or - or .
([0-5]\d)               ;00-59
)
)
)$                       ;End of Line
#U: http://regexlib.com/REDetails.aspx?regexp_id=241

regexp: ^(([0]?[1-9]|[1][0-2])[\/|\-|\.]([0-2]\d|[3][0-1]|[1-9])[\/|\-|\.]([2][0])?\d{2}\s+((([0][0-9]|[1][0-2]|[0-9])[\:|\-|\.]([0-5]\d)\s*([aApP][mM])?)|(([0-1][0-9]|[2][0-3]|[0-9])[\:|\-|\.]([0-5]\d))))$
tree:   (((((((((0?[1-9])|(1[012]))[-./|])(([012][0-9])|(3[01])|[1-9]))[-./|])(20)?)[0-9]{2})[\t-\r ]+)(((((((0[0-9])|(1[012])|[0-9])[-.:|])([0-5][0-9]))[\t-\r ]*)([APap][Mm])?)|(((([01][0-9])|(2[0-3])|[0-9])[-.:|])([0-5][0-9]))))
length: 11 to *
-------------------- Examples --------------------
ex(0):  1.7-55 4-02  11|30.00 23.41  8.4.04 10-28  5.3/40 5.39  4/30-76 00:02
ex(1):  11.31-69 02-44Am  04|26-29 07.06 Am  12-18.2070 5.14am
ex(2):  12-30-65  8:14  09-9|66 03:40    12/31/2074 06-31  3/00.79 18|20
ex(3):  03/31|2089   21-06  01.3-2004   0.40   Am  10|4|22 23.18
ex(5):  11.7|2079     08|30  08.18-2085   9:13      12.13-2022  8|44
ex(8):  03|1|05     1|12  10|8-79       7.14  11|31/2080        22.22


#A: Michael Gaertner
#D: Match any number between 1 and 50, no characters, no empty sets, and not zero. Match numbers greater than 1 and less than 51, no spaces, no characters.
#U: http://regexlib.com/REDetails.aspx?regexp_id=242

regexp: ^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$
ERROR:  rx: Embedded '$' unimplemented: in "^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$"


#A: Mekonnen Mekonnen
#D: Matches dates with the following format
Month - either MM (like 01) or M (like 1) - from 1 to 12
Day - either DD (like 01) or D ( like 1) - from 1 to 31
Year - either YYYY ( like 1998) or YY (like 98)
Separater - either - or /
#U: http://regexlib.com/REDetails.aspx?regexp_id=244

regexp: ^([1][12]|[0]?[1-9])[\/-]([3][01]|[12]\d|[0]?[1-9])[\/-](\d{4}|\d{2})$
tree:   ((((((1[12])|(0?[1-9]))[-/])((3[01])|([12][0-9])|(0?[1-9])))[-/])([0-9]{4}|[0-9]{2}))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  11/24-9634  11/31-0932  12-31/92  6/31/4507  12-30-9836  2/31-0192
ex(1):  12/22/48  11-05/19  06/30/2847  4-31/1529  11-07/71  11-11-1114
ex(2):  11-10-07  09/15-75  1-25/4363  4-17/66  12-12/69  1-31-9153  07/31-4181
ex(3):  12-26-21  11/5-1618  12-31-1631  11/18-2918  12-26-4645  12/30/9020
ex(5):  11-22-1719  12-31-8552  11/31-3206  12-30-63  11/30/6629  08-21-4390
ex(8):  08-30-50  05/20-29  12/30/96  5-27/84  02-25-70  03/12-0030  04-10/4710


#A: Patrick O'Hara
#D: Validates time in MySQL time format.  24 hour time colon seperated hours:minutes:seconds
#U: http://regexlib.com/REDetails.aspx?regexp_id=248

regexp: (([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])
tree:   (((((([01][0-9])|(2[0-3])):)([0-5][0-9])):)([0-5][0-9]))
length: 8 to 8
-------------------- Examples --------------------
ex(0):  02:09:22  12:43:17  21:27:55  01:23:01  23:10:26  20:13:16  20:15:41
ex(1):  22:50:21  23:20:47  23:34:51  23:46:47  03:04:50  20:19:04  10:04:03
ex(2):  10:29:37  01:47:54  20:50:29  03:21:51  21:06:58  21:12:00  13:40:31
ex(3):  00:37:15  20:55:31  21:37:15  13:12:40  18:01:38  21:44:06  11:56:16
ex(5):  21:00:27  20:12:28  20:26:01  02:40:22  23:02:43  20:43:02  18:38:00
ex(8):  21:10:30  06:49:41  06:20:19  22:53:22  21:59:04  13:21:54  06:34:44


#A: Rick Yokum
#D: This expression will allow a time value with 15 minute increments.  It will not accept seconds.  You can use either US time or Military time format.
#U: http://regexlib.com/REDetails.aspx?regexp_id=249

regexp: ^((([0]?[1-9]|1[0-2])(:|\.)(00|15|30|45)?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)(00|15|30|45)?))$
tree:   (((((((0?[1-9])|(1[012]))(:|.))((00)|(15)|(30)|(45))?) ?)((AM)|(am)|(aM)|(Am)|(PM)|(pm)|(pM)|(Pm)))|((((0?[0-9])|(1[0-9])|(2[0-3]))(:|.))((00)|(15)|(30)|(45))?))
length: 2 to 8
-------------------- Examples --------------------
ex(0):  2:Am  5:  3.  4:AM  11:AM  4.  23:  11.PM  3:  6.pm  21:  6:am  8.  21.
ex(1):  22:  08:  22:15  01:  05:pM  11:  6.30  4:15 PM  12:15  20:  7:45  2:am
ex(2):  10:15  17.15  1.  11.  09.00 PM  10.30  20:45  9:Pm  06:30pM  02:45
ex(3):  5. aM  7:45AM  23.00  02:  20.00  07:00PM  21:30  20.  6:30pm  11.15
ex(5):  21:15  09:pm  23:45  15:15  09:aM  12:30PM  23:30  07.30Am  1:00  22.00
ex(8):  12. am  12.pM  2. Pm  15:00  18.  11:15 PM  06:pM  1.30  11:45Am  22.15


#A: Diego dos Santos
#D: Validate brazilian date formats: dd/mm/yyyy or d/m/yy or d.m.yyyy
with separators: . - /
Valid dates only! d (1-31)/ m (1-12)/ y (0..)
(rizzipereira.com.br)
For American date format: http://www.regexlib.com/REDetails.aspx?regexp_id=932
#U: http://regexlib.com/REDetails.aspx?regexp_id=250

regexp: ^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$
tree:   ((((((0?[1-9])|([12|][0-9])|(3[01|]))[-./])((0?[1-9])|(1[012])))[-./])([0-9]{4}|[0-9]{2}))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1-10-43  24-11.35  8.2.0715  30-10.50  26.3.1512  6/11-76  4.11-81
ex(1):  30/02-76  |8.11.63  31.04/7941  03-02/14  31/10-70  3|/06-97  3|-1.28
ex(2):  3|.07-2198  |4-11.3066  13.9-9883  6/7.44  1-11.84  1.01/0682  23-08-33
ex(3):  03-12/6529  3|-1/67  30-12/8096  5.3/4184  12/4-22  24.12/7487
ex(5):  31-7-5081  24.11-2425  9/10/1209  20.03/07  2-4/19  17.1-05  24/11.14
ex(8):  3|-01.3072  07.5.88  31.06-8038  22-12-3802  1.11.6160  3|.1-47


#A: Bri Gipson
#D: Accepts only positive decimal values. Zero and negatvie numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits.
#U: http://regexlib.com/REDetails.aspx?regexp_id=251

regexp: (^\d*\.?\d*[1-9]+\d*$)|(^[1-9]+\d*\.\d*$)
ERROR:  rx: Embedded '^' unimplemented: in "(^\d*\.?\d*[1-9]+\d*$)|(^[1-9]+\d*\.\d*$)"


#A: Bri Gipson
#D: Accepts only negative decimal values. Zero and positive numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=252

regexp: (^-\d*\.?\d*[1-9]+\d*$)|(^-[1-9]+\d*\.\d*$)
ERROR:  rx: Embedded '^' unimplemented: in "(^-\d*\.?\d*[1-9]+\d*$)|(^-[1-9]+\d*\.\d*$)"


#A: martix wang
#D: this is a regular expression that for chinese programer!
yyyy/mm/dd hh:mm:ss
#U: http://regexlib.com/REDetails.aspx?regexp_id=253

regexp: ^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1]))$|^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$
ERROR:  rx: Embedded '$' unimplemented: in "^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1]))$|^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$"


#A: Ramon Durães
#D: This re was used for set numbers only!
Somente numeros são requeridos!
#U: http://regexlib.com/REDetails.aspx?regexp_id=257

regexp: ^[+]?\d*$
tree:   (+?[0-9]*)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    +  +  +2    2  +  +  8  +    +    3  1  +3            +  4      +5
ex(2):    +  13  +7  69  +5  30  +  8  +1  +3  +4  58  +    81  +09    +  68
ex(3):  +3  69  2  +  94  +  +1  6  +571  +62  +146  7  +    +051  1  +  +4
ex(5):  295  37597  +81  +  +  +6  94743  1  69035  +1  +7772  +848  +0723
ex(8):  889430  92336  44972221  9327239    4443  +  +09974  43117363  43  +4


#A: Morten Henriksen
#D: Accepts data of time in format h:mm and hh:mm
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
in php [0-23]:[0-59]{2} (posix)
#U: http://regexlib.com/REDetails.aspx?regexp_id=261

regexp: ^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
tree:   (((([01]?[0-9])|(2[0-3])):)([0-5][0-9]))
length: 4 to 5
-------------------- Examples --------------------
ex(0):  1:00  20:55  4:15  22:26  2:09  8:35  20:11  22:06  22:29  1:13  3:18
ex(1):  22:25  7:50  20:47  22:59  12:52  11:59  20:14  21:40  4:50  20:19
ex(2):  01:06  21:42  4:53  05:05  5:24  21:47  23:07  23:11  23:46  20:55
ex(3):  20:28  9:24  21:04  23:28  21:26  21:25  21:17  21:13  23:15  20:55
ex(5):  23:20  23:17  21:38  10:14  2:39  23:44  16:11  22:09  20:16  11:40
ex(8):  22:28  23:14  20:03  2:31  21:47  05:18  21:52  23:01  22:38  21:23


#A: Kevin Coleman
#D: Validates MM/YY for rough checking credit card expiration dates.
#U: http://regexlib.com/REDetails.aspx?regexp_id=262

regexp: ^((0[1-9])|(1[0-2]))\/(\d{2})$
tree:   ((((0[1-9])|(1[012]))/)[0-9]{2})
length: 5 to 5
-------------------- Examples --------------------
ex(0):  01/01  09/82  10/51  12/77  10/94  07/34  12/73  10/59  01/36  12/18
ex(1):  06/03  06/01  12/68  10/24  06/19  06/57  08/20  12/07  10/57  12/74
ex(2):  06/17  11/20  06/78  10/68  06/95  10/23  12/66  09/76  10/36  12/91
ex(3):  08/71  12/61  12/66  12/77  10/05  11/81  10/95  02/68  08/10  10/31
ex(5):  04/31  06/99  12/82  08/19  09/46  09/57  09/93  08/02  04/44  12/71
ex(8):  12/60  02/48  10/64  11/36  11/72  07/28  05/41  04/15  12/95  11/00


#A: Bassel Issa
#D: this pattern can find all lines of script in HTML code from open to close tag range
#U: http://regexlib.com/REDetails.aspx?regexp_id=265

regexp: <script[^>]*>[\w|\t|\r|\W]*</script>
tree:   ((((((((((((((((((<s)c)r)i)p)t)[\x01-=?-\u007f]*)>)[\x01-\u007f]*)<)/)s)c)r)i)p)t)>)
length: 17 to *
-------------------- Examples --------------------
ex(0):  <script></script>  <script></script>  <script></script>
ex(1):  <script></script>  <scriptr></script>  <script>K</script>
ex(2):  <script>eH</script>  <script.>></script>  <scriptX'>6L</script>
ex(3):  <scriptBc>p>x</script>  <script>t</script>  <script>E</script>
ex(5):  <scriptr>bHn7</script>  <scriptS></script>  <scripthK>S</script>
ex(8):  <script>ey8(p</script>  <scriptE [#ieU>jC^=</script>


#A: Dennis Flynn
#D: Incorporated other people's examples; removed extraneous parenthesis on 10/7/04.  Currently the SSA site says 772 is the highest AREA number generated (http://www.ssa.gov/employer/highgroup.txt).  Old expression was:  (^|\s)\d{3}(-?|[\. ])\d{2}\2\d{4}($|\s|[;:,!\.\?]).  Looks for either the beginning of a line or whitespace before the beginning of the social security number, then either zero or one hyphen OR one of a period or space, then uses the \3 to reference the value returned in the parenthesis that includes the -?|[\. ] (basically says if the first dash, period, or space is there, then the second one is required; and if the first dash, period, or space is not there, then the second one can't be either), and finally looks for the end of a line, whitespace, or punctuation characters after the social security number.
#U: http://regexlib.com/REDetails.aspx?regexp_id=266

regexp: (^|\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\d{2}|7[0-6]\d|77[0-2])(-?|[\. ])([1-9]0|0[1-9]|[1-9][1-9])\3(\d{3}[1-9]|[1-9]\d{3}|\d[1-9]\d{2}|\d{2}[1-9]\d)($|\s|[;:,!\.\?])
ERROR:  rx: Embedded '^' unimplemented: in "(^|\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\d{2}|7[0-6]\d|77[0-2])(-?|[\. ])([1-9]0|0[1-9]|[1-9][1-9])\3(\d{3}[1-9]|[1-9]\d{3}|\d[1-9]\d{2}|\d{2}[1-9]\d)($|\s|[;:,!\.\?])"


#A: Gregory Entin
#D: Matches comma-separated list of IP address and IP ranges. E.g. 192.168.101.1-192.168.101.255,192.168.102.12
#U: http://regexlib.com/REDetails.aspx?regexp_id=267

regexp: ^(((((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])-(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))),)*)(((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-
ERROR:  rx: unclosed '[': in "^(((((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])-(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))),)*)(((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-"


#A: Chuck Scholton
#D: This will check if a number is an integer.  Positive integers are all the whole numbers greater than zero: 1, 2, 3, 4, 5, ... . Negative integers are all the opposites of whole numbers: -1, -2, -3,-4, -5, ... .  Zero is not a whole number with either a positive or negative value, and is not an interger.  Null or Empty values are not intergers.     
#U: http://regexlib.com/REDetails.aspx?regexp_id=268

regexp: ^[-+]?[1-9]\d*\.?[0]*$
tree:   (((([+-]?[1-9])[0-9]*).?)0*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  2  9  5  1  6  4  4  5  1  3  2  9  7  1  7  8  3  4  4  8  5  3  4
ex(1):  30  450  -5.0  +23.  58.  7  13.  -62.0  -8.0  54  690  +3  -2.  60  16
ex(2):  1  100  -414.00  496.00  -1  41900  119  7920  92  1.0  +80  -8.00  730
ex(3):  81.  8836000  +2470.0  +5.00  81.  -1.  7235.0  3.00  40  -88  -7.0
ex(5):  +6126  +90  +759.0000  464573.0000  +300000  +39314.00000  8922  +4310
ex(8):  +73766.000000  64361.000  39095492900000000  45.00000  -470087960.00


#A: nick bennett
#D: Matches a valid email address including ip's which are rarely used. Allows for a-z0-9_.- in the username, but not ending in a full stop i.e user.@domain.com is invalid and a-z0-9- as the optional sub domain(s) with domain name and a 2-7 char (a-z) tld allowing for short tld's like ca and new ones like museum.
#U: http://regexlib.com/REDetails.aspx?regexp_id=269

regexp: ^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$
ERROR:  rx: prefer-fewer '?' unimplemented: in "^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$"


#A: X Man
#D: This expression finds all opening and closing tags.  Good for stripping out tags in an XML or HTML document.
I used it to clean-up HTML documents that had XML mixed in.  It found all the tags, then I just deleted the ones that weren't standard.  I used it in HOMESITES extended find.
#U: http://regexlib.com/REDetails.aspx?regexp_id=270

regexp: <[^>]+>
tree:   ((<[\x01-=?-\u007f]+)>)
length: 3 to *
-------------------- Examples --------------------
ex(0):  <V>  <9>  <+>  <T>  <D>  <i>  <(>  <l>  <?>  <+>  <W>  <?>  <B>  <E>
ex(1):  <P>  <1>  <T>  <R>  <_>  <t>  <8>  <w>  <Z>  <r>  <@>  <M>  <=>  <)>
ex(2):  <&'>  <:>  <`A>  <Zf>  <#>  < >  <J>  <T`>  <={>  <N>  <L>  <y>  <U@>
ex(3):  <IT>  <`s>  <(Lp>  <DjV>  <Y>  <M(Q>  <'>  <Y>  < C`>  <Ei>  <7\\&>
ex(5):  <Z>  <=hkDS>  <%nihy>  <BkH>  <-3>  <vuEy>  <X-j>  <q,`\"P>  <'>  <]R>
ex(8):  <QA)#mOV>  <E`Pta>  <O88BEi>  <zY\\zF< Y>  <_AKj&>  <i<o38pTM>


#A: Jason N. Gaylord
#D: This regex is to validate the time of a ~60 minute CD where the most time on the CD is 59:59 (minutes:seconds). It is derived from Ken Madden's time regex for a project for Erik Porter (Windows/Web guru). Written by Jason Gaylord.
#U: http://regexlib.com/REDetails.aspx?regexp_id=271

regexp: ^(([0]?[0-5][0-9]|[0-9]):([0-5][0-9]))$
tree:   (((((0?[0-5])[0-9])|[0-9]):)([0-5][0-9]))
length: 4 to 6
-------------------- Examples --------------------
ex(0):  14:01  54:06  35:57  28:58  4:00  57:38  28:06  16:06  13:33  3:07
ex(1):  4:26  2:52  051:51  9:37  006:26  5:55  05:54  4:40  044:53  040:29
ex(2):  33:54  1:24  58:29  1:04  07:49  4:37  3:41  026:50  56:00  003:50
ex(3):  5:08  2:48  03:23  47:51  055:49  1:59  2:24  48:45  6:12  49:12
ex(5):  01:47  032:29  2:39  008:11  038:38  5:17  9:00  010:30  29:54  001:26
ex(8):  5:00  5:49  021:43  34:06  033:59  0:14  4:24  0:22  39:45  26:18


#A: Nicholas Rathwell
#D: It could be use to validate html input form (checkbox, optionbox, selectbox) when you have multiple numeric value under one field name. The validation is that the user have at lease chose one or more!
#U: http://regexlib.com/REDetails.aspx?regexp_id=272

regexp: ^[0-9]{1,}(,[0-9]+){0,}$
tree:   ([0-9]+(,[0-9]+)*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8,5  9  2  0,4  6,8  1,6  8,4  8  4,1  9  6,0  9,6  3,6  5,6  7  7,9
ex(2):  42,21,0  0,4,2  70  3,84  13  1,1  6  6  18,88,06  45,83  5,95,42
ex(3):  4  9  25  35,04  847,876  61,76  816,759  56,457  94,313  667,9,27
ex(5):  40  858,630,0564,512,1590  5,35,5245  99326,317,058,94
ex(8):  69,7182251,920  2,2324926,6197,49,227


#A: Rahul Pandit
#D: Additional checks for <> and " characters
#U: http://regexlib.com/REDetails.aspx?regexp_id=273

regexp: ^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*<>:\;|\"/]+$
ERROR:  rx: '(?...' unimplemented: in "^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*<>:\;|\"/]+$"


#A: Zeljko Stanfel
#D: ICD9 code pattern
#U: http://regexlib.com/REDetails.aspx?regexp_id=274

regexp: ^\d{3,3}\.\d{0,2}$|^E\d{3,3}\.\d{0,2}$
ERROR:  rx: Embedded '$' unimplemented: in "^\d{3,3}\.\d{0,2}$|^E\d{3,3}\.\d{0,2}$"


#A: Jeff Howden
#D: [Note: this regex was tested with Macromedia's ColdFusion MX.  I'm sure it'll need some massaging to work with other regex engines.]  Of the few domain validating regular expressions I found in my search I didn't find a single one that reliably handled multiple levels of subdomains or TLDs.  So, I wrote one and thoroughly tested it.  There are a ton of matching and non-matching examples that need to be included to show the completeness of this regex.
Non-matching:  -.domain.com, -a.domain.com, -domain.com, domain-.com, any domain where the portion before the tld is greater than 63 characters.
Matching: a.domain.com, a-a.domain.com, a--a.domain.com, a--defg.com, domain.co.uk.
#U: http://regexlib.com/REDetails.aspx?regexp_id=275

regexp: ^([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?\.){0,}([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?){1,63}(\.[a-z0-9]{2,7})+$
tree:   (((([0-9a-z]+([-0-9a-z]*[0-9a-z]+)?).)*([0-9a-z]+([-0-9a-z]*[0-9a-z]+)?){1,63})(.[0-9a-z]{2,7})+)
length: 4 to *
-------------------- Examples --------------------
ex(0):  9.u6  d.i1  6.mn  n.hz  k.26  9.9r  8.2x  v.fz  q.m4  e.q9  x.9v  8.4i
ex(1):  v.2sxfazjq9f533mko5qfnl4w1xs9eh4p11ytewy3-8zpx1ruvt9ikoydzi3xyagc5j99gy.uuj
ex(2):  bemvy2pc086q2k9xntsdzpe3mew9ram6q3gbg74yp0nl0f49hjy5q4hv0smt6x8g8qfsj21pewdq6zew92ztbrkw0sryd995nip1v1xv5ohtb9up96qeyw.wjdi
ex(3):  3e8nw7tqeord3j8f0f2sojhailokkkyw1kfda7388titq386dhow3yxpmabftr4b8ihf6mztkdc7prq8v8xou548x88siw07pef5d36uszfi5wucgge.r4v2c0.ostoy
ex(5):  z5r25qsx.kj.cnypaepfajtvxbxjlzk2rigajej8369quxsvnygjnce9hqa51kr1nyxloeqijvaapufkx14n1cys87y5jh2jlqi3qkddqbwmqyxyxt1br8huwlm0623e4m27xjldd3mxhjt2gefylcuc0kj8k9wtt0pvf0xufb31raosqneulzqnwmrkvcy25w5z4et0eism-c-tks6hdw2a4i2dvsizw4mr0849l.9l.7yadg4.szq1
ex(8):  suybaj83kdo.ffoavpgg52oq2d0vs3lcmatvepvmoebtwduuacnniykz0j3utsld1yv3vjvqwn7cv80bnknmbf5mincuht1lfjej2asrk6p2elxotrel2rx0a0jgpjogzik4mrm42g4c5oylftr6n4zl6v8fprat8dcovrsl3qv9t228rgs4i4tj631t2v5qptv6unyn72p64ydwpzc7u4pzf5xxzdb49bae1qkh0tbcc08ehnmh9un6a0mo3gudbuxzylua4a8e8qjtnxblx411coczohe75sbii0ufjadiv83kj9vexshgmb9pr54e2f.n5k.71qu.zstj.2thr2.tjb.atd.prs


#A: brent stineman
#D: Expression to handle US currency entry in .NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.
#U: http://regexlib.com/REDetails.aspx?regexp_id=276

regexp: ^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$
tree:   ($?((((([0-9]{1,3},?)([0-9]{3},?)*)[0-9]{3})(.[0-9]{1,3})?)|([0-9]{1,3}(.[0-9]{2})?)))
length: 1 to *
-------------------- Examples --------------------
ex(0):  1000  4046  6089  1643  1033  8  5  8063  7  2  0707  1903  6851  9  6
ex(1):  84  $2221,904  $70  $1,960  68,927,845.3  $6  $75.57  398.12  16.86
ex(2):  277.21  87.83  75,012043,999.713  $925  $92,599625480  $612.90  $8.92
ex(3):  $90  83.49  578  5  $72,298,517509120.9  $43,070615,485951.7
ex(5):  27.31  $2.02  5811742948.50  $07518864639.10  39  $85.20
ex(8):  15708.72  $32.72  $75107,096,977856,787.71  344304,664,568.1  16.65


#A: James T. Kirk
#D: matches a six character "password" that has to consist of numbers and letters with at least one letter in it.
#U: http://regexlib.com/REDetails.aspx?regexp_id=278

regexp: ^(?![0-9]{6})[0-9a-zA-Z]{6}$
ERROR:  rx: '(?...' unimplemented: in "^(?![0-9]{6})[0-9a-zA-Z]{6}$"


#A: Saurabh Nath
#D: This Validator Validates any date from 1800 - 9999. It takes special care of Leap years and validates any format of type mm/dd/yyyy , m/dd/yyyy , mm/d/yyyy , m/d/yyyy.
Since SQL Server does not accept any date before 1/1/1753, so i hope it will meet Your Requirements.(Modified Version of Jason West's Date Validator.)
#U: http://regexlib.com/REDetails.aspx?regexp_id=279

regexp: ((^(10|12|0?[13578])([/])(3[01]|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])([/])(30|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(2[0-8]|1[0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(29)([/])([2468][048]00)$)|(^(0?2)([/])(29)([/])([3579][26]00)$)|(^(0?2)([/])(29)([/])([1][89][0][48])$)|(^(0?2)([/])(29)([/])([2-9][0-9][0][48])$)|(^(0?2)([/])(29)([/])([1][89][2468][048])$)|(^(0?2)([/])(29)([/])([2-9][0-9][2468][048])$)|(^(0?2)([/])(29)([/])([1][89][13579][26])$)|(^(0?2)([/])(29)([/])([2-9][0-9][13579][26])$))
ERROR:  rx: Embedded '^' unimplemented: in "((^(10|12|0?[13578])([/])(3[01]|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])([/])(30|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(2[0-8]|1[0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(29)([/])([2468][048]00)$)|(^(0?2)([/])(29)([/])([3579][26]00)$)|(^(0?2)([/])(29)([/])([1][89][0][48])$)|(^(0?2)([/])(29)([/])([2-9][0-9][0][48])$)|(^(0?2)([/])(29)([/])([1][89][2468][048])$)|(^(0?2)([/])(29)([/])([2-9][0-9][2468][048])$)|(^(0?2)([/])(29)([/])([1][89][13579][26])$)|(^(0?2)([/])(29)([/])([2-9][0-9][13579][26])$))"


#A: scott cole
#D: Simple, but it gave me trouble in the c#...
#U: http://regexlib.com/REDetails.aspx?regexp_id=280

regexp: {.*}
tree:   (({[\x01-\u007f]*)})
length: 2 to *
-------------------- Examples --------------------
ex(0):  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}
ex(1):  {}  {}  {r}  {}  {K}  {P}  {}  {e}  {-}  {}  {}  {}  {}  {a}  {}  {a}
ex(2):  {v}  {v}  {}  {H}  {,b}  {=}  {}  {}  {Y}  {_}  {$&}  {'H}  {)]}  {}
ex(3):  {c'M}  {}  {m!q}  {ru]}  { V}  {}  {Qu}  {}  {Lg}  {[}  {_6}  {_}  {EB}
ex(5):  {Ro1f}  {Uo}  {F!<}  {EN@}  {;$h}  {.}  {!}  {M[}  {G}  {\"Fxe}
ex(8):  {Ya}  {)85u }  {Z[}  {LBadeYbY}  {nsDZ`}  {s*3t}  {DhfQ|}  {}  {#8}


#A: kode kode
#D: This regular expression matches 10 digit US Phone numbers in different formats. Some examples are
1)area code in paranthesis.
2)space between different parts of the phone number.
3)no space between different parts of the number.
4)dashes between parts.
#U: http://regexlib.com/REDetails.aspx?regexp_id=283

regexp: ^\(?[\d]{3}\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$
tree:   (((((((?[0-9]{3}))?)[\t-\r -]?)[0-9]{3})[\t-\r -]?)[0-9]{4})
length: 10 to 14
-------------------- Examples --------------------
ex(0):  7016827810  0944340549  0660181705  1985786248  1915782062  2107444217
ex(1):  (955-6719817  852)-769 2521  (080 6704181  685 0120433  992) 6316098
ex(2):  (1837607740  (420)7062068  6720593242  585 9130900  (650122-9201
ex(3):  (728650 4710  108-3287182  (060)294-8518  864994-8082  (026)4758165
ex(5):  (5415583400  566)-406-5866  (793) 553-5954  (146) 603-8221  877 7334102
ex(8):  (133)856 9437  367) 250 9494  551)158 3283  772)7630564  782-925-4203


#A: Mike t
#D: Can be used to remove
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
//--&gt;
&lt;/SCRIPT&gt;
from embeded javascript
Should be used as case insensitive
#U: http://regexlib.com/REDetails.aspx?regexp_id=286

regexp: (\/\/-->\s*)?<\/?SCRIPT([^>]*)>(\s*<!--\s)?
tree:   ((((((((((((((((//)-)-)>)[\t-\r ]*)?<)/?)S)C)R)I)P)T)[\x01-=?-\u007f]*)>)((((([\t-\r ]*<)!)-)-)[\t-\r ])?)
length: 8 to *
-------------------- Examples --------------------
ex(0):  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>
ex(1):  <SCRIPTr>  </SCRIPTs><!--   //--><SCRIPT>  </SCRIPT>  <SCRIPTa><!-- 
ex(2):  //-->  </SCRIPT>  //--> <SCRIPT> <!--   //--> </SCRIPTx:><!-- 
ex(3):  //--><SCRIPTD>   <!--   </SCRIPT>  <!--   //-->  <SCRIPT> <!-- 
ex(5):  //--><SCRIPTM}e!>  <SCRIPT`>  //-->    </SCRIPTZN><!-- 
ex(8):  <SCRIPT>  //--></SCRIPT+8(}<S2>  //--> </SCRIPTp]>  <SCRIPTQSQ3q|I:>


#A: Gavin Sharp
#D: It verifies that: - Only letters, numbers and email acceptable symbols (+, _, -, .) are allowed - No two different symbols may follow each other - Cannot begin with a symbol - Ending domain must be at least 2 letters - Supports subdomains - TLD must be between 2 and 6 letters (Ex: .ca, .museum) - Only (-) and (.) symbols are allowed in domain, but not consecutively.
Problems:
See comments below
#U: http://regexlib.com/REDetails.aspx?regexp_id=295

regexp: ^(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\-+)|([A-Za-z0-9]+\.+)|([A-Za-z0-9]+\++))*[A-Za-z0-9]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6}$
tree:   (((((((([0-9A-Za-z]+_+)|([0-9A-Za-z]+-+)|([0-9A-Za-z]+.+)|([0-9A-Za-z]+++))*[0-9A-Za-z]+)@)(([0-9A-Z_a-z]+-+)|([0-9A-Z_a-z]+.))*)[0-9A-Z_a-z]{1,63}).)[A-Za-z]{2,6})
length: 6 to *
-------------------- Examples --------------------
ex(0):  Z@I.iY  l@C.lp  A@h.cS  w@k.eU  J@b.Wy  B@J.qQ  i@G.lF  J@P.xK  D@g.HL
ex(1):  m@D-C2Oj2MTfIeELzkqXlplYo5HxYQA.lSslI
ex(2):  q5-GY@7Y--J--HsRY9JMNHHfjV3EOMnn16igNgdvNysVGcF84x.jND
ex(3):  W--w_og@hh.1T4---TtY.YTQmJtuPtGOb2EO2bHJsmHmyMkhCXwytTgGE.hcl
ex(5):  e8EtT@e10_dlskG_jiYJ8R5SfHidZW6SKqCOG2mEQ.yVh
ex(8):  Ab@FwX.kD7v-------O.KL2yuHy.y9FlDu4J2gFLt5QnRzWElInkNvRfJTqWw.gbQtFO


#A: Dmitry Kandiner
#D: International phone number check - optional country code followed by area code surrounded with '-' or '(' and ')', or just an area code optionally starting with 0, followed by phone numder. The number itself may contain spaces and '-'
#U: http://regexlib.com/REDetails.aspx?regexp_id=296

regexp: ^(\+[1-9][0-9]*(\([0-9]*\)|-[0-9]*-))?[0]?[1-9][0-9\- ]*$
tree:   ((((((+[1-9])[0-9]*)(((([0-9]*)))|((-[0-9]*)-)))?0?)[1-9])[ -0-9]*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  2  9  5  1  6  4  4  5  1  3  2  9  7  1  7  8  3  4  4  8  5  3  4
ex(1):  6  +4-0-03-  4  +94-3-6   09  9  8  +6-1-07  +80-8-8  4  +7-5-02
ex(2):  +82-4-04-7  3  +1()412  +73-9-095  +267(57)0766  0944  03  0871  108
ex(3):  +21(8)43  +2(85)6824  3897  1  +790(267)0135  0372  72  5  43-  09084
ex(5):  98  022  +223242()759  +235(5)1675  +2-2-0619-  07  +5(572)05-03  60203
ex(8):  368220391  514-4654  1122064 7  07 -2-92  0708331  03  +762767(4)62945


#A: Joe Gass
#D: UK Phone Number Allows leading and trailing spaces and optional spaces after the dialing code.
Initially the expression I posted was
\s*0\d{4}\s*\d{6}\s*|\s*0\d{3}\s*\d{7}\s*
But this didn't include optional brackets e.g. (01603) 123123 or phone numbers in a London format e.g. 0208 123 1234
#U: http://regexlib.com/REDetails.aspx?regexp_id=297

regexp: (\s*\(?0\d{4}\)?\s*\d{6}\s*)|(\s*\(?0\d{3}\)?\s*\d{3}\s*\d{4}\s*)
tree:   (((((((([\t-\r ]*(?)0)[0-9]{4}))?)[\t-\r ]*)[0-9]{6})[\t-\r ]*)|((((((((([\t-\r ]*(?)0)[0-9]{3}))?)[\t-\r ]*)[0-9]{3})[\t-\r ]*)[0-9]{4})[\t-\r ]*))
length: 11 to *
-------------------- Examples --------------------
ex(0):  01000473516  06503837768  00531451540  04605469685  01994307216
ex(1):   (00514) 927149   (0116)8784363    (04743 104617    (01539 204395
ex(2):  (07457) 281629     0479  906 8264  0185) 5817516   (04873  173630 
ex(3):     09135   987650    (03479  428054      (0440)   3226558 
ex(5):    08637098515           0201) 081    4926       0941 082   0262     
ex(8):     (03159      906515           (0829  725   3662    


#A: Dennis Zweigle
#D: 167 different US telephone patterns. Options includes a)0 or 1 dial, b)area code, c).+-()space between number dial-area code-number.  
#U: http://regexlib.com/REDetails.aspx?regexp_id=298

regexp: (([01][\.\- +]\(\d{3}\)[\.\- +]?)|([01][\.\- +]\d{3}[\.\- +])|(\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}
tree:   ((((((((([01][ +-.])()[0-9]{3})))[ +-.]?)|((([01][ +-.])[0-9]{3})[ +-.])|(((([0-9]{3}))) ?)|([0-9]{3}[ -.]))?[0-9]{3})[ -.])[0-9]{4})
length: 8 to 16
-------------------- Examples --------------------
ex(0):  701-0404  689-4716  430 6598  364 6378  658 4139  829-5688  126 7216
ex(1):  0 (496)+158 3136  490 2671  981 7306  0 438+988-0669  390 0439
ex(2):  839.8631  612.8211  0.992+457-8264  376 2646  (969) 179.2528  287 6629
ex(3):  1.(950).984 6159  0.(280)980.5889  267.1065  0-(737)928-0112  112-1948
ex(5):  994 8082  (577)475-5238  248 0852  (490) 541 5581  400-6292
ex(8):  717-7406  219-5057  0 (195)-105.3643  293 2970  0-405+055.4826


#A: Dominic Allkins
#D: First attempt at reg ex - work in progress - can't quite get it to work absolutely correctly so any comments would be great.
Matches everything as it should apart from the last part of the IP, i.e. allows http://255.255.255.999 (which obviously it shouldn't but ran out of inspiration) so any corrections humbly and gratefully accepted.
TLD check is not complete - just added most of the major ones but easy to dd to if you want to.
BTW - you'll need to replace the & with just the ampersand in the reg ex
#U: http://regexlib.com/REDetails.aspx?regexp_id=301

regexp: ^(http|https|ftp)\://(((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([a-zA-Z0-9_\-\.])+\.(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum|uk|me))((:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*)$
tree:   (((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)((((((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]).){3}(((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]))|(([-.0-9A-Z_a-z]+.)(((co)m)|((ne)t)|((or)g)|((ed)u)|((in)t)|((mi)l)|((go)v)|(((ar)p)a)|((bi)z)|(((ae)r)o)|(((na)m)e)|(((co)o)p)|(((in)f)o)|((pr)o)|(((((mu)s)e)u)m)|(uk)|(me)))))(((:[0-9A-Za-z]*)?/?)[#-'+-9=?A-Z\_a-z~]*))
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://24.250.168.173  https://f.mil  http://b.biz
ex(1):  http://255.176.253.251/p  https://194.228.141.107:S
ex(2):  ftp://184.205.157.47/T  https://V.uk/  https://218.250.254.250:/
ex(3):  http://5.uk/wD4  ftp://.9L.museum/Gq  http://0q.coop:mHcu
ex(5):  http://-YAS.info81W  https://gr.me:dn  http://255.226.255.253:b/vE
ex(8):  https://225.46.231.204/eTFjk  ftp://FYy2l.int/i  ftp://69.73.106.50:Y/


#A: Carlos R. L. Rodrigues
#D: Checks if has the first and the last name, and check the capital letters.
Use with the RegExp.test method
#U: http://regexlib.com/REDetails.aspx?regexp_id=302

regexp: (^[A-ZÀ-Ü]{1}[a-zà-ü']+\s[a-zA-Zà-üÀ-Ü]+((([\s\.'])|([a-zà-ü']+))|[a-zà-ü']+[a-zA-Zà-üÀ-Ü']+))
ERROR:  rx: Embedded '^' unimplemented: in "(^[A-ZÀ-Ü]{1}[a-zà-ü']+\s[a-zA-Zà-üÀ-Ü]+((([\s\.'])|([a-zà-ü']+))|[a-zà-ü']+[a-zA-Zà-üÀ-Ü']+))"


#A: Carlos R. L. Rodrigues
#D: dd/mm/yy
Check dates between 1/1/1900 - 31/12/2099
#U: http://regexlib.com/REDetails.aspx?regexp_id=303

regexp: (^((((0[1-9])|([1-2][0-9])|(3[0-1]))|([1-9]))\x2F(((0[1-9])|(1[0-2]))|([1-9]))\x2F(([0-9]{2})|(((19)|([2]([0]{1})))([0-9]{2}))))$)
ERROR:  rx: Embedded '^' unimplemented: in "(^((((0[1-9])|([1-2][0-9])|(3[0-1]))|([1-9]))\x2F(((0[1-9])|(1[0-2]))|([1-9]))\x2F(([0-9]{2})|(((19)|([2]([0]{1})))([0-9]{2}))))$)"


#A: Jag fire
#D: Matches "clan" nicks/names.
#U: http://regexlib.com/REDetails.aspx?regexp_id=305

regexp: ^(\{|\[|\().+(\}|\]|\)).+$
tree:   (((({|[|()[\x01-\u007f]+)(}|]|)))[\x01-\u007f]+)
length: 4 to *
-------------------- Examples --------------------
ex(0):  {M}x  [=}Q  (7}4  (K}}  {(}r  (N)I  [8}w  [u]U  (S}a  {V)=  (/]u  (L}t
ex(1):  {z}j  (%]-  {0}|  {g)E  {-]'  {1)$  [}]#  (}}L  (2]:  {Y]}  (f)U  (}]V
ex(2):  {5]t;  (gX)ai  [4]U  [E}A  [f+}{<  (5}P  [I=]u  {9}{  [$)ZX  [!~)m
ex(3):  [M\"\")#f  [nk}s  {h}#*Z  {#*f}R  ())_G  [+^1}6[]  [v^8)/  (6Z3)0Fd
ex(5):  (6-TN}W(a  {-pU}@  (Pf Ny]OQa4*  {H?Ke.)=\"-:  (O6?#]}oo.  [JP]-&T
ex(8):  ({`onk]o2;69ku  {<}jSGH}CTl  (7)a  [szM&q]W-  {iBrr6]G}%W


#A: Nicholas Berardi
#D: Is used to evaluating domain names, none of the extras such as paths or protocols.
#U: http://regexlib.com/REDetails.aspx?regexp_id=306

regexp: ^(([\w][\w\-\.]*)\.)?([\w][\w\-]+)(\.([\w][\w\.]*))?$
tree:   (((([0-9A-Z_a-z][-.0-9A-Z_a-z]*).)?([0-9A-Z_a-z][-0-9A-Z_a-z]+))(.([0-9A-Z_a-z][.0-9A-Z_a-z]*))?)
length: 2 to *
-------------------- Examples --------------------
ex(0):  _p  n1  L6  H2  gU  ME  6g  mp  dz  CX  sl  QU  1X  sb  s1  bt  rw  NR
ex(1):  C2.tj  kE  vn.pO  1x  g1.1J  kR.oy  XF  _6.Up  G.G1.65  JK  Hs  1L  OF
ex(2):  S.tTN.dQV  qTP  dk.ap.j  wv.gl.WwQ  or.p  Xe.gI  G9..tWY  oPk.d
ex(3):  liw1.t_  o.vaY.STP  wWj5  J.gd  F.Vt.R87.  B3.Ub  lcD  ReS.xq7w
ex(5):  1ZT.zH  6zQrre.R  G8aJbh.wLr5  OT.8Ypw  0.KoTmF.sBqg  KXe.X6vb4U.we  9U
ex(8):  _Q6D.rby  E_b-_Gs.AYQl  AHXteyurU.cA5wPO  WM.gHM2UWSND.yW5Phpk  Gxu.2p


#A: Rico lour
#D: Regular expression to match a canadian postal code where it matches a string with or without the hyphen and in upercase or lowercase
#U: http://regexlib.com/REDetails.aspx?regexp_id=307

regexp: ^([A-Za-z]\d[A-Za-z][-]?\d[A-Za-z]\d)
tree:   (((((([A-Za-z][0-9])[A-Za-z])-?)[0-9])[A-Za-z])[0-9])
length: 6 to 7
-------------------- Examples --------------------
ex(0):  Z3X2q9  H8x0X8  O0E1M7  m4V3k3  O6r8G8  J8B8a9  S7s9I5  z8i5K8  d0M9J9
ex(1):  D3C3N1  k8h-3v2  p3B-0A2  l1c7P9  G2J6c5  Z0b1J0  O1N9q5  W7J-4x1
ex(2):  P4d9v8  R0G-3c0  X8y6y7  G3z1c1  l0a7z7  e4M-9n8  P3S3p5  E7m1r1
ex(3):  M6E9t9  r9G-0Z5  y1Y-4l8  l7I8R9  K5z4L1  f3P5S0  e5f-1T8  U2k-0G2
ex(5):  H6T1J5  e0x-6c9  r8k2J7  j9G2Z5  z5P-0A2  c2Z-7I1  Q3x8r8  S8Y7p5
ex(8):  Q2Q2h4  Z3d-8c6  d2E0N7  j4U-6V9  I5n-2n2  E0S3n0  N2c2a6  Y4l4D4


#A: Daren Salter
#D: UK Mobile phone regular expression.
I usually run this against a telephone field to split out landlines and mobile numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=308

regexp: ^07([\d]{3})[(\D\s)]?[\d]{3}[(\D\s)]?[\d]{3}$
tree:   ((((((07)[0-9]{3})[\x01-/:-\u007f]?)[0-9]{3})[\x01-/:-\u007f]?)[0-9]{3})
length: 11 to 13
-------------------- Examples --------------------
ex(0):  07701682781  07009443405  07490660181  07705198578  07624819157
ex(1):  07444T119791  07166957479  07014690485  07691_028N032  07652}638239
ex(2):  07505q135900  07507861748  07574!114E127  07941Y501703  07639C490345
ex(3):  07277j785553  07916482\\568  07591y357536  07088928|154  07185898025
ex(5):  07008334115  07736409096  07346488l557  07991576y621  07956174448
ex(8):  07877F350[583  07280i627182  07902373w572  07779$355151  07828v884z993


#A: John Smart
#D: This is just a regular special char expression used to get the hax0rs off your back (hopefully).  You can use this for regular open name checking if you wanted.  It only fails on the insert of anything other than a-z, A-Z, and ' or whitespace. I'm open to suggestions, but try to email them to me as well as posting them to help others.  Thanks.
#U: http://regexlib.com/REDetails.aspx?regexp_id=309

regexp: ^([a-zA-Z.\s']{1,50})$
tree:   [\t-\r '.A-Za-z]{1,50}
length: 1 to 50
-------------------- Examples --------------------
ex(0):  Z  M  C  R  G  r  F  d  Q  k  m  w  H  n  S  B  E  c  J  Z  S  I  K  e
ex(1):  i  D  T  .  p  w  D  j  r  V  g  U  H  C     M  o  M  d  B  n  b  x  P
ex(2):  .  C  nl  d  rH  cY  d  iM  jS  G  j.  Hj  k  jS  p  c  q'  fD  s  k  I
ex(3):  b  CXd  M  K  m  Cwl  ia  DyM  eoS  OPc  up  wxy  e  vwS  TK   'J.  K.D
ex(5):  WU  x  .  ZYj  Zde  FCp  K.Ryc  BPpZN  roh  LHS  AiV  i'  PnOKs  V
ex(8):  SQ  NU  WthJWw  UJ  KZD  UPbDLTlG  R  ywvCKsw  L  yI  njZ  meWFB  zKNd


#A: Michael Matusiewicz
#D: This Regular expression validates a string that contains all printable characters with a minimum length of 1 and maximum length of 5.
Obviously the min and max can be changed to meet the users needs.
^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$ This is the string, I keep getting &lt and other characters when I save it.
#U: http://regexlib.com/REDetails.aspx?regexp_id=310

regexp: ^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$
tree:   [!-~]{1,5}
length: 1 to 5
-------------------- Examples --------------------
ex(0):  !  n  X  D  D  |  g  K  w  +  M  (  Z  j  j  5  z  q  N  S  !  p  u  E
ex(1):  a  *  2  A  r  #  )  5  X  {  Q  F  [  k  O  `  [  u  n  0  @  ^  &  #
ex(2):  t6  N/  jD  0  *  E  qQ  o  Q_  h  f  f(  ?  w+  s  Y  Ba  @T  c8  [l
ex(3):  y  6  nJ  `^N  BY  l+  }  AF  -  ~  lY  2  F)^  x  a  Oq,  egx  \\\\e
ex(5):  n3Q  erS  )D  n  g}-  G}6Fi  wN79X  J\\+  ]=!  )Qr  (MK&0  i  E!  7t
ex(8):  -3  <PV  Y/  6M/g  q;Uxw  V  l5  -2K  z  bV;  lE>  o~@t6  ~6V  ir\",[


#A: gabe g
#D: Validates US phone numbers. Phone number can be delimited with dashes or spaces. Area code can optionally include parentheses. To optionally validate area codes, try this expression.
^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$
#U: http://regexlib.com/REDetails.aspx?regexp_id=314

regexp: ^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$
ERROR:  rx: Embedded '^' unimplemented: in "^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$"


#A: Jason N. Gaylord
#D: I modified the existing phone number regex for another user looking to only allow 082, 083, 084, or 072 exchanges. Written by Jason Gaylord
#U: http://regexlib.com/REDetails.aspx?regexp_id=315

regexp: ^\(?082|083|084|072\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$
tree:   (((((?0)8)2)|((08)3)|((08)4)|(((((((07)2))?)[\t-\r -]?)[0-9]{3})[\t-\r -]?)[0-9]{4}))
length: 3 to 13
-------------------- Examples --------------------
ex(0):  084  084  083  084  0724531280  083  083  0728303860  084  082
ex(1):  082  084  072806-5922  082  072)734 6347  072)-2569688  082  084
ex(2):  (082  084  083  084  082  (082  0724109723  083  084  083  (082  082
ex(3):  084  082  (082  072)784 4467  083  083  083  083  072 5988788
ex(5):  (082  084  083  084  072-169 1725  (082  082  083  083  083  083  083
ex(8):  072-720-4832  083  072)-266 1043  083  072-881 7861  082  082  083  082


#A: Felipe Braga
#D: This expression validates dates in the Brazilian d/m/y format from 1/1/1600 - 12/31/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999. Days and months must be 1 or 2 digits and may have leading zeros. Years must be 4 digit years, between 1600 and 9999. Date separator must be a slash (/)
#U: http://regexlib.com/REDetails.aspx?regexp_id=316

regexp: ^(?:(?:(?:0?[1-9]|1\d|2[0-8])\/(?:0?[1-9]|1[0-2]))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:(?:(?:31\/0?[13578]|1[02])|(?:(?:29|30)\/(?:0?[1,3-9]|1[0-2])))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:29\/0?2\/(?:(?:(?:1[6-9]|[2-9]\d)(?:0[48]|[2468][048]|[13579][26]))))$
ERROR:  rx: Embedded '$' unimplemented: in "^(?:(?:(?:0?[1-9]|1\d|2[0-8])\/(?:0?[1-9]|1[0-2]))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:(?:(?:31\/0?[13578]|1[02])|(?:(?:29|30)\/(?:0?[1,3-9]|1[0-2])))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:29\/0?2\/(?:(?:(?:1[6-9]|[2-9]\d)(?:0[48]|[2468][048]|[13579][26]))))$"


#A: Cal Guisti
#D: This is an update of Paul Miller's RegEx.  It will cut out literal <> but I haven't fully tested it, it's just a quick fix since his didn't work all that well.
I also took out the \s.  You could add this back in but I use this for very simple password verification, and I certainly have no use for spaces in my passwords.
#U: http://regexlib.com/REDetails.aspx?regexp_id=317

regexp: ^([0-9A-Za-z@.]{1,255})$
tree:   [.0-9@-Za-z]{1,255}
length: 1 to 255
-------------------- Examples --------------------
ex(0):  Z  y  j  f  Z  n  d  a  T  C  Y  n  S  1  L  e  .  4  I  4  0  H  L  Q
ex(1):  J  V  k  J  l  g  l  y  x  P  F  M  7  k  0  W  7  8  y  A  a  A  s  m
ex(2):  I  @d  J  I  9  g  eS  YF  A  y  xm  U  dk  N4  B  d  f  s  eU  c  y  X
ex(3):  3  61  sa1  Qe  4LS  b  9j  t  XFZ  EKS  2yA  V7  1  IxD  W1  Icm  7
ex(5):  qnb3g  ix  JcS  yo6O  xKDiy  oM73.  uCNs  BHENw  @X  9Sm  Pa2  zQ@
ex(8):  GeQ3uS  @O  CxoUIgtw  hU6sWYG  hwKr5Y  Y8k3  KlZ  9guVuW  6k  0VaXcu  G


#A: Markus Unterauer
#D: Correct German DateTime. Does not check leap year rules!
Possible Formats of date part:
D.M.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.M.YYYY
Possible formats of time part:
h:mm or hh:mm
#U: http://regexlib.com/REDetails.aspx?regexp_id=319

regexp: ^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2})$|^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2}\s([1-9]|[0-1]\d|[2][0-3])\:[0-5]\d)$
ERROR:  rx: Embedded '$' unimplemented: in "^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2})$|^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2}\s([1-9]|[0-1]\d|[2][0-3])\:[0-5]\d)$"


#A: Dany Lauener
#D: Date with leap years. Accepts '.' '-' and '/' as separators
d.m.yy to dd.mm.yyyy (or d.mm.yy, etc)
Ex: dd-mm-yyyy   d.mm/yy   dd/m.yyyy  etc etc
Accept 00 years also.
#U: http://regexlib.com/REDetails.aspx?regexp_id=320

regexp: ^((((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|[12]\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|1\d|2[0-8])02((1[6-9]|[2-9]\d)?\d{2}))|(2902((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$
tree:   ((((((((0?[1-9])|([12][0-9])|(3[01]))[-./])((0?[13578])|(1[02])))[-./])(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((((0?[1-9])|([12][0-9])|(30))[-./])((0?[13-9])|(1[012])))[-./])(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|(((((((0?[1-9])|(1[0-9])|(2[0-8]))[-./])0?)2)[-./])(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((((29)[-./])0?)2)[-./])((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00))))|(((((0[1-9])|([12][0-9])|(3[01]))((0[13578])|(1[02])))(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((0[1-9])|([12][0-9])|(30))((0[13-9])|(1[012])))(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|(((((0[1-9])|(1[0-9])|(2[0-8]))0)2)(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((29)0)2)((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00)))))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  12-2-96  30.6-68  28-9.65  1.2-04  170568  281160  4.8/19  13/2.19
ex(1):  29/2-00  22121842  18.10.2284  25-2-5134  07-4-3063  30.10.7062  030213
ex(2):  300619  29-2-84  310599  30066199  25.02.7408  29-02.4400  07-05.3043
ex(3):  30013798  8-11/1847  19021863  23.02-9281  21-1.6046  29.2/7200  260290
ex(5):  14021788  02111914  270223  29-2.2800  8.02-1622  18.2-50  081285
ex(8):  08101795  07/02-29  29-02/1608  29-2/00  29021600  05108961  29026000


#A: Jag fire
#D: Matches simple IP addresses. It's not too complex or long, but it does the job if you want something short/simple.
#U: http://regexlib.com/REDetails.aspx?regexp_id=321

regexp: ^(([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+))$
tree:   (((((((([012]*[0-9]+)[0-9]+).)(([012]*[0-9]+)[0-9]+)).)(([012]*[0-9]+)[0-9]+)).)(([012]*[0-9]+)[0-9]+))
length: 11 to *
-------------------- Examples --------------------
ex(0):  70.16.82.78  10.09.44.34  05.49.06.60  18.17.05.19  85.78.62.48
ex(1):  207.057.274.030  64.023.068.212  11.267.206.012  178.43.299.224
ex(2):  2341.43.10838.2269  22302.1193.24345.00967  214.1200.11254.1136
ex(3):  110496884.2000568.024058.2095353  222217.1509631.212280.01052
ex(5):  5200813.211225.2026.0114232445761  23672455.26848138.102802.020283490
ex(8):  13893710816551.100010024062040.09874482.201207275631953126


#A: Asim Goheer
#U: http://regexlib.com/REDetails.aspx?regexp_id=322

regexp: <[iI][mM][gG]([^>]*[^/>])
tree:   ((((<[Ii])[Mm])[Gg])([\x01-=?-\u007f]*[\x01-.0-=?-\u007f]))
length: 5 to *
-------------------- Examples --------------------
ex(0):  <IMgr  <iMGa  <IMG?  <IMGg  <ImG!  <ImG}  <Img=  <iMGX  <img\"  <ImgI
ex(1):  <ImG_c  <iMGPu  <img=  <imgz  <IMgB%  <ImGE  <ImgV  <ImG,^  <iMGZS
ex(2):  <Imgh$k  <iMG,5  <imgN  <IMGg  <imgY  <IMG\"%  <imGd  <iMGo  <imG/-]
ex(3):  <img?3  <IMGY[k  <IMgpH  <ImgA,  <iMguAxs  <img;(  <IMg+@k  <Img(~
ex(5):  <Img5  <Img7[Y  <iMgEg7\\  <iMG&cu69  <img+A  <iMgX  <iMGdd  <IMGhLb#
ex(8):  <IMg2CiQK  <Img?)bjf=i  <ImG2  <IMGN\\iH  <IMgnLjr5O|  <Imgl7cN@


#A: Gabriel Fróes
#D: This regular expressions matches CNPJ number. CNPJ is a Registration Number of Brazilian Companies.
#U: http://regexlib.com/REDetails.aspx?regexp_id=323

regexp: \d{2}.?\d{3}.?\d{3}/?\d{4}-?\d{2}
tree:   (((((((([0-9]{2}[\x01-\u007f]?)[0-9]{3})[\x01-\u007f]?)[0-9]{3})/?)[0-9]{4})-?)[0-9]{2})
length: 14 to 18
-------------------- Examples --------------------
ex(0):  70168278100944  34054906601817  05198578624819  15782062210744
ex(1):  5258482599035-69  72079518068284  07|6624794573-41  83846171/099736
ex(2):  63~510f725/372984  06794F5748759-09  36824262/749034  563069877/725366
ex(3):  804321098748096  613209@3628178-95  22328377/564417  02e484564/219816
ex(5):  286023785275-95  68m773%253/0518-51  79139157/756625  15637952/628177
ex(8):  45045448392445  35&029e695/674258  59773559631419  60910d557/239980


#A: Ed Preston
#D: Pulls out comments (both Rem and ') and string literals from VB or VBScript. Usefull for spell checking or review.
Notes: The VBScript for "Rem" documentation says that it must be followed by a space but VBScript seems to accept tab characters as well.
The multiline flag is assumed for this search.
#U: http://regexlib.com/REDetails.aspx?regexp_id=324

regexp: ('.*$|Rem((\t| ).*$|$)|"(.|"")*?")
ERROR:  rx: Embedded '$' unimplemented: in "('.*$|Rem((\t| ).*$|$)|"(.|"")*?")"


#A: stephen lam
#D: valid date base on Month
#U: http://regexlib.com/REDetails.aspx?regexp_id=325

regexp: ^\d{2}\s{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Apr|Sep|Oct|Nov|Dec)\s{1}\d{4}$
tree:   (((([0-9]{2}[\t-\r ])(((Ja)n)|((Fe)b)|((Ma)r)|((Ap)r)|((Ma)y)|((Ju)n)|((Ju)l)|((Ap)r)|((Se)p)|((Oc)t)|((No)v)|((De)c)))[\t-\r ])[0-9]{4})
length: 11 to 11
-------------------- Examples --------------------
ex(0):  70 Nov 0047  35 Apr 8965  03 Jan 3073  78 Oct 4763  20 Jul 4234
ex(1):  48 Jun 0548  93 Jan 9220  51 Sep 1074  44 Oct 4628  66 Jan 4192
ex(2):  75 Apr 1118  48 Jun 9271  99 Jul 0461  72 Apr 7611  41 Jul 3668
ex(3):  16 Jun 9647  86 Nov 2652  13 Jun 9046  45 Jul 6941  83 Jan 8468
ex(5):  51 Dec 7385  87 Apr 8539  82 Jun 8951  75 Nov 0913  58 Apr 0050
ex(8):  73 Sep 7466  44 Jun 7070  23 Feb 1065  00 May 5622  60 Sep 4863


#A: Dany Lauener
#D: Date expression validator with format YYMMDD
Validates leap years.
Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years !
#U: http://regexlib.com/REDetails.aspx?regexp_id=326

regexp: ^((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)$
tree:   (([0-9]{2}((((0[13578])|(1[02]))((0[1-9])|([12][0-9])|(3[01])))|(((0[13-9])|(1[012]))((0[1-9])|([12][0-9])|(30)))|((02)((0[1-9])|(1[0-9])|(2[0-8])))))|(((((([02468][048])|([13579][26]))0)2)2)9))
length: 6 to 6
-------------------- Examples --------------------
ex(0):  101030  480229  000229  600229  680226  770731  710205  450415  810730
ex(1):  000229  420414  880229  061024  720229  380706  800229  911224  880229
ex(2):  520229  130228  480229  440203  280229  620320  000229  141231  520229
ex(3):  880229  760229  951221  360229  240229  440229  970808  480224  240229
ex(5):  800229  300201  160229  210917  160229  770115  041026  750118  280229
ex(8):  320229  400201  710211  400229  600229  840229  760226  980206  880229


#A: Richard Slade
#D: Validates a UK Bank Sort code
#U: http://regexlib.com/REDetails.aspx?regexp_id=327

regexp: ^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$
tree:   (((([0-9]{2}-)[0-9]{2})-)[0-9]{2})
length: 8 to 8
-------------------- Examples --------------------
ex(0):  70-16-82  78-10-09  44-34-05  49-06-60  18-17-05  19-85-78  62-48-19
ex(1):  62-21-07  44-42-17  30-51-47  68-59-52  42-36-18  43-63-26  76-90-26
ex(2):  21-38-17  75-06-80  42-16-18  63-11-99  96-07-59  92-79-26  06-70-18
ex(3):  03-16-43  11-73-63  05-08-18  95-17-55  50-09-31  43-35-09  61-94-28
ex(5):  59-52-61  14-98-02  98-81-08  03-87-06  19-48-32  66-85-18  74-57-61
ex(8):  09-68-48  16-59-44  84-38-67  13-41-85  58-15-94  63-29-58  76-71-81


#A: Roger Ramjet
#D: Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is valid: !#$%^&amp;amp;*-+~/'`|{}@xyz.com
Sorry looks like this site is mangling the quote and ampersand characters - you'll have to fix that yourself.
#U: http://regexlib.com/REDetails.aspx?regexp_id=328

regexp: ^((\"[^\"\f\n\r\t\v\b]+\")|([\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+(\.[\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+)*))@((\[(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))\])|(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))|((([A-Za-z0-9\-])+\.)+[A-Za-z\-]+))$
tree:   ((((("[\x01-\a\x0e-!#-\u007f]+)")|([!#-'*+-/-9A-Z^-~]+(.[!#-'*+-/-9A-Z^-~]+)*))@)((([(((((((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))))])|(((((((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])))|(([-0-9A-Za-z]+.)+[-A-Za-z]+)))
length: 5 to *
-------------------- Examples --------------------
ex(0):  \"M\"@[253.7.253.3]  \"6\"@[230.250.255.8]  \"b\"@231.223.9.222  s@3.F
ex(1):  \"N\"@[221.235.250.230]  %@d.w  \"2\"@228.92.252.213  \"5\"@1.X
ex(2):  Bd.K.6@3S.sF  \"u\"@[207.255.9.227]  \"M\"@Xj.z
ex(3):  \"~\"@251.208.103.253  \"|e\"@97I.zM.Zn  m*B.1+&.T!.RNs@251.205.1.245
ex(5):  |N6.0JF+V.t6*Q.xIZ.9d@9mB.t.exB.-  p1W@207.4.252.45
ex(8):  \"+X,|*\"@tUyS.F.mA.p6F0dhQp.FuPvBZ.kDwDvW


#A: Richard Slade
#D: Validates a UK mobile phone number in International format
#U: http://regexlib.com/REDetails.aspx?regexp_id=331

regexp: ^[+]447\d{9}$
tree:   ((((+4)4)7)[0-9]{9})
length: 13 to 13
-------------------- Examples --------------------
ex(0):  +447701682781  +447009443405  +447490660181  +447705198578
ex(1):  +447820622107  +447444217305  +447147685952  +447423618436
ex(2):  +447006697213  +447817750680  +447421618631  +447199960759
ex(3):  +447018559943  +447031643117  +447363050818  +447951755500
ex(5):  +447619428054  +447087595261  +447149802988  +447108038706
ex(8):  +447518745761  +447979200096  +447848165944  +447843867134


#A: Tomas Andrysek
#D: reg. expr. 4 checking 24 time
#U: http://regexlib.com/REDetails.aspx?regexp_id=332

regexp: ^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))$
tree:   ((([0-9]|([01][0-9])|(2[0-3])):)([0-9]|([0-5][0-9])))
length: 3 to 5
-------------------- Examples --------------------
ex(0):  1:4  20:22  6:43  11:00  20:5  7:10  00:1  00:4  20:3  22:03  22:42
ex(1):  6:0  20:3  11:4  7:46  23:35  10:51  13:9  17:8  13:26  5:05  4:7
ex(2):  2:6  1:0  23:28  07:3  0:8  20:9  7:52  2:44  21:16  9:43  9:40  1:31
ex(3):  9:9  05:9  07:35  7:33  3:9  13:37  22:12  22:8  20:40  0:1  18:8
ex(5):  21:1  20:31  08:3  23:0  6:9  22:7  7:7  14:39  22:06  0:9  21:6  21:02
ex(8):  22:09  03:35  06:40  6:15  02:0  7:17  12:56  23:8  21:4  20:7  23:40


#A: bilou mcgyver
#D: does not allow IP for domain name : hello@154.145.68.12
does not allow litteral addresses "hello, how are you?"@world.com
allows numeric domain names
after the last "." minimum 2 letters
#U: http://regexlib.com/REDetails.aspx?regexp_id=333

regexp: ^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$
tree:   (((((([0-9A-Za-z]([-._]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([-.]?[0-9A-Za-z]+)*).)[A-Za-z]{2,})
length: 6 to *
-------------------- Examples --------------------
ex(0):  Z@H.Xg  V@t.Za  p@C.FO  w@z.ZB  d@P.wV  v@D.eK  Z@m.PE  m@c.qR  K@G.NU
ex(1):  v.0@L.LD  I_L@m-1.br  p@4.qD  L@O.uv  q7@Z4.yX  r-n@8v.IP  V@h.RU
ex(2):  XNc@vor0.pHZ  C@zR.Vil  s@5xq.msA  c@4g-r.R.CMb  O@u8f1.GF  fL@X.sid
ex(3):  l_Nvz3.jDU@yL-c.MJm.vQfz  d@D.LydNS5.Aksg  x@0O.QaUD  m0gn.b@e5.qVv.MXo
ex(5):  h-8JtR9enNQ.6_GZv4h5ZS@88.AE2-AL9A.zlbBrz  YlNGh@rYaT.bHVysy
ex(8):  5WcqH.OD1U.XoUEv19tmm0E@pvUBuEhR.jBMYq


#A: Demo Gorgon
#D: Whilst writing a plain-text to HTML function, I ran into the problem of links that users had written with <a> tags (as opposed to just writing the URL) were linking improperly.  This regular expression returns many types of URL, and preceding characters, if any.  This allows you to handle each type of match appropriately
#U: http://regexlib.com/REDetails.aspx?regexp_id=334

regexp: \b(((\S+)?)(@|mailto\:|(news|(ht|f)tp(s?))\://)\S+)\b
ERROR:  rx: \b (boundary) unimplemented: in "\b(((\S+)?)(@|mailto\:|(news|(ht|f)tp(s?))\://)\S+)\b"


#A: Matt Biggin
#D: This matches Java class names such as "com.test.Test". It's being used within an XML Schema to validate classname as specified in XML documents.
#U: http://regexlib.com/REDetails.aspx?regexp_id=335

regexp: ^(([a-z])+.)+[A-Z]([a-z])+$
tree:   ((([a-z]+[\x01-\u007f])+[A-Z])[a-z]+)
length: 4 to *
-------------------- Examples --------------------
ex(0):  jtQq  k Xn  yIJk  aaVa  rUZk  n=Ej  apSq  k`Du  z:Pl  l Lq  z0My  bMTl
ex(1):  p*So  tjYs  zBLa  a~Yl  v(Ws  rNMk  d}Kw  d2Ec  c-Zd  a_Xq  fLAf  d+Go
ex(2):  tjMfyQhc  i0Da  zMoh&Nlv  petx#Kwi  uKzeUUd  oJu(Qyp  s+y,Ys  xrqipYPa
ex(3):  a>qi@gMDj  y,qrSod]Df  eevAnrvzCMt  pkRjuVMocb  popWHcu  ywLfEMjfy
ex(5):  e]eejteHsan;Um  jlu^tx3Fryn  n:gemyg!n:Ibv  bnzz)cvwsYOodb  yvSsahib
ex(8):  sftyzsmhJKztt  hsx!sloxdijn.oxwlsopsYbddmtqjmfmlInargultkn{Ngwftxrjl


#A: Andrew Deren
#D: Matches variable names/identifier from C# (and most other languages)
#U: http://regexlib.com/REDetails.aspx?regexp_id=336

regexp: ^[a-zA-Z_][a-zA-Z0-9_]*$
tree:   ([A-Z_a-z][0-9A-Z_a-z]*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  _  q  k  o  e  H  k  n  m  L  o  I  T  O  p  r  e  K  m  K  V  i  w  B
ex(1):  j  Z  Ha  q  NI  J  O  XY  i  vy  nT  re  Xt  e  sS  F  a  n  Xl  l6
ex(2):  jU  i  P  Uf  _  We1  TBs  _nz  I  Km9  hO  NHC  QgV  hh  IN  GA  s  A
ex(3):  O0Sx  E6mw  e  iQ  k4X  uJe  LefA  E9wI  e9Jk  HID  X6_  j  m  XYej
ex(5):  P12F  TpIAOt  z8vZ  kDHFj  n5z  zb  T  U0  G  Ml0Pq  I  ab  h  NK  _8v
ex(8):  k0ULle  Zhray1G4n  p  x8wF1  vL  JXzh_g  gJ5NZcbC  mT_7x4w6L  jZebV


#A: Mike Stancombe
#U: http://regexlib.com/REDetails.aspx?regexp_id=337

regexp: (at\s)(?<fullClassName>.+)(\.)(?<methodName>[^\.]*)(\()(?<parameters>[^\)]*)(\))((\sin\s)(?<fileName>.+)(:line )(?<lineNumber>[\d]*))?
ERROR:  rx: '(?...' unimplemented: in "(at\s)(?<fullClassName>.+)(\.)(?<methodName>[^\.]*)(\()(?<parameters>[^\)]*)(\))((\sin\s)(?<fileName>.+)(:line )(?<lineNumber>[\d]*))?"


#A: Martin Henningsson
#D: Swedish phone numbers according to SIS standard
#U: http://regexlib.com/REDetails.aspx?regexp_id=338

regexp: ^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$
tree:   (((((((+[0-9]{2}) )[1-9])[0-9]{0,2}) )|((0[0-9]{1,3})-))(([0-9]{2}( [0-9]{2}){2})|(([0-9]{3}( [0-9]{3})*)( [0-9]{2})+)))
length: 9 to *
-------------------- Examples --------------------
ex(0):  +10 4 04 73 51  +96 5 03 83 77  +78 1 53 14 51  03-348 18  04-094 80
ex(1):  071-668 53  +41 8 877 051 47  +13 629 237 711 18  07-90 14 56
ex(2):  0768-042 723 530 03  +61 86 30 32 65  +21 19 748 213 63
ex(3):  0465-34 08 62  088-05 08 18  06-43 90 95  +35 355 505 326 485 28 05
ex(5):  078-325 298 810 803 870 09 85 15 33 13  +57 4 10 22 09
ex(8):  +24 81 85 21 30  024-589 815 946 329 587 671 37 85 39 27 37


#A: Jonathan Crossland
#D: Detects HTML tags open and/or closed with and without whitespace or characters in between. Good for stripping all tags from a string.
#U: http://regexlib.com/REDetails.aspx?regexp_id=339

regexp: >(?:(?<t>[^<]*))
ERROR:  rx: '(?...' unimplemented: in ">(?:(?<t>[^<]*))"


#A: Rick Spiewak
#D: Credit card validator for AMEX, VISA, MasterCard only. Allows spaces, dashes, or no separator between digit groups according to the layout (4-6-5 for AMEX, 4-4-4-4 for Visa and Mastercard)
#U: http://regexlib.com/REDetails.aspx?regexp_id=340

regexp: ^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}
ERROR:  rx: Embedded '^' unimplemented: in "^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}"


#A: Paul Auger
#D: This allows a sequence of real numbers to be added, separated by a comma (required) and a space (optional).  Based pretty heavily on an expression by Steven Smith on this site.
#U: http://regexlib.com/REDetails.aspx?regexp_id=341

regexp: ^((\d?)|(([-+]?\d+\.?\d*)|([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d+\.?\d*))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d+\.?\d*)))$
tree:   ([0-9]?|(((([+-]?[0-9]+).?)[0-9]*)|((([+-]?[0-9]*).?)[0-9]+))|((((((([+-]?[0-9]+).?)[0-9]*),) ?)*((([+-]?[0-9]+).?)[0-9]*))|(((((([+-]?[0-9]*).?)[0-9]+),) ?)*((([+-]?[0-9]*).?)[0-9]+))|(((((([+-]?[0-9]+).?)[0-9]*),) ?)*((([+-]?[0-9]*).?)[0-9]+))|(((((([+-]?[0-9]*).?)[0-9]+),) ?)*((([+-]?[0-9]+).?)[0-9]*))))
length: 0 to *
-------------------- Examples --------------------
ex(0):      2        1    2    0  2    6  4    2  9  0        4  4  7  5      6
ex(1):    3  1, +8.5  5  6  31    84  8  +6.8, +29  9.4  8.3, 2  2  66  07, +.9
ex(2):    3.5    .4, -237  45  +264  57.    +979  1    -438  +96
ex(3):  -0668  68256      23351, 453  098626,0.  -457826, +011, +017.69  +88
ex(5):  +11.  8630,2.5933, 4710.0913,+3.245, -0.922  2  8    +37.184
ex(8):  6  +06415622,2520020,510008124


#A: Pete Samwel
#D: Matches a file name to be either a .wma or .mp3 file. This can be used to check file uploads to make sure they are of a certain type. Substitute letters where appropriate for specific file types. To include more simply add logical 'or' (|) operator and append.
#U: http://regexlib.com/REDetails.aspx?regexp_id=343

regexp: (.*\.([wW][mM][aA])|([mM][pP][3])$)
ERROR:  rx: Embedded '$' unimplemented: in "(.*\.([wW][mM][aA])|([mM][pP][3])$)"


#A: Joseph Warwick
#D: Heres my sql clause parser regexp for recordset filtering. Does recursive query parsing all by its self. Only problem I cant figure is how to match comma separated lists of quoted strings. Tell me if you figure out how!
The unicodes in the re was put in by the entry form please replace them with their ascii equivalents to use it.
#U: http://regexlib.com/REDetails.aspx?regexp_id=347

regexp: (NOT)?(\s*\(*)\s*(\w+)\s*(=|<>|<|>|LIKE|IN)\s*(\(([^\)]*)\)|'([^']*)'|(-?\d*\.?\d+))(\s*\)*\s*)(AND|OR)?
tree:   (((((((((((NO)T)?([\t-\r ]*(*))[\t-\r ]*)[0-9A-Z_a-z]+)[\t-\r ]*)(=|(<>)|<|>|(((LI)K)E)|(IN)))[\t-\r ]*)(((([\x01-(*-\u007f]*)))|(('[\x01-&(-\u007f]*)')|(((-?[0-9]*).?)[0-9]+)))(([\t-\r ]*)*)[\t-\r ]*))(((AN)D)|(OR))?)
length: 3 to *
-------------------- Examples --------------------
ex(0):  _>5  0=()  t<3  X=()  u<''  iLIKE''  ALIKE''  n<>()  k>()  3<''  y>''
ex(1):  NOT 5> (|) )   NOTv ='Y' )OR  NOT3 >() )AND   (jLIKE ()  AND
ex(2):   (  c <  ()AND  NOT  ((  JC> (K) ))    (( 8LIKE  -97.28  )  
ex(3):  NOT (((z6   >   ''   ) OR     (3H   <>  'L,'    OR
ex(5):  NOT (((((QMhHIN 'Zy(xr')))OR  NOT ( M50   <>   -364790     )     AND
ex(8):  NOT  ((((((((  Q     <>        -0043024    ))))))))        


#A: Vitaly Kompot
#D: This is my basic phone number verification. it allows a + - , signs digits, spaces and blank entry
#U: http://regexlib.com/REDetails.aspx?regexp_id=350

regexp: (^(\+?\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)
ERROR:  rx: Embedded '^' unimplemented: in "(^(\+?\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)"


#A: Steve Fisher
#D: Validates Microsoft Project-type duration entries. Accepts a number and a unit. The number part can be integer or decimal. The unit can be several variations of weeks, days, and hours: e.g., w, wk, week, ws, wks, weeks are all valid. Whitespace between the number and the unit is optional: e.g., 1d, 2 days, 3.5w are all valid. Captures the number value in a group named num and the unit string in a group named 'unit'.
#U: http://regexlib.com/REDetails.aspx?regexp_id=351

regexp: ^\s*(?'num'\d+(\.\d+)?)\s*(?'unit'((w(eek)?)|(wk)|(d(ay)?)|(h(our)?)|(hr))s?)(\s*$)
ERROR:  rx: '(?...' unimplemented: in "^\s*(?'num'\d+(\.\d+)?)\s*(?'unit'((w(eek)?)|(wk)|(d(ay)?)|(h(our)?)|(hr))s?)(\s*$)"


#A: David Yack
#D: Limit Length - limit the length of a text box or other area to contain any character plus new line
#U: http://regexlib.com/REDetails.aspx?regexp_id=352

regexp: ^(.|\n){0,16}$
tree:   ([\x01-\u007f]|[\n]){0,16}
length: 0 to 16
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      5  \n  \n  ~        X      \n    \n      \n  \n  P      \n  \n  d
ex(2):      2\n    \n\n  c\n    1:      \n{  \n  \n    ~\n  $\n    `  a    \n;
ex(3):  \n9  x\n  +    \ni\n    #=  \n\n\n  8    z\n  \n)  0\np  \n  &  k  -0
ex(5):  \n\n    \nQ<  aP  ^GX  ]  \n0\n3  ~\n\n  \n\"^0  \"\nO  \n#\n  \n@\n
ex(8):  \n~\n]\n\ne  5\n\n!L`2  \nt\n\n:\n  h2\n\nt_t  \nyt\n\ni  !\n\n  8


#A: Doug Moore
#D: This expression will match all of the commands(escape codes) used in ANSI files.  These are what were used to create the colors/blocks on BBS's for those of us that once dialed into them.
http://www.wikipedia.org/wiki/ANSI_escape_code has a reference for ANSI escape codes.
http://idledreams.net/lordscarlet/posts/153.aspx shows an example of the engine I have created surrounding the expression
#U: http://regexlib.com/REDetails.aspx?regexp_id=354

regexp: (?s)(?:\e\[(?:(\d+);?)*([A-Za-z])(.*?))(?=\e\[|\z)
ERROR:  rx: '(?...' unimplemented: in "(?s)(?:\e\[(?:(\d+);?)*([A-Za-z])(.*?))(?=\e\[|\z)"


#A: Darren Neimke
#D: Matches C style strings allowing for escaped string delimiters to be included in the match.
ALTERED 13-Dec-2003
-------------------
Previous pattern was :
"([^"](?:\\.|[^\\"]*)*)"
Changed to:
"([^"]*(?:\\.|[^\\"]*)*)"
Making the first character after the opening quote optional allows the pattern to match on empty quotes: "".
#U: http://regexlib.com/REDetails.aspx?regexp_id=355

regexp: "([^"](?:\\.|[^\\"]*)*)"
tree:   (("([\x01-!#-\u007f]((\[\x01-\u007f])|[\x01-!#-[]-\u007f]*)*))")
length: 3 to *
-------------------- Examples --------------------
ex(0):  \"V\"  \":\"  \",\"  \"T\"  \"D\"  \"i\"  \")\"  \"l\"  \"?\"  \",\"
ex(1):  \"?\"  \">\"  \"J\"  \"m\"  \"I\"  \":\\s\"  \"o\"  \"?\"  \"O\"
ex(2):  \"<\"  \">\"  \"zY\"  \"x\\=\"  \"(iy\"  \":\"  \"x\\J\"  \"'b^\\5\"
ex(3):  \"}\\d\"  \">oTU\\X\"  \"/\\6\\`\"  \"}\\n\"  \"lY4kO\"  \"5\"
ex(5):  \"8\\~\\6\\/\\J\"  \"^\\`,{FLr%W\"  \"z\\\\\\,\\o\"  \"6\"
ex(8):  \"#tS6r|5%_!\"  \"|\"  \"v\"  \"uCF\\J-:wZ3TK\"  \"3\\b\"


#A: Darren Neimke
#D: This is my all-time favourite e-mail validator.  I've used it for years and it's never failed me :-)
#U: http://regexlib.com/REDetails.aspx?regexp_id=356

regexp: (\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})
tree:   (((((((([0-9A-Z_a-z][-.0-9A-Z_a-z]*)[0-9A-Z_a-z])@)[0-9A-Z_a-z])[-.0-9A-Z_a-z]*)[0-9A-Z_a-z]).)[0-9A-Z_a-z]{2,3})
length: 8 to *
-------------------- Examples --------------------
ex(0):  _p@BO.cV  4H@cc.wj  sM@9D.d4  QD@Lf.AC  vG@OE.cE  DS@Uq.AX  Um@hF.V4
ex(1):  _SO@ns.a6  go@uYE.5Yt  yO@j0G.Ju  HbD@DFZ.Ws  Ez@ZU.dbu  oQ@yS.P5
ex(2):  GT@NU.56  4Z5@LXjp.mf  IY@qUJ.NDF  tM@Xu.Ce  yQ@2yuU.sW  cj@uc1F.0Ex
ex(3):  AY@Lx.Vv  TCn@2upuz.X0w  jG2@IVZT.F_  VCnd@pZC9u.UD  YcMu@WyUMI.de
ex(5):  mKdcjJ@mBH6.rt0  cPp@o8.QI  908@jVpw.hPG  c4hc@R-WGj2.5d
ex(8):  Y3UZKG3@qZ.XS  GtFj@RAs0a.lDc  47@3Wzx8M.Rd  Gz7I@numV.eP


#A: Darren Neimke
#D: Matches filenames.
UPDATED on 1st Jan 2004.
#U: http://regexlib.com/REDetails.aspx?regexp_id=357

regexp: ^([a-zA-Z]\:)(\\[^\\/:*?<>"|]*(?<![ ]))*(\.[a-zA-Z]{2,6})$
ERROR:  rx: '(?...' unimplemented: in "^([a-zA-Z]\:)(\\[^\\/:*?<>"|]*(?<![ ]))*(\.[a-zA-Z]{2,6})$"


#A: Volker Roth
#D: We've come across the situation where we had to extract the IIS-Log entries without the header information. The data is far more complex than the sample given.
Explanation:
^[^#] = lines not beginnin with #
([^ ]+ ){6} = 6 times no space until one space
[^ ]+ = no spaces allowed...
$ = ...until end of line
For further explanation don't hesitate to write E-Mail.
#U: http://regexlib.com/REDetails.aspx?regexp_id=358

regexp: ^[^#]([^ ]+ ){6}[^ ]+$
tree:   (([\x01-"$-\u007f]([\x01-\x1f!-\u007f]+ ){6})[\x01-\x1f!-\u007f]+)
length: 14 to *
-------------------- Examples --------------------
ex(0):  V: , T D i ) l  ?, W ? B E ? P  2T R _ t 9 w Z  r@ M > * V . e
ex(1):  *$ 5 6 } w C (  8# x w q c z |  /c ) Q @ 7 ? >  6H @ k M q ' w
ex(2):  Pp r[ | Ls F$ 7@ }  ?^3 ( x8 2# >P )7 G{  *XC \" , &G #J ? 8
ex(3):  /8c= 2$ ni 7Be 7v F ..  NP# $b| B ~O Q)& 3 1&  xG 8 d$ s \" @8n ]O
ex(5):  DMmG 6~H? o h-Soe s>W'# T Jir)  {t x &6lf 7 Y%K _C=S s~|uZ
ex(8):  8fD]TB :z|lRCZx SA]NU BX a=FsvW rg:U :~xX


#A: mana deys
#D: For testing 24H based time entry.  Tests if there is a colon to separate the hours from the minutes
#U: http://regexlib.com/REDetails.aspx?regexp_id=360

regexp: ^(([0-9])|([0-1][0-9])|([2][0-3])):?([0-5][0-9])$
tree:   ((([0-9]|([01][0-9])|(2[0-3])):?)([0-5][0-9]))
length: 3 to 5
-------------------- Examples --------------------
ex(0):  100  2055  415  0906  2014  2037  0335  0415  2058  511  0355  900
ex(1):  1824  20:59  12:52  2354  2241  0229  221  2055  0433  4:50  6:02  111
ex(2):  347  456  19:32  125  7:04  6:23  1224  0559  047  1438  017  914  3:48
ex(3):  0241  22:20  2047  3:39  2049  1:31  0816  1140  1638  2209  10:46
ex(5):  322  2222  9:08  2051  23:35  01:38  526  22:48  2132  00:36  05:36
ex(8):  22:15  23:31  2:31  2124  0519  0:02  7:44  835  1:24  12:17  2159


#A: David Darling
#U: http://regexlib.com/REDetails.aspx?regexp_id=361

regexp: ^(((((0[13578])|([13578])|(1[02]))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(30)))|((02|2)[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s(((0[1-9])|([1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$
tree:   ((((((((0[13578])|[13578]|(1[02]))[\t-\r -/]?)((0[1-9])|[1-9]|([12][0-9])|(3[01])))|((([469]|(11))[\t-\r -/]?)((0[1-9])|[1-9]|([12][0-9])|(30)))|((((02)|2)[\t-\r -/]?)((0[1-9])|[1-9]|([12][0-9]))))[\t-\r -/]?)[0-9]{4})([\t-\r ]((((((0[1-9])|[1-9]|(1[012])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))[AMPamp|]{2}))?)
length: 6 to 22
-------------------- Examples --------------------
ex(0):  08312434  11023516  0249203  0725490  03303806  11115403  11303446
ex(1):  02/07/8179 12:02 am  0330 5711  2 07-0634  11305197
ex(2):  127-7292 06:23:48 aP  2 23511  055/0794  05305068  2/032847 11:56:01 aP
ex(3):  11303947 12:48 PP  8306383 01:54 aP  7 31 2868 8:07 |m
ex(5):  11 06-6418  2010303  07/5-9876 10:10 PA  11 097485  5315875 7:08:45 mp
ex(8):  0515622  6108811  02/019806 10:39:41 aM  2257470  10 8-9418 8:20 am


#A: Stefan Beylen
#D: Validates Austrian Cellular Phone Numbers. Works with ONE, T-Mobile, A1, Telering and new Provider "Drei". WITHOUT Country Code Verification.
#U: http://regexlib.com/REDetails.aspx?regexp_id=362

regexp: ^0(6[045679][0469]){1}(\-)?(1)?[^0\D]{1}\d{6}$
tree:   (((((0((6[04-79])[0469]))-?)1?)[1-9])[0-9]{6})
length: 11 to 13
-------------------- Examples --------------------
ex(0):  06662963402  06507257180  06798378053  06406859227  06568063479
ex(1):  06669165711  060019063420  06092843707  0699-5166576  0694-7852466
ex(2):  0654-1056042  0676-12289333  066619138177  0650-8404497  06698213743
ex(3):  06909885155  065915380735  0660-19324260  069918335995  069911829225
ex(5):  0659-4322021  06695500523  065016011246  0650-16112588  067017065354
ex(8):  064917620183  060617868902  0694-19490093  0664-16877240  0660-16870650


#A: Daniel Pickles
#D: Matches a whole number between 1 and 20 inclusively
#U: http://regexlib.com/REDetails.aspx?regexp_id=363

regexp: ^1?[1-9]$|^[1-2]0$
ERROR:  rx: Embedded '$' unimplemented: in "^1?[1-9]$|^[1-2]0$"


#A: Hakim SALHI
#D: For Date format MM-JJ-YYYY validation
#U: http://regexlib.com/REDetails.aspx?regexp_id=364

regexp: ^[\w-\.]+@([\w-]+\.)+[\w-]{2,3}$
ERROR:  rx: invalid range: in "^[\w-\.]+@([\w-]+\.)+[\w-]{2,3}$"


#A: Jos Krause
#D: Validates Dutch Postal Codes (ZipCode). There was a previous one listed here, but it's not entirely correct. Namely that dutch postal codes can contain a zero but cannot start with one, so this one is the adjusted version.
#U: http://regexlib.com/REDetails.aspx?regexp_id=367

regexp: ^[1-9][0-9]{3}\s?[a-zA-Z]{2}$
tree:   ((([1-9][0-9]{3})[\t-\r ]?)[A-Za-z]{2})
length: 6 to 7
-------------------- Examples --------------------
ex(0):  7243us  3045Dq  4301zO  1721oK  5062mg  7843Oc  1824CR  2840AE  6449nk
ex(1):  6941Gk  6549 Zf  5014 XX  3902Yf  4182 XF  9573 NQ  8523de  2554 Fe
ex(2):  7572Ge  7816 nC  5468 ar  8352QL  3696 SK  8454lb  2457Nb  2244 gD
ex(3):  3378VL  4010 nR  5547cP  7982OG  5637aL  6622rA  8108 qb  4693 fn
ex(5):  6525EW  8067 fK  1139 aU  3992Uh  1465 sh  5967 oi  7372 xU  5053 jo
ex(8):  9083qF  6714 ZW  1213Vj  2403Da  1625mU  3876bZ  7596PB  7013IK  9305HL


#A: sanjayanthan vijayakeerthi
#D: Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric .This will be usefull in money related
fields or decimal fields. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=368

regexp: ^([0-9]*|\d*\.\d{1}?\d*)$
tree:   ([0-9]*|((([0-9]*.)[0-9])[0-9]*))
length: 0 to *
-------------------- Examples --------------------
ex(0):      .2  .7      .6    .8  .7    .5  .4  .3                      .1  .8
ex(1):  8.3  .1  .7  .80    5    1  .2  .57  2    4.83  0  3.9    4.80  1.9
ex(2):  7  2  7  0.76  7  .444  .3  24    30  44.1  0  73.9  .906  67.1  5.747
ex(3):    466.198      5  72.5  .7  720.42  2.8235  0.4847  87.66  7  0.6960
ex(5):  072  6383  .11188  3.768552  55  .0736  44.3286  306  .50303  358
ex(8):  225937.7  540875.901262902  737294  11279419  84  8326685  74703.69418


#A: Michael Ash
#D: DateTime Validator. 
#T: DateTime M/d/y hh:mm:ss
#U: http://regexlib.com/REDetails.aspx?regexp_id=369

regexp: ^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$
ERROR:  rx: '(?...' unimplemented: in "^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$"


#A: Michael Ash
#D: This RE validates times patterns.
#T: Time
#U: http://regexlib.com/REDetails.aspx?regexp_id=370

regexp: ^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$
ERROR:  rx: Embedded '$' unimplemented: in "^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$"


#A: Mladen Mihajlovic
#D: Matches HTML Color strings. Like #FFFFFF is white and #000000 is black and #FF0000 is red and so on...
#U: http://regexlib.com/REDetails.aspx?regexp_id=372

regexp: ^(#){1}([a-fA-F0-9]){6}$
tree:   (#[0-9A-Fa-f]{6})
length: 7 to 7
-------------------- Examples --------------------
ex(0):  #5E5e91  #5db170  #AFa9Aa  #DB654D  #93E7eB  #bBc9eb  #980CC7  #FFe076
ex(1):  #95F2AA  #f31A16  #8BE88C  #1f6FCE  #9F26BE  #c607E3  #2ec7De  #e57dad
ex(2):  #edaFB8  #655f51  #e01591  #D4aed5  #e3fF7B  #f0aEc5  #8C60F7  #18eEcD
ex(3):  #7Ac8A0  #2bAF4d  #f6cdAf  #cE084C  #C9af2B  #fDEDAe  #2B26E5  #8Cf67A
ex(5):  #067AdE  #ec2AB3  #edCdeC  #EeDF7f  #ebcC61  #9Bb3eB  #63B9aC  #19fb87
ex(8):  #2e7AEf  #E1cC49  #EcbbA0  #2F6c4E  #f9b4AC  #aEf1b6  #4Bb65a  #985FFb


#A: Mathews Inga
#D: Date in DD/MM/YYYY format.
Fecha en formato DD/MM/AAAA.
#U: http://regexlib.com/REDetails.aspx?regexp_id=374

regexp: (((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])(\d{4}))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])(\d{4}))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(10)|(12)))/)[0-9]{4})|((((((0[1-9])|([12][0-9])|(30))/)((0[469])|(11)))/)[0-9]{4})|((((((0[1-9])|(1[0-9])|(2[0-8]))/)(02))/)[0-9]{4})|(((((29)(.|-|/))(02))/)((([02468][048])0)0))|(((((29)/)(02))/)((([13579][26])0)0))|(((((29)/)(02))/)((([0-9][0-9])0)[48]))|(((((29)/)(02))/)((([0-9][0-9])[2468])[048]))|(((((29)/)(02))/)((([0-9][0-9])[13579])[26])))
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/0004  29/02/1200  17/02/8100  29/02/4804  06/11/4305  29/02/3600
ex(1):  30/09/0531  29/02/2040  29/02/9248  24/02/7067  29/02/3408  29/02/2904
ex(2):  29/02/3600  29/02/8800  29/02/3200  02/02/3411  06/02/9417  29/02/2736
ex(3):  29/02/0444  29/02/7808  29/02/1180  29/02/1200  29/12/0692  01/01/8847
ex(5):  29/02/0180  29/02/1996  29/02/2540  10/02/0669  29/02/5600  29/02/3600
ex(8):  17/02/5183  29/02/6868  29/02/0408  29/02/2960  30/11/9647  29/02/0388


#A: Sung Lee
#U: http://regexlib.com/REDetails.aspx?regexp_id=376

regexp: ^((((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9]))))[\-\/\s]?\d{2}(([02468][048])|([13579][26])))|(((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))[\-\/\s]?\d{2}(([02468][1235679])|([13579][01345789]))))(\s(((0?[1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$
tree:   ((((((((((0?[13578])|(1[02]))[\t-\r -/]?)((0?[1-9])|([12][0-9])|(3[01])))|((((0?[469])|(11))[\t-\r -/]?)((0?[1-9])|([12][0-9])|(30)))|(((0?2)[\t-\r -/]?)((0?[1-9])|([12][0-9]))))[\t-\r -/]?)[0-9]{2})(([02468][048])|([13579][26])))|((((((((0?[13578])|(1[02]))[\t-\r -/]?)((0?[1-9])|([12][0-9])|(3[01])))|((((0?[469])|(11))[\t-\r -/]?)((0?[1-9])|([12][0-9])|(30)))|(((0?2)[\t-\r -/]?)((0?[1-9])|(1[0-9])|(2[0-8]))))[\t-\r -/]?)[0-9]{2})(([02468][1235679])|([13579][01345789]))))([\t-\r ]((((((0?[1-9])|(1[012])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))[AMPamp|]{2}))?)
length: 6 to 22
-------------------- Examples --------------------
ex(0):  10304032  2242863  8272170  10304516  11300784  1196622  465373
ex(1):  11039824 12:34:31 |p  11/239284  11-1-1383  10-17 8125 2:33 |M
ex(2):  06 30-1634  10 30/1856 08:50 aM  11 30232 11:30 pm  11-127716
ex(3):  0232752  2/102886 10:58 |M  2265732  1130/5236  794738  12-116631
ex(5):  1231/7480  09088576 5:24:55 pm  11-131036 6:33:31 am
ex(8):  0101/4332 12:07 |a  12301479  05/315747 11:45 Pa


#A: David Tersigni
#D: matches IP address in hex form in dotted or not dotted notation
#U: http://regexlib.com/REDetails.aspx?regexp_id=377

regexp: [0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}
tree:   (((((([0-9A-Fa-f]{2}.?)[0-9A-Fa-f]{2}).?)[0-9A-Fa-f]{2}).?)[0-9A-Fa-f]{2})
length: 8 to 11
-------------------- Examples --------------------
ex(0):  5E5e915d  b170AFa9  AaDB654D  93E7eBbB  c9eb980C  C7FFe076  8Bdf4a95
ex(1):  16.42.B3.7b  abAeF5.2e  f9.DEfCCf  f4.C48E.6c  5F.50.adEc  0C.D4.07.6D
ex(2):  01.5b517c  f2.eA99fa  B560.278f  BE7d75.a5  d64A.56dc  10.B0.D1cd
ex(3):  Af.a3.eFfE  5e7a.C8fd  F7.6DA9.02  04.Ec.a8.2C  F5.eC9EFD  dF.BEFf50
ex(5):  eDFA.Ddc3  3fe1bf8b  25.CE45CA  537fCc62  5390.a1.fd  7529b9c5
ex(8):  4E.3D1D42  50.C7.c6.cb  93.E5.44.1a  d2C2.3EDF  e6.7D.ba.C2  96.5C.9ea2


#A: David Tersigni
#D: Very Simple Match for dotted Decimal IP address.  Doesn’t Validate addresses
#U: http://regexlib.com/REDetails.aspx?regexp_id=378

regexp: [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
tree:   (((((([0-9]{1,3}.)[0-9]{1,3}).)[0-9]{1,3}).)[0-9]{1,3})
length: 7 to 15
-------------------- Examples --------------------
ex(0):  7.0.1.6  8.2.7.8  1.0.0.9  4.4.3.4  0.5.4.9  0.6.6.0  1.8.1.7  0.5.1.9
ex(1):  626.06.994.72  24.504.13.89  28.7.1.0  48.7.12.86  019.8.6.698
ex(2):  194.427.651.37  59.05.27.7  2.4.29.313  1.33.3.4  86.2.04.80  96.0.48.3
ex(3):  28.71.168.870  72.29.852.050  4.355.263.3  7.222.527.70  94.5.62.74
ex(5):  5.492.9.0  0.00.92.15  1.0.180.9  10.827.44.60  987.59.56.760
ex(8):  1.89.32.7  0.75.60.24  50.0.99.83  00.30.988.008  6.136.782.67


#A: Danil Sholokhov
#D: Matches number in format XX.XX Please note that this expression allows maximum of 8 digits before the dot and 2 (optional) digits after the dot.
#U: http://regexlib.com/REDetails.aspx?regexp_id=379

regexp: (^[0-9]{1,8}|(^[0-9]{1,8}\.{0,1}[0-9]{1,2}))$
ERROR:  rx: Embedded '^' unimplemented: in "(^[0-9]{1,8}|(^[0-9]{1,8}\.{0,1}[0-9]{1,2}))$"


#A: David Tersigni
#D: Simple match for U.S. Amateur Radio Call signs
Must start with an A,K,N or W.
1 or two prefix letters (not case sensitive),
Exactly one zone digit,
One to three suffix digits( not case sensitive).
73
#U: http://regexlib.com/REDetails.aspx?regexp_id=380

regexp: ^[AaWaKkNn][a-zA-Z]?[0-9][a-zA-Z]{1,3}$
tree:   ((([AKNWakn][A-Za-z]?)[0-9])[A-Za-z]{1,3})
length: 3 to 6
-------------------- Examples --------------------
ex(0):  a4N  n1V  n0x  W6h  N1P  K8s  a7W  K0I  A7Z  W3H  a3w  k9j  a4J  a2G
ex(1):  At1G  ks9w  a4sAi  ag6Xq  n8tcU  a2hf  WM7kJ  nh0Fo  kS7fXB  N9h  kt9ba
ex(2):  ng3hhE  k7JW  a2gDC  K5Rp  W4lb  AR9GL  ny7XJ  N2H  Wx3Ei  W2XuW  K9Ha
ex(3):  KP1hN  K3A  n9F  A3ze  W3iT  AA0hT  N0ikS  WF3W  WA4W  AP9ad  K1CJ
ex(5):  WU8qz  Af8sU  WY1Zg  a1Jg  nB6UW  A4iI  nO5S  k3DKX  N9lN  ah8ZJ  a6Z
ex(8):  KS4h  NH2M  aj3ai  AW6BY  k6aK  n7we  n5UtT  N1do  Wv9dV  AB2Em  n5k


#A: Sjef van Leeuwen
#D: Based of from Steward Haddock's domain nam
Checks domain names. This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.), hypens(-). and valid extension.
#U: http://regexlib.com/REDetails.aspx?regexp_id=381

regexp: ^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly| ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk| pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr| st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|AERO|BIZ|COM|COOP|EDU|GOV|INFO|INT|MIL|MUSEUM|NAME|NET|ORG|AC|
ERROR:  rx: unclosed '(': in "^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly| ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk| pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr| st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|AERO|BIZ|COM|COOP|EDU|GOV|INFO|INT|MIL|MUSEUM|NAME|NET|ORG|AC|"


#A: Yosi Taguri
#D: using match.Result("$1.$2.$3.$4")
will return the assembly version of a given c# AssemblyInfo.cs file
#U: http://regexlib.com/REDetails.aspx?regexp_id=382

regexp: ^\[assembly: AssemblyVersion\(\"([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)
tree:   (((((((((((((((((((((((((((((((((([a)s)s)e)m)b)l)y):) )A)s)s)e)m)b)l)y)V)e)r)s)i)o)n)()")[0-9]+).)[0-9]+).)[0-9]+).)[0-9]+)
length: 35 to *
-------------------- Examples --------------------
ex(0):  [assembly: AssemblyVersion(\"7.0.1.6
ex(1):  [assembly: AssemblyVersion(\"1.0.0.9
ex(2):  [assembly: AssemblyVersion(\"04.6.8.47
ex(3):  [assembly: AssemblyVersion(\"51.64.8.90
ex(5):  [assembly: AssemblyVersion(\"9220.221.904.6322
ex(8):  [assembly: AssemblyVersion(\"89598.878.4.6


#A: Tony Austin
#U: http://regexlib.com/REDetails.aspx?regexp_id=383

regexp: <!--.*?-->
ERROR:  rx: prefer-fewer '?' unimplemented: in "<!--.*?-->"


#A: paolo beltrami
#D: This simple regexp should match any possible italian address entry and doesn't match NULL entries (good if address is required). Should work well for any other address (it's been verified against 250 addresses from most european countries, usa and australia. Please mail me if there's something missing
#U: http://regexlib.com/REDetails.aspx?regexp_id=384

regexp: ^[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\']+[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\' ]+$
tree:   ([',-9A-Za-z\u0080-\u0096\u0098-\u009d\u009f-¯±-¶¸-½¿Ã]+[ ',-9A-Za-z\u0080-\u0096\u0098-\u009d\u009f-¯±-¶¸-½¿Ã]+)
length: 2 to *
-------------------- Examples --------------------
ex(0):  \x92i [FAIL]  Nq  w\xba [FAIL]  E\xac [FAIL]  \x96\x9f [FAIL]  \xa1t [FAIL]
ex(1):  \x89\x91 [FAIL]  \x8cn [FAIL]  oY  \x88\xb1 [FAIL]  \x9a\xb5 [FAIL]
ex(2):  7UR  \xa8H\x86 [FAIL]  9\xb6 [FAIL]  A\xa6K [FAIL]  9\x96\xae [FAIL]
ex(3):  \xac6,\xa9\x82 [FAIL]  \xa6\x88c [FAIL]  LgU,  dKH  \x886\x86s\x90 [FAIL]
ex(5):  S\x8f\xbf\x9bx\x84 [FAIL]  \xb9\x9c52\x80g'K [FAIL]  3.z\x98T\xb8 [FAIL]
ex(8):  \xa7\x90\xa4\xbfl [FAIL]  \xa60\xa0Z\x82\xa4k\xa2\x98W\x8a [FAIL]


#A: Michael Ash
#D: This RE matches Days of the week or their abbreviations.
#T: Days of the week
#U: http://regexlib.com/REDetails.aspx?regexp_id=385

regexp: ^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$
ERROR:  rx: Embedded '$' unimplemented: in "^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$"


#A: Joshua Olson
#D: Matches a valid "empty" tag (has trailing slash).  Note, if you run it against a string such as <img src="test.gif" alt="<hr />"> it will indeed return a match.  But, the match is not at character 1 like you'd suspect, but rather it's matching the internal <hr />.  If you look at the source of this tag (http://concepts.waetech.com/unclosed_tags/) you'll find a whoe suite of regex's for matching html tags.  Using them you could feasibly step though a document and avoid this mismatch as the outer tag would match *in totality* and you'd completely skip this inner match.
#U: http://regexlib.com/REDetails.aspx?regexp_id=387

regexp: <[a-zA-Z]+(\s+[a-zA-Z]+\s*=\s*("([^"]*)"|'([^']*)'))*\s*/>
tree:   (((((<[A-Za-z]+)((((([\t-\r ]+[A-Za-z]+)[\t-\r ]*)=)[\t-\r ]*)((("[\x01-!#-\u007f]*)")|(('[\x01-&(-\u007f]*)')))*)[\t-\r ]*)/)>)
length: 4 to *
-------------------- Examples --------------------
ex(0):  <Z/>  <V/>  <o/>  <l/>  <j/>  <I/>  <L/>  <u/>  <o/>  <r/>  <a/>  <l/>
ex(1):  <X />  <W />  <P />  <E/>  <m />  <P/>  <A/>  <O/>  <d W= \"a\" />
ex(2):  <Ks  XV= 'EN'  oU  =  'v'/>  <Q  k=  \";\"  ey = ''/>
ex(3):  <KeI qgf  =  ''   />  <Y   QfE='R<&'  />
ex(5):  <egHIL />
ex(8):  <LCsjcHO     kojDoU   =  \"bc8\" kICdmYZ       =   '|[+Lc-'        EedGEsOV  = ',gtK' qWl     =     \"-:x\" zetxO        =\"0)|\"       PXfFSD       =  '/eBvYb.'   SJYdQry =        'uGHhT'       J   =   ''   />


#A: Laurent J
#D: for validate a email, but with this regex it 's possible : a._-z@a_.....____---.com
#U: http://regexlib.com/REDetails.aspx?regexp_id=388

regexp: ^[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9]@[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9][\.][a-z0-9]{2,4}$
tree:   (((((((([0-9a-z][-.0-9_a-z]*)[0-9a-z])@)[0-9a-z])[-.0-9_a-z]*)[0-9a-z]).)[0-9a-z]{2,4})
length: 8 to *
-------------------- Examples --------------------
ex(0):  9u@6d.i1  6m@nn.hz  k2@69.9r  82@xv.fz  qm@4e.q9  x9@v8.4i  z6@gk.28
ex(1):  g1@b4.h2op  sr@qjm.sl  q6@4lt.3m5  tb@izf.on5  nn@qdg.xf  dg@y8.ljrv
ex(2):  t2e@t8pa.7h  dt8r@gw8.4fg  sx@av3.x5  1j@n1t.s3fs  ys@78av.wpgq
ex(3):  lx@htff.cn7  rdi7@q0.ee5  e3@po3hm.zfe  c5@ic5m.77d  ys@jl.lu8s
ex(5):  knn@l_k.nw  oxx@dk2.m46  h_v@01s.dz5  cn.m47@t-e.yg  zffp@29r4a.1rzn
ex(8):  6x34@1kn.rc7  thg@u0.0_m.fa1g  w19s@6z.xn0  uj0_cv@7t2h.25l


#A: Remi Sabourin
#D: Checks domain names. This validates domains based on latest specifications (RFCs 952 and 1123 dealing with hostnames and RFC 1035 dealing with domain name system requirements) except that it only includes realistic fully-qualified domains: 1. requires at least one subdomain 2. allows shortest top-level domains like "ca", and "museum" as longest.
Other validation rules: 1. Labels/parts should be seperated by period. 2. Each label/part has maximum of 63 characters. 3. First and last character of label must be alphanumeric, other characters alphanumeric or hyphen. 4. Does not check maxlength of domain which incidentally is 253 characters of text (255 binary representation).
For a regular expression that matches ALL domains:
^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)*[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$
#U: http://regexlib.com/REDetails.aspx?regexp_id=391

regexp: ^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$
tree:   ((([0-9A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?).)+[A-Za-z]{2,6})
length: 4 to *
-------------------- Examples --------------------
ex(0):  Z.Hf  n.Vi  k.Gd  L.FC  f.rL  K.TJ  S.Cj  T.YZ  J.NP  V.uV  i.PN  q.Im
ex(1):  J.yTeD  y.zNYUJ  p.AKHib  prpnG6SjnftdYFvLYfAdSlEoWDImKqM2kYC.QTS
ex(2):  JnK-Y7zZ8EmmqPDaO16JiuErkZYuLfZMiZb.GAnk  k.GHgk
ex(3):  l.IbVqVZoinJ3qQF7aIeQwoM4YQ21hA-Fa-3ofb.nsXvO
ex(5):  GUVg8OXgXJroeDkFZjiXI7Q4RfGidYV5RJqBNA.Fne1vtbZYhFoglUbV264OhVBzydN6lYf5.4goX6quSWLlleB-XKCJrpZ5OQI6X4f.wIKhJ
ex(8):  w.r.HzeadbCMSGwrBGr3iUakS7cjwmQt.roxFaaPgsoVcM4hsHchext3ZiblUuq.H23ZERlL1QlOfDaRj2Qdj2XXb95kMD5.j1TS7Cwt56TIHd9RfUOA62enNKE8zkcB.e.g.dRfM


#A: Max Lu
#D: Double byte charactors validator.
The rule applies to double byte charactor input validation.
#U: http://regexlib.com/REDetails.aspx?regexp_id=395

regexp: ^[\u0081-\uFFFF]{1,}$
tree:   [\u0081-ÿ]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  \x8c  y [FAIL]  \x0e [FAIL]  \xf3  \xbe  g [FAIL]  \x83  \x98  h [FAIL]
ex(1):  \x1f [FAIL]  \xde  \xe5  \xec  \xc7  \xa7  \x12 [FAIL]  ] [FAIL]  9 [FAIL]
ex(2):  } [FAIL]  \xaf  \x87\u007f [FAIL]  \xe2\xa5  L [FAIL]  \x9a\xf1  \x05 [FAIL]
ex(3):  /\xc6 [FAIL]  l [FAIL]  \xfc  9b [FAIL]  #+\x12 [FAIL]  \xfc\xf0\x94
ex(5):  }\x18M\xac [FAIL]  \r\xab\xed[\xbb [FAIL]  \x10Y\x188 [FAIL]
ex(8):  N [FAIL]  \xa2\x18\x8f\"\x1eۍ [FAIL]  \x953\xbb\x17 [FAIL]  \x84


#A: Jason N. Gaylord
#D: This validates the states and territories of the United States in a 2 character uppercase format. Very poor excuse for a regular expression!  ;)
Written by Jason Gaylord.
#U: http://regexlib.com/REDetails.aspx?regexp_id=396

regexp: ^((AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY))$
tree:   ((AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY))
length: 2 to 2
-------------------- Examples --------------------
ex(0):  TN  AL  MN  NJ  MD  VT  VT  VA  IL  MP  NY  MH  MA  GU  TN  MD  NC  ID
ex(1):  DE  AZ  IA  OH  CT  NY  SD  OR  WA  WY  PW  UT  IA  VI  RI  CT  MA  ME
ex(2):  CT  WV  CO  WY  RI  MT  TX  CT  DC  NV  IA  MO  AR  FM  DC  IN  VI  GU
ex(3):  AZ  LA  LA  AL  IL  AZ  CO  AK  PA  RI  ND  SC  SC  OR  NY  NH  KS  UT
ex(5):  PR  MP  IL  OH  AZ  NV  AL  NC  MS  KS  PR  MH  KY  VI  VA  VT  NE  FL
ex(8):  OH  IL  FM  OR  KY  FM  NV  ME  NY  MO  IL  AZ  MH  FL  NJ  FL  MO  CO


#A: Jason N. Gaylord
#D: It is the exact phone number regular expression for '(###) ###-####'.
Written by Jason Gaylord.
#U: http://regexlib.com/REDetails.aspx?regexp_id=397

regexp: ^([\(]{1}[0-9]{3}[\)]{1}[ ]{1}[0-9]{3}[\-]{1}[0-9]{4})$
tree:   ((((((([0-9]{3}))) )[0-9]{3})-)[0-9]{4})
length: 14 to 14
-------------------- Examples --------------------
ex(0):  (701) 682-7810  (094) 434-0549  (066) 018-1705  (198) 578-6248
ex(1):  (210) 744-4217  (305) 147-6859  (524) 236-1843  (632) 676-9026
ex(2):  (177) 506-8042  (161) 863-1199  (960) 759-9279  (260) 670-1855
ex(3):  (117) 363-0508  (189) 517-5550  (093) 143-3509  (619) 428-0540
ex(5):  (980) 298-8108  (038) 706-1948  (326) 685-1874  (576) 197-9200
ex(8):  (448) 438-6713  (418) 558-1594  (632) 958-7671  (817) 645-8178


#D: Matches positive whole numbers from 0-999
#U: http://regexlib.com/REDetails.aspx?regexp_id=399

regexp: ^\d(\d)?(\d)?$
tree:   (([0-9][0-9]?)[0-9]?)
length: 1 to 3
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  859  29  41  473  429  66  89  47  9  042  04  53  492  8  2  05  3  27
ex(2):  78  601  1  1  07  987  25  64  68  219  542  57  51  773  92  53  57
ex(3):  99  98  80  992  6  2  19  832  75  4  94  333  9  14  42  2  921  60
ex(5):  2  3  91  12  2  9  9  9  2  37  98  33  59  81  784  361  96  044  67
ex(8):  790  1  47  5  5  8  533  96  5  4  268  2  15  84  85  63  81  61  444


#A: Michiel Lankamp
#D: Used for dutch postalcodes; no leading zero. 4 numbers and 2 letters.
#U: http://regexlib.com/REDetails.aspx?regexp_id=401

regexp: ^[1-9]{1}[0-9]{3}\s{0,1}?[a-zA-Z]{2}$
ERROR:  rx: prefer-fewer '?' unimplemented: in "^[1-9]{1}[0-9]{3}\s{0,1}?[a-zA-Z]{2}$"


#A: Rod Early
#D: This validates Length times Width times Height measurements, which consists of 3 whole or decimal numbers separated by an x.
#U: http://regexlib.com/REDetails.aspx?regexp_id=402

regexp: ^\s*(((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*) )\s*[xX]\s*){2}((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*))\s*$
tree:   ((([\t-\r ]*(((((((([0-9]*.?)[0-9]*)[0-9]+)[0-9]*)|(((([0-9]+[0-9]*).)[0-9]*) ))[\t-\r ]*)[Xx])[\t-\r ]*){2})((((([0-9]*.?)[0-9]*)[0-9]+)[0-9]*)|((([0-9]+[0-9]*).)[0-9]*)))[\t-\r ]*)
length: 5 to *
-------------------- Examples --------------------
ex(0):  1X1. X3  5. X4X3.  6X4. x7  1. x4X3  3X1x8.  7X6. x0.  7X6. x0.
ex(1):   5X 83.  x16   62.6  X 44. X .642    4.  X0.50 x00   2.  x 12. x7.3
ex(2):   9.90   x93062x67316    6659.90   X 92. x4772.5  37. X 823.77   X48  
ex(3):   18832 x  07263723855 X  9193.97  
ex(5):       599.639      X  912.2    x    9604.46644     
ex(8):   41918238175954847481       X        8767417.99232075  x        98298207987.51586


#A: andrew stone
#D: Simple expression for matching all commas and all whitespace characters:  ASCII (13,10,44)
#U: http://regexlib.com/REDetails.aspx?regexp_id=403

regexp: [\\s+,]
tree:   [+,\s]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  ,  +  +  ,  +  \\  ,  +  +  +  s  \\  \\  +  \\  +  ,  +  ,  +  \\  \\
ex(1):  ,  ,  +  ,  \\  ,  ,  +  \\  s  s  s  ,  +  ,  ,  \\  ,  ,  +  ,  s  ,
ex(2):  s  +  ,  s  \\  \\  +  \\  ,  s  s  \\  s  \\  s  \\  +  +  s  +  \\  +
ex(3):  \\  ,  ,  \\  ,  \\  \\  \\  +  ,  ,  ,  s  +  +  \\  +  ,  s  \\  \\
ex(5):  ,  s  \\  \\  \\  \\  \\  +  \\  s  ,  s  +  \\  ,  \\  +  \\  s  ,  \\
ex(8):  s  ,  s  \\  \\  \\  ,  +  ,  s  \\  +  +  \\  +  s  s  s  ,  s  ,  \\


#A: Michael Ash
#D: This RE validate Dates in the MMM dd, yyyy format from Jan 1, 1600 to Dec 31, 9999. The format is as follows: The name or 3 letter abbreivation, without a period, of the month, then a space then the day value then a comma then a space finally the year. The correct number of day are validated for each month include leap years. The name of month is case sensitive.
#T: MMM dd, yyyy Date
#U: http://regexlib.com/REDetails.aspx?regexp_id=404

regexp: ^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\ ((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\,\ ((1[6-9]|[2-9]\d)\d{2}))
ERROR:  rx: '(?...' unimplemented: in "^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\ ((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\,\ ((1[6-9]|[2-9]\d)\d{2}))"


#A: Michael Ash
#D: This RE validates dates in the dd MMM yyyy format. Spaces separate the values.
#T: dd MMM yyyy Date
#U: http://regexlib.com/REDetails.aspx?regexp_id=405

regexp: ^((31(?!\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$
ERROR:  rx: '(?...' unimplemented: in "^((31(?!\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$"


#A: Michael Ash
#D: This RE validate the full name of the months.
#T: Months
#U: http://regexlib.com/REDetails.aspx?regexp_id=406

regexp: ^(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber)$
tree:   ((J((((((an)u)a)r)y)|(u((ne)|(ly)))))|(((((((Fe)b)r)u)a)r)y)|((Ma)(((rc)h)|y))|(A((((pr)i)l)|((((ug)u)s)t)))|((((((((((Se)p)t)|((No)v)|((De)c))e)m)|(((Oc)t)o))b)e)r))
length: 3 to 9
-------------------- Examples --------------------
ex(0):  November  February  January  May  April  August  September  February
ex(1):  January  October  April  June  March  February  May  August  November
ex(2):  November  December  October  April  May  January  November  June
ex(3):  December  March  October  December  February  April  October  August
ex(5):  April  April  February  May  March  March  February  March  April
ex(8):  January  February  February  October  February  July  February


#A: Dany Lauener
#D: dd/MM/yyyy with leap years 100% integrated
Valid years : from 1600 to 9999
As usual, many tests have been made.
I think this one should be fine.
#U: http://regexlib.com/REDetails.aspx?regexp_id=409

regexp: ^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((1[6-9]|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(1[02])))/)(((1[6-9])|([2-9][0-9]))[0-9]{2}))|((((((0[1-9])|([12][0-9])|(30))/)((0[13-9])|(1[012])))/)(((1[6-9])|([2-9][0-9]))[0-9]{2}))|(((((((0[1-9])|(1[0-9])|(2[0-8]))/)0)2)/)(((1[6-9])|([2-9][0-9]))[0-9]{2}))|((((((29)/)0)2)/)((((1[6-9])|([2-9][0-9]))((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0))))
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/1653  14/10/1738  08/10/1925  09/02/5801  29/02/7200  23/02/1667
ex(1):  31/03/1753  29/02/2616  17/02/4446  31/10/1848  18/10/4780  30/03/8411
ex(2):  29/02/1600  12/02/3063  26/02/5047  30/12/8136  16/10/9081  06/08/7116
ex(3):  16/02/1719  29/02/8064  07/10/1798  31/12/5670  02/01/7518  25/03/1842
ex(5):  15/05/1686  22/02/1804  10/10/1849  03/02/1798  21/02/1666  29/02/1804
ex(8):  30/12/7017  29/02/1664  11/02/1788  29/02/6808  13/02/1664  30/03/1984


#A: Paul Ashton
#D: validate a number 5 digits and 2 decimal places allowing zero
#U: http://regexlib.com/REDetails.aspx?regexp_id=410

regexp: ^\d{1,5}(\.\d{1,2})?$
tree:   ([0-9]{1,5}(.[0-9]{1,2})?)
length: 1 to 8
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  859.38  7453.9  3  95.19  9422.71  26  24.77  18  76.5  483  220
ex(2):  177.39  117.62  566  4427.72  187.82  826  13  2.39  98.3  87.6  861
ex(3):  8908.46  429  1492.9  9217.4  28.79  470.52  996  868  35  455.12  700
ex(5):  4417  034.00  2564.02  53376.6  47  2962.18  58.8  9285.3  2556.67
ex(8):  276  5  936.0  2.4  64728  960  83087.6  5.27  283  205  021  07.8


#A: Paul Ashton
#D: validates  to 5 digits and 2 decimal places but not allowing zero
#U: http://regexlib.com/REDetails.aspx?regexp_id=411

regexp: (?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,2})?$
ERROR:  rx: '(?...' unimplemented: in "(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,2})?$"


#A: Brenden Salta
#D: A general string validation to insure that NO malicious code or specified characters are passed through user input.  This will allow you to input any characters except those specified.  The expression above does not allow user input of <>`~!/@\#}$%:;)(_^{&*=|'+. Input as many invalid characters you wish to deny.  This really works!
#U: http://regexlib.com/REDetails.aspx?regexp_id=412

regexp: ^[^<>`~!/@\#}$%:;)(_^{&*=|'+]+$
tree:   [\x01- ",-.0-9?A-]a-z\u007f]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  O  i  5  m  t  i  0  ?  ,  h  f  H  O  E  R  s  .  T  ?  i  z  N  i  Z
ex(1):  n  R  e  S  l  V  J  U  E  j  [  t  5  e  j  A  w  Z  p  Z  x  m  A  k
ex(2):  6  h7  []  Ly  -  N  8  K0  F,  lY  ,  5  f  E[  \\  gF  .J  bR  6  t
ex(3):  F  UN.  EX  Ny  q]a  3  -,\\  Wcf  TuS  78  ck   P  Pe2  7  \"  sw  Vah
ex(5):  ,XHFW  \\J8Iq  61  rg J  QOBS9  nQUEP  jHM  Cs]  lit2  77G4  Vr-n  x  Z
ex(8):  G R4eVX  Tw\"N\\  k\\[  N   7yLPZ  IOzyr1  OXv  910A-  y]0j\\Ah3  tmh


#A: Jeff Gabriel
#D: More permissive than others on the site, this one allows you to let a user enter US phone numbers in the way they most commonly use, without letting them enter non-valid combinations.
#U: http://regexlib.com/REDetails.aspx?regexp_id=413

regexp: ^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$
ERROR:  rx: Embedded '^' unimplemented: in "^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$"


#A: Craig Pearson
#D: Matches a comma-seperated list of year(s).
#U: http://regexlib.com/REDetails.aspx?regexp_id=414

regexp: ^([1-9]{1}[0-9]{3}[,]?)*([1-9]{1}[0-9]{3})$
tree:   ((([1-9][0-9]{3}),?)*([1-9][0-9]{3}))
length: 4 to *
-------------------- Examples --------------------
ex(0):  7243  4402  6770  7180  1051  8053  1601  9227  6857  8479  4548  9470
ex(1):  56534812  3435  4090  31969081  6198  9729  2719,1517  1427  6413  6483
ex(2):  956913388457  6529  4867,2807,3826  1184,7892  9158,5340  6622  1750
ex(3):  9623,53501719  9227,98095103  2707  2237  70649317,6011  1794
ex(5):  4235  8082,35519208  4876  8417,9287,7200  7982,782772648635
ex(8):  7146,798945675487,7364,8853,189374056608  4569,634344102312


#A: luca milan
#D: Match the content of any regular tag/s 
#U: http://regexlib.com/REDetails.aspx?regexp_id=415

regexp: <(?<tag>.*).*>(?<text>.*)</\k<tag>>
ERROR:  rx: '(?...' unimplemented: in "<(?<tag>.*).*>(?<text>.*)</\k<tag>>"


#A: Scott Long
#D: I wrote this regular expression because a project I was working on required a stricter validator on social security numbers. There are actually gov't standards on what is a valid social: The first 3 digits can't be > 779, The first 3 digits can't be 000, The second 2 digits can't be 00, and the last 4 digits can't be 0000. This regex handles all these cases and checks formatting for numbering and dashes (###-##-####)
#U: http://regexlib.com/REDetails.aspx?regexp_id=418

regexp: ^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$))))
ERROR:  rx: '(?...' unimplemented: in "^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$))))"


#A: Ashish Sheth
#D: This expression validates for valid C# or C++ identifier
#U: http://regexlib.com/REDetails.aspx?regexp_id=419

regexp: ^[a-zA-Z_]{1}[a-zA-Z0-9_]+$
tree:   ([A-Z_a-z][0-9A-Z_a-z]+)
length: 2 to *
-------------------- Examples --------------------
ex(0):  _q  rS  Vn  _m  aP  GZ  rk  eW  zt  _p  sd  Zp  U4  aP  qW  F6  Vd  Et
ex(1):  ke  Zq  kf  qq  cr  MX  mO  bf  Mr  R6  vs  Ei  g0  hm  Mt  uf  g0  Zm
ex(2):  WRj  GJ  zz  c5E  SL  jg  RH  Rx  uI  ljW  LVc  se  xy  o1p  tn  Fj
ex(3):  cP  Zh1  M6D  Bv  X2_  gDwO  Jl  eK  skE  ZqIU  s9  kY  Ld  sV  pE  Ix
ex(5):  Zy  Z4  kfX44  LME  QeG  urtP  Rs1a  uMK  oZ  sFKZO1  BSp  fTz843  pc
ex(8):  ijoL4U  vXFuE2JU  cXHj  phrH  OkP  o4NWq9x  LuMMelXs  wKGT2  vyq6Zk  Wk


#A: Josh Crosby
#D: This will match single numbers,the first block [1346] checks for single digits of 1, 3, 4 or 6, could easily by [1-5] as well. The second block [10] checks for 10 only.
This matches inclusively.
#U: http://regexlib.com/REDetails.aspx?regexp_id=420

regexp: ^[1]$|^[3]$|^[4]$|^[6]$|^[1]0$
ERROR:  rx: Embedded '$' unimplemented: in "^[1]$|^[3]$|^[4]$|^[6]$|^[1]0$"


#A: Martin Schwedes
#D: this is a very little regex for use within a content management software.  links within textfields has not to be written in html.  the editor of the cms is instructed to use it like this:  1. mention spaces in front and behind the url  2. start url with http://, mailto://, ftp:// ...  3. use optional linktext within #linktext# (separated with single space)  4. if there is no linktext the url/email will show up as linktext  5. avoid url with spaces in filename (use %20 urldecode)   replace pattern (space in front):   <a href="\\1\\3\\4" target="_blank">\\3\\6</a>
#U: http://regexlib.com/REDetails.aspx?regexp_id=422

regexp:  (mailto\:|(news|(ht|f)tp(s?))\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) 
ERROR:  rx: [:class:] unimplemented: in " (mailto\:|(news|(ht|f)tp(s?))\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) "


#A: T H
#U: http://regexlib.com/REDetails.aspx?regexp_id=424

regexp: ^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$
tree:   (-?((([1-9][0-9]*)(.[0-9]{0,2})?)|(0(.[0-9]{0,2})?)|(.[0-9]{1,2})))
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  4  0  1  0  0  6  6  6  .8  .9  0  7  .2  0  9  0  0  .0  7  3  0  3
ex(1):  .05  -0.1  0  5  0.  -45  -0.  4.7  0  .98  -0.8  .14  -84  .4  0  -0
ex(2):  0.81  -284  .61  -1  .26  -2  0.41  -617.  0.1  -.80  -0.3  0.3  -467.5
ex(3):  -0.  7928.  .92  803.  -.56  -.8  0.  .0  -0  25  -.7  -.76  -0.  0
ex(5):  0  .9  -.3  0.  .3  0  0  17138  -.1  538821  0.09  -0  0.  -62.  0
ex(8):  0  3272390.8  .92  -.04  0.65  .17  117363050  0  .2  -.86  0


#A: Roberto Misticoni
#D: This regular expression match any valid file path. It checks local drives and network path. The file extension is required.
#U: http://regexlib.com/REDetails.aspx?regexp_id=425

regexp: ^([a-zA-Z]\:|\\\\[^\/\\:*?"<>|]+\\[^\/\\:*?"<>|]+)(\\[^\/\\:*?"<>|]+)+(\.[^\/\\:*?"<>|]+)$
tree:   (((([A-Za-z]:)|((((\\)[\x01-!#-)+-.0-9;=@-[]-{}~\u007f]+)\)[\x01-!#-)+-.0-9;=@-[]-{}~\u007f]+))(\[\x01-!#-)+-.0-9;=@-[]-{}~\u007f]+)+)(.[\x01-!#-)+-.0-9;=@-[]-{}~\u007f]+))
length: 6 to *
-------------------- Examples --------------------
ex(0):  L:\\n.$  \\\\H\\D\\%.}  \\\\x\\v\\6.J  \\\\t\\B\\j.E  \\\\ \\f\\F.m
ex(1):  \\\\3\\_\\$.k  \\\\M\\r\\!.z  \\\\`\\u\\L..  R:\\4.Y  \\\\u\\O\\@.e
ex(2):  \\\\O\\ ~\\m\\U.v8  A:\\!\\B.#w  h:\\h.t2  \\\\[J\\F\\R\\F.=`  E:\\ .Yr
ex(3):  L:\\C\\#.Lu  \\\\'I\\@@\\(\\SA.&  \\\\V\\i&{\\s.3
ex(5):  H:\\D)\\D%V%d\\#@L\\a WZ]\\2TY^M.XLJ  G:\\3{Zi\\A)L\\ZrP. 
ex(8):  \\\\M5#JEM3\\f\\Lo\\{C#80RE!\\^f#4%\\8\\gEjg\\~D]C\\Z.rrfB=mi5


#A: David Walker
#D: A regex that attempts to accurately parse the elements from a proper name where the format is in <<First, Last>> order or some permutation of that order.  Critiques and suggestions for improvement are welcome. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=426

regexp: (?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w*|[A-Z]?\.?)\s?(?<LastName>[A-Z]\w*\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)
ERROR:  rx: '(?...' unimplemented: in "(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w*|[A-Z]?\.?)\s?(?<LastName>[A-Z]\w*\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)"


#A: David Walker
#D: Fine-tuned the previous version to handle surnames with embedded caps like McCoy and DeCarlo.
#U: http://regexlib.com/REDetails.aspx?regexp_id=427

regexp: (?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>[A-Z]?\w{0,3}[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)
ERROR:  rx: '(?...' unimplemented: in "(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>[A-Z]?\w{0,3}[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)"


#A: David Walker
#D: Getting closer now...  this one has the functionality of the previous two and matches on names like "Jill St. John" as well.
#U: http://regexlib.com/REDetails.aspx?regexp_id=428

regexp: (?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>(?:[A-Z]\w{1,3}|St\.\s)?[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)
ERROR:  rx: '(?...' unimplemented: in "(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>(?:[A-Z]\w{1,3}|St\.\s)?[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)"


#A: David Walker
#D: Regex parses elements from a proper name in <<Last, First>> order and permutations.  Comments and critiques are welcome.
#U: http://regexlib.com/REDetails.aspx?regexp_id=429

regexp: (?<LastName>[A-Z]\w+\-?[A-Z]?\w*),\s(?<Suffix>Jr\.|Sr\.|IV|III|II)?,?\s?(?<FirstName>[A-Z]\w*\-?[A-Z]?\w*\.?)\s?(?<MiddleName>[A-Z]?\w*\.?)
ERROR:  rx: '(?...' unimplemented: in "(?<LastName>[A-Z]\w+\-?[A-Z]?\w*),\s(?<Suffix>Jr\.|Sr\.|IV|III|II)?,?\s?(?<FirstName>[A-Z]\w*\-?[A-Z]?\w*\.?)\s?(?<MiddleName>[A-Z]?\w*\.?)"


#A: Logan Tran
#D: HTML Pattern Matching
PLEASE HELP
/<[^>]*>/ig
The above pattern is only successful when html tag are simple (they don't include any javascript).  This mean that the pattern will fail if something like this is within the tag <input type=button value=test onclick='if(n.value>5)do_this();'>.  It will not match the entire open n close sign.
How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign and not when it just see a > within a '' or "".
Any help would be greatly appreciate.  Thanks a whole lot.
Logan
#U: http://regexlib.com/REDetails.aspx?regexp_id=431

regexp: <[^>]*>
tree:   ((<[\x01-=?-\u007f]*)>)
length: 2 to *
-------------------- Examples --------------------
ex(0):  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>
ex(1):  <>  <>  <r>  <>  <>  <K>  <>  <P>  <>  <>  <e>  <H>  <>  <.>  <=>  <>
ex(2):  <!>  <#r>  <fS>  <3t>  <'H>  <>  <>  <>  <>  <>  <>  <>  <zg>  <V>  <>
ex(3):  <C5>  <\\d>  <<t>  <h>  <89Z>  <iU>  <>  <.>  <~K>  <?>  <>  <>  <>
ex(5):  <&>  <>  <|Ifn=>  </\\p'a>  <:=J>  <{[p*w>  <!/8>  <q#)>  <`u<Mq>
ex(8):  <sl>  <aw7+]O>  <>  <,J|ti*B>  <hCv0k>  <g4oT>  <]>  <Rt>  <UR>  <>


#A: Giorgio Spugnesi
#D: Match italian telephone number with prefix followed by "/", "-" or blank and number. Usefull with numeric keybord!
#U: http://regexlib.com/REDetails.aspx?regexp_id=432

regexp: ^([0-9]*\-?\ ?\/?[0-9]*)$
tree:   (((([0-9]*-?) ?)/?)[0-9]*)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):   4     -  6   0    5  4-/3       4  1 /1  3 3  8/  2   /  /  6   0- 8
ex(2):  - 22  7-/34   /  9 /9  7- /25  19-   57/86  22  0 /65  14- /14  21 20  
ex(3):  44 4  1 2  /671  - /84   7  85  80 /610   /21  0/476  5-2  572- 68
ex(5):  9233/6  787  6046626  7984-/3  6383-  22-/  - 4  92868-0  6-/82528  28/
ex(8):  260953-   209005 /  5434796058  94558 /732655  -/62  4-/4710604


#A: Michael Ash
#D: This RE will match XML tag elements.  All elements must be closed. Won't match nested tags
#T: XML Tag
#U: http://regexlib.com/REDetails.aspx?regexp_id=433

regexp: <(\w+)(\s(\w*=".*?")?)*((/>)|((/*?)>.*?</\1>))
ERROR:  rx: prefer-fewer '?' unimplemented: in "<(\w+)(\s(\w*=".*?")?)*((/>)|((/*?)>.*?</\1>))"


#A: Darren Neimke
#D: Simple Postcode - this is the first test of the new WebService :-)
#U: http://regexlib.com/REDetails.aspx?regexp_id=436

regexp: (\d{4,6})
tree:   [0-9]{4,6}
length: 4 to 6
-------------------- Examples --------------------
ex(0):  7016  8278  1009  4434  0549  0660  1817  0519  8578  6248  1915  7820
ex(1):  0744  4217  3051  4768  5952  4236  1843  6326  7690  2600  6697  2138
ex(2):  0680  4216  1863  1199  9607  5992  7926  0670  1855  9943  0316  4311
ex(3):  0508  1895  1755  5009  3143  3509  6194  2805  4087  5952  6114  9802
ex(5):  2520  9113  0241  4638  16419  44751  1131  54847  4816  8189  14178
ex(8):  403803  27726  70650  6641  34990  789912  883182  908774  533179


#A: Darren Neimke
#U: http://regexlib.com/REDetails.aspx?regexp_id=445

regexp: (?s)/\*.*\*/
ERROR:  rx: '(?...' unimplemented: in "(?s)/\*.*\*/"


#A: Ed Stafford
#D: My first Expression. This will match US postal codes (zip codes) using simple 5 digit format with optional 4 digit extention seperated by a space or hyphen. Will not accept letters.
example: 12345 or 12345-1234 or 12345 1234.
#U: http://regexlib.com/REDetails.aspx?regexp_id=446

regexp: ^[0-9]{5}([\s-]{1}[0-9]{4})?$
tree:   ([0-9]{5}([\t-\r -][0-9]{4})?)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  86685-8928  45237 2198  17292-6525  98836  11753 7945
ex(2):  38769 5765  29186 7880  96638  23902-8279  69070  32068  67222
ex(3):  33599  45054 9619  42805 7214  48160 2854  47139  30112-1112  68414
ex(5):  18745 6399  17722  78807 8687  67417-9923  65417-5815  94632 1710
ex(8):  15954 9477  03042 1956  85911  72011 7631  55587 1763  26727  34410


#A: Nitesh Waghela
#U: http://regexlib.com/REDetails.aspx?regexp_id=454

regexp: ^[a-z]+[0-9]*[a-z]+$
tree:   (([a-z]+[0-9]*)[a-z]+)
length: 2 to *
-------------------- Examples --------------------
ex(0):  jc  yj  gn  al  il  mi  fy  ht  gc  cm  gh  we  ta  ww  xa  ny  zk  nm
ex(1):  ff  yn  zp  lp  cg  gg  y8w  rw  mp  qv  ln  g5m  jo  x7r  g7u  bm  df
ex(2):  mk24r  z5jw  hi80dt  cd9ly  x4ly  mw17jt  nz1ya  wv2z  qco  ar  di13o
ex(3):  dn5xtw  mc11ho  a703x  jdxvr  xp33km  p4kzd  mxmv  kph  tu47a  pmp4c
ex(5):  tc24g  bbkl7756abub  pgjcg755fpbx  hex31029yhqc  vwoe940j  xvjk280mtrnr
ex(8):  bfu4280zlccchcz  isocd187efegqypf  hkmku855795mkqtc  qia519oyow


#A: Joe Gass
#D: Credit card validator
Works for switch card numbers too
Switch card bit is (\d{6}[-\s]?\d{12})
Credit card bit is (\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})
I use this as a client side test before running a more comprehensive server side check.
#U: http://regexlib.com/REDetails.aspx?regexp_id=455

regexp: (\d{6}[-\s]?\d{12})|(\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})
tree:   ((([0-9]{6}[\t-\r -]?)[0-9]{12})|(((((([0-9]{4}[\t-\r -]?)[0-9]{4})[\t-\r -]?)[0-9]{4})[\t-\r -]?)[0-9]{4}))
length: 16 to 19
-------------------- Examples --------------------
ex(0):  100047351644871304  681021601920707829  382568812636079417
ex(1):  00816576 47906769  34859824-6565-0428  2353003818638612
ex(2):  9026-2796-60142528  287505-991205858249  116399-436317710980
ex(3):  2608863761941533  605747 022093676504  13203048 63023867
ex(5):  515866-176458178991  288318790877407480  966161235712117632
ex(8):  158223814571130405  31694242 70634777  809943 573640441873


#A: Steven Smith
#D: This is a regex I wrote to capture requests to AspAlliance.com with an article id as the only thing after the domain.  So http://aspalliance.com/123 would go to article number 123.  It maps the URL to the actual aspx file that displays the article based on the ID.
#U: http://regexlib.com/REDetails.aspx?regexp_id=456

regexp: \.com/(\d+)$
tree:   (((((.c)o)m)/)[0-9]+)
length: 6 to *
-------------------- Examples --------------------
ex(0):  .com/7  .com/0  .com/1  .com/6  .com/8  .com/2  .com/7  .com/8  .com/1
ex(1):  .com/0  .com/9  .com/4  .com/4  .com/3  .com/4  .com/0  .com/5  .com/4
ex(2):  .com/9  .com/02  .com/1  .com/2  .com/0  .com/76  .com/0  .com/5
ex(3):  .com/4  .com/8  .com/90  .com/9  .com/51  .com/47  .com/893  .com/9
ex(5):  .com/5029  .com/776  .com/0  .com/649  .com/35  .com/4  .com/23
ex(8):  .com/524236  .com/711  .com/1684803  .com/871740  .com/743  .com/413848


#A: Darren Neimke
#D: Matches a string to ensure that it does not end with .aspx; sure, you'd probably use string handling to do something this simple but, in the real world you'd whack a regex which validates a valid url to the front of this.
The pattern was created by Wayne King; you can read about it here:
http://scottwater.com/blog/posts/10204.aspx 
#U: http://regexlib.com/REDetails.aspx?regexp_id=457

regexp: .*?$(?<!\.aspx)
ERROR:  rx: prefer-fewer '?' unimplemented: in ".*?$(?<!\.aspx)"


#A: Dean Dal Bozzo
#D: This regular expressions matches phone numbers with area codes and optional US country code and optional phone extension.  User have so many ways of entering phone numbers into input fields.  This allows for some of the ones I've encountered.  Feel free to contact me if you find ones that do not match.
#T: Phone Numbers
#U: http://regexlib.com/REDetails.aspx?regexp_id=458

regexp: ^(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*[-\/\.]?\s*(\d{3})\s*[-\/\.]?\s*(\d{4})\s*(([xX]|[eE][xX][tT])\.?\s*(\d+))*$
tree:   (((((((((((((1[\t-\r ]*)[-./]?)?(((([0-9]{3})))|[0-9]{3}))[\t-\r ]*)[-./]?)[\t-\r ]*)[0-9]{3})[\t-\r ]*)[-./]?)[\t-\r ]*)[0-9]{4})[\t-\r ]*)(((([Xx]|(([Ee][Xx])[Tt])).?)[\t-\r ]*)[0-9]+)*)
length: 10 to *
-------------------- Examples --------------------
ex(0):  (100)0473516  (650)3837768  0531451540  4605469685  1994307216
ex(1):  515 192  1960   1 (692).957. 8991ext0  381 883 9153 ExT. 1
ex(2):  1 -(161)  /874-  6126  1  .(075)   046  .9493X.3EXT  3
ex(3):  1858  /672   5223 x.  04eXT 2
ex(5):  (980) .    223   / 1600    X.4Ext641ext. 1ext  9425
ex(8):  1 (320)        -       238                2870      x     1786801x      17627EXt.      827726eXt        63780


#A: Bernard Martin-Rabaud
#D: matches any string  with characters repeated more than twice, sometimes used as fake input
#U: http://regexlib.com/REDetails.aspx?regexp_id=460

regexp: (.)\1{2,}
ERROR:  rx: \1 (backref) unimplemented: in "(.)\1{2,}"


#A: Darryl Kuhn
#D: This expression is useful for determining if an address is a PO Box type address. This can be useful in shipping systems as well as other systems that need to  make determinations based on the type of address imputed.
#U: http://regexlib.com/REDetails.aspx?regexp_id=461

regexp: ^p(ost)?[ |\.]*o(ffice)?[ |\.]*(box)?[ 0-9]*[^[a-z ]]*
tree:   (((((((((p((os)t)?)[ .|]*)o)((((ff)i)c)e)?)[ .|]*)((bo)x)?)[ 0-9]*)[\x01-\x1f!-Z\-`{-\u007f])]*)
length: 3 to *
-------------------- Examples --------------------
ex(0):  po;  po~  po+  po;  po`  poX  po6  poD  poU  poJ  poU  poH  po~  po^
ex(1):  post.office34  p oK  p.o box\"]  postoffice5>  postoffice.boxF
ex(2):  posto .box05!]  p|office|box12L  postobox@]]  p obox#]  p  o  boxW]]
ex(3):  post.o|.|box44L]]]  postoffice|box98L]]  post |.o031]]]
ex(5):  p.o.|.  box234]]]  post office .  .box33 90~]]]]]
ex(8):  post.|  . |office  . .box8712]]]  post .||o.   . |.box100;]]]]]]


#A: Vincent Faller
#D: It can be used to validate Font Sizes.
Thanks to Gideon Engelberth for the shorter version of my original expression.
#T: Font Sizes
#U: http://regexlib.com/REDetails.aspx?regexp_id=462

regexp: ^\d+\x20*([pP][xXtT])?$
tree:   (([0-9]+ *)([Pp][TXtx])?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8   1 Px  8Pt  4pt  0  0pX  3 PT  9pT  6  2pX  6pT  1 px  4   9 pT  7
ex(2):  67   4  PX  1 pX  71    9  2  60    6  5Px  04  14 pX  24   75  57  Pt
ex(3):  306   PT  19     86 PX  61 PT  74     6 Px  1    0  75 px  750   82  
ex(5):  161  pX  5163   pt  6529  pX  1904  Pt  2509       4     8326     
ex(8):  868552  7385          9411    PX  9829847        pt  09533     Px


#A: Michael Ash
#D: This RE validates the format of an ISBN number
#T: ISBN-10
#U: http://regexlib.com/REDetails.aspx?regexp_id=463

regexp: ISBN\x20(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$
ERROR:  rx: '(?...' unimplemented: in "ISBN\x20(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$"


#A: Tanguy Pruvot
#D: grab all tags attributes...
(1:img)
(2: src="truc")
>
i use it to clean html pages to grab infos...
use a RegEx Replace with "<$1>" to keep only tags codes...
#U: http://regexlib.com/REDetails.aspx?regexp_id=464

regexp: <([^\s>]*)(\s[^<]*)>
tree:   (((<[\x01-\b\x0e-\x1f!-=?-\u007f]*)([\t-\r ][\x01-;=-\u007f]*))>)
length: 3 to *
-------------------- Examples --------------------
ex(0):  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >
ex(1):  < >  <r x>  < >  < >  <P >  < >  <e >  <H v>  < |>  <} >  < '>  <5 >
ex(2):  <#k >  < n>  <uH Hn>  <H >  <jA Di>  <#c ^`>  <f r>  <q Zy>  <^x r>
ex(3):  <&K >>  < \\{>  < Q'>  <}]) >  <NQE h@>  < Hy{>  <8; >  <uE+ \\oA>
ex(5):  <^ 1ds%>  <6C3Vc >  <?6 9>hkD>  <T6!ed 5Fajn>  <.}CT >  <TSf0? /?>
ex(8):  <fKvI+P:` A6U>  <+f2b -S(Wx\"v>  <;d(^mS` >  <7P\\q{2OQ >


#A: Tanguy Pruvot
#D: All tags in first submatche
All attributes in second one...
#U: http://regexlib.com/REDetails.aspx?regexp_id=465

regexp: <([^<>\s]*)(\s[^<>]*)?>
tree:   (((<[\x01-\b\x0e-\x1f!-;=?-\u007f]*)([\t-\r ][\x01-;=?-\u007f]*)?)>)
length: 2 to *
-------------------- Examples --------------------
ex(0):  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>
ex(1):  <>  <r>  <x i>  <L>  < >  < ~>  <\" />  <>  < 2>  <>  <I a>  </ \">
ex(2):  <) U(>  <z >  <O>  < >  < n+>  <;u F{>  <>  <>  <3( &Z>  <7o>  <S >
ex(3):  < j>  <X>  <'7 O#>  <XX>  <ewN>  <bt9>  <N2 l72>  <jF; 8s>  <%fN>
ex(5):  <UjiEf >  <s '_>  <D\"j H>  <?uR>  <M[Z>  <L zos>  <ois 1n>
ex(8):  <_La-28T>  <\">  <6w1 [g_axOXZ>  <=|UnuY 3?5>  < Ji]|Z>  <\\:cf4>


#A: Eli Robillard
#D: "Starts with but does not end with."
I needed a pattern to require certain first (and optional middle) names, but to fail for certain last names. So if Bob, John, and Mary are acceptable first names but the White's are always rejected then...
#U: http://regexlib.com/REDetails.aspx?regexp_id=466

regexp: ^((Bob)|(John)|(Mary)).*$(?<!White)
ERROR:  rx: Embedded '$' unimplemented: in "^((Bob)|(John)|(Mary)).*$(?<!White)"


#A: Shawn Hall
#D: This pattern returns as much of the first x characters of a string as full words or sentences as a match, where x is currently 20. Change x to adjust the length supported in your database field.
I'm currently using this within a string shortening utility to shrink large text regions to word/sentance-boundary elements and appending an ellipsis as a text continuator.
#U: http://regexlib.com/REDetails.aspx?regexp_id=470

regexp: ^([\s\S]){1,20}([\s\.])
tree:   ([\x01-\u007f]{1,20}[\t-\r .])
length: 2 to 21
-------------------- Examples --------------------
ex(0):  V   2   A.  A.  ~.  ^   T   ;   B.  6.  f   Q   2.  ).  X.  %.  q   Y.
ex(1):  hX*|ZHjx^98,.  9j5C]mN$\\   |>|q8,$ID`R   *,'.ob59s*T <.  5FE_bs;D/ 
ex(2):  :X zQX?io`?*.  RF{YQifY.  0^;^zz-;#H%#   3Ea$J'KTXQF   uaM[pK$7Yj**E]L 
ex(3):  u\\,b:W`b!   W>|=%-:$O0;h9   npQ:SMC;u<   @w2jP}_'pnX>.  mEtOLn$y}= 
ex(5):  c_rg'mxB5@W   x5Ou<(4FY`9P.  n-:\\Rr/C   Zh&zHE06-sdM   Zc?j-/Z[=] 
ex(8):  )us\\bD&C>;6).  AW\\&Q)VOu'r{O   2L7dfoBt;!zz8/?   K!~8kg}#R 


#A: Michael Ash
#D: The RE match U.S. state abbreviation used by the U.S. Post Office.
#T: State Codes
#U: http://regexlib.com/REDetails.aspx?regexp_id=471

regexp: ^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$
ERROR:  rx: '(?...' unimplemented: in "^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$"


#A: Michael Ash
#D: captures US street address.
Address format: ##### Street 2ndunit City, ST zip+4
address1 - must have street number and proper case street name. no punctuation or P.O Box #### punctuation manditory for P.O.
address2 - optional secondary unit abbr.  Secondary range required for some units.
City - Proper case city name.
State - State abbreviation.  All caps
zip - zip+4. Can't be all zeroes
Abbreviations for secondary units and States are those used by the US Postal Service.
http://www.usps.com/ncsc/lookups/usps_abbreviations.html
Certain secondary units require a secondary range, see the above link
THis RE isn't unbreakable, Probably will allow some false positives but should work for most addresses.
#T: U.S. Street Address
#U: http://regexlib.com/REDetails.aspx?regexp_id=472

regexp: ^(?n:(?<address1>(\d{1,5}(\ 1\/[234])?(\x20[A-Z]([a-z])+)+ )|(P\.O\.\ Box\ \d{1,5}))\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\x20\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\.?)\s{1,2})?)(?<city>[A-Z]([a-z])+(\.?)(\x20[A-Z]([a-z])+){0,2})\, \x20(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])\x20(?<zipcode>(?!0{5})\d{5}(-\d {4})?))$
ERROR:  rx: '(?...' unimplemented: in "^(?n:(?<address1>(\d{1,5}(\ 1\/[234])?(\x20[A-Z]([a-z])+)+ )|(P\.O\.\ Box\ \d{1,5}))\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\x20\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\.?)\s{1,2})?)(?<city>[A-Z]([a-z])+(\.?)(\x20[A-Z]([a-z])+){0,2})\, \x20(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])\x20(?<zipcode>(?!0{5})\d{5}(-\d {4})?))$"


#A: Giorgio Spugnesi
#D: This pattern match italian fiscal code (codice fiscale).
#U: http://regexlib.com/REDetails.aspx?regexp_id=473

regexp: ^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$
tree:   (((((([A-Za-z]{6}[0-9]{2})[A-Za-z])[0-9]{2})[A-Za-z])[0-9]{3})[A-Za-z])
length: 16 to 16
-------------------- Examples --------------------
ex(0):  ZVoljI78F36M794e  rcSwUb66Q04Y104d  YqXSqQ11T52T590P  psAxEV08g51o355B
ex(1):  zGDyCl74s61G477f  FBUZuP49K30V415X  Uwzkjj49A39l018K  DGTHBb21R30b793s
ex(2):  vpdmUS61j91p337y  Xmkuol95I00P555y  JhaZvr81K16v346h  xJVISz50a20r447p
ex(3):  dkELEZ72r07R651o  oKFYfC13g22N101q  QfWyJY52T13q110G  HWMFMC47C55g373C
ex(5):  pmlKVh17D00Z706S  kRlEev49I36d042d  xcjIjY18J09w682o  QPxmfK44K64u962m
ex(8):  XsyHRt93e43l269u  OrZvpO56m11S603A  AufqZj35n46v742W  FKrPSh39n49Q499F


#A: Alsu Fifty
#D: Used to verify that the string consists of only A-z, 0 - 9 and underscore. Several words allowed, only one space between them. No spaces up front. Hey, I know it's easy, but it was not in the library! Plus, the test option here is not working well all the time.
#U: http://regexlib.com/REDetails.aspx?regexp_id=474

regexp: (\w(\s)?)+
tree:   ([0-9A-Z_a-z][\t-\r ]?)+
length: 1 to *
-------------------- Examples --------------------
ex(0):  _  p  B  O  c  V  4  H  c  c  w  j  s  M  9  D  d  4  Q  D  L  f  A  C
ex(1):  G  q  y   U  5  S   J  5  x   F   g  6  V   Y  D  g  v   F  a   1  0
ex(2):  ci   J   t   R   y   W e   Y   z   AH   1q  RD  _  5  1   H  V   N 
ex(3):  E s  u   K  O z  Na  St T  D d   c V  ySV  d k   ap l   1  vr  l zh
ex(5):  wma  _ aN o  c 6j O  E p 7  x O  o f vz  I K zH   a   0 fh  X i g N 
ex(8):  d U  4Y   v o   Fw O k vnk H   L g 7  G   P 4yH   c   la dG 


#A: James Fal
#D: Updated, changed [\w]* to [\w]+ because pattern should not match Sub (), there would be no function name which would be incorrect.
Will extract function declarations from ASP or also VB I assume. Will even capture declarations that break across new lines or ones that use the underscore(line continuation character) in Microsoft's VB, VBA, ASP, etc. Had to put this together to document some code on a project and didn't see anything like it on the web. I hope it helps out anyone else who has to re-engineer ASP or VB code. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=476

regexp: ^(Function|Sub)(\s+[\w]+)\([^\(\)]*\)
tree:   ((((((((((((Fu)n)c)t)i)o)n)|((Su)b))([\t-\r ]+[0-9A-Z_a-z]+))()[\x01-'*-\u007f]*)))
length: 7 to *
-------------------- Examples --------------------
ex(0):  Function M()  Function i()  Sub M()  Sub V()  Sub P()  Function G()
ex(1):  Sub k(>)  Function E(H)  Sub T()  Function M()  Sub K()  Function M()
ex(2):  Function  p(%#)  Function gq(c)  Sub zq(P)  Function  D('t)  Sub  E()
ex(3):  Function  K(j+$)  Sub C(Rj)  Sub  D()  Function fXl(hf)
ex(5):  Function   SRH(cB>$)  Sub    DPy8(kfu:2)  Function    PVqvg(=.)
ex(8):  Function Ec9H2uQw()  Sub        kP0mx0P(3JBeF1In)  Function       i(&C)


#A: Roy Osherove
#D: This pattern matches..
#U: http://regexlib.com/REDetails.aspx?regexp_id=477

regexp: regex
tree:   ((((re)g)e)x)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(1):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(2):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(3):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(5):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(8):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex


#A: Jon Stephens
#D: Basic US phone number matching pattern.  I found this place and used a regex, so figured I'd share.
#U: http://regexlib.com/REDetails.aspx?regexp_id=478

regexp: ^(\(?\d\d\d\)?)?( |-|\.)?\d\d\d( |-|\.)?\d{4,4}(( |-|\.)?[ext\.]+ ?\d+)?$
tree:   ((((((((((((?[0-9])[0-9])[0-9]))?)?( |-|.)?)[0-9])[0-9])[0-9])( |-|.)?)[0-9]{4})(((( |-|.)?[.etx]+) ?)[0-9]+)?)
length: 7 to *
-------------------- Examples --------------------
ex(0):  7016827  8100944  3405490  6601817  0519857  8624819  1578206  2210744
ex(1):  4199284-x 5   2671981e 6  .927-5259  (856)807 4138 . 3
ex(2):  (631326.3688t. 72  894-9020  384 7776942.ee79  2523807662-t9  951 2593
ex(3):  (619 734 5103  771)-160.2854e7   523.6044  (691)182 1258
ex(5):  (595-796 1522   456-9676xx9  7229370  .134.3762txe 207  3398807
ex(8):  728.457-4294-xexeex 053  .4101531..xetx.xt 545780  -763.2866 xt...tt520


#A: Manpreet Grewal
#D: Its extracts telephone numbers
#U: http://regexlib.com/REDetails.aspx?regexp_id=482

regexp: (?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)([ ]|[:]|\t|[-])*(?<Where>Home|Office|Work|Away|Fax|FAX|Phone)|(?<Where>Home|Office|Work|Away|Fax|FAX|Phone|Daytime|Evening)([ ]|[:]|\t|[-])*(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)|(?<Telephone>([(]([0-9]){3}[)]([ ])?([0-9]){3}([ ]|-)([0-9]){4}))
ERROR:  rx: '(?...' unimplemented: in "(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)([ ]|[:]|\t|[-])*(?<Where>Home|Office|Work|Away|Fax|FAX|Phone)|(?<Where>Home|Office|Work|Away|Fax|FAX|Phone|Daytime|Evening)([ ]|[:]|\t|[-])*(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)|(?<Telephone>([(]([0-9]){3}[)]([ ])?([0-9]){3}([ ]|-)([0-9]){4}))"


#A: Manpreet Grewal
#U: http://regexlib.com/REDetails.aspx?regexp_id=483

regexp: (?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)
ERROR:  rx: '(?...' unimplemented: in "(?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)"


#A: Manpreet Grewal
#D: E-mail addresses matcher
#U: http://regexlib.com/REDetails.aspx?regexp_id=484

regexp: (?<email>(?![ ])(\w|[.])*@(\w|[.])*)
ERROR:  rx: '(?...' unimplemented: in "(?<email>(?![ ])(\w|[.])*@(\w|[.])*)"


#A: Jared Tullis
#D: This was used to process a bunch of lines of information to determine if a line was a North American phone number or not.  It accepts numbers with or without area code with or without parenthesis and sepearated by space, dash or period.
#U: http://regexlib.com/REDetails.aspx?regexp_id=485

regexp: ([\(]?(?<AreaCode>[0-9]{3})[\)]?)?[ \.\-]?(?<Exchange>[0-9]{3})[ \.\-](?<Number>[0-9]{4})
ERROR:  rx: '(?...' unimplemented: in "([\(]?(?<AreaCode>[0-9]{3})[\)]?)?[ \.\-]?(?<Exchange>[0-9]{3})[ \.\-](?<Number>[0-9]{4})"


#A: Michael Ash
#D: This pattern captures <lastname><suffix>,<prefix><firstname><mname> Names must start with a capital letter. Last names may be hyphenated. First names can have two parts ie "Mary Anne" if there are more than two names after the comma. Suffixes can number up to XXX (30th). Standard prefixes are optional (Mr Miss)
#U: http://regexlib.com/REDetails.aspx?regexp_id=486

regexp: ^(?n:(?<lastname>(St\.\ )?(?-i:[A-Z]\'?\w+?\-?)+)(?<suffix>\ (?i:([JS]R)|((X(X{1,2})?)?((I((I{1,2})|V|X)?)|(V(I{0,3})))?)))?,((?<prefix>Dr|Prof|M(r?|(is)?)s)\ )?(?<firstname>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,2})?(\ (?<mname>(?-i:[A-Z])(\'?\w+?|\.))){0,2})$
ERROR:  rx: '(?...' unimplemented: in "^(?n:(?<lastname>(St\.\ )?(?-i:[A-Z]\'?\w+?\-?)+)(?<suffix>\ (?i:([JS]R)|((X(X{1,2})?)?((I((I{1,2})|V|X)?)|(V(I{0,3})))?)))?,((?<prefix>Dr|Prof|M(r?|(is)?)s)\ )?(?<firstname>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,2})?(\ (?<mname>(?-i:[A-Z])(\'?\w+?|\.))){0,2})$"


#A: Darren Neimke
#U: http://regexlib.com/REDetails.aspx?regexp_id=487

regexp: ^ISBN\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$
ERROR:  rx: '(?...' unimplemented: in "^ISBN\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$"


#A: Dany Lauener
#D: Matching : dd/MM/yy
Leap years compatible
Italian style, just for more fun.
Please, don't forget to rate it if you use it. THX
#U: http://regexlib.com/REDetails.aspx?regexp_id=488

regexp: ^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/(\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/(\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/(\d{2}))|(29\/02\/((0[48]|[2468][048]|[13579][26])|(00))))$
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(1[02])))/)[0-9]{2})|((((((0[1-9])|([12][0-9])|(30))/)((0[13-9])|(1[012])))/)[0-9]{2})|(((((((0[1-9])|(1[0-9])|(2[0-8]))/)0)2)/)[0-9]{2})|((((((29)/)0)2)/)(((0[48])|([2468][048])|([13579][26]))|(00))))
length: 8 to 8
-------------------- Examples --------------------
ex(0):  02/02/00  29/02/04  14/10/04  29/02/00  31/10/10  30/01/38  29/02/32
ex(1):  29/02/00  10/08/04  17/02/80  22/02/63  31/03/51  29/02/08  29/02/12
ex(2):  30/03/82  29/02/08  31/10/76  29/02/00  20/12/19  27/02/92  16/02/36
ex(3):  04/02/98  29/02/00  29/02/08  01/10/29  29/02/04  30/10/23  26/04/47
ex(5):  16/10/91  30/01/86  17/12/18  30/07/29  06/12/76  29/02/64  13/02/48
ex(8):  29/02/20  07/06/41  14/02/18  29/02/04  01/03/35  31/07/63  29/02/20


#A: Alanski Perryman
#D: Spam Stopper
#U: http://regexlib.com/REDetails.aspx?regexp_id=491

regexp: .*[Oo0][Ee][Mm].*
tree:   (((([\x01-\u007f]*[0Oo])[Ee])[Mm])[\x01-\u007f]*)
length: 3 to *
-------------------- Examples --------------------
ex(0):  0eM  oem  0Em  0EM  oEM  0EM  0EM  oeM  oEm  OeM  0EM  oEM  0EM  OeM
ex(1):  0EML  OEm  \\Oem  0EMm  |0Emi  0Em1  OeM  }oem:  oem  0eM  oeM^  VOemV
ex(2):  .0eM:  =TOeM  U0emP  oEm7\"  c$0eM[  3sOeM  pNOEm.  4~oEMV-  SwoEmA6
ex(3):  moemS  oeM#  _0emFIF  -sOeMWe(  aoEM  ofoem\"]_  0EM9yG  T`YOeMFx
ex(5):  Oem  OEm  +OEMAuywB  0H\"OEm(#G  OEm  khJ;0eM\"F  v8OEM[s7  gd:oem#*f?P
ex(8):  hW\"_oem>ov^  -V9[[a}0emd5\"g;z  ujL=W-0EMayM  OEm@l#sz  `oeMOc&


#A: Alanski Perryman
#D: Spam Stopper
#U: http://regexlib.com/REDetails.aspx?regexp_id=492

regexp: .*\$AVE|\$ave.*
tree:   ((((([\x01-\u007f]*$)A)V)E)|(((($a)v)e)[\x01-\u007f]*))
length: 4 to *
-------------------- Examples --------------------
ex(0):  $AVE  $AVE  $ave  $AVE  $ave  $AVE  $ave  $ave  $AVE  $AVE  $AVE  $ave
ex(1):  $AVE  T$AVE  j$AVE  $AVE  $ave  $aveQ  $aveh  $aveO  $ave  $ave'  $AVE
ex(2):  $ave(i  }$AVE  $ave,  33$AVE  $AVE  _$AVE  $aveW6  $aveUW  &$AVE
ex(3):  $ave*h   {Tt$AVE  }/;$AVE  $ave   $aveFM1  $ave'A%  Vf;$AVE  $avesz~
ex(5):  $ave'E]\\`  $aveY*  $ave}  $ave'.W  $aveb#B}j  $aveofu  &^gP$AVE
ex(8):  $avePezf,Kh{  $avek2@*3  8hUP$AVE  $ave4X  $avew:l  $ave82)


#A: Alanski Perryman
#D: Spam Stopper
#U: http://regexlib.com/REDetails.aspx?regexp_id=493

regexp: .*[Pp]re[Ss\$]cr[iI1]pt.*
tree:   (((((((((([\x01-\u007f]*[Pp])r)e)[$Ss])c)r)[1Ii])p)t)[\x01-\u007f]*)
length: 9 to *
-------------------- Examples --------------------
ex(0):  PreScrIpt  Prescr1pt  Prescr1pt  Prescr1pt  preScrIpt  Pre$cript
ex(1):  iprescr1ptN  vprescr1ptf  pre$cript  hPrescript  pre$crIpt  Prescr1pt
ex(2):  aPre$criptX  VPreScr1pt:$  prescriptow  PreScrIptj  *Prescript
ex(3):  3MpreScrIpt  PrescrIpt  8pre$criptNR  8w&preScr1ptS:B  za@Prescr1pt)[\"
ex(5):  preScript8>R  PreScriptzkf  preScrIpt}1noB   prescrIptaT@I
ex(8):  t7 x_preScrIpt  6;bG)Prescr1pte>\\P!  }Pre$crIpt?|;qd-|^


#A: M h
#D: Matches UK phone numbers - London and regional. It started off with something fairly short posted by liljim at www.forums.devshed.com but I wanted a little more precision to weed out all the zeros. Now it also weeds out premium phone numbers (as of 19/12/03).
#U: http://regexlib.com/REDetails.aspx?regexp_id=495

regexp: ^\s*\(?(020[7,8]{1}\)?[ ]?[1-9]{1}[0-9{2}[ ]?[0-9]{4})|(0[1-8]{1}[0-9]{3}\)?[ ]?[1-9]{1}[0-9]{2}[ ]?[0-9]{3})\s*$
tree:   ((([\t-\r ]*(?)((((((((02)0)[,78]))?) ?)[1-9])[ 0-9[{}]?)[0-9]{4}))|(((((((((0[1-8])[0-9]{3}))?) ?)[1-9])[0-9]{2}) ?)[0-9]{3})[\t-\r ]*))
length: 9 to *
-------------------- Examples --------------------
ex(0):  020724104  020,88442  020,17151  06103347632  020857648  06181369685
ex(1):   (020,10744  07287)805853   0208886132  07597)884292   05199946364 
ex(2):  (020,68587  05028)688 631    0208) 76098  020,49722  01728)331 266
ex(3):     0207)60639     0208)765643  03517 509120     08005 308 297  
ex(5):     (0208)736114  02254) 588 025   02008) 738241           020,61605
ex(8):  (020,) 72279  0207) 84816     (0207)758141  (020,)6 0555  (020,) 75671


#A: T H
#D: This regular expression matches on postive whole numbers and 0.  Whole numbers that are left padded with 0's are not a match.
#U: http://regexlib.com/REDetails.aspx?regexp_id=496

regexp: ^(0)$|^([1-9][0-9]*)$
ERROR:  rx: Embedded '$' unimplemented: in "^(0)$|^([1-9][0-9]*)$"


#A: Andres Garcia
#D: Matches a string used to rewrite urls under the WSRP specification.  It captures the URL-Encoded string that represents a url.  Url validation is not provided.
#U: http://regexlib.com/REDetails.aspx?regexp_id=497

regexp: wsrp_rewrite\?(?<wsrp_uri>[\w%:&\\/;.]*)/wsrp_rewrite
ERROR:  rx: '(?...' unimplemented: in "wsrp_rewrite\?(?<wsrp_uri>[\w%:&\\/;.]*)/wsrp_rewrite"


#A: Andres Garcia
#D: Percentage (From 0 to 100)
#U: http://regexlib.com/REDetails.aspx?regexp_id=498

regexp: ^(0*100{1,1}\.?((?<=\.)0*)?%?$)|(^0*\d{0,2}\.?((?<=\.)\d*)?%?)$
ERROR:  rx: '(?...' unimplemented: in "^(0*100{1,1}\.?((?<=\.)0*)?%?$)|(^0*\d{0,2}\.?((?<=\.)\d*)?%?)$"


#A: Brian Bothwell
#D: None of the other URL regex's seemed to work right for me, so i threw this together. works well with PHP's ereg().
#U: http://regexlib.com/REDetails.aspx?regexp_id=499

regexp: ^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)?((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,4})(\:[0-9]+)?(/[^/][a-zA-Z0-9\.\,\?\'\\/\+&%\$#\=~_\-@]*)*$
tree:   (((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)(([-.0-9A-Za-z]+(:[$%&-.0-9A-Za-z]+)*)@)?)((((((((((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[0-9]))|(((([-0-9A-Za-z]+.)*[-0-9A-Za-z]+).)[A-Za-z]{2,4})))(:[0-9]+)?)((/[\x01-.0-\u007f])[#-'+-9=?-Z\_a-z~]*)*)
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://24.0.253.255  https://84.7.88.0  ftp://254.255.253.016
ex(1):  ftp://254.73.219.082/9H  http://0.gHGm/?M  ftp://200.017.219.211:0/DM
ex(2):  http://Tc.O.c.Dzw:0  http://q.t.6d.balz:5  http://wG:L:w@Z.1o.tRk/BV?
ex(3):  ftp://Qu.jnup:199/?/r5Kv
ex(5):  ftp://8O:IC1:I3.e:WU:q:As2@252.217.046.17:42/]SUhzg/dajyM
ex(8):  http://WcG6Li:PkX:iN83:4Jn:RYSKSpq:R5fcMBK:6fxp0M&@5.255.251.254:26/^+@zB/^p7TJC


#A: mike harber
#D: Matches on MMDDYYYY only, requires all 8 digits
#U: http://regexlib.com/REDetails.aspx?regexp_id=500

regexp: ((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$))
ERROR:  rx: Embedded '^' unimplemented: in "((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$))"


#A: Brian Bothwell
#D: Ok here's an updated URL regex for you folks. It allows localhost and all TLDs. Feel free to add each country code individually if you want a tighter match.
#U: http://regexlib.com/REDetails.aspx?regexp_id=501

regexp: ^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&%\$#\=~_\-]+))*$
ERROR:  rx: Embedded '$' unimplemented: in "^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&%\$#\=~_\-]+))*$"


#A: Prashant Nayak
#D: Positive Whole number matched from 0 to 9999999. Only 7 digits length is allowed.
#U: http://regexlib.com/REDetails.aspx?regexp_id=502

regexp: ^\d{1,7}$
tree:   [0-9]{1,7}
length: 1 to 7
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1  7  0  5  1  9  8  5  7  8  6  2  4  8  1  9  1  5  7  8  2  0  6
ex(2):  0  6  1  2  8  1  2  87  30  68  19  9  0  9  7  95  61  6  7  27  89
ex(3):  71  610  88  3  669  3  05  0  7  832  0  35  70  2  479  94  9  1  76
ex(5):  29  6  9279  09  04  802  42  89  193  97  3  43  4  068  67222  85
ex(8):  6095  249  1163  3509619  7710  5721448  6348  8544  5317  6501124


#A: Michael Ash
#D: New DateTime Regex. Rebuilt better than before, better, stronger, faster. 
#T: mm/dd/yyyy  hh:MM:ss AM/PM DateTime
#U: http://regexlib.com/REDetails.aspx?regexp_id=504

regexp: (?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d)\d{2})(?(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)
ERROR:  rx: '(?...' unimplemented: in "(?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d)\d{2})(?(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)"


#A: Dean Dal Bozzo
#D: California Resale License number validator. Validates Letters and Numbers or Number only. Letters: First 2 letters can be SR, SS, ST , SX, SY, SZ (TAT Code)  Next optional letter can be S,X,Y,Z.  Next letters must be a minimum of two and a maximum of 3 (District Code).  Numbers:  Can be 8-9 numbers. Numbers can be delimited with a hypen or spaces after the first 2 numbers.  Note: I use () to extract the information I want for use in other scripts.
#T: Resale License Number (CA)
#U: http://regexlib.com/REDetails.aspx?regexp_id=506

regexp: ^((([sS][r-tR-Tx-zX-Z])\s*([sx-zSX-Z])?\s*([a-zA-Z]{2,3}))?\s*(\d\d)\s*-?\s*(\d{6,7}))$
tree:   ((((((((((([Ss][RSTXYZrstxyz])[\t-\r ]*)[SXYZsxyz]?)[\t-\r ]*)[A-Za-z]{2,3})?[\t-\r ]*)([0-9][0-9]))[\t-\r ]*)-?)[\t-\r ]*)[0-9]{6,7})
length: 8 to *
-------------------- Examples --------------------
ex(0):  70168278  10094434  05490660  18170519  85786248  19157820  62210744
ex(1):   19-119600  stZ Ppr74 6114186   15 798840   39 647861  33-629878
ex(2):    66- 8827969  ss   QU  93 -8471035   123506712
ex(3):  ST     HEZ  46  -  470817  stpql   45481417  sy     lT 07      2958763
ex(5):  sz x  Pq     99       8545789  SR  Z vvH   03 -   984668
ex(8):    35      -      5989999  sT     X        Try   02-4898276


#A: Steven Smith
#D: In response to a question on the regex list at www.aspadvice.com, this expression should ensure that a login field's username includes a 'DOMAIN\' prefix.  The latter part of the expression should probably be limited so that it only allows usernames of appropriate lengths, perhaps 3 to 20 characters (by replacing + with {3,20} for instance).
#U: http://regexlib.com/REDetails.aspx?regexp_id=508

regexp: ^DOMAIN\\\w+$
tree:   (((((((DO)M)A)I)N)\)[0-9A-Z_a-z]+)
length: 8 to *
-------------------- Examples --------------------
ex(0):  DOMAIN\\_  DOMAIN\\p  DOMAIN\\B  DOMAIN\\O  DOMAIN\\c  DOMAIN\\V
ex(1):  DOMAIN\\H  DOMAIN\\c  DOMAIN\\c  DOMAIN\\w  DOMAIN\\j  DOMAIN\\s
ex(2):  DOMAIN\\T  DOMAIN\\hB  DOMAIN\\H  DOMAIN\\vk  DOMAIN\\j4  DOMAIN\\w
ex(3):  DOMAIN\\Eow  DOMAIN\\D  DOMAIN\\V  DOMAIN\\W  DOMAIN\\Zu  DOMAIN\\UmG
ex(5):  DOMAIN\\7  DOMAIN\\6Uv  DOMAIN\\FoI  DOMAIN\\YQV  DOMAIN\\kp
ex(8):  DOMAIN\\_LzzG  DOMAIN\\4i0f8  DOMAIN\\HWCr1  DOMAIN\\Ln  DOMAIN\\d


#A: Joseph Lundgren
#D: Simple email subject line matching. This regex matches those really annoying emails that begin with 0-5 spaces, followed by a fake reply, contain a random string of letters (usually CAPITALIZED) from 1-10 characters long followed by a comma, and then followed by three lower-case words each from 1-10 characters long. In my experience, the 3 trailing words are always lower-case. the words make begin with, contain, or end in common punctuation marks.
#U: http://regexlib.com/REDetails.aspx?regexp_id=509

regexp: ^\W{0,5}[Rr]e:\W[a-zA-Z0-9]{1,10},\W[a-z]{1,10}\W[a-z]{1,10}\W[a-z]{1,10}
tree:   (((((((((((([\x01-/:-@[-^`{-\u007f]{0,5}[Rr])e):)[\x01-/:-@[-^`{-\u007f])[0-9A-Za-z]{1,10}),)[\x01-/:-@[-^`{-\u007f])[a-z]{1,10})[\x01-/:-@[-^`{-\u007f])[a-z]{1,10})[\x01-/:-@[-^`{-\u007f])[a-z]{1,10})
length: 12 to 53
-------------------- Examples --------------------
ex(0):  Re:\\v,%j*p\"x  re:&O,%k:p(l  Re:'K,&w/r!f  re:[X,]p-t]i  re:~w,$n+r#j
ex(1):  `'% re:\\72mj,]hutlly:cuepvxx$ertnutj
ex(2):  $&>Re:|yUQ021SK,+vlibjf/stjp~eyt  '.re:$LVIR3,`zpxkslf~xpun-dujtg
ex(3):  \"\"Re:&GVGsQo,*fi,iagjho#qvgvqv  {@;|Re:\\dZ2Lrv4p,]jokwx(fuoztck]gsiw
ex(5):  |^|re:]zwMtdvM,+owhso`sjuelti&mhfnvux
ex(8):  }}re:\"55C5sTOA,<coc>nytouwn$dhcs  }<Re:>R2bh,`rboaems|qqypxt-zwjfmo


#A: Roman Lukyanenko
#D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.jpg
or C:\Windows\Microsoft.NET etc
#U: http://regexlib.com/REDetails.aspx?regexp_id=512

regexp: ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(jpg|JPG)$
tree:   ((((([A-Za-z]:)|((\{2}[0-9A-Z_a-z]+)$?))(\(([0-9A-Z_a-z][ 0-9A-Z_a-z]*)[\x01-\u007f]*))+).)(((jp)g)|((JP)G)))
length: 8 to *
-------------------- Examples --------------------
ex(0):  L:\\q.JPG  \\\\V\\i.jpg  \\\\g\\o.JPG  \\\\_\\B.jpg  \\\\s\\m.JPG
ex(1):  F:\\8u.jpg  e:\\wV.JPG  \\\\Y$\\Ho.JPG  \\\\B$\\q3.jpg  \\\\p$\\0f.JPG
ex(2):  \\\\1E\\Ez<M.jpg  n:\\8Gx\\fQD=.jpg  \\\\n3$\\5hy;.JPG  A:\\Ui.jpg
ex(3):  \\\\tmY$\\J82.jpg  x:\\6QMF?\\ek:d\\VNlXBM.jpg
ex(5):  A:\\wWljGISo.jpg  \\\\srSq9\\I4as/\\uSL\\YIulQ;.jpg
ex(8):  u:\\gzbm8BuO]taO8\\E37 bu'.jpg


#A: Pete Lindquist
#D: I built this expression to test a string in ASP for valid username and password constraints.  It can be adapted for any number of scenerios.  For instance in this case, we needed to ensure the username someone wanted was not all numbers or all letters and was 6-15 characters in length with no special characters.  This expression tests negatively for all number cases, then all letter cases, and lastly tests for only alphanumeric characters in the required range.  In other words: the match must be alphanumeric with at least one number, one letter, and be between 6-15 character in length.  
#U: http://regexlib.com/REDetails.aspx?regexp_id=515

regexp: (?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,15})$
ERROR:  rx: '(?...' unimplemented: in "(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,15})$"


#A: paul Snabilie
#D: Postalcode Danmark
#U: http://regexlib.com/REDetails.aspx?regexp_id=517

regexp: ^[D-d][K-k]-[1-9]{1}[0-9]{3}$
tree:   (((([D-d][K-k])-)[1-9])[0-9]{3})
length: 7 to 7
-------------------- Examples --------------------
ex(0):  JN-5100  Tb-5906  Xb-2198  YT-1915  bL-2074  XY-6147  aS-8361  XR-1690
ex(1):  EX-6042  F\\-6999  ah-2926  TT-8994  Kd-4173  Wb-3951  bd-8143  NW-7280
ex(2):  \\a-6810  Zk-9948  ^O-1745  bj-7009  aa-1448  _R-6185  J^-2295  Qi-8645
ex(3):  dQ-4118  cj-4204  ]e-4092  b]-3991  NQ-6203  Wc-4662  Wj-4610  ]h-4493
ex(5):  He-8999  NW-6945  G[-8602  HP-5735  JR-9973  I[-5241  Dc-4818  aS-5960
ex(8):  Xk-1514  Fb-3846  a^-9331  Sg-7253  bX-6059  b]-7858  Xe-2900  Ei-6552


#A: paul Snabilie
#D: match all danish postal code
update from last danish postal code expression
#U: http://regexlib.com/REDetails.aspx?regexp_id=518

regexp: ^[D-d][K-k]( |-)[1-9]{1}[0-9]{3}$
tree:   (((([D-d][K-k])( |-))[1-9])[0-9]{3})
length: 7 to 7
-------------------- Examples --------------------
ex(0):  JN 6164  GV 7810  I_-9330  HT-1968  QU 7538  QS 6784  FR 1695  bZ 6686
ex(1):  PY-2284  NZ-3652  Li 2739  L`-9286  Ta 4228  FU 2260  P_-6505  MU-8184
ex(2):  LZ 1252  [Q 4886  \\Y 3599  _X-5981  `K-9171  Ob-7087  MM 2515  cc-5903
ex(3):  IN 7241  _c-3555  cL 6563  ST-1494  P\\ 5613  \\f 6745  E\\ 8490
ex(5):  KS 3963  Y_-4021  WU 9803  Pd-1116  aV 5472  Ok-3681  Jk-7525  EW 7173
ex(8):  Qi-8121  FK-2035  [\\-8088  M` 8457  bk-1597  Rg-8887  MU 6568  HM 1158


#A: paul Snabilie
#U: http://regexlib.com/REDetails.aspx?regexp_id=519

regexp: ^[S-s]( |-)?[1-9]{1}[0-9]{2}( |-)?[0-9]{2}$
tree:   ((((([S-s]( |-)?)[1-9])[0-9]{2})( |-)?)[0-9]{2})
length: 6 to 8
-------------------- Examples --------------------
ex(0):  Y16684  V46045  ^45314  T64706  h86097  e90216  Z74146  [40901  k54236
ex(1):  ^46069  T156 36  p 825 28  m-761 76  Y19446  X52701  i-71999  e24187
ex(2):  W 382 09  S91992  [ 541-10  _ 91648  d847 63  j82412  p180 01  c76463
ex(3):  p368 72  g50930  o-781 24  c 19520  W-714-45  b-379 68  p 45645
ex(5):  n-60855  o-42592  q24420  _81838  c39835  \\50287  a74099  r 248-46
ex(8):  ^42687  ^ 517 23  c 59863  g13738  s 291-00  j495-45  \\36665  ^-455 77


#A: Simon Christensen
#D: Peseudo-HTML code matcher. Allows for one parameter within the first tag (name is optional), the value of which can be optionally delimited by either double or single quotes. Uses backreferencing to ensure that the end and start tags match, and that any single or double quotes match. Very useful for web forums or any situation where users may be prompted to enter text for display on a webpage somewhere, as it can be quickly processed into HTML without allowing HTML to be specified within the input itself (which may pose a security risk). 
#U: http://regexlib.com/REDetails.aspx?regexp_id=520

regexp: (\[(\w+)\s*(([\w]*)=('|")?([a-zA-Z0-9|:|\/|=|-|.|\?|&]*)(\5)?)*\])([a-zA-Z0-9|:|\/|=|-|.|\?|&|\s]+)(\[\/\2\])
ERROR:  rx: \5 (backref) unimplemented: in "(\[(\w+)\s*(([\w]*)=('|")?([a-zA-Z0-9|:|\/|=|-|.|\?|&]*)(\5)?)*\])([a-zA-Z0-9|:|\/|=|-|.|\?|&|\s]+)(\[\/\2\])"


#A: Sadaf Ahmed
#D: Address
It has now been enhanced to accept # too!!
#U: http://regexlib.com/REDetails.aspx?regexp_id=521

regexp: ^[a-zA-Z\d]+(([\'\,\.\- #][a-zA-Z\d ])?[a-zA-Z\d]*[\.]*)*$
tree:   ([0-9A-Za-z]+((([ #',-.][ 0-9A-Za-z])?[0-9A-Za-z]*).*)*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  H  X  L  W  4  8  G  3  E  T  l  i  E  k  Y  5  d  A  X  c  K  w  I
ex(1):  u  B,h  x  C  w.  2.  F  Rv  Q  5  J  i  I  q.3v  9,H.  3  R  J  S  1
ex(2):  G  p  H  C  4  r  Jzj.  H5  6O  LIeJr  8  3nHN.. y.  gmtS  9M  Se  2.
ex(3):  kC fdEUH...  P7  my5N....PeM2. 2...  4  M3  KfM#P7ew#q.  4.Qsx.lY6...
ex(5):  8  M6sSO'hVJ05...-YkOvQM.....-T6b66....F1Nk.....#t
ex(8):  RzEfGqU#hPK3jnhi....Riem3SKBoM51zu..-eovo5.......LcoNIv....r.......h0P.....'Jlg........


#A: Michael Ash
#U: http://regexlib.com/REDetails.aspx?regexp_id=523

regexp: (<\/?)(?i:(?<element>a(bbr|cronym|ddress|pplet|rea)?|b(ase(font)?|do|ig|lockquote|ody|r|utton)?|c(aption|enter|ite|(o(de|l(group)?)))|d(d|el|fn|i(r|v)|l|t)|em|f(ieldset|o(nt|rm)|rame(set)?)|h([1-6]|ead|r|tml)|i(frame|mg|n(put|s)|sindex)?|kbd|l(abel|egend|i(nk)?)|m(ap|e(nu|ta))|no(frames|script)|o(bject|l|pt(group|ion))|p(aram|re)?|q|s(amp|cript|elect|mall|pan|t(r(ike|ong)|yle)|u(b|p))|t(able|body|d|extarea|foot|h|itle|r|t)|u(l)?|var))(\s(?<attr>.+?))*>
ERROR:  rx: '(?...' unimplemented: in "(<\/?)(?i:(?<element>a(bbr|cronym|ddress|pplet|rea)?|b(ase(font)?|do|ig|lockquote|ody|r|utton)?|c(aption|enter|ite|(o(de|l(group)?)))|d(d|el|fn|i(r|v)|l|t)|em|f(ieldset|o(nt|rm)|rame(set)?)|h([1-6]|ead|r|tml)|i(frame|mg|n(put|s)|sindex)?|kbd|l(abel|egend|i(nk)?)|m(ap|e(nu|ta))|no(frames|script)|o(bject|l|pt(group|ion))|p(aram|re)?|q|s(amp|cript|elect|mall|pan|t(r(ike|ong)|yle)|u(b|p))|t(able|body|d|extarea|foot|h|itle|r|t)|u(l)?|var))(\s(?<attr>.+?))*>"


#A: Michael Ash
#D: This regex will match all the valid on event attributes in HTML 4.01/XHTML 1.0
#T: (X)HTML click events
#U: http://regexlib.com/REDetails.aspx?regexp_id=524

regexp: (?i:on(blur|c(hange|lick)|dblclick|focus|keypress|(key|mouse)(down|up)|(un)?load|mouse(move|o(ut|ver))|reset|s(elect|ubmit)))
ERROR:  rx: '(?...' unimplemented: in "(?i:on(blur|c(hange|lick)|dblclick|focus|keypress|(key|mouse)(down|up)|(un)?load|mouse(move|o(ut|ver))|reset|s(elect|ubmit)))"


#A: W. D.
#D: Canadian Postal Code / Codes / Canada / Zip
Google for DFIOQU and you'll see where I got the
info for this.
Can anyone simplify this?
#U: http://regexlib.com/REDetails.aspx?regexp_id=526

regexp: ^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY][0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ] {0,1}[0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ][0-9]$
tree:   (((((([ABCEGHJ-NPRSTVXYabceghj-nprstvxy][0-9])[ABCEGHJ-NPRSTV-Zabceghj-nprstv-z]) ?)[0-9])[ABCEGHJ-NPRSTV-Zabceghj-nprstv-z])[0-9])
length: 6 to 7
-------------------- Examples --------------------
ex(0):  M4t9w0  a8j0k7  h8w6y0  c7j3Y1  M1T3Z5  v5r0C8  l5b2b0  l3e1T8  s4v3Z5
ex(1):  C8A1m2  L7z 2N1  K7L0n4  M2L6M0  n3p1c9  S1g5y7  T8v 2V5  j0j 0L2
ex(2):  K5l 5S2  V9n5s5  E3g2g6  K6H8B6  r5B 7b8  V5H 9c4  m5E 8w0  e1j 9X0
ex(3):  L4G9k2  B5K3c5  R2y2J0  J6z 9s7  T3K0m6  j5l6r1  s8T1y9  T9a 5M8
ex(5):  r0b 0L0  x4T 3n4  s8e 1G0  p6v8X8  A1j 8e6  A2x2R8  t3z 0a9  x4S2K8
ex(8):  t9p 7P5  k0S 6P7  h0j3Y1  J9v0Z2  a0C8G4  s6m9K4  g9Z 1e7  t8g 5C9


#A: Dean Dal Bozzo
#U: http://regexlib.com/REDetails.aspx?regexp_id=528

regexp: ^#?(([fFcC0369])\2){3}$
ERROR:  rx: \2 (backref) unimplemented: in "^#?(([fFcC0369])\2){3}$"


#A: Sachin Bhatt
#D: Used to validate Credit Card numbers, Checks if it contains 16 numbers in groups of 4 separated by -, ,or nothing
#U: http://regexlib.com/REDetails.aspx?regexp_id=529

regexp: ^(\d{4}-){3}\d{4}$|^(\d{4} ){3}\d{4}$|^\d{16}$
ERROR:  rx: Embedded '$' unimplemented: in "^(\d{4}-){3}\d{4}$|^(\d{4} ){3}\d{4}$|^\d{16}$"


#A: Frederick Samson
#D: The goal of this regular expression is to replace all & (ampersand) characters by & if they are not the start of HTML entities. I used
http://www.w3schools.com/html/html_entitiesref.asp as a reference. You can then use RegExp Replace method to do the work. Was helpful for me, might helpful be for you...
#U: http://regexlib.com/REDetails.aspx?regexp_id=532

regexp: &(?![a-zA-Z]{2,6};|#[0-9]{3};)
ERROR:  rx: '(?...' unimplemented: in "&(?![a-zA-Z]{2,6};|#[0-9]{3};)"


#A: William Rohrbach
#D: This regular expression matches a series of names and/or email addresses much like you would do in Outlook's To field (e.g. To: wrohrbach@carlson.com;miles, er;roemer;lagrander, nitra). The first entry must be a name (in the form of last name followed by a comma and first name) or an email address. The following entries are a semicolon followed by one name or email address. The comma and first name are optional components of the name part.
#U: http://regexlib.com/REDetails.aspx?regexp_id=533

regexp: ^((([a-zA-Z\'\.\-]+)?)((,\s*([a-zA-Z]+))?)|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})))(;{1}(((([a-zA-Z\'\.\-]+){1})((,\s*([a-zA-Z]+))?))|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})){1}))*$
tree:   (((['-.A-Za-z]+?((,[\t-\r ]*)[A-Za-z]+)?)|(((((([0-9A-Za-z]([-._]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([-.]?[0-9A-Za-z]+)*).)[A-Za-z]{2,}))(;((['-.A-Za-z]+((,[\t-\r ]*)[A-Za-z]+)?)|(((((([0-9A-Za-z]([-._]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([-.]?[0-9A-Za-z]+)*).)[A-Za-z]{2,})))*)
length: 0 to *
-------------------- Examples --------------------
ex(0):      3@i.nK        G@c.qN  a@R.AH  U@O.ik      R@Y.KX  t@S.Rp    
ex(1):  z@h.Kb;f  M  I  k, P;Q,q  n,R  G.W@1.de;v@9.R.qC  g  1f@Dd.Fr;S@B.Pu  p
ex(2):  C.e@N1-iSD.kV;h-Neu@r-jp.yS  2.43.m@Z.q.xe  t;V@jd69.Sn;A@b.qodo.BKU  Z
ex(3):  K@ib.AIfK;iqj  f.UwM@4k.2o-rv.HYl  D_y9H@9.jkp;H-2w.rVcl@K.K.kAWk
ex(5):  unSN@6cD.vV
ex(8):  y.CT-qe3X0_vsMSp_nvvXBXB@Dkrxi0F78RZOXM.mckS;xqEYFlmhx@l-1xhvkKifAeyRqZ.B7zRXjiPSY-qfPymAH-XTAwHwcU.uA;qIDs, APWTCi;ws5la_Ue6Cp2EpNla9o3k5.FCNynzaQWbqzwhuIxb5is@mr-QbtI-dIkdv3.ZyyVdrWT;q@j5k0Ws3lEiCMUeS.lBvRVqA;mlwO6sB0KXsHBHDJ8eAaEZiuhmw_yR26p6WfhjErZBLKI@5q.A.k1dy.sOGhwN88F-2ian433.Pz;Fa;e_U_UShDA9IwGb9Yq9Du2UNBl2tbAyz.7_SO6Ar9n7PMBy@epp7-Je4O4x-DC.F03-4W4cgqp3VfmAZ5.wlPdPnRbQ


#A: Michael Ash
#D: This regex validates U.S. social security numbers, within the range of numbers that have been currently allocated. 
#T: Social Security Number
#U: http://regexlib.com/REDetails.aspx?regexp_id=535

regexp: ^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$
ERROR:  rx: '(?...' unimplemented: in "^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$"


#A: Jerry Schmersahl
#D: Example of a regular expression that can be used to parse a comma delimited string into constituent, named sub-strings. Add or remove regex subfield definitions (?<field1>[^,]+) and corresponding delimiting characters in the regular expression as necessary to accommodate the string and subfields you intend to parse. Optionally, rename the subfield names in the regular expression to more meaningful names if you are using the parsed sub-strings in a program. Replace all occurrences of the comma in the regular expression with any required alternative delimiting character. As long as the delimiting character used does not occur naturally in any of the sub-strings, you should be good-to-go. NOTE: To change the delimiter character you must replace all occurrences of the comma in the current regex (of which there are 5) with the new delimiter character. e.g. (?<field1>[^;]+); changes the delimiter character to a semi-colon for the first field.
#T: Parse Comma Delimited Strings
#U: http://regexlib.com/REDetails.aspx?regexp_id=538

regexp: ^(?<field1>[^,]+),(?<field2>[^,]+),(?<field3>[^,]+)$
ERROR:  rx: '(?...' unimplemented: in "^(?<field1>[^,]+),(?<field2>[^,]+),(?<field3>[^,]+)$"


#A: Jerry Schmersahl
#D: Updated on 3/4/2004 per feedback to additionally exclude SSNs that begin with 666 which, as reported, are also not valid.
Regular expression for validating US Social Security Numbers. Accepts optional hyphens or spaces as formatting characters. Parses the three subfields of the SSN into three named sub-strings (SSN1, SSN2, and SSN3) to facilitate program use. Rejects matches on all zeros for any individual subfield of the Social Security Number. Matches only on those SSNs that fall within the range of numbers currently allocated by the Social Security Administration.
#U: http://regexlib.com/REDetails.aspx?regexp_id=539

regexp: ^(?!000)(?!666)(?<SSN3>[0-6]\d{2}|7(?:[0-6]\d|7[012]))([- ]?)(?!00)(?<SSN2>\d\d)\1(?!0000)(?<SSN4>\d{4})$
ERROR:  rx: '(?...' unimplemented: in "^(?!000)(?!666)(?<SSN3>[0-6]\d{2}|7(?:[0-6]\d|7[012]))([- ]?)(?!00)(?<SSN2>\d\d)\1(?!0000)(?<SSN4>\d{4})$"


#A: Rob Eberhardt
#D: regex to validate email address
noteworthy:
(1) It allows usernames with 1 or 2 alphanum characters, or 3+ chars can have -._ in the middle. username may NOT start/end with -._ or any other non alphanumeric character.
(2) It allows heirarchical domain names (e.g. me@really.big.com). Similar -._ placement rules there.
(3) It allows 2-9 character alphabetic-only TLDs (that oughta cover museum and adnauseum :>).
(4) No IP email addresses though -- I wouldn't Want to accept that kind of address. 
#T: Email
#U: http://regexlib.com/REDetails.aspx?regexp_id=541

regexp: ^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$
tree:   (((([0-9A-Za-z]([-.0-9A-Z_a-z]*[0-9A-Za-z])*)@)((([0-9A-Za-z][-0-9A-Z_a-z]*)[0-9A-Za-z]).)+)[A-Za-z]{2,9})
length: 7 to *
-------------------- Examples --------------------
ex(0):  Z@HX.Lr  t@ZB.KY  F@Ky.Mb  x@qw.lw  2@BO.HN  T@HD.jO  E@EO.oU  V@pE.wj
ex(1):  j@3gm.DRlBRG  A@xQ.dMSp  4@lQG.UOdvxz  H@n6X.ULJSRSoU  p@ctP.qwld
ex(2):  N@G26U.0G.habmN  a@Mp.VcWL.liQS  R@f6.AhIwvQ  BpZ6@Y9.X62.CrzoQB
ex(3):  7@uKeuo.15wk.NQxy  u_M@ywh.LLQSZjq  m0@F4M.p-70.oPXWH
ex(5):  DBCdfAQq.tMKv@OYMQeA.7s4.q-GxHe.YxXkKWL
ex(8):  C@JenhF.NN1h0CL.cZWO.UBZJaP


#A: Paul Haines
#D: Validates a UNC to conform to \\server\service
Must have a "\\" at the start
Server may contain alpha/numeric/underscore/dash,
Followed by another single "\"
Service may contain alpha/numeric/underscore/dash/$/space
Note:
Service may not start nor end with a space
Service may only contain one $, and only at the end
No additional "\" may follow afterwards
#U: http://regexlib.com/REDetails.aspx?regexp_id=542

regexp: ^\\{2}[\w-]+\\(([\w-][\w-\s]*[\w-]+[$$]?$)|([\w-][$$]?$))
ERROR:  rx: invalid range: in "^\\{2}[\w-]+\\(([\w-][\w-\s]*[\w-]+[$$]?$)|([\w-][$$]?$))"


#A: Andrew van der Stock
#D: Matches positive whole numbers with exactly zero or two decimal points if a . is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=543

regexp: ^\d+(?:\.\d{0,2})?$
tree:   ([0-9]+(.[0-9]{0,2})?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8.  1.6  4  4.6  4  8  9  6.4  8  4.1  7  8.4  7  9  2  6.2  9.  7.4
ex(2):  16.7  7.1  19.8  77.52  90.21  6  78  1  89.92  65.8  2.67  1.56  53.76
ex(3):  10  5.  79  933  3  79.72  457.2  96  13.57  222  4.8  938  1  667  9.1
ex(5):  8851.3  4.1  2287.3  0  6851  4.68  3.3  59  3.26  3350.  297  937.0  9
ex(8):  74732655  4980  59761957  2371822  2588  24232492.8  9  58.7  200096


#A: Lloyd Sturge
#D: This expression will return the src (source) property of an image tag <IMG>. The source returned is limited to the file extensions supplied. It doesn't matter if the image is prefixed with '../' or 'http://..blah' or 'drive\path' or nothing. This expression could be modifed to return other sources or for the tags (ie <BGSOUND>, <SCRIPT>, etc.) depending on the file extensions given.
I needed this to replace the source of images in a HTML page when I wanted to save the page to a local drive and keep the images intact.
If anybody could modify this further to include only the <IMG> tag, I would appreciate the effort.
#U: http://regexlib.com/REDetails.aspx?regexp_id=544

regexp: src[^>]*[^/].(?:jpg|bmp|gif)(?:\"|\')
tree:   (((((((sr)c)[\x01-=?-\u007f]*)[\x01-.0-\u007f])[\x01-\u007f])(((jp)g)|((bm)p)|((gi)f)))("|'))
length: 9 to *
-------------------- Examples --------------------
ex(0):  srcV:jpg'  srciLbmp\"  srctSbmp\"  src(,bmp\"  src!+gif\"  srcrIbmp'
ex(1):  src'Hjpg'  src_>jpg'  src&tCbmp\"  srcPF*jpg'  src+}9gif\"  srcxnjpg'
ex(2):  src{l;Igif'  src$ttOgif'  srccvbmp\"  srcM\"k'jpg'  src&(Yjpg'
ex(3):  srck*gif'  srcz&`Qejpg'  srcs]*-bmp'  srcj1ajpg'  srcZMbmp\"  srcMqjpg'
ex(5):  srcA5OQe*gif'  srcEmgif'  src,Wr]G~Jbmp'  srcOX(jpg\"  srcB<NBbmp'
ex(8):  src[pW*WfWjpg'  srcAt}N3r{bmp\"  src)&#H*I`O9gif'  srcsHHql?gif\"


#A: Tim Walters
#D: Simple parser of XPath, it doesn't handle the more complex statements but can be of use in some situations.
#U: http://regexlib.com/REDetails.aspx?regexp_id=545

regexp: ^(?<path>(/?(?<step>\w+))+)(?<predicate>\[(?<comparison>\s*(?<lhs>@\w+)\s*(?<operator><=|>=|<>|=|<|>)\s*(?<rhs>('[^']*'|"[^"]*"))\s*(and|or)?)+\])*$
ERROR:  rx: '(?...' unimplemented: in "^(?<path>(/?(?<step>\w+))+)(?<predicate>\[(?<comparison>\s*(?<lhs>@\w+)\s*(?<operator><=|>=|<>|=|<|>)\s*(?<rhs>('[^']*'|"[^"]*"))\s*(and|or)?)+\])*$"


#A: Jerry Schmersahl
#D: Regular expression for validating a decimal IP address. Matches 4 groups of from 1 to 3 digits, where each group of digits ranges from 0 to 255 in value. Groups of digits must be separated by a single period (.) with no other formatting characters present. Uses conditional regex with lookahead syntax to prevent a match on a period following the final group of digits.
#U: http://regexlib.com/REDetails.aspx?regexp_id=547

regexp: ^(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.?\d)\.)){4}$
ERROR:  rx: '(?...' unimplemented: in "^(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.?\d)\.)){4}$"


#A: Jerry Schmersahl
#D: Regular expression for validating a US currency string field. Matches an unlimited number of digits to the left of an optional decimal point. Digits to the left of the decimal point can optionally be formatted with commas, in standard US currency format. If the decimal point is present, it must be followed by exactly two digits to the right. Matches an optional preceding dollar sign. Uses regex lookahead to preclude leading zeros and to match the optional formatting comma.
#U: http://regexlib.com/REDetails.aspx?regexp_id=551

regexp: (?n:(^\$?(?!0,?\d)\d{1,3}(?=(?<1>,)|(?<1>))(\k<1>\d{3})*(\.\d\d)?)$)
ERROR:  rx: '(?...' unimplemented: in "(?n:(^\$?(?!0,?\d)\d{1,3}(?=(?<1>,)|(?<1>))(\k<1>\d{3})*(\.\d\d)?)$)"


#A: Jerry Schmersahl
#D: Regular expression for validating a person's full name. Matches on two general formats: 1) first second third last (where first, second, and third names are optional and all present are separated by a space); 2) last, first second third (where second and third are optional, last is followed immediately by a comma and a space, and second, and third, if present, are separated by a space from each other and from first). First corresponds to surname and last corresponds to family name. Each name part is captured to a named group to facilitate program manipulation. Each name part must begin with an uppercase letter, followed by zero or more lowercase letters, except for the last name. Last name must begin with an uppercase letter, followed by one or more lowercase letters, but will match exceptions formatted like the following: McD..., MacD..., O'R... Only format is validated, not spelling. NOTE: This regular expression uses positive and negative regex lookahead to determine the general format of the name, i.e. the presence or the absence of the comma determines the general format that will match. Furthermore, this initial version is not designed to accommodate titles and things like "3rd".
#U: http://regexlib.com/REDetails.aspx?regexp_id=552

regexp: (?n:(^(?(?![^,]+?,)((?<first>[A-Z][a-z]*?) )?((?<second>[A-Z][a-z]*?) )?((?<third>[A-Z][a-z]*?) )?)(?<last>[A-Z](('|[a-z]{1,2})[A-Z])?[a-z]+))(?(?=,)(, (?<first>[A-Z][a-z]*?))?( (?<second>[A-Z][a-z]*?))?( (?<third>[A-Z][a-z]*?))?)$)
ERROR:  rx: '(?...' unimplemented: in "(?n:(^(?(?![^,]+?,)((?<first>[A-Z][a-z]*?) )?((?<second>[A-Z][a-z]*?) )?((?<third>[A-Z][a-z]*?) )?)(?<last>[A-Z](('|[a-z]{1,2})[A-Z])?[a-z]+))(?(?=,)(, (?<first>[A-Z][a-z]*?))?( (?<second>[A-Z][a-z]*?))?( (?<third>[A-Z][a-z]*?))?)$)"


#A: Alanski Perryman
#D: spam stopper, catches non english language flocks for letter A
#U: http://regexlib.com/REDetails.aspx?regexp_id=554

regexp: (À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|a|A|@|@|α|À|Á|Â|Ã|Ä|Å|À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|à|á|â|ã|ä|å)
tree:   (([Ã][\u0080])|([Ã][\u0081])|([Ã][\u0082])|([Ã][\u0083])|([Ã][\u0084])|([Ã][\u0085])|([Ã][\u00a0])|([Ã][¡])|([Ã][¢])|([Ã][£])|([Ã][¤])|([Ã][¥])|a|A|@|@|([Î][±])|([Ã][\u0080])|([Ã][\u0081])|([Ã][\u0082])|([Ã][\u0083])|([Ã][\u0084])|([Ã][\u0085])|([Ã][\u0080])|([Ã][\u0081])|([Ã][\u0082])|([Ã][\u0083])|([Ã][\u0084])|([Ã][\u0085])|([Ã][\u00a0])|([Ã][¡])|([Ã][¢])|([Ã][£])|([Ã][¤])|([Ã][¥])|([Ã][\u00a0])|([Ã][¡])|([Ã][¢])|([Ã][£])|([Ã][¤])|([Ã][¥]))
length: 1 to 2
-------------------- Examples --------------------
ex(0):  Á [FAIL]  Â [FAIL]  Ã [FAIL]  Á [FAIL]  Á [FAIL]  ã [FAIL]  Å [FAIL]
ex(1):  á [FAIL]  α [FAIL]  ä [FAIL]  Ä [FAIL]  Å [FAIL]  ä [FAIL]  Ã [FAIL]
ex(2):  À [FAIL]  ã [FAIL]  à [FAIL]  å [FAIL]  å [FAIL]  ä [FAIL]  a  Â [FAIL]
ex(3):  à [FAIL]  Å [FAIL]  À [FAIL]  Ä [FAIL]  Á [FAIL]  Â [FAIL]  Ä [FAIL]
ex(5):  à [FAIL]  @  à [FAIL]  à [FAIL]  å [FAIL]  â [FAIL]  Ä [FAIL]  À [FAIL]
ex(8):  Å [FAIL]  Á [FAIL]  å [FAIL]  Å [FAIL]  ã [FAIL]  Ä [FAIL]  À [FAIL]


#A: Alanski Perryman
#D: Spam stopper, catches non english characters used in flocks.
#U: http://regexlib.com/REDetails.aspx?regexp_id=555

regexp: (È|É|Ê|Ë|è|é|ê|ë|E|e|È|É|Ê|Ë|È|É|Ê|Ë|è|é|ê|ë|è|é|ê|ë)
tree:   (([Ã][\u0088])|([Ã][\u0089])|([Ã][\u008a])|([Ã][\u008b])|([Ã][¨])|([Ã][©])|([Ã][ª])|([Ã][«])|E|e|([Ã][\u0088])|([Ã][\u0089])|([Ã][\u008a])|([Ã][\u008b])|([Ã][\u0088])|([Ã][\u0089])|([Ã][\u008a])|([Ã][\u008b])|([Ã][¨])|([Ã][©])|([Ã][ª])|([Ã][«])|([Ã][¨])|([Ã][©])|([Ã][ª])|([Ã][«]))
length: 1 to 2
-------------------- Examples --------------------
ex(0):  Ê [FAIL]  ê [FAIL]  É [FAIL]  ê [FAIL]  ë [FAIL]  E  ë [FAIL]  ë [FAIL]
ex(1):  È [FAIL]  È [FAIL]  É [FAIL]  É [FAIL]  è [FAIL]  è [FAIL]  È [FAIL]
ex(2):  è [FAIL]  È [FAIL]  Ê [FAIL]  É [FAIL]  Ê [FAIL]  E  ê [FAIL]  Ë [FAIL]
ex(3):  È [FAIL]  ê [FAIL]  Ë [FAIL]  è [FAIL]  é [FAIL]  è [FAIL]  ë [FAIL]
ex(5):  è [FAIL]  ë [FAIL]  È [FAIL]  E  É [FAIL]  ê [FAIL]  ë [FAIL]  Ê [FAIL]
ex(8):  È [FAIL]  é [FAIL]  ë [FAIL]  ê [FAIL]  ê [FAIL]  È [FAIL]  ë [FAIL]


#A: Martin Matusiak
#D: A very crude url pattern.
#U: http://regexlib.com/REDetails.aspx?regexp_id=563

regexp: ^http://([a-zA-Z0-9_\-]+)([\.][a-zA-Z0-9_\-]+)+([/][a-zA-Z0-9\~\(\)_\-]*)+([\.][a-zA-Z0-9\(\)_\-]+)*$
tree:   ((((((((((ht)t)p):)/)/)[-0-9A-Z_a-z]+)(.[-0-9A-Z_a-z]+)+)(/[()-0-9A-Z_a-z~]*)+)(.[()-0-9A-Z_a-z]+)*)
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://_.y/  http://j.f/  http://_.n/  http://d.a/  http://U.D/
ex(1):  http://T.1/.K  http://z.1/._  http://j.g/A.g  http://f.H/1
ex(2):  http://Q.sY/FD.G  http://Tp.C2.tT/  http://u.K9/L6/qg.Lp
ex(3):  http://0f.-7.7f.a/  http://Z.wB.03s.l/ID.D
ex(5):  http://R.V/V1/6I/Zb.9nJ.hja.dpcRZ  http://p.0gbo/P/5tl/K94
ex(8):  http://ashKq.Yh/H/NtW1wu/Zfcx-.5ATi.Qk.YgO11.VKA9)W.Ny_bNnBc


#A: Rohan Pathare
#D: Validates date format by DD MMM YYYY. Validates days for each month also.
Ensures that month is uppercase.
#U: http://regexlib.com/REDetails.aspx?regexp_id=565

regexp: ^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC) ((1[6-9]|[2-9]\d)\d{2})$
ERROR:  rx: '(?...' unimplemented: in "^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC) ((1[6-9]|[2-9]\d)\d{2})$"


#A: Donald Schneider
#U: http://regexlib.com/REDetails.aspx?regexp_id=567

regexp: ^[-+]?\d+(\.\d+)?|[-+]?\.\d+?$
ERROR:  rx: prefer-fewer '?' unimplemented: in "^[-+]?\d+(\.\d+)?|[-+]?\.\d+?$"


#A: Donald Schneider
#D: matches 0 and all positive integers only. will accept comma formatting only.
#U: http://regexlib.com/REDetails.aspx?regexp_id=568

regexp: ^(\d|,)*\d*$
tree:   (([0-9]|,)*[0-9]*)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    2    1  2  0    41  ,  ,    2  1  4  0  0  ,0  7  1    ,0  ,    5  
ex(2):  2  ,5    5  ,4  59  0532  ,7  ,,25  ,789  ,    30  06  2  ,,  34  ,77  
ex(3):  128  58,78  ,68  149  ,08  8818  ,,8  ,73  ,,  ,,,  6130  ,,0  ,,21
ex(5):  6,,9  ,3  ,3,4  ,,,0723  ,6,149233  55162652  8897779  43,23326  5,542
ex(8):  ,,,521,0117  ,9,,07,556436120  99,,,30,0900507  2,2,,,317  ,59510367


#A: Vladimir Klykov
#D: This regular expression matches "c" format strings for printf/scanf functions. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=569

regexp: %[\-\+0\s\#]{0,1}(\d+){0,1}(\.\d+){0,1}[hlI]{0,1}[cCdiouxXeEfgGnpsS]{1}
tree:   (((((%[\t-\r #+-0]?)[0-9]+?)(.[0-9]+)?)[Ihl]?)[CEGSXc-ginopsux])
length: 2 to *
-------------------- Examples --------------------
ex(0):  %C  %x  %X  %S  %o  %i  %e  %f  %u  %e  %S  %S  %E  %n  %G  %s  %p  %s
ex(1):  %7ld  %u  % 1u  %#3hi  %+Id  %.0lS  %3g  %-2d  %6.5n  %8.7G  %04.1E
ex(2):  %.11d  %-11X  %.99e  %+n  %-1lS  %#.13G  %1e  %2o  %#0.9f  %0.76If
ex(3):  %918hX  %6.457G  %6.3hu  %lE  %027.516ho  %.0lg  %#.398C  %564Ii
ex(5):  %#X  %9950.99326Is  %7e  %0Ip  % f  % 32.26965E  %S  % 62d  %E
ex(8):  % .14294708If  %0.573381In  %#026201hS  %#Id  %n  %3570.87220069u


#A: Frederic Trudeau
#D: This expression will help match Quebec's postal codes.
#U: http://regexlib.com/REDetails.aspx?regexp_id=570

regexp: ^[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}(\-| |){1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}$
tree:   (((((([A-Za-z][0-9])[A-Za-z])(-| |()))[0-9])[A-Za-z])[0-9])
length: 6 to 7
-------------------- Examples --------------------
ex(0):  Z3X 1w6  T5A8X0  z2Q1r7  Z6b 9N4  D8l1B4  R1s8Z0  i4X2Q7  V5s8R2
ex(1):  c5I 0s0  l2M4S8  j2u1M7  C6T-1p5  J4g-2q2  y9f 1W9  u3B-9G2  g3h 5f6
ex(2):  s5F-6Y4  p1v3O8  t6m-5H3  Z2F 2t4  Q9B 4V9  S0P 4m5  W1V7y7  v3D-9t8
ex(3):  K8i5L2  B8t 7r0  V2M-2k2  C5Y 2e2  i2n6q7  o0E6r5  h5e-7B6  m6T 2F8
ex(5):  P8p-3E0  E0V3F5  n3F2M8  G3d6Y8  X3n 2K3  o0u-7A1  n7B9M1  H1d2n5
ex(8):  i5R 9z1  W9R 3c3  p5l-4e9  U8Q 0K3  q5x 3A7  D0T8I4  Y4x8e1  R5d-6k5


#A: Sean Ziencik
#D: String formater matching.
#U: http://regexlib.com/REDetails.aspx?regexp_id=571

regexp: .\{\d\}
tree:   ((([\x01-\u007f]{)[0-9])})
length: 4 to 4
-------------------- Examples --------------------
ex(0):  V{5}  h{5}  B{4}  h{3}  o{2}  3{8}  '{7}  %{9}  #{5}  t{7}  :{5}  ^{6}
ex(1):  c{9}  o{9}  Q{7}  }{6}  _{1}  \"{6}  z{4}  P{2}  5{4}  |{2}  #{7}  o{3}
ex(2):  d{2}  G{3}  r{0}  j{8}  G{5}  ,{5}  *{7}  S{0}  4{8}  `{9}  q{8}  c{4}
ex(3):  Q{8}  ;{2}  ^{6}  z{4}  M{0}  r{7}  9{1}  ~{0}  q{8}  5{6}  ){8}  D{8}
ex(5):  k{7}  r{3}  D{2}  *{9}  #{6}  w{3}  i{4}  F{4}  ){0}  \"{4}  w{2}  z{6}
ex(8):  b{5}  e{2}  ${7}  :{2}  5{8}  #{6}  ({9}  W{2}  h{6}  b{4}  d{2}  z{5}


#A: Andrew Yeaman
#D: Validates hours and minutes. Allows for entry in the form of hours:minutes with optional minutes and optional hours indicator (H or h).
#U: http://regexlib.com/REDetails.aspx?regexp_id=574

regexp: ^(\d{1,2})(\s?(H|h)?)(:([0-5]\d))?$
tree:   (([0-9]{1,2}([\t-\r ]?(H|h)?))(:([0-5][0-9]))?)
length: 1 to 7
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  85 h  2  5:09  8  53 :09  6H  81  99 H:33  0  04 :22  19H:44  4 H:42
ex(2):  20  81 :01  31 :29  5 H  1  45 H:32  78   80  6 :23  8 h  0h  2 H  35 H
ex(3):  65   5 H:44  31   75H  8h:38  4   3H:51  8 :33  1  9 H  96:20  72  94
ex(5):  3  3h  2  2 H:32  29 H  4 :20  30   2H:40  8 :32  2H:47  3H:22  99h  1H
ex(8):  98H:12  35 :15  0 :07  12 H:02  29  70   9 H  9   05   71 :45  2:31


#A: Neville Clark
#U: http://regexlib.com/REDetails.aspx?regexp_id=575

regexp: ^(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?$
tree:   ((([0-9]{1,3}(,[0-9]{3})*)|[0-9]+)([\x01-\u007f][0-9]+)?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  4  2  6  2  3  2  8  0  4  5  2  6  0  1  8  7  9  9  0  3  3  3  8
ex(1):  8  2  31  0r3  0?6  7  3  1^6  35,792  7  32  21,610  9  5^1  37,425@6
ex(2):  28,384  7  82  76,885P48  3o92  60,932,648  704,466,440<59  9  26
ex(3):  1u022  5<52  67,563,023U77  5  0<8  7  986  136,482,442  804(02  57  7
ex(5):  0,589o5822  8]23169  4,674,623,547  8999q402  336,209,990,489,827,094
ex(8):  593,495,144  6090220&6525353  11,949^01248


#A: Wayne Herndon
#D: Validates numeric input of 99,999,999 to 0 with or without commas. but no decimal places. Very simple, but not bad for a novice.
#U: http://regexlib.com/REDetails.aspx?regexp_id=576

regexp: ^\d{1,8}$|^\d{1,3},\d{3}$|^\d{1,2},\d{3},\d{3}$
ERROR:  rx: Embedded '$' unimplemented: in "^\d{1,8}$|^\d{1,3},\d{3}$|^\d{1,2},\d{3},\d{3}$"


#A: Uris Virott
#D: Date validation in the dd/mm/yyyy format for years 1000+ (i.e 999 or 0999 not matching) and taking february leap years into account.
#U: http://regexlib.com/REDetails.aspx?regexp_id=578

regexp: ((([0][1-9]|[12][\d])|[3][01])[-/]([0][13578]|[1][02])[-/][1-9]\d\d\d)|((([0][1-9]|[12][\d])|[3][0])[-/]([0][13456789]|[1][012])[-/][1-9]\d\d\d)|(([0][1-9]|[12][\d])[-/][0][2][-/][1-9]\d([02468][048]|[13579][26]))|(([0][1-9]|[12][0-8])[-/][0][2][-/][1-9]\d\d\d)
tree:   (((((((((((0[1-9])|([12][0-9]))|(3[01]))[-/])((0[13578])|(1[02])))[-/])[1-9])[0-9])[0-9])[0-9])|((((((((((0[1-9])|([12][0-9]))|(30))[-/])((0[13-9])|(1[012])))[-/])[1-9])[0-9])[0-9])[0-9])|(((((((((0[1-9])|([12][0-9]))[-/])0)2)[-/])[1-9])[0-9])(([02468][048])|([13579][26])))|((((((((((0[1-9])|([12][0-8]))[-/])0)2)[-/])[1-9])[0-9])[0-9])[0-9]))
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02-02/1184  16/03-4516  04/10/9151  30/12/8378  11-11-3160  04-12/8047
ex(1):  08/02/8552  08-06/1934  12-02-5608  02/10/6444  30-06-1111  08/02/7123
ex(2):  22/02-6212  18-02-6172  15-02-6456  12/02/6712  09/02-8248  31/12-1056
ex(3):  05/02/7008  08/02/8935  17-02/4372  30-03/9984  19-02-9424  09-07-6393
ex(5):  15-02-1922  10/12-5014  05-10-1639  14/02/4272  18/05-5612  05-02/5045
ex(8):  30/12/3086  31/12/3942  17/01/5801  30-10-7732  11-02-4290  30-10-5156


#A: Marc Ziss
#D: Matches either an explicitly input percentage or dollar amount, variety of formats of currency borrowed from another example on this board. This is useful when you want to prompt the user to specify either dollars or percent using only one field, and want to validate the entered text is one or the other.
#U: http://regexlib.com/REDetails.aspx?regexp_id=579

regexp: (^\$(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$|^\d{1,2}(\.\d{1,2})? *%$|^100%$)
ERROR:  rx: Embedded '^' unimplemented: in "(^\$(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$|^\d{1,2}(\.\d{1,2})? *%$|^100%$)"


#A: Michael Ash
#D: This regex can be used to restrict passwords to a length of 8 to 20 aplhanumeric characters and select special characters. The password also can not start with a digit, underscore or special character and must contain at least one digit.
#U: http://regexlib.com/REDetails.aspx?regexp_id=580

regexp: ^(?=[^\d_].*?\d)\w(\w|[!@#$%]){7,20}
ERROR:  rx: '(?...' unimplemented: in "^(?=[^\d_].*?\d)\w(\w|[!@#$%]){7,20}"


#A: Michael Ash
#D: YYYY/MM/DD hh:mm:ss format DateTime Regex.
This regex will validate a date, time or a datetime.
It will also capture the date fields and the time.
Dates are in the YYYY/MM/DD format and validated for months, number of days in a month and leap years (29/2)
Date field can be separated by matched periods(.), dashes(-) or forward slashes(/)
Time is either 12 hour AM/PM format (hh:mm:ss AM), where minutes and seconds are optional.
AM or PM required. or 24 hour military format (hh:mm:ss), from 00:00:00 to 23:59:59,
where hours and minutes fields are required, including leading 0 for hours less than 10.
Please refer to http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for additional info
Datetime is the above date and time formats separated by a space,
with the date first (YYYY/MM/DD hh:mm:ss)
!IMPORTANT NOTE: your regex engine must support lookbehinds and named groups to use this expression
#T: yyyy/mm/dd hhMMss Date
#U: http://regexlib.com/REDetails.aspx?regexp_id=581

regexp: ^(?ni:(?=\d)((?'year'((1[6-9])|([2-9]\d))\d\d)(?'sep'[/.-])(?'month'0?[1-9]|1[012])\2(?'day'((?<!(\2((0?[2469])|11)\2))31)|(?<!\2(0?2)\2)(29|30)|((?<=((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\2\3\2)29)|((0?[1-9])|(1\d)|(2[0-8])))(?:(?=\x20\d)\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2}))?)$
ERROR:  rx: '(?...' unimplemented: in "^(?ni:(?=\d)((?'year'((1[6-9])|([2-9]\d))\d\d)(?'sep'[/.-])(?'month'0?[1-9]|1[012])\2(?'day'((?<!(\2((0?[2469])|11)\2))31)|(?<!\2(0?2)\2)(29|30)|((?<=((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\2\3\2)29)|((0?[1-9])|(1\d)|(2[0-8])))(?:(?=\x20\d)\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2}))?)$"


#A: Julio de la Yncera
#D: This regular expression is for admitting wild card searches on Emails the wild card character is * and in my case will only allow to do the search when the * is place after the first 3 alphanumeric characters. If you need to modify this behavior change the {3,40} to {n,m} where n is how many characters before the * and m is the total number if characters.
#U: http://regexlib.com/REDetails.aspx?regexp_id=582

regexp: \w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$|^([0-9a-zA-Z'\.]{3,40})\*|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\.([0-9a-zA-Z']+)$|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\*+$|^$
ERROR:  rx: invalid range: in "\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$|^([0-9a-zA-Z'\.]{3,40})\*|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\.([0-9a-zA-Z']+)$|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\*+$|^$"


#A: Senthil Gunabalan
#D: This is a basic telephone number vaildation which needs a compulsory prefix of a '+' sign with three digits and followed by a hipen, another three digits and finally followed by another hipen and four more digits.
Regards,
Senthil Gunabalan
#U: http://regexlib.com/REDetails.aspx?regexp_id=586

regexp: ^[+][0-9]\d{2}-\d{3}-\d{4}$
tree:   ((((((+[0-9])[0-9]{2})-)[0-9]{3})-)[0-9]{4})
length: 13 to 13
-------------------- Examples --------------------
ex(0):  +701-682-7810  +094-434-0549  +066-018-1705  +198-578-6248
ex(1):  +210-744-4217  +305-147-6859  +524-236-1843  +632-676-9026
ex(2):  +177-506-8042  +161-863-1199  +960-759-9279  +260-670-1855
ex(3):  +117-363-0508  +189-517-5550  +093-143-3509  +619-428-0540
ex(5):  +980-298-8108  +038-706-1948  +326-685-1874  +576-197-9200
ex(8):  +448-438-6713  +418-558-1594  +632-958-7671  +817-645-8178


#A: Fabrizio Fortini
#D: Validates a Italian mobile phone number with (or without) the International code
#U: http://regexlib.com/REDetails.aspx?regexp_id=587

regexp: ^([+]39)?((38[{8,9}|0])|(34[{7-9}|0])|(36[6|8|0])|(33[{3-9}|0])|(32[{8,9}]))([\d]{7})$
tree:   ((((+3)9)?(((38)[,089{|}])|((34)[0789{|}])|((36)[068|])|((33)[03-9{|}])|((32)[,89{}])))[0-9]{7})
length: 10 to 13
-------------------- Examples --------------------
ex(0):  32,4531280  3291644871  38,5076713  3330859227  3330190382  3605489329
ex(1):  36|4146286  3604784370  3669069256  +393687673066  3496104617
ex(2):  +393663252425  +393880799926  3661999607  +3933}0464573  +393484393145
ex(3):  3475564380  3684366851  3802050913  3669950982  +393892279809
ex(5):  3886558564  38,5236501  32{2820202  +393898861605  +3936|1785733
ex(8):  +393378481659  3473023159  36|0555403  34{2437629  +3932,5876718


#A: W. D.
#D: U. S. or Canadian telephone number regular expression. <BR>
//           # Checks phone numbers for validity                           <BR>
//  [01]?    # optional '0', or '1'                                        <BR>
//  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
//  \(?      # optional parentheses                                        <BR>
//  [2-9]    # first # of the area code must not be a '0' or '1'           <BR>
//  \d{2}    # next 2 digits of area code can be 0-9                       <BR>
//  \)?      # optional parentheses                                        <BR>
//  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
//  \d{3}    # 3-digit prefix                                              <BR>
//  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
//  \d{4}    # 4-digit station number                                      <BR>
#U: http://regexlib.com/REDetails.aspx?regexp_id=588

regexp: ^[01]?[- .]?\(?[2-9]\d{2}\)?[- .]?\d{3}[- .]?\d{4}$
tree:   ((((((((([01]?[ -.]?)(?)[2-9])[0-9]{2}))?)[ -.]?)[0-9]{3})[ -.]?)[0-9]{4})
length: 10 to 16
-------------------- Examples --------------------
ex(0):  7696340267  2571801103  3053145154  2764139829  6238179220  5657114106
ex(1):  .989) 6929792   (7851459026  469077 0560   775)5011043  1(938163 1267
ex(2):  470314.8922  (488)360.2068   375)629.3612  0(790) 2491163
ex(3):  (540.4097023  0-349.471.6226  548)0823802  (980)0116535
ex(5):  1(7477522424   (817).867.2273  0 562) 7137629  1 (5516713785
ex(8):  0 (257)429 0911  0(8745515338  0 (342.7126088  -(269 6356319


#A: Amos Hurd
#D: UK phone number. Allows 3, 4 or 5 digit regional prefix, with 8, 7 or 6 digit phone number respectively, plus optional 3 or 4 digit extension number prefixed with a # symbol. Also allows optional brackets surrounding the regional prefix and optional spaces between appropriate groups of numbers.
#T: UK Phone Number
#U: http://regexlib.com/REDetails.aspx?regexp_id=589

regexp: ^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$
tree:   ((((((((((?0)[0-9]{4}))?)[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{3})|((((((((?0)[0-9]{3}))?)[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{4})|((((((((?0)[0-9]{2}))?)[\t-\r ]?)[0-9]{4})[\t-\r ]?)[0-9]{4}))(([\t-\r ]?#)([0-9]{4}|[0-9]{3}))?)
length: 11 to 21
-------------------- Examples --------------------
ex(0):  01000473516  06503837768  00531451540  04605469685  01994307216
ex(1):  (05185317149 #0812  095)4363 1613  0816) 617 4761 #0794
ex(2):  00326)368867#7894  0902 8024229 #409  0316)932 1596  07352) 298 517
ex(3):  (050)0879 7341 #875  07714126307#453  0621080 0082  08225) 588470
ex(5):  (03157)968752  007)68901992  (09073323803  (025) 32952033#989
ex(8):  04420 915945 #111  0748)5143389#077  (0578) 331 3267#374  (058)25017025


#A: Jon Galloway
#D: This pattern matches a decimal value with up to 3 digits after the decimal. Comma is allowed as a thousands separator but not required. N/A is also allowed.
#U: http://regexlib.com/REDetails.aspx?regexp_id=590

regexp: (^N/A$)|(^[-]?(\d+)(\.\d{0,3})?$)|(^[-]?(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{1,3})?)$)
ERROR:  rx: Embedded '^' unimplemented: in "(^N/A$)|(^[-]?(\d+)(\.\d{0,3})?$)|(^[-]?(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{1,3})?)$)"


#A: Cliff Schneide
#D: After looking for a date regular expression, I could not find one that meet my need, so I develop one that handles 1 or 2 digets in the month and day and also handle feb up to 29.  This will allow both / and - for separators, which is what I needed.  I hope this helps others too.  Thanks,
Cliff Schneide
#U: http://regexlib.com/REDetails.aspx?regexp_id=591

regexp: ^((((0?[13578])|(1[02]))[\/|\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\/|\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\/\-]?(0?[1-9]|[0-2][0-9])))[\/\-]?\d{2,4}$
tree:   (((((((0?[13578])|(1[02]))[-/|]?)(((0?[1-9])|([012][0-9]))|(3[01])))|((((0?[469])|(11))[-/|]?)(((0?[1-9])|([012][0-9]))|(30)))|(((0?2)[-/]?)((0?[1-9])|([012][0-9]))))[-/]?)[0-9]{2,4})
length: 4 to 10
-------------------- Examples --------------------
ex(0):  83124  93066  31093  2207  12313  43036  6810  2614  2273  40033
ex(1):  2249417  2297927  42294  02-07-880  930345  1130848  119-076  12-30-59
ex(2):  11/30-4398  02/1/768  02-0690  11307277  2/00411  08052749  53003
ex(3):  10/0765  11-30919  02-9060  10-06327  1130370  10|64636  10/31/174
ex(5):  11/30-073  03-08640  531585  0223/733  1030/439  11|0061  1231/48
ex(8):  11|107551  26-9640  1130007  5-09421  726-82  01/8413  09/30-1656


#A: Amos Hurd
#D: UK mobile phone number, with optional +44 national code. Allows optional brackets and spaces at appropriate positions.
#T: UK Mobile Phone Number
#U: http://regexlib.com/REDetails.aspx?regexp_id=592

regexp: ^(\+44\s?7\d{3}|\(?07\d{3}\)?)\s?\d{3}\s?\d{3}$
tree:   ((((((((((+4)4)[\t-\r ]?)7)[0-9]{3})|(((((?0)7)[0-9]{3}))?))[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{3})
length: 11 to 16
-------------------- Examples --------------------
ex(0):  +447100047351  +447965038377  +447780531451  07369460546  07951519943
ex(1):  +44 7232173668  (07789 196911  +447187843 911  +447209816 744
ex(2):  +447506988692  +44 7935509 999  07213) 590 807  07663 701118
ex(3):  +44 7385398050  +447685181909  (07335)116 335  (07008748095
ex(5):  +44 7846 447 317  (07260038820  07024 092 820  +447324 457 579
ex(8):  +44 7833594967  +44 7709305006  (07627)594621  +44 7263429 428


#A: Amos Hurd
#D: Modified version of UK phone number regular expression. Now allows +44 national code in addition to extension numbers of 3 or 4 digits. Previous expression was: ^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$
#T: Modified UK Phone Number
#U: http://regexlib.com/REDetails.aspx?regexp_id=593

regexp: ^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$
tree:   (((((((((((+4)4)[\t-\r ]?)[0-9]{4})|((((?0)[0-9]{4}))?))[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{3})|(((((((((+4)4)[\t-\r ]?)[0-9]{3})|((((?0)[0-9]{3}))?))[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{4})|(((((((((+4)4)[\t-\r ]?)[0-9]{2})|((((?0)[0-9]{2}))?))[\t-\r ]?)[0-9]{4})[\t-\r ]?)[0-9]{4}))(([\t-\r ]?#)([0-9]{4}|[0-9]{3}))?)
length: 11 to 22
-------------------- Examples --------------------
ex(0):  +442410404689  +444716430518  08364587648  08406347942  07692847450
ex(1):  004 8704 5952  (02671 769730  +448030 717 597 #761  00794 950 798
ex(2):  (040) 6562 4480  03137 026 943 #1601  +4455 8587 8539  +44 869043 7862
ex(3):  (07920) 805 801 #0902  +4465 65320298  (02801121126  00214631164
ex(5):  (00262) 758165#8073  +442934 365758#5671  +442779875158#9378
ex(8):  +448831579937 #5472  +44 1720 994 631  +44 00 46862546 #779


#A: Amos Hurd
#D: UK vehicle registration system currently in use (as defined by the DVLA and put into effect from September 2001, and therefore does not allow registrations prior to this date).
#T: Current UK Vehicle Registration
#U: http://regexlib.com/REDetails.aspx?regexp_id=595

regexp: ^([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3}$
tree:   ((((([A-HK-PRSVWY][A-HJ-PR-Y])[\t-\r ]?)((0[2-9])|([1-9][0-9])))[\t-\r ]?)[A-HJ-PR-Z]{3})
length: 7 to 9
-------------------- Examples --------------------
ex(0):  CD26YPJ  CO53VCC  NE06RYK  VB09NJX  CM74SUN  AU68WZX  DB09ZUD  SV16WXB
ex(1):  EV92 OMD  HR28LLV  LA56ZVG  KC 25ZVP  GH04BFO  BJ 05HDL  YD03WJK
ex(2):  OF63KWJ  KP 10MFS  KO 03AAA  AU 09DCU  DT 04 WMR  KO 02 EBR  AB27JWE
ex(3):  WG16 EFA  NV38UNC  LU20 UZW  YP 49 LRA  NX 07 MNF  RE 05 HAR  BH 19MKM
ex(5):  YK04BDB  PH 06YJS  PL66SEK  YF 89CBM  KW 02 MEX  YH02BFS  EO 07ZBW
ex(8):  BW59 OKZ  VB 39 OML  NH 10 GXA  OE04WSP  NV02MTP  MH 07DNT  HK32 YOM


#A: Amos Hurd
#D: UK vehicle registration system prior to September 2001. Allows both older suffix and the later prefix formats in simple form, with optional spaces.
#T: Older UK Vehicle Registration
#U: http://regexlib.com/REDetails.aspx?regexp_id=596

regexp: ^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})$
tree:   ((((([A-Z]{3}[\t-\r ]?)([0-9]{3}|[0-9]{2}|d))[\t-\r ]?)[A-Z])|(((([A-Z][\t-\r ]?)([0-9]{3}|[0-9]{2}|[0-9]))[\t-\r ]?)[A-Z]{3}))
length: 5 to 9
-------------------- Examples --------------------
ex(0):  DPE32V  W7OEK  NTG297B  D5XKO  JJR51V  B079NXS  B676ZGU  NMF85O
ex(1):  WAG 37N  TSR 49 I  JNP 62 S  OPU798 F  Q159 GYK  CAM 447 I  S062 ZSV
ex(2):  L 4SDK  ITN 49 E  O 8 HAC  A7 EFU  T 378WQZ  ZQI 098F  D 775 ZDK
ex(3):  HLB61Y  U 0 RFV  LWE811 Z  C 853 ONN  SSN 253P  Z 349OIH  WLB04 J
ex(5):  G01CBQ  BAZ09Z  P 3 DGP  Y 72LEA  X 351 RAP  Q50LDM  IRHdG  SGQ 10A
ex(8):  FZJ d X  K 7GTM  N 300ZTA  G 8 RBJ  UVO 063S  BYOdA  K77 IKN  O409AOW


#A: Shaune Stark
#D: Email validation based on Rob Eberhardt's (Thanks, Rob!) email expression, but allows single letter subdomains...
#U: http://regexlib.com/REDetails.aspx?regexp_id=599

regexp: ^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$
tree:   (((([0-9A-Za-z]([-.0-9A-Z_a-z]*[0-9A-Za-z])*)@)(([0-9A-Za-z]+([-0-9A-Z_a-z]*[0-9A-Za-z])*).)+)[A-Za-z]{2,9})
length: 6 to *
-------------------- Examples --------------------
ex(0):  Z@H.Xg  V@t.Za  p@C.FO  w@z.ZB  d@P.wV  v@D.eK  Z@m.PE  m@c.qR  K@G.NU
ex(1):  vSv@Ljz.aRnjxp  i@EAu.BshW  tZr@1.GhHVE  wk@0.Wyr  SOT@3.NVqjy
ex(2):  E@50.roBEkf  DPc@xN.7S.MCiU  P@BTE.E6U.FGtCa  RED4OY4@O_Y.oJyECN
ex(3):  pNW5FWZt@G.C5eLg692qn.PVbvn  N39@A2.qA.MsDittw  d@hfhM.Bwe0v0.dcunWO
ex(5):  D@FZxqgjTAh33NxRyF2PDE.w.rzW8NUoahuw3.C.LfaW
ex(8):  qDkjnROCSx@FEyPAIOUy1w3G5AlrB.ZO4Yv6d1a2fRrYtSKsQe9GroD5FlA6O3AQ_B_xY7.tAb79R5X17zTtQLi-Ny92DKJLIK3sIt2hZ4.Xu0TtMJP7v_tIjD8OY3EB9qdWIS9uu4CQ-9iB58qE0.HBNAy_qrkRgRI7_PJt0jpBtO2Vm1zVYx8uIqiSvlV_nUamZ.0xe91iC_Qykt5C.HqG.K3K3xY0K.QwlXAB


#A: Sebastian Hiller
#D: Not a 100% email validation. It doesn't work with IP-Adresses, but it's good for most common cases. At least I hope so.
#U: http://regexlib.com/REDetails.aspx?regexp_id=600

regexp: ^((?:(?:(?:\w[\.\-\+]?)*)\w)+)\@((?:(?:(?:\w[\.\-\+]?){0,62})\w)+)\.(\w{2,6})$
tree:   (((((([0-9A-Z_a-z][+-.]?)*[0-9A-Z_a-z])+@)(([0-9A-Z_a-z][+-.]?){0,62}[0-9A-Z_a-z])+).)[0-9A-Z_a-z]{2,6})
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@p.BO  c@V.4H  c@c.wj  s@M.9D  d@4.QD  L@f.AC  v@G.OE  c@E.DS  U@q.AX
ex(1):  V@t+z.6-J-nI+Mhug+um0.I-mJ5.T.OHx-P.aZ.L+Tx.2g.Mv.1j.c.eX5A
ex(2):  xTUl@01q4CZ+HUws7-bI5-oWfw-m+b7.t-6-T.g.hF8+o+1f+B-9g-F+jF.qmQa
ex(3):  1Z.DnJ6+j@AJ+x-1fo.VS.0.qCDfo+Ts+XdFoDt+X8b.O-N7Gy-Io-6LydY8oC-lex9K.lc.3.0-e-2-m+B-roe.jZ.XK-bo.PlJ8
ex(5):  T-0n-B+t-O-1y@6.5E2-iXdx-U.8H+OYwyg+V9HSS+c-Lc9QC.edAMK+6+C-s-gS.gpeOJ.G+c.S-U.pvu+jwe-g-AoUS+nfx1.vuJU
ex(8):  HM+MKzk+C.QI-E+DecJ.o0EU.Ycu.1UY3N@lP.zl+9-AkR-qIU.1.P.wN+s-F+JC-WvZebK+p.DS.L-6yY-e+Q-QJ.JVP


#A: Alan Ferrandiz Langley
#D: A regular expression that validates the any format of fixed telephone numbers inside Lima - Peru, including an optional extension of at least one number up to four numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=602

regexp: ^([2-9])(\d{2})(-?|\040?)(\d{4})( ?|\040?)(\d{1,4}?|\040?)$
ERROR:  rx: prefer-fewer '?' unimplemented: in "^([2-9])(\d{2})(-?|\040?)(\d{4})( ?|\040?)(\d{1,4}?|\040?)$"


#A: Alan Ferrandiz Langley
#D: A regular expression that validates the any of the new formats of cellular phones numbers in Peru, allows an optional dash in the middle of the number.
#U: http://regexlib.com/REDetails.aspx?regexp_id=603

regexp: ^([8-9])([1-9])(\d{2})(-?|\040?)(\d{4})$
tree:   (((([89][1-9])[0-9]{2})(-?| ?))[0-9]{4})
length: 8 to 9
-------------------- Examples --------------------
ex(0):  81010473  86166503  83373780  87312073  93941813  98952473  89479495
ex(1):  92878668  9131-2845  93372198  8972 0665  9659-6006  9197-0587
ex(2):  85401713  8117 0609  8440 6562  94099380  98248922  8358 4873
ex(3):  85815124  8559-5492  95219829  84255771  85491315  9112-8462  8473 1730
ex(5):  82848326  91857470  85639367  9250 6201  8930 4563  98239349  9565 3221
ex(8):  9706 5866  9714 4581  9389 3536  92509251  8157-4724  9602 5729


#A: Matt Wickless
#D: This pattern handles currency including the following:
optional period with two or more digits to the right of the period
optional commas
optional dollar sign($)
#U: http://regexlib.com/REDetails.aspx?regexp_id=604

regexp: ^(\$)?((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{2,})?$
tree:   (($?([0-9]+|([0-9]{1,3}(,[0-9]{3})*)))(.[0-9]{2,})?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  4  2  6  2  3  2  8  0  4  5  2  6  0  1  8  7  9  9  0  3  3  3  8
ex(1):  $0.27  38,468.48  8.17  $8.88  0  0.45  $9.85  $1  $412  $3  31,197
ex(2):  $221.678  71  $8.01  $0  $91,690,351  $475,384  61,350,120  $31.981
ex(3):  6,960,759,927.548  461,266  $8,928,685,528  3,969  573,629,912
ex(5):  090,363.97  77.549  1.89  226,114,980,298,810,803  84,651,125,888.7232
ex(8):  4.39947  $9,504,981,522,072,870,852.8900  $1855815.00  72.8351586


#A: JP Honeywell
#D: Validates *usable* US telephone numbers (possibly Canadian and Caribbean Islands as well?) Numbers cannot beginning with zero, one, (any number)11, or 555. It will allow either a hyphen, space or period as a separator.
Technically (and contrary to popular belief) most 555- numbers ARE valid numbers [see http://www.nanpa.com/nas/public/form555MasterReport.do?method=display555MasterReport ] but they are unlikely to be used by normal folks. Therefore, excluding them with this regex is useful to prevent bogus/fraudulent telephone numbers in forms.
FYI, the fictitious 555- numbers used in the movies and TV are only in the range of 555-0100 through 555-0199. Not very many, huh?
#U: http://regexlib.com/REDetails.aspx?regexp_id=605

regexp: ^(?!\d[1]{2}|[5]{3})([2-9]\d{2})([. -]*)\d{4}$
ERROR:  rx: '(?...' unimplemented: in "^(?!\d[1]{2}|[5]{3})([2-9]\d{2})([. -]*)\d{4}$"


#A: Don Johnston
#D: US Phone Number: This regular expression for US phone numbers conforms to NANP A-digit and D-digit requirments (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. Format validation accepts 10-digits without delimiters, optional parens on area code, and optional spaces or dashes between area code, central office code and station code. Acceptable formats include 2225551212, 222 555 1212, 222-555-1212, (222) 555 1212, (222) 555-1212, etc. You can add/remove formatting options to meet your needs.
#U: http://regexlib.com/REDetails.aspx?regexp_id=607

regexp: ^(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$
tree:   (((((((((([2-9])[0-9]{2}))) ?)|(([2-9][0-9]{2})(-?| ?)))[2-9])[0-9]{2})[ -]?)[0-9]{4})
length: 10 to 14
-------------------- Examples --------------------
ex(0):  (524)3503877  (257)7030737  (810)2018170  2588670948  (447)3688866
ex(1):  (628) 8515313  795 3424071  736 8261383  (560)6519721  (733)707-0680
ex(2):  860 7845992  294932-0181  (459) 2690316  800-963-4110  681595-4259
ex(3):  (836) 794-0585  401 815-6348  (807) 444-7294  (457)208-0202
ex(5):  (975) 239-3676  487-2805220  (780) 714 5213  (227) 567 3803
ex(8):  (938)9855539  879 8726950  7229407407  (341)201-7763  354378-3316


#A: Sebastian Hiller
#D: Captures Submatches, problem:domainname length can be longer than 64 chars, because every [a-zA-Z0-9][\.\-_] is only countet as one char.
#U: http://regexlib.com/REDetails.aspx?regexp_id=608

regexp: ^((?:(?:(?:[a-zA-Z0-9][\.\-\+_]?)*)[a-zA-Z0-9])+)\@((?:(?:(?:[a-zA-Z0-9][\.\-_]?){0,62})[a-zA-Z0-9])+)\.([a-zA-Z0-9]{2,6})$
tree:   (((((([0-9A-Za-z][+-._]?)*[0-9A-Za-z])+@)(([0-9A-Za-z][-._]?){0,62}[0-9A-Za-z])+).)[0-9A-Za-z]{2,6})
length: 6 to *
-------------------- Examples --------------------
ex(0):  Z@H.XL  W@4.8G  3@E.Tl  i@E.kY  5@d.AX  c@K.wI  G@u.Uh  b@U.IE  O@2.sF
ex(1):  w.X@7.VJ-y-m_P.RR.5J.9_2tip-lX_td.Y-6_V_dYf.AdSlE-h_h_pqs-mp_L_H.h.dztI
ex(2):  5.4@ZVf.Z.mi.wP_eG2-p_J-v_J-TXmlaE-G-2.u-a-1PfRE_K_t-iZP-1y_Y.FeH0R_V_yS.7t4m_r-ziD.18-0sX_Woi4-f9-j_i.YT_Z.QRgj
ex(3):  At@JIu.8-JL-PL.iv.1.d-F.a.U.cYkEX-jiX_eB-Tgz.A.Lo
ex(5):  4NlYq-Y-b@v2-H.Aq-Kz-J.Q-P_m-m.FJI-7z_0_Cl_u-sMG_x-5T-o-A.j.Pd4
ex(8):  4_Hk-3_e+f_C.bR-k.0XEVg.aVf-e6fhg.Y+t_cZ4+e-t0.t+J.B_Y0pde_Eey@v.p-XT_YsBF-us-Q-7_Olv-V-MQ8K-uf-VQ_O_p.H1.x6_FqVt.vE-rW.W-A-sBAS1.b.lm2.z-r_tg_I_YxVE.9J.dA-7akS_4_pG_OTQ-y_X-O78-M-k_L-X75nQd5b.Pa_m.vHVSqV-I_a_5Z-w.zhZ.qxXsp8H_Vu.p_ewJ_fS.UJ_ED.t_c.d_J_Zq-Kr9s7_hD_am.oC-H.O-m-gO-z4-D-Cdc-k_v_k.qv.w_a-e_e_Z.zv15h


#A: Danny Garber
#D: Validates a date expression (or empty value) in CCYYMMDD format, checking a leap year from 00000101 A.D. to 99991231
#U: http://regexlib.com/REDetails.aspx?regexp_id=609

regexp: ^(((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|((\d{2}[02468][048]|\d{2}[13579][26]))0229)){0,8}$
tree:   (([0-9]{4}((((0[13578])|(1[02]))((0[1-9])|([12][0-9])|(3[01])))|(((0[13-9])|(1[012]))((0[1-9])|([12][0-9])|(30)))|((02)((0[1-9])|(1[0-9])|(2[0-8])))))|((((((([0-9]{2}[02468])[048])|(([0-9]{2}[13579])[26]))0)2)2)9)){0,8}
length: 0 to 64
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      27760408        51240229                  38600131  04160229
ex(2):      30420414      07820630    4836022951961212  8632022912720229
ex(3):  66600229  47680211  61320325  198102073066063090260211  97431005
ex(5):    4515063082100219171301243152022933680214
ex(8):  1568022952760229  320602170744022974851208


#A: Michael Ash
#D: DateTime Validator. This RE validates both dates and/or times patterns. Days in Feb. are also validated for Leap years. Dates: in  dd/mm/yyyy or d/m/yy format between 1/1/1600 - 31/12/9999. Leading zeroes are optional. Date separators can be either matching dashes(-), slashes(/) or periods(.) Times: in the hh:MM:ss AM/PM 12 hour format (12:00 AM - 11:59:59 PM) or hh:MM:ss military time format (00:00:00 - 23:59:59). The 12 hour time format: 1) may have a leading zero for the hour. 2) Minutes and seconds are optional for the 12 hour format 3) AM or PM is required and case sensitive. Military time 1) must have a leading zero for all hours less than 10. 2) Minutes are manditory. 3) seconds are optional. Datetimes: combination of the above formats. A date first then a time separated by a space. ex) dd/mm/yyyy hh:MM:ss This RE is an variation of one of my other Datetime (mm/dd/yyyy) validator already in this library http://www.regexlib.com/REDetails.aspx?regexp_id=369, so the same rules for leap year apply. All 4 digit year and all two digit years except 00, which might not be a leap year.
#U: http://regexlib.com/REDetails.aspx?regexp_id=610

regexp: ^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$
ERROR:  rx: '(?...' unimplemented: in "^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$"


#A: Ernesto Giralt
#D: Capture the attributes "content", "name" and "scheme" used to parse META tags from any XHTML or HTML input. Useful for developers looking for expresions to parse & get Dublin Core single elements from HTML pages.
#U: http://regexlib.com/REDetails.aspx?regexp_id=611

regexp: (<meta\s+)*((name\s*=\s*("|')(?<name>[^'("|')]*)("|')){1}|content\s*=\s*("|')(?<content>[^'("|')]*)("|')|scheme\s*=\s*("|')(?<scheme>[^'("|')]*)("|'))
ERROR:  rx: '(?...' unimplemented: in "(<meta\s+)*((name\s*=\s*("|')(?<name>[^'("|')]*)("|')){1}|content\s*=\s*("|')(?<content>[^'("|')]*)("|')|scheme\s*=\s*("|')(?<scheme>[^'("|')]*)("|'))"


#A: c raz
#D: Wrote this to accept either decimals or zero, but not whole numbers - for a particular project...
#U: http://regexlib.com/REDetails.aspx?regexp_id=612

regexp: (^([0-9]+[.]+[0-9]+)|(0)$)
ERROR:  rx: Embedded '^' unimplemented: in "(^([0-9]+[.]+[0-9]+)|(0)$)"


#A: Amos Hurd
#D: UK vehicle registration system. This is the obvious combination of two previous expressions posted here, to merge the older system with the current system.
#T: Combined UK Vehicle Registration
#U: http://regexlib.com/REDetails.aspx?regexp_id=617

regexp: ^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})|(([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3})$
tree:   ((((([A-Z]{3}[\t-\r ]?)([0-9]{3}|[0-9]{2}|d))[\t-\r ]?)[A-Z])|(((([A-Z][\t-\r ]?)([0-9]{3}|[0-9]{2}|[0-9]))[\t-\r ]?)[A-Z]{3})|((((([A-HK-PRSVWY][A-HJ-PR-Y])[\t-\r ]?)((0[2-9])|([1-9][0-9])))[\t-\r ]?)[A-HJ-PR-Z]{3}))
length: 5 to 9
-------------------- Examples --------------------
ex(0):  DPE32V  WXZdF  QCT829K  IPD21O  JJR51V  B079NXS  BRC17U  KV33TDC  L2TPE
ex(1):  KC 80 VSW  E3QYG  L 1BBQ  BV 19RGT  NFC 26 B  ON 19AVL  P2 IJY
ex(2):  L52WAO  Y1QLY  M72 DVS  FUR77 Y  VJ03ZZP  Y201 ZBP  OD 09 FWW  KK14 KVK
ex(3):  I 4 ZTW  FWN 61 P  HT43JHF  HFP d C  OLH847I  HH57 OBL  QZV66I  A42RRS
ex(5):  N40 BJX  D31MLD  DY 58OCU  WHX dI  NXZ 39 F  OF 09 YVE  DDS28V
ex(8):  SBF353 G  DTSd D  U387GEH  LRR473 H  A 146 RFF  ALU 857 E  LEHd Z


#A: Rohan Pathare
#U: http://regexlib.com/REDetails.aspx?regexp_id=618

regexp: ^((31(?! (FEB|APR|JUN|SEP|NOV)))|(30|29)|(0[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)$
ERROR:  rx: '(?...' unimplemented: in "^((31(?! (FEB|APR|JUN|SEP|NOV)))|(30|29)|(0[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)$"


#A: Michael Ash
#D: This regex can be used to split the values of a comma delimitted list. List elements may be quoted, unquoted or empty.  Commas inside a pair of  quotation marks are not matched. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=621

regexp: ,(?!(?<=(?:^|,)\s*\x22(?:[^\x22]|\x22\x22|\\\x22)*,)(?:[^\x22]|\x22\x22|\\\x22)*\x22\s*(?:,|$))
ERROR:  rx: '(?...' unimplemented: in ",(?!(?<=(?:^|,)\s*\x22(?:[^\x22]|\x22\x22|\\\x22)*,)(?:[^\x22]|\x22\x22|\\\x22)*\x22\s*(?:,|$))"


#A: Brad Dobyns
#D: Version 1.3.0: I needed a regexp to validate URL's without the ht(f)tp(s):// and include North American domains (like .us and .ca) and there didn't seem to be one available...so I created one. It will also work with ASP QueryStrings and anchor URL's. If you have a problem with the expression or have any suggestions to improve, please write me and let me know. Added .uk domain and expression now allows for URLs that contain JSP session IDs. 4/14/04 - added ability to include URLs that start with server names.
#U: http://regexlib.com/REDetails.aspx?regexp_id=622

regexp: ^(((ht|f)tp(s?))\://)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk)(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&%\$#\=~_\-]+))*$
ERROR:  rx: Embedded '$' unimplemented: in "^(((ht|f)tp(s?))\://)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk)(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&%\$#\=~_\-]+))*$"


#A: Valmir Cinquini
#D: Brazilian Postal Box RegExp validation
#U: http://regexlib.com/REDetails.aspx?regexp_id=623

regexp: \d{5}\-\d{3}
tree:   (([0-9]{5}-)[0-9]{3})
length: 9 to 9
-------------------- Examples --------------------
ex(0):  70168-278  10094-434  05490-660  18170-519  85786-248  19157-820
ex(1):  42173-051  47685-952  42361-843  63267-690  26006-697  21381-775
ex(2):  18631-199  96075-992  79260-670  18559-943  03164-311  73630-508
ex(3):  50093-143  35096-194  28054-087  59526-114  98029-881  08038-706
ex(5):  85187-457  61979-200  09684-816  59448-438  67134-185  58159-463
ex(8):  81764-581  78991-219  19768-809  11188-172  01132-042  79987-420


#A: blake wolf
#D: Use in a .net Regex.Split() to pull the protocol out of a url into the first array entry.
#U: http://regexlib.com/REDetails.aspx?regexp_id=624

regexp: (^[a-zA-Z0-9]+://)
ERROR:  rx: Embedded '^' unimplemented: in "(^[a-zA-Z0-9]+://)"


#A: gregg durishan
#D: currency format that allows optional $, optional "-"(MinusSignNegative) OR "()" (ParenNegative) but not both, optional cents, and optional commas separating thousands. Minus sign can be before or after $, but parens must be outside the $. UPDATED: now fails to match a "$" without any further numbers
#U: http://regexlib.com/REDetails.aspx?regexp_id=625

regexp: ^\$?\-?([1-9]{1}[0-9]{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\-?\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\(\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))\)$
ERROR:  rx: Embedded '$' unimplemented: in "^\$?\-?([1-9]{1}[0-9]{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\-?\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\(\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))\)$"


#A: Thomas Keegan
#D: for checking a value is between 99.99% and 00.00%
#U: http://regexlib.com/REDetails.aspx?regexp_id=627

regexp: ^((\d{1,2})?([.][\d]{1,2})?){1}[%]{1}$
tree:   (([0-9]{1,2}?(.[0-9]{1,2})?)%)
length: 1 to 6
-------------------- Examples --------------------
ex(0):  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %
ex(1):  %  27%  .6%  87%  54.3%  %  %  %  %  .18%  41.3%  00.52%  %  3%  %  62%
ex(2):  .38%  74.53%  9%  9%  .4%  .51%  96.3%  84%  .61%  6%  %  .4%  .18%
ex(3):  76.5%  %  %  .91%  03.36%  55%  36%  .67%  %  22%  7%  .31%  %  .76%
ex(5):  %  19.4%  6.65%  77.68%  0.6%  1%  .5%  37.0%  0.0%  .38%  %  9.24%
ex(8):  .25%  .6%  .20%  95.9%  .0%  .46%  .0%  1.12%  9%  .42%  91.04%  .91%


#A: Gaurav Shrivastava
#D: Validates windows path and invalidates UNC path
#U: http://regexlib.com/REDetails.aspx?regexp_id=631

regexp: ^([a-zA-Z]\:) (\\{1}| ((\\{1}) [^\\] ([^/:*?<>"|]*(?<![ ])))+)$
ERROR:  rx: '(?...' unimplemented: in "^([a-zA-Z]\:) (\\{1}| ((\\{1}) [^\\] ([^/:*?<>"|]*(?<![ ])))+)$"


#A: Carlos R. L. Rodrigues
#D: Matches files extension
#U: http://regexlib.com/REDetails.aspx?regexp_id=635

regexp: (?!\.)[a-z]{1,4}$
ERROR:  rx: '(?...' unimplemented: in "(?!\.)[a-z]{1,4}$"


#A: Eric Lewis
#D: Used to dynamically find acronyms in a sentence. The first pair of brackets gets the acronym, the second gets the text after the acronym.
#U: http://regexlib.com/REDetails.aspx?regexp_id=636

regexp: ([A-Zäöü0-9\/][^a-z\:\,\(\)]*[A-Zäöü0-9])($|[\.\:\,\;\)\-\ \+]|s\b)
ERROR:  rx: Embedded '$' unimplemented: in "([A-Zäöü0-9\/][^a-z\:\,\(\)]*[A-Zäöü0-9])($|[\.\:\,\;\)\-\ \+]|s\b)"


#A: Ricardo Gonzalez
#D: Filter US telephone numbers.  This particular one accepts only area code 939 or 787.  Area code parentesis or hyphens optional.
#U: http://regexlib.com/REDetails.aspx?regexp_id=641

regexp: ^(\()?(787|939)(\)|-)?([0-9]{3})(-)?([0-9]{4}|[0-9]{4})$
tree:   ((((((?(((78)7)|((93)9)))()|-)?)[0-9]{3})-?)([0-9]{4}|[0-9]{4}))
length: 10 to 13
-------------------- Examples --------------------
ex(0):  7871000404  9391604716  7870116598  9395126378  7875194139  7877665688
ex(1):  (7873444414  (787496-0478  (939685-4906  (939)665-8847  (939)9121995
ex(2):  (939)138-8107  (939)5018407  (787-881-7861  7873364497  787)6257393
ex(3):  (7877518234  9390069411  939748-3242  7877553120  (939-950-9932
ex(5):  (9390057595  787)6720650  (7872986195  (787279-1268  9395150935
ex(8):  (939-418-8245  (939)9688602  (787767-1019  (787)8685554  (939-9944006


#A: Dave Turner
#D: Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.
#U: http://regexlib.com/REDetails.aspx?regexp_id=642

regexp: (\+)?([-\._\(\) ]?[\d]{3,20}[-\._\(\) ]?){2,10}
tree:   (+?(([ ()-._]?[0-9]{3,20})[ ()-._]?){2,10})
length: 6 to 221
-------------------- Examples --------------------
ex(0):  701682  781009  443405  490660  181705  198578  624819  157820  622107
ex(1):  114910336553667_.848926381160 07753115203700923113476971(5908046011294)818680608559.1106832422063433
ex(2):  830798903835-2734987443364015621979907678673)0426907496(514746377581687257375310
ex(3):  73758241502(8683871506082207955033022300088578966095765003802542881(40627247874 
ex(5):  _5859214643501.45555182822_5206635614  29742816183)1795374141427
ex(8):  -026046399647085563416191932569099509 950557395915)-9496761367698964_


#A: Andrew Lee
#D: I wrote up this regular expression to fetch the href attribute found in <a> tags as well as a few other HTML tags.
#U: http://regexlib.com/REDetails.aspx?regexp_id=646

regexp: href=[\"\'](http:\/\/|\.\/|\/)?\w+(\.\w+)*(\/\w+(\.\w+)?)*(\/|\?\w*=\w*(&\w*=\w*)*)?[\"\']
tree:   (((((((((((hr)e)f)=)["'])(((((((ht)t)p):)/)/)|(./)|/)?)[0-9A-Z_a-z]+)(.[0-9A-Z_a-z]+)*)((/[0-9A-Z_a-z]+)(.[0-9A-Z_a-z]+)?)*)(/|((((?[0-9A-Z_a-z]*)=)[0-9A-Z_a-z]*)(((&[0-9A-Z_a-z]*)=)[0-9A-Z_a-z]*)*))?)["'])
length: 8 to *
-------------------- Examples --------------------
ex(0):  href=\"M\"  href=\"C'  href=\"n\"  href=\"1\"  href='R'  href='p'
ex(1):  href=\"B.D'  href='http://G/Z/'  href=\"r/b'  href='./C.S\"
ex(2):  href=\"Hg/_?r3=&Tz='  href='4/D.qW/Z\"  href=\"V.Yr.K/r\"
ex(3):  href='http://bVh.pAl\"  href=\"/62.dT.lm.M/GVT?kP=6&Bc=rUc'
ex(5):  href=\"395E.g3.S.ho.QcV.fZsn/LYonE/1.pST/'
ex(8):  href='./1P9WIj.sfJvCWDJ.1mcNm5_7.iV.yOb.rG.aHZFuH8k/By0fYS.4w6V/AiPrI.gQlmSy/Fmi.Zs8/hkOo.rJ\"


#A: hayri hayri
#U: http://regexlib.com/REDetails.aspx?regexp_id=647

regexp: ^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d)?(\x20?((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$
ERROR:  rx: '(?...' unimplemented: in "^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d)?(\x20?((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$"


#A: Roman Lukyanenko
#D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.txt or C:\Windows\Microsoft.NET etc
#U: http://regexlib.com/REDetails.aspx?regexp_id=648

regexp: ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(txt|TXT)$
tree:   ((((([A-Za-z]:)|((\{2}[0-9A-Z_a-z]+)$?))(\(([0-9A-Z_a-z][ 0-9A-Z_a-z]*)[\x01-\u007f]*))+).)(((tx)t)|((TX)T)))
length: 8 to *
-------------------- Examples --------------------
ex(0):  L:\\q.TXT  \\\\V\\i.txt  \\\\g\\o.TXT  \\\\_\\B.txt  \\\\s\\m.TXT
ex(1):  F:\\8u.txt  e:\\wV.TXT  \\\\Y$\\Ho.TXT  \\\\B$\\q3.txt  \\\\p$\\0f.TXT
ex(2):  \\\\1E\\Ez<M.txt  n:\\8Gx\\fQD=.txt  \\\\n3$\\5hy;.TXT  A:\\Ui.txt
ex(3):  \\\\tmY$\\J82.txt  x:\\6QMF?\\ek:d\\VNlXBM.txt
ex(5):  A:\\wWljGISo.txt  \\\\srSq9\\I4as/\\uSL\\YIulQ;.txt
ex(8):  u:\\gzbm8BuO]taO8\\E37 bu'.txt


#A: Roman Lukyanenko
#D: I know its simple, yet there was no Russian postal code regular expression on the RegExLib. Just in case some needs to know the format.
#U: http://regexlib.com/REDetails.aspx?regexp_id=649

regexp: ^[0-9]{6}
tree:   [0-9]{6}
length: 6 to 6
-------------------- Examples --------------------
ex(0):  701682  781009  443405  490660  181705  198578  624819  157820  622107
ex(1):  305147  685952  423618  436326  769026  006697  213817  750680  421618
ex(2):  960759  927926  067018  559943  031643  117363  050818  951755  500931
ex(3):  619428  054087  595261  149802  988108  038706  194832  668518  745761
ex(5):  096848  165944  843867  134185  581594  632958  767181  764581  789912
ex(8):  880911  188172  011320  427998  742092  705085  899914  603037  720328


#A: Artu
#D: it's for date in the format: "yyyymmdd" and it validates the empty string and some special values (00000000,88888888,99999999) but you can delete these last values. It works with leap years.
#U: http://regexlib.com/REDetails.aspx?regexp_id=651

regexp: ^(((\d{4})(0[13578]|10|12)(0[1-9]|[12][0-9]|3[01]))|((\d{4})(0[469]|11)([0][1-9]|[12][0-9]|30))|((\d{4})(02)(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)(02)(29))|(([13579][26]00) (02)(29))|(([0-9][0-9][0][48])(02)(29))|(([0-9][0-9][2468][048])(02)(29))|(([0-9][0-9][13579][26])(02)(29))|(00000000)|(88888888)|(99999999))?$
tree:   ((([0-9]{4}((0[13578])|(10)|(12)))((0[1-9])|([12][0-9])|(3[01])))|(([0-9]{4}((0[469])|(11)))((0[1-9])|([12][0-9])|(30)))|(([0-9]{4}(02))((0[1-9])|(1[0-9])|(2[0-8])))|((((([02468][048])0)0)(02))(29))|(((((([13579][26])0)0) )(02))(29))|((((([0-9][0-9])0)[48])(02))(29))|((((([0-9][0-9])[2468])[048])(02))(29))|((((([0-9][0-9])[13579])[26])(02))(29))|(((((((00)0)0)0)0)0)0)|(((((((88)8)8)8)8)8)8)|(((((((99)9)9)9)9)9)9))?
length: 0 to 9
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      00000000  40550610  84421009    86040204      00000000    24000229
ex(2):  7200 0229        71080229            12051107    99999999      48080229
ex(3):  48050709    64520229  86650320  85840229      27160223  64000229
ex(5):          11800229    61320201      87680229      84040229  68481104
ex(8):  25981015    97400229  99999999      67050211    00000000    21020202


#A: Roman Lukyanenko
#D: Matches the copyright symbol (©). Pretty simple, yet I dont think existed on RegExLib before. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=652

regexp: \xA9
tree:   [©]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]
ex(1):  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]
ex(2):  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]
ex(3):  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]
ex(5):  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]
ex(8):  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]  \xa9 [FAIL]


#A: Steve Wagner
#D: Validates dates formatted like "dd.mm.yyyy" or "dd.mm.yy". Also the separators "/" and "-" are validated "ok". This expression does not check leap years!
I did this expression cause I could hardly find any date regex that supports those "dot-formats".
#U: http://regexlib.com/REDetails.aspx?regexp_id=653

regexp:  ^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\d{2}|\d{4})$
ERROR:  rx: Embedded '^' unimplemented: in " ^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\d{2}|\d{4})$"


#A: Rehan Azam
#D: This regular expression can be used to parse a comma delimited string. Leading whitespaces (at the beginning of the entire string) and ending commas are not acceptable. Any combination of letters and numbers with zero or one white space between them are acceptable. Note: To change the delimiter, simply replace the comma in the square brackets to the delimiter of choice.
#U: http://regexlib.com/REDetails.aspx?regexp_id=654

regexp: ^([A-Za-z0-9]\s?)+([,]\s?([A-Za-z0-9]\s?)+)*$
tree:   (([0-9A-Za-z][\t-\r ]?)+((,[\t-\r ]?)([0-9A-Za-z][\t-\r ]?)+)*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  H  X  L  W  4  8  G  3  E  T  l  i  E  k  Y  5  d  A  X  c  K  w  I
ex(1):  u, r   2   3   m , M  P,l   N, 2  H   e  V  B   e, m   7   z , M  8  Z
ex(2):  rP,uH ,s  OK  e j, Y   V   nV,Y x   X f, I  H   B   g ,X, l   q, bC 
ex(3):  bO,t y,O t k , 09   N,0 CV,o , m w  vk   c,m,E,Tx 1  a UV, PN , hg q  I
ex(5):  Z, hk, n ,M l ej ,xtN, BH Y  ar,gz t ds  Q r F, h S D 7,Nul,f3kOd,u r 
ex(8):  4 n K 0 F ,2Cvpe ,Z3 G0, N PR 7Tm 0, a ,h v 


#A: Osaro bare
#U: http://regexlib.com/REDetails.aspx?regexp_id=655

regexp: (^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})([AM|PM|am|pm]{2,2})$)
ERROR:  rx: Embedded '^' unimplemented: in "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})([AM|PM|am|pm]{2,2})$)"


#A: Sante Boscolo
#D: Spam trap
Catches many and many way to write viagra (replacing letters with similar chars, spacing chars with one space, etc).
#U: http://regexlib.com/REDetails.aspx?regexp_id=656

regexp: [v,V,(\\/)](\W|)[i,I,1,l,L](\W|)[a,A,@,(\/\\)](\W|)[g,G](\W|)[r,R](\W|)[a,A,@,(\/\\))]
tree:   (((((((((([(),/V\v]([\x01-/:-@[-^`{-\u007f]|()))[,1ILil])([\x01-/:-@[-^`{-\u007f]|()))[(),/@A\a])([\x01-/:-@[-^`{-\u007f]|()))[,Gg])([\x01-/:-@[-^`{-\u007f]|()))[,Rr])([\x01-/:-@[-^`{-\u007f]|()))[(),/@A\a])
length: 6 to 11
-------------------- Examples --------------------
ex(0):  VIAG(r#,  (~L/G?R )  ,1,),,-r.a  ( I/,g,$(  v,!@\\,r,  v'L/(>gr(
ex(1):  \\~l/G,=(  )iA)gr|\\  (1)),.,(  ,i@@g]R\",  VI(/~G\"R,a  ViA?gr\\@
ex(2):  );,)?g]r@  Vl/\\g'R /  v.I'@.g,/A  \\I)[g,,  V;l/~g(R(  \\@1?,(gr)
ex(3):  ,iAgRA  v,( ,,@  (l/G,(  vL|),<,@  vL<a'gR~/  V,/%,R(  V$l'@G-,;(
ex(5):  ($i+(g;r)  V1'\\]g\"R\\  ,@ia g,|\\  (,A\"gRA  v,,g,#)  )i;/,*R\\
ex(8):  V?l\\%G,/  ),-a,!,(/  )},.\\,;r\\)  )\\l(a~gr{a  )l/<Gr,  vi,.G/rA


#A: Vathachira Joseph Bino
#D: regex which matches UAE mobile phone numbers.
Its capable to take inputs +97150 3827741, +97-150-3827741, +97150 - 3827741,050 3827741, 050 - 3827741
Enjoy REGEXXXXXXX!!!!!!!
#U: http://regexlib.com/REDetails.aspx?regexp_id=658

regexp: ^(\+97[\s]{0,1}[\-]{0,1}[\s]{0,1}1|0)50[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$
tree:   ((((((((((((((+9)7)[\t-\r ]?)-?)[\t-\r ]?)1)|0)5)0)[\t-\r ]?)-?)[\t-\r ]?)[1-9])[0-9]{6})
length: 10 to 19
-------------------- Examples --------------------
ex(0):  +971501016827  +971505100944  0501405490  0503601817  0502519857
ex(1):  +97 150 -9470021  +97150  6417730  +97150 6730514  050 -2928452
ex(2):  +97  150  8912098  050 9461725  +97 150 - 6720439  +97 150 5068042
ex(3):  050 - 1996075  0509464573  050-3313760  +97- 150 9375160
ex(5):  050-4222864  +97 -150 -1175550  050  9798765  050 - 4922593
ex(8):  +97 -150- 5526114  050- 4073729  +97 1502803870  +97150- 6112588


#A: Vathachira Joseph Bino
#D: The regex matches the UAE land phone numbers. Checks the area codes[04,02,06...etc] strictly. Force user to input phone numbers in strict manner(it take input 04 3452488, but not 04______spaces_______3452488)
#U: http://regexlib.com/REDetails.aspx?regexp_id=659

regexp: ^0[234679]{1}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$
tree:   ((((((0[234679])[\t-\r ]?)-?)[\t-\r ]?)[1-9])[0-9]{6})
length: 9 to 12
-------------------- Examples --------------------
ex(0):  064776668  021303860  023737805  078205370  023078297  048247364
ex(1):  09 -7623287  063047843  06 9613267  07 7271684  07 -1690260
ex(2):  07 - 7832524  02 8043387  04 3861267  04 -7063789  02 -6743137
ex(3):  03 - 4793206  07- 4305081  07 -8205858  043535067  06- 9861597
ex(5):  04 9426965  03 6005236  03 1062371  07-4028861  04 -3518745
ex(8):  03-2513208  044080735  06  7349065  03 5994251  04  3987065


#A: Vathachira Joseph Bino
#D: The regex that matches the telephone numbers in India.
####Enjoy Regex####
#U: http://regexlib.com/REDetails.aspx?regexp_id=661

regexp: ^0{0,1}[1-9]{1}[0-9]{2}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$
tree:   (((((((0?[1-9])[0-9]{2})[\t-\r ]?)-?)[\t-\r ]?)[1-9])[0-9]{6})
length: 10 to 14
-------------------- Examples --------------------
ex(0):  7243340267  2071801103  3476145154  2707139829  6191179220  5152114106
ex(1):  961-5166576  0688  2145686  0603 8153907  07453068210  0533- 1874576
ex(2):  0466 2701855  0894-5491793  406-2540748  0390-4609533  0999- 4399326
ex(3):  0415 -2348462  473 - 2730112  0294 -4684142  0147 5187457
ex(5):  858 -8207287  0185 - 9490093  0708 - 1251336  920- 9339378
ex(8):  06423915671  587  9086515  0719 - 9427998  0642  6767796  110  6609494


#A: Friedel Wittrock
#D: match for 0 - 65535
#U: http://regexlib.com/REDetails.aspx?regexp_id=664

regexp: ^([0-5]?\d?\d?\d?\d|6[0-4]\d\d\d|65[0-4]\d\d|655[0-2]\d|6553[0-5])$
tree:   ((((([0-5]?[0-9]?)[0-9]?)[0-9]?)[0-9])|((((6[0-4])[0-9])[0-9])[0-9])|((((65)[0-4])[0-9])[0-9])|((((65)5)[012])[0-9])|((((65)5)3)[0-5]))
length: 1 to 5
-------------------- Examples --------------------
ex(0):  65531  65141  65434  65532  62810  61571  65500  65230  65518  61805
ex(1):  0  3534  62641  62684  65514  65532  5139  65226  61205  63685  65518
ex(2):  65534  61063  61114  0189  65535  65532  65449  65520  61840  65176
ex(3):  65517  65138  35  65507  65269  65531  65077  00  65517  65528  65530
ex(5):  65535  3621  65513  65511  62338  65515  65510  65531  65423  65060
ex(8):  29  3607  60902  65535  65501  65508  65530  65530  16  65521  65209


#A: Dany Lauener
#D: This regexp has been posted specialy for "Mike O Shea" as he requested a mono digit year validation.
matches DD/MM/Y or DD/MM/YYYY or D/M/Y or DD/M/YYYY
Leap years treated. (Italian style with tomato)
Years 0-9 equal years 2000 to 2009 for leap years
#U: http://regexlib.com/REDetails.aspx?regexp_id=666

regexp: ^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$
tree:   (((((((0?[1-9])|([12][0-9])|(3[01]))[-./])((0?[13578])|(1[02])))[-./])((((1[6-9])|([2-9][0-9]))?[0-9]{2})|[0-9]))|((((((0?[1-9])|([12][0-9])|(30))[-./])((0?[13-9])|(1[012])))[-./])((((1[6-9])|([2-9][0-9]))?[0-9]{2})|[0-9]))|(((((((0?[1-9])|(1[0-9])|(2[0-8]))[-./])0?)2)[-./])((((1[6-9])|([2-9][0-9]))?[0-9]{2})|[0-9]))|((((((29)[-./])0?)2)[-./])((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00)|[048])))
length: 5 to 10
-------------------- Examples --------------------
ex(0):  2.2-05  31.10-40  29/2.4  8-6.65  11.12/30  1-11.78  28/11.30  29-2/16
ex(1):  29-02-4000  29.2/48  29.02.00  29/02-0  31.10-1857  20.12-2  30-06/2
ex(2):  27.12.2  17/2-51  30/5/53  12/02.1  9-7-1860  14-2.7  24/7/4  4/02/9
ex(3):  01/2-16  29.2.00  29-2/8  30.12-61  19.02.1751  29/2.00  1-10/27
ex(5):  29.2/1600  29/02.00  29-02/00  5-10.1825  18-07/1833  1.10-8138
ex(8):  25.02/44  30/8.2690  16.01-6802  14-2/2818  30-10/85  15-02-4


#A: Chandrasing Patil
#D: This expression is little tricky since the $ sign is includeded in the
expression itself. So whenever you want to make use of the expression be
sure to prepend $ sign to the value if it's not present.
#U: http://regexlib.com/REDetails.aspx?regexp_id=668

regexp: ^\$[+-]?([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(\.[0-9]{1,2})?$
tree:   ((($[+-]?)([0-9]+|([0-9]{1,3}(,[0-9]{3})*)))(.[0-9]{1,2})?)
length: 2 to *
-------------------- Examples --------------------
ex(0):  $1  $4  $2  $6  $2  $3  $2  $8  $0  $4  $5  $2  $6  $0  $1  $8  $7  $9
ex(1):  $+7  $+8  $6  $0.77  $5  $3  $-0.07  $9,951.44  $1.9  $-3  $27,120.4
ex(2):  $765,478.7  $7.8  $+7.2  $36.67  $27.88  $-0,613  $+10  $6,408,077.53
ex(3):  $-3,858,770  $+079.3  $13,032,652.1  $987  $+9,072,826,418.6  $581.8
ex(5):  $+34086  $+9411  $+5223.14  $22,095  $433,927,984  $225,201  $-194.4
ex(8):  $77,856,415  $+29425328  $-74200  $8,920,116,419,182,358,082,455.27


#A: Jason N. Gaylord
#D: This is derived from Steven Smith's Integer expression (http://www.regexlib.com/REDetails.aspx?regexp_id=51). The only difference is that this does not accept blanks. Written by Jason N. Gaylord.
#U: http://regexlib.com/REDetails.aspx?regexp_id=669

regexp: ^\d+$
tree:   [0-9]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1  7  0  5  1  9  8  5  7  8  6  2  4  8  1  9  1  5  7  8  2  0  6
ex(2):  0  6  1  2  8  1  2  87  30  68  19  9  0  9  7  95  61  6  7  27  89
ex(3):  71  610  88  3  669  3  05  0  7  832  0  35  70  2  479  94  9  1  76
ex(5):  29  6  9279  09  04  802  42  89  193  97  3  43  4  068  67222  85
ex(8):  60  582495  1639932  6194  7109  72144  9634846  44  531730  0112466


#A: Liu Wei
#D: telphone number check.
#U: http://regexlib.com/REDetails.aspx?regexp_id=671

regexp: ((\(\d{3,4}\)|\d{3,4}-)\d{4,9}(-\d{1,5}|\d{0}))|(\d{4,12})
tree:   ((((((([0-9]{3,4})))|([0-9]{3,4}-))[0-9]{4,9})((-[0-9]{1,5})|()))|[0-9]{4,12})
length: 4 to 21
-------------------- Examples --------------------
ex(0):  (241)0404  4424  7180  788-4215-8  (085)9227-0  (054)6968  4736  3294
ex(1):  904-6322765-518  30760195  1118731  7191-04616657  5657825  798833
ex(2):  688572247  8261-376092-768  036019578  53981402  (755)913595
ex(3):  84903400  6965027322  (108)200815-848  (463)116476-323  81139252
ex(5):  (302)386790-955  212-32299  263-429949  (944)159578-244  (854)0195148
ex(8):  7470591  504909335  (273)839621-589  (965)6840091-705  6007572


#A: Nicholas Berardi
#D: Specifier Format of Guid Values that this RegEx supports:  32 digits: [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]  32 digits separated by hyphens: [xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]  32 digits separated by hyphens, enclosed in brackets: [{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}]  32 digits separated by hyphens, enclosed in parentheses: [(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)]
#U: http://regexlib.com/REDetails.aspx?regexp_id=672

regexp: ^[{|\(]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[\)|}]?$
tree:   ((((([({|]?[0-9A-Fa-f]{8})-?)([0-9A-Fa-f]{4}-?){3})[0-9A-Fa-f]{12})[)|}]?)
length: 32 to 38
-------------------- Examples --------------------
ex(0):  5E5e915db170AFa9AaDB654D93E7eBbB  c9eb980CC7FFe0768Bdf4a95F2AAf31A
ex(1):  F78739Ba-56Bc-1B8E3eAE-ca0EEF5fa6cF
ex(2):  (9FcAa8F3-4C0edf6c-f65a-2eFD21C056CB
ex(3):  8E7d61fC-6C5220e4-df9CfbC6bd102f4d|  e079D9b3695a-90eEEDDb9f643AE61cfE}
ex(5):  3dA67D79fBF5-C6fba26576bDdd0BE9f3}  Ace7Cb99A0b2-Ecf7-7f52Ed16d2e6FeA3|
ex(8):  {dE0FAbf2E26a-0a6A-e3Dd5BeAb5A57906


#A: Roman Lukyanenko
#D: Matches the ™ symbol. Pretty simple, yet I dont think existed on RegExLib before.
#U: http://regexlib.com/REDetails.aspx?regexp_id=673

regexp: \u2122
tree:   "
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]
ex(1):  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]
ex(2):  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]
ex(3):  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]
ex(5):  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]
ex(8):  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]  \" [FAIL]


#A: Roman Lukyanenko
#D: Matches the registered trademark (®). Pretty simple, yet I dont think existed on RegExLib before.
#U: http://regexlib.com/REDetails.aspx?regexp_id=674

regexp: \u00AE
tree:   [®]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]
ex(1):  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]
ex(2):  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]
ex(3):  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]
ex(5):  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]
ex(8):  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]  \xae [FAIL]


#A: Roman Lukyanenko
#D: Matches the British Pound symbol. Pretty simple, yet I dont think existed on RegExLib before. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=675

regexp: \u00A3
tree:   [£]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]
ex(1):  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]
ex(2):  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]
ex(3):  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]
ex(5):  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]
ex(8):  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]  \xa3 [FAIL]


#A: Roman Lukyanenko
#D: Matches the Euro sign. Pretty simple, yet I dont think existed on RegExLib before.
#U: http://regexlib.com/REDetails.aspx?regexp_id=676

regexp: \u20AC
tree:   [¬]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]
ex(1):  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]
ex(2):  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]
ex(3):  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]
ex(5):  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]
ex(8):  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]  \xac [FAIL]


#A: Roman Lukyanenko
#D: Matches the Yen sign. Pretty simple, yet I dont think existed on RegExLib before. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=677

regexp: \u00A5
tree:   [¥]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]
ex(1):  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]
ex(2):  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]
ex(3):  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]
ex(5):  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]
ex(8):  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]  \xa5 [FAIL]


#A: Roman Lukyanenko
#D: Matches infinity symbol. Pretty simple, yet I dont think existed on RegExLib before. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=678

regexp: \u221E
tree:   [\x1e]
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]
ex(1):  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]
ex(2):  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]
ex(3):  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]
ex(5):  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]
ex(8):  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]  \x1e [FAIL]


#A: Michael Ash
#D: Matches any character is the Basic Latin Unicode Range \U0000-U007F  (Ascii 0-127)
I've blogged about this and other expressions here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
#U: http://regexlib.com/REDetails.aspx?regexp_id=679

regexp: \p{IsBasicLatin}
ERROR:  rx: '\px' unimplemented: in "\p{IsBasicLatin}"


#A: Michael Ash
#D: Matches numbers.  Note: the second match (?) and the second non-match (IV) are not the same. I cover this in more detail here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
#U: http://regexlib.com/REDetails.aspx?regexp_id=680

regexp: \p{N}
ERROR:  rx: '\px' unimplemented: in "\p{N}"


#A: Michael Ash
#D: Math Symbols.  NOTE: the second examples of match and non-match are not the same.  The non-match is the keyboard dash.  The match is the unicode minus sign.
#U: http://regexlib.com/REDetails.aspx?regexp_id=681

regexp: \p{Sm}
ERROR:  rx: '\px' unimplemented: in "\p{Sm}"


#A: khoi le
#D: This will match US most common telephones format with extension or with out extension.  Works with both Java and .NET.
#U: http://regexlib.com/REDetails.aspx?regexp_id=682

regexp: ((\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}(\s(x\d+)?){0,1}$
tree:   ((((((((([0-9]{3}))) ?)|([0-9]{3}[ -.]))?[0-9]{3})[ -.])[0-9]{4})([\t-\r ](x[0-9]+)?)?)
length: 8 to *
-------------------- Examples --------------------
ex(0):  701-0404  689-4716  430 6598  364 6378  658 4139  829-5688  126 7216
ex(1):  (173)668.7892  960 5986   711 8991  466-869-5691   365 5604  685-6632
ex(2):  999 213.5906   (949)067-9314 x8  740.031-7932   622-3766   643.1815 x9
ex(3):  229 5937   098.558-0702  (965)980-5976  840 1246   619-2886
ex(5):  806.4551  758-238-8073  712-2365  185-5671   277.6735  767-3880
ex(8):  883-1138 x455  859 241-9661   974 7752  804 1645 x6610  273-9914 x0


#A: Matt Baskey
#D: another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced.
#U: http://regexlib.com/REDetails.aspx?regexp_id=683

regexp: (\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*)
tree:   (((((((((([\t-\r ]*(?)0)[0-9]{4}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{3})[\t-\r ]*)|((((((((([\t-\r ]*(?)0)[0-9]{3}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{4})[\t-\r ]*)|((([\t-\r ]*(7|8))([0-9]{7}|(([0-9]{3}(-|[\t-\r ]))[0-9]{4})))[\t-\r ]*))
length: 8 to *
-------------------- Examples --------------------
ex(0):  01000404-160  0471801-3659  01512637051  06412978256  09688072165
ex(1):  (01978) 370792  (0759) 769 7901   84381695    (0511 705 5721 
ex(2):   05163)-999-766    89722213     00201842 171     7149 0148  80639853
ex(3):    05550)-209-876    7932 6194      70951036       (05952484  064  
ex(5):  71246651       72886160        06535)-266-197   
ex(8):        0808)     890 3159            02273)708-767     


#A: Matt Baskey
#D: another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced.
#U: http://regexlib.com/REDetails.aspx?regexp_id=684

regexp: (\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*)
tree:   (((((((((([\t-\r ]*(?)0)[0-9]{4}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{3})[\t-\r ]*)|((((((((([\t-\r ]*(?)0)[0-9]{3}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{4})[\t-\r ]*)|((([\t-\r ]*(7|8))([0-9]{7}|(([0-9]{3}(-|[\t-\r ]))[0-9]{4})))[\t-\r ]*))
length: 8 to *
-------------------- Examples --------------------
ex(0):  01000404-160  0471801-3659  01512637051  06412978256  09688072165
ex(1):  (01978) 370792  (0759) 769 7901   84381695    (0511 705 5721 
ex(2):   05163)-999-766    89722213     00201842 171     7149 0148  80639853
ex(3):    05550)-209-876    7932 6194      70951036       (05952484  064  
ex(5):  71246651       72886160        06535)-266-197   
ex(8):        0808)     890 3159            02273)708-767     


#A: Ariel Merrell
#D: A co-worker needed a regex to validate time.  He could only find patterns that match a 24hour clock.  I whipped this expression up to validate a 12hour clock. Hope somebody finds it useful.
#T: Validate 12hour clock
#U: http://regexlib.com/REDetails.aspx?regexp_id=685

regexp: (?<Time>^(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d(?:[ap]m)?)
ERROR:  rx: '(?...' unimplemented: in "(?<Time>^(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d(?:[ap]m)?)"


#A: Nicholas Berardi
#D: This allows the formatting of most phone numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=688

regexp: ^(?:(?:[\+]?(?<CountryCode>[\d]{1,3}(?:[ ]+|[\-.])))?[(]?(?<AreaCode>[\d]{3})[\-/)]?(?:[ ]+)?)?(?<Number>[a-zA-Z2-9][a-zA-Z0-9 \-.]{6,})(?:(?:[ ]+|[xX]|(i:ext[\.]?)){1,2}(?<Ext>[\d]{1,5}))?$
ERROR:  rx: '(?...' unimplemented: in "^(?:(?:[\+]?(?<CountryCode>[\d]{1,3}(?:[ ]+|[\-.])))?[(]?(?<AreaCode>[\d]{3})[\-/)]?(?:[ ]+)?)?(?<Number>[a-zA-Z2-9][a-zA-Z0-9 \-.]{6,})(?:(?:[ ]+|[xX]|(i:ext[\.]?)){1,2}(?<Ext>[\d]{1,5}))?$"


#A: Don Johnston
#D: This US phone number edit with restricted format options: Accepts optional parens on area code with or without following space, and dashes between area code, central office code and station code. Formats include only (222) 555-1212 (with or without a space) and 222-555-1212. Conforms to NANP A-digit and D-digit requirements (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=689

regexp: ^(?:\([2-9]\d{2}\)\ ?|(?:[2-9]\d{2}\-))[2-9]\d{2}\-\d{4}$
tree:   (((((((((([2-9])[0-9]{2}))) ?)|(([2-9][0-9]{2})-))[2-9])[0-9]{2})-)[0-9]{4})
length: 12 to 14
-------------------- Examples --------------------
ex(0):  (524)350-3877  (257)703-0737  (810)201-8170  258-444-6848  651-981-2636
ex(1):  (677) 706-2377  407-932-6711  (828) 884-8030  748-535-1175
ex(2):  984-598-8943  461-209-8406  988-272-8264  (384)644-3751  (517) 464-9694
ex(3):  (785)533-5995  571-986-1597  (558)980-1315  726-858-5641  723-684-0623
ex(5):  (685) 824-9266  581-982-4551  (915)848-0807  (541)934-9065
ex(8):  (687)563-5742  (477)844-1804  (353) 483-1822  809-800-5086


#A: yoram o
#D: evaluates dates in the format of DD/MM/YY or DD/MM/YYYY
DD & YY - can be of the form:
One digit            2
Zero leading        02
#U: http://regexlib.com/REDetails.aspx?regexp_id=690

regexp: (?<Day>[0-3][0-9]|[1-9])/(?<Month>[1-9]|1[0-2]|0[1-9])/(?<Year>[12]\d{3}|\d{2})
ERROR:  rx: '(?...' unimplemented: in "(?<Day>[0-3][0-9]|[1-9])/(?<Month>[1-9]|1[0-2]|0[1-9])/(?<Year>[12]\d{3}|\d{2})"


#A: de kleine Gerardus
#U: http://regexlib.com/REDetails.aspx?regexp_id=692

regexp: ^([0-1]?\d|2[0-3]):([0-5]\d)$
tree:   (((([01]?[0-9])|(2[0-3])):)([0-5][0-9]))
length: 4 to 5
-------------------- Examples --------------------
ex(0):  1:00  20:55  4:15  22:26  2:09  8:35  20:11  22:06  22:29  1:13  3:18
ex(1):  22:25  7:50  20:47  22:59  12:52  11:59  20:14  21:40  4:50  20:19
ex(2):  01:06  21:42  4:53  05:05  5:24  21:47  23:07  23:11  23:46  20:55
ex(3):  20:28  9:24  21:04  23:28  21:26  21:25  21:17  21:13  23:15  20:55
ex(5):  23:20  23:17  21:38  10:14  2:39  23:44  16:11  22:09  20:16  11:40
ex(8):  22:28  23:14  20:03  2:31  21:47  05:18  21:52  23:01  22:38  21:23


#A: Kevin Wennemuth
#D: Matches german standard postal codes named 'Postleitzahl'
#U: http://regexlib.com/REDetails.aspx?regexp_id=693

regexp: ^[0-9]{5}$
tree:   [0-9]{5}
length: 5 to 5
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  30514  76859  52423  61843  63267  69026  00669  72138  17750
ex(2):  16186  31199  96075  99279  26067  01855  99430  31643  11736  30508
ex(3):  75550  09314  33509  61942  80540  87595  26114  98029  88108  03870
ex(5):  32668  51874  57619  79200  09684  81659  44843  86713  41855  81594
ex(8):  87671  81764  58178  99121  91976  88091  11881  72011  32042  79987


#A: Thijs Wijnmaalen
#D: Matches a md5 hash, simple yet powerful
#U: http://regexlib.com/REDetails.aspx?regexp_id=698

regexp: ^([a-z0-9]{32})$
tree:   [0-9a-z]{32}
length: 32 to 32
-------------------- Examples --------------------
ex(0):  9u6di16mnnhzk2699r82xvfzqm4eq9x9  v84iz6gk28mlv4csgpsk8tgjk5lau66i
ex(1):  17cmad3xokum7dsqo2g6xrl04j7qxamz  ybubxjr9ks3rhy2qaktfx3a5d4bg49rh
ex(2):  gmiczqq2yelz4tauq60ggdcw2z2bzep0  k10j2m497ocp6b5ro068hy4tg3v8ejgf
ex(3):  v1yq5v75ackd5ay1pd14uqy8n6gn8evc  u531x1mrloxo7x8j6pahwkkyv9t7og1v
ex(5):  pzrb1z8ictank8q2rf9rp1jjwlsl4zoj  tpat9xld3bgdhnknvfneeoohwbhanpst
ex(8):  7x8w1325t909a6zqgwfd75fgz6jdc1km  ajufyjb03rwog3s5t0ups6lkearqvkh8


#A: Jason N. Gaylord
#D: This expression is a very simplex expression that allows null values or 3 digits, dash, 3 digits, dash, 4 digits. It validates a basic US phone number. Written by Jason N. Gaylord.
#U: http://regexlib.com/REDetails.aspx?regexp_id=701

regexp: ^(\d{3}-\d{3}-\d{4})*$
tree:   (((([0-9]{3}-)[0-9]{3})-)[0-9]{4})*
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      212-204-5160        195-457-8842      354-085-9227    301-903-8256
ex(2):  994-307-2167  711-410-6342    158-704-4679261-878-8479  
ex(3):    506-821-0433876-945-3882    186-748-0728264-184-6892
ex(5):  245-054-3479201-450-0574732-655-8564
ex(8):  


#A: Jason N. Gaylord
#D: This expression is a simplex expression that checks to see if a value is a valid phone system terminal number. It allows a null value or 2 digits, dash, 2 digits. Written by Jason N. Gaylord.
#U: http://regexlib.com/REDetails.aspx?regexp_id=702

regexp: ^(\d{2}-\d{2})*$
tree:   (([0-9]{2}-)[0-9]{2})*
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      21-22    28-09    72-19  60-45      76-81          51-20  37-86
ex(2):  39-8296-17  80-9341-12  94-1773-06  49-6084-12  11-96  91-16    87-88  
ex(3):  16-8480-30  71-7408-0777-20  72-10  52-4256-9233-87  17-76    
ex(5):  02-0181-1882-7969-07    48-4159-6722-2864-1815-90
ex(8):  03-6707-0237-5064-5317-3011-27    11-2684-1429-4708-1785-73


#A: ic onur
#D: will match free floating valid protocol + urls in text ... will not touch the ones wrapped in a tag, so that you can auto-link the ones that aren't :) couple of things to know :
1. if the url is next to a tag this won't work (eg : <br>http://www.acme.com), the url must either start with a \s, \n or any character other than >.
2. the pattern will match the preceding \s and \n too, so when you replace put them back in place $1 will either be \s or \n, $2 will be the exact match
vb usage :
set re = New RegExp
re.Pattern ="(\s|\n|^)(\w+://[^\s\n]+)"
strResult = re.Replace(strText, "$1<a href='$2' target='_new'>$2</a>")
#U: http://regexlib.com/REDetails.aspx?regexp_id=703

regexp: (\s|\n|^)(\w+://[^\s\n]+)
ERROR:  rx: Embedded '^' unimplemented: in "(\s|\n|^)(\w+://[^\s\n]+)"


#A: marrik
#D: Match for dutch zipcodes.
Dutch zipcodes are always in the format of 4 digits and 2 letters.
#U: http://regexlib.com/REDetails.aspx?regexp_id=705

regexp: [0-9]{4}[A-Z]{2}
tree:   ([0-9]{4}[A-Z]{2})
length: 6 to 6
-------------------- Examples --------------------
ex(0):  7016OE  2571HX  6935ET  4873AP  6097LL  9515NA  6170IA  4467LW  1184JG
ex(1):  4138DP  6632MA  8177WW  9479CW  8326NE  5160RG  3985TD  0439QR  3143DT
ex(2):  3150LA  5005NJ  7691OL  4294XI  7599UU  5484BL  7287FX  1341BS  8277BW
ex(3):  1787CW  5057ZN  0508MV  6173EP  5254WI  6319WK  3037KS  1319UF  5134OS
ex(5):  2198RW  6404IB  8136HF  8314FZ  7543YA  3520QJ  9514AD  3173EI  3855WB
ex(8):  5031UC  5158TJ  0045ND  8031UB  6687NY  6194IF  7392PY  8464YO  3231ZN


#A: Michael Ash
#D: This pattern matches lower-case letters
#U: http://regexlib.com/REDetails.aspx?regexp_id=706

regexp: (?-i:\b\p{Ll}+\b)
ERROR:  rx: '(?...' unimplemented: in "(?-i:\b\p{Ll}+\b)"


#A: Felipe Albacete
#D: This is the Brazilian Date Format.
DD/MM/YYYY with the right days per month.
Dates >=1900 <=2999.
#U: http://regexlib.com/REDetails.aspx?regexp_id=709

regexp: (((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(10)|(12)))/)((([12][,09])[0-9])[0-9]))|((((((0[1-9])|([12][0-9])|(30))/)((0[469])|(11)))/)((([12][,09])[0-9])[0-9]))|((((((0[1-9])|(1[0-9])|(2[0-8]))/)(02))/)((([12][,09])[0-9])[0-9]))|(((((29)(.|-|/))(02))/)((([02468][048])0)0))|(((((29)/)(02))/)((([13579][26])0)0))|(((((29)/)(02))/)((([0-9][0-9])0)[48]))|(((((29)/)(02))/)((([0-9][0-9])[2468])[048]))|(((((29)/)(02))/)((([0-9][0-9])[13579])[26])))
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/1977  29/02/9200  29/02/4020  29.02/6400  08/11/1096  29/02/9208
ex(1):  29/02/8304  01/11/1976  29.02/8000  29/02/1200  29/02/3200  29/02/2120
ex(2):  06/02/1,65  29/02/9824  07/11/2098  08/02/2,15  23/10/1981  29-02/2400
ex(3):  04/01/2013  29/02/0760  12/02/2914  29/02/2104  29-02/6000  21/02/1047
ex(5):  29/02/9200  29/02/1320  29/02/2400  29/02/7960  29/02/3712  25/05/2011
ex(8):  29/02/0180  29/02/1996  29/02/2540  10/02/1008  07/05/1,77  15/11/1094


#A: Felipe Albacete
#D: Expression to validate values to fields Decimal 5,2 or 5 numbers. values >=100,00 <=99999,99
100,00=100
5000,00 = 5000
#U: http://regexlib.com/REDetails.aspx?regexp_id=710

regexp: (^\d{3,5}\,\d{2}$)|(^\d{3,5}$)
ERROR:  rx: Embedded '^' unimplemented: in "(^\d{3,5}\,\d{2}$)|(^\d{3,5}$)"


#A: Mark Cranness
#U: http://regexlib.com/REDetails.aspx?regexp_id=711

regexp: ^((?>[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$
ERROR:  rx: '(?...' unimplemented: in "^((?>[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$"


#A: Rohan Pathare
#D: Mathces in format DD-MON-YYYY (hyphen between results). Validates for leap years. Ensures month is in uppercase.
#U: http://regexlib.com/REDetails.aspx?regexp_id=712

regexp: ^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])-(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)-((1[6-9]|[2-9]\d)\d{2})$
ERROR:  rx: '(?...' unimplemented: in "^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])-(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)-((1[6-9]|[2-9]\d)\d{2})$"


#A: Fabiano Santiago
#D: Essa expressão é uma validação de data simplicada onde não aceita datas com ano inferior a 1900. Interessante pra validação de data de idade, data atual, etc
#U: http://regexlib.com/REDetails.aspx?regexp_id=713

regexp: (0?[1-9]|[12][0-9]|3[01])[/ -](0?[1-9]|1[12])[/ -](19[0-9]{2}|[2][0-9][0-9]{2})
tree:   ((((((0?[1-9])|([12][0-9])|(3[01]))[ -/])((0?[1-9])|(1[12])))[ -/])(((19)[0-9]{2})|((2[0-9])[0-9]{2})))
length: 8 to 10
-------------------- Examples --------------------
ex(0):  1 12 1996  31-11 1940  31-12-2672  19-2 1980  31 12 1910  5-12-2053
ex(1):  12 5 1970  5-12 2398  8 2/2238  31/11 1979  31/7-1995  12-12-1929
ex(2):  7 1-2530  30/12/2011  09 12/2132  6 6 1962  08-11 2911  2 12/1969
ex(3):  08 07/1961  01/11 1960  26 5-2524  31/02/1940  30 7 1987  07 07 1961
ex(5):  9-07/1988  09-07-2826  23 3/1942  11 12/1928  3 11 2601  30-03/1920
ex(8):  31 03 1956  6/12 1995  04/07/2582  7-07/2506  20/7 1922  02 11/2973


#A: Manny Ruiz
#D: This pattern matches whole numbers 1-100. 
#U: http://regexlib.com/REDetails.aspx?regexp_id=716

regexp: ^([1-9]|[1-9]\d|100)$
tree:   ([1-9]|([1-9][0-9])|((10)0))
length: 1 to 3
-------------------- Examples --------------------
ex(0):  1  4  46  100  47  4  61  100  46  100  100  100  7  1  100  100  5
ex(1):  4  4  57  97  6  100  100  100  100  100  100  60  100  8  57  100  100
ex(2):  55  9  100  4  100  8  2  98  6  66  9  76  62  100  64  6  42  100  64
ex(3):  2  2  7  1  6  100  100  34  100  100  50  5  8  100  70  8  5  97  22
ex(5):  83  91  100  21  100  8  98  100  100  100  100  6  6  56  100  89  100
ex(8):  100  6  9  19  3  9  43  91  5  1  100  100  100  26  100  100  82  36


#A: wallace dos santos damiao
#D: A simple expression to brazilian phone number code modified expression of Rafael, beyond international code, simple DDI without "+" 99 plus simple DDD (99) plus simple and whitout parentheses em trace, local phone number 3 or 4 digits plus "-" plus 4 digits.
#U: http://regexlib.com/REDetails.aspx?regexp_id=718

regexp: ^([0-9]{2})?((\([0-9]{2})\)|[0-9]{2})?([0-9]{3}|[0-9]{4})(\-)?[0-9]{4}$
tree:   (((([0-9]{2}?(((([0-9]{2})))|[0-9]{2})?)([0-9]{3}|[0-9]{4}))-?)[0-9]{4})
length: 7 to 15
-------------------- Examples --------------------
ex(0):  1000473  6896503  3073780  7632073  34818132  48247364  29495152
ex(1):  054199284  131669576  7916030-7174  (72)76110336  (83)6828407
ex(2):  60(39)0469069  (38)2395599  79(16)52828622  85398189  815-0954
ex(3):  173446646707  2611492445  (92)0111246  26948-5331  (96)41914751
ex(5):  948768902  9971345158  67(32)772-8706  58(18)7853-5391  041466-0304
ex(8):  853199375  52804-1076  5643452-0853  84254-3965  0618461  7665513


#A: Felipe Albacete
#D: This is an new data Validation to MM/YYYY from 1900 to 2999 this is an validation expression  to Client From MOnth/Year.
#U: http://regexlib.com/REDetails.aspx?regexp_id=721

regexp: (((0[123456789]|10|11|12)([/])(([1][9][0-9][0-9])|([2][0-9][0-9][0-9]))))
tree:   ((((0[1-9])|(10)|(11)|(12))/)((((19)[0-9])[0-9])|(((2[0-9])[0-9])[0-9])))
length: 7 to 7
-------------------- Examples --------------------
ex(0):  11/1924  12/1976  12/1903  11/2983  11/1944  11/1920  10/1901  12/2884
ex(1):  11/2160  01/2540  12/2818  10/2709  11/2248  10/1997  08/2126  11/1972
ex(2):  11/1910  10/1977  10/2716  12/1934  03/2062  12/1976  11/1971  10/1961
ex(3):  12/1987  11/1911  11/2899  12/2271  12/2259  11/2600  09/2153  10/2720
ex(5):  08/2028  10/2700  01/1961  06/1947  11/2453  03/1936  11/1944  10/1963
ex(8):  12/1957  11/2826  10/2326  12/1955  10/1981  07/1951  11/2823  11/2738


#A: jeremy chapman
#D: Matches 12 hour time format
#U: http://regexlib.com/REDetails.aspx?regexp_id=723

regexp: ^(([1-9]{1})|([0-1][1-2])|(0[1-9])|([1][0-2])):([0-5][0-9])(([aA])|([pP]))[mM]$
tree:   ((((([1-9]|([01][12])|(0[1-9])|(1[012])):)([0-5][0-9]))([Aa]|[Pp]))[Mm])
length: 6 to 7
-------------------- Examples --------------------
ex(0):  01:05aM  6:06PM  02:31pM  10:42aM  09:41AM  10:31pm  11:30AM  07:42Am
ex(1):  3:06pM  1:57Am  8:37am  04:11pm  8:09AM  9:25pM  10:59Pm  5:38AM
ex(2):  12:05Am  09:22Pm  7:04pm  11:32Am  1:02pM  11:55Am  12:31Pm  12:23pm
ex(3):  12:19PM  10:48am  2:41am  01:27Pm  02:38pm  06:22am  01:29Pm  09:26pm
ex(5):  11:27Am  7:15PM  2:44pM  01:08Am  12:17PM  11:29PM  2:19am  06:49PM
ex(8):  8:47pM  9:33aM  08:51pM  02:57PM  02:58am  11:12aM  09:52pM  01:01Am


#A: Les Portugal
#D: This is a regular expression I used to validate negative and positive WHOLE numbers, including 0.
#U: http://regexlib.com/REDetails.aspx?regexp_id=724

regexp: (^[0]{1}$|^[-]?[1-9]{1}\d*$)
ERROR:  rx: Embedded '^' unimplemented: in "(^[0]{1}$|^[-]?[1-9]{1}\d*$)"


#A: Ullrich Clemenz Canaan
#D: This ist the Expression for a happy smiley. It should find all the usual writings of the emotion icon :)
#U: http://regexlib.com/REDetails.aspx?regexp_id=726

regexp: [:]{1}[-~+o]?[)>]+
tree:   ((:[+-o~]?)[)>]+)
length: 2 to *
-------------------- Examples --------------------
ex(0):  :)  :)  :>  :)  :>  :)  :>  :>  :)  :)  :)  :>  :>  :)  :)  :)  :>  :)
ex(1):  :>  :)  :>  :)  :>  :>  :>  :)  :o)  :->  :->  :)  :)  :-)  :)  :~>
ex(2):  :>  :>)  :->  :))  :)  :)  :>  :>  :~>  :o)  :>>  :o))  :>>  :o>)  :>
ex(3):  :~>  :o))  :+))  :)>  :o)))  :>>)  :+)))  :~)>)  :+)>)  :)>)  :)>  :+)
ex(5):  :))  :)>>  :+>  :>)>>  :-)>))  :)  :)>))>  :+)))>  :o>)>)  :~)))  :)
ex(8):  :)))>>  :>))>  :~)  :~)>  :+>>>)>>)  :))))>  :~)>)))  :)>>)>>>)


#A: Michael Ash
#D: Height notation for feet (') and inches(")
#U: http://regexlib.com/REDetails.aspx?regexp_id=727

regexp: ^\d?\d'(\d|1[01])"$
tree:   (((([0-9]?[0-9])')([0-9]|(1[01])))")
length: 4 to 6
-------------------- Examples --------------------
ex(0):  7'0\"  0'10\"  2'6\"  6'0\"  9'7\"  7'10\"  3'4\"  4'11\"  8'10\"
ex(1):  6'10\"  9'9\"  02'1\"  2'0\"  76'0\"  5'9\"  4'8\"  9'6\"  95'2\"
ex(2):  76'11\"  88'0\"  0'9\"  5'2\"  2'10\"  5'10\"  82'11\"  14'10\"  4'10\"
ex(3):  6'4\"  97'2\"  1'11\"  46'11\"  90'11\"  8'6\"  69'10\"  1'11\"  84'2\"
ex(5):  76'10\"  87'11\"  4'10\"  0'6\"  82'7\"  65'10\"  4'3\"  17'10\"  5'2\"
ex(8):  30'0\"  1'7\"  89'6\"  61'10\"  12'0\"  60'10\"  1'11\"  9'7\"  7'7\"


#A: Murray Roke
#D: Matches all positive & negative decimal floating point numbers, to any magnitude. Allows empty string.
#U: http://regexlib.com/REDetails.aspx?regexp_id=729

regexp: ^-?\d*(\.\d+)?$
tree:   ((-?[0-9]*)(.[0-9]+)?)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  .2  -  4  0.0  8  9  8.0    -  -5  .1  0  3  -.3  -    -.5  -7  -0  .6
ex(2):  -1.36  -8.84  -13.03  5  -4.17  -8.4  -29  7.0  -.1  10.7  -  2.42  21
ex(3):  -1  .41  -4.44  2.52  -  -6  25.1  69  -63.48  -.66  8  .6  -617.117
ex(5):  -483  8587.3284  -.3387  -.1199  -52139  74807.6638  0185.5818  68552
ex(8):  -41  -074  -99120585  -91358.876508  -227.201450  0875.81  -672  85


#A: Peter Donker
#D: Word HTML cleanup code. Use this expression to get rid of most of the stuff that Word adds to an HTML document such as: lots of span elements, font-family and font-size style attributes, class attributes, a whole bunch of if-then statements. Use this expression in a regex.replace(originalHtml, regExpr, "").
#U: http://regexlib.com/REDetails.aspx?regexp_id=731

regexp: (?s)( class=\w+(?=([^<]*>)))|(<!--\[if.*?<!\[endif\]-->)|(<!\[if !\w+\]>)|(<!\[endif\]>)|(<o:p>[^<]*</o:p>)|(<span[^>]*>)|(</span>)|(font-family:[^>]*[;'])|(font-size:[^>]*[;'])(?-s)
ERROR:  rx: '(?...' unimplemented: in "(?s)( class=\w+(?=([^<]*>)))|(<!--\[if.*?<!\[endif\]-->)|(<!\[if !\w+\]>)|(<!\[endif\]>)|(<o:p>[^<]*</o:p>)|(<span[^>]*>)|(</span>)|(font-family:[^>]*[;'])|(font-size:[^>]*[;'])(?-s)"


#A: John Main
#D: Cheap and cheerful URL checker. Requires a http/https/ftp at the start and will then allow anything starting with at least a <something>.<something>.<something> then valid characters separated by dots and slashes
#U: http://regexlib.com/REDetails.aspx?regexp_id=732

regexp: ^(ht|f)tp(s?)\:\/\/[a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+){2,}(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)?$
tree:   ((((((((((((ht)|f)t)p)s?):)/)/)[-.0-9A-Z_a-z]+)(.[-.0-9A-Z_a-z]+){2,})/?)[#-'+-9?A-Z\_a-z]*?)
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://M.C.n  http://G.u.2  http://H.m.K  ftp://-._.z  ftp://6.a.L
ex(1):  ftp://H.r.8  https://y.z.x_  ftps://u.V.8_  http://N.v.G/o
ex(2):  ftps://c.xo.VU  http://bD.r0.0u.Xu  http://8.o9.D.  ftps://A.1x.x.D/
ex(3):  ftp://o.1kF.wJ&  https://3ud.Y.AUT/  https://7.6MT.h.V/
ex(5):  ftp://j.WUnP.sLfL.kL.Yd.p/  http://6YQ.60ddc.Go.s.ebpU.Y/
ex(8):  ftps://yjXO.w1S.3nU./iHwkviRv


#A: Lewis Moten
#D: Validates 1 or more email addresses.  Email addresses can be delimited with either comma or semicolon.  White space is allowed after delimiter, but not necessary.  I needed this to allow my users to specify multiple email addresses if they choose to do so.
#U: http://regexlib.com/REDetails.aspx?regexp_id=735

regexp: \w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*([,;]\s*\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)*
tree:   (((((((([0-9A-Z_a-z]+([+-.][0-9A-Z_a-z]+)*)@)[0-9A-Z_a-z]+)([-.][0-9A-Z_a-z]+)*).)[0-9A-Z_a-z]+)([-.][0-9A-Z_a-z]+)*)((((((((([,;][\t-\r ]*)[0-9A-Z_a-z]+)([+-.][0-9A-Z_a-z]+)*)@)[0-9A-Z_a-z]+)([-.][0-9A-Z_a-z]+)*).)[0-9A-Z_a-z]+)([-.][0-9A-Z_a-z]+)*)*)
length: 5 to *
-------------------- Examples --------------------
ex(0):  _@p.B  O@c.V  4@H.c  c@w.j  s@M.9  D@d.4  Q@D.L  f@A.C  v@G.O  E@c.E
ex(1):  q+y@_.7.e  g@J.W.0.c; u-z@Y.l.s-D  F+X@8.R.H,Z-U@c._  A@4.0  e+S@U.0.Z
ex(2):  A@DI.p.p-v.cy  SM+t+D@Mf-m-ed.0p-G.es, 1@l-mF.M6-G;  U.A9@Gy-6.BM-WY.tY
ex(3):  t8+o@xjt.RD-Co5-B, jVt-4xr@Pl3.QG.TJ.0l7, JWJ+L+mx_+ZK@7.9Pj.Mf.s-w; 5MA+EU.EXZ@re.o3Z.kNS-gjk
ex(5):  uN.aPX.wPCh@thA-xPC._.YvmHH-8Za.9vk.QUM.yH2-QtVOt,     IU.w+0Gdxs+YI.Rl0Sr-ZVN@4-uZH.J-K6cj.cs.JTLI.sWUHH;  Q0B+WVy1+3bG+azlQ@NU.b07M.oG_Ij.P9EP.O;     fv+82Vy.Q+5Ay.UHJf2.5ezP@zrk9j.frToI.tlp8g.am.0lJ0T-Ofaz
ex(8):  dwQL0d-D0UZmO@hXRS-LBQf6.HrE.ow.WqHUC2G;   OQFuEgVw.TZqKuNz.PbRP+jpA_-eOwq@sR348M.l.krZd9iW.Om1VJoo-Eag.MceWZ.X.cNIcM-Ao9CFZt.KGk-JUF.n_qwYna_.YsfP.bRyLO85-6S6aK6M-2.IlJIg,     V+h8Mkn.4Um+JWG+cR.EVpa8C4f-C2_d49@_65a-Zwg3S-elEeTS2.o8RJ-pvMnt.1eBx-4vx-Vya,     8fRQgHx-WLEB2EHT@RbgZb-Xa5lrM-UuQ.Ook.Cs11RV_.fFAIkR;    ti+g6RAN_1-HPNDZk.beKATqi.RzqY+UHu2ACH-v7uXT@L.JHUc37C9-juct6N.tLZueEL-6CoQ2qp.0PE_lZa-VOCKRbd.HbLpv8uu._K6U-gkL9D.eCsa9w.u4ZFG-a8E;     HC+QVEi-GO2cZant-Cd-C+bFU+OJbt@Ec.sVuJUnQ-IVr8.9rADi-Y-a8WcsNh.K.pE-JvoeLB.iRZE._59Y0-s4jXjI-nrBvsq5-na3vUt.zAl3Ii-vZYqEG


#A: krest krest
#D: For who use a space as thousands separator like french, deutsch ....
#U: http://regexlib.com/REDetails.aspx?regexp_id=745

regexp: (^(((\d)|(\d\d)|(\d\d\d))(\xA0|\x20))*((\d)|(\d\d)|(\d\d\d))([,.]\d*)?$)
ERROR:  rx: Embedded '^' unimplemented: in "(^(((\d)|(\d\d)|(\d\d\d))(\xA0|\x20))*((\d)|(\d\d)|(\d\d\d))([,.]\d*)?$)"


#A: Toby Henderson
#D: This will match all tags in a string, it's good for stripping HTML or XML tags to get the plain text.It works with attributes that include javascript or "<>".
It will match all these
noshade
color="#000000"
align="left">
align="center"><font face="Times New Roman"
size="5"><b>UNITED STATES</b></font></p>
#U: http://regexlib.com/REDetails.aspx?regexp_id=746

regexp: <(?:[^"']+?|.+?(?:"|').*?(?:"|')?.*?)*?>
ERROR:  rx: prefer-fewer '?' unimplemented: in "<(?:[^"']+?|.+?(?:"|').*?(?:"|')?.*?)*?>"


#A: Mohit  Yadav
#D: This Works good until we want a multiple email address validator, I am working on it to make it work with the multiple email address, If anyone can work on this part as to validate a multiple email address then that will produce a very good expression, i think the best of this kind. AIM - to Validate Mohit <myadav@yahoo.com>; Rohit <ryadav@yahoo.com>; .........(any number of times)
#U: http://regexlib.com/REDetails.aspx?regexp_id=749

regexp: ^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*\s+<(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})>$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})$
ERROR:  rx: Embedded '$' unimplemented: in "^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*\s+<(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})>$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})$"


#A: anil agarwal
#U: http://regexlib.com/REDetails.aspx?regexp_id=750

regexp: ^((31(?!\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$
ERROR:  rx: '(?...' unimplemented: in "^((31(?!\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$"


#A: Bruce Hatherly
#D: Here is a regular expression I wrote that validates U.S. phone numbers with area codes. You can't have a leading '0' or '1' but you can separate the number blocks with a space, a dot, a slash, or a hyphen. It also prevents a '0' or '1' for the first digit of the prefix. No extension is allowed and it must be 10 digits.
#U: http://regexlib.com/REDetails.aspx?regexp_id=752

regexp: ^[\(]? ([^0-1]){1}([0-9]){2}([-,\),/,\.])*([ ])?([^0-1]){1}([0-9]){2}[ ]?[-]?[/]?[\.]? ([0-9]){4}$
tree:   ((((((((((((((? )[\x01-/2-\u007f])[0-9]{2})[),-/]*) ?)[\x01-/2-\u007f])[0-9]{2}) ?)-?)/?).?) )[0-9]{4})
length: 12 to *
-------------------- Examples --------------------
ex(0):   V89j64 5876   j81|41 7730   \\70_63 2676   772n33 1713   r99{24 4437
ex(1):  ( ?48D26/ 2854  ( 263896 -/. 2492  ( (88-(70 -. 2365   v66-z55  1787
ex(2):   ]05 !45  3772   !80:02- 2354  ( i14S68 / 8016   ;52)/ <99 5467
ex(3):   o79-// %93 - 1488  ( >76.-/:40  1067  ( i79).711/ 9054
ex(5):  ( ?63) ,42- 6516   <44)).) \\06- 4225   661). A18 - 4241
ex(8):   `82 512 -/ 2020  ( ?84- M14-/. 1408  ( w80.)//u67 -/ 3327


#A: Jason Paschal
#D: the regex's on this site for pulling links off a page always seemed to be faulty, or at least never worked with PHP, so i made this one.  simple, as i'm an amateur with regex's, but stumbled thru it and this one actually works.  tested with PHP function: preg_match_all("/href[ ]*=[ ]*('|\")([^\"'])*('|\")/",$string,$matches)
#U: http://regexlib.com/REDetails.aspx?regexp_id=758

regexp: href[ ]*=[ ]*('|\")([^\"'])*('|\")
tree:   (((((((((hr)e)f) *)=) *)('|"))[\x01-!#-&(-\u007f]*)('|"))
length: 7 to *
-------------------- Examples --------------------
ex(0):  href=''  href=\"'  href=\"'  href=\"\"  href=''  href='\"  href=\"'
ex(1):  href ='\"  href='t'  href = ''  href = \"(\"  href =\"'  href='r\"
ex(2):  href =  'E3\"  href='\"  href  = \"A\"  href=  '\"  href = 'j'
ex(3):  href = '\"  href=  ';:Q\"  href   =  \"bj'  href = \"^S\"
ex(5):  href = '_A$+#'  href     =   'E?f\"  href    = 'j'  href= \"x_0U('
ex(8):  href       =  'o#eQ\\'  href =   'PsGy\"  href        = 'MCm9}'


#A: Michael Ash
#D: yyyy-mm-dd Datetime for AD, with leap year. See http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for details on similar regexs
#T: A.D. Calendar dates
#U: http://regexlib.com/REDetails.aspx?regexp_id=760

regexp: (?#Calandar from January 1st 1 A.D to December 31, 9999 )(?# in yyyy-mm-dd format )(?!(?:1582\D10\D(?:0?[5-9]|1[0-4]))|(?#Missing days from 1582 )(?:1752\D0?9\D(?:0?[3-9]|1[0-3]))(?#or Missing days from 1752 )(?# both sets of missing days should not be in the same calendar so remove one or the other))(?n:^(?=\d)(?# the character at the beginning a the string must be a digit )((?'year'\d{4})(?'sep'[-./])(?'month'0?[1-9]|1[012])\k'sep'(?'day'(?<!(?:0?[469]|11).)31|(?<!0?2.)30|2[0-8]|1\d|0?[1-9]|(?# if feb 29th check for valid leap year )(?:(?<=(?!(?#exclude these years from leap year pattern ) 000[04](?#No year 0 and no leap year in year 4 )|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)(?# centurial years > 1500 not evenly divisible by 400 are not leap year))(?:(?:\d\d)(?# century)(?:[02468][048]|[13579][26])(?#leap years))\k'sep'(?:0?2)\k'sep')|(?# else if not Feb 29 )(?<!\k'sep'(?:0?2)\k'sep')(?# and day not Feb 30 or 31 ))29)(?(?=\x20\d)\x20|$))?(?# if there is a space followed by a digit check for time )(?<time>((?# 12 hour format )(0?[1-9]|1[012])(?# hours )(:[0-5]\d){0,2}(?# optional minutes and seconds )(?i:\x20[AP]M)(?# required AM or PM ))|(?# 24 hour format )([01]\d|2[0-3])(?#hours )(:[0-5]\d){1,2})(?#required minutes optional seconds )?$)
ERROR:  rx: '(?...' unimplemented: in "(?#Calandar from January 1st 1 A.D to December 31, 9999 )(?# in yyyy-mm-dd format )(?!(?:1582\D10\D(?:0?[5-9]|1[0-4]))|(?#Missing days from 1582 )(?:1752\D0?9\D(?:0?[3-9]|1[0-3]))(?#or Missing days from 1752 )(?# both sets of missing days should not be in the same calendar so remove one or the other))(?n:^(?=\d)(?# the character at the beginning a the string must be a digit )((?'year'\d{4})(?'sep'[-./])(?'month'0?[1-9]|1[012])\k'sep'(?'day'(?<!(?:0?[469]|11).)31|(?<!0?2.)30|2[0-8]|1\d|0?[1-9]|(?# if feb 29th check for valid leap year )(?:(?<=(?!(?#exclude these years from leap year pattern ) 000[04](?#No year 0 and no leap year in year 4 )|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)(?# centurial years > 1500 not evenly divisible by 400 are not leap year))(?:(?:\d\d)(?# century)(?:[02468][048]|[13579][26])(?#leap years))\k'sep'(?:0?2)\k'sep')|(?# else if not Feb 29 )(?<!\k'sep'(?:0?2)\k'sep')(?# and day not Feb 30 or 31 ))29)(?(?=\x20\d)\x20|$))?(?# if there is a space followed by a digit check for time )(?<time>((?# 12 hour format )(0?[1-9]|1[012])(?# hours )(:[0-5]\d){0,2}(?# optional minutes and seconds )(?i:\x20[AP]M)(?# required AM or PM ))|(?# 24 hour format )([01]\d|2[0-3])(?#hours )(:[0-5]\d){1,2})(?#required minutes optional seconds )?$)"


#A: Michael Ash
#D: mm/dd/yyyy hh:MM:ss Datetime for all AD years, including leap years.
Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=644.  Please see that regex for details of what is being checked
#U: http://regexlib.com/REDetails.aspx?regexp_id=761

regexp: (?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$
ERROR:  rx: '(?...' unimplemented: in "(?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$"


#A: Michael Ash
#U: http://regexlib.com/REDetails.aspx?regexp_id=762

regexp: ^(?=\d)(?:(?!(?:(?:0?[5-9]|1[0-4])(?:\.|-|\/)10(?:\.|-|\/)(?:1582))|(?:(?:0?[3-9]|1[0-3])(?:\.|-|\/)0?9(?:\.|-|\/)(?:1752)))(31(?!(?:\.|-|\/)(?:0?[2469]|11))|30(?!(?:\.|-|\/)0?2)|(?:29(?:(?!(?:\.|-|\/)0?2(?:\.|-|\/))|(?=\D0?2\D(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|2[0-8]|1\d|0?[1-9])([-.\/])(1[012]|(?:0?[1-9]))\2((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:$|(?=\x20\d)\x20)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$
ERROR:  rx: '(?...' unimplemented: in "^(?=\d)(?:(?!(?:(?:0?[5-9]|1[0-4])(?:\.|-|\/)10(?:\.|-|\/)(?:1582))|(?:(?:0?[3-9]|1[0-3])(?:\.|-|\/)0?9(?:\.|-|\/)(?:1752)))(31(?!(?:\.|-|\/)(?:0?[2469]|11))|30(?!(?:\.|-|\/)0?2)|(?:29(?:(?!(?:\.|-|\/)0?2(?:\.|-|\/))|(?=\D0?2\D(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|2[0-8]|1\d|0?[1-9])([-.\/])(1[012]|(?:0?[1-9]))\2((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:$|(?=\x20\d)\x20)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$"


#A: Michael Ash
#D: yyyy/mm/dd hh:MM:ss Datetime for all AD years, including leap years.
Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=760.  Please see that regex for details of what is being checked
#U: http://regexlib.com/REDetails.aspx?regexp_id=763

regexp: ^(?=\d)(?:(?!(?:1582(?:\.|-|\/)10(?:\.|-|\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\.|-|\/)0?9(?:\.|-|\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\.|-|\/)(?:29|30))))(\d{4})([-\/.])(0?\d|1[012])\2((?!00)[012]?\d|3[01])(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$
ERROR:  rx: '(?...' unimplemented: in "^(?=\d)(?:(?!(?:1582(?:\.|-|\/)10(?:\.|-|\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\.|-|\/)0?9(?:\.|-|\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\.|-|\/)(?:29|30))))(\d{4})([-\/.])(0?\d|1[012])\2((?!00)[012]?\d|3[01])(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$"


#A: Josh Aversa
#D: This is a pretty flexable phone number validator for US numbers.  Allows optional country code and area code.  Allows separation of numbers with " ", "-", "." or nothing to seperate.  Area codes can be in parenthesis or not.  Validates that you'll get 7, 10, or 11 digits in the way the most number of people option when writing them.
#U: http://regexlib.com/REDetails.aspx?regexp_id=764

regexp: ^((\d[-. ]?)?((\(\d{3}\))|\d{3}))?[-. ]?\d{3}[-. ]?\d{4}$
tree:   (((((([0-9][ -.]?)?(((([0-9]{3})))|[0-9]{3}))?[ -.]?)[0-9]{3})[ -.]?)[0-9]{4})
length: 7 to 16
-------------------- Examples --------------------
ex(0):  7016827  8100944  3405490  6601817  0519857  8624819  1578206  2210744
ex(1):  4199284  0-423071 8489  2.(138)2524080   6110336   5069884   3888631
ex(2):  -992.4573  431 185-4437  (388)-643 4159  8(766)-643-0439  582 358.2183
ex(3):  (077).8164846  (500)5626044  .2821822   008.1605  419.266.9917
ex(5):   2207674  0-(178)-7229370  9429463  617.6357  6413499   1804326
ex(8):  7577336  .720.6161  .375-5780   885 6972  6516300949   348 3965


#A: Chris Strolia-Davis
#U: http://regexlib.com/REDetails.aspx?regexp_id=779

regexp: (?<commentblock>((?m:^[\t ]*\/{2}[^\n\r\v\f]+[\n\r\v\f]*){2,})|(\/\*[\w\W]*?\*\/))
ERROR:  rx: '(?...' unimplemented: in "(?<commentblock>((?m:^[\t ]*\/{2}[^\n\r\v\f]+[\n\r\v\f]*){2,})|(\/\*[\w\W]*?\*\/))"


#A: PJ Bijoy
#D: US telephone check
#U: http://regexlib.com/REDetails.aspx?regexp_id=784

regexp: ^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$
ERROR:  rx: Embedded '$' unimplemented: in "^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$"


#A: Kristijan Mitrovic
#D: As I could understand the HTML standard, this is the valid reg.exp. for comments.
The only differenc from the last one is that the comment can be terminated by two minuses followed by none OR SOME space caracters and then by character >
#U: http://regexlib.com/REDetails.aspx?regexp_id=793

regexp: <!--[\s\S]*?--[ \t\n\r]*>
ERROR:  rx: prefer-fewer '?' unimplemented: in "<!--[\s\S]*?--[ \t\n\r]*>"


#A: Justin Elsberry
#D: Javascript matches US zipcodes not allowing all zeros in first 5 or +4
#U: http://regexlib.com/REDetails.aspx?regexp_id=920

regexp: (^(?!0{5})(\d{5})(?!-?0{4})(-?\d{4})?$)
ERROR:  rx: Embedded '^' unimplemented: in "(^(?!0{5})(\d{5})(?!-?0{4})(-?\d{4})?$)"


#A: MARK J KRISBURG
#D: Single field zip code validator, useful for Web Forms.  Allows user to enter 5-digit or 5-digit plus 4 zip code, with hyphen or space or NO space between last 4 digits.
#U: http://regexlib.com/REDetails.aspx?regexp_id=924

regexp: ^\d{5}((-|\s)?\d{4})?$
tree:   ([0-9]{5}((-|[\t-\r ])?[0-9]{4})?)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  86685-2307  61326  219817306  65259  90351  97213  94515  50120
ex(2):  60404-5992  79260  20181  45818  516014086  228756299  12058
ex(3):  07008  59734-5875  22322  65585  254713025  20082  38028  80935-6535
ex(5):  113150968  481652481  41786  22733 0877  24079  73515  51279
ex(8):  24420  79251  14873 1109  85729 3155  58796-8569  13434  52023-4603


#A: MARK J KRISBURG
#D: Single field zip code validator useful for web forms, where user may enter 5 digit or 9 digit zip code, and may use hyphen, space, or no space between the first 5 digits and last 4 digits.
#U: http://regexlib.com/REDetails.aspx?regexp_id=925

regexp: ^\d{5}((\-|\s)?\d{4})?$
tree:   ([0-9]{5}((-|[\t-\r ])?[0-9]{4})?)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  86685-2307  61326  219817306  65259  90351  97213  94515  50120
ex(2):  60404-5992  79260  20181  45818  516014086  228756299  12058
ex(3):  07008  59734-5875  22322  65585  254713025  20082  38028  80935-6535
ex(5):  113150968  481652481  41786  22733 0877  24079  73515  51279
ex(8):  24420  79251  14873 1109  85729 3155  58796-8569  13434  52023-4603


#A: MARK J KRISBURG
#D: Telephone validator allowing user to enter 10 digit telephone number with segments of number separated by hyphens, periods or spaces.  Also braces allowed around area code.
#U: http://regexlib.com/REDetails.aspx?regexp_id=926

regexp: ^(\([2-9]|[2-9])(\d{2}|\d{2}\))(-|.|\s)?\d{3}(-|.|\s)?\d{4}$
tree:   (((((((([2-9])|[2-9])([0-9]{2}|([0-9]{2}))))(-|[\x01-\u007f]|[\t-\r ])?)[0-9]{3})(-|[\x01-\u007f]|[\t-\r ])?)[0-9]{4})
length: 10 to 14
-------------------- Examples --------------------
ex(0):  (5016827810  (4944340549  (9660181705  (7985786248  4915782062
ex(1):  (805)8532714  506) 6719817  (892)-652<3848  225)289 0038  (781) 7862652
ex(2):  (218)-3767774  (999-1646496  841)436A0931  233)8438796  3589454090
ex(3):  (802-609 9470  (317)926 5793  790)=6304386  (413651 2212  (337)984Z5539
ex(5):  (456)455-8591  709)011-7631  (955)6137632  (972)-104 7483
ex(8):  (374)234-3598  299) 427 6175  375884N2193  960)3885232  (317 8529400


#A: Tomas Axelsson
#D: Swedish person number. Don't work on persons older then 100 years, but they are so few that it shouldn't be a problem. Easy to fix, but I choose not to accept oldies...
#U: http://regexlib.com/REDetails.aspx?regexp_id=927

regexp: [1-2][0|9][0-9]{2}[0-1][0-9][0-3][0-9][-][0-9]{4}
tree:   (((((((([12][09|])[0-9]{2})[01])[0-9])[0-3])[0-9])-)[0-9]{4})
length: 13 to 13
-------------------- Examples --------------------
ex(0):  19210703-4026  20641501-8011  1|761005-3145  10760007-6413
ex(1):  20931302-1657  2|741421-6496  20061819-2714  2|000103-6184
ex(2):  29480134-2744  20300823-9506  1|891018-4796  20260510-6098
ex(3):  19061023-8422  2|740914-9179  29080403-6305  10280531-2058
ex(5):  1|991036-1597  19771538-0131  29020209-6532  19551723-6501
ex(8):  2|421116-0574  19910416-1979  2|630017-5749  29230426-7417


#A: MARK J KRISBURG
#D: US telephone number with area code.  Validates and also captures AreaCode, Prefix and Suffix for reformatting.
#U: http://regexlib.com/REDetails.aspx?regexp_id=929

regexp: ^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$
ERROR:  rx: '(?...' unimplemented: in "^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$"


#A: Jerry Schmersahl
#D: Validate US zip codes. Matches all zip codes of exactly 5 digits except 00000. Optionally, matches zip5+zip4 where zip5 is exactly 5 digits, zip4 is exactly 4 digits, and zip5 and zip4 are, optionally, separated by a single space or hyphen. Captures zip5 and zip4 to named groups to facilitate program manipulation.
#T: Validate US Postal Code
#U: http://regexlib.com/REDetails.aspx?regexp_id=930

regexp: ^(?!00000)(?<zip>(?<zip5>\d{5})(?:[ -](?=\d))?(?<zip4>\d{4})?)$
ERROR:  rx: '(?...' unimplemented: in "^(?!00000)(?<zip>(?<zip5>\d{5})(?:[ -](?=\d))?(?<zip4>\d{4})?)$"


#A: MARK J KRISBURG
#D: Zip Code (Zip or Zip-Plus4 format).  Accepts a hyphen, a space, or nothing between Zip and Plus4 segments.  Named segments <zip> and <plus4> may be used to reformat users input to desired format using Regex replace function (re.replace).
#U: http://regexlib.com/REDetails.aspx?regexp_id=931

regexp: (?<zip5>^\d{5})([\- ]?(?<plus4>\d{4})?$)
ERROR:  rx: '(?...' unimplemented: in "(?<zip5>^\d{5})([\- ]?(?<plus4>\d{4})?$)"


#A: Diego dos Santos
#D: Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators: . - /
Valid dates only! m (1-12)/ d (1-31)/ y (0..)
(rizzipereira.com.br)
For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250
#U: http://regexlib.com/REDetails.aspx?regexp_id=932

regexp: ^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$
tree:   ((((((0?[1-9])|(1[012]))[-./])((0?[1-9])|([12|][0-9])|(3[01|])))[-./])([0-9]{4}|[0-9]{2}))
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1-30-43  11-14.35  11/7-0944  10-1.50  4.31.21  3.|1.58  3/2.0707
ex(1):  05/24.6928  10-2/45  11-3.90  07-1-28  2-|3-15  5-2/37  12/26-92
ex(2):  11-30-91  01.16-38  07-28.5691  11/07/9079  03-3|.15  6.30/6328
ex(3):  11/30/8612  12.26.11  12/|4-48  02-|4.82  8/29-8468  10/30-40
ex(5):  01.3|.58  06.3|/7662  12.13-9517  05-|5-00  10-|1/00  10-|9.92
ex(8):  10.08.7758  9-3|.2232  10-31.69  2.30.32  4.1-23  10/20.4486


#A: Dennis de Jong
#D: Meets dutch phone number requirements.. One posted here before didn't allow the 0 after the first digit of the call ID (so the second number or later after the prefix), which should be allowed. I modified that one to meet full requirements now..
Enjoy!!
#U: http://regexlib.com/REDetails.aspx?regexp_id=935

regexp: ([0]{1}[6]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){7})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){5})|([0]{1}[1-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){6})
tree:   ((((((06)[\t-\r -]*)[1-9])[\t-\r ]*)([0-9][\t-\r ]*){7})|(((((((0[1-9])[0-9])[0-9])[\t-\r -]*)[1-9])[\t-\r ]*)([0-9][\t-\r ]*){5})|((((((0[1-9])[0-9])[\t-\r -]*)[1-9])[\t-\r ]*)([0-9][\t-\r ]*){6}))
length: 10 to *
-------------------- Examples --------------------
ex(0):  0610168278  0106386045  0576715120  0337487344  0384515199  0430765668
ex(1):  0308 7 8 74 5 2   0506-6 71 7 74  06 99 4 7 6 2 82   067492 56 5 1
ex(2):  040 4 78 72  47  069962  18  6 7    06 -98  56 848 2  0885 5  8 3 81 8 
ex(3):  06 -5 3 06  8 406   061  0 5  9  1  92 5     06-4   3 9  7  8 2 2 5 
ex(5):  06--5     06  4  25  6     6  064  4     9   2     2  0    0    8  
ex(8):  06 -8       8    7     2       1   1      77


#A: Amos Hurd
#D: Matches valid reference codes for AMD Athlon and Duron processors (not Athlon 64).
#T: AMD Athlon/Duron Codes (not Athlon 64)
#U: http://regexlib.com/REDetails.aspx?regexp_id=936

regexp: ^((A(((H[MX])|(M(P|SN))|(X((D[ACH])|(M[DS]))?)))?)|(K7(A)?)|(D(H[DLM])?))(\d{3,4})[ABD-G][CHJK-NPQT-Y][Q-TV][1-4][B-E]$
tree:   ((((((((A((H[MX])|(M(P|(SN)))|(X((D[ACH])|(M[DS]))?))?)|((K7)A?)|(D(H[DLM])?))[0-9]{3,4})[ABD-G])[CHJ-NPQT-Y])[Q-TV])[1-4])[B-E])
length: 9 to 13
-------------------- Examples --------------------
ex(0):  A100GUQ1C  D844AMS1C  A545EWS2E  D693BHR2D  D073DUT4D  K7067DMS3D
ex(1):  D307DNQ3C  D290EPS2B  D634BUQ4C  DHM1231GPV2B  K7A423GUV1D  A1725AKQ2E
ex(2):  K7A256DWV1B  K7A751BHS3D  K7530BKR4E  A8766BNR4D  D098EXR2E  D069EMS4B
ex(3):  D8929FHS2E  K7706DXQ3E  DHL985BMR4E  K7590DLQ4E  DHL931GLV4B
ex(5):  A597BXQ2E  K7A490EWQ2E  K72677BHQ1E  A029DQR1D  D1122ANT1E  K79858FPV4B
ex(8):  A6391FWR4C  A577AKR1E  K7A948EYS2C  K70238DXV2D  D555DUT4D  AHX713EQT1B


#A: mahesh mandhare
#U: http://regexlib.com/REDetails.aspx?regexp_id=940

regexp: ^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$
tree:   (((((([0-9A-Za-z]([-._]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([-.]?[0-9A-Za-z]+)*).)[A-Za-z]{2,})
length: 6 to *
-------------------- Examples --------------------
ex(0):  Z@H.Xg  V@t.Za  p@C.FO  w@z.ZB  d@P.wV  v@D.eK  Z@m.PE  m@c.qR  K@G.NU
ex(1):  v.0@L.LD  I_L@m-1.br  p@4.qD  L@O.uv  q7@Z4.yX  r-n@8v.IP  V@h.RU
ex(2):  XNc@vor0.pHZ  C@zR.Vil  s@5xq.msA  c@4g-r.R.CMb  O@u8f1.GF  fL@X.sid
ex(3):  l_Nvz3.jDU@yL-c.MJm.vQfz  d@D.LydNS5.Aksg  x@0O.QaUD  m0gn.b@e5.qVv.MXo
ex(5):  h-8JtR9enNQ.6_GZv4h5ZS@88.AE2-AL9A.zlbBrz  YlNGh@rYaT.bHVysy
ex(8):  5WcqH.OD1U.XoUEv19tmm0E@pvUBuEhR.jBMYq


#A: Max Cacchiotti
#D: Validates US or Canadian phone numbers with the use of "-" or numbers stuck together. No parantheses allowed as well as spaces. Area code is optional. The "9," is optional as well, which on some phone systems is needed to dial out.
#U: http://regexlib.com/REDetails.aspx?regexp_id=941

regexp: ^(9,)*([1-9]\d{2}-?)*[1-9]\d{2}-?\d{4}$
tree:   ((((((9,)*(([1-9][0-9]{2})-?)*)[1-9])[0-9]{2})-?)[0-9]{4})
length: 7 to *
-------------------- Examples --------------------
ex(0):  7243442  9672195  4113659  8030304  2694605  4038256  8809341  1502904
ex(1):  9,485-9271  9,652-2671  781-829-2466  8982361175  9,4384515  6011043
ex(2):  644-8728216638  9,839526-9430  9,9079320  9,9,896422-4859  9,9,4660953
ex(3):  9,809-619728-0980  9,9,9,544916403-6727372  9,9,9,384-1279
ex(5):  9,9,9,8495761  9,934-706771575438289-1417
ex(8):  642402756-711-714-769391267548-4724  551-5729


#A: Richard Johnn
#D: Useful for grabbing pipe delimited text from a string.
#U: http://regexlib.com/REDetails.aspx?regexp_id=942

regexp: (\S*)+(\u007C)+(\S*)
tree:   (([\x01-\b\x0e-\x1f!-\u007f]*+|+)[\x01-\b\x0e-\x1f!-\u007f]*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
ex(1):  |  r|  |K  |P  |  e|H  |/  >|  |  8|+  I|%  |s  8|)  |X  h|z  !|O  |
ex(2):  ,LJ|rW  |  ||S  oO||  k|-  ||R  fg||  Lq|S  ||>~  Bq6?||K=  #C1||>X
ex(3):  -fUc).|||  2!vw8ph||Z0  tp|)D  v(m|||  rKx||cN  jxhE?0||  cms&@^|||
ex(5):  Mo||||$Q'R  f+Y.6gh=|||||1}v%K  x!2bF3cy{dl!8O;|Yh;  ||||b\"  Yg?|O7g*
ex(8):  !Rl)9q%$#g],Z;stz+\"fod|||||c0\\&%  /|||||8/4hZ$e  pC,T-yXv<||||||||


#A: Rich Franzmeier
#U: http://regexlib.com/REDetails.aspx?regexp_id=943

regexp: ^\-?\(?([0-9]{0,3}(\,?[0-9]{3})*(\.?[0-9]*))\)?$
tree:   (((-?(?)(([0-9]{0,3}(,?[0-9]{3})*)(.?[0-9]*))))?)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  27.  (62  -543  .  -(9,545.0  -05,713)  05,170.  -(874139  -(445)  -4.
ex(2):  1126  9.)  (,73064920  9901.3)  (41,116.8  71,673)  (476,686.85
ex(3):  -(835821407.71  -(49576.  -(56449788926  -461,390.8  (910031706206754
ex(5):  50,235995,505326,194.05857)  -57,150600462471,17360881)  -2.268
ex(8):  5644926)  -05113,9547147523  -82,484,693680733,038,982,0797357671817)


#A: Error Reporter
#D: Required and regular expression validator. For supporting
-999.99 to +999.99 . Positive and Negative integer/ decimal validations. Percentage sign is also supported. Will not allow empty strings. Can increase/decrease the range as you need.
#U: http://regexlib.com/REDetails.aspx?regexp_id=944

regexp: ^[-+]?[0-9]\d{0,2}(\.\d{1,2})?%?$
tree:   (((([+-]?[0-9])[0-9]{0,2})(.[0-9]{1,2})?)%?)
length: 1 to 8
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  +38.2  -83.07  -09  9%  513%  5.28  00.2%  98.18%  -40  67.3%  5
ex(2):  179%  -922.1%  8%  +97%  66.92%  -43%  85  -8.54%  +15.77%  +51.15  55%
ex(3):  633.8  -724.71  96%  92.09%  76.0  +28%  2%  +308.40  697.1  5.06%  985
ex(5):  -8.5  32%  -286  46.8%  03  39.3%  +2.59%  80.22%  -8.63  95.40
ex(8):  2%  +26.40%  +45%  -52.2  +0  0  3.8%  +1  220.2  -50.3  -45%  3  +87


#A: Jeff Johns
#D: Validates against a U.S. postal code in either a 5 digit format or a 5 dash 4 format.
#U: http://regexlib.com/REDetails.aspx?regexp_id=946

regexp: ^([0-9]{5})([\-]{1}[0-9]{4})?$
tree:   ([0-9]{5}(-[0-9]{4})?)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  70168  27810  09443  40549  06601  81705  19857  86248  19157  82062
ex(1):  44217  86685-9271  49069-5979  28991  74381-1744  27441  56042  72353
ex(2):  86311-1267  66265-9844  80439  22444  28685  23408  43807  66299
ex(3):  93143-9843  63177  58572-5889  63484  54471-1730  11279-6651  12588
ex(5):  49266-1979  20009-1475  23818-8141  78680  73322-8032  29849-0635
ex(8):  78779-6883  85466-9568  59110-2011  32042  45780  61076-5635  15630


#A: Jeff Johns
#U: http://regexlib.com/REDetails.aspx?regexp_id=947

regexp: ^([4]{1})([0-9]{12,15})$
tree:   (4[0-9]{12,15})
length: 13 to 16
-------------------- Examples --------------------
ex(0):  4701682781009  4443405490660  4181705198578  4624819157820
ex(1):  43051476859523  475979289912031  404617256705686  475068042161849
ex(2):  413743137601743  40316431173632  4228641815904  43599509829229
ex(3):  4484620737294  4011246651125  426685187457679  4806387880794
ex(5):  4185581594632173  478096199444117  479477030429496  411881720113203
ex(8):  4045202362854  437720328355266  431702965720978  455528111633414


#A: Jeff Johns
#D: Validate against any mastercard number. All MC's start with a number between 51 and 55 and are followed by 14 other numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=948

regexp: ^([51|52|53|54|55]{2})([0-9]{14})$
tree:   ([1-5|]{2}[0-9]{14})
length: 16 to 16
-------------------- Examples --------------------
ex(0):  4100047351644871  2|77681021601920  4430190382568812  3166566852271649
ex(1):  1476988524661046  4|64761141810723  2570038881509060  |307599279260670
ex(2):  |168844366851242  2204597987650861  2548574664409026  4575064531730112
ex(3):  2178573381131577  2575833456302315  |413418558159463  3312203393785392
ex(5):  5|71053317966161  4335712117632672  4134410531264551  |390855484612551
ex(8):  5431522396133140  1|79096346209990  1121939601538419  3|57033879527546


#A: Jeff Johns
#D: Validate against any american express number. All american express numbers start with either a 34 or 37, followed by 13 other numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=949

regexp: ^([34|37]{2})([0-9]{13})$
tree:   ([347|]{2}[0-9]{13})
length: 15 to 15
-------------------- Examples --------------------
ex(0):  434055038777071  433073780531451  |30519857862481  |73647002165711
ex(1):  7|9524236184363  ||2466104617256  477204395068210  |31618631199960
ex(2):  472444375160148  331736305081895  376095335995098  448615973419455
ex(3):  773650112466511  371809355308759  |71979200096848  730486890293490
ex(5):  445876718176458  |47877947703042  |79371053317966  443204279987420
ex(8):  330253898466840  ||5247662892316  |70437855528111  3|1911675923458


#A: Jeff Johns
#D: Validate against any discover card number. All DC's start with 6011 and are followed by 12 other numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=950

regexp: ^([6011]{4})([0-9]{12})$
tree:   ([016]{4}[0-9]{12})
length: 16 to 16
-------------------- Examples --------------------
ex(0):  0666243442983038  6001457884215120  6600764873446848  6011519943072167
ex(1):  1100892845237597  6101716848030252  1600691539079451  1066068042161863
ex(2):  6610966383266777  1011938851556438  1110750593306678  0111549292183922
ex(3):  6006160030725597  6061025200820985  0160326685187457  6001994759548475
ex(5):  1611009370877240  0666264063574280  6660091595432684  1061113893710533
ex(8):  1101804482633090  1610899914603037  0606226988145711  0016863618454179


#A: Jeff Johns
#D: Validate against any diner's club card. All diner club cards start with 30,36, or 38, followed by 12 other numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=951

regexp: ^([30|36|38]{2})([0-9]{12})$
tree:   ([0368|]{2}[0-9]{12})
length: 14 to 14
-------------------- Examples --------------------
ex(0):  6|243442983038  36457884215120  06764873446848  |3519943072167
ex(1):  36892845237597  |6716848030252  86691539079451  00068042161863
ex(2):  |0966383266777  88938851556438  88750593306678  30549292183922
ex(3):  |6160030725597  33025200820985  3|326685187457  33994759548475
ex(5):  88009370877240  6|264063574280  |3091595432684  00113893710533
ex(8):  83804482633090  88899914603037  66226988145711  68863618454179


#A: Mike Reeves-McMillan
#D: Finds sentences (assuming they end with a full stop, question mark or exclamation mark).
#U: http://regexlib.com/REDetails.aspx?regexp_id=952

regexp: ([^\.\?\!]*)[\.\?\!]
tree:   ([\x01- "--/->@-\u007f]*[!.?])
length: 1 to *
-------------------- Examples --------------------
ex(0):  !  ?  ?  ?  !  .  !  !  ?  !  !  !  !  !  ?  ?  ?  .  .  !  !  .  ?  !
ex(1):  !  !  X?  .  s!  X?  d.  !  [?  .  .  k?  4.  z?  ?  !  N?  !  E?  :?
ex(2):  hC!  Q?  9X?  ?  C.  '.  !  %P?  nZ.  .  s!  !  :~!  /!  c!  Vq.  hN.
ex(3):  .  3.  (.  :&=?  #+?  :D!  1v!  4M?  l$8!  e^.  $?  e'?  xb-.  d!   ?
ex(5):  _<.  K!  vAH?  Fdm.  M<.  $5e}1.  vb7)B.  0mod6.  }0?  lS+jr?  mg`QY!
ex(8):  Hz?  u59 :[?  `dRs'.  !  xB*@\"{3%.  !  SF!  aFuIld%?  ?  5&.  RFW#E.


#A: Mpho Molahloe
#D: Verifies South African mobile numbers with or without the country code.
#U: http://regexlib.com/REDetails.aspx?regexp_id=953

regexp: ^((?:\+27|27)|0)(=72|82|73|83|74|84)(\d{7})$
tree:   ((((((+2)7)|(27))|0)(((=7)2)|(82)|(73)|(83)|(74)|(84)))[0-9]{7})
length: 10 to 13
-------------------- Examples --------------------
ex(0):  +27822122045  0739325718  0845788421  27735408592  +27849460546
ex(1):  0747922051  +27736677632  +27844435309  0827739895  0732361843
ex(2):  0831695974  0746705604  +27737506804  0=722988943  0831923368
ex(3):  27749020181  27842292868  0748515564  0733985398  0824361205
ex(5):  0=726719122  0839201450  27820131501  +27847285447  0=725236501
ex(8):  +27=724180935  0826419182  0743811315  0=720968481  0=722424814


#A: Phil A
#D: Matches UK postcodes of the below formats. The space is optional.
AN NAA
AAN NAA
ANN NAA
ANA NAA
AANA NAA
AANN NAA
#U: http://regexlib.com/REDetails.aspx?regexp_id=954

regexp: ^(([A-Z]{1,2}[0-9]{1,2})|([A-Z]{1,2}[0-9][A-Z]))\s?([0-9][A-Z]{2})$
tree:   (((([A-Z]{1,2}[0-9]{1,2})|(([A-Z]{1,2}[0-9])[A-Z]))[\t-\r ]?)([0-9][A-Z]{2}))
length: 5 to 8
-------------------- Examples --------------------
ex(0):  D34UX  V03QN  F20NT  D29KY  P70KW  E41AX  W01RV  H18NF  U8O1ZC  T0G2XS
ex(1):  G86 7SQ  P9 8BK  ZF7 1NX  T9T4PL  GL0K2BG  NL55 1KR  D5 8GQ  M1E 5RR
ex(2):  Y8K8AL  P9K0GD  HI2Q8CY  QM93 2UT  WZ5 5IR  VB1 5IH  G23 7LV  MN448LB
ex(3):  CU94NE  KE2H1OZ  E4 4YW  F2T3ON  DU4D 2SG  KA83 5YE  Z0R0XZ  L6M 0KY
ex(5):  PQ9N0UB  XQ20 7PT  A4Y1UH  P8A 6ZI  ST8F 9VU  OO8G0PX  EN790MP  S8F9MT
ex(8):  W8K 3UV  P04 7AB  HH85KN  W1F 3VT  S5H9IE  H115QI  LK3K3EG  SE17MF


#A: Jorrit Janszen
#D: I use this expression to read bounced email addresses returned by the system administrator. The body of the subject should contain the email address somewhere but the location varies.
Examples:
To:      blah.v.blah@blah-blah.net ||
blah-blah.blah@blah.com ||
blah@blah.net 0n 25-12-2004 21:09
#U: http://regexlib.com/REDetails.aspx?regexp_id=956

regexp: ^[\n <"']*([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+)
tree:   ([\n "'<]*(([-.0-9A-Z_a-z]+@)[-.0-9A-Z_a-z]+))
length: 3 to *
-------------------- Examples --------------------
ex(0):  _@i  -@e  w@R  B@p  K@f  h@-  7@e  d@C  F@g  x@W  I@_  g@e  v@C  x@0
ex(1):  O@I  x@C   G@e   D@X  'f@m  s@D  T@2  V@J   w@I   l@d  'S@s  'u@l  -@-
ex(2):  E@ta   \"F@I  ' Tk@k  SI@I-  x@Ug  '-r@S  o@o   'm@fD  <<8m@D4  \"'1@ZM
ex(3):   Uiq@J  '1nV@1sC  esM@r  'JOG@aN  s@Zgf  ''jX_@Zuz  a@k  _J@u  n@hXr
ex(5):  41s@w3  '<\"'o@MLP  <'2JT@kEGbF  r2UWr@0k-   \"'KYKkM@VJ-1q  <\"e@AWCy
ex(8):  <\"\"\" <\" Sg8@bK   <' <<<fKY_Qt@uvv-JA  \"W0RRbQCc@lGCr-


#A: Bernat Sales
#D: My definitive Date and Time pattern (dd/mm/yyyy hh:mm:ss). It recognizes all correct dates (>1900) and time (even february). What can I say, I'm proud of it
#U: http://regexlib.com/REDetails.aspx?regexp_id=959

regexp: ^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/((19\d{2})|([2-9]\d{3}))|(29\/0?2\/(((([2468][048])|([3579][26]))00)|(((19)|([2-9]\d))(([2468]0)|([02468][48])|([13579][26]))))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$
tree:   ((((((((((([01]?[0-9])|(2[0-8]))/)((0?[0-9])|(1[012])))|(((29)/)((0?[,13-9])|(1[012])))|(((30)/)((0?[,13-9])|(1[012])))|(((31)/)((0?[13578])|(1[012]))))/)(((19)[0-9]{2})|([2-9][0-9]{3})))|((((((29)/)0?)2)/)((((([2468][048])|([3579][26]))0)0)|(((19)|([2-9][0-9]))(([2468]0)|([02468][48])|([13579][26]))))))[\t-\r ])(([01]?[0-9])|(2[0-3])))((:[0-5]?)[0-9]){2})
length: 14 to 19
-------------------- Examples --------------------
ex(0):  30/11/1940 20:0:4  6/0/7424 21:8:6  29/2/8488 22:4:5  30/8/4021 22:5:8
ex(1):  31/12/3848 20:0:23  30/11/9126 7:2:5  09/11/1929 4:01:2
ex(2):  31/08/4853 9:0:9  19/12/1908 8:8:1  29/12/1969 06:15:6
ex(3):  29/11/9198 4:03:21  29/08/7177 22:12:0  29/2/9200 22:20:4
ex(5):  29/2/3600 8:3:9  31/10/1939 9:06:40  29/2/1940 9:0:2  29/4/5224 20:6:52
ex(8):  30/11/8000 21:8:2  30/11/1944 22:6:48  29/2/9600 12:2:7


#A: Evan Tao
#D: Just test in C#.
Validates a China Unicom mobile phone number with (or without) the International code.
#U: http://regexlib.com/REDetails.aspx?regexp_id=962

regexp: ^(?<national>\+?(?:86)?)(?<separator>\s?-?)(?<phone>(?<vender>13[0-4])(?<area>\d{4})(?<id>\d{4}))$
ERROR:  rx: '(?...' unimplemented: in "^(?<national>\+?(?:86)?)(?<separator>\s?-?)(?<phone>(?<vender>13[0-4])(?<area>\d{4})(?<id>\d{4}))$"


#A: Joao Maia
#D: Match a string in CCYYMM/YYYYMM format.
#U: http://regexlib.com/REDetails.aspx?regexp_id=963

regexp: ^[0-9]{4}((0[1-9])|(1[0-2]))$
tree:   ([0-9]{4}((0[1-9])|(1[012])))
length: 6 to 6
-------------------- Examples --------------------
ex(0):  701604  278106  094410  307310  598301  458710  051904  578610  825609
ex(1):  607911  711412  421708  051410  892806  523710  657610  363206  769004
ex(2):  077710  560404  802812  042107  186308  199910  211909  464506  393803
ex(3):  719309  851510  117311  672211  223202  260911  500911  987610  829210
ex(5):  054001  759501  611411  207312  236506  112401  651111  832610  355302
ex(8):  518710  200010  880711  304810  448411  709508  273312  087710  946301


#A: qi gao
#D: forbidden tele numbers when it starts with 0,
860+,8613,character or has any SBC case.
you can also use it to any international phone dialed by E1 ,etc . this regex has been tested by java, perl,.net
PS: the last regex [0-9]is in SBC case
#U: http://regexlib.com/REDetails.aspx?regexp_id=966

regexp: (^0.*[1-9]*)|(^860+)|(^8613)|(\D)|([0-9])
ERROR:  rx: Embedded '^' unimplemented: in "(^0.*[1-9]*)|(^860+)|(^8613)|(\D)|([0-9])"


#A: Jacek Sompel
#D: This regex will extract the link and the link title for every a href in HTML source. Useful for crawling sites.
Note that this pattern will also allow for links that are spread over multiple lines.
#U: http://regexlib.com/REDetails.aspx?regexp_id=968

regexp: <a[\s]+[^>]*?href[\s]?=[\s\"\']+(.*?)[\"\']+.*?>([^<]+|.*?)?<\/a>
ERROR:  rx: prefer-fewer '?' unimplemented: in "<a[\s]+[^>]*?href[\s]?=[\s\"\']+(.*?)[\"\']+.*?>([^<]+|.*?)?<\/a>"


#A: Andrei Bozantan
#D: Matches a negative or positive percentage between 0 and 100 (inclusive). Accepts up to 2 decimal places.
#U: http://regexlib.com/REDetails.aspx?regexp_id=971

regexp: ^-?[0-9]{0,2}(\.[0-9]{1,2})?$|^-?(100)(\.[0]{1,2})?$
ERROR:  rx: Embedded '$' unimplemented: in "^-?[0-9]{0,2}(\.[0-9]{1,2})?$|^-?(100)(\.[0]{1,2})?$"


#A: Chris Richards
#D: This will match just about everything after href=
Its good if you just need a list of all the href= values
#U: http://regexlib.com/REDetails.aspx?regexp_id=972

regexp: href=[\"\']?((?:[^>]|[^\s]|[^"]|[^'])+)[\"\']?
tree:   (((((((hr)e)f)=)["']?)([\x01-=?-\u007f]|[\x01-\b\x0e-\x1f!-\u007f]|[\x01-!#-\u007f]|[\x01-&(-\u007f])+)["']?)
length: 6 to *
-------------------- Examples --------------------
ex(0):  href=M  href=2  href=i  href=n  href=E  href=S  href=1  href=R  href=@
ex(1):  href=,'  href=S'  href=k  href=w  href=\"('  href='>'  href=:'
ex(2):  href=^q'  href=F  href='8u  href=hS'  href=w\"  href='?  href=|N
ex(3):  href=\"!2  href=\"bOf  href=-  href='@  href=n\"  href='ql  href='K'
ex(5):  href='v0<JQ  href='m  href=\"|`VjZ  href=W'  href=uQhE}'  href=[
ex(8):  href='D:i  href=v=\\ZG*X\"  href=Y'  href=f\"  href='M\"hEi}B


#A: Shahar Bracha
#D: This Blacklist RegEx is designed to search a user input for any malicious code or SQL injection attempts.
#U: http://regexlib.com/REDetails.aspx?regexp_id=977

regexp: (script)|(<)|(>)|(%3c)|(%3e)|(SELECT) |(UPDATE) |(INSERT) |(DELETE)|(GRANT) |(REVOKE)|(UNION)|(<)|(>)
tree:   ((((((sc)r)i)p)t)|<|>|((%3)c)|((%3)e)|((((((SE)L)E)C)T) )|((((((UP)D)A)T)E) )|((((((IN)S)E)R)T) )|(((((DE)L)E)T)E)|(((((GR)A)N)T) )|(((((RE)V)O)K)E)|((((UN)I)O)N)|<|>)
length: 1 to 7
-------------------- Examples --------------------
ex(0):  <  >  INSERT   %3e  INSERT   DELETE  SELECT   INSERT   REVOKE  DELETE
ex(1):  >  UNION  DELETE  UPDATE   %3e  %3c  DELETE  DELETE  DELETE  %3c  >
ex(2):  REVOKE  GRANT   REVOKE  DELETE  UPDATE   INSERT   %3e  %3c  script
ex(3):  <  UPDATE   GRANT   <  DELETE  UNION  script  <  >  %3e  REVOKE  %3c
ex(5):  UPDATE   %3e  <  %3c  DELETE  REVOKE  <  <  SELECT   REVOKE  INSERT   >
ex(8):  DELETE  script  SELECT   SELECT   <  REVOKE  >  INSERT   <  SELECT 


#A: Cliff Wagner
#D: Hex number/string validation method for the Electronic Serial Number(ESN) used in Cellular Phone products.
#U: http://regexlib.com/REDetails.aspx?regexp_id=978

regexp: ^([0-9a-fA-F]){8}$
tree:   [0-9A-Fa-f]{8}
length: 8 to 8
-------------------- Examples --------------------
ex(0):  5E5e915d  b170AFa9  AaDB654D  93E7eBbB  c9eb980C  C7FFe076  8Bdf4a95
ex(1):  168BE88C  1f6FCE9F  26BEc607  E32ec7De  e57dad9d  043cedaF  B8655f51
ex(2):  aed5e3fF  7Bf0aEc5  8C60F718  eEcDfc8c  e07Ac8A0  2bAF4df6  cdAfcE08
ex(3):  fDEDAe2B  26E58Cf6  7A8ECBe1  067AdEec  2AB3edCd  eCEeDF7f  ebcC619B
ex(5):  aC19fb87  53695a2e  7AEfE1cC  49EcbbA0  2F6c4Ef9  b4ACaEf1  b64Bb65a
ex(8):  22528CEA  04C4B6B0  E2fE413f  Aa546CBE  c5DAce7C  b990A7aD  2EB2FdeB


#A: Alex Cons
#D: Expresion Regular para Teléfonos con clave lada en México
separada o no con guiones o espacios. Sirve para teléfonos estacionarios y/o celulares, con o sin paréntesis, 10 números a fuerzas, funciona en .net
#U: http://regexlib.com/REDetails.aspx?regexp_id=979

regexp: ^\(\d{3}\) ?\d{3}( |-)?\d{4}|^\d{3}( |-)?\d{3}( |-)?\d{4}
ERROR:  rx: Embedded '^' unimplemented: in "^\(\d{3}\) ?\d{3}( |-)?\d{4}|^\d{3}( |-)?\d{3}( |-)?\d{4}"


#A: Micah Duke
#D: this will validate most legal email addresses, even allows for some discouraged but perfectly legal characters in local part; allows IP domains with optional []; keeps final tld at a minmum of 2 chars; non capturing groups for efficiency
#U: http://regexlib.com/REDetails.aspx?regexp_id=980

regexp: ^(?:[a-zA-Z0-9_'^&/+-])+(?:\.(?:[a-zA-Z0-9_'^&/+-])+)*@(?:(?:\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\]?)|(?:[a-zA-Z0-9-]+\.)+(?:[a-zA-Z]){2,}\.?)$
tree:   ((([&'+-/-9A-Z^_a-z]+(.[&'+-/-9A-Z^_a-z]+)*)@)(((([?(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))).){3}((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))]?))|((([-0-9A-Za-z]+.)+[A-Za-z]{2,}).?)))
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@x.qM  6@243.248.4.9  J@253.252.215.252  m@231.9.230.252  6@v.ZF
ex(1):  M@b.Oo.  S@Q.XG  2@E.dC  8.C@230.206.251.34]  _@E.xx.
ex(2):  G@0x.T8.Ym  hU.8K.Th@[079.2.12.244  U@051.[202.202.253]  N@dZ.4.lz.
ex(3):  d^M@Ag.fu.1Dz.yBLn  d1U@aH.JpI.  O6Q@d.k9C.zKAB  1.X.r'@6H.GI.
ex(5):  dyR.-M1@[253.[254.[11.70]
ex(8):  XR1.vm4B_AVj.2@vSxGyu.qiy.


#A: Carlos R. L. Rodrigues
#U: http://regexlib.com/REDetails.aspx?regexp_id=981

regexp: ^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?$
tree:   ((((([01]?[0-9])|(2[0-3])):)([0-5]?[0-9]))(:([0-5]?[0-9]))?)
length: 3 to 8
-------------------- Examples --------------------
ex(0):  1:0  1:0  20:0  0:2  22:8  21:7  21:4  0:3  3:0  22:8  7:6  22:0  7:6
ex(1):  22:0  21:9  6:07  22:0:11  20:9  9:5  20:0:09  08:47  18:7  06:16
ex(2):  21:34:19  21:37:6  08:35:40  3:39  23:52  12:44:9  22:41  04:6:40  6:1
ex(3):  1:35:25  07:9  23:4  9:5:37  22:12  9:2:20  20:3  03:9:3  5:1  5:2
ex(5):  0:24:6  23:0:2  21:09  20:9  20:2  22:20:8  20:1  20:7  23:2  23:9:1
ex(8):  00:1:6  02:0  22:53:5  08:43:1  6:22  23:3:9  5:59:9  22:4  23:8:47


#A: John Chivers
#U: http://regexlib.com/REDetails.aspx?regexp_id=982

regexp: (02\d\s?\d{4}\s?\d{4})|(01\d{2}\s?\d{3}\s?\d{4})|(01\d{3}\s?\d{5,6})|(01\d{4}\s?\d{4,5})
tree:   (((((((02)[0-9])[\t-\r ]?)[0-9]{4})[\t-\r ]?)[0-9]{4})|((((((01)[0-9]{2})[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{4})|((((01)[0-9]{3})[\t-\r ]?)[0-9]{5,6})|((((01)[0-9]{4})[\t-\r ]?)[0-9]{4,5}))
length: 10 to 13
-------------------- Examples --------------------
ex(0):  0110004735  0189650383  02737805314  0107369460  0113295151
ex(1):  0254462 4217  028 1441 8928  0161381219  0176730145  0183481982
ex(2):  027 58774216  0196 4305388  016885 7480  02993270185  0188 1811601
ex(3):  01629 98471  0150912090  0118 1912259  010145 49075  01506004620
ex(5):  01117429483  01331057477  0222358 7580  0177575833  01818 81417
ex(8):  0127651336  0112 107 0961  01770969117  01868803408  02187745331


#A: John Chivers
#D: Validates UK mobile phone numbers. Valid formats are `077', `078' or `079' followed by another 8 digits, with an optional space after the dialling code and/or between the 4th and 5th characters of the remainder of the number. These formats are taken from the official guidelines from Ofcom, the organisation responsible for UK telecoms issues. Brackets are not valid and STD code must be entered.
#U: http://regexlib.com/REDetails.aspx?regexp_id=983

regexp: (077|078|079)\s?\d{2}\s?\d{6}
tree:   (((((((07)7)|((07)8)|((07)9))[\t-\r ]?)[0-9]{2})[\t-\r ]?)[0-9]{6})
length: 11 to 13
-------------------- Examples --------------------
ex(0):  07710004735  07789650383  07973780531  07820736946  07981329515
ex(1):  07951107444  077 22 705197  079 01 707911  07818184363  07948 098717
ex(2):  07833775068  077 20433876  078 45760404  079 06 927926  078 04 802244
ex(3):  07900173630  07836 864181  079 78533599  077 63 350961  078 96 341945
ex(5):  07953802988  07919532820  07798 125888  078 42187457  07939 180638
ex(8):  07756 484386  07868273322  07829240798  07920767181  07807444180


#A: Ross Hammer
#D: Based on a regular expression from Michael Ash, this captures US street addresses and mailing addresses, single or multi-line (multi-line is more reliable), and breaks them into discrete parts for address line 1 and 2, city, state, and postal code.  This expression is not perfect - with the interpreter I am using, some addresses refuse to match correctly.  It should however work for most addresses, particularly when lines are delimited with carriage returns, tabs, or some other whitespace line delimiter that is not a space (\x20).  Note: For improved compatibility, this expression does not use named groups.
**Output**
\1 = Address 1,
\2 = Address 2,
\3 = City,
\4 = State,
\5 = Postal Code
#U: http://regexlib.com/REDetails.aspx?regexp_id=986

regexp: ^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])\s+(\d+(?:-\d+)?)\s*$
tree:   ((((((((((((([\t-\r ]*(((((([0-9]+(( +[0-9A-Z_a-z]+).?)+)(((((((( +S)T)R)E)E)T)|(ST)|((((DR)I)V)E)|(DR)|(((((AV)E)N)U)E)|((AV)E)|(((RO)A)D)|(RD)|(((LO)O)P)|((((CO)U)R)T)|(CT)|(((((CI)R)C)L)E)|(((LA)N)E)|(LN)|((((((((BO)U)L)E)V)A)R)D)|(((BL)V)D)).?)?)|(((((((((((P.) ?)O).)|((P ?)O)) *)B)o)x) +)[0-9]+)|(((((((((((((((Ge)n)e)r)a)l) +)D)e)l)i)v)e)r)y)|((((C[/\])O) +)([0-9A-Z_a-z]+ *)+)),?) *)(((((((AP)T)|(((BL)D)G)|(((DE)P)T)|(FL)|(((HN)G)R)|((LO)T)|(((PI)E)R)|(RM)|(S(((LI)P)|(PC)|(T(E|(OP)))))|(((TR)L)R)|(((UN)I)T)|#).?) *)[-0-9A-Za-z]+)|(((BS)M)T)|(((FR)N)T)|(((LB)B)Y)|(((LO)W)R)|((OF)C)|(PH)|(((RE)A)R)|(((SI)D)E)|(((UP)P)R))?)),?)[\t-\r ]+)(((((([0-9]+(( +[0-9A-Z_a-z]+).?)+)(((((((( +S)T)R)E)E)T)|(ST)|((((DR)I)V)E)|(DR)|(((((AV)E)N)U)E)|((AV)E)|(((RO)A)D)|(RD)|(((LO)O)P)|((((CO)U)R)T)|(CT)|(((((CI)R)C)L)E)|(((LA)N)E)|(LN)|((((((((BO)U)L)E)V)A)R)D)|(((BL)V)D)).?)?)|(((((((((((P.) ?)O).)|((P ?)O)) *)B)o)x) +)[0-9]+)|(((((((((((((((Ge)n)e)r)a)l) +)D)e)l)i)v)e)r)y)|((((C[/\])O) +)([0-9A-Z_a-z]+ *)+)),?) *)(((((((AP)T)|(((BL)D)G)|(((DE)P)T)|(FL)|(((HN)G)R)|((LO)T)|(((PI)E)R)|(RM)|(S(((LI)P)|(PC)|(T(E|(OP)))))|(((TR)L)R)|(((UN)I)T)|#).?) *)[-0-9A-Za-z]+)|(((BS)M)T)|(((FR)N)T)|(((LB)B)Y)|(((LO)W)R)|((OF)C)|(PH)|(((RE)A)R)|(((SI)D)E)|(((UP)P)R))?)?),?)[\t-\r ]+)([A-Za-z]+ *)+),)[\t-\r ]+)((A[AKLPRSZ])|(C[AOT])|(D[CE])|(F[LM])|(G[AU])|(HI)|(I[ADLN])|(K[SY])|(LA)|(M[ADEHINOPST])|(N[CDEHJMVY])|(O[HKR])|(P[ARW])|(RI)|(S[CD])|(T[NX])|(UT)|(V[AIT])|(W[AIVY])))[\t-\r ]+)([0-9]+(-[0-9]+)?))[\t-\r ]*)
length: 12 to *
-------------------- Examples --------------------
ex(0):  General Delivery  L, UT 2  P.O.Box 5  G, KY 3  3 M  i, TN 6
ex(1):   C/O O FRNT , Q, IL 7-3
ex(2):  P.O.  Box  4  FRNT,  , cJ wW  , FM  23-80 
ex(3):     8  iKl  g   q.  REAR , lP   j  ,   KS 79 
ex(5):     General     DeliveryBSMT    C/O t7WXV   wpBx     f6 fC1n    Ic_,    LBBY,     rI    gx   dsJZ    V  eD  ,  AA    8853-3    
ex(8):      735    Vi6OgxbRD   ,        183372      dfo    1yGy        L.       dY73.  oe        3lGXY5k.,  REAR     CIK       JkDNuU  BAyv   aRGI        ejzGfn Cgl      idcn    l,       NM     048469      


#A: Gideon Engelberth
#U: http://regexlib.com/REDetails.aspx?regexp_id=988

regexp: ^[ \w]{3,}([A-Za-z]\.)?([ \w]*\#\d+)?(\r\n| )[ \w]{3,},\x20[A-Za-z]{2}\x20\d{5}(-\d{4})?$
tree:   (((((((((([ 0-9A-Z_a-z]{3,}([A-Za-z].)?)(([ 0-9A-Z_a-z]*#)[0-9]+)?)(([\r][\n])| ))[ 0-9A-Z_a-z]{3,}),) )[A-Za-z]{2}) )[0-9]{5})(-[0-9]{4})?)
length: 17 to *
-------------------- Examples --------------------
ex(0):  _yj VPG, hA 22716  ZZf XDn, Rn 88150  5jD\r\neiU, la 97987
ex(1):  _x0m. fev, rv 28831  a10#4\r\n89F, GA 83552
ex(2):  ZGvr\r\nC5I, eg 92001-2004  bdl CNR6, xe 31029-8588
ex(3):  OLZzV\r\nqr54, CF 80063  orpN ZcmG9, zG 44807
ex(5):  gnoY66#5363\r\nKd_QmY, Zh 46982-4537  8fVZnIc.lwx#62 lazr, Ql 09261
ex(8):  jmqYnLax.WIK#300747\r\n9N2pLDf Q9, fR 75652


#A: Andreas Næsager
#D: Well it pretty much accepts all kinds of users, about the domain i didn't write it special for any TLD so there's no length defined, ohh and it accepts some IDN stuff
#U: http://regexlib.com/REDetails.aspx?regexp_id=989

regexp: ^[\.\wæøå-]+@([a-zæøå0-9]+([\.-]{0,1}[a-zæøå0-9]+|[a-zæøå0-9]?))+\.[a-z]{2,6}$
tree:   (((([-.0-9A-Z_a-z¥¦¸Ã]+@)([0-9a-z¥¦¸Ã]+(([-.]?[0-9a-z¥¦¸Ã]+)|[0-9a-z¥¦¸Ã]?))+).)[a-z]{2,6})
length: 6 to *
-------------------- Examples --------------------
ex(0):  P@\xa5\xa6.xe [FAIL]  O@p5.oz  V@0.lh  G@1.kb  i@j6.fb  V@i.tu  v@q.ac
ex(1):  \xb8@5o.mvnsh [FAIL]  \xa5@tk.yb [FAIL]  t@m-4.jvpu  2@r-l.tkpsr
ex(2):  o@\xa5xi.dirdd [FAIL]  IH@w\xb8-lkrx-9l.fiwb [FAIL]  1@kgrx3d.hs
ex(3):  F@uit16g.xeq  o\xa6@k-ueptv.0qa.hjdqdz [FAIL]
ex(5):  s@3v-uv\xa6yb5u62\xa53pa1dl6h7qia.jvcf [FAIL]  h0R@\xb80.xz.yrgv [FAIL]
ex(8):  wV@lykw47\xb8j\xa5szvo1gega1mo8i1zv3.yu [FAIL]


#A: Tim Macrina
#D: Matches month, requires that months 1-9 have a leading 0
#U: http://regexlib.com/REDetails.aspx?regexp_id=991

regexp: ^((0[1-9])|(1[0-2]))$
tree:   ((0[1-9])|(1[012]))
length: 2 to 2
-------------------- Examples --------------------
ex(0):  01  04  04  09  04  10  06  08  11  10  01  06  04  12  10  12  08  07
ex(1):  10  10  03  12  11  11  04  05  10  08  11  01  11  05  04  05  08  11
ex(2):  10  10  11  06  12  04  10  10  06  05  05  12  10  09  11  09  06  11
ex(3):  06  10  10  10  10  09  06  11  11  02  08  12  06  11  09  05  01  05
ex(5):  12  10  02  10  02  12  11  11  02  09  10  02  08  06  11  08  12  02
ex(8):  10  01  03  06  11  06  12  12  10  11  05  12  08  04  09  07  01  01


#A: Tim Macrina
#D: Matches numbers 0 through 99.9
Allows only one preceding zero and does not require the decimal point
#U: http://regexlib.com/REDetails.aspx?regexp_id=994

regexp: ^([1-9]{0,1})([0-9]{1})(\.[0-9])?$
tree:   (([1-9]?[0-9])(.[0-9])?)
length: 1 to 4
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  8  1.3  39.8  38.4  38.4  9  6  67  6  43  9  0.4  20  46.7  23.1  2
ex(2):  50  1  13  9  17.6  9  29  3  57.2  21  89.4  74.9  15  8  0  9  7.7  6
ex(3):  33.1  57.5  5  9  95.3  8.8  1  94  90  9  65  1  0.6  9  9.4  2.0  46
ex(5):  4.8  3  7  77  94  73.6  90.7  43  51  2.8  3.5  5  66  6  30  26  89.8
ex(8):  39.8  42  60.0  2.2  27.9  97.4  80  30  35.5  11  4  78  6.6  5  4.9


#A: Jack Yang
#U: http://regexlib.com/REDetails.aspx?regexp_id=996

regexp: ^\.([rR]([aA][rR]|\d{2})|(\d{3})?)$
tree:   (.(([Rr](([Aa][Rr])|[0-9]{2}))|[0-9]{3}?))
length: 1 to 4
-------------------- Examples --------------------
ex(0):  .R21  .RaR  .R04  .R80  .  .  .  .R89  .RAr  .R48  .r64  .R78  .RAR  .
ex(1):  .R35  .  .rar  .RaR  .r05  .705  .Rar  .r84  .  .RAr  .  .398  .RAR
ex(2):  .  .196  .r32  .206  .206  .Rar  .  .  .  .  .  .Rar  .Rar  .  .716  .
ex(3):  .raR  .RAR  .R97  .r43  .467  .558  .r71  .r57  .rAr  .r88  .  .161
ex(5):  .  .rAR  .695  .  .511  .R70  .657  .  .raR  .102  .R35  .042  .R33
ex(8):  .R31  .RAr  .r06  .676  .RAR  .063  .  .645  .r37  .rAR  .r64  .r39


#A: Paul DeMarco
#D: This is just a very simple matcher for real numbers.
#U: http://regexlib.com/REDetails.aspx?regexp_id=999

regexp: ([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)|([0-9]+)
tree:   ((([0-9]+.)[0-9]*)|(([0-9]*.)[0-9]+)|[0-9]+)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1.  4.  2  6.  .2  3  2.  8.  0.  4  .5  .2  6.  0.  1  .8  .7  .9  9.
ex(1):  3  3  3  8.  7.  2  0.  4.1  4.7  .8  8  6.2  5.1  3  9  7.8  4  1  .5
ex(2):  .0  .77  8.0  87  8  5.84  84.73  9  90.37  2.57  84  91.4  7.19  59.9
ex(3):  36.1  41.36  1  068  256  83.8  647  453  52  629.  6.79  906  74.8
ex(5):  4.928  38851.73858  630.0564  418  67862  4.3  8.00  839.12  792.77
ex(8):  4090.0237  85.25471  3.19576  3  66  200  1533.6057470  .8235808  1


#A: Jeff Johnston
#D: Matches full and compressed IPv6 addresses as defined in RFC 2373 (http://www.faqs.org/rfcs/rfc2373.html). No useful captures.
Various implementations require different terminators. (i.e. ^-$ or \b-\b)
#U: http://regexlib.com/REDetails.aspx?regexp_id=1000

regexp: ^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$
ERROR:  rx: \b (boundary) unimplemented: in "^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$"


#A: Joe Lynwood
#D: By combining the contributions from Bri Gipson and Michael Ash in this site.  I have come up with this RE to exclude the zero dollar amounts such as $0.00, 0.00, 0, etc.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1003

regexp: ^(\$|)([1-9]+\d{0,2}(\,\d{3})*|([1-9]+\d*))(\.\d{2})?$
tree:   ((($|())((([1-9]+[0-9]{0,2})(,[0-9]{3})*)|([1-9]+[0-9]*)))(.[0-9]{2})?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $2  $1  7  1  4  $5  $9  1  $6  $6  9  $1  8  $1  $7  4  $4  $6  $1  5
ex(1):  $4.58  $78  8,460  70.47  9  519,647  2.74  76  $44  27  28  $7.60
ex(2):  $214,132.12  757  $48.92  452.86  21.08  $54.70  $331  332  $877  $44
ex(3):  886,186,748  90,804.80  740  824303.07  $882068  173  $5829  1220.59
ex(5):  65919.34  39577184.08  8455269653  $4559761.25  $1796,268,414,294.42
ex(8):  2657,658,602,424,814,178,680  $9442511,130,566,171,072,388,075,539.80


#A: James Tikitiki
#U: http://regexlib.com/REDetails.aspx?regexp_id=1004

regexp: (((ht|f)tp(s?):\/\/)|(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;"'<>\n\r\t]+)([^\. \[\]\(\),;"'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})
tree:   ((((((((((((ht)|f)t)p)s?):)/)/)|((((ww)w).)[\x01-\b\v\f\x0e-\x1f!-'*-Z\^-\u007f]+)|((((([012]?[0-9]{1,2}).){3}[012]?)[0-9]{1,2})/))[\x01-\b\v\f\x0e-\x1f!#-&*+--:=?-Z\^-\u007f]+)[\x01-\b\v\f\x0e-\x1f!#-&*+-/-:=?-Z\^-\u007f])|(((([012]?[0-9]{1,2}).){3}[012]?)[0-9]{1,2}))
length: 7 to *
-------------------- Examples --------------------
ex(0):  ftp://r_  6.9.3.5/@7  8.9.3.2  2.2.0.5  www.</f  6.7.3.0  http://SE
ex(1):  9.259.4.73  http://_L  07.295.073.168  http://@r  044.9.28.74
ex(2):  02.05.120.26  5.49.176.10  0.11.281.22/sau  013.4.2.81/yx  www.{q@L
ex(3):  www.kKj#+  14.200.97.05  104.071.82.9  294.13.219.43  0.20.3.4
ex(5):  ftp://7Cb`!  07.005.07.057  1.03.30.4  www.&A+#  012.007.296.23/Ryy=
ex(8):  www.N'k6W  ftps://UmN  http://J.pw|D  00.0.65.18  8.66.07.9  15.9.2.58


#A: Joe Lynwood
#D: Combine Michael Ash's US Dollar amount and Bri Gipson's eliminating zero input to create this RE to accept Optional leading dollar sign, optional well-formed comma separator dollar amount with no zero amount allowed.
*** Correction: Remove the "+" otherwise it will incorrectly matches 4 leading digits like 1234,345,678.00 03-03-2005
#U: http://regexlib.com/REDetails.aspx?regexp_id=1005

regexp: ^(\$|)([1-9]\d{0,2}(\,\d{3})*|([1-9]\d*))(\.\d{2})?$
tree:   ((($|())((([1-9][0-9]{0,2})(,[0-9]{3})*)|([1-9][0-9]*)))(.[0-9]{2})?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $2  $1  7  1  4  $5  $9  1  $6  $6  9  $1  8  $1  $7  4  $4  $6  $1  5
ex(1):  $4.58  $78  8,460  70.47  9  519,647  2.74  76  $44  27  28  $7.60
ex(2):  $714,132.12  958  $89.94  46.25  26,198  $7  $7.21  $87.39  $2.02  $77
ex(3):  9,393,516,312  67.13  5.74  $804,606,701,855.82  $76,582,340
ex(5):  $37,953,359.24  $335096.31  7341.66  $52232.26  $1  $464,453.23  6  41
ex(8):  $9,841,429.24  $5018648  $69367650.51  $749057  189676.78


#A: Randal L. Schwartz
#D: Match the full names of the four main characters of The Flintstones.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1006

regexp: ^((Fred|Wilma)\s+Flintstone|(Barney|Betty)\s+Rubble)$
tree:   ((((((((((((((((Fr)e)d)|((((Wi)l)m)a))[\t-\r ]+)F)l)i)n)t)s)t)o)n)e)|(((((((((((((Ba)r)n)e)y)|((((Be)t)t)y))[\t-\r ]+)R)u)b)b)l)e))
length: 12 to *
-------------------- Examples --------------------
ex(0):  Fred Flintstone  Barney Rubble  Barney Rubble  Betty Rubble
ex(1):  Wilma Flintstone  Barney Rubble  Fred Flintstone  Barney Rubble
ex(2):  Barney Rubble  Wilma Flintstone  Fred  Flintstone  Wilma Flintstone
ex(3):  Barney  Rubble  Barney  Rubble  Fred   Flintstone  Betty Rubble
ex(5):  Fred     Flintstone  Wilma Flintstone  Barney  Rubble
ex(8):  Barney       Rubble  Betty Rubble  Betty        Rubble


#A: narendiran dorairaj
#D: this will accept multiple email ids separated only by semi-colons (anyway u can change it).
#U: http://regexlib.com/REDetails.aspx?regexp_id=1007

regexp: ^(([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+([;.](([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+)*$
tree:   ((((([-.0-9A-Z_a-z]+@)[-.0-9A-Z_a-z]+).)[A-Za-z]{2,5}{1,25})+([.;](((([-.0-9A-Z_a-z]+@)[-.0-9A-Z_a-z]+).)[A-Za-z]{2,5}{1,25})+)*)
length: 6 to *
-------------------- Examples --------------------
ex(0):  _@i.Wx  q@a.vo  3@W.yl  n@W.QS  e@G.Uw  D@j.HA  L@N.fe  c@E.TH  k@1.jp
ex(1):  e@K.LDBJYDIKmMPhhezEqCfhfIIXrdGmhjYYiYqG;R@Q.LPLyKgsUOrZJOlppqGdRmqQBWhIiElVsNJZn
ex(2):  7@9i.DDDoDKrAhsoHxQIPmHktcODuvgrfGdizmyqceHHjhyLZBwV@PL.TIqGrskEOYeQflSrdBuaanoyetKyXEcBnzWPpBNBDYH;K@_5.ZHDryLnYGGvhalpuCxUIZVVBrFZUMvssGuRv
ex(3):  HG1@CO.HaaebjrWvDPrTmZpaXyBAXufeGzRPYMUHtIAhcdsIzVOj
ex(5):  L@Hc-r.CLAwjjXAdZFwlvxQoVxMionhyOxgOrqEvINVZlesMiVPWdoXgbls4T@bT8.WqLGPJxAKlsIiBDfKppNPbudmFzzgFIVpEqhXOFvET0-@fS4a.QDrBwIOAHzoWvwtMUGyGARtwWPbUCENolZM@fPa.JkZHjCUwLEqooalVDSSbCdgz6@5tBIp.jEmcptJsdtASOiLjJOsKpURTjKvjUSCUOxDFkmgjKNFrEOwODQn;4@K7f.vArHHpZDhOQHeciriJgRzdEzPLxtTYABFrxZtVFUtSlSbnuIKTQaT@g6DCC.DzEkdjMiKuGPXcbjVBUlSufJyDTTbWpClpLDDKUjDMvBdERfbK@vJmo.UqHCzMXCSaSRPBRJVoRjWpVeuJFwFpDjWexakthvRejhgDzEHjAzHwyMqP@JlRiW.CvjllAqFhqSUHNAOeVGAFKFAfxXWnNfplyZjxCSkMdPmrFaybHxLKly
ex(8):  f@ii3yeM0.MFRgBIrhQjONjecikKmZbsbiIzHAjzATlhQHT-Fi-I@10.XsmkBOgpRDgBuQFcBRYOGmtqzoiGbgROAEph7XemHg@z.nayxxFtMdzXirZdWEKgewvIBFuKvPtreHnioUdoegdSGZyWLjxjhdiHMSU;lzI@WT.qHBNmmXvTSDCJkaFHItKrwNulJzTmwEfgnWaMMmclWpKFVrravqrxs@3.a1VpA.VQEgBdORMVAwhynNSnJHgRKPBGowOPEEJCQxlCHxOvGLDei@5l.rMijQvOIjtvCnbbEcoZETUqfDFlMQPOCbsFftYGBpeRWKLsP7lfs@m08KB.rsboxsiIzUNpCEhkUVRiaguQFXhwOvbiOUUyKJGiypXNvLJHlu@OapU.OA.sxfvnsWlwbsAaIncJULoqJWAEsNrgSzAWCRXTjfhLgSvQNm3.Qw@U.WBXYJWAYTQGiRRtjeWojjkegYBNOWoDWhpaLPSKoFZiR@NvS.xQ34.gkdyOzlTDKDIUCpKEQdMhFEogeCAPavFuHdZroIX.8@Ylr.pSohlZVvXBzIEtMIMfolLgLReXNffNZTe0zc7@MMrPvGXi.aQmrTLcmsckxZnAmRGpMIsEwBwfrgxcwI@b6-JQ.JfxsVkwoIiQDDJBPclpdufCGNykAkzIehhGyjBIeZUKJeLMxHjeKXlNYFxUodULMGE.7LS@KQEu.MaPLZMecqkxjkochzJKMDKOXSmwcNPOVxKvQBewJhJSmCAuHxlMwSRgDpodj.TJ@G.lOqDEaahfYmQMxhfLlxouBbvFmZqjFyAziKINoMZmJgGejaGMuopOZFKDXzFKJIW@7c.IFH6D.CNpINrUzMwdRUeXlmRqvlApCWSztrUDn6vgGE@PWcW.mwoKjewqfXQffvgpoqYpCDFSDXZDPvZxgyZWOvmpROvUkf.1g.rT1Ov@FtErz.VdqziyqRucvjzSlyQqpqBWgnpsXQaJUWfBXJcONofWXWS8gW@QwHHm0Ne.CKQuXaxiUcJXkABmVFzHgeadEYwFESEFytsKTfLLtQepfdcvnhBxzYloaBdN-@Lnw.rSUxYYrwJbidsNJZFIQmklJEEIIbDajBqEAoaUGQHRCUvAk4m@4fKfZn.KVhKrBTCitbiErbCqThMoOiwCfGOiYanvUVaau@Md.ygTKIpuRJbRPOvAQNgGSAnBIDLeHNIqpOCWTbqKqNQm.bg6Q7LD6@uU.XqW9J.MTHrhUovBqkYXjYfjAwrsLYQMORJKZdmcPDKkxgRtGVlVFgiGdIITVE@0u1TD0g.VBTlnnbjDvbIVNMrMruzDBeXAWjYRGVMwPnKHENpAEhEZcoyGZuSGmyOLXzbeZ2dk@xDh2hs1.EELiJDIIkqANubpOKYalMtaDglSBGvgekisWjyrIBwIQLFtrqATvozAjKPKXzX;O2V-y9Vm@oFq.rMhrICEkekLmkXCFZTjvSJcovBJKxPlOSGOXsuFBzqXN@Cbwzq0z7.RyHojlvMaqbFznIDKZyVWMKvQtqGnbggTEpMIMsZGLAnkbRnJ3.Ly@o.fGgVXkQtilVEqlGmCkIoaPnkNhIqQePqvDqCgX.AtS@a.doeffSwKgACaupKSiTbngrDjQQlUrMlRUCEoZyujKBrrp@gBvU.GVoIWztGUnXqfVPqletdcKxZVRhPpMfOaQhmQfkTaBCiFQcvRH@Uy-Tofp.EAxnhzwkztpEzhRirPUbFucqIbBdJzFOUUQXFhLmQUdtpffbqQZlZtL@sfTz.flVzXYElMWQXOwhcOGLaUYsCMdmNjtBSYViHxACYyyBn6J2W@9.CGf.NkmRlXPAecoqsemjtKFlsPPLhRStetagmfDrRjMxyTmnoGRl.v@v6SweK9q.rcTtRYgTmJrYZSQKEtyHhlRZuBwX


#A: Dan Hall
#D: This script attempts to return phrases from a string (Example above looks for {3} word phrases)  Combine this with some .Net code, you can display most popular X word phrases in a string.
-If anyone can help me count "Phrase and Phrase as 2 instances of Phrase please contact me
#U: http://regexlib.com/REDetails.aspx?regexp_id=1008

regexp: (\b)(\w+(\b|\n|\s)){3}
ERROR:  rx: \b (boundary) unimplemented: in "(\b)(\w+(\b|\n|\s)){3}"


#A: Graeme Allwood
#D: Validator for New Zealand Mobile phone numbers. Will look for the first number being a 0 and must be a number or either 6 or 7 digits long after to initial (021) suffix
#U: http://regexlib.com/REDetails.aspx?regexp_id=1009

regexp: (^\([0]\d{2}\))(\d{6,7}$)
ERROR:  rx: Embedded '^' unimplemented: in "(^\([0]\d{2}\))(\d{6,7}$)"


#A: Roberto Hernández
#U: http://regexlib.com/REDetails.aspx?regexp_id=1010

regexp: ^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][aApP][mM]){1}$
tree:   (([1-9]|(1[012])|(0[1-9]))((((:[0-5])[0-9])[APap])[Mm]))
length: 6 to 7
-------------------- Examples --------------------
ex(0):  1:05aM  9:42aM  10:19aM  04:00am  07:36PM  10:53Pm  11:10AM  06:45Am
ex(1):  08:04pM  02:14aM  10:44AM  11:02pm  12:29Am  12:34pm  01:48am  11:09AM
ex(2):  05:20AM  11:05aM  11:32pm  1:28Pm  09:25Am  08:58Pm  02:54pm  7:07pm
ex(3):  11:42pM  7:48am  6:22pm  01:27AM  3:59PM  04:27AM  6:22PM  12:37Pm
ex(5):  7:56AM  10:43AM  11:24pm  3:06pM  04:23pM  06:27PM  8:47AM  10:40pM
ex(8):  05:43Pm  06:09Am  6:03AM  1:42AM  8:40Am  02:04AM  11:51Pm  9:41PM


#A: Luke Arms
#D: A short and sweet email address validator. Checks that the username starts and ends with an alphanumeric character, allows a few non-repeating 'special characters' (namely -, ., _, +, &) and checks for a sensible domain name (2-6 character TLD required). Some unconventional, yet technically valid, addresses will not be matched, but this is only a simple expression ;-)
#U: http://regexlib.com/REDetails.aspx?regexp_id=1012

regexp: ^([0-9a-zA-Z]+[-._+&])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$
tree:   ((((([0-9A-Za-z]+[&+-._])*[0-9A-Za-z]+)@)([-0-9A-Za-z]+.)+)[A-Za-z]{2,6})
length: 6 to *
-------------------- Examples --------------------
ex(0):  Z@H.iY  l@B.lp  A@h.cS  w@k.eU  J@b.Wy  B@I.qQ  i@F.lF  J@O.xK  D@g.HL
ex(1):  m@U.TPXRt  U&e@G.FvIDH  5@G.kyPR  S+j@u.RA  G&8@2.DuH  V@5.JUrC
ex(2):  T3&D@wa.DU.LQ  sN&lC@k.yOfZ  5@i.Hr.ET  qy@y0.Nj.SGsio  4o_Ds@A.MEL
ex(3):  Hx9@mI.-ch.Wy  fy.Rf@i.0ek.q.OcYAA  zF5+aJQ@G.W.ulAw
ex(5):  V-OtEs6_F_nNQ@D-.Wi.4J5AQ.y3m.pYVY  Ioy-w_K3@F69.ln.zfyAE.zkK.EFN.Njs
ex(8):  8zl6jfhW_4_9oIbQRUl@Gh6-S.Q8.tZnw00JV.D0i.XueZus.EDJ4i.8YIlZz.9w.HkJZ


#A: himraj love
#D: it will check for the +ve decimal numbers
#U: http://regexlib.com/REDetails.aspx?regexp_id=1013

regexp: ^[0-9]*(\.)?[0-9]+$
tree:   (([0-9]*.?)[0-9]+)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  0  1  6  8  2  7  8  1  0  0  9  4  4  3  4  0  5  4  9  0  6  6  0
ex(1):  0  7  .6  6  1.6  0  1  69  .2  90  69  9.4  2.2  .7  17  66  1.8  2.4
ex(2):  7.3  0487  2  29  7  26  7.2  57.84  .68  1219  169  09  874  700  81.1
ex(3):  .877  0  43.3  115  032  88.918  977  79.48  93418  601.4  43.49  01408
ex(5):  43668  4066  09.037  9300  65012  2.85  25  .51  752714  600  4620.5317
ex(8):  61948326.6057470  5994.808245  6201833  594484.1786801  332212827726


#A: himraj love
#U: http://regexlib.com/REDetails.aspx?regexp_id=1014

regexp: ^[a-zA-Z0-9]+$
tree:   [0-9A-Za-z]+
length: 1 to *
-------------------- Examples --------------------
ex(0):  Z  H  X  L  W  4  8  G  3  E  T  l  i  E  k  Y  5  d  A  X  c  K  w  I
ex(1):  u  U  h  b  U  I  E  O  2  s  F  0  n  7  E  i  d  P  d  a  H  Q  g  i
ex(2):  zZ  g  lM  D  JK  Y  fD  4Y  A  N  XV  h  7  P  5H  kA  D  x  j8  K  V
ex(3):  r  F7  L  U7  p5B  z9J  MK  b  5  U4  H  N  7k  O  x  m  xK  Y  gaL
ex(5):  s1Y  gIfk  QL  a  Aql  e  x9s9j  vahl  SX2vQ  rsJR  aWI  cB  S  kb
ex(8):  DL  DZCATqz  mKkm9  fd9BrKF  FbFwI  Dlx  rNYy  gKmO  GLed  0  6W


#A: James Johnston
#D: This will find URLs in plain text.  With or without protocol. It matches against all toplevel domains to find the URL in the text.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1016

regexp: ([\d\w-.]+?\.(a[cdefgilmnoqrstuwz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmnoz]|e[ceghrst]|f[ijkmnor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortuvyz]|t[cdfghjkmnoprtvwz]|u[augkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]|aero|arpa|biz|com|coop|edu|info|int|gov|mil|museum|name|net|org|pro)(\b|\W(?<!&|=)(?!\.\s|\.{3}).*?))(\s|$)
ERROR:  rx: invalid range: in "([\d\w-.]+?\.(a[cdefgilmnoqrstuwz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmnoz]|e[ceghrst]|f[ijkmnor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortuvyz]|t[cdfghjkmnoprtvwz]|u[augkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]|aero|arpa|biz|com|coop|edu|info|int|gov|mil|museum|name|net|org|pro)(\b|\W(?<!&|=)(?!\.\s|\.{3}).*?))(\s|$)"


#A: János Cservenák
#D: Litle regexp for my portal engie. Only cut the {CHBLOCK:'modulename'} item
#U: http://regexlib.com/REDetails.aspx?regexp_id=1018

regexp: \{CHBLOCK\:(.*?\})
ERROR:  rx: prefer-fewer '?' unimplemented: in "\{CHBLOCK\:(.*?\})"


#A: Louis Ostendorf
#D: AntiSpam: matches variations on the word "pharmacy"
#U: http://regexlib.com/REDetails.aspx?regexp_id=1020

regexp: (?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))
ERROR:  rx: '(?...' unimplemented: in "(?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))"


#A: Markus Matern
#D: This is my attempt to find out valid german postal codes (PLZ or Postleitzahlen).
After the German Unification the numbers were changed to a five digit system. The postal codes starts with the two digit "Leitzahl". This is a number between 00 and 99 excluding the  not yet used numbers: 00, 05, 43 and 62! After that follows directly a three digit number, 000-999.
Comments welcome. This works for me, however I think it could be written more compact, but could not figure out how ;-)
For more information on german postal codes see:
http://de.wikipedia.org/wiki/Liste_der_Postleitbereiche_Deutschland
http://de.wikipedia.org/wiki/Postleitzahl_%28Deutschland%29
http://en.wikipedia.org/wiki/List_of_postal_codes_in_Germany
#U: http://regexlib.com/REDetails.aspx?regexp_id=1026

regexp: \b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b
ERROR:  rx: \b (boundary) unimplemented: in "\b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b"


#A: Alessandro Pellegrini
#D: This regular expression allows you to match all image tags
#U: http://regexlib.com/REDetails.aspx?regexp_id=1027

regexp: <(\/{0,1})img(.*?)(\/{0,1})\>
ERROR:  rx: prefer-fewer '?' unimplemented: in "<(\/{0,1})img(.*?)(\/{0,1})\>"


#A: Miguel Gutierrez
#D: Accepts only positive decimal values. Zero and negative numbers are non-matching.Allows zeros after last non-zero numeric value after decimal place for significant digits
#U: http://regexlib.com/REDetails.aspx?regexp_id=1028

regexp: (^[+]?\d*\.?\d*[1-9]+\d*$)|(^[+]?[1-9]+\d*\.\d*$)
ERROR:  rx: Embedded '^' unimplemented: in "(^[+]?\d*\.?\d*[1-9]+\d*$)|(^[+]?[1-9]+\d*\.\d*$)"


#A: Nikolay Yordanov
#D: Validation of a Folder Name. Excludes all forbidden characters
#U: http://regexlib.com/REDetails.aspx?regexp_id=1031

regexp: ^[^\\\/\?\*\"\'\>\<\:\|]*$
tree:   [\x01-!#-&()+-.0-9;=@-[]-{}~\u007f]*
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      q                  w  (    C  x  8    n  %  q  7  .    e    ^  8  
ex(2):  B    ,    3   F=  c9  D{        ,  !e    3+  NN    NE      T   T    =  
ex(3):  8[  c  TP    {  67!    {qQ    xn  =  250  W-  8L{  A89  q_  ;5q  9lC  
ex(5):  ~]  4l)d  a$  GjPK  =K  M  81QR  {y)sD  $D!C  Sb  dc}W  vs{=  Ua@  
ex(8):  IV  ]  e~iV  x!2L  {ORJC2  iHf[  c  dR{H2}t  m  DAc)r  _}  i1f,M,


#A: Derek Noonan
#D: This matches all positive decimal values. There was one here already which claimed to but would fail on value 0.00 which is positive AFAIK...
#U: http://regexlib.com/REDetails.aspx?regexp_id=1036

regexp: (^\d*\.?\d*[0-9]+\d*$)|(^[0-9]+\d*\.\d*$)
ERROR:  rx: Embedded '^' unimplemented: in "(^\d*\.?\d*[0-9]+\d*$)|(^[0-9]+\d*\.\d*$)"


#A: German Gonzalez
#D: Formatted Number with "," as thousand separator and "." as decimal separator. now accept numbers without separators of thousands.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1039

regexp: ^\-?[0-9]{1,3}(\,[0-9]{3})*(\.[0-9]+)?$|^[0-9]+(\.[0-9]+)?$
ERROR:  rx: Embedded '$' unimplemented: in "^\-?[0-9]{1,3}(\,[0-9]{3})*(\.[0-9]+)?$|^[0-9]+(\.[0-9]+)?$"


#A: Harry Chou
#D: I need a pattern to match the whole number / integer (0-99999...), but also allow users to put comma in the thousand positions.
This is what I got.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1041

regexp: ^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$
ERROR:  rx: Embedded '$' unimplemented: in "^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$"


#A: Johky Cheng
#D: Url matching
#U: http://regexlib.com/REDetails.aspx?regexp_id=1042

regexp: \b([\d\w\.\/\+\-\?\:]*)((ht|f)tp(s|)\:\/\/|[\d\d\d|\d\d]\.[\d\d\d|\d\d]\.|www\.|\.tv|\.ac|\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.museum|\.co)([\d\w\.\/\%\+\-\=\&\?\:\\\"\'\,\|\~\;]*)\b
ERROR:  rx: \b (boundary) unimplemented: in "\b([\d\w\.\/\+\-\?\:]*)((ht|f)tp(s|)\:\/\/|[\d\d\d|\d\d]\.[\d\d\d|\d\d]\.|www\.|\.tv|\.ac|\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.museum|\.co)([\d\w\.\/\%\+\-\=\&\?\:\\\"\'\,\|\~\;]*)\b"


#A: Howard Richards
#U: http://regexlib.com/REDetails.aspx?regexp_id=1047

regexp: (((^[BEGLMNS][1-9]\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] | JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \d\d?) | (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\s?0AA)
ERROR:  rx: Embedded '^' unimplemented: in "(((^[BEGLMNS][1-9]\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] | JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \d\d?) | (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\s?0AA)"


#A: Bri Gipson
#D: Allows up to seven digits to the left and up to nine digits to the right of an optional decimal place.
Leading zeros on the left of the decimal are accepted.
Only positive values are accepted.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1049

regexp: ^(?=.*[1-9].*$)\d{0,7}(?:\.\d{0,9})?$
ERROR:  rx: '(?...' unimplemented: in "^(?=.*[1-9].*$)\d{0,7}(?:\.\d{0,9})?$"


#A: Jason Roe
#D: Modified Joe Lynwood's to allow zero amounts.  Handles US Dollars including zero dollars.  
#U: http://regexlib.com/REDetails.aspx?regexp_id=1050

regexp: ^(\$)?(([1-9]\d{0,2}(\,\d{3})*)|([1-9]\d*)|(0))(\.\d{2})?$
tree:   (($?((([1-9][0-9]{0,2})(,[0-9]{3})*)|([1-9][0-9]*)|0))(.[0-9]{2})?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  4  4  9  0  4  2  4  6  8  0  4  0  4  0  0  7  1  0  0  5  0  4  4
ex(1):  561  362.81  9.34  7.40  $0  42,482  $1.76  $0.88  0  $0.47  $4.66
ex(2):  $4.46  70  $0.06  $43  $119  794,840  $11,988.06  $7.38  0.16  $617.47
ex(3):  $776,848,325,242.33  38,964  $61.76  $0  $671,190,464  13  0  $0.41
ex(5):  $558,181,491,793,206,884.22  $593.24  7  $250,549,292,183,922,974  0.77
ex(8):  $0  0.15  $634846.44  $9,710,604,486,374,200  8  920116419.44  $699,349


#A: Vincent Faller
#D: Validates US currency but allows for spaces between the dollar sign and dollar amount. If there is cents the period validates to two decimal places
#T: Currency
#U: http://regexlib.com/REDetails.aspx?regexp_id=1052

regexp: ^\$( )*\d*(.\d{1,2})?$
tree:   ((($ *)[0-9]*)([\x01-\u007f][0-9]{1,2})?)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $
ex(1):  $r3  $  $j14  $r7  $  $g16  $  $L1  $y1  $5v8  $c31  $ +8  $9  $ 7Y76
ex(2):  $  $  4  $ 8a1  $`42  $ 05q27  $  5y04  $    $84,0  $    $  2  $  
ex(3):  $  00  $  8  $  92l91  $082o2  $   $  30  $ 4O91  $130  $7j0  $   28
ex(5):  $     00195:3  $     9G52  $  97203j5  $95226a67  $ 52  $ 57403F23
ex(8):  $    4143034N07  $  6  $        8  $    4949388  $        2


#A: Gregory Lyons
#D: Matchs comma delimited numbers. Easily changed to allow for other delimiters. (Edit ",")
Does not allow a leading 0
Does not allow groups of numbers with less than 3 numbers, exculding the first group.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1055

regexp: ^([1-9]{1}(([0-9])?){2})+(,[0-9]{1}[0-9]{2})*$
tree:   (([1-9][0-9]?{2})+((,[0-9])[0-9]{2})*)
length: 1 to *
-------------------- Examples --------------------
ex(0):  7  2  9  5  1  6  4  4  5  1  3  2  9  7  1  7  8  3  4  4  8  5  3  4
ex(1):  214  7,764  87,406  342,961  78,126  36,167  61,829  28  73,144  19,307
ex(2):  67883  681203,951  636,697  9,204  2125,353  8,847,964  34,923,368
ex(3):  27  9222,892,215  85873  96887224  29147,050  359,350  1054264,177
ex(5):  265653,244,563  125329465  941569,116,419,182,358  7315
ex(8):  890545898140368,640  65862796493910482,669,891


#A: Martin Ille
#D: You can use this regular expression in your PHP scripts to convert entered URL in text to URL link. Example:
$text=ereg_replace("(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?","<a href=\"./redir.php?url=\\0\" target=\"_blank\">\\0</a>",$text);
#U: http://regexlib.com/REDetails.aspx?regexp_id=1057

regexp: (((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?
tree:   ((((((((((fi)l)e)|(((((go)p)h)e)r)|(((ne)w)s)|(((nn)t)p)|(((((te)l)n)e)t)|(((ht)t)p)|((ft)p)|((((ht)t)p)s)|(((ft)p)s)|(((sf)t)p)):)/)/)|(((ww)w).))+((([-.0-9A-Z_a-z]+.)[A-Za-z]{2,6})|(((((([0-9]{1,3}.)[0-9]{1,3}).)[0-9]{1,3}).)[0-9]{1,3})))(/[%&--~]*)?)
length: 8 to *
-------------------- Examples --------------------
ex(0):  telnet://2.1.2.2  https://Q.zi  www.X.uy  ftp://2.Ns  ftp://5.1.5.8
ex(1):  www.M.clb/?  www.037.7.2.4  www.89.649.47.60  www.71.157.4.89/
ex(2):  www.news://40.668.55.03/?f  http://57.022.61.10/  https://W.sUFblL
ex(3):  www.ftps://www.G.xv  www.http://www.77.770.802.097/@.j
ex(5):  file://www.news://www.Pstp7.yKY/oifv
ex(8):  ftp://www.news://www.www.https://gopher://.N0B.GaSh/


#A: Sonal Bordia
#D: returns string between two quotes
#U: http://regexlib.com/REDetails.aspx?regexp_id=1059

regexp: "[^"\r\n]*"
tree:   (("[\x01-\t\v\f\x0e-!#-\u007f]*)")
length: 2 to *
-------------------- Examples --------------------
ex(0):  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"
ex(1):  \"\"  \"\"  \"r\"  \"\"  \"\"  \"K\"  \"\"  \"P\"  \"\"  \"\"  \"e\"
ex(2):  \"}K\"  \"\"  \"\"  \"{\"  \"\"  \"g\"  \"\"  \"|\"  \"N$\"  \"on\"
ex(3):  \"WtG\"  \"A\"  \" \"  \"\"  \"9\"  \"O\"  \"v\"  \"TFw\"  \"sT-\"
ex(5):  \"\"  \"Jo\"  \"zy8\"  \"!G@8c\"  \"P}\"  \"&NbU\"  \"\"  \"i8/yB\"
ex(8):  \"+CI@@\"  \"@-e/><^\"  \"Yi\"  \"R%\"  \"q*WSjCp\"  \"f*Bun\"  \"\"


#A: DOZENROSES T
#D: Airway bill no that allows only the format 999-99999998 and does not allow the last digit to be 7,8,9.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1060

regexp: ^\d{3}-\d{7}[0-6]{1}$
tree:   ((([0-9]{3}-)[0-9]{7})[0-6])
length: 12 to 12
-------------------- Examples --------------------
ex(0):  701-68278103  071-51136595  531-45154030  857-86248193  647-00216571
ex(1):  476-85952420  657-69885243  987-17408074  213-81775065  933-31713814
ex(2):  792-60670182  017-19388512  841-59672225  189-51755504  599-50982926
ex(3):  595-26114985  052-36501121  202-02418090  851-87457616  875-80262015
ex(5):  671-34185583  724-07987062  809-61994441  789-91219194  429-45554721
ex(8):  799-87420924  661-04520233  702-53898463  283-55247660  874-51570434


#A: Ben Vaughan
#D: Expression to parse Australian landline telephone numbers. Will only accept valid STD codes. Allows for brackets around the STD code and either spaces or dashes between number groups.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1062

regexp: ^\({0,1}0(2|3|7|8)\){0,1}(\ |-){0,1}[0-9]{4}(\ |-){0,1}[0-9]{4}$
tree:   ((((((((?0)(2|3|7|8)))?)( |-)?)[0-9]{4})( |-)?)[0-9]{4})
length: 10 to 14
-------------------- Examples --------------------
ex(0):  0710004735  0889650383  0273780531  0720736946  0881329515  0273647002
ex(1):  (03) 61700841  (03) 6859-9069  (036576 4790  022098-5174  03)66979079
ex(2):  0843389261  (07)-99966626  07-22216638  079314-2928  02 0316 9320
ex(3):  (0351245904  02-7311-2798  (071227-2014  (07 94550902  02-6114 7255
ex(5):  (07 7182-1258  08) 1605 3210  02)-7619-1772  (02)2620 5833
ex(8):  (07)49068675  (03-7672 6329  03-06350374  (07 7553-5954  (07)66861976


#A: will gunby
#D: Positive real number greater than zero.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1063

regexp: (^[0-9]*[1-9]+[0-9]*\.[0-9]*$)|(^[0-9]*\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)
ERROR:  rx: Embedded '^' unimplemented: in "(^[0-9]*[1-9]+[0-9]*\.[0-9]*$)|(^[0-9]*\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)"


#A: Howard Richards
#D: For the terminally hard of thinking, a version of my UK postcode validator without WHITESPACE. Unlike most validators on regexlib, this knows valid postcode combinations, e.g. W1A is permitted, W1 is not, but W2 is. It should catch between 95-98% of invalid postcodes.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1064

regexp: (((^[BEGLMNS][1-9]\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\d\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\s?0AA$)
ERROR:  rx: Embedded '^' unimplemented: in "(((^[BEGLMNS][1-9]\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\d\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\s?0AA$)"


#A: Leo Hinojosa
#D: Registro Federal de Contribuyentes (RFC) , used in Mexico as a unique set of caracters for a person or corporation registration .
Registro Federal de Contribuyentes utilizado en Mexico para el registro en hacienda.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1065

regexp: ^([A-Z|a-z|&]{3}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$|^([A-Z|a-z]{4}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)((\w{2})([A|a|0-9]{1})){0,3}$
ERROR:  rx: Embedded '$' unimplemented: in "^([A-Z|a-z|&]{3}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$|^([A-Z|a-z]{4}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)((\w{2})([A|a|0-9]{1})){0,3}$"


#A: Daniel Beck
#D: This regexp matches all existing TLDs (Top-Level Domains) according to IANA specifications as of 14/07/2007.
#T: All existing TLDs (Top-Level Domains) according to IANA specifications
#U: http://regexlib.com/REDetails.aspx?regexp_id=1066

regexp: (a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])
tree:   ((a([c-gil-oq-uwxz]|((er)o)|(((rp)|(si))a)))|(b(([abd-jmnorstvwyz]i)z))|(c([acdf-ik-oruvxyz]|(at)|(o(m|(op)))))|(d[ejkmoz])|(e([ceghr-u]|(du)))|(f[ijkmor])|(g([abd-ilmnp-uwy]|(ov)))|(h[kmnrtu])|(i([del-oq-t]|(n((fo)|t))))|(j([emop]|((ob)s)))|(k[eghimnprwyz])|(l[abcikr-vy])|(m([acdeghk-z]|(il)|((ob)i)|((((us)e)u)m)))|(n([acefgilopruz]|((am)e)|(et)))|(o(m|(rg)))|(p([ae-hk-nrstwy]|(ro)))|(qa)|(r[eosuw])|(s[a-eg-ortuvyz])|(t([cdfghj-prtvwz]|((((ra)v)?e)l)))|(u[agkmsyz])|(v[aceginu])|(w[fs])|(y[etu])|(z[amw]))
length: 2 to 6
-------------------- Examples --------------------
ex(0):  zm  gov  vc  jm  aero  tel  sv  tp  ec  tel  do  om  ni  ro  ee  jobs
ex(1):  mn  gm  yu  et  zw  vn  la  zm  sc  gl  name  mil  na  bmiz  yu  jobs
ex(2):  ph  pro  gp  az  wf  qa  eg  fj  de  wf  vn  lt  edu  cat  pt  tg  wf
ex(3):  fj  fk  ug  do  ye  coop  wf  travel  pt  jo  tc  ye  wf  um  jobs  va
ex(5):  vg  np  arpa  pr  bniz  ug  jp  zw  sm  uz  na  lc  yt  mil  sv  gov
ex(8):  jp  net  tp  dz  com  de  za  si  net  museum  gov  mil  ht  om  org


#A: Trevor Green
#D: Validates email addresses according to the RFC 822 specification. The only exception is the exclusion of control characters, which should be sufficient for human input from a keyboard.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1067

regexp: (?<user>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\"))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\")))*)@(?<domain>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\]))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\])))*)
ERROR:  rx: '(?...' unimplemented: in "(?<user>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\"))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\")))*)@(?<domain>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\]))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\])))*)"


#A: Corey Charlton
#D: Allows for a dollar sign with no space after, a dollar sign with a space after, and no dollar sign.  Also makes sure theres no more than 4 decimal places.  Takes out leading zeros if the number isn't 0, and protects against blank entries.
#U: http://regexlib.com/REDetails.aspx?regexp_id=1079

regexp: ^(\$\ |\$)?((0|00|[1-9]\d*|([1-9]\d{0,2}(\,\d{3})*))(\.\d{1,4})?|(\.\d{1,4}))$
tree:   ((($ )|$)?(((0|(00)|([1-9][0-9]*)|(([1-9][0-9]{0,2})(,[0-9]{3})*))(.[0-9]{1,4})?)|(.[0-9]{1,4})))
length: 1 to *
-------------------- Examples --------------------
ex(0):  2  1  .2  .6  .2  0  0  .3  1  00  .3  2  .1  .8  .4  .1  .3  00  3  8
ex(1):  $10  $ 0  $ 00  $0  $ 58,786.16  .8404  $82  $00.1781  $ .72
ex(2):  .770  .8  $ .45  .691  $.7  .20  00.9036  67,843,632  0.7628  0.194
ex(3):  751.878  $ 750.62  .3  $ 00  $ 0  .393  .13  $00.302  $2.0209  $ 0.4
ex(5):  $ 3272  22.2  .92  $ .94  $.65  $ .48  $ 00  .957  $ 85,056,436,120,509
ex(8):  $00.279  $ .639  $.936  $.798  00.8054  $ .575  $80,021,065,005,236,501


#A: Amos Hurd
#D: UK National Insurance (NI) Number, updated 14 Dec 2005 and current for 2006.
#T: UK National Insurance Number
#U: http://regexlib.com/REDetails.aspx?regexp_id=1080

regexp: ^((A[ABEHKLMPRSTWXYZ])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTWXYZ])|(GY)|(H[ABEHKLMPRSTWXYZ])|(J[ABCEGHJKLMNPRSTWXYZ])|(K[ABEHKLMPRSTWXYZ])|(L[ABEHKLMPRSTWXYZ])|(M[AWX])|(N[ABEHLMPRSWXYZ])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTWXYZ])|(S[ABCGHJKLMNPRSTWXYZ])|(T[ABEHKLMPRSTWXYZ])|(W[ABEKLMP])|(Y[ABEHKLMPRSTWXYZ])|(Z[ABEHKLMPRSTWXY]))\d{6}([A-D]|\s)$
tree:   ((((A[ABEHKLMPRSTW-Z])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTW-Z])|(GY)|(H[ABEHKLMPRSTW-Z])|(J[ABCEGHJ-NPRSTW-Z])|(K[ABEHKLMPRSTW-Z])|(L[ABEHKLMPRSTW-Z])|(M[AWX])|(N[ABEHLMPRSW-Z])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTW-Z])|(S[ABCGHJ-NPRSTW-Z])|(T[ABEHKLMPRSTW-Z])|(W[ABEKLMP])|(Y[ABEHKLMPRSTW-Z])|(Z[ABEHKLMPRSTWXY]))[0-9]{6})([A-D]|[\t-\r ]))
length: 9 to 9
-------------------- Examples --------------------
ex(0):  ZL531280   EB089203C  WE103350   OE063786   YX344684C  MA851968A
ex(1):  YP442173A  NS587044D  LE242361B  SA489474   LK252198B  PA413848 
ex(2):  PE387694D  CK652918D  CH788096C  JL802244   RA430316   GY932068A
ex(3):  BM120509A  GY359950   WP191227   PN095103A  WA473265   RM544713 
ex(5):  TW380288   YW685187   YH733811   HP455132C  OM024248   GY085213B
ex(8):  NY133662C  YT671817   HX863823C  ZX688385   LW671487   JE865153 


#A: Tristen Fielding
#U: http://regexlib.com/REDetails.aspx?regexp_id=1082

regexp: ^((?<DRIVE>[a-z]:)|(\\\\(?<SERVER>[0-9]*[a-z\-][a-z0-9\-]*)\\(?<VOLUME>[^\.\x01-\x1F\\""\*\?<>:|\\/][^\x01-\x1F\\""\*\?|><:\\/]*)))?(?<FOLDERS>(?<FOLDER1>(\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))?(?<FOLDERm>[\\/](\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))*)?[\\/]?$
ERROR:  rx: '(?...' unimplemented: in "^((?<DRIVE>[a-z]:)|(\\\\(?<SERVER>[0-9]*[a-z\-][a-z0-9\-]*)\\(?<VOLUME>[^\.\x01-\x1F\\""\*\?<>:|\\/][^\x01-\x1F\\""\*\?|><:\\/]*)))?(?<FOLDERS>(?<FOLDER1>(\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))?(?<FOLDERm>[\\/](\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))*)?[\\/]?$"


#A: João Batista Neto
#D: Not just a number, a byte type. Will match any number from range -128 to 127.
#T: Byte type
#U: http://regexlib.com/REDetails.aspx?regexp_id=2642

regexp: ^(0|[-]{1}([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-8]{1}))|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-7]{1})))$
tree:   (0|(-(([1-9][0-9]?)|(1(([01][0-9])|(2[0-8])))))|(+?(([1-9][0-9]?)|(1(([01][0-9])|(2[0-7]))))))
length: 1 to 4
-------------------- Examples --------------------
ex(0):  0  0  -2  5  5  3  0  125  -115  -9  -7  2  0  -9  -8  3  -3  -3  0  0
ex(1):  0  115  +111  -7  +12  0  -85  0  -116  0  0  -100  0  0  +116  5  +117
ex(2):  -112  -121  -51  -127  +57  126  7  114  -7  -124  -29  -44  124  0  0
ex(3):  +8  0  -2  6  0  0  +124  0  +125  +44  -114  -119  -106  -120  106  0
ex(5):  +43  0  -9  +125  14  0  0  127  -95  0  -9  -5  -114  0  124  0  -103
ex(8):  120  0  58  -123  1  105  -122  0  -87  -3  0  6  0  -38  +109  0  -5


#A: João Batista Neto
#D: Will match an unsigned byte, from range 0 to 255
#T: Unsigned Byte type
#U: http://regexlib.com/REDetails.aspx?regexp_id=2643

regexp: (0|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}[0-9]{0,2}|[2]{1}([0-4]{1}[0-9]{1}|[5]{1}[0-5]{1})))
tree:   (0|(+?(([1-9][0-9]?)|(1[0-9]{0,2})|(2(([0-4][0-9])|(5[0-5]))))))
length: 1 to 4
-------------------- Examples --------------------
ex(0):  0  0  1  1  227  0  0  3  0  220  0  0  0  4  0  1  0  1  1  0  0  0  1
ex(1):  +228  0  +8  +223  0  +205  0  +248  0  13  0  0  0  0  1  250  0  251
ex(2):  0  0  250  78  0  2  +253  0  +145  142  +129  0  144  0  0  0  255
ex(3):  230  0  0  0  0  6  0  207  +5  0  0  0  +1  +4  0  0  0  +8  0  +112
ex(5):  0  173  0  251  0  218  +18  +6  0  0  253  255  1  0  +251  +255  6
ex(8):  0  241  +88  254  0  +189  14  0  13  13  0  +1  0  +2  0  +239  0  0


#A: João Batista Neto
#D: Short type, will match a short number from range -32768 to 32767.
#T: Short type
#U: http://regexlib.com/REDetails.aspx?regexp_id=2644

regexp: ^(0|[-]{1}([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-8]{1})))))|(\+)?([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-7]{1}))))))$
tree:   (0|(-(([1-9][0-9]{0,3})|([12][0-9]{1,4})|(3(([01][0-9]{3})|(2(([0-6][0-9]{2})|(7(([0-5][0-9])|(6[0-8])))))))))|(+?(([1-9][0-9]{0,3})|([12][0-9]{1,4})|(3(([01][0-9]{3})|(2(([0-6][0-9]{2})|(7(([0-5][0-9])|(6[0-7]))))))))))
length: 1 to 6
-------------------- Examples --------------------
ex(0):  0  0  -24  0  0  30104  0  0  0  12  0  21  17  5  -9  -10  0  0  0
ex(1):  0  0  0  -3005  +31102  -32145  0  0  0  0  0  0  0  0  -12  -1041  0
ex(2):  +30382  0  -153  32751  2227  -1565  0  +30522  0  0  +212  2731  30623
ex(3):  0  0  0  -31370  0  0  -953  +18  11  +4398  +32374  -32759  0  0
ex(5):  +2665  0  0  0  0  533  -2782  -506  -31933  -389  -19713  0  0  0
ex(8):  0  31139  32406  0  -31926  -31418  0  0  +18  -31017  -141  0  0  -906


#A: João Batista Neto
#D: Will match any integer from range -2147483648 to 2147483647.
#T: Int type
#U: http://regexlib.com/REDetails.aspx?regexp_id=2646

regexp: (0|[1-9]{1}[0-9]{0,8}|[1]{1}[0-9]{1,9}|[-]{1}[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-8]{1}))))))))|(\+)?[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-7]{1})))))))))
tree:   (0|([1-9][0-9]{0,8})|(1[0-9]{1,9})|((-2)((0[0-9]{8})|(1(([0-3][0-9]{7})|(4(([0-6][0-9]{6})|(7(([0-3][0-9]{5})|(4(([0-7][0-9]{4})|(8(([012][0-9]{3})|(3(([0-5][0-9]{2})|(6(([0-3][0-9])|(4[0-8])))))))))))))))))|((+?2)((0[0-9]{8})|(1(([0-3][0-9]{7})|(4(([0-6][0-9]{6})|(7(([0-3][0-9]{5})|(4(([0-7][0-9]{4})|(8(([012][0-9]{3})|(3(([0-5][0-9]{2})|(6(([0-3][0-9])|(4[0-7]))))))))))))))))))
length: 1 to 11
-------------------- Examples --------------------
ex(0):  2024104046  -2144089203  3  -2010335030  2100192070  2005469685
ex(1):  504  -2144141063  256910  -2117149069  15177398  -2147061383
ex(2):  0  4776806  2050682104  0  -2017138177  2971  148322478  0  -2103802244
ex(3):  2015564380  -2122228641  0  0  26853  -2035995098  0  326397  0  0
ex(5):  17903778  0  1927322  -2100112794  +2042000081  +2060574703  905499
ex(8):  7647  +2024814178  1505  +2006982982  2106292637  -2145998977  186710


#A: João Batista Neto
#D: Will match any unsigned integer from range 0 to 4294967295
#T: Unsigned Int type
#U: http://regexlib.com/REDetails.aspx?regexp_id=2647

regexp: ^(0|(\+)?[1-9]{1}[0-9]{0,8}|(\+)?[1-3]{1}[0-9]{1,9}|(\+)?[4]{1}([0-1]{1}[0-9]{8}|[2]{1}([0-8]{1}[0-9]{7}|[9]{1}([0-3]{1}[0-9]{6}|[4]{1}([0-8]{1}[0-9]{5}|[9]{1}([0-5]{1}[0-9]{4}|[6]{1}([0-6]{1}[0-9]{3}|[7]{1}([0-1]{1}[0-9]{2}|[2]{1}([0-8]{1}[0-9]{1}|[9]{1}[0-5]{1})))))))))$
tree:   (0|((+?[1-9])[0-9]{0,8})|((+?[123])[0-9]{1,9})|((+?4)(([01][0-9]{8})|(2(([0-8][0-9]{7})|(9(([0-3][0-9]{6})|(4(([0-8][0-9]{5})|(9(([0-5][0-9]{4})|(6(([0-6][0-9]{3})|(7(([01][0-9]{2})|(2(([0-8][0-9])|(9[0-5]))))))))))))))))))
length: 1 to 11
-------------------- Examples --------------------
ex(0):  22  4005503877  10  4  22  4051136598  4160181705  0  0  18  4140634794
ex(1):  4679  0  22922  965  +4269011960  5951  +5739817  +4069026006
ex(2):  +4068587700  0  3731134  0  76971  0  +3564  +34460  0  +61294  8910491
ex(3):  +212429  +12  +2505433  +325954  +225278054  375513  +37832  +532202  0
ex(5):  +66685  +4008124232  8676  +79106478  +4275860242  0  7903835  16057
ex(8):  0  0  0  6417  +3818797  4288178991  0  0  +378  298269  0  +7749
