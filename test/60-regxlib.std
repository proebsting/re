Options: -R -T -g -h -i -l -v -I 0

         # A large number of expressions scraped 4-Apr-2014 from regxlib.com

         

         

         #A: Steven Smith
         #D: Matches exactly 1 numeric digit (0-9).
         #T: One Numeric Digit
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1
expr 0: ^\d$
tree:   [0-9]
augmnt: ([0-9]#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  2  0  1  2  7  8  5  4  8  3  0  0  9  4  7  4  6  8  9  7  8  0  2
ex(2):  0  8  4  2  9  0  7  4  6  4  0  7  7  8  4  3  9  0  9  1  3  6  4  7
ex(3):  3  9  4  3  3  4  8  2  1  2  3  2  6  2  0  6  2  0  8  8  8  9  0  0
ex(5):  1  9  9  1  0  9  9  6  4  2  2  6  8  9  3  9  9  4  0  3  7  8  8  8
ex(8):  3  5  7  0  7  6  9  7  0  2  2  5  5  6  0  4  9  7  9  1  7  0  3  4
---------------- Examples from DFA ---------------
s1:  1

         

         #A: Steven Smith
         #D: Matches 5 numeric digits, such as a zip code.
         #T: Five Integer US ZIP Code
         #U: http://regexlib.com/REDetails.aspx?regexp_id=2
expr 1: ^\d{5}$
tree:   [0-9]{5}
augmnt: ((((([0-9][0-9])[0-9])[0-9])[0-9])#)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  07784  39091  36478  39433  48212  32620  62088  89001  19910
ex(2):  26893  99403  78887  35707  69702  25560  49791  70347  14007  80329
ex(3):  10376  85246  28793  27998  14209  10688  52380  22098  28652  41853
ex(5):  09305  06682  70799  08007  43383  93675  36348  85644  07465  99043
ex(8):  63189  83817  43780  46560  59260  06990  11621  51198  67389  10951
---------------- Examples from DFA ---------------
s1:  94772

         

         #A: Steven Smith
         #D: Numeric and hyphen 5+4 ZIP code match for ZIP+4.
         #T: ZIP+4 - XXXXX-XXXX
         #U: http://regexlib.com/REDetails.aspx?regexp_id=3
expr 2: ^\d{5}-\d{4}$
tree:   (([0-9]{5}-)[0-9]{4})
augmnt: ((((((([0-9][0-9])[0-9])[0-9])[0-9])-)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  44365-7788  87982-1004  58601-2012  78548-0094  74689-8027  08429-7464
ex(1):  36478-9433  48212-2620  62088-9001  19910-9642  26893-9403  78887-5707
ex(2):  49791-0347  14007-0329  08464-0376  85246-8793  27998-4209  10688-2380
ex(3):  41853-8832  09305-6682  70799-8007  43383-3675  36348-5644  07465-9043
ex(5):  83817-3780  46560-9260  06990-1621  51198-7389  10951-0219  94772-8228
ex(8):  44232-9055  10733-1747  86699-2663  68792-6179  52752-6019  41981-8796
---------------- Examples from DFA ---------------
s1:  66674-7604

         

         #A: Steven Smith
         #U: http://regexlib.com/REDetails.aspx?regexp_id=4
ERROR:   ^\d{5}$|^\d{5}-\d{4}$
    rx: Embedded '$' unimplemented: in "^\d{5}$|^\d{5}-\d{4}$"

         

         #A: Steven Smith
         #D: This regular expression will match a hyphen-separated Social Security Number (SSN) in the format NNN-NN-NNNN.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=9
expr 3: ^\d{3}-\d{2}-\d{4}$
tree:   (((([0-9]{3}-)[0-9]{2})-)[0-9]{4})
augmnt: ((((((([0-9][0-9])[0-9])-)([0-9][0-9]))-)((([0-9][0-9])[0-9])[0-9]))#)
length: 11 to 11
-------------------- Examples --------------------
ex(0):  443-56-7888  798-61-0458  601-20-2785  483-09-7468  978-27-8429
ex(1):  909-36-7839  433-82-2326  206-08-8900  119-10-9642  268-39-4037
ex(2):  702-55-0497  917-34-1400  780-29-8464  103-68-2462  879-27-9814
ex(3):  802-09-2865  241-53-8832  093-50-6827  079-08-0743  383-36-5363
ex(5):  599-43-0053  631-98-8174  378-46-6059  260-69-0116  215-19-6738
ex(8):  947-24-2284  593-72-9644  232-90-5107  336-74-8669  992-63-8792
---------------- Examples from DFA ---------------
s1:  601-41-8128

         

         #A: Steven Smith
         #D: Matches any string of only upper- and lower- case letters (no spaces).
         #T: A string of any US ASCII letters
         #U: http://regexlib.com/REDetails.aspx?regexp_id=11
expr 4: ^[a-zA-Z]+$
tree:   [A-Za-z]+
augmnt: ([A-Za-z]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  m  W  P  K  b  y  J  D  G  S  K  D  v  U  N  d  U  q  Y  B  E  W  i  j
ex(1):  w  B  K  d  C  Z  B  C  u  F  C  D  c  y  U  X  L  A  y  M  F  Q  u  y
ex(2):  Xs  k  X  ms  Po  ZR  u  yT  YV  aS  J  T  A  r  Q  E  D  x  br  mE  c
ex(3):  r  N  Y  YcK  BxM  f  Z  Wia  m  e  pfv  Oj  C  bZU  z  x  Mi  lSk  mdI
ex(5):  zhJ  Hfz  DQai  TGEHl  Tby  XGO  OHUw  Ql  oqOd  Qbs  M  yQ  vCn  huZua
ex(8):  GfbZ  joCwx  qWw  sYdaIqVw  iBjwd  ovjUOw  vEAo  KglzH  llNqL  Gq  vlJt
---------------- Examples from DFA ---------------
s1:  l

         

         #A: Steven Smith
         #D: Matches any alphanumeric string (no spaces).
         #T: Alphanumeric
         #U: http://regexlib.com/REDetails.aspx?regexp_id=12
expr 5: ^[a-zA-Z0-9]+$
tree:   [0-9A-Za-z]+
augmnt: ([0-9A-Za-z]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  H  W  L  O  q  V  2  o  3  B  O  z  c  l  I  u  q  B  Y  N  J  T  d  m
ex(1):  i  V  D  p  e  A  9  W  U  u  c  e  C  U  B  0  x  K  b  T  d  C  0  K
ex(2):  N  xe  G  50  r6  t  Ro  u3  O  o  J  Y  q  L  f  O  yY  9  Oa  7  Q
ex(3):  B  i  e  xPU  7  W  bZJ  r0  kFf  Fq  u  Ok  vU  0t  k  cY  zo  wy  Iwd
ex(5):  2af  wfdG  vm  Bn8e  n  SaG  tNd  OBDQv  3BUD  2vDOY  niXE  IZlxf  oQoC
ex(8):  pVLh  9  s  cDR45  t  g  N3YyEse  y0RnUHr5  XS3EqXl  Xr  rd  qhY4  Y
---------------- Examples from DFA ---------------
s1:  r

         

         #A: Steven Smith
         #D: Positive integer value.
         #T: Positive Integer
         #U: http://regexlib.com/REDetails.aspx?regexp_id=13
expr 6: ^\d+$
tree:   [0-9]+
augmnt: ([0-9]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  2  0  1  2  7  8  5  4  8  3  0  0  9  4  7  4  6  8  9  7  8  0  2
ex(2):  8  2  07  6  0  78  3  09  36  7  3  43  48  1  3  6  0  2  8  8  00
ex(3):  109  6  22  89  9  4  378  873  7  7  9  022  5  0  979  70  4  14  07
ex(5):  908  64103  685  462  7932  998  42  9  06  8523  0220  82865  418  3
ex(8):  32093  5066827  799  800  4338  93  753  34885  440  46599043  0
---------------- Examples from DFA ---------------
s1:  8

         

         #A: Steven Smith
         #D: Matches any signed integer.
         #T: Signed Integer
         #U: http://regexlib.com/REDetails.aspx?regexp_id=14
expr 7: ^(\+|-)?\d+$
tree:   ((+|-)?[0-9]+)
augmnt: (((+|-)?[0-9]+)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  2  1  7  5  8  +9  7  6  9  +2  +4  9  7  6  0  -4  -9  -4  +9  3  +2
ex(2):  0  0  8  +19  -96  2  9  -0  -8  -07  70  5  +9  -03  14  7  3  08  4
ex(3):  +287  -998  +9  +852  +209  86  +85  +3  930  +827  990  0  +8  -75
ex(5):  +07465  -32005  +89  8174  -4  6  9  00  90116  51  -73  10951  2
ex(8):  8459377  9644232  -510733  74786699  +368  -61795275  601941  +8
---------------- Examples from DFA ---------------
s1:  9

         

         #A: Steven Smith
         #D: The password's first character must be a letter, it must contain at least 4 characters and no more than 15 characters and no characters other than letters, numbers and the underscore may be used
         #T: Strongish Password
         #U: http://regexlib.com/REDetails.aspx?regexp_id=15
expr 8: ^[a-zA-Z]\w{3,14}$
tree:   ([A-Za-z][0-9A-Z_a-z]{3,14})
augmnt: (([A-Za-z]((((((((((((([0-9A-Z_a-z][0-9A-Z_a-z])[0-9A-Z_a-z])[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?))#)
length: 4 to 15
-------------------- Examples --------------------
ex(0):  mWLO  bV2o  SB_k  UKcl  quqB  WNJT  emUi  CDpe  a9WU  cceC  LB0x  FbTd
ex(1):  kNPxCOrLpY  S_OF_v  xOyYu3u  M3i3Pdnv  ILFfFuO9Ze  iazow_RZaW  QdGcAeG
ex(2):  ytniaIfoCK  bVrGfWR5  VigN3EeyP_  or5c3Hh  VhY4L6ra  x4ZKRAL1
ex(3):  MCzkfaJdgF  PE0cRO_gn76  WTcJkO3UK  JoggNiff  GLMyejDKf  xPma3s3o
ex(5):  NL8M26wM6  U5OYVge_y  NJW34PrmlOCKM  xkm3vVf  nJTxlFpdz0  vT218J7BZUN
ex(8):  U2iwMy4KUJ  FWsn069Gox  pqh3snpLbM  LbEM9c7V  P1s2DinU7zL  JSISqfNJ
---------------- Examples from DFA ---------------
s1:  mbrE
s15:  mbrEg
s14:  mbrEgj
s13:  mbrEgjO
s12:  mbrEgjOB
s11:  mbrEgjOBA
s10:  mbrEgjOBAt
s9:  mbrEgjOBAtj
s8:  mbrEgjOBAtja
s7:  mbrEgjOBAtjaM
s6:  mbrEgjOBAtjaMW
s5:  mbrEgjOBAtjaMWI

         

         #A: Steven Smith
         #D: Simple email expression.  Doesn't allow numbers in the domain name and doesn't allow for top level domains that are less than 2 or more than 3 letters (which is fine until they allow more).  Doesn't handle multiple "." in the domain (joe@abc.co.uk).
         #T: Email - Overly Simple
         #U: http://regexlib.com/REDetails.aspx?regexp_id=16
ERROR:   ^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$
    rx: prefer-fewer '?' unimplemented: in "^\w+@[a-zA-Z_]+?\.[a-zA-Z]{2,3}$"

         

         #A: Steven Smith
         #D: The "hello world" of regular expressions, this will match any string with an instance of 'foo' in it.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=18
expr 9: foo
tree:   ((fo)o)
augmnt: (((fo)o)#)
length: 3 to 3
-------------------- Examples --------------------
ex(0):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(1):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(2):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(3):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(5):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
ex(8):  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo  foo
---------------- Examples from DFA ---------------
s1:  foo

         

         #A: Steven Smith
         #D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[12345]$.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=19
expr 10: ^[1-5]$
tree:   [1-5]
augmnt: ([1-5]#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  5  5  4  2  1  2  3  3  4  4  4  3  5  4  3  2  2  1  1  5  1  4  2  1
ex(1):  2  3  1  2  3  3  4  1  5  4  4  1  1  5  5  3  5  2  4  5  3  4  1  3
ex(2):  1  4  5  3  5  1  3  5  2  5  1  3  3  4  5  4  5  1  5  2  4  2  5  3
ex(3):  4  5  5  4  4  5  4  3  2  3  4  3  2  3  1  2  3  1  4  4  4  5  1  1
ex(5):  2  5  5  2  1  5  5  2  5  3  3  2  4  5  4  5  5  5  1  4  3  4  4  4
ex(8):  4  1  3  1  3  2  5  3  1  3  3  1  1  2  1  5  5  3  5  2  3  1  4  5
---------------- Examples from DFA ---------------
s1:  2

         

         #A: Steven Smith
         #D: This matches a single numeric digit between 1 and 5, and is the same as saying ^[1-5]$. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=20
expr 11: ^[12345]$
tree:   [1-5]
augmnt: ([1-5]#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  5  5  4  2  1  2  3  3  4  4  4  3  5  4  3  2  2  1  1  5  1  4  2  1
ex(1):  2  3  1  2  3  3  4  1  5  4  4  1  1  5  5  3  5  2  4  5  3  4  1  3
ex(2):  1  4  5  3  5  1  3  5  2  5  1  3  3  4  5  4  5  1  5  2  4  2  5  3
ex(3):  4  5  5  4  4  5  4  3  2  3  4  3  2  3  1  2  3  1  4  4  4  5  1  1
ex(5):  2  5  5  2  1  5  5  2  5  3  3  2  4  5  4  5  5  5  1  4  3  4  4  4
ex(8):  4  1  3  1  3  2  5  3  1  3  3  1  1  2  1  5  5  3  5  2  3  1  4  5
---------------- Examples from DFA ---------------
s1:  2

         

         #A: Steven Smith
         #D: This expression matches email addresses, and checks that they are of the proper form.  It checks to ensure the top level domain is between 2 and 4 characters long, but does not check the specific domain against a list (especially since there are so many of them now).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=21
ERROR:   ^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$
    rx: invalid range: in "^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"

         

         #A: Steven Smith
         #D: This expression matches a hyphen separated US phone number, of the form ANN-NNN-NNNN, where A is between 2 and 9 and N is between 0 and 9.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=22
expr 12: ^[2-9]\d{2}-\d{3}-\d{4}$
tree:   ((((([2-9][0-9]{2})-)[0-9]{3})-)[0-9]{4})
augmnt: (((((([2-9]([0-9][0-9]))-)(([0-9][0-9])[0-9]))-)((([0-9][0-9])[0-9])[0-9]))#)
length: 12 to 12
-------------------- Examples --------------------
ex(0):  443-567-8887  582-100-5860  362-127-5483  209-746-9780  870-429-7464
ex(1):  678-943-4821  632-206-0888  300-199-0996  422-893-9403  588-735-0769
ex(2):  370-471-0078  432-084-4103  368-246-8793  679-814-0910  888-238-2209
ex(3):  283-093-5066  427-799-8007  433-393-7536  548-564-0746  999-432-0536
ex(5):  404-560-9260  669-011-2151  998-738-1095  560-199-7724  622-459-7726
ex(8):  307-361-4786  499-266-6879  216-795-7527  201-419-1287  564-771-9600
---------------- Examples from DFA ---------------
s1:  512-926-7350

         

         #A: G. Andrew Duthie
         #D: Domain names:
This regular expression tests the validity of a domain or hostname. It will match any valid domain name that does not contain characters which are invalid in URLs, and which ends in .com, .org, .net, .mil, or .edu. You can add additional valid TLDs by appending the | (pipe) character and the desired TLD to the list in the parens.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=25
expr 13: ^[a-zA-Z0-9\-\.]+\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$
tree:   (([.0-9A-Za-z-]+.)(((co)m)|((or)g)|((ne)t)|((mi)l)|((ed)u)|((CO)M)|((OR)G)|((NE)T)|((MI)L)|((ED)U)))
augmnt: ((([.0-9A-Za-z-]+.)(((co)m)|((or)g)|((ne)t)|((mi)l)|((ed)u)|((CO)M)|((OR)G)|((NE)T)|((MI)L)|((ED)U)))#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  c.mil  F.MIL  8.net  U.COM  n.net  x.COM  Z.edu  G.NET  N.MIL  K.edu
ex(1):  L.mil  s.EDU  u.net  S.net  e.MIL  a.EDU  f.ORG  m.EDU  A.mil  5.mil
ex(2):  LQ.edu  5f.NET  F.com  g.ORG  XB.net  z.mil  7J.net  8.COM  k.com
ex(3):  you.net  w.ORG  td.com  3.mil  sT.mil  aFI.edu  z.EDU  J.mil  F.mil
ex(5):  I8.net  pH.org  2C.MIL  ZshX.ORG  bg003.MIL  zdRD5.EDU  ERp.COM
ex(8):  8nYg.mil  ANSk.COM  F3i6D.org  e.EDU  D2F2iK8-.NET  4Vyl.aY.net
---------------- Examples from DFA ---------------
s1:  X.COM

         

         #A: Andy Smith
         #D: Email validator that adheres directly to the specification for email address naming. It allows for everything from ipaddress and country-code domains, to very rare characters in the username.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=26
expr 14: ^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$
tree:   (((([.0-9A-Z_a-z-]+@)((((((([[0-9]{1,3}).)[0-9]{1,3}).)[0-9]{1,3}).)|([0-9A-Za-z-]+.)+))([A-Za-z]{2,4}|[0-9]{1,3}))]?)
augmnt: ((((([.0-9A-Z_a-z-]+@)((((((([(([0-9][0-9]?)[0-9]?)).)(([0-9][0-9]?)[0-9]?)).)(([0-9][0-9]?)[0-9]?)).)|([0-9A-Za-z-]+.)+))(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)|(([0-9][0-9]?)[0-9]?)))]?)#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  c@y.JD  Q@[9.2.1.YB  9@[6.0.2.ZB  Z@[4.8.7.MF  k@[9.7.6.XQ  g@L.6
ex(1):  f@[0.8.01.19  o@[994.38.750.ZR  T@[471.041.08.20  5@o.62
ex(2):  X@[62.83.82.00  e@[90.043.33.34  F@[04.90.2.61]  1J@[7.66.9.SlqH
ex(3):  g00@[2.537.66.gKf]  9@D.MFN  DUM@S.JY.t.dhX  rdt@[719.0.64.qWUL
ex(5):  kw8h@[83.23.024.vA  Z95@NA-V.2onf.EDHH.Q.Y.GZ]  6i@[64.3.9.30
ex(8):  1fB0G4VF@[40.3.441.75  6Eg@[40.775.817.16]
---------------- Examples from DFA ---------------
s1:  E@q.8
s12:  E@q.8]
s14:  E@q.84
s13:  E@q.yY
s24:  E@q.845
s25:  E@q.yYe
s21:  E@[5.5.2.8
s22:  E@[5.5.2.PB
s27:  E@[5.5.2.88
s28:  E@[5.5.2.PBp
s23:  E@[5.5.2.882

         

         #A: Steven Smith
         #D: US Phone Number -- doesn't check to see if first digit is legal (not a 0 or 1).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=27
expr 15: ((\(\d{3}\) ?)|(\d{3}-))?\d{3}-\d{4}
tree:   (((((((([0-9]{3}))) ?)|([0-9]{3}-))?[0-9]{3})-)[0-9]{4})
augmnt: ((((((((((([0-9][0-9])[0-9])))) ?)|((([0-9][0-9])[0-9])-))?(([0-9][0-9])[0-9]))-)((([0-9][0-9])[0-9])[0-9]))#)
length: 8 to 14
-------------------- Examples --------------------
ex(0):  443-5677  888-9826  100-5860  162-1278  548-0094  746-9780  270-4290
ex(1):  390-1364  (943)821-3262  620-8890  119-1099  422-8939  (378)735-0769
ex(2):  714-0780  (084)103-6852  628-9327  814-091-6885  380-2098  865-4185
ex(3):  799-8007  338-9367  634-856-4074  599-4320  536-1898  (743)046-6059
ex(5):  (151) 673-9109  602-994-7248  284-9377  696-4232  055-073-6174
ex(8):  (795) 276-1941  (287)467-1796  066-7427  047-1124  (073)359-4625
---------------- Examples from DFA ---------------
s1:  944-3230

         

         #A: Steven Smith
         #D: Yet another simple email validator expression.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=28
expr 16: [\w-]+@([\w-]+\.)+[\w-]+
tree:   ((([0-9A-Z_a-z-]+@)([0-9A-Z_a-z-]+.)+)[0-9A-Z_a-z-]+)
augmnt: (((([0-9A-Z_a-z-]+@)([0-9A-Z_a-z-]+.)+)[0-9A-Z_a-z-]+)#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  c@w.O  F@Q.Q  b@K.-  n@U.V  9@3.c  7@X.x  e@C.4  Z@3.9  3@e.u  o@k.-
ex(1):  e@V.S  g@4.Q  d@1.5  f@u.Y  e@S.i  u@e.1  m@H._  d@8.v  r@o.m  o@l.l
ex(2):  5@M9.5Q.LQ  G@Kw.d.U  F@o8.Q  I@XB.i  1@78.7J.F  a8@n.k.X  O@aM.P
ex(3):  6It@CE.3  T@rT.QJy  aFI@pc.XFZ  KJB@fu.aJt.D-.-  uI8@w.pHm.EyT.bLi
ex(5):  bg003@D_z.D5Ib.jERpS.8.9Af  D7Q58@MD.tXAN.-Y.t
ex(8):  l@6.ueq  xb@A.VM.k.hYnpUr.dGKN.e5
---------------- Examples from DFA ---------------
s1:  7@3.W

         

         #A: Steven Smith
         #D: Major credit card validator.  Only checks that the format is 16 digits (optionally separated by hyphens), not the value of any of the digits.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=29
expr 17: \d{4}-?\d{4}-?\d{4}-?\d{4}
tree:   (((((([0-9]{4}-?)[0-9]{4})-?)[0-9]{4})-?)[0-9]{4})
augmnt: (((((((((([0-9][0-9])[0-9])[0-9])-?)((([0-9][0-9])[0-9])[0-9]))-?)((([0-9][0-9])[0-9])[0-9]))-?)((([0-9][0-9])[0-9])[0-9]))#)
length: 16 to 19
-------------------- Examples --------------------
ex(0):  4436567788879826  1004586016201278  5483009474689780  2708429074640778
ex(1):  4821326262088900  1199-99642689-9403  7888-570797025560
ex(2):  8464-3768-4628-3279  981409108852-0220  9828524153083209
ex(3):  3383-67533488-4407  4659-43205363-9838  1743-046505920069
ex(5):  51601994-24828459  3772964432195510  7336-478699926368
ex(8):  198187966771-6006  66747604-1124-6073  5035-462537988009
---------------- Examples from DFA ---------------
s1:  3214687342979334

         

         #A: Steven Smith
         #D: Password matching expression.  Password must be at least 4 characters, no more than 8 characters, and must include at least one upper case letter, one lower case letter, and one numeric digit.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=31
ERROR:   ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$
    rx: '(?...' unimplemented: in "^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{4,8}$"

         

         #A: G. Andrew Duthie
         #D: RegExp for validating the format of IP Addresses. This works great with the ASP.NET RegularExpressionValidator server control.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=32
expr 18: ^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$
tree:   (((((((((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[0-9]))
augmnt: ((((((((((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[1-9]).)(((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[0-9]))#)
length: 7 to 15
-------------------- Examples --------------------
ex(0):  1.9.238.182  200.0.254.228  251.6.218.002  084.224.077.3  3.214.3.3
ex(1):  5.249.254.068  4.60.18.157  253.025.255.1  034.200.1.108  6.237.6.6
ex(2):  235.0.009.065  018.28.80.15  252.87.28.253  13.225.252.250
ex(3):  9.9.8.94  210.0.069.250  151.217.7.255  221.0.74.084  255.254.250.0
ex(5):  6.168.216.152  127.254.0.079  217.0.250.242  004.1.9.007  20.92.056.186
ex(8):  9.67.43.210  23.251.250.93  75.255.90.211  39.161.251.214  16.216.0.252
---------------- Examples from DFA ---------------
s1:  1.0.0.0
s10:  1.0.0.1
s19:  1.0.0.2
s27:  1.0.0.9
s18:  1.0.0.25
s26:  1.0.0.26

         

         #A: Steven Smith
         #D: This expression uses a BackReference to find occurrences of the same word twice in a row (separated by a space).
Matches things like 'mandate dated', which may not be desirable.  See Sean Carley's update for a better expression for true repeated word matching.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=33
ERROR:   (\w+)\s+\1
    rx: \1 (backref) unimplemented: in "(\w+)\s+\1"

         

         #A: Samuel Mota
         #D: Match diferent styles for brazilian Phone number code.
Only DDD (12), complete DDD (012), complete DDD + Telephony Company (0xx12) plus 3 or 4 digits (city code) plus 4 digits (phone number).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=34
expr 19: \(([0-9]{2}|0{1}((x|[0-9]){2}[0-9]{2}))\)\s*[0-9]{3,4}[- ]*[0-9]{4}
tree:   (((((((([0-9]{2}|(0((x|[0-9]){2}[0-9]{2}))))))[\t-\r ]*)[0-9]{3,4})[ -]*)[0-9]{4})
augmnt: (((((((((([0-9][0-9])|(0(((x|[0-9])(x|[0-9]))([0-9][0-9])))))))[\t-\r ]*)((([0-9][0-9])[0-9])[0-9]?))[ -]*)((([0-9][0-9])[0-9])[0-9]))#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  (36)6778887  (26)0045860  (20)2785483  (94)4689780  (0xx07)6407784
ex(1):  (02x06)88801199  (99)226-9403  (88) 707-2255  (49) 703-0078
ex(2):  (0x981) 910- 3802  (98)  241- 8320  (00x82) 9900743  (39) 5364  4407
ex(3):  (07x46)  9266990  (0x119)73819516  (19)  248 -9377  (96)23295510
ex(5):  (17) 75261941  (12) 6467 -  -2760  (01x92)735- -5637  (68)  484 -4335
ex(8):  (06783)        1888- ---  -6966  (0xx78)     800 -  ----6141
---------------- Examples from DFA ---------------
s1:  (03)3851373
s13:  (03)38513734

         

         #A: Eric Lebetsamer
         #D: Email validation.  With this short expression you can validate for proper email format.  It's short and accurate.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=35
ERROR:   ^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$
    rx: invalid range: in "^\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$"

         

         #A: Chris Craft
         #D: Tests for valid HTML hexadecimal color codes. The # symbol is optional. And it will except either the 3 digit form for the 216 Web safe colors, or the full 6 digit form. I am use it on my site to allow users to customize the site's colors.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=36
expr 20: ^#?([a-f]|[A-F]|[0-9]){3}(([a-f]|[A-F]|[0-9]){3})?$
tree:   ((#?([a-f]|[A-F]|[0-9]){3})([a-f]|[A-F]|[0-9]){3}?)
augmnt: (((#?((([a-f]|[A-F]|[0-9])([a-f]|[A-F]|[0-9]))([a-f]|[A-F]|[0-9])))((([a-f]|[A-F]|[0-9])([a-f]|[A-F]|[0-9]))([a-f]|[A-F]|[0-9]))?)#)
length: 3 to 7
-------------------- Examples --------------------
ex(0):  aE6  Faf  8a0  A80  6AE  c43  04A  cBa  d8e  Ac4  fcF  C1a  7FE  da1
ex(1):  0Ed  B90eCE  dd0a8d  #bd0  ba9bCa  #0BAfEc  Ab8427  #fDF  deC  #82026e
ex(2):  #9aC  2e9Eaa  #dBD648  #aBaB42  dcD  #e7Bca6  960  #D6D1A7  #dFF
ex(3):  9Fa  #A3b5Fd  #ba8  F2CC91  B5BBaf  Ff866F  #6aa  #fCf  #Ca0bDf  CB3a80
ex(5):  AacCCD  e78af3  #7bffa0  E94Baa  #cc6  E6F  #75078A  4fB  a5B  #4dc1aa
ex(8):  A1D3a7  #DB3  bfBD7F  #FbA  #cF2  #eEE  #8e895B  cdbc5b  9aBaF5  9f8dEC
---------------- Examples from DFA ---------------
s1:  95f
s5:  95ff0c

         

         #A: Justin Saunders
         #D: Regular Expression matches any internet URLs. Used with the replace method it comes in very handy.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=37
expr 21: ((mailto\:|(news|(ht|f)tp(s?))\://){1}\S+)
tree:   ((((((((ma)i)l)t)o):)|(((((((ne)w)s)|(((((ht)|f)t)p)s?)):)/)/))[\x01-\b\x0e-\x1f!-\u007f]+)
augmnt: (((((((((ma)i)l)t)o):)|(((((((ne)w)s)|(((((ht)|f)t)p)s?)):)/)/))[\x01-\b\x0e-\x1f!-\u007f]+)#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  mailto:-  mailto:}  mailto:e  mailto:n  mailto:V  news://r  mailto:5
ex(1):  news://'  news://!  mailto:,  http://,  ftps://8  http://:  mailto:C
ex(2):  news://\\  news://ZJ  mailto:p  news://1  mailto:U  news://V  news://*
ex(3):  mailto:Ni  mailto:Ku  news://b  mailto:q  mailto:E  mailto:><
ex(5):  mailto:=iE  mailto:yx#  mailto:Z  news://e?Y  ftps://FYd  ftp://(q
ex(8):  mailto:te]Y2g<  news://#T:L  mailto:eI3A#tJ5  mailto:d  https://Q8l%s5f
---------------- Examples from DFA ---------------
s1:  ftp://~

         

         #A: Dave Sparks
         #D: Matches UK postcodes according to the following rules
1. LN NLL     eg N1 1AA
2. LLN NLL    eg SW4 0QL
3. LNN NLL    eg M23 4PJ
4. LLNN NLL  eg WS14 0JT
5. LLNL NLL   eg SW1N 4TB
6. LNL NLL     eg W1C 8LQ
Thanks to Simon Bell for informing me of LNL NLL rule for postcodes which I had omitted in an earlier version.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=38
expr 22: ^[a-zA-Z]{1,2}[0-9][0-9A-Za-z]{0,1} {0,1}[0-9][A-Za-z]{2}$
tree:   ((((([A-Za-z]{1,2}[0-9])[0-9A-Za-z]?) ?)[0-9])[A-Za-z]{2})
augmnt: ((((((([A-Za-z][A-Za-z]?)[0-9])[0-9A-Za-z]?) ?)[0-9])([A-Za-z][A-Za-z]))#)
length: 5 to 8
-------------------- Examples --------------------
ex(0):  m43Kb  y77GS  K79UN  d00YB  E60jD  w12dC  Z83Cu  F47cy  U97Ay  M70uy
ex(1):  K0x4PP  oZ37yT  b3u2JW  T66sQ  S8v1Vb  rm9O2GM  KH9B 8Kg  BM0c 0ia
ex(2):  Oe7k0ZU  eS94il  SP6 4sm  zJ2a 1Qa  iT08lQ  T00tG  O6d1Ql  Q8U9sl
ex(3):  Nu87Gr  d3M 3Qj  o8f0Hs  Ya0 0iB  j3s3UO  wv86Kg  lH09Nq  LG2q 9kx
ex(5):  Hx4K4eu  c4R 7sg  N43MK  ef1 3cp  P76Fn  N6 8fJ  Us1M 7fU  P07 8TU
ex(8):  ZU06UR  u74lU  ZK4K0Jp  T3I6Yl  gx98WG  vL47Zm  W3R 1cx  V67US  Iz9 4Cp
---------------- Examples from DFA ---------------
s1:  L32hY

         

         #A: Gregory Beamer
         #D: Much simpler email expression. This one forces a length of 2 or 3, which fits current specs, but you may need to alter the end as this one allows all numerals on the .COM section.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=39
expr 23: ^[\w\.=-]+@[\w\.-]+\.[\w]{2,3}$
tree:   (((([.0-9=A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)[0-9A-Z_a-z]{2,3})
augmnt: ((((([.0-9=A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)(([0-9A-Z_a-z][0-9A-Z_a-z])[0-9A-Z_a-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  c@..qV  z@-._k  K@-.bI  c@9.NJ  c@E.Ui  e@C.A9  3@9.eC  4@u.Kb  I@1.0K
ex(1):  g@4.03  A@s.pRY  o@e._J  u@e.wov  _@h.Ylu  s@_.1Q3  x@A.3i  _@C.Ud
ex(2):  2@Kw.udk  =@E.Zk  Q@L.o7  b@G.8nV  8@7J.dGv  w@lw.nA  qO@x.kO  yo@O5.2v
ex(3):  EQ@l.QoM  z@J.VLf  P@z.45  KJB@quF.ByP  .D@W-D.XSP  w@pHm.hr  2@Lie.Ly6
ex(5):  WY7@_zdR.xL1  jERpS@8.Ze6  fV@58._m  UMtX@Sk.gdF  3i6@FtEDr.g6n
ex(8):  nfuVyl.@6.JNo  s0xb@AAwXV.QJ  w8hY=ap@r3ndGK.fo  sqaTZ9@u2..uHe
---------------- Examples from DFA ---------------
s1:  X@Y.2B
s7:  X@Y.2B6

         

         #A: Chris Craft
         #D: If you need to extract or remove any /* */ sytle comments from any Java, JavaScript, C, C++, CSS, etc code you have this regular expression can help.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=40
ERROR:   /\*[\d\D]*?\*/
    rx: prefer-fewer '?' unimplemented: in "/\*[\d\D]*?\*/"

         

         #A: Bob Levittan
         #D: Validates a dollar amount including a dollar sign and 2 decmals. The decimal and cents are optional.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=41
expr 24: ^\$[0-9]+(\.[0-9][0-9])?$
tree:   (($[0-9]+)((.[0-9])[0-9])?)
augmnt: ((($[0-9]+)((.[0-9])[0-9])?)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  $4  $6  $6  $7  $8  $7  $8  $6  $0  $4  $8  $0  $6  $0  $2  $8  $4  $3
ex(1):  $4.68  $7  $2.84  $9  $4  $0.84  $9  $1.47  $3.33  $8  $2.62  $6  $8
ex(2):  $19.09  $4  $8.99  $3.88  $57  $9.22  $60  $91.34  $40  $0.90  $6
ex(3):  $6  $932.98  $2  $0  $5  $022  $286.41  $308  $09.50  $827  $90  $7
ex(5):  $3  $88564  $465.04  $005.31  $83817  $804  $05.60  $99  $62.11
ex(8):  $6021.47  $482  $5.77  $9644232.05  $07.61  $7866999  $368.21
---------------- Examples from DFA ---------------
s1:  $1
s4:  $1.41

         

         #A: Chris Craft
         #D: "Be careful when opening or creating files by using Scripting File System Object. If the filename is based on the user's input, the user might attempt to open a serial port or printer."
         #U: http://regexlib.com/REDetails.aspx?regexp_id=43
expr 25: (AUX|PRN|NUL|COM\d|LPT\d)+\s*$
tree:   ((((AU)X)|((PR)N)|((NU)L)|(((CO)M)[0-9])|(((LP)T)[0-9]))+[\t-\r ]*)
augmnt: (((((AU)X)|((PR)N)|((NU)L)|(((CO)M)[0-9])|(((LP)T)[0-9]))+[\t-\r ]*)#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  LPT5  PRN  COM8  NUL  AUX  PRN  NUL  NUL  COM9  LPT8  LPT2  NUL  NUL
ex(1):  NUL   LPT4   COM3  COM3  PRN  AUX   AUX   AUX  NUL   LPT3   COM5   NUL
ex(2):  LPT1   LPT0AUX    COM1  NULNUL    NULCOM0  AUXAUX    LPT6  LPT3   COM3
ex(3):  COM4COM9     PRNCOM4AUX     COM5COM8LPT1     AUX    NULPRNPRN   
ex(5):  LPT7NUL      NULLPT2COM0AUX     NULPRN       NULPRNAUXNUL   
ex(8):  PRNAUXLPT0NUL  LPT2AUXLPT0AUX         COM7  LPT4PRN        COM3        
---------------- Examples from DFA ---------------
s1:  NUL
s6:  NUL 

         

         #A: Michael Scovetta
         #D: This re was used for a security routine. The format is:
[user=name1,name2,...,nameN;][group=group1,group2,...,groupN;][level=number;]
Each component is optional, but they must appear the in order listed if applicable.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=44
expr 26: ^(user=([a-z0-9]+,)*(([a-z0-9]+){1});)?(group=([a-z0-9]+,)*(([a-z0-9]+){1});)?(level=[0-9]+;)?$
tree:   (((((((((us)e)r)=)([0-9a-z]+,)*)[0-9a-z]+);)?((((((((gr)o)u)p)=)([0-9a-z]+,)*)[0-9a-z]+);)?)(((((((le)v)e)l)=)[0-9]+);)?)
augmnt: ((((((((((us)e)r)=)([0-9a-z]+,)*)[0-9a-z]+);)?((((((((gr)o)u)p)=)([0-9a-z]+,)*)[0-9a-z]+);)?)(((((((le)v)e)l)=)[0-9]+);)?)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  level=8;  user=4;  group=9;level=6;  user=k;group=x,q;  user=t;level=3;
ex(2):      user=l9,a,1;group=e;level=70;  group=04;level=29;    group=w,n,ba;
ex(3):  group=h5;  user=xtn,v9;  group=m5,rh,g,c;level=5;  group=2rq,5;
ex(5):    user=ly,mx;group=pf,6yd7d,7;  group=sg6s,7k,l;
ex(8):    user=41,4a,td394ks,3,3;group=f2lxgw,8,k,q6r5w,9bs,7,qgkv0voy;    
---------------- Examples from DFA ---------------
s0:  
s18:  user=1;
s19:  group=c;
s20:  level=8;

         

         #A: Laurence O'Donnell
         #D: This RegEx requires a US phone number WITH area code. It is written to all users to enter whatever delimiters they want or no delimiters at all (i.e. 111-222-3333, or 111.222.3333, or (111) 222-3333, or 1112223333, etc...).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=45
expr 27: ^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$
tree:   (((((([\x01-/:-\u007f]?[0-9]{3})[\x01-/:-\u007f]?)[\x01-/:-\u007f]?)[0-9]{3})[\x01-/:-\u007f]?)[0-9]{4})
augmnt: ((((((([\x01-/:-\u007f]?(([0-9][0-9])[0-9]))[\x01-/:-\u007f]?)[\x01-/:-\u007f]?)(([0-9][0-9])[0-9]))[\x01-/:-\u007f]?)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 14
-------------------- Examples --------------------
ex(0):  4436567788  8798261004  5860162012  7854830094  7468978027  0842907464
ex(1):  :478B3342123  6200889001  V910t4228939  G037873^0769  ^255497N7034
ex(2):  \\376@4627932  L9810916885  3800988652  185R8329305  668a7998007
ex(3):  ]440.5994320  536S9831743  /4655920069  >116W1196738  I095I219`7724
ex(5):  232o5517336  Y4789996636  792X|952f2760  ~419w8794677  Y9606672760
ex(8):  *924563.8680  994827'2433  M721m1468734  297U(443A3657  381A*2601889
---------------- Examples from DFA ---------------
s1:  6966965478

         

         #A: Laurence O'Donnell
         #D: This pattern allows standard e-mail addresses (e.g. user@domain.com), sub domains (e.g. user@foo.domain.com), the new two- and four-letter domains (e.g. user@domain.tv and user@domain.name) and country codes (e.g. user@foo.com.us). Also, this patter follows the Network Solutions standard length of 67 characters for top-level domains. The reason I allow numbers to be entered in the domain suffix is for future planning. If you do not want numbers to be able to be added as a domain suffix (e.g. user@domain.123), simply delete the last two occurrences of "\d".
         #U: http://regexlib.com/REDetails.aspx?regexp_id=46
expr 28: ^([\w\d\-\.]+)@{1}(([\w\d\-]{1,67})|([\w\d\-]+\.[\w\d\-]{1,67}))\.(([a-zA-Z\d]{2,4})(\.[a-zA-Z\d]{2})?)$
tree:   (((([.0-9A-Z_a-z-]+@)([0-9A-Z_a-z-]{1,67}|(([0-9A-Z_a-z-]+.)[0-9A-Z_a-z-]{1,67}))).)([0-9A-Za-z]{2,4}(.[0-9A-Za-z]{2})?))
augmnt: ((((([.0-9A-Z_a-z-]+@)((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([0-9A-Z_a-z-][0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)|(([0-9A-Z_a-z-]+.)(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([0-9A-Z_a-z-][0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)[0-9A-Z_a-z-]?)))).)(((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z]?)[0-9A-Za-z]?)(.([0-9A-Za-z][0-9A-Za-z]))?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  c@y.O.2o  -@8.K.lI  c@5.JT  7@C.e.pe  4@V.Uu  3@4.u.Kb  I@F.KI
ex(1):  Q@As567SUd8vsllH6MWJLRKiLroyoX.Iw.VZ
ex(2):  VS@sHD2biLsXTu0dDum9pXQ9f78YUXS-yg3Dtrt.6shk
ex(3):  G6@GQC8hYt50R_des1BGVB1nJvxHEmktZqbFJLiR.NJk
ex(5):  ZGuhw@Tp8lTr_7A184H3FykZLs2cy8luIcIW77Q.Wsc0
ex(8):  Ohe@t0o_-5.0RYg6ZxvsYHvLYSzPiMEbeAvF0at3.wSG
---------------- Examples from DFA ---------------
s1:  d@a.Kt
s10:  d@a.KtZ
s9:  d@a.KtZ6
s8:  d@a.K.fb
s82:  d@a.K.fbo
s81:  d@a.K.fboc
s151:  d@a.K.fb.94

         

         #A: Steven Smith
         #D: Credit card validator.  Just checks that the format is either 16 numbers in groups of four separated by a "-" or a " " or nothing at all.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=48
expr 29: ^(\d{4}[- ]){3}\d{4}|\d{16}$
tree:   ((([0-9]{4}[ -]){3}[0-9]{4})|[0-9]{16})
augmnt: ((((((((([0-9][0-9])[0-9])[0-9])[ -])(((([0-9][0-9])[0-9])[0-9])[ -]))(((([0-9][0-9])[0-9])[0-9])[ -]))((([0-9][0-9])[0-9])[0-9]))|((((((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 16 to 19
-------------------- Examples --------------------
ex(0):  4365-7888-9826-0458  0162-2785-3009 7468  7802708429074640
ex(1):  3482123262062088  9001-9109-4226 3994  3788-3570-9702-5604
ex(2):  9084-1037 5246-7932  9981420910688523  0220-2865-1853 8320
ex(3):  7433-9367-6348 6440  4659904320053631  9838 4378 6560-9260
ex(5):  5160219947724822  4593 2696 4232-0551  7336-4786-9926 6879
ex(8):  9646771796006667  2760-0112-2607-0359  4625-7986 0994 4827
---------------- Examples from DFA ---------------
s1:  0873499343358893

         

         #A: Steven Smith
         #D: Matches major credit cards including:
Visa (length 16, prefix 4), Mastercard (length 16, prefix 51-55), Discover (length 16, prefix 6011), American Express (length 15, prefix 34 or 37).  All 16 digit formats accept optional hyphens (-) between each group of four digits. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=49
expr 30: ^((4\d{3})|(5[1-5]\d{2})|(6011))-?\d{4}-?\d{4}-?\d{4}|3[4,7]\d{13}$
tree:   (((((((((4[0-9]{3})|((5[1-5])[0-9]{2})|(((60)1)1))-?)[0-9]{4})-?)[0-9]{4})-?)[0-9]{4})|((3[,47])[0-9]{13}))
augmnt: ((((((((((4(([0-9][0-9])[0-9]))|((5[1-5])([0-9][0-9]))|(((60)1)1))-?)((([0-9][0-9])[0-9])[0-9]))-?)((([0-9][0-9])[0-9])[0-9]))-?)((([0-9][0-9])[0-9])[0-9]))|((3[,47])(((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])))#)
length: 15 to 19
-------------------- Examples --------------------
ex(0):  4656778887982610  4860162012785483  5574689780270842  376407784390913
ex(1):  60119001-9109-4226  4994378873577697  45564979-0347-0078
ex(2):  3,7998142091068  4380209886521853  4320-05068270-9080
ex(3):  49903200-6318-3817  54045605-6006-0116  41196738-09510219
ex(5):  6011-1905-07331747  4999663679211795  53761941-1287-4677
ex(8):  42496073-35926256  3,6800994848273  43357214-14607342
---------------- Examples from DFA ---------------
s1:  349332644696936

         

         #A: Steven Smith
         #D: Matches any string between 4 and 8 characters in length.  Limits the length of a string.  Useful to add to password regular expressions.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=50
expr 31: ^.{4,8}$
tree:   [\x01-\u007f]{4,8}
augmnt: (((((((([\x01-\u007f][\x01-\u007f])[\x01-\u007f])[\x01-\u007f])[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)#)
length: 4 to 8
-------------------- Examples --------------------
ex(0):  ~$(I  9S;w  #Fxc  [s1+  X4H=  R2D%  DIJz  !Tmd  f.i-  MW`)  6GNi  )r7M
ex(1):  VELf  O`{y  4cm}  ~7[C  [IZ:  [TPA  B8Pn  [21g  Ts6X  OHg6  pP}U  $pWD
ex(2):  M`tl  V,ml  P=}~  VGu_  ;2ZA  '2>^  u1qy  h4Jw  Ma{   ~o|e  N\"\\(
ex(3):  //;P  /2@G  uK=g  .{\\i  ;](\\  @`+h  U1=Z  m1Lt  xqoO  kylW  Dn_H
ex(5):  '>td  FX\\6  ]Au<  i-#c  $Uz>  +b7m  a'~e\\  W/;t  P_xB7  wkZ{  Gx2f]
ex(8):  C)j\\B  1p/*U?x  -y(xZ  ^[d\"7  ~5>S  9G6]  M+L8  g{IJ  W??jd  ;(sQI
---------------- Examples from DFA ---------------
s1:  C|X.
s8:  C|X.~
s7:  C|X.~`
s6:  C|X.~`T
s5:  C|X.~`Th

         

         #A: Steven Smith
         #D: Accepts an unsigned integer number.  Also matches empty strings.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=51
expr 32: ^\d*$
tree:   [0-9]*
augmnt: ([0-9]*#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      6  6  7        9        0      8      6      2  8  4    0    4  4  
ex(2):  7          84  9      64    78  3  0  13    78  94          12    62  
ex(3):      90  11  9  0  964  26    399      7    87  5  0  6  702    560  97
ex(5):  471  00  8    29084  41    768  24628  93279  814  0910  8852  80220  8
ex(8):  18  30883209  050  6  27  7990800  433839  6753634  85644  7465  9043
---------------- Examples from DFA ---------------
s0:  

         

         #A: Steven Smith
         #U: http://regexlib.com/REDetails.aspx?regexp_id=52
expr 33: ^[-+]?\d*$
tree:   ([+-]?[0-9]*)
augmnt: (([+-]?[0-9]*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    +  -    -    -  8    +  2  -4  0  4  +  7    0    0  -    +  9  1  +
ex(2):  +  12  -20  08    +1  -09  -26    +  37  87  +0  +  -    +  79  +  1  0
ex(3):    41  7  52    79  +998  +  1  88  -802  98    2  8  +88  +305    27
ex(5):    433  936  -63488  +  4  99043  0536  +  -817  7  46  +5926  6990  -
ex(8):  +73  109516  199477  822  59  -269  4  2190551  336174  +  -26
---------------- Examples from DFA ---------------
s0:  
s1:  2

         

         #A: Steven Smith
         #D: Matches any unsigned floating point number/numeric string.  Also matches empty strings.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=53
expr 34: ^\d*\.?\d*$
tree:   (([0-9]*.?)[0-9]*)
augmnt: ((([0-9]*.?)[0-9]*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  6  6.  9    0  8  6  2.4  .  4.  .  0    0.  7  9  .6  .9  .  2  2    
ex(2):  1.09  2  6  .03  87  .  6.22  .  97.0  1  00.  294  41  624  28.27  942
ex(3):  238  22828  528  3  .  305  82.990  74  383.75  63456    465.43  53
ex(5):  74378  .5926  06.1162  511.73  9109.02  99477  2259  7.9644  32.55
ex(8):  86699.6  68792161.2752760  941.28796467  179600664276  4701192607350
---------------- Examples from DFA ---------------
s0:  
s1:  .

         

         #A: Steven Smith
         #D: Matches any floating point numer/numeric string, including optional sign character (+ or -).  Also matches empty strings.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=54
expr 35: ^[-+]?\d*\.?\d*$
tree:   ((([+-]?[0-9]*).?)[0-9]*)
augmnt: (((([+-]?[0-9]*).?)[0-9]*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  .6  -  -  -8  .  2.4  04  +7  0  0  -  +9  1.  +4.  .2      01  -0.  
ex(2):  .87  +0.  -  +79  +1  0.  +0841  .5  8  +.  42  -8580  098  18  +8  930
ex(3):  74  +39.536  +56  465.43  363  +838.  -04605  -  9162  -1983  1516
ex(5):  2845.72696  2  +51073.7  86699.6368  +617.7527  .1981  7967  -9  74
ex(8):  3.  -462563.  00.84827  +3352143214  87349798334  3336578393902606
---------------- Examples from DFA ---------------
s0:  
s1:  9
s2:  .

         

         #A: James Bray
         #D: GUID Tester. It tests SQL Server GUIDs, which are alphanumeric characters grouped 8-4-4-4-12 (with the dashes). Make sure they don't have the brackets around them before you check them and have fun!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=55
expr 36: ^[A-Z0-9]{8}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{12}$
tree:   (((((((([0-9A-Z]{8}-)[0-9A-Z]{4})-)[0-9A-Z]{4})-)[0-9A-Z]{4})-)[0-9A-Z]{12})
augmnt: (((((((((((((((([0-9A-Z][0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])-)((([0-9A-Z][0-9A-Z])[0-9A-Z])[0-9A-Z]))-)((([0-9A-Z][0-9A-Z])[0-9A-Z])[0-9A-Z]))-)((([0-9A-Z][0-9A-Z])[0-9A-Z])[0-9A-Z]))-)((((((((((([0-9A-Z][0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z])[0-9A-Z]))#)
length: 36 to 36
-------------------- Examples --------------------
ex(0):  PXSQ89JC-J14I-BCV5-D8UK-04SJKTHXVTNJ
ex(1):  R9GIIRDQ-8JMI-FGTZ-R69Z-7KJGCZD0K9FX
ex(2):  VWST7SHY-14R6-469X-T3FF-2JWS2RLRODBF
ex(3):  MHD68LNA-8WCC-RQLS-6PVP-BXVVIBHGLXKX
ex(5):  2BTIJMAV-B2PE-JBKJ-6GJ3-0IA6RQLN4BEP
ex(8):  I4IWI7NP-6E4B-L6AC-JVHK-VXYZV1TNGVGF
---------------- Examples from DFA ---------------
s1:  CRBKVKIM-JKKZ-QACN-KZ29-BKH9XFCA8JPW

         

         #A: Prasad DV
         #D: Validates an email address
         #U: http://regexlib.com/REDetails.aspx?regexp_id=56
ERROR:   (\w+?@\w+?\x2E.+)
    rx: prefer-fewer '?' unimplemented: in "(\w+?@\w+?\x2E.+)"

         

         #A: Prasad DV
         #D: Plucks the last quote of a Stock from the MSN MoneyCentral WebQuote page for any given stock symbol. The URL of the web page where this RegEx should be applied is:
http://localhost/asp/webquote.htm?ipage=qd&Symbol=,give the stock symbol here> You must also use the singleline option.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=57
ERROR:   Last.*?(\d+.?\d*)
    rx: prefer-fewer '?' unimplemented: in "Last.*?(\d+.?\d*)"

         

         #A: Igor Kravtsov
         #D: Matches US phone number format. 1 in the beginning is optional, area code is required, spaces or dashes can be used as optional divider between number groups. Also alphanumeric format is allowed after area code.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=58
expr 37: ^([0-9]( |-)?)?(\(?[0-9]{3}\)?|[0-9]{3})( |-)?([0-9]{3}( |-)?[0-9]{4}|[a-zA-Z0-9]{7})$
tree:   (((([0-9]( |-)?)?((((?[0-9]{3}))?)|[0-9]{3}))( |-)?)((([0-9]{3}( |-)?)[0-9]{4})|[0-9A-Za-z]{7}))
augmnt: ((((([0-9]( |-)?)?((((?(([0-9][0-9])[0-9])))?)|(([0-9][0-9])[0-9])))( |-)?)((((([0-9][0-9])[0-9])( |-)?)((([0-9][0-9])[0-9])[0-9]))|(((((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])))#)
length: 10 to 16
-------------------- Examples --------------------
ex(0):  436V2o3BOz  1005860162  1275483009  7469780270  4297464077  4399136478
ex(1):  888)OyYl9uO  689) i3eGxPU  6972550497  1 (400)Zke9Yaz  7(462-7991420
ex(2):  (530UDmNvDO  707)0073383  3536 5640746  9 200-EseBy0R  7656-006-1162
ex(3):  7228-xLM1CHA  2-510-174 6999  368)JmdMgdd  2 941 8794677  7 667OSfgTek
ex(5):  099827 4335  214 608-2297  8-(336)3wf2lxg  889361 2961  366 936 7857
ex(8):  (251) 1713913  630)4499139  4-(143 827-5385  7-076-7501982  372422-8564
---------------- Examples from DFA ---------------
s1:  5781586tbM
s12:  578xMzKKe9

         

         #A: Koen Hoorelbeke
         #D: Matches a string if it is a valid time in the format of HH:MM
         #U: http://regexlib.com/REDetails.aspx?regexp_id=59
expr 38: ^([0-1][0-9]|[2][0-3]):([0-5][0-9])$
tree:   (((([01][0-9])|(2[0-3])):)([0-5][0-9]))
augmnt: ((((([01][0-9])|(2[0-3])):)([0-5][0-9]))#)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  03:56  20:07  20:50  05:20  20:12  21:23  09:14  09:00  10:02  21:24
ex(1):  21:36  18:14  22:21  12:00  00:48  22:19  22:36  02:09  23:23  22:33
ex(2):  22:35  04:19  20:07  22:18  12:48  04:03  22:24  08:13  19:41  00:30
ex(3):  02:29  08:32  18:30  03:29  21:46  07:59  20:07  13:39  23:56  20:16
ex(5):  23:23  00:36  22:23  17:17  04:56  19:00  09:41  22:51  20:13  11:55
ex(8):  23:04  02:25  23:06  22:23  19:55  21:16  22:46  19:26  16:59  16:19
---------------- Examples from DFA ---------------
s1:  01:19

         

         #A: Mart Maasikas
         #D: US Phone number that accept a dot, a space, a dash, a forward slash, between the numbers. Will Accept a 1 or 0 in front.  Area Code not necessary
         #U: http://regexlib.com/REDetails.aspx?regexp_id=61
expr 39: ((\(\d{3}\)?)|(\d{3}))([\s-./]?)(\d{3})([\s-./]?)(\d{4})
tree:   (((((((([0-9]{3}))?)|[0-9]{3})[\t-\r -/]?)[0-9]{3})[\t-\r -/]?)[0-9]{4})
augmnt: ((((((((((([0-9][0-9])[0-9])))?)|(([0-9][0-9])[0-9]))[\t-\r -/]?)(([0-9][0-9])[0-9]))[\t-\r -/]?)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 14
-------------------- Examples --------------------
ex(0):  (3656778887  8261004586  (6201278548  0094746897  (2708429074
ex(1):  647394+4821  (2622088900  199&9962268  3990378873  7079702556
ex(2):  (2906413768  246879,7998  420+0685238  (2098654185  088.0935066
ex(3):  367'6348564  (746)*4320536  189381,3780  (560)6009901  621/1987389
ex(5):  (228#3776964  (321)/107)6174  866)9263687  216/952)2760  941(128#6467
ex(8):  604 1129260  350#9242563  986009,8482  3223357214  214087*2297
---------------- Examples from DFA ---------------
s1:  3130061898

         

         #A: Mart Maasikas
         #D: Any Expression Upper/Lower Case, with commas and space between the text, with any amount of space before or after
         #U: http://regexlib.com/REDetails.aspx?regexp_id=62
expr 40: ^\s*[a-zA-Z,\s]+\s*$
tree:   (([\t-\r ]*[\t-\r ,A-Za-z]+)[\t-\r ]*)
augmnt: ((([\t-\r ]*[\t-\r ,A-Za-z]+)[\t-\r ]*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  V  h  D  G  ,  m  v  D  F  K  e  G  T  Y  N  p  S  Z  a  p  D  l  X  j
ex(1):   s   c   s   N   p  ,   u  V   I    B   y    Q   f  I  ,  b  H    Y   A
ex(2):  kl    y    UG    T   f    s   H    z     r    B      z   q  nz  H  
ex(3):    N     Kda   yKj       x      TF     SG  PS     N      s     Qs  
ex(5):       s    tOhB         i D     uJz       R   rvA     gG         Pk     
ex(8):    u,mp         wgOll,z        HzAN           hfJGwu       FS   
---------------- Examples from DFA ---------------
s1:  H

         

         #A: Mart Maasikas
         #D: ANY alphanumeric string with spaces, commas, dashes.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=63
expr 41: ^[a-zA-Z0-9\s.\-]+$
tree:   [\t-\r .0-9A-Za-z-]+
augmnt: ([\t-\r .0-9A-Za-z-]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  V  h  .  1  4  m  v  D  F  K  e  G  T  Y  0  p  S  .  a  p  D  l  X  j
ex(1):     s  h  H  k  t  8  s  e  l  N  H  H  p  1  N     w  K  J  V  y  Y  I
ex(2):  Z9  N  zl  qH  u  m7  h  5  l  7H  Bt  P  A  2  d  kl  R  9v  w3  U7  m
ex(3):  7T  NtG  sO   H09  Rx  8t   2H  s  rB  QFY  z  7  vfP  n  Uz  YQi  05
ex(5):  DN  .  15vK  awCw  Kjvv  j  Q  Zyn  DL r  9  yEmG  4VPS1  pYolF  taYY
ex(8):  QsJG1  lpYBt  oS  78ln  i.fOKf   tOh  qFnM4JqZ  L D  z  vpuJ  J2Ya9Rb
---------------- Examples from DFA ---------------
s1:  A

         

         #A: Ryan S
         #D: This can be used in conjunction with the replace method to provide pseudo-code support without having to enable HTML. The replacement string (in ASP.NET, use RegExp.Replace(SourceString, RegularExpressionPattern, ReplacementString) is <a href="${link}">${text}</a>.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=64
ERROR:   \[link="(?<link>((.|\n)*?))"\](?<text>((.|\n)*?))\[\/link\]
    rx: '(?...' unimplemented: in "\[link="(?<link>((.|\n)*?))"\](?<text>((.|\n)*?))\[\/link\]"

         

         #A: Chris Love
         #D: This provides an expression to calidate the four major credit cards.  It can be easily broken up to use for a specific type of card.  It does not validate the number being a potential real number, only in the correct format.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=67
ERROR:   (^(4|5)\d{3}-?\d{4}-?\d{4}-?\d{4}|(4|5)\d{15})|(^(6011)-?\d{4}-?\d{4}-?\d{4}|(6011)-?\d{12})|(^((3\d{3}))-\d{6}-\d{5}|^((3\d{14})))
    rx: Embedded '^' unimplemented: in "(^(4|5)\d{3}-?\d{4}-?\d{4}-?\d{4}|(4|5)\d{15})|(^(6011)-?\d{4}-?\d{4}-?\d{4}|(6011)-?\d{12})|(^((3\d{3}))-\d{6}-\d{5}|^((3\d{14})))"

         

         #A: Scott Frampton
         #D: This regular expression matches 'Switch' card numbers - a payment method used extensively in the UK.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=68
expr 42: ^([0-9]{6}[\s\-]{1}[0-9]{12}|[0-9]{18})$
tree:   ((([0-9]{6}[\t-\r -])[0-9]{12})|[0-9]{18})
augmnt: ((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[\t-\r -])((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|((((((((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 18 to 19
-------------------- Examples --------------------
ex(0):  436567 887982610045  601620-785483009474  897802-842907464077
ex(1):  326206-888900119910  964226893994037888  357076970225560497
ex(2):  641037 524628793279  814209106885238022  982865-185308832093
ex(3):  936753634885644074  599043 053631898381  437804656059260069
ex(5):  516021994772482284  937726964423219055  073361747866999266
ex(8):  941981287964677179  006667 760470112492  073503-246256379868
---------------- Examples from DFA ---------------
s1:  432146073422979833

         

         #A: Chris Becker
         #D: Matches U.S. dates with leading zeros and without and with 2 or four digit years
         #U: http://regexlib.com/REDetails.aspx?regexp_id=69
expr 43: ^(([1-9])|(0[1-9])|(1[0-2]))\/((0[1-9])|([1-31]))\/((\d{2})|(\d{4}))$
tree:   ((((([1-9]|(0[1-9])|(1[012]))/)((0[1-9])|[123]))/)([0-9]{2}|[0-9]{4}))
augmnt: (((((([1-9]|(0[1-9])|(1[012]))/)((0[1-9])|[123]))/)(([0-9][0-9])|((([0-9][0-9])[0-9])[0-9])))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1/08/8887  10/3/58  12/08/8548  05/04/97  4/3/29  4/04/8439  11/01/9433
ex(1):  9/05/0011  12/1/22  04/1/37  6/1/0769  10/2/49  05/01/4007  06/2/64
ex(2):  11/05/14  01/06/2380  12/09/2418  11/08/3050  03/2/9080  7/1/9367
ex(3):  04/2/43  5/1/1898  2/2/8046  11/3/06  02/1/5119  3/2/0951  10/3/7248
ex(5):  04/1/0551  7/1/4786  5/3/36  11/3/9527  8/04/19  9/09/67  11/07/67
ex(8):  9/1/35  11/09/9868  12/02/73  04/1/2143  11/02/22  12/1/33  07/1/19
---------------- Examples from DFA ---------------
s1:  1/1/14
s8:  1/1/1464

         

         #A: Brian Orrell
         #D: Matches currency input with or without commas.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=70
expr 44: ^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$
tree:   (($?(((([0-9]{1,3},)([0-9]{3},)*)[0-9]{3})|[0-9]+))(([\x01-\u007f][0-9])[0-9])?)
augmnt: ((($?(((((([0-9][0-9]?)[0-9]?),)((([0-9][0-9])[0-9]),)*)(([0-9][0-9])[0-9]))|[0-9]+))(([\x01-\u007f][0-9])[0-9])?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4,656  7  8,798  6,004  8  0,620  2  8  4  3,094  4  8,780  7,842  0  4
ex(1):  9  $6  $9  $82,620  8,011B10  $4,939G03  $837,697,225{04  $1\\34
ex(2):  5,879,279x14  90,523  28,652,185,088c09  $6  79,800,433  $7Z63
ex(3):  $03,898,817  $0,059,600,990{62  $986(89  $16  94h24
ex(5):  $17  $692,368,921,179Y75  01`19  879  719,066
ex(8):  09,827,224i50  $3  $03,297,833,433,365n38  $02606188<43  6629
---------------- Examples from DFA ---------------
s1:  0
s12:  08
s11:  087
s4:  0G52
s5:  0,96
s10:  0875
s7:  0,966

         

         #A: James Burton
         #D: A regular expression to match phone numbers, allowing for an international dialing code at the start and hyphenation and spaces that are sometimes entered.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=73
expr 45: ^(\(?\+?[0-9]*\)?)?[0-9_\- \(\)]*$
tree:   (((((?+?)[0-9]*))?)?[ ()0-9_-]*)
augmnt: ((((((?+?)[0-9]*))?)?[ ()0-9_-]*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    +7  7    )  )  9  1  4)  3    7      (98    +)    +        1)6  (  -
ex(2):    (6)09    9_  (+14    +46  (243  (+-7  856(  (9    )8  )40  3    -8  
ex(3):  (+9    990(0(  2  +7375    (75  511)  (+))65  +48(   (+6    138  (+6)36
ex(5):  92161)9  +) (97  (77)3_)49  9)  260)-  (257  00)(0  71788  +4 6_0
ex(8):  (+862  613668_)2  -6_)  )6(4()7(  9_  11096)  (+3 (2  (494913)142 )372
---------------- Examples from DFA ---------------
s0:  
s1:  )
s2:  (

         

         #A: Blake Facey
         #D: Matches standard 5 digit US Zip Codes, or the US ZIP + 4 Standard.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=74
expr 46: ^\d{5}(-\d{4})?$
tree:   ([0-9]{5}(-[0-9]{4})?)
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9])(-((([0-9][0-9])[0-9])[0-9]))?)#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  77843-9136  47839  33482-3262  06208  89001-9109  96422  89399
ex(2):  73570-9702  25560  97917  34714  07803  90846  10376  52462  79327-8142
ex(3):  85238  22098  86524-5308  83209-5066  82707-0800  74338-3675  36348
ex(5):  04320  53631  98381-3780  46560-2600  69901-2151  19867-9109
ex(8):  24822  45937-6964  42321-5510  73361-7866  99926  36879  16179-7527
---------------- Examples from DFA ---------------
s1:  79646
s6:  79646-7179

         

         #A: Jon van Leuven
         #D: Regular expression to evaluate dutch-style phone numbers. Possible example prefixes: +31, +31(0), (+31)(0), 0, 0031
followed by 9 numbers (which can contain a space or -).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=75
ERROR:   (^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$)
    rx: Embedded '^' unimplemented: in "(^\+[0-9]{2}|^\+[0-9]{2}\(0\)|^\(\+[0-9]{2}\)\(0\)|^00[0-9]{2}|^0)([0-9]{9}$|[0-9\-\s]{10}$)"

         

         #A: Jon van Leuven
         #D: Regular expression to evaluate dutch zipcodes. This is an updated version of Roland Mensenkamp.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=76
expr 47: ^[0-9]{4}\s{0,1}[a-zA-Z]{2}$
tree:   (([0-9]{4}[\t-\r ]?)[A-Za-z]{2})
augmnt: (((((([0-9][0-9])[0-9])[0-9])[\t-\r ]?)([A-Za-z][A-Za-z]))#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  4436by  7788KD  9826dU  0458Wi  1620BK  7854BC  0947cy  8978yM  7084Ut
ex(1):  7784 oV  1364 Tb  4334fW  3262Us  0888 xV  9910 wc  2689 XY  0378gB
ex(2):  0225 Ie  9791 je  7140ZU  0329Mi  6410 Mm  5246zh  3279 DQ  2091EH
ex(3):  0982OH  2418 oq  8320 Yl  0668vC  7990Au  7433Jp  3675 jo  8856Ww
ex(5):  3200 wd  1898 Ow  3780MK  0592El  9901 qV  1198Zl  8910 bz  2199Rb
ex(8):  5937 gN  6442 Ke  5510 Fc  1747sM  9992kn  6879bs  1795Vf  2760 Cu
---------------- Examples from DFA ---------------
s1:  6771ZU

         

         #A: David Good
         #D: Will match the following date formats: Preceded by a Space, Left-parentheses, or at the beginning of a line.  Followed by a Space, Right-parentheses, or Colon(:), word boundary or End of line.  Can have / or - as separator.  Accepts 2 digit year 00-99 or 4 digit years 1900-2099 (can modify to accept any range)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=77
ERROR:   (^|\s|\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:])|(^|\s|\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:|$|\>])){1}){1}){1}){1}
    rx: Embedded '^' unimplemented: in "(^|\s|\()((([1-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-]((2[0-9]){1}|(3[01]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:])|(^|\s|\()((([0-9]){1}|([0][1-9]){1}|([1][012]){1}){1}[\/-](([11-31]){1}|([01][1-9]){1}|([1-9]){1}){1}[\/-](((19|20)([0-9][0-9]){1}|([0-9][0-9]){1})){1}(([\s|\)|:|$|\>])){1}){1}){1}){1}"

         

         #A: Sean Carley
         #D: Uses backreferences and word boundaries to match repeated words seperated by whitespace without matching a word with the same ending as the next words beginning.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=78
ERROR:   \b(\w+)\s+\1\b
    rx: \b (boundary) unimplemented: in "\b(\w+)\s+\1\b"

         

         #A: Steven Smith
         #D: A very simple ISBN validation expression - it just checks for a 10 digit number where the last digit could also be a capital 'X'.  Complete specs for ISBN available here:
http://www.isbn.org/standards/home/isbn/international/html/usm4.htm.  An enhancement would be to allow exactly 3 or 0 hyphens or 3 or 0 spaces, since these are also valid formats.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=79
expr 48: ^\d{9}[\d|X]$
tree:   ([0-9]{9}[0-9X|])
augmnt: (((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9X|])#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  4436567785  798261004X  6016201275  4830094748  9780270849  074640778|
ex(1):  4334821237  2062088899  1199109969  2689399400  8887357072  970225560|
ex(2):  0780329085  4103768529  2879327992  4209106881  380220982X  5241853084
ex(3):  2707990807  7433839369  3634885649  746599043|  0536318987  1743780468
ex(5):  1162151196  7389109514  2199477249  2845937728  9644232197  510733617|
ex(8):  6879216177  2752760198  9812879640  7179600669  427604701X  4926073509
---------------- Examples from DFA ---------------
s1:  8680099480

         

         #A: Scott Thompson
         #D: Dates
day: d or dd, <= 31,
month: m or mm, <= 12,
year: yy or yyyy >= 1900, <= 2099
         #U: http://regexlib.com/REDetails.aspx?regexp_id=80
expr 49: ^(([1-9])|(0[1-9])|(1[0-2]))\/(([0-9])|([0-2][0-9])|(3[0-1]))\/(([0-9][0-9])|([1-2][0,9][0-9][0-9]))$
tree:   ((((([1-9]|(0[1-9])|(1[012]))/)([0-9]|([012][0-9])|(3[01])))/)(([0-9][0-9])|((([12][,09])[0-9])[0-9])))
augmnt: (((((([1-9]|(0[1-9])|(1[012]))/)([0-9]|([012][0-9])|(3[01])))/)(([0-9][0-9])|((([12][,09])[0-9])[0-9])))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1/26/1979  7/30/1001  5/17/1,00  11/8/1027  10/07/40  12/30/2978
ex(1):  3/0/08  04/1/2999  06/09/2,37  6/3/1997  10/00/2,70  1/20/1929
ex(2):  12/22/2942  1/18/1980  12/30/1018  11/3/93  8/28/1090  04/3/39
ex(3):  07/06/2932  07/31/1917  03/30/05  10/29/11  5/31/67  07/25/02  12/7/82
ex(5):  04/01/55  10/01/78  1/30/36  11/6/2,75  04/9/2012  12/31/2960
ex(8):  05/30/73  01/30/56  01/30/2,84  6/30/2072  4/30/87  1/27/33  7/31/2,38
---------------- Examples from DFA ---------------
s1:  1/1/44
s8:  1/1/19

         

         #A: narsi v
         #D: This is a pattern to search and verify that a decimal number ends with a 25, 50, 75, 0 or 00. It does match for a nothing after decimal also but I guess thats ok !!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=82
expr 50: ^\d*\.?((25)|(50)|(5)|(75)|(0)|(00))?$
tree:   (([0-9]*.?)((25)|(50)|5|(75)|0|(00))?)
augmnt: ((([0-9]*.?)((25)|(50)|5|(75)|0|(00))?)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  0  .  00  .  .  .  .5  5  4.  .  5  25    7  950  .50  4  2.      0
ex(2):  4  8.75  .  73.  6.  50  97.5  .  0.  29    0.  5  28.25  25  .  855
ex(3):  0  8.  0  305  82.50    43350  536.  56  .  99025  363.5  .  780  605.
ex(5):  900  511.  375  1  .0  248  4593.  964425  55.00  70  .5  3650  17.
ex(8):  41.5  9646.50    674276  0112492675  .  6256.25  09.  800  33525  0
---------------- Examples from DFA ---------------
s0:  
s2:  .
s3:  .0
s4:  .25

         

         #A: Tommy Ullberg
         #D: Validates swedish zipcodes (postnr) with or without space between groups. With leading s- or not. Can be disconnected by removing ''(s-|S-){0,1}''.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=83
expr 51: ^(s-|S-){0,1}[0-9]{3}\s?[0-9]{2}$
tree:   (((((s-)|(S-))?[0-9]{3})[\t-\r ]?)[0-9]{2})
augmnt: ((((((s-)|(S-))?(([0-9][0-9])[0-9]))[\t-\r ]?)([0-9][0-9]))#)
length: 5 to 8
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  74607  s-909 64  s-43382  s-62020  88901  S-09942  689 94  37887
ex(2):  S-497 70  s-400 03  90864  s-68546  879 79  s-209 68  52302  09886
ex(3):  s-30566  270 90  00733  39375  s-88544  746 90  32053  318 38  S-78065
ex(5):  69911  215 98  738 09  S-219 77  48284  S-726 44  321 55  s-361 78
ex(8):  s-92117  S-52701  s-81279  467 79  00667  27647  11292  073 35
---------------- Examples from DFA ---------------
s1:  60944

         

         #A: Sean McAnally
         #D: Regex used in .NET to validate a date.  Matches the following formats mm/dd/yy, mm/dd/yyyy, mm-dd-yy, mm-dd-yyyy
This covers days with 30 or 31 days but does not handle February, it is allowed 30 days.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=84
expr 52: ((0?[13578]|10|12)(-|\/)((0[0-9])|([12])([0-9]?)|(3[01]?))(-|\/)((\d{4})|(\d{2}))|(0?[2469]|11)(-|\/)((0[0-9])|([12])([0-9]?)|(3[0]?))(-|\/)((\d{4}|\d{2})))
tree:   (((((((0?[13578])|(10)|(12))(-|/))((0[0-9])|([12][0-9]?)|(3[01]?)))(-|/))([0-9]{4}|[0-9]{2}))|((((((0?[2469])|(11))(-|/))((0[0-9])|([12][0-9]?)|(30?)))(-|/))([0-9]{4}|[0-9]{2})))
augmnt: ((((((((0?[13578])|(10)|(12))(-|/))((0[0-9])|([12][0-9]?)|(3[01]?)))(-|/))(((([0-9][0-9])[0-9])[0-9])|([0-9][0-9])))|((((((0?[2469])|(11))(-|/))((0[0-9])|([12][0-9]?)|(30?)))(-|/))(((([0-9][0-9])[0-9])[0-9])|([0-9][0-9]))))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  3/2-7982  12-00/0127  12/2-6897  7/1-7464  12-1/64  9-08-3262  12-00-99
ex(1):  12-31/69  6/04/17  3-2-9084  10/30-8793  12-00/6885  12-3-5241
ex(2):  12/08-43  06/30-64  10-2-0053  10/01/78  1-3-9901  2/1/9109  11-2/4822
ex(3):  11/03/74  4/3-8792  06-07-94  11-2-71  11-07-60  12/3-35  01-2/86
ex(5):  12-04/46  12-29-44  11-03-39  1-18-1366  10-3-66  10/3/3670  10-09/5625
ex(8):  1/3-9491  11/07/3274  2/30-77  11/2-06  11-3-2273  01-3/40  07/31-58
---------------- Examples from DFA ---------------
s1:  1-2/68
s8:  1-2/6863

         

         #A: Andre Van Der Merwe
         #D: Checks for a valid windows file name (Must be used with the case-insensitive option
Checks that the file has at lease one char, does not contain any invalid characters and does not have a reserved word as a file name.
"If you see a " in the regex replace it with a " character"
         #U: http://regexlib.com/REDetails.aspx?regexp_id=85
ERROR:   ^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*:\";|/]+$
    rx: '(?...' unimplemented: in "^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*:\";|/]+$"

         

         #A: Marc-Antoine Latour
         #D: Match any image insert in a tag .
simply replace the .jpg in the pattern whit a variable of content type ex:.swf,.js,.gif and loop the pattern to retrieve all tag whit the contenttype pass trought....
Very useful when you have people uploading html document in your site and you want to retrieve all dependecy.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=86
expr 53: <[^>]*\n?.*=("|')?(.*\.jpg)("|')?.*\n?[^<]*>
tree:   (((((((((((<[\x01-=?-\u007f]*)[\n]?)[\x01-\u007f]*)=)("|')?)(((([\x01-\u007f]*.)j)p)g))("|')?)[\x01-\u007f]*)[\n]?)[\x01-;=-\u007f]*)>)
augmnt: ((((((((((((<[\x01-=?-\u007f]*)[\n]?)[\x01-\u007f]*)=)("|')?)(((([\x01-\u007f]*.)j)p)g))("|')?)[\x01-\u007f]*)[\n]?)[\x01-;=-\u007f]*)>)#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>  <=.jpg>
ex(1):  <\n='.jpgn>  <\n=.jpgp{>  <M\n=.jpg'\n>  <2\n=h.jpg\"\nN>  <G\n=P.jpg>
ex(2):  <\nn=\"\\h.jpgX\\]A>  <i=Uz.jpgYa\n>  <='.jpg'Gx]>  <@='71.jpgS(>
ex(3):  <SW\nd='I.jpg.>  <hY.=.jpg\"&>  <\n='s.jpgUBy>  <q='Xg|.jpg\"~>
ex(5):  <0,)\nk;=\"B@).jpg'zz>  <nGrF=.jpg\"\n.>  <E-='.jpg'Xa;ni`At*Y>
ex(8):  <FI/ank=.jpgQK/~r,D9>  <+{%$g\n=\"0n_\"3.jpg\"[=yV0<\n#>\\c1|:)>
---------------- Examples from DFA ---------------
s1:  <=.jpg>

         

         #A: David Lott
         #D: Expression 1 of 2 used to check email address syntax.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=88
expr 54: ^([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))$
tree:   (([.0-9A-Z_a-z-]+@)(((([([0-9]{1,3}.){3})[0-9]{1,3})])|(([0-9A-Z_a-z-]+.)+[A-Za-z]{2,4})))
augmnt: ((([.0-9A-Z_a-z-]+@)(((([((((([0-9][0-9]?)[0-9]?).)((([0-9][0-9]?)[0-9]?).))((([0-9][0-9]?)[0-9]?).)))(([0-9][0-9]?)[0-9]?))])|(([0-9A-Z_a-z-]+.)+((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?))))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  c@y.yJ  z@[7.8.6.0]  c@[0.6.0.2]  e@[3.0.4.4]  G@E.MF  k@[9.7.6.0]
ex(1):  s@y.Za  e@[2.0.9.190]  r@[2.39.38.750]  W@5.avS  G@l.rOey  U@r.Sx
ex(2):  N@w.lQb  _@[82.13.82.900]  _@d6.ZuGd  x@zV.jo  Ii@[49.02.03.18]
ex(3):  D@[518.781.91.294]  3@[2.972.9.229]  X8Q@e.7Q5.NY  UMt@[675.726.149.1]
ex(5):  .a@ue.0.9nAwX.NI  w@apUr.dGKN.e5qa.Z95.2MA.pvZ  f@HH.Q.Y.XqYD.TP
ex(8):  5b07bG@[92.61.064.749]  K3@[03.44.194.5]  2gNm@[0.113.573.16]
---------------- Examples from DFA ---------------
s1:  N@e.pI
s9:  N@e.pIh
s8:  N@e.pIht
s17:  N@[9.8.5.2]

         

         #A: David Lott
         #D: Expression 2 or 2 for matching email address syntax. This one matches the <angle bracket syntax>.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=89
expr 55: ^(([-\w \.]+)|(""[-\w \.]+"") )?<([\w\-\.]+)@((\[([0-9]{1,3}\.){3}[0-9]{1,3}\])|(([\w\-]+\.)+)([a-zA-Z]{2,4}))>$
tree:   (((((([ .0-9A-Z_a-z-]+|((((("")[ .0-9A-Z_a-z-]+)")") ))?<)[.0-9A-Z_a-z-]+)@)(((([([0-9]{1,3}.){3})[0-9]{1,3})])|(([0-9A-Z_a-z-]+.)+[A-Za-z]{2,4})))>)
augmnt: ((((((([ .0-9A-Z_a-z-]+|((((("")[ .0-9A-Z_a-z-]+)")") ))?<)[.0-9A-Z_a-z-]+)@)(((([((((([0-9][0-9]?)[0-9]?).)((([0-9][0-9]?)[0-9]?).))((([0-9][0-9]?)[0-9]?).)))(([0-9][0-9]?)[0-9]?))])|(([0-9A-Z_a-z-]+.)+((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?))))>)#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  <u@[6.7.8.7]>  <-@[4.8.0.6]>  <C@[4.3.0.4]>  <G@E.MF>  <-@K.sK>
ex(1):  <5@u.fWO>  <e@[80.190.9.2]>  \"\"M\"\" <C@o.eZW>
ex(2):  <ei@[73.984.01.82]>  <_@[82.13.82.900]>  <It@E.arSp>  <VQ@[86.04.90.2]>
ex(3):  lp<w@[91.251.83.905]>  <ug0@[8.497.26.42]>  <8Q@e.7Q5.NY>
ex(5):  \"\"m7\"\" <8@[46.401.42.75]>  NX6rp<Mekw@apUr.dGKN.e5qa.Z95.2MA.pvZ>
ex(8):  <48urh@[76.0.2.57]>  <.dEVsV@G4VF.3QCb1-a.sYP>
---------------- Examples from DFA ---------------
s1:  <w@_.Ye>

         

         #A: Klaxon Mindjammer
         #D: Verifies URLs.  Checks for the leading protocol, a good looking domain (two or three letter TLD; no invalid characters in domain) and a somwhat reasonable file path.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=90
expr 56: ^http\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(/\S*)?$
tree:   ((((((((((ht)t)p):)/)/)[.0-9A-Za-z-]+).)[A-Za-z]{2,3})(/[\x01-\b\x0e-\x1f!-\u007f]*)?)
augmnt: (((((((((((ht)t)p):)/)/)[.0-9A-Za-z-]+).)(([A-Za-z][A-Za-z])[A-Za-z]?))(/[\x01-\b\x0e-\x1f!-\u007f]*)?)#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://z.SK  http://U.BE  http://C.CZ  http://9.UX  http://-.tX
ex(1):  http://8.YVa  http://u.sQ  http://8.mE  http://l.MY  http://W.RW
ex(2):  http://yg.il/S.  http://u8.zmQ  http://lw.ya//  http://Io.dm/
ex(3):  http://rT.ZQo  http://u.aI/  http://C1.jwv  http://S3w.Slq/
ex(5):  http://WY7.mov/9yx  http://S8X8Q.acP  http://gMD.IfU/V  http://i6.Cu/T@
ex(8):  http://Fue.s0.xM  http://ekw8hYn.AZm  http://-H.vA
---------------- Examples from DFA ---------------
s1:  http://U.PI
s12:  http://U.PI/
s13:  http://U.PIe

         

         #A: Santosh Potadar
         #D: UK National Insurance Number validation. Especially useful to validate through clientside/server side script on a website.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=92
expr 57: ^[A-Za-z]{2}[0-9]{6}[A-Za-z]{1}$
tree:   (([A-Za-z]{2}[0-9]{6})[A-Za-z])
augmnt: (((([A-Za-z][A-Za-z])((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))[A-Za-z])#)
length: 9 to 9
-------------------- Examples --------------------
ex(0):  mW365677G  SK798261U  qY586016e  wB278548a  uF474689L  Ay270842t
ex(1):  PP091364L  yT943348f  WT262062Q  SE890011b  rl099642G  MK939940Y
ex(2):  eZ702255S  Ie979170j  eC400780z  Sx084641S  kM852462z  hJ279981Q
ex(3):  QT802209G  Oc652418l  Qq832093Y  lM668270n  Nh080074r  dS393675Z
ex(5):  wH465990q  Vw005363B  ov838174b  vE046560l  zH006990L  HG215119k
ex(8):  zA199477I  Ae228459P  jn269644i  gK055107a  cp747866F  nN266368f
---------------- Examples from DFA ---------------
s1:  Vf276019C

         

         #A: Peter Pfeifer
         #D: Sql date format tester. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=93
expr 58: 20\d{2}(-|\/)((0[1-9])|(1[0-2]))(-|\/)((0[1-9])|([1-2][0-9])|(3[0-1]))(T|\s)(([0-1][0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9])
tree:   ((((((((((((20)[0-9]{2})(-|/))((0[1-9])|(1[012])))(-|/))((0[1-9])|([12][0-9])|(3[01])))(T|[\t-\r ]))(([01][0-9])|(2[0-3]))):)([0-5][0-9])):)([0-5][0-9]))
augmnt: (((((((((((((20)([0-9][0-9]))(-|/))((0[1-9])|(1[012])))(-|/))((0[1-9])|([12][0-9])|(3[01])))(T|[\t-\r ]))(([01][0-9])|(2[0-3]))):)([0-5][0-9])):)([0-5][0-9]))#)
length: 19 to 19
-------------------- Examples --------------------
ex(0):  2036/10-30T22:58:01  2001-08-31T08:18:07  2042/12-30T21:36:38
ex(1):  2091-11-19 20:38:27  2070/12-04T23:10:07  2000/07/16T17:45:06
ex(2):  2009-04-15 03:29:05  2068-05/10 22:13:35  2034-10-16 20:00:33
ex(3):  2099-11/31T22:30:11  2021/07-30T21:32:56  2023-12/09 22:46:19
ex(5):  2098/09-31 20:06:14  2060-05-09T22:39:46  2063/03-30T07:42:53
ex(8):  2033/10/31 00:18:58  2061/05-30 09:26:56  2047-10-30T08:17:05
---------------- Examples from DFA ---------------
s1:  2044/06-04 13:23:02

         

         #A: Rex Po
         #D: - validates a yyyy-mm-dd, yyyy mm dd, or yyyy/mm/dd date
- makes sure day is within valid range for the month
- does NOT validate Feb. 29 on a leap year, only that Feb. CAN have 29 days
         #U: http://regexlib.com/REDetails.aspx?regexp_id=95
expr 59: ^\d{4}[\-\/\s]?((((0[13578])|(1[02]))[\-\/\s]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\s]?(([0-2][0-9])|(30)))|(02[\-\/\s]?[0-2][0-9]))$
tree:   (([0-9]{4}[\t-\r /-]?)(((((0[13578])|(1[02]))[\t-\r /-]?)(([012][0-9])|(3[01])))|((((0[469])|(11))[\t-\r /-]?)(([012][0-9])|(30)))|((((02)[\t-\r /-]?)[012])[0-9])))
augmnt: (((((([0-9][0-9])[0-9])[0-9])[\t-\r /-]?)(((((0[13578])|(1[02]))[\t-\r /-]?)(([012][0-9])|(3[01])))|((((0[469])|(11))[\t-\r /-]?)(([012][0-9])|(30)))|((((02)[\t-\r /-]?)[012])[0-9])))#)
length: 8 to 10
-------------------- Examples --------------------
ex(0):  44360228  88790814  58600201  27850624  74681100  84291207  78430627
ex(1):  32620218  9001/02/22  6893/02-27  3570 0205  6049/1130  00780214
ex(2):  9327 0201  0688 0229  8286-0902  0930 02-19  0800-0531  63480430
ex(3):  6318-11-06  5605/02/01  6215/0630  95161230  482202/02  696402/25
ex(5):  9266-02/19  52750630  1287 02 26  00660907  011207-05  924609 20
ex(8):  5072-0218  73420203  4433 02/03  90260228  4361-1023  666902 14
---------------- Examples from DFA ---------------
s1:  44850321

         

         #A: M H
         #D: *CORRECTED: Again thanks for all the comments below. If you want to include internal domain as well change the partial code (\.[\w-_]+)+ to (\.[\w-_]+)?
See the comments below*
This is the regular expression I use to add links in my email program. It also ignores those suppose-to-be commas/periods/colons at the end of the URL, like this sentence "check out http://www.yahoo.com/." (the period will be ignored) Note that it requires some modification to match ones that dont start with http.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=96
expr 60: (http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&:/~\+#]*[\w\-\@?^=%&/~\+#])?
tree:   ((((((((((ht)t)p)|((ft)p)|((((ht)t)p)s)):)/)/)[0-9A-Z_a-z-]+)(.[0-9A-Z_a-z-]+)+)([#%&+-:=?-Z^_a-z~]*[#%&+/-9=?-Z^_a-z~-])?)
augmnt: (((((((((((ht)t)p)|((ft)p)|((((ht)t)p)s)):)/)/)[0-9A-Z_a-z-]+)(.[0-9A-Z_a-z-]+)+)([#%&+-:=?-Z^_a-z~]*[#%&+/-9=?-Z^_a-z~-])?)#)
length: 9 to *
-------------------- Examples --------------------
ex(0):  http://Q.Q  https://V.5  http://e.C  https://G.4  http://F.T
ex(1):  http://f.u  https://e.1  http://t.fY  https://Y.H  https://L.Q
ex(2):  ftp://P.g  https://i.zCBu  ftp://8.n  https://aM.yo.O55  ftp://t.C.r
ex(3):  ftp://YbK.z.uVT&  ftp://uI8.w.pHm.EyTnDOc  ftp://VT.bgQA
ex(5):  ftp://fV.v8.gMD.tXAN.-YoxKu  http://dt__.2F2.8  https://l.6Fueq.b
ex(8):  https://DHHt-.Y.X.DUX6i.RG6.GhQ
---------------- Examples from DFA ---------------
s1:  ftp://4.c

         

         #A: jay gann
         #D: US Telephone Reg expression that allows 7, 10 or 11 digits with or without hyphens.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=97
expr 61: ^(1?(-?\d{3})-?)?(\d{3})(-?\d{4})$
tree:   ((((1?(-?[0-9]{3}))-?)?[0-9]{3})(-?[0-9]{4}))
augmnt: (((((1?(-?(([0-9][0-9])[0-9])))-?)?(([0-9][0-9])[0-9]))(-?((([0-9][0-9])[0-9])[0-9])))#)
length: 7 to 14
-------------------- Examples --------------------
ex(0):  4436567  7888798  2610045  8601620  1278548  3009474  6897802  7084290
ex(1):  4399136  783-3348  1236206  0889001  1-9962269399  0378873
ex(2):  1347-0070329  8461037  8526287  1-981209-6885  3802098  8654185
ex(3):  -908074-8393  7533488  407659-4320  536-8983  174-8046  592006-0116
ex(5):  910-1602  17728224593  1964232-0551  7331747  669-2663  8791617
ex(8):  1677-9606667  2764701  9267353592  6253798  800-4848  7324335  7213214
---------------- Examples from DFA ---------------
s1:  9333396
s11:  1437921
s10:  9333396831
s21:  1437921463

         

         #A: Andrew Freese
         #D: This RX is used to find get all named tags in an html string. If you find a problem with it, please email drew@lordstrange.com
         #U: http://regexlib.com/REDetails.aspx?regexp_id=98
expr 62: <[^>]*name[\s]*=[\s]*"?[^\w_]*"?[^>]*>
tree:   (((((((((((((<[\x01-=?-\u007f]*)n)a)m)e)[\t-\r ]*)=)[\t-\r ]*)"?)[\x01-/:-@[-^`{-\u007f]*)"?)[\x01-=?-\u007f]*)>)
augmnt: ((((((((((((((<[\x01-=?-\u007f]*)n)a)m)e)[\t-\r ]*)=)[\t-\r ]*)"?)[\x01-/:-@[-^`{-\u007f]*)"?)[\x01-=?-\u007f]*)>)#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  <name=>  <name=>  <name=>  <name=>  <name=>  <name=>  <name=>  <name=>
ex(1):  <name =\"+\">  <Tname=>  <name = >  <~name =\"^q>  <name=\"\\G>
ex(2):  <name  = \"~+oO>  <name=  >>X\\>  <Aname= \"\"b>  <name =\"\">
ex(3):  <jname=   \"(..\"7 >  <S/9name= {>*\"d>  <sQIname  = +.!>
ex(5):  <Nname    =  \"'~Xg|>  <Tf6Tname    =  +%\"?Rk]5>  <OTname    =\"a>
ex(8):  <;qj<mg.name      =   \"(;;,]`+>  <+_name     =    ?{l0?t>
---------------- Examples from DFA ---------------
s1:  <name=>
s8:  <name=h>

         

         #A: vinod kumar
         #D: This RegEx will help to validate a physical file path with a specific file extension (here xls)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=101
expr 63: ([a-zA-Z]:(\\w+)*\\[a-zA-Z0_9]+)?.xls
tree:   (((((((([A-Za-z]:)(\w+)*)\)[09A-Z_a-z]+)?[\x01-\u007f])x)l)s)
augmnt: ((((((((([A-Za-z]:)(\w+)*)\)[09A-Z_a-z]+)?[\x01-\u007f])x)l)s)#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  ~xls  9xls  #xls  [xls  Xxls  Rxls  Dxls  !xls  fxls  Mxls  6xls  )xls
ex(1):  Exls  {xls  m:\\w\\OZxls  Axls  a:\\Fsxls  gxls  Uxls  V:\\w\\ulxls
ex(2):  Y:\\eAxls  u:\\bZwxls  ~xls  r:\\Ok/xls  2xls  =xls  ixls
ex(3):  Dxls  (xls  >xls  Xxls  Q:\\w\\Dmzxls  7xls  N:\\w\\w\\oBxls
ex(5):  w:\\wwwww\\wwww\\w\\S]xls  N:\\ww\\ww\\ww\\Mzrwb|xls  Txls  Yxls
ex(8):  W:\\w\\wwwwwwww\\www\\wwww\\wwww\\wwww\\w\\wwwwwwww\\Ukoxls
---------------- Examples from DFA ---------------
s1:  |xls
s6:  J:\\rZxls

         

         #A: Steven Smith
         #D: This regular expression will match a 24 hour time with no separators.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=102
expr 64: ^(20|21|22|23|[0-1]\d)[0-5]\d$
tree:   ((((20)|(21)|(22)|(23)|([01][0-9]))[0-5])[0-9])
augmnt: (((((20)|(21)|(22)|(23)|([01][0-9]))[0-5])[0-9])#)
length: 4 to 4
-------------------- Examples --------------------
ex(0):  0345  2108  2302  2144  2001  2112  2248  2354  2229  2207  2049  2024
ex(1):  2351  2338  2333  0212  2300  2148  2301  2150  1642  2233  1423  2227
ex(2):  2122  2200  1731  2207  2147  2309  2024  2116  2306  2213  2238  2109
ex(3):  2020  2218  2232  1853  2032  2005  2022  2219  2007  1303  1635  2348
ex(5):  2005  1023  2233  2109  2357  1700  0500  2000  2030  2141  2018  2149
ex(8):  2159  0732  0248  1917  2256  0212  2155  2153  2107  2319  0623  2112
---------------- Examples from DFA ---------------
s1:  1747

         

         #A: Steven Smith
         #D: Matches a 12-hour time value expressed as either 4 numeric digits, 3 numeric digits, or a space and 3 numeric digits.  3 digit times (930) can be expressed with leading 0's (0930) or not.  AM/PM designation is not included in this expression.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=103
expr 65: ^( [1-9]|[1-9]|0[1-9]|10|11|12)[0-5]\d$
tree:   (((( [1-9])|[1-9]|(0[1-9])|(10)|(11)|(12))[0-5])[0-9])
augmnt: ((((( [1-9])|[1-9]|(0[1-9])|(10)|(11)|(12))[0-5])[0-9])#)
length: 3 to 4
-------------------- Examples --------------------
ex(0):   545  1108   302   344  1201   112  1048  349   408  200   344  1134
ex(1):  0910  1204  1014  1002  232  0722  0509  1119  1239  1146   439  0138
ex(2):  716  1002  1004  1217  0111  0218   750  1141   528  1222  0252  1241
ex(3):  1105  0322  0822  0444  153  1132  0405  0322  1019  1107   703  847
ex(5):  0244   806  1224  1205  1038  938  1217   705   352   529  1056  1151
ex(8):  531  1156  0919  1104  0844  1257   644   801  655  1253   107  1119
---------------- Examples from DFA ---------------
s1:  121
s5:  127

         

         #A: Mike Hensley
         #D: Accepts 1-2 digits followed by a slash followed by 2-4 digits.  Useful for numeric month/year entry.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=104
expr 66: ^\d{1,2}\/\d{2,4}$
tree:   (([0-9]{1,2}/)[0-9]{2,4})
augmnt: (((([0-9][0-9]?)/)((([0-9][0-9])[0-9]?)[0-9]?))#)
length: 4 to 7
-------------------- Examples --------------------
ex(0):  4/36  5/77  8/87  9/26  1/04  5/60  1/20  1/78  5/83  0/94  7/68  9/80
ex(1):  4/07  4/789  01/6489  43/8222  6/62  8/0019  1/96  2/939  07/8837
ex(2):  56/4997  04/14  7/320  4/107  82/629  3/994  2/10  82/80  08/862  1/30
ex(3):  6/279  9/0043  89/673  3/85  4/4690  42/0561  88/8147  8/65  52/009
ex(5):  8/381  91/0294  72/82  49/77  9/4229  05/073  14/869  9/63  72/6192
ex(8):  18/289  4/719  0/664  7/471  2/263  5/59  6/639  6/094  4/73  43/074
---------------- Examples from DFA ---------------
s1:  7/22
s6:  7/229
s5:  7/2297

         

         #A: Dalibor Kalna
         #D: This regex match numeric data in the following format: thousands are separated by (') apostrophe, decimal places are separated by dot (.) Maximum three decimal places are not required. It's easy to change to other separators as well.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=107
expr 67: ^(\d{1,3}'(\d{3}')*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$
tree:   ((((([0-9]{1,3}')([0-9]{3}')*)[0-9]{3})(.[0-9]{1,3})?)|([0-9]{1,3}(.[0-9]{3})?))
augmnt: (((((((([0-9][0-9]?)[0-9]?)')((([0-9][0-9])[0-9])')*)(([0-9][0-9])[0-9]))(.(([0-9][0-9]?)[0-9]?))?)|((([0-9][0-9]?)[0-9]?)(.(([0-9][0-9])[0-9]))?))#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4'656  7  8'798  6'004  8  0'620  2  8  4  3'094  4  8'780  7'842  0  4
ex(1):  301'478.43  222'062  80'199'099  2'399'037  837'697'225.07  104.400
ex(2):  17'524'287.298  4.068  58'209'286'241  3  23  0  79'800'433  965.348
ex(3):  2.631  98'437'046'605'260  901'151'986'389.91  294'248'284.37
ex(5):  692'368'921'179.726  149'287'646'717'600'667'276  71'926'735'359
ex(8):  424  83'979'334'333'657'381'390'606'889  33'296'464'666'666'365'478'703
---------------- Examples from DFA ---------------
s1:  2
s4:  24
s3:  249
s6:  2'566
s8:  2.252
s10:  2'566.1
s7:  2'566.11

         

         #A: Josh Bailyr
         #D: This expression is an attempt to match the most obvious features of a valid date in American/US format of the form mm/dd/yyyy for any year 1900 through 2003.  It can easily be adapted for different date ranges.  It matches any date where the day part is any number 01-31, the month part is any number 01-12, and the year part is any number 1900-2003.  The only invalid dates that it matches are ones where the day part may be in the range 01-31 but that range might not be valid for the specified month.  An example of an invalid date that it would allow to pass through would be 11/31/2002.  This date is invalid because 11/31 of any year does not exist, but this expression would allow it pass through since the day part is in the range 01-31.
This regular expression has been used successfully in ASP with VBScript using the windows scripting library RegExp object.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=109
expr 68: ^(0[1-9]|1[0-2])\/((0[1-9]|2\d)|3[0-1])\/(19\d\d|200[0-3])$
tree:   ((((((0[1-9])|(1[012]))/)(((0[1-9])|(2[0-9]))|(3[01])))/)((((19)[0-9])[0-9])|(((20)0)[0-3])))
augmnt: (((((((0[1-9])|(1[012]))/)(((0[1-9])|(2[0-9]))|(3[01])))/)((((19)[0-9])[0-9])|(((20)0)[0-3])))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  05/31/1979  07/06/1962  08/28/1947  06/30/2000  10/06/1990  10/23/1948
ex(1):  10/31/1964  02/31/1978  04/30/1902  02/02/2002  12/20/1984  05/30/2002
ex(2):  11/23/1909  09/30/1908  08/30/1982  12/30/1933  08/23/2001  07/30/2003
ex(3):  11/30/1905  10/01/2003  12/02/2003  12/31/2000  02/31/2002  03/20/2001
ex(5):  02/30/1995  01/30/2000  12/30/2001  07/06/2001  05/26/2001  10/09/2000
ex(8):  10/31/2000  02/09/2000  09/31/1919  10/05/1943  01/06/1936  05/09/2002
---------------- Examples from DFA ---------------
s1:  08/06/2003

         

         #A: Scott Watermasysk Watermasysk
         #D: This expression can be used validate a datetime column from SQL Server. Big parts of it where taken from other samples on RegexLib. Please feel free to take it apart and improve it.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=110
expr 69: ^((((([13578])|(1[0-2]))[\-\/\s]?(([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?(([1-9])|([1-2][0-9])|(30)))|(2[\-\/\s]?(([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s((([1-9])|(1[02]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$
tree:   ((((((([13578]|(1[012]))[\t-\r /-]?)([1-9]|([12][0-9])|(3[01])))|((([469]|(11))[\t-\r /-]?)([1-9]|([12][0-9])|(30)))|((2[\t-\r /-]?)([1-9]|([12][0-9]))))[\t-\r /-]?)[0-9]{4})([\t-\r ]((((([1-9]|(1[02])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))[AMPamp|]{2}))?)
augmnt: (((((((([13578]|(1[012]))[\t-\r /-]?)([1-9]|([12][0-9])|(3[01])))|((([469]|(11))[\t-\r /-]?)([1-9]|([12][0-9])|(30)))|((2[\t-\r /-]?)([1-9]|([12][0-9]))))[\t-\r /-]?)((([0-9][0-9])[0-9])[0-9]))([\t-\r ]((((([1-9]|(1[02])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))([AMPamp|][AMPamp|])))?)#)
length: 6 to 22
-------------------- Examples --------------------
ex(0):  3317888  276100  1236201  11130094  4308027  229074  267843  9264783
ex(1):  290888 2:59:39 mm  10 318873 8:37 MP  430-0347 2:40:50 Mm
ex(2):  2 62098  2-15/8320 8:46 ap  1173383 4:56:28 aP  4 300053  112/4378
ex(3):  3 9-7724  9 309644  6307336 6:06:52 Mm  211 2752 4:41:52 Aa  2 106667
ex(5):  11-52563 9:20:28 |A  4-30-2146  2-9/3344 10:38:59 |p  218/3613
ex(8):  1130/3670  41/7265  2 111714 10:06:53 AM  11/207714 10:07:15 Mm
---------------- Examples from DFA ---------------
s1:  119269
s9:  112589
s8:  132247
s23:  119269 1:59 AM

         

         #A: anup kallingal
         #D: This can be used to match indian style pincodes / postal codes used by the indian postal departments which are 6 digits long and may have space after the 3rd digit
         #U: http://regexlib.com/REDetails.aspx?regexp_id=111
expr 70: ^\d{3}\s?\d{3}$
tree:   (([0-9]{3}[\t-\r ]?)[0-9]{3})
augmnt: ((((([0-9][0-9])[0-9])[\t-\r ]?)(([0-9][0-9])[0-9]))#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  443656  778887  982610  045860  162012  785483  009474  689780  270842
ex(1):  077439  091 478  394 482  123620  620889  001 910  996226  893 403
ex(2):  707970  225 049  791 347  140780  329846  410 685  246879  327 814
ex(3):  523022  098865  241530  883093  050682  707 080  074 839  367 634
ex(5):  746 904  320536  318 381  743 046  560 260  069 116  215 986  738 095
ex(8):  477482  284 377  269442  321 551  073 174  786999  266 879  216 952
---------------- Examples from DFA ---------------
s1:  419828

         

         #A: Matt Adams
         #D: The following validates dates with and without leading zeros in the following formats: MM/DD/YYYY and it also takes YYYY (this can easily be removed).  All months are validated for the correct number of days for that particular month except for February which can be set to 29 days. date day month year
         #U: http://regexlib.com/REDetails.aspx?regexp_id=112
ERROR:   ^((((0[13578])|([13578])|(1[02]))[\/](([1-9])|([0-2][0-9])|(3[01])))|(((0[469])|([469])|(11))[\/](([1-9])|([0-2][0-9])|(30)))|((2|02)[\/](([1-9])|([0-2][0-9]))))[\/]\d{4}$|^\d{4}$
    rx: Embedded '$' unimplemented: in "^((((0[13578])|([13578])|(1[02]))[\/](([1-9])|([0-2][0-9])|(3[01])))|(((0[469])|([469])|(11))[\/](([1-9])|([0-2][0-9])|(30)))|((2|02)[\/](([1-9])|([0-2][0-9]))))[\/]\d{4}$|^\d{4}$"

         

         #A: Michael Ash
         #D: This expression validates dates in the US m/d/y format from 1/1/1600 - 12/31/9999.
         #T: M/d/y Date
         #U: http://regexlib.com/REDetails.aspx?regexp_id=113
ERROR:   ^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$
    rx: \1 (backref) unimplemented: in "^(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[13-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"

         

         #A: Jason West
         #D: My meager attempt at a date validator with leap years using a strict mm/dd/yyyy format.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=114
expr 71: (((0[13578]|10|12)([-./])(0[1-9]|[12][0-9]|3[01])([-./])(\d{4}))|((0[469]|11)([-./])([0][1-9]|[12][0-9]|30)([-./])(\d{4}))|((2)([-./])(0[1-9]|1[0-9]|2[0-8])([-./])(\d{4}))|((2)(\.|-|\/)(29)([-./])([02468][048]00))|((2)([-./])(29)([-./])([13579][26]00))|((2)([-./])(29)([-./])([0-9][0-9][0][48]))|((2)([-./])(29)([-./])([0-9][0-9][2468][048]))|((2)([-./])(29)([-./])([0-9][0-9][13579][26])))
tree:   (((((((0[13578])|(10)|(12))[./-])((0[1-9])|([12][0-9])|(3[01])))[./-])[0-9]{4})|((((((0[469])|(11))[./-])((0[1-9])|([12][0-9])|(30)))[./-])[0-9]{4})|((((2[./-])((0[1-9])|(1[0-9])|(2[0-8])))[./-])[0-9]{4})|((((2(.|-|/))(29))[./-])((([02468][048])0)0))|((((2[./-])(29))[./-])((([13579][26])0)0))|((((2[./-])(29))[./-])((([0-9][0-9])0)[48]))|((((2[./-])(29))[./-])((([0-9][0-9])[2468])[048]))|((((2[./-])(29))[./-])((([0-9][0-9])[13579])[26])))
augmnt: ((((((((0[13578])|(10)|(12))[./-])((0[1-9])|([12][0-9])|(3[01])))[./-])((([0-9][0-9])[0-9])[0-9]))|((((((0[469])|(11))[./-])((0[1-9])|([12][0-9])|(30)))[./-])((([0-9][0-9])[0-9])[0-9]))|((((2[./-])((0[1-9])|(1[0-9])|(2[0-8])))[./-])((([0-9][0-9])[0-9])[0-9]))|((((2(.|-|/))(29))[./-])((([02468][048])0)0))|((((2[./-])(29))[./-])((([13579][26])0)0))|((((2[./-])(29))[./-])((([0-9][0-9])0)[48]))|((((2[./-])(29))[./-])((([0-9][0-9])[2468])[048]))|((((2[./-])(29))[./-])((([0-9][0-9])[13579])[26])))#)
length: 9 to 10
-------------------- Examples --------------------
ex(0):  2.16.7888  2.29/0000  04.28/4830  2-29-8940  04.17/6407  2.29/9104
ex(1):  2/29-9200  2.02/9109  2.29.8916  12-31-5707  2/29-5540  2.29.0384
ex(2):  2-29/8520  2/29/9600  04-08/8523  2/29.8224  04/01-3209  2.29/8204
ex(3):  11-30/4885  2-14-5990  12-09.1898  2/29.7896  2-29/9200  11/01/1198
ex(5):  03.07-8228  12/05/6442  2.29/5172  06/16.9926  2.21/1617  2.29.7604
ex(8):  2/29/6064  2-29/4756  12/01.0359  10.31-8680  2/29.8224  2/29/7280
---------------- Examples from DFA ---------------
s1:  2-04-0046

         

         #A: Frederico Knabben
         #D: Use it for breaking-down a URI (URL, URN) reference into its main components: Scheme, Authority, Path, Query and Fragment.
This is not a simple match regular expression. so it not works to verify a URI. It returns 1 matching group for each URI component.
For example, for the following URI:
http://regexlib.com/REDetails.aspx?regexp_id=x#Details
returns: scheme="http", authority="regexlib.com", path="/REDetails.aspx", query="regexp_id=x" and fragment="Details".
This is a W3C raccomandation (RFC 2396).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=115
ERROR:   ^(?=[^&])(?:(?<scheme>[^:/?#]+):)?(?://(?<authority>[^/?#]*))?(?<path>[^?#]*)(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?
    rx: '(?...' unimplemented: in "^(?=[^&])(?:(?<scheme>[^:/?#]+):)?(?://(?<authority>[^/?#]*))?(?<path>[^?#]*)(?:\?(?<query>[^#]*))?(?:#(?<fragment>.*))?"

         

         #A: Bill Anderson
         #D: US Telephone Number where this is regular expression excludes the first number, after the area code,from being 0 or 1; it also allows an extension
to be added where it does not have to be prefixed by 'x'.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=116
expr 72: ^[\\(]{0,1}([0-9]){3}[\\)]{0,1}[ ]?([^0-1]){1}([0-9]){2}[ ]?[-]?[ ]?([0-9]){4}[ ]*((x){0,1}([0-9]){1,5}){0,1}$
tree:   ((((((((((([(\]?[0-9]{3})[)\]?) ?)[\x01-/2-\u007f])[0-9]{2}) ?)-?) ?)[0-9]{4}) *)(x?[0-9]{1,5})?)
augmnt: (((((((((((([(\]?(([0-9][0-9])[0-9]))[)\]?) ?)[\x01-/2-\u007f])([0-9][0-9])) ?)-?) ?)((([0-9][0-9])[0-9])[0-9])) *)(x?(((([0-9][0-9]?)[0-9]?)[0-9]?)[0-9]?))?)#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  443I567788  879s261004  586%162012  785.830094  746i978027  084E907464
ex(1):  \\783) 221-2062  890 V91-4226x97  873) y70 6049 x31  780\\K46- 6852
ex(2):  865]85 3209  \\682\\ \\80- 8393 x36  407C99 0053  
ex(3):  \\738\\ !60- 7724  845) 5963219x0367  (699)(68  1795x79
ex(5):  470)o26- 3592    x8  \\848 '24 - 1432   873w97 -4333     
ex(8):  961V36 66934876  \\002K59  2511      318  303)[94 - 3502      
---------------- Examples from DFA ---------------
s1:  822P544215
s13:  822 299876
s12:  822P5442158
s25:  822P54421587
s24:  822P544215872
s23:  822P5442158724
s22:  822P54421587249

         

         #A: Steven Smith
         #D: This matches any real number, with optional decimal point and numbers after the decimal, and optional positive (+) or negative (-) designation.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=117
expr 73: ^[-+]?\d+(\.\d+)?$
tree:   (([+-]?[0-9]+)(.[0-9]+)?)
augmnt: ((([+-]?[0-9]+)(.[0-9]+)?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  2  +8.8  -0.7  6  +0  -8  9  -6  7.4  +9.6  7  -3.8  1  -6  6  8  9
ex(2):  +96  6  +94  +8  +70.70  5.4  +70.14  7  29  6  +76  -6  93  +1  9.8
ex(3):  209  652  +308  +305  827  +80  +3  -75.488  +0.5  +320  +318.8  -37
ex(5):  00  +1.151  +73  +9.02  +77248  4593.696  23219  +7.17  866.26636  921
ex(8):  -198.7964677  +006  42760470.4  +073.59  62563.6  0994848  -243.7214321
---------------- Examples from DFA ---------------
s1:  2
s3:  2.9

         

         #A: Qing Jiang
         #D: Match Canadia Zip Code. You can have a space in the middle Like T2P 3C7, or no space like T2P3C7
         #U: http://regexlib.com/REDetails.aspx?regexp_id=118
expr 74: ^[a-zA-Z][0-9][a-zA-Z]\s?[0-9][a-zA-Z][0-9]$
tree:   (((((([A-Za-z][0-9])[A-Za-z])[\t-\r ]?)[0-9])[A-Za-z])[0-9])
augmnt: ((((((([A-Za-z][0-9])[A-Za-z])[\t-\r ]?)[0-9])[A-Za-z])[0-9])#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  m4P6b6  J7G8K7  v8N1U0  Y5E6i1  D0B2d8  Z8a0F4  D4y8X7  A0M7Q8  y2t0t4
ex(1):  P9o 3K4  L8T 3Z4  S2J3O6  I0U0S8  k9m1V9  r1m 6c2  M8r 9Y0  Y8K7x5
ex(2):  i2v 0e9  p9v 3e7  y0E 0z2  x0M6l0  k6m 4s2  z9J7f9  m1Q0q0  E8e 3b2
ex(3):  H2w 5Q8  O3m9s5  M6y2v0  n9h8A0  a3d3p3  G7b 3o8  w5R0H4  Y5a4V2
ex(5):  v8P1j4  b7E4M5  i0l 6E0  S9N1H6  q1v 9k6  Z3S 0F5  b6Z 9I7  b2A2c8
ex(8):  N6M2g1  h0F 0D3  F6p 7s6  M9n 6k3  W8f 1s1  p9l7f2  P6w 4u8  T2k 6o6
---------------- Examples from DFA ---------------
s1:  Q6U7Y7

         

         #A: Qing Jiang
         #D: This expression matches three different formats of postal codes: 5 digit US ZIP code, 5 digit US ZIP code + 4, and 6 digit alphanumeric Canadian Postal Code. The first one must be 5 numeric digits. The ZIP+4 must be 5 numeric digits, a hyphen, and then 4 numeric digits. The Canadian postal code must be of the form ANA NAN where A is any uppercase alphabetic character and N is a numeric digit from 0 to 9.  
         #U: http://regexlib.com/REDetails.aspx?regexp_id=122
expr 75: ^((\d{5}-\d{4})|(\d{5})|([A-Z]\d[A-Z]\s\d[A-Z]\d))$
tree:   ((([0-9]{5}-)[0-9]{4})|[0-9]{5}|(((((([A-Z][0-9])[A-Z])[\t-\r ])[0-9])[A-Z])[0-9]))
augmnt: (((((((([0-9][0-9])[0-9])[0-9])[0-9])-)((([0-9][0-9])[0-9])[0-9]))|(((([0-9][0-9])[0-9])[0-9])[0-9])|(((((([A-Z][0-9])[A-Z])[\t-\r ])[0-9])[A-Z])[0-9]))#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  43656-7888  L8E 1S0  58601-2012  85483-0947  68978-2708  29074-4077
ex(1):  47839-3348  X2F 6I0  E0E 8B0  11991-9964  S6O 3X9  S3B 8I7  57076-7022
ex(2):  47140-7803  90846-1037  K5E 6E8  B3U 9N8  S2S 1A6  S5C 8K2  Y9Q 8K5
ex(3):  88320  D0X 6W8  J0T 9O8  07433-3936  53634-8564  07465-9043  00536-1898
ex(5):  U0L 2G0  69901  Y2N 1B9  67389-0951  A2N 9G7  24822-4593  P2C 6Q4
ex(8):  K7R 6B7  78669-9266  O8T 2H6  79527  27601-4198  O8D 6Y6  71796
---------------- Examples from DFA ---------------
s1:  40142
s7:  P1A 6T5

         

         #A: Daniel Hou
         #U: http://regexlib.com/REDetails.aspx?regexp_id=123
expr 76: (a|b|c).(a.b)*.b+.c
tree:   (((((((a|b|c)[\x01-\u007f])((a[\x01-\u007f])b)*)[\x01-\u007f])b+)[\x01-\u007f])c)
augmnt: ((((((((a|b|c)[\x01-\u007f])((a[\x01-\u007f])b)*)[\x01-\u007f])b+)[\x01-\u007f])c)#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  a(IbSc  cFxb[c  aX4b=c  a%DbJc  bmdb.c  bW`b6c  a)rbMc  aiVbLc  a{ybcc
ex(1):  a[aAb8bnc  agsbXc  a6PbUc  bDaBbMbtc  bmPb}c  aua2bAb2c  b1yb4c  aa boc
ex(2):  c/a/b@bb=c  b\\;b\\c  aha=ba1btboc  alanbHbic  c>a^bXbb]c  cR-bb$c
ex(3):  bWatba_bBbbkc  aG2bb$c  bDajba7ba/bUbbbyc  aSadba ba>b/bbb*c  c8gbbbWc
ex(5):  c!a|ba~bTbbbYc  bHa;b^bboc  c^azbCbbsc  aYwbbbbVc  b(a'ba5ba|baYbfbbbXc
ex(8):  c;aGbakb5bbbTc  c;a0baobakbaCb-bbbb|c  c^AbbbbbbbGc
---------------- Examples from DFA ---------------
s1:  awwb-c
s8:  awwbbc
s12:  awabbc
s9:  awabbac

         

         #A: Alessandro Vergani
         #D: Matches quoted string, using \" as an escape to place quotes in the string
         #U: http://regexlib.com/REDetails.aspx?regexp_id=124
expr 77: "((\\")|[^"(\\")])+"
tree:   (("((\")|[]\x01-!#-'*-[^-\u007f])+)")
augmnt: ((("((\")|[]\x01-!#-'*-[^-\u007f])+)")#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  \"\\\"\"  \"w\"  \"\\\"\"  \"\\\"\"  \"2\"  \"I\"  \"T\"  \".\"
ex(1):  \"\\\"\"  \"\\\"\"  \"\\\"\"  \"`\"  \"\\\"\"  \"[\"  \"Z\"  \"P\"
ex(2):  \"T\"  \"\\\"\"  \"\\\"\"  \"Vq\"  \"\\\"\\\"\"  \"G\\\"\"  \"2\"
ex(3):  \"\\\"{\\\"\"  \"d\\\"\"  \"P\\\"\"  \"\\\"F\"  \"@\\\"\"  \"mL\"
ex(5):  \"i\\\"\\\"\"  \"6\\\"\"  \"\\\"\"  \"z>\\\"\\\"~\"  \"\\\"\\\"\\\"]\"
ex(8):  \"~1\"  \"?S\\\"Z^\\\"\\\"\\\"\"  \"\\\"\\\">{\\\"?j\\\"\"
---------------- Examples from DFA ---------------
s1:  \"7\"

         

         #A: Carlos Nascimento
         #D: Matches standard 5 digit Brazilian Postal Codes (CEP), or the CEP + 3 digits (distribution identifiers - suffix).
For more info refer to: http://www.correios.com.br/servicos/cep/Estrutura_CEP.cfm (in portuguese).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=125
expr 78: ^\d{5}(-\d{3})?$
tree:   ([0-9]{5}(-[0-9]{3})?)
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9])(-(([0-9][0-9])[0-9]))?)#)
length: 5 to 9
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  77843-913  64783-334  82123  62062  88890  11991  99642
ex(2):  88873-076  97022-604  97917  34714  07803  90846  10376  52462
ex(3):  20910  88523  02209  28652  18530  83209-506  68270-908  00743-393
ex(5):  64407  65990  32005-318  98381-378  04656  59260  69901-215  11986-891
ex(8):  21994-248  22845-772  69644  32190-107  33617  78669-266  36879
---------------- Examples from DFA ---------------
s1:  76019
s6:  76019-198

         

         #A: Michael Ash
         #D: This re matches US currency format with lead dollar sign. Dollar value must have at least one digit and may or may not be comma separated. Cents value is optional.
         #T: US currency
         #U: http://regexlib.com/REDetails.aspx?regexp_id=126
expr 79: ^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$
tree:   (($(([0-9]{1,3}(,[0-9]{3})*)|[0-9]+))(.[0-9]{2})?)
augmnt: ((($(((([0-9][0-9]?)[0-9]?)(,(([0-9][0-9])[0-9]))*)|[0-9]+))(.([0-9][0-9]))?)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  $3  $6  $8  $7  $2  $0  $5  $0  $2  $2  $5  $3  $9  $4  $9  $0  $0  $2
ex(1):  $47  $0.36  $8.43  $82,620  $8,011.10  $6  $63,403.88  $5.76  $0  $5
ex(2):  $08,908,641  $8.46  $73,981,209.68  $3  $28,652  $50.09  $5,270,990
ex(3):  $634  $44  $690.00  $318.38  $37  $66,260,699,116  $198  $91  $602.94
ex(5):  $89,726.44  $190.10  $6174.66  $26636  $161.52  $760.41  $1,646.17  $0
ex(8):  $9,350,592,625,379,680,994  $23,335,721,321  $83,979,334,333.57  $19390
---------------- Examples from DFA ---------------
s1:  $6
s12:  $66
s11:  $664
s4:  $6.08
s10:  $6645
s7:  $6,577

         

         #A: Alban Schmid
         #D: This regular expression pattern can be used to check the validity of paths for file upload controls. The uploaded file can be either stored locally or accessible through UNC. It cannot contain illegal characters for the windows OS - that may be supported e.g. on Mac OS – and cannot be a URL (Yes, as weird as it may seem, some users enter URLs in the file upload box, even though there is a browse button...)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=127
expr 80: ([A-Z]:\\[^/:\*\?<>\|]+\.\w{2,6})|(\\{2}[^/:\*\?<>\|]+\.\w{2,6})
tree:   (((((([A-Z]:)\)[\x01-)+-.0-9;=@-{}~\u007f]+).)[0-9A-Z_a-z]{2,6})|(((\{2}[\x01-)+-.0-9;=@-{}~\u007f]+).)[0-9A-Z_a-z]{2,6}))
augmnt: ((((((([A-Z]:)\)[\x01-)+-.0-9;=@-{}~\u007f]+).)((((([0-9A-Z_a-z][0-9A-Z_a-z])[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?))|((((\\)[\x01-)+-.0-9;=@-{}~\u007f]+).)((((([0-9A-Z_a-z][0-9A-Z_a-z])[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  U:\\9.s2  A:\\[.Kc  \\\\=.BY  N:\\z.Ui  V:\\-.9W  \\\\i.UB  O:\\i.dC
ex(1):  G:\\C.O3Lp  F:\\2.OF_  E:\\}.fvOkl  \\\\V.713u  T:\\Z.xPdn
ex(2):  O:\\A.keN  \\\\\\.fwRZ  \\\\q.dGv  \\\\\\.ASG  \\\\Au.v3U2  \\\\7.iXaI
ex(3):  \\\\R.WcR5i  O:\\xS-.eBP_  S:\\SGG.EqH  \\\\SW.Y4L  \\\\%!I.Zl4K
ex(5):  \\\\zWC+k.e_xj  V:\\IN(.Vn_Jdg  T:\\l\\X.Rmo_g  M:\\YG.zTk
ex(8):  \\\\).sv2Q  K:\\en.32e  \\\\J;qjwg..Xt3  \\\\-.uHe8Z  L:\\AtbSRb.L8e26
---------------- Examples from DFA ---------------
s1:  \\\\-.nb
s11:  \\\\-.nbG
s10:  \\\\-.nbGv
s9:  \\\\-.nbGvJ
s8:  \\\\-.nbGvJd

         

         #A: Michael Ash
         #D: This RE validates alpha characters that evaluate to Roman numerials, ranging from 1(I) - 3999(MMMCMXCIX). Not case sensitive.
         #T: Roman numerials
         #U: http://regexlib.com/REDetails.aspx?regexp_id=128
ERROR:   ^(?i:(?=[MDCLXVI])((M{0,3})((C[DM])|(D?C{0,3}))?((X[LC])|(L?XX{0,2})|L)?((I[VX])|(V?(II{0,2}))|V)?))$
    rx: '(?...' unimplemented: in "^(?i:(?=[MDCLXVI])((M{0,3})((C[DM])|(D?C{0,3}))?((X[LC])|(L?XX{0,2})|L)?((I[VX])|(V?(II{0,2}))|V)?))$"

         

         #A: Nacho Varas
         #D: Matches a string if it is a valid time in the format of HH:MM / H:MM / HH / H
         #U: http://regexlib.com/REDetails.aspx?regexp_id=129
ERROR:   (^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$)
    rx: Embedded '^' unimplemented: in "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])$)|(^([0-9]|[1][0-9]|[2][0-3])$)"

         

         #A: Al Kahler
         #D: Matches US currency input with or without commas.  This provides a fix for the currency regular expression posted at http://regxlib.com/REDetails.aspx?regexp_id=70 by escaping the . (period) to ensure that no other characters may be used in it's place.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=130
expr 81: ^\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(\.[0-9][0-9])?$
tree:   (($?(((([0-9]{1,3},)([0-9]{3},)*)[0-9]{3})|[0-9]+))((.[0-9])[0-9])?)
augmnt: ((($?(((((([0-9][0-9]?)[0-9]?),)((([0-9][0-9])[0-9]),)*)(([0-9][0-9])[0-9]))|[0-9]+))((.[0-9])[0-9])?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4,656  7  8,798  6,004  8  0,620  2  8  4  3,094  4  8,780  7,842  0  4
ex(1):  9  $6  $9  $82,620  8,011.10  $4,939.03  $837,697,225.04  $1.34
ex(2):  5,879,279.14  90,523  28,652,185,088.09  $6  79,800,433  $7.63
ex(3):  $03,898,817  $0,059,600,990.62  $986.89  $16  94.24
ex(5):  $17  $692,368,921,179.75  01.19  879  719,066
ex(8):  09,827,224.50  $3  $03,297,833,433,365.38  $02606188.43  6629
---------------- Examples from DFA ---------------
s1:  0
s11:  08
s10:  087
s4:  0.96
s9:  0875
s7:  0,526

         

         #A: Andrew Balaschak
         #D: Fromat check for MM/YY, checks month is 1-12 and any 2 digit year.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=132
expr 82: ((0[1-9])|(1[02]))/\d{2}
tree:   ((((0[1-9])|(1[02]))/)[0-9]{2})
augmnt: (((((0[1-9])|(1[02]))/)([0-9][0-9]))#)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  05/56  10/87  10/10  06/60  10/27  08/30  01/46  02/02  10/90  12/07
ex(1):  10/78  10/48  02/26  09/08  04/01  12/09  10/68  10/40  10/87  10/69
ex(2):  09/79  12/47  12/80  12/84  05/37  06/46  03/32  10/14  01/06  01/38
ex(3):  05/24  12/08  08/93  09/68  08/99  07/74  10/93  03/63  05/64  08/65
ex(5):  07/63  10/81  10/04  01/59  09/69  10/62  12/98  02/91  02/60  05/47
ex(8):  06/37  10/44  01/90  12/73  10/78  05/92  09/87  10/17  12/27  04/41
---------------- Examples from DFA ---------------
s1:  03/71

         

         #A: Tom Svensson
         #D: Will match a VBScript string and/or comment
Ex:
' userinfo
strUsername = "tomsve"
iAge = 20
' temp
strPassword = "halloj"
...Would result in the following matches:
' userinfo
"tomsve"
' temp
"halloj"
Good luck!
Tom S. info@tomsvensson.com
         #U: http://regexlib.com/REDetails.aspx?regexp_id=133
expr 83: ("[^"]*")|('[^\r]*)(\r\n)?
tree:   ((("[\x01-!#-\u007f]*)")|(('[\x01-\f\x0e-\u007f]*)([\r][\n])?))
augmnt: (((("[\x01-!#-\u007f]*)")|(('[\x01-\f\x0e-\u007f]*)([\r][\n])?))#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  \"\"  \"\"  '  \"\"  '  \"\"  '  \"\"  \"\"  '  \"\"  \"\"  '  \"\"
ex(1):  '  '  \"\"  \"f\"  \"\"  '  '\r\n  \"P\"  'n  \"T\"  \"\"  \"\"  \"p\"
ex(2):  ',  \"\"  'u_\r\n  \"\"  'q\r\n  \"\"  \"o|\"  '(G\r\n  \"P\"  'uK
ex(3):  '\\@  \"1=\"  \"t\"  '  '  \"O(i\"  \"td\"  \"6\"  '<  \"c\"  '>>
ex(5):  'iW/;  '\r\n  \"Z{_Gx\"  '  \"\"  '\\  '/*U?\r\n  'ZS^  '  \"S/9G6\"
ex(8):  '  '?jdq;\r\n  '%!IC|\r\n  \"Y.7Y1(\"  ';\r\n  '`  'o  'k^\r\n  '\r\n
---------------- Examples from DFA ---------------
s1:  '
s4:  \"\"

         

         #A: V. Lorz
         #D: GUID Tester.
This is a modification from the regular expression submitted by James Bray (james@jamesbray.com). It allows the use of mixed upper and lowercase letters in the GUID string.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=134
expr 84: ^[A-Za-z0-9]{8}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{4}-[A-Za-z0-9]{12}$
tree:   (((((((([0-9A-Za-z]{8}-)[0-9A-Za-z]{4})-)[0-9A-Za-z]{4})-)[0-9A-Za-z]{4})-)[0-9A-Za-z]{12})
augmnt: (((((((((((((((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])-)((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z]))-)((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z]))-)((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z]))-)((((((((((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z]))#)
length: 36 to 36
-------------------- Examples --------------------
ex(0):  HWLOqV2o-BOzc-bIuq-YNJT-mUiVDpeA9WUu
ex(1):  FoyJJAqw-fvOO-kYl9-OaP7-Qu39uB3i3eGx
ex(2):  7wy5Iwd8-RVZ2-fWfd-fcvm-Bn8e5nASaGFt
ex(3):  MmVrGpVL-f9gs-cDR4-7igN-3YyEseBy0RnU
ex(5):  k4ZKK98s-yz5R-AxLM-CHAL-Op5bXYlZecmx
ex(8):  nh7k6zTc-dkkO-fgTe-WKJN-oggoNIpJsvf2
---------------- Examples from DFA ---------------
s1:  ksb3ouHt-cr5Z-y3wf-Mlxg-x8Mekt2B6r5w

         

         #A: Stewart Haddock
         #D: Checks domain names.  This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.) and hypens(-).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=138
expr 85: ^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(com|org|net|mil|edu|COM|ORG|NET|MIL|EDU)$
tree:   ((([0-9A-Za-z]+[.0-9A-Za-z-]+?).)(((co)m)|((or)g)|((ne)t)|((mi)l)|((ed)u)|((CO)M)|((OR)G)|((NE)T)|((MI)L)|((ED)U)))
augmnt: (((([0-9A-Za-z]+[.0-9A-Za-z-]+?).)(((co)m)|((or)g)|((ne)t)|((mi)l)|((ed)u)|((CO)M)|((OR)G)|((NE)T)|((MI)L)|((ED)U)))#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  H.mil  s.MIL  k.net  I.COM  J.net  i.COM  b.EDU  c.EDU  x.com  C.NET
ex(1):  C.org  x.EDU  u.org  J.ORG  L.com  yv.ORG  1.mil  5H.MIL  lo.ORG  Z.COM
ex(2):  Ok.NET  k.edu  o7.net  nu8.EDU  G8.COM  n.EDU  l.org  3.net  v.ORG
ex(3):  QrT.mil  Lh9.NET  45.net  Yu.MIL  RnU.COM  PEq.EDU  rd6bLi.NET  IVT.org
ex(5):  5RlxLNY.net  Xq.ORG  jEcnYgMD.MIL  JmYKt3i.EDU  hasg.NET
ex(8):  KJNFog.COM  sXVM.MIL  My.net  uGjRsKc.net  td39Kdk.A-Vb42o.NET
---------------- Examples from DFA ---------------
s1:  B.COM

         

         #A: David Huyck
         #D: Matches e-mail addresses, including some of the newer top-level-domain extensions, such as info, museum, name, etc.  Also allows for emails tied directly to IP addresses.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=140
expr 86: ^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.(([0-9]{1,3})|([a-zA-Z]{2,3})|(aero|coop|info|museum|name))$
tree:   (((((([0-9A-Z_a-z-]+(.[0-9A-Z_a-z-]+)*)@)[0-9A-Za-z-]+)(.[0-9A-Za-z-]+)*).)([0-9]{1,3}|[A-Za-z]{2,3}|(((ae)r)o)|(((co)o)p)|(((in)f)o)|(((((mu)s)e)u)m)|(((na)m)e)))
augmnt: ((((((([0-9A-Z_a-z-]+(.[0-9A-Z_a-z-]+)*)@)[0-9A-Za-z-]+)(.[0-9A-Za-z-]+)*).)((([0-9][0-9]?)[0-9]?)|(([A-Za-z][A-Za-z])[A-Za-z]?)|(((ae)r)o)|(((co)o)p)|(((in)f)o)|(((((mu)s)e)u)m)|(((na)m)e)))#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  c@w.JD  Q@Q.info  Y@c.aero  7@X.coop  4@O.7  9@G.coop  k@-.museum
ex(1):  d@s.y.museum  S@u.coop  U@d.t.museum  o.x@A.name  6.o@W.5.name
ex(2):  P@g.name  7.G.z@u8.J.info  w@n.B.O.info  P@u.aero  C.6.d6@E.aero
ex(3):  bKJ.quF.1.IE-@-.8V.w.pHm.aero  bLi@aZ.XVT.XIb  W@7Z.5Ib.jE.S8.name
ex(5):  rd.SFD2F.K8.4M.fuV._Y@eue.xb9n.info
ex(8):  qf48urh.t1.b@7bG.RFdrd2eE.V1fB0.VFBK.C.-a-iMFJ.6xYFHW.info
---------------- Examples from DFA ---------------
s1:  X@r.3
s10:  X@r.38
s9:  X@r.fX
s16:  X@r.ae
s17:  X@r.co
s18:  X@r.in
s19:  X@r.mu
s20:  X@r.na
s11:  X@r.381
s12:  X@r.aer
s13:  X@r.coo
s14:  X@r.mus
s15:  X@r.nam

         

         #A: Robert Dugre
         #D: Person's name (first, last, or both) in any letter case.  Although not perfect, this expression will filter out many incorrect name formats (especially numerics and invalid special characters).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=143
expr 87: ^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*$
tree:   ([A-Za-z]+(([ ',.-][ A-Za-z])?[A-Za-z]*)*)
augmnt: (([A-Za-z]+(([ ',.-][ A-Za-z])?[A-Za-z]*)*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  m  W  P  K  b  y  J  D  G  S  K  D  v  U  N  d  U  q  Y  B  E  W  i  j
ex(1):  wC  Z  a  F  D  y  X  M  y  t  t  K  o,Io  V I  TZ  a  f  T  A  r  Q  E
ex(2):  Z.t  dwM  r  XY,zBx'Ue  RW  v  P y  yb  Sx  l  PM,Gz  Je'J  TG  QTaXc
ex(3):  QqO  slM  QYv,Har  S-rZ  jxR  sY,Ywyi.ao,ej  bvMKzHE  SlHGq  v,Klrhbz
ex(5):  cmo-ksgNEigKfvADaPssMFn  YQknW,NTp ZUPy  dXUkbPKfv's  MU
ex(8):  uwAZZmW-VIhcxVTP,ZV  hpvjZMF.ELhyXGhoG'DT
---------------- Examples from DFA ---------------
s1:  A

         

         #A: Steve Valaitis
         #U: http://regexlib.com/REDetails.aspx?regexp_id=144
expr 88: ^((([0]?[1-9]|1[0-2])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)[0-5][0-9]((:|\.)[0-5][0-9])?))$
tree:   (((((((((0?[1-9])|(1[012]))(:|.))[0-5])[0-9])(((:|.)[0-5])[0-9])?) ?)((AM)|(am)|(aM)|(Am)|(PM)|(pm)|(pM)|(Pm)))|((((((0?[0-9])|(1[0-9])|(2[0-3]))(:|.))[0-5])[0-9])(((:|.)[0-5])[0-9])?))
augmnt: ((((((((((0?[1-9])|(1[012]))(:|.))[0-5])[0-9])(((:|.)[0-5])[0-9])?) ?)((AM)|(am)|(aM)|(Am)|(PM)|(pm)|(pM)|(Pm)))|((((((0?[0-9])|(1[0-9])|(2[0-3]))(:|.))[0-5])[0-9])(((:|.)[0-5])[0-9])?))#)
length: 4 to 11
-------------------- Examples --------------------
ex(0):  5:47pm  10:50aM  7.40Pm  12.49aM  5.02am  5:26AM  23.51  4.59  10:12am
ex(1):  12.09:22PM  0.08  00.37  04:57.23Am  01.50pM  12:24pM  09:02  6:32:22
ex(2):  03.05pM  19.40  08.16.03  2:00:59 AM  09.09 pm  22:56  20:29:56
ex(3):  9.47:22AM  17:56  02.55:53Pm  16.52  12.21 pm  7:39  21:19  03.00aM
ex(5):  15.46  23.28  12:02.04 am  10:46Am  03:34 am  3:33:20  12.23 AM  22:56
ex(8):  20:24  12:02.09  10.23.02AM  20:14.37  10:11 am  5.15:57 pm  04:30
---------------- Examples from DFA ---------------
s1:  0.28
s15:  2.59
s6:  2.59pm
s11:  2.59.17

         

         #A: Sonal Bordia
         #D: Alphanumeric, hyphen apostrophe, comma dash spaces
         #U: http://regexlib.com/REDetails.aspx?regexp_id=145
expr 89: ^[a-zA-Z0-9\s.\-_']+$
tree:   [\t-\r '.0-9A-Z_a-z-]+
augmnt: ([\t-\r '.0-9A-Z_a-z-]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  V  h  .  1  4  m  v  D  F  K  e  G  T  Y  0  p  S  .  a  p  D  l  X  j
ex(1):     s  h  H  k  t  8  s  e  l  N  H  H  p  1  N     w  K  J  V  y  Y  I
ex(2):  r  9Q  zl  qH  u  m7  h  5  l  7H  _t  P  A  2  d  kl  R  9v  w3  U7  m
ex(3):  7T  _Et  6s     H09  Rx  8t   2H  s  rB  QFY  _   7  vfP  n  U_  -YQ
ex(5):  xQZW  Nc.N  5vKd  w  wy  jvv  j  Q  Zyn  DL r  9  yEmG  4VPS1  pYolF
ex(8):  p9eqMpQs  G1n  Y_trS478  n2i.fOK   tOh3b  x  4JqZi   '  vpuJ  J2Ya9Rb
---------------- Examples from DFA ---------------
s1:  A

         

         #A: Brandon Luhring
         #D: Modified URL RegExp that requires (http, https, ftp)://, A nice domain, and a decent file/folder string. Allows : after domain name, and these characters in the file/folder sring (letter, numbers, - . _ ? , ' / \ + & % $ # = ~). Blocks all other special characters-good for protecting against user input!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=146
expr 90: ^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*$
tree:   (((((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)[.0-9A-Za-z-]+).)[A-Za-z]{2,3})(:[0-9A-Za-z]*)?)/?)[#-'+-9=?A-Z\_a-z~]*)
augmnt: ((((((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)[.0-9A-Za-z-]+).)(([A-Za-z][A-Za-z])[A-Za-z]?))(:[0-9A-Za-z]*)?)/?)[#-'+-9=?A-Z\_a-z~]*)#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://Q.KD  ftp://c.EW  http://e.AB  ftp://G.LA  http://K.sK
ex(1):  http://f.aS:y  ftp://U.ZVr:u  ftp://l.MY$  http://Q.vm/D  https://F.ez:
ex(2):  ftp://w.lQbyq  ftp://yo.dm:/u  ftp://C.uad/-  http://Ii.wH/%
ex(3):  ftp://sMp.qLG/nDO  ftp://XVT.HX:98gk  ftp://mNY.MK:l/s
ex(5):  https://FtEDr.PK/Ph-3#  http://u.UZK/y$  http://Aw.xNat
ex(8):  http://-.vjM:/E7ScgS4S  ftp://iioR.DU/=&n  ftp://YTt1B5b0.kQbb
---------------- Examples from DFA ---------------
s1:  ftp://n.FJ
s12:  ftp://n.FJ:
s13:  ftp://n.FJP
s18:  ftp://n.FJ.
s19:  ftp://n.FJ9
s17:  ftp://n.FJ.A

         

         #A: Marco Storti
         #D: This expression validates dates in the ITALIAN d/m/y format from 1/1/1600 - 31/12/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00 since it could be any century (1900, 2000, 2100). Days and months must be 1 or 2 digits and may have leading zeros. Years must be 2 or 4 digit years. 4 digit years must be between 1600 and 9999. Date separator may be a slash (/), dash (-), or period (.)
Thanks to Michael Ash for US Version
         #U: http://regexlib.com/REDetails.aspx?regexp_id=151
ERROR:   ^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$
    rx: \1 (backref) unimplemented: in "^(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2])\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)0?2\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9])|(?:1[0-2]))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"

         

         #A: Jaime Borges
         #D: This regular expression validates that the data entered is a number with a maximum of two integers and two decimals and a minimum of one integer or one decimal.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=152
expr 91: ^\d{0,2}(\.\d{1,2})?$
tree:   ([0-9]{0,2}(.[0-9]{1,2})?)
augmnt: ((([0-9]?[0-9]?)(.([0-9][0-9]?))?)#)
length: 0 to 5
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  .5  7  9  .0  8  6  28.80  4.6  7  0  .7    7  9.3  8.43    22      .01
ex(2):    3.4  7  3.06  7  5  .97  4.4  8  20    07  2    92.9  4  1  .3    8
ex(3):  3  2  3.6  .79    4.89  65.3  .4  4  90  2  3.88  87  7  .09    .01
ex(5):  .81  5.0  94.2    .37  .4  2.05  03.14  8  92  6  9.19  25  6.49  2  9
ex(8):    .26  .12  2  3.39    6.9    9    3  .5  24.1    3  7.34  3.67  8.30  
---------------- Examples from DFA ---------------
s0:  
s3:  8
s5:  .4
s2:  83
s4:  .46

         

         #A: Michael Krutwig
         #D: This Regex (can be used e.g. in PHP with eregi) will match any valid URL. Unlike the other exapmles here, it will NOT match a valid URL ending with a dot or bracket. This is important if you use this regex to find and "activate" Links in an Text
         #U: http://regexlib.com/REDetails.aspx?regexp_id=153
expr 92: ^(http|https|ftp)\://[a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*[^\.\,\)\(\s]$
tree:   ((((((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)[.0-9A-Za-z-]+).)[A-Za-z]{2,3})(:[0-9A-Za-z]*)?)/?)[#-'+-9=?A-Z\_a-z~]*)[\x01-\b\x0e-\x1f!-'*+/-\u007f-])
augmnt: (((((((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)[.0-9A-Za-z-]+).)(([A-Za-z][A-Za-z])[A-Za-z]?))(:[0-9A-Za-z]*)?)/?)[#-'+-9=?A-Z\_a-z~]*)[\x01-\b\x0e-\x1f!-'*+/-\u007f-])#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://Q.KDR  http://9.ijc  https://4.uF#  https://N.uy'  https://S.PPi
ex(1):  http://i.UsX  https://r.cG/Z3  ftp://6.hue:z  https://w.eCue
ex(2):  https://J.aiTwJE  ftp://O.OH/I3W  http://w.Yv:3?  http://T.ZQoMS
ex(3):  https://D.glHX,?  http://ie.lSr/U%TN  ftp://DZ.Pjs/\\iz
ex(5):  https://YKt3i.hCX/v2]  ftp://K8.UR/l#<  https://s.LxrihN6
ex(8):  http://A-.vjM:/E7ScgS4S*  ftp://oRG.Uq:5OYfaVY!  ftp://07bG.KVxC
---------------- Examples from DFA ---------------
s1:  ftp://N.hY@
s13:  ftp://N.hY/
s18:  ftp://N.hYT
s22:  ftp://N.hY3
s19:  ftp://N.hY.j
s21:  ftp://N.hY.jV

         

         #A: Ted Rudyk
         #D: This will grep for a valid MAC address , with colons seperating octets. It will ignore strings too short or long, or with invalid characters.  It will accept mixed case hexadecimal. Use extended grep.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=154
expr 93: ^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$
tree:   ((([0-9A-Fa-f][0-9A-Fa-f]):){5}([0-9A-Fa-f][0-9A-Fa-f]))
augmnt: (((((((([0-9A-Fa-f][0-9A-Fa-f]):)(([0-9A-Fa-f][0-9A-Fa-f]):))(([0-9A-Fa-f][0-9A-Fa-f]):))(([0-9A-Fa-f][0-9A-Fa-f]):))(([0-9A-Fa-f][0-9A-Fa-f]):))([0-9A-Fa-f][0-9A-Fa-f]))#)
length: 17 to 17
-------------------- Examples --------------------
ex(0):  10:1B:d7:7C:D8:6a  fF:Df:23:A1:fF:Cd  37:Ab:D3:DB:cc:d4
ex(1):  fe:19:AE:aB:a2:d3  e8:Fd:7F:0A:BE:fc  b6:fA:f0:DD:Ec:2f
ex(2):  26:7e:De:6d:1a:66  bB:2b:d9:3a:A9:a0  df:Eb:c5:4f:d4:fa
ex(3):  91:ce:F0:14:9F:fa  b0:D1:e1:0A:aD:cF  4D:59:BF:dB:28:a0
ex(5):  d7:EF:ee:41:D0:ed  f1:e0:67:9e:95:39  aA:29:e4:aA:d2:dA
ex(8):  d5:0A:aF:9b:bF:db  aE:be:37:CB:3C:eD  aA:16:C0:ba:AE:c3
---------------- Examples from DFA ---------------
s1:  f3:18:d2:ba:fa:Cd

         

         #A: Samir AZZA
         #D: Percentage with 3 number after comma.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=155
ERROR:   ^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$
    rx: Embedded '$' unimplemented: in "^100$|^[0-9]{1,2}$|^[0-9]{1,2}\,[0-9]{1,3}$"

         

         #A: Samir AZZA
         #D: Correct French DateTime(DD/MM/YYYY OR DD/MM/YYYY HH:MM:SS)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=156
ERROR:   ^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$
    rx: Embedded '$' unimplemented: in "^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2})$|^(([0-2]\d|[3][0-1])\/([0]\d|[1][0-2])\/[2][0]\d{2}\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$"

         

         #A: Jeremy Samuel
         #D: Password expresion that requires one lower case letter, one upper case letter, one digit, 6-13 length, and no spaces. This is merely an extension of a previously posted expression by Steven Smith (ssmith@aspalliance.com) . The no spaces is new.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=157
ERROR:   ^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{4,8}$
    rx: '(?...' unimplemented: in "^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{4,8}$"

         

         #A: Nathan Pitts
         #D: Host/Domain name validation for perl.
Should be combined with a check for
length <= 63 characters and that $2
is in a list of top-level domains.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=158
expr 94: ^([a-zA-Z0-9][-a-zA-Z0-9]*[a-zA-Z0-9]\.)+([a-zA-Z0-9]{3,5})$
tree:   (((([0-9A-Za-z][0-9A-Za-z-]*)[0-9A-Za-z]).)+[0-9A-Za-z]{3,5})
augmnt: ((((([0-9A-Za-z][0-9A-Za-z-]*)[0-9A-Za-z]).)+(((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z])[0-9A-Za-z]?)[0-9A-Za-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  HW.OqV  2o.BOz  cl.uqB  YN.Tdm  Ui.Dpe  A9.Uuc  eC.B0x  Kb.HdC  0K.hMN
ex(1):  5qr.xLtRY  3O.oyJ  qL.fvOyl  9sa.71Q3u  BH3.GxPd  W5Z.8r0F  f5B.dOk
ex(2):  z7.y5I  n72.fWf  c8B.Awkn.SaG  lMO.DQv  UA-v.OH6X.a9I  x3.QoCKV
ex(3):  RZbKg.NMquC.B0.nUHc  SS3wX.amr.rd6h4  YLy.6Izh  Zu4.KWYs.y5.lxL1
ex(5):  xN.c8k.mpfa  J-g.dt3ic.RmOag  wDh.kz.c4Mk.Sg.e6FN.oggNi
ex(8):  dF2MA-Vb48.5cREw.2x.Yx8e
---------------- Examples from DFA ---------------
s1:  Vv.VI9
s8:  Vv.VI9f
s7:  Vv.VI9fk

         

         #A: Peter Friese
         #D: This one matches all strings that do not contain the single quotation mark (').
         #U: http://regexlib.com/REDetails.aspx?regexp_id=159
expr 95: ^[^']*$
tree:   [\x01-&(-\u007f]*
augmnt: ([\x01-&(-\u007f]*#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      I  S  w        [        4      2      I      T  d  .    M    )  G  
ex(2):  r          iV  L      {y    m}  7  C  IZ    TP  B8          gT    XO  
ex(3):      $p  D{  B  M  tlV  ml    }~V      ;    A9  ^u1  yh    wM  {  ~o  e
ex(5):  (G  0  //  P    @GuK=  .{    ;](  @`+hU  =Zm1L  xqo  kylW  n_HO  i\\hDt
ex(8):  \\6t]    <Ri-#c%$  z>>  b  mY  &e\\iW/;  PP_    7]wkZ{_  x2f]  $R@.DC
---------------- Examples from DFA ---------------
s0:  

         

         #A: K Thompson
         #D: This validates a number between 1 and 255. Could be modified to IP, or just to verify a number in a range.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=160
expr 96: ^([1-9]|[1-9]\d|1\d{2}|2[0-4]\d|25[0-5])$
tree:   ([1-9]|([1-9][0-9])|(1[0-9]{2})|((2[0-4])[0-9])|((25)[0-5]))
augmnt: (([1-9]|([1-9][0-9])|(1([0-9][0-9]))|((2[0-4])[0-9])|((25)[0-5]))#)
length: 1 to 3
-------------------- Examples --------------------
ex(0):  254  8  188  248  110  1  4  71  50  87  248  209  250  228  4  184
ex(1):  250  184  209  46  255  253  251  126  162  2  240  2  99  19  252  189
ex(2):  1  188  157  8  77  1  156  9  251  134  140  8  232  250  51  4  185
ex(3):  243  199  242  1  26  202  202  198  165  118  7  1  220  251  2  32
ex(5):  250  7  250  236  136  238  5  251  251  255  105  231  233  224  230
ex(8):  3  252  9  253  12  61  58  23  210  252  7  59  250  254  209  222  66
---------------- Examples from DFA ---------------
s1:  1
s3:  2
s5:  4
s2:  25
s4:  29

         

         #A: Benjamin Gray
         #D: Using other regular experssions from this page, combining others for email addresses, and mixing in my own ideas - I came up with this regular expression.  Can be used to validate input into a database.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=161
expr 97: ^((https?|ftp)\://((\[?(\d{1,3}\.){3}\d{1,3}\]?)|(([-a-zA-Z0-9]+\.)+[a-zA-Z]{2,4}))(\:\d+)?(/[-a-zA-Z0-9._?,'+&%$#=~\\]+)*/?)$
tree:   ((((((((((((ht)t)p)s?)|((ft)p)):)/)/)(((([?([0-9]{1,3}.){3})[0-9]{1,3})]?)|(([0-9A-Za-z-]+.)+[A-Za-z]{2,4})))(:[0-9]+)?)(/[#-'+-.0-9=?A-Z\_a-z~]+)*)/?)
augmnt: (((((((((((((ht)t)p)s?)|((ft)p)):)/)/)(((([?((((([0-9][0-9]?)[0-9]?).)((([0-9][0-9]?)[0-9]?).))((([0-9][0-9]?)[0-9]?).)))(([0-9][0-9]?)[0-9]?))]?)|(([0-9A-Za-z-]+.)+((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?))))(:[0-9]+)?)(/[#-'+-.0-9=?A-Z\_a-z~]+)*)/?)#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://8.7.8.6  ftp://1.2.1.7  http://7.6.9.8  http://7.6.0.7
ex(1):  ftp://2.0.9.190]  https://W.gBM:9/q  ftp://K.jey/e/
ex(2):  http://k.HUQ:8/  http://[79.04.39.656]/W  https://03.18.87.7/Z/W
ex(3):  https://[4.29.503.67]/J5_/jm+/  ftp://[09.92.76.719
ex(5):  http://3nd.K.He5qa.PU:83344/n-n=/DE7S/S/YPos/xf  http://66.960.77.30
ex(8):  https://6Eg.Lk4t-.zq.TtF-l.tiS.Oe:22337/oEl/RI_3\\/EREDI.Nd/$%/Za=FJ'/,\\UkQ~+%/DX-Xu/
---------------- Examples from DFA ---------------
s1:  ftp://-.tk
s13:  ftp://-.tk/
s15:  ftp://-.tkS
s22:  ftp://-.tk:8
s23:  ftp://-.tk/f
s14:  ftp://-.tkSs
s24:  ftp://2.6.6.8
s35:  ftp://[1.2.9.8
s33:  ftp://2.6.6.8]
s36:  ftp://2.6.6.89
s34:  ftp://[1.2.9.84
s25:  ftp://2.6.6.894
s43:  ftp://[1.2.9.847

         

         #A: Snikwad Kcirtap
         #D: matches non-negative decimal floating points numbers less than 10
         #U: http://regexlib.com/REDetails.aspx?regexp_id=162
expr 98: ^[0-9](\.[0-9]+)?$
tree:   ([0-9](.[0-9]+)?)
augmnt: (([0-9](.[0-9]+)?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  0.7  8.8  3  0.7  4  8.8  0  7  8  2.7  4  4  7.4  3.9  1.4  7  3.3
ex(2):  8  1  3  6  0  2  8  8.1  1.09  9  4  2  8.94  0.8  8.70  7  9.2  5.4
ex(3):  3  7.07  8  3  9  8  6  1  3.52  4  2  7.7  9.420  9.88  5  3  0  2  9
ex(5):  6.18530  8  3  0.5  0  6  2.990  8  0.3839  3  7.34  8  5  4  0.59  9
ex(8):  5.18  9  3  1.7804  6.59260  0  9.1621  5.867389  1  9.021  9.72482284
---------------- Examples from DFA ---------------
s1:  3
s2:  3.1

         

         #A: Snikwad Kcirtap
         #D: Dollar Amount
         #U: http://regexlib.com/REDetails.aspx?regexp_id=163
expr 99: (\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{3})?)$
tree:   ((((([0-9]{1,3},)([0-9]{3},)*)[0-9]{3})(.[0-9]{1,3})?)|([0-9]{1,3}(.[0-9]{3})?))
augmnt: (((((((([0-9][0-9]?)[0-9]?),)((([0-9][0-9])[0-9]),)*)(([0-9][0-9])[0-9]))(.(([0-9][0-9]?)[0-9]?))?)|((([0-9][0-9]?)[0-9]?)(.(([0-9][0-9])[0-9]))?))#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4,656  7  8,798  6,004  8  0,620  2  8  4  3,094  4  8,780  7,842  0  4
ex(1):  301,478.43  222,062  80,199,099  2,399,037  837,697,225.07  104.400
ex(2):  17,524,287.298  4.068  58,209,286,241  3  23  0  79,800,433  965.348
ex(3):  2.631  98,437,046,605,260  901,151,986,389.91  294,248,284.37
ex(5):  692,368,921,179.726  149,287,646,717,600,667,276  71,926,735,359
ex(8):  424  83,979,334,333,657,381,390,606,889  33,296,464,666,666,365,478,703
---------------- Examples from DFA ---------------
s1:  2
s4:  24
s3:  249
s6:  2,566
s8:  2.252
s10:  2,566.1
s7:  2,566.11

         

         #A: Snikwad Kcirtap
         #U: http://regexlib.com/REDetails.aspx?regexp_id=164
expr 100: \$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9]?)?$
tree:   ((((($[0-9]?)[0-9]?)[0-9]?)(((,[0-9])[0-9])[0-9])*?)((.[0-9])[0-9]?)?)
augmnt: (((((($[0-9]?)[0-9]?)[0-9]?)(((,[0-9])[0-9])[0-9])*?)((.[0-9])[0-9]?)?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $
ex(1):  $2.80  $44.8  $0.7  $7  $016.34  $4.6  $  $01,099  $.94  $7.50  $7
ex(2):  $8.8  $07  $  $39,420.0  $28  $8  $8  $2  $  $90  $43,675.3  $6
ex(3):  $7,046,605,260  $91  $19.81  $56.9  $2  $97  $.10  $13.48  $92  $9.19
ex(5):  $49,796,677.9  $.26  $01  $,035,246,563.8  $9  $3  $302.1  $3  $783
ex(8):  $  $8.16  $64  $,693,504,857,367,800,448,972
---------------- Examples from DFA ---------------
s1:  $
s5:  $4
s9:  $42
s4:  $.7
s8:  $421
s3:  $.74

         

         #A: yahnique barrett
         #U: http://regexlib.com/REDetails.aspx?regexp_id=165
expr 101: \$[0-9]?[0-9]?[0-9]?((\,[0-9][0-9][0-9])*)?(\.[0-9][0-9])?$
tree:   ((((($[0-9]?)[0-9]?)[0-9]?)(((,[0-9])[0-9])[0-9])*?)((.[0-9])[0-9])?)
augmnt: (((((($[0-9]?)[0-9]?)[0-9]?)(((,[0-9])[0-9])[0-9])*?)((.[0-9])[0-9])?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $
ex(1):  $2.83  $44  $8  $04  $7,913  $89,821  $  $.01  $909  $,940.88  $37.02
ex(2):  $41  $82,464.37  $2  $929,420.06  $28  $8  $8  $2  $  $90  $43,675.34
ex(3):  $9,320,536.89  $87,046,605,260  $91  $19.89  $56  $97  $.37  $6
ex(5):  $9.87  $67,752.01  $9,796,677.96  $.27  $0,492  $305  $67  $9  $3
ex(8):  $3  $783  $367.19  $0  $8.13  $6,436,696,693,504,857  $0  $,265
---------------- Examples from DFA ---------------
s1:  $
s5:  $4
s4:  $49
s8:  $497
s3:  $.34

         

         #A: martin devos
         #D: this expression validates a date-time field in European d/m/y h:m:s format. It is a european variation of Michael Ash's date-validation expression in this library.
The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999, and all 2 digits years except 00
         #U: http://regexlib.com/REDetails.aspx?regexp_id=166
expr 102: ^((((31\/(0?[13578]|1[02]))|((29|30)\/(0?[1,3-9]|1[0-2])))\/(1[6-9]|[2-9]\d)?\d{2})|(29\/0?2\/(((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))|(0?[1-9]|1\d|2[0-8])\/((0?[1-9])|(1[0-2]))\/((1[6-9]|[2-9]\d)?\d{2})) (20|21|22|23|[0-1]?\d):[0-5]?\d:[0-5]?\d$
tree:   ((((((((((((((((31)/)((0?[13578])|(1[02])))|((((29)|(30))/)((0?[,13-9])|(1[012]))))/)((1[6-9])|([2-9][0-9]))?)[0-9]{2})|((((((29)/)0?)2)/)((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)))|((((((0?[1-9])|(1[0-9])|(2[0-8]))/)((0?[1-9])|(1[012])))/)(((1[6-9])|([2-9][0-9]))?[0-9]{2}))) )((20)|(21)|(22)|(23)|([01]?[0-9]))):)[0-5]?)[0-9]):)[0-5]?)[0-9])
augmnt: (((((((((((((((((31)/)((0?[13578])|(1[02])))|((((29)|(30))/)((0?[,13-9])|(1[012]))))/)((1[6-9])|([2-9][0-9]))?)([0-9][0-9]))|((((((29)/)0?)2)/)((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)))|((((((0?[1-9])|(1[0-9])|(2[0-8]))/)((0?[1-9])|(1[012])))/)(((1[6-9])|([2-9][0-9]))?([0-9][0-9])))) )((20)|(21)|(22)|(23)|([01]?[0-9]))):)[0-5]?)[0-9]):)[0-5]?)[0-9])#)
length: 12 to 19
-------------------- Examples --------------------
ex(0):  31/8/88 22:6:0  29/2/1600 23:3:0  2/6/78 22:4:9  29/12/39 1:6:7
ex(1):  29/2/3200 2:9:34  06/10/76 22:16:9  29/2/8800 22:6:03  29/2/16 1:0:46
ex(2):  8/3/1990 20:38:16  30/5/40 5:24:0  30/07/6378 5:5:6
ex(3):  30/10/28 20:06:4  31/12/1736 22:6:52  29/2/1992 22:41:1
ex(5):  11/09/5035 22:23:06  25/2/73 22:27:03  16/01/97 23:3:56
ex(8):  31/03/1896 21:44:5  16/2/44 20:5:5  29/2/1600 23:3:50  31/10/35 22:3:23
---------------- Examples from DFA ---------------
s1:  1/1/01 1:0:4
s16:  1/1/01 1:0:7

         

         #A: Zrekam makerZ
         #D: Easy expression that checks for valid email addresses.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=167
expr 103: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
tree:   (((([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)[A-Za-z]{2,5})
augmnt: ((((([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  c@..by  F@Q.KD  8@K.dU  U@V.Wi  n@7.BK  x@o.au  V@F.yU  e@u.FQ  I@1.Xs
ex(1):  V@L.RKyb  y@6.SfO  i@5.QSm  _@h.lmd  _@m.rHX  Z@W.gBMe  L@Q.vmp  l@5.eC
ex(2):  I@r.MmI  M@78.zmQ  6a@..Tb  qO@x.wvQ  r@A.lM  6@d6.ZuGd  Lr@VQ.oCR
ex(3):  B@quF.PUjv  Y@D.glH  pHm@EyT.lJkl  Zs@VT.HXb  Y@7_.vPn  mNY@R.eFva
ex(5):  DU@XAN.Tplf  F3i@gFtED.kbK  D2F@K8.URU  u@l.Koa  T.s@b.uGgx
ex(8):  e5@TZ95u2..MCvZ  fcRE@Ht-QAQ.Noro  6i@RG6.qMq  Cf48@hhYTt1B5.eK
---------------- Examples from DFA ---------------
s1:  0@4.lE
s9:  0@4.lEG
s8:  0@4.lEGd
s7:  0@4.lEGdL

         

         #A: Greg Burns
         #D: Validate “Time” Data to Work with SQL Server
This is a fix (I hope) for a problem with the original expression.  It originally allowed any combination of am or pm. For example: ma, aa, mm, mp, etc.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=172
ERROR:   (^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)
    rx: Embedded '^' unimplemented: in "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$)"

         

         #A: Michael Trefry
         #D: This regular expression validates a number NOT 0, with no more than 5 places ahead and 3 places behind the decimal point.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=173
ERROR:   (?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,3})?$
    rx: '(?...' unimplemented: in "(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,3})?$"

         

         #A: Thor Larholm
         #D: Most email validation regexps are outdated and ignore the fact that domain names can contain any foreign character these days, as well as the fact that anything before @ is acceptable. The only roman alphabet restriction is in the TLD, which for a long time has been more than 2 or 3 chars (.museum, .aero, .info). The only dot restriction is that . cannot be placed directly after @.
This pattern captures any valid, reallife email adress.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=174
expr 104: ^.+@[^\.].*\.[a-z]{2,}$
tree:   ((((([\x01-\u007f]+@)[\x01-,/-\u007f-])[\x01-\u007f]*).)[a-z]{2,})
augmnt: (((((([\x01-\u007f]+@)[\x01-,/-\u007f-])[\x01-\u007f]*).)([a-z][a-z]+))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  ~@(.hi  ;@#.kb  [@1.ns  H@R.ig  D@J.rw  m@f.sh  M@`.zm  N@).yu  O@u.ae
ex(1):  4@m.ph  C@I:.ps  A@8n.os  g@s.iu  g@p.ab  p@DV.ts  `@l.sm  P@}V.st
ex(2):  u1@y4J.nko  o@e\".fd  )/@;/.oyg  g@{.rk  @`@h1=.uhn  q@O.jq  _@Oi\\.yr
ex(3):  R@-c.ra  >+@7Ya.do  W/@tP_x.nnz  {_G@2].ypc  C@jB7.uv  ?@Sy(.etcb
ex(5):  +@8g{IJ.fbf  q;(s@I3%!I.mtb  ThY.7@1jH[<.pcbm  `;U^:@zC+k^s.sfs
ex(8):  uYTf6T@\\~`D.yoe  LSV+w;gY@?.qchg  T]/.;CI@,owqk;sCa.xmu  |@0^.iekwlhsq
---------------- Examples from DFA ---------------
s1:  j@m.sq

         

         #A: john hamman
         #D: This will match results in a template situation. For example:
template reads
Dear @@Name@@,
....
would become
Dear John,
If you dont want to use the @@ change the @ to what ever characters you want.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=175
expr 105: @{2}((\S)+)@{2}
tree:   ((@{2}[\x01-\b\x0e-\x1f!-\u007f]+)@{2})
augmnt: ((((@@)[\x01-\b\x0e-\x1f!-\u007f]+)(@@))#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  @@8@@  @@~@@  @@R@@  @@}@@  @@=@@  @@C@@  @@j@@  @@O@@  @@W@@  @@w@@
ex(1):  @@A@@  @@X@@  @@i@@  @@/@@  @@A@@  @@'@@  @@#@@  @@!@@  @@M@@  @@>@@
ex(2):  @@,@@  @@D@@  @@8.@@  @@@S@@  @@q@@  @@&C@@  @@Q@@  @@of@@  @@d@@
ex(3):  @@JZJ@@  @@@'@@  @@]u@@  @@i1C@@  @@{hQ@@  @@]@@  @@Vvm@@  @@;v-@@
ex(5):  @@@FBE@@  @@)%yN@@  @@U_*@@  @@1S3Z@@  @@bI8)@@  @@-qy@@  @@\\@@
ex(8):  @@><DfTum@@  @@g:@@  @@&N$}*.k@@  @@M@@  @@9yx#7Y;L@@  @@ZD!jzb@@
---------------- Examples from DFA ---------------
s1:  @@?@@

         

         #A: Erik Pettersson
         #D: A regular expression that matches numbers. Integers or decimal numbers with or without the exponential form.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=185
expr 106: ^[+-]?([0-9]*\.?[0-9]+|[0-9]+\.?[0-9]*)([eE][+-]?[0-9]+)?$
tree:   (([+-]?((([0-9]*.?)[0-9]+)|(([0-9]+.?)[0-9]*)))(([Ee][+-]?)[0-9]+)?)
augmnt: ((([+-]?((([0-9]*.?)[0-9]+)|(([0-9]+.?)[0-9]*)))(([Ee][+-]?)[0-9]+)?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  6  6  7  8  7  8  6  0  4  8  0  6  0  2  8  4  3  0  4  4  8  7  0
ex(1):  9  -7e+9  +.3E+8  2.  8  01e+9  -8E-0  +7e7  7  +.9e+7  -.0e8  .3e-4
ex(2):  +4210  80  86e+30  9e6  99  .38e53  86  499  0E+83  43.46e-6  9916
ex(3):  +5161e+4  84.77  44219  +3.74e99  36921  +756  -981796  179  74604e+2
ex(5):  -6800.84  2243.72E46  3297e+33336  +8.9026  8984.3  6.43  693
ex(8):  97562E61  14.3  303304449e-50277143  3081715E-31  3.750619  372284238
---------------- Examples from DFA ---------------
s1:  1
s4:  1.
s6:  1e4

         

         #A: Paul Miller
         #U: http://regexlib.com/REDetails.aspx?regexp_id=186
expr 107: ^([1-zA-Z0-1@.\s]{1,255})$
tree:   [\t-\r .0-z]{1,255}
augmnt: ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([\t-\r .0-z][\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)[\t-\r .0-z]?)#)
length: 1 to 255
-------------------- Examples --------------------
ex(0):  V  h  .  1  4  m  v  D  ;  V  e  G  T  Y  0  p  S  \\  M  a  p  D  l  X
ex(1):  a  \\  ]  s  h  H  k  t  `  S  @  T  e  l  N  H  [  D  p  :  r  =     w
ex(2):  V  YI  Hr  9Q  z:  Y  4H  u  m7  h  5  l  ;w  0[  tY  KL  =  ;  yk  AR
ex(3):  <w3  U7  m  X;T  7T  _Et  6s  =  nH  9Y  ;y8   I  Hr  U^  XBG  MF  >4
ex(5):  vf  Pn=]s  <  YQi>  5QxQ  @WD  m  .  15vK  a^:C  yK  v=j  j  Q  Zyn
ex(8):  F9JyE:S<  R  V  4S1Fp  o  N  BVtaY@p  eqMpQ:YJ  ^NnpY  ?trS4  8l  2i.f
---------------- Examples from DFA ---------------
s1:  f
s255:  f 
s254:  f t
s253:  f tO
s252:  f tOh
s251:  f tOh3
s250:  f tOh3b
s249:  f tOh3b:
s248:  f tOh3b:x
s247:  f tOh3b:xM
s246:  f tOh3b:xM4
s245:  f tOh3b:xM4J
s244:  f tOh3b:xM4Jq
s243:  f tOh3b:xM4JqZ
s242:  f tOh3b:xM4JqZ=
s241:  f tOh3b:xM4JqZ=L
s240:  f tOh3b:xM4JqZ=L^
s239:  f tOh3b:xM4JqZ=L^=
s238:  f tOh3b:xM4JqZ=L^=D
s237:  f tOh3b:xM4JqZ=L^=D 
s236:  f tOh3b:xM4JqZ=L^=D d
s235:  f tOh3b:xM4JqZ=L^=D dv
s234:  f tOh3b:xM4JqZ=L^=D dvp
s233:  f tOh3b:xM4JqZ=L^=D dvpu
s232:  f tOh3b:xM4JqZ=L^=D dvpuJ
s231:  f tOh3b:xM4JqZ=L^=D dvpuJz
s230:  f tOh3b:xM4JqZ=L^=D dvpuJzJ
s229:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2
s228:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Y
s227:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya
s226:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9
s225:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9R
s224:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9Rb
s223:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR
s222:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1
s221:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1l
s220:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lk
s219:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkS
s218:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSr
s217:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv
s216:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?
s215:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@
s214:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@L
s213:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LN
s212:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk
s211:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?
s210:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5
s209:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5R
s208:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RG
s207:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGs
s206:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsM
s205:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM
s204:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7
s203:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.
s202:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z
s201:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@
s200:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@e
s199:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eN
s198:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN
s197:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9
s196:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9G
s195:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk
s194:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=
s193:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7
s192:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7R
s191:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZ
s190:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZw
s189:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm
s188:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3
s187:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O
s186:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]
s185:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Q
s184:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg
s183:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9
s182:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@
s181:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@z
s180:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zo
s179:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoX
s178:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC
s177:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8
s176:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8l
s175:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx
s174:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7
s173:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y
s172:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`
s171:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`s
s170:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`sv
s169:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr
s168:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]
s167:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<
s166:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<
s165:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N
s164:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3
s163:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:
s162:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n
s161:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[
s160:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.
s159:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4
s158:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<
s157:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<l
s156:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll
s155:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;
s154:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n
s153:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?
s152:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?w
s151:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wj
s150:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr
s149:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4
s148:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Z
s147:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Zn
s146:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb
s145:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb2
s144:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20
s143:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20k
s142:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kH
s141:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHz
s140:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzA
s139:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzAN
s138:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX
s137:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6
s136:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6r
s135:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rp
s134:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS
s133:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\
s132:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\D
s131:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\Dx
s130:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP
s129:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8
s128:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8h
s127:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hf
s126:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJ
s125:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJG
s124:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGw
s123:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwu
s122:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuO
s121:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZ
s120:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZA
s119:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZAR
s118:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg
s117:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:
s116:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0
s115:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V
s114:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.
s113:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L
s112:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4
s111:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4T
s110:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4Tb
s109:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQ
s108:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs
s107:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0
s106:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T
s105:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<
s104:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<l
s103:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lg
s102:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgS
s101:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY
s100:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8
s99:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B
s98:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`
s97:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Y
s96:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx
s95:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`
s94:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]
s93:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]n
s92:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nW
s91:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWF
s90:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFb
s89:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba
s88:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2
s87:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<
s86:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<y
s85:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yE
s84:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQ
s83:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQc
s82:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcr
s81:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk
s80:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4
s79:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D
s78:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2
s77:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 
s76:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b
s75:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b3
s74:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32
s73:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32D
s72:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32Ds
s71:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP
s70:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0
s69:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;
s68:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_
s67:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a
s66:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]
s65:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]i
s64:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]im
s63:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imG
s62:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGN
s61:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNH
s60:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHN
s59:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNk
s58:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP
s57:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.
s56:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s
s55:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[
s54:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[l
s53:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lA
s52:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAX
s51:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXW
s50:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf
s49:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4
s48:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L
s47:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:
s46:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.
s45:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.B
s44:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BB
s43:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBo
s42:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoH
s41:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHd
s40:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZ
s39:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZf
s38:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW
s37:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW 
s36:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n
s35:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n8
s34:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n89
s33:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891
s32:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891e
s31:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eK
s30:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs
s29:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs0
s28:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs08
s27:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084
s26:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@
s25:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@s
s24:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE
s23:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE 
s22:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE u
s21:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uV
s20:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVm
s19:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv
s18:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>
s17:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>M
s16:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ
s15:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]
s14:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]H
s13:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr
s12:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1
s11:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a
s10:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a 
s9:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n
s8:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n5
s7:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n5r
s6:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n5r2
s5:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n5r2l
s4:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n5r2la
s3:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n5r2la5
s2:  f tOh3b:xM4JqZ=L^=D dvpuJzJ2Ya9RbR1lkSrv?@LNk?5RGsMM7.Z@eNN9Gk=7RZwm3O]Qg9@zoXC8lx7Y`svr]<<N3:n[.4<ll;n?wjr4Znb20kHzANX6rpS\\DxP8hfJGwuOZARg:0V.L4TbQs0T<lgSY8B`Yx`]nWFba2<yEQcrk4D2 b32DsP0;_a]imGNHNkP.s[lAXWf4L:.BBoHdZfW n891eKs084@sE uVmv>MQ]Hr1a n5r2la5j

         

         #A: lynn eriksen
         #D: this works with ASP.net regular expression valiadtors, ecma script compliant
         #U: http://regexlib.com/REDetails.aspx?regexp_id=187
expr 108: ^(\d{5}-\d{4}|\d{5})$
tree:   ((([0-9]{5}-)[0-9]{4})|[0-9]{5})
augmnt: (((((((([0-9][0-9])[0-9])[0-9])[0-9])-)((([0-9][0-9])[0-9])[0-9]))|(((([0-9][0-9])[0-9])[0-9])[0-9]))#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  43656-7888  98261  04586-1620  27854  30094-4689  80270  42907-6407
ex(1):  13647  39433-8212  26206  08889-0119  10996  22689-9940  78887  57076
ex(2):  60497  17034  14007  03290-4641  37685-4628  93279  81420  10688  23802
ex(3):  53088-2093  50668-7079  08007  33839-6753  34885-4407  65990-3200
ex(5):  83817  37804-5605  26006  90116  15119-6738  10951  02199-7724
ex(8):  96442-2190  51073  61747  66999-6636  79216-7952  52760  94198  28796
---------------- Examples from DFA ---------------
s1:  66742
s6:  66742-6047

         

         #A: Fernando Cerqueira
         #D: Validar o do CEP Brasileiro com 8 posicoes podendo usar
mascara . e - ou somente numeros
         #U: http://regexlib.com/REDetails.aspx?regexp_id=188
ERROR:   (^\d{5}-\d{3}|^\d{2}.\d{3}-\d{3}|\d{8})
    rx: Embedded '^' unimplemented: in "(^\d{5}-\d{3}|^\d{2}.\d{3}-\d{3}|\d{8})"

         

         #A: Michael Ash
         #D: This expression validates dates in the y/m/d format from 1600/1/1 - 9999/12/31. Follows the same validation rules for dates as my other date validator (m/d/y format) located in this library.
         #T: yy/mm/dd Date
         #U: http://regexlib.com/REDetails.aspx?regexp_id=190
ERROR:   ^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$
    rx: \1 (backref) unimplemented: in "^(?:(?:(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(\/|-|\.)(?:0?2\1(?:29)))|(?:(?:(?:1[6-9]|[2-9]\d)?\d{2})(\/|-|\.)(?:(?:(?:0?[13578]|1[02])\2(?:31))|(?:(?:0?[1,3-9]|1[0-2])\2(29|30))|(?:(?:0?[1-9])|(?:1[0-2]))\2(?:0?[1-9]|1\d|2[0-8]))))$"

         

         #A: asdf asdfa
         #D: Validates a file path on your local drive or a network drive. A similar one was written by Vinod Kumar but it does not reject asterisks in the path. Moreover, his did not work with RegularExpressionValidators. This one does.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=191
expr 109: ^([a-zA-Z]\:|\\)\\([^\\]+\\)*[^\/:*?"<>|]+\.htm(l)?$
tree:   (((((((((([A-Za-z]:)|\)\)([]\x01-[^-\u007f]+\)*)[\x01-!#-)+-.0-9;=@-{}~\u007f]+).)h)t)m)l?)
augmnt: ((((((((((([A-Za-z]:)|\)\)([]\x01-[^-\u007f]+\)*)[\x01-!#-)+-.0-9;=@-{}~\u007f]+).)h)t)m)l?)#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  W:\\9.htm  K:\\s.htm  Y:\\D.htm  B:\\d.htm  u:\\6.htm  \\\\O.htm
ex(1):  \\\\[\\[.html  \\\\n\\2.htm  I:\\p.htm  Z:\\q\\`.htm  K:\\V\\u.htm
ex(2):  \\\\o.htm  \\\\/\\PA.htm  l:\\(\\`.html  H:\\oO\\lW.htm
ex(3):  q:\\$Uz\\+b7\\a.htm  u:\\_\\7]\\Z{_\\2f].htm  d:\\71p\\U\\S-.html
ex(5):  q:\\jd\\(sQ\\3\\IC\\.~\\hY..htm  \\\\^5$\\`;U^:\\W\\k^\\NSY)\\5qBy.html
ex(8):  \\\\SV+w\\YG?R\\5\\oOT]/.;C\\,).html  \\\\@).html
---------------- Examples from DFA ---------------
s1:  \\\\1.htm
s9:  \\\\\\.htm
s10:  \\\\1.html
s17:  \\\\\\.html

         

         #A: J. Washam
         #D: Matches 99.99% of e-mail addresses (excludes IP e-mails, which are rarely used).  The {2,7} at the end leaves space for top level domains as short as .ca but leaves room for new ones like .museum, etc.  The ?: notation is a perl non-capturing notation, and can be removed safely for non-perl-compatible languages.  See also email.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=192
expr 110: ^[\w-]+(?:\.[\w-]+)*@(?:[\w-]+\.)+[a-zA-Z]{2,7}$
tree:   (((([0-9A-Z_a-z-]+(.[0-9A-Z_a-z-]+)*)@)([0-9A-Z_a-z-]+.)+)[A-Za-z]{2,7})
augmnt: ((((([0-9A-Z_a-z-]+(.[0-9A-Z_a-z-]+)*)@)([0-9A-Z_a-z-]+.)+)(((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  c@w.yJ  z@-.Dv  K@-.Uq  c@9.ij  c@E.Kd  e@C.au  V@F.yU  e@u.FQ  I@1.Xs
ex(1):  V.Q@W.LybZ  Y.f@k.rsm  _.8@v.wcHX  A@H.KgxheR  5@T.SIpvOe  d.U@F.ezg
ex(2):  4T.N@8.lw.yaG  aM.yo@5.-w.yQCNu  Q@-x.sT.ZQoR  p@FZ.J.jwBjj  E@D.glHN
ex(3):  0.7D_.RD@bm.EiMhfA  9@D.sMnYW  tXA.-Y.t.6@tE.edt.oIvZU
ex(5):  wXV.ek.hYnpU.3nd@N-H.vAU  u2M.Vb42o.cRE.Ht-QA@CX.DUX6i.eTUq
ex(8):  VFBK.b.na-i.Jn@YF.S6EgN.k4.-FZzq.TtF-l.tiS.P0KrhG1.977IUC73.UpeP
---------------- Examples from DFA ---------------
s1:  x@p.aP
s11:  x@p.aPu
s10:  x@p.aPuv
s9:  x@p.aPuvb
s8:  x@p.aPuvbr
s7:  x@p.aPuvbrU

         

         #A: Mike T Spike
         #D: Checks for Date in the typical MySQL DB Format. Not mutch but simple to for converting to German date format:
$date = "2003-12-03";
if (ereg ("([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})", $date, $regs))
{
echo "$regs[3].$regs[2].$regs[1]"; // prints 03.12.2003
}
         #U: http://regexlib.com/REDetails.aspx?regexp_id=193
expr 111: ([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})
tree:   (((([0-9]{4}-)[0-9]{1,2})-)[0-9]{1,2})
augmnt: (((((((([0-9][0-9])[0-9])[0-9])-)([0-9][0-9]?))-)([0-9][0-9]?))#)
length: 8 to 10
-------------------- Examples --------------------
ex(0):  4436-6-7  8887-8-6  1004-8-0  1620-2-8  5483-0-4  7468-7-0  2708-2-0
ex(1):  4390-16-7  3943-4-1  3262-6-8  8900-19-09  6422-83-9  0378-83-7
ex(2):  0497-10-41  4007-02-0  4641-36-5  4628-92-98  1420-1-8  5238-2-9
ex(3):  8832-90-0  6827-79-8  0743-89-65  3634-86-4  7465-9-3  0053-38-88
ex(5):  0592-0-90  1162-51-8  7389-05-6  2199-72-8  2845-37-66  4423-10-50
ex(8):  6999-6-6  7921-19-25  2760-9-9  1287-6-71  7960-6-7  2760-7-1
---------------- Examples from DFA ---------------
s1:  2462-6-9
s9:  2462-6-98

         

         #A: Andrew Polshaw
         #D: This matches an IP address, putting each number in its own group that can be retrieved by number. If you do not care about capturing the numbers, then you can make this shorter by putting everything after ^ until immediately after the first \. in a group ( ) with a {3} after it. Then put the number matching regex in once more.
It only permits numbers in the range 0-255.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=194
expr 112: ^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$
tree:   ((((((([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5])).)([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5]))).)([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5]))).)([0-9]{1,2}|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5])))
augmnt: ((((((((([0-9][0-9]?)|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5])).)(([0-9][0-9]?)|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5]))).)(([0-9][0-9]?)|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5]))).)(([0-9][0-9]?)|((1[0-9])[0-9])|((2[0-4])[0-9])|((25)[0-5])))#)
length: 7 to 15
-------------------- Examples --------------------
ex(0):  236.7.8.250  200.250.201.154  200.246.250.184  9.164.254.251
ex(1):  220.80.199.246  226.253.38.75  176.250.104.117  3.254.232.8
ex(2):  181.01.235.252  248.62.153.82  90.218.179.200  253.136.163.86
ex(3):  189.255.252.5  52.0.111.201  252.253.252.249  222.2.53.255
ex(5):  236.252.218.252  251.251.244.252  246.221.100.224  210.111.9.235
ex(8):  148.23.233.221  3.208.254.253  255.165.3.190  6.189.3.250
---------------- Examples from DFA ---------------
s1:  0.7.5.3
s9:  0.7.5.1
s20:  0.7.5.2
s8:  0.7.5.36
s10:  0.7.5.25

         

         #A: Tom Persing
         #D: Many currency expresssions allow leading zeros, thus $01.40 passes thru them.  This expression kills them, except for 0 in the one's column. Works with or without commas and/or dollar sign. Decimals not mandatory, unless no zero in ones column and decimal point is placed. Allows $0.00 and .0 Keywords: money dollar currency
         #U: http://regexlib.com/REDetails.aspx?regexp_id=196
expr 113: ^\$?([1-9]{1}[0-9]{0,2}(\,[0-9]{3})*(\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|(\.[0-9]{1,2})?)$
tree:   ($?(((([1-9][0-9]{0,2})(,[0-9]{3})*)(.[0-9]{0,2})?)|(([1-9][0-9]*)(.[0-9]{0,2})?)|(0(.[0-9]{0,2})?)|(.[0-9]{1,2})?))
augmnt: (($?(((([1-9]([0-9]?[0-9]?))(,(([0-9][0-9])[0-9]))*)(.([0-9]?[0-9]?))?)|(([1-9][0-9]*)(.([0-9]?[0-9]?))?)|(0(.([0-9]?[0-9]?))?)|(.([0-9][0-9]?))?))#)
length: 0 to *
-------------------- Examples --------------------
ex(0):  0  2    8  1  7      7  0  0  0  9  3  0  8  4  6  9  3  0  0  4  0  
ex(1):  3    $67  $93.9  $0  $3  9  $0.1  $0  0.9  1  .7  $.2  $0  $.04  $58.0
ex(2):  3  0.9  $40.  18,209,286.8  $0  $300,827  $  443.65  $  0  54,904,200.1
ex(3):  $9.  3,260,699,116  $.8  $0.56  0.7  0  397,696,423,190.03  $.7  0.
ex(5):  $87527  31981  .4  $.6  74.  $.42  0.5  $66,986  0.  0.  $62.24  0.
ex(8):  936,838,939,260,188,843  $76,643,669,669,650,785,036.  0  .2  $0.6  $4
---------------- Examples from DFA ---------------
s0:  
s2:  $
s4:  0
s7:  5
s6:  .4
s10:  0.
s12:  54
s9:  .43
s11:  540
s8:  5407
s13:  5,527

         

         #A: Jörg Maag
         #D: This expression validates a date field in the European DD-MM-YYYY format. Days are validate for the given month and year. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=197
expr 114: ^(((((0[1-9])|(1\d)|(2[0-8]))-((0[1-9])|(1[0-2])))|((31-((0[13578])|(1[02])))|((29|30)-((0[1,3-9])|(1[0-2])))))-((20[0-9][0-9]))|(29-02-20(([02468][048])|([13579][26]))))$
tree:   ((((((((0[1-9])|(1[0-9])|(2[0-8]))-)((0[1-9])|(1[012])))|(((31)-)((0[13578])|(1[02])))|((((29)|(30))-)((0[,13-9])|(1[012]))))-)(((20)[0-9])[0-9]))|((((((((29)-)0)2)-)2)0)(([02468][048])|([13579][26]))))
augmnt: (((((((((0[1-9])|(1[0-9])|(2[0-8]))-)((0[1-9])|(1[012])))|(((31)-)((0[13578])|(1[02])))|((((29)|(30))-)((0[,13-9])|(1[012]))))-)(((20)[0-9])[0-9]))|((((((((29)-)0)2)-)2)0)(([02468][048])|([13579][26]))))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  15-10-2098  21-12-2020  29-02-2040  30-04-2090  29-02-2016  29-02-2016
ex(1):  29-02-2056  31-10-2078  30-03-2025  29-02-2000  29-02-2080  31-10-2028
ex(2):  29-02-2028  31-03-2053  08-10-2068  19-07-2033  16-10-2085  08-05-2032
ex(3):  31-01-2026  31-05-2011  29-02-2012  30-10-2084  29-02-2004  29-02-2072
ex(5):  29-02-2040  31-10-2087  29-02-2008  30-07-2024  29-02-2092  31-10-2009
ex(8):  29-02-2024  31-08-2034  30-10-2093  29-02-2056  29-02-2020  31-08-2047
---------------- Examples from DFA ---------------
s1:  09-06-2049

         

         #A: Hugues Gauthier
         #D: This is permit all decimal number, exclude all alphanumeric caracter
         #U: http://regexlib.com/REDetails.aspx?regexp_id=198
expr 115: ^\d*[0-9](|.\d*[0-9]|,\d*[0-9])?$
tree:   (([0-9]*[0-9])(()|(([\x01-\u007f][0-9]*)[0-9])|((,[0-9]*)[0-9]))?)
augmnt: ((([0-9]*[0-9])(()|(([\x01-\u007f][0-9]*)[0-9])|((,[0-9]*)[0-9]))?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  2  27  48,47  6  78  7  4  07  4  78  90Z4  83P48  1  26  6  8  9  1,09
ex(2):  68  9  378  735  69,5  60  791,7  40  80  084  10]52  6  793  998
ex(3):  8022  8286t85  08  20  506  270e800  43387753  3  8B0  4659,2005
ex(5):  437804  605926  69901  15119  738  95160  994772  228  937726o2  21,10
ex(8):  866999  63  792161,75  76019419  287964677G0066674  7604I24926  7350359
---------------- Examples from DFA ---------------
s1:  8
s2:  8{8

         

         #A: Fernando Cerqueira
         #D: Valida os todos Estados Brasileiros (UF)
e o distrito Federal
         #U: http://regexlib.com/REDetails.aspx?regexp_id=199
expr 116: ^(ac|AC|al|AL|am|AM|ap|AP|ba|BA|ce|CE|df|DF|es|ES|go|GO|ma|MA|mg|MG|ms|MS|mt|MT|pa|PA|pb|PB|pe|PE|pi|PI|pr|PR|rj|RJ|rn|RN|ro|RO|rr|RR|rs|RS|sc|SC|se|SE|sp|SP|to|TO)$
tree:   ((ac)|(AC)|(al)|(AL)|(am)|(AM)|(ap)|(AP)|(ba)|(BA)|(ce)|(CE)|(df)|(DF)|(es)|(ES)|(go)|(GO)|(ma)|(MA)|(mg)|(MG)|(ms)|(MS)|(mt)|(MT)|(pa)|(PA)|(pb)|(PB)|(pe)|(PE)|(pi)|(PI)|(pr)|(PR)|(rj)|(RJ)|(rn)|(RN)|(ro)|(RO)|(rr)|(RR)|(rs)|(RS)|(sc)|(SC)|(se)|(SE)|(sp)|(SP)|(to)|(TO))
augmnt: (((ac)|(AC)|(al)|(AL)|(am)|(AM)|(ap)|(AP)|(ba)|(BA)|(ce)|(CE)|(df)|(DF)|(es)|(ES)|(go)|(GO)|(ma)|(MA)|(mg)|(MG)|(ms)|(MS)|(mt)|(MT)|(pa)|(PA)|(pb)|(PB)|(pe)|(PE)|(pi)|(PI)|(pr)|(PR)|(rj)|(RJ)|(rn)|(RN)|(ro)|(RO)|(rr)|(RR)|(rs)|(RS)|(sc)|(SC)|(se)|(SE)|(sp)|(SP)|(to)|(TO))#)
length: 2 to 2
-------------------- Examples --------------------
ex(0):  ma  pb  AP  pe  PB  rr  sc  pe  CE  rj  MG  go  al  ac  se  RJ  df  pr
ex(1):  rn  df  sp  RR  SE  pa  PB  RN  mt  pb  pi  pa  sc  RN  RJ  MS  SP  to
ex(2):  MG  es  PA  ba  MG  RR  CE  pe  df  PR  PE  RS  SE  pb  rj  RO  df  SE
ex(3):  AM  rn  CE  pe  SP  df  PA  go  PA  al  pa  al  ro  al  GO  rj  pr  MG
ex(5):  mg  to  MG  rr  pe  ma  MT  SC  CE  ms  rr  MT  SC  ba  ap  ES  AP  PE
ex(8):  to  mt  rj  pb  rs  am  BA  MS  PA  SC  rn  ro  pr  SC  ap  PB  ES  mg
---------------- Examples from DFA ---------------
s1:  AL

         

         #A: Henk de Vries
         #D: Checks whether the string specified is in the same format as the UK postcode format defined on:
http://www.magma.ca/~djcl/postcd.txt
It allows:
A = Letter
N = Number
AN NAA, ANA NAA, ANN NAA, AAN NAA, AAA NAA (rare), AANN NAA, AANA NAA
It gives the option to have the two parts of the uk postcode to be separated by a space or a hyphen.
(restriction is set to all-capitals)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=200
expr 117: ^([A-Z]{1,2}[0-9]{1,2}|[A-Z]{3}|[A-Z]{1,2}[0-9][A-Z])( |-)[0-9][A-Z]{2}
tree:   ((((([A-Z]{1,2}[0-9]{1,2})|[A-Z]{3}|(([A-Z]{1,2}[0-9])[A-Z]))( |-))[0-9])[A-Z]{2})
augmnt: ((((((([A-Z][A-Z]?)([0-9][0-9]?))|(([A-Z][A-Z])[A-Z])|((([A-Z][A-Z]?)[0-9])[A-Z]))( |-))[0-9])([A-Z][A-Z]))#)
length: 6 to 8
-------------------- Examples --------------------
ex(0):  U3 6ZZ  A8-8EA  S0C-6GN  K0-7EV  SHO 4ZM  A9-0OH  C4E-7CU  Q7L 3HO
ex(1):  FJU 1KF  K0I 8MA  O19-0FR  UYS 9LX  U38 7JT  OXQ-0KO  F0-9TN  F7F 0ZU
ex(2):  RO82 2GZ  RUL-8DS  SJJ 8SL  N0K 9QI  KA4D 3CO  R03 0WW  EC7D-8YK
ex(3):  D8-4YU  CUZ-0SB  U56-8ZC  ET47 4AX  CP2 6PB  HXY 5VB  IEF-9PG  RO0M-9GD
ex(5):  XPU 6QS  N1P 5LK  RS14-6SV  N6G-8TR  H1X-2TP  ZGI-4ZT  X89 6ZX
ex(8):  N0-1BA  J6U-5SD  B4 6RP  I8 9SQ  WUV-2GN  PON 4BE  SQA 3MS  VZF 3WA
---------------- Examples from DFA ---------------
s1:  B3-6RW

         

         #A: Henk de Vries
         #D: Postcode for Belgium
         #U: http://regexlib.com/REDetails.aspx?regexp_id=201
expr 118: ^[1-9]{1}[0-9]{3}$
tree:   ([1-9][0-9]{3})
augmnt: (([1-9](([0-9][0-9])[0-9]))#)
length: 4 to 4
-------------------- Examples --------------------
ex(0):  1436  9677  1887  3826  3004  6860  3620  8278  6483  3094  2468  5780
ex(1):  7290  4464  4778  5390  9136  9783  5433  1821  2326  1062  9888  4001
ex(2):  1996  8226  7939  4403  1888  4357  7769  3022  4560  9979  5703  1714
ex(3):  1329  8846  5103  5685  3462  6793  4799  2142  4910  8885  9380  3209
ex(5):  4241  1530  1832  3930  8066  3270  9990  2007  4338  1936  4536  3488
ex(8):  5746  3990  3320  7536  8189  9381  9437  7046  3605  3260  5699  2116
---------------- Examples from DFA ---------------
s1:  3986

         

         #A: Henk de Vries
         #D: Postcode for Germany
         #U: http://regexlib.com/REDetails.aspx?regexp_id=202
expr 119: ^[A-Z]{1}( |-)?[1-9]{1}[0-9]{3}$
tree:   ((([A-Z]( |-)?)[1-9])[0-9]{3})
augmnt: (((([A-Z]( |-)?)[1-9])(([0-9][0-9])[0-9]))#)
length: 5 to 6
-------------------- Examples --------------------
ex(0):  C1365  I8788  K3982  A3004  P4601  C5012  X9548  H3094  Z4689  H4027
ex(1):  E 6077  M9909  T 1839  Y-7212  F6206  E2889  O2199  T7964  Y2893
ex(2):  I-8076  Z 4556  O9791  N1471  A2780  J6084  I5037  O6246  E3932  L-3420
ex(3):  N6220  R5865  A2853  C1320  R 9668  E 5908  Y7433  A-5753  K 5564
ex(5):  R 6200  V 1898  Z9743  X9465  U3926  W9990  H 1511  F3738  T 2160
ex(8):  Q5284  Z-4269  M4232  L 2107  R 1478  K5992  G9687  R1617  D 1276
---------------- Examples from DFA ---------------
s1:  O3646

         

         #A: Henk de Vries
         #D: Postcode check for France (including colonies)
-----
Edited; sorry I didn't know about Corsica, no offense :)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=203
expr 120: ^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$
tree:   (((F-)?((2[AB|])|[0-9]{2}))[0-9]{3})
augmnt: ((((F-)?((2[AB|])|([0-9][0-9])))(([0-9][0-9])[0-9]))#)
length: 5 to 7
-------------------- Examples --------------------
ex(0):  2|567  88879  2B004  86016  2B785  2B094  46897  2A084  2A746  2|843
ex(1):  83943  F-2A262  2B889  2A910  F-2B893  F-2B887  F-2|702  56049  F-03471
ex(2):  F-2A037  2B628  F-2|814  2B688  F-2|098  2B418  F-2|093  06682  F-90800
ex(3):  F-2B856  2B659  F-20053  18983  74378  2|059  2B990  F-2A198  38910
ex(5):  F-2|845  F-26964  2|905  F-33617  86699  F-2B792  F-95275  60194
ex(8):  2|796  2B742  F-2B124  F-2|035  F-2|379  2A994  2B322  35072  F-2|087
---------------- Examples from DFA ---------------
s1:  43657

         

         #A: Henk de Vries
         #D: Postcode check for Italy (including possible Vatican/Italy indications)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=204
expr 121: ^(V-|I-)?[0-9]{4}$
tree:   (((V-)|(I-))?[0-9]{4})
augmnt: ((((V-)|(I-))?((([0-9][0-9])[0-9])[0-9]))#)
length: 4 to 6
-------------------- Examples --------------------
ex(0):  4436  5677  8887  9826  1004  5860  1620  1278  5483  0094  7468  9780
ex(1):  2907  6407  V-9091  V-8394  I-2123  6206  0888  V-1991  9964  2689
ex(2):  8735  V-9702  5560  9791  V-7140  7803  9084  4103  V-2462  7932
ex(3):  I-8852  V-2098  8652  1853  8832  9305  6682  V-9080  7433  3936
ex(5):  V-0746  I-4320  5363  V-3817  3780  6560  I-0069  V-6215  I-6738
ex(8):  1994  I-8228  5937  V-6442  V-0551  7336  I-8669  I-6368  I-6179
---------------- Examples from DFA ---------------
s1:  1181

         

         #A: Henk de Vries
         #D: Postcode check for Netherlands
         #U: http://regexlib.com/REDetails.aspx?regexp_id=205
expr 122: ^[1-9]{1}[0-9]{3} ?[A-Z]{2}$
tree:   ((([1-9][0-9]{3}) ?)[A-Z]{2})
augmnt: (((([1-9](([0-9][0-9])[0-9])) ?)([A-Z][A-Z]))#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  1436HI  8788KB  3826NS  2458IG  3620RW  4854SH  3094ZM  4897YU  4708AE
ex(1):  4778PH  3913UP  2394 UO  3123KI  7620MA  4001 LT  1996YS  2893 US
ex(2):  4707ZD  6225 OA  9791 FI  2140ZU  1329GK  6410 OK  6246GZ  2327 KD
ex(3):  1523KK  9098KK  4241JZ  2883IR  4050WY  6707 OW  7074 AX  8367 KD
ex(5):  5746 ZC  3320VP  9318 ZE  9743 SQ  1560 MG  9069 HX  1215 FI  3738 GH
ex(8):  3477QS  5284 LX  4269QS  3321 LR  3073 BF  1786VL  3266 GT  2216 DX
---------------- Examples from DFA ---------------
s1:  3419YO

         

         #A: Henk de Vries
         #D: Postcode check for Spain
         #U: http://regexlib.com/REDetails.aspx?regexp_id=206
expr 123: ^([1-9]{2}|[0-9][1-9]|[1-9][0-9])[0-9]{3}$
tree:   (([1-9]{2}|([0-9][1-9])|([1-9][0-9]))[0-9]{3})
augmnt: (((([1-9][1-9])|([0-9][1-9])|([1-9][0-9]))(([0-9][0-9])[0-9]))#)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  15656  71887  42610  46860  12012  96483  59474  65780  73842  04464
ex(1):  09136  18394  11821  33620  90888  54119  60996  28689  44403  16873
ex(2):  62255  19979  76347  45078  67908  65103  68524  28793  65981  54910
ex(3):  62209  58652  28530  17209  18066  67079  22007  17839  64536  58856
ex(5):  59043  57536  17983  19437  97656  53260  62901  12151  58673  94095
ex(8):  57724  52845  33726  24423  28055  77336  71786  56926  96879  16179
---------------- Examples from DFA ---------------
s1:  04419

         

         #A: Serafeim Zanikolas
         #D: matches any day of
month 0?1-31
         #U: http://regexlib.com/REDetails.aspx?regexp_id=209
expr 124: ^((0?[1-9])|((1|2)[0-9])|30|31)$
tree:   ((0?[1-9])|((1|2)[0-9])|(30)|(31))
augmnt: (((0?[1-9])|((1|2)[0-9])|(30)|(31))#)
length: 1 to 2
-------------------- Examples --------------------
ex(0):  30  30  31  7  31  7  31  30  30  30  31  6  9  19  30  6  31  4  14  5
ex(1):  30  30  30  31  24  31  13  30  31  30  30  5  30  30  20  31  30  30
ex(2):  1  31  04  16  31  30  14  21  14  31  30  30  30  6  30  28  16  30
ex(3):  21  30  26  1  06  9  31  4  30  30  30  19  10  3  30  31  30  30  31
ex(5):  31  06  30  5  31  31  30  7  31  29  30  23  31  30  30  31  9  21  11
ex(8):  2  31  15  31  30  17  30  2  02  31  30  30  31  31  31  26  31  16
---------------- Examples from DFA ---------------
s1:  1
s3:  3
s4:  9

         

         #A: Lewis Moten
         #D: Removes pesky comments and commented javascript from HTML
         #U: http://regexlib.com/REDetails.aspx?regexp_id=210
ERROR:   <!--[\s\S]*?-->
    rx: prefer-fewer '?' unimplemented: in "<!--[\s\S]*?-->"

         

         #A: Lewis Moten
         #D: Finds any HTML tag and sub-matches properties weather it has an apposterphee, quote, or no quote/apposterphee
         #U: http://regexlib.com/REDetails.aspx?regexp_id=211
expr 125: </?(\w+)(\s+\w+=(\w+|"[^"]*"|'[^']*'))*>
tree:   ((((</?)[0-9A-Z_a-z]+)((([\t-\r ]+[0-9A-Z_a-z]+)=)([0-9A-Z_a-z]+|(("[\x01-!#-\u007f]*)")|(('[\x01-&(-\u007f]*)')))*)>)
augmnt: (((((</?)[0-9A-Z_a-z]+)((([\t-\r ]+[0-9A-Z_a-z]+)=)([0-9A-Z_a-z]+|(("[\x01-!#-\u007f]*)")|(('[\x01-&(-\u007f]*)')))*)>)#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  <W>  <q>  <2>  <B>  <z>  <b>  <q>  <N>  <d>  <U>  <D>  <A>  <W>  <c>
ex(1):  <K>  <C>  <M>  <C 5=\"\">  </R u=''>  <Y>  <o O='M'>  <P>  </9 5=3>
ex(2):  <vr>  </Fq>  </v Zk=\".{\">  <5 8=\"\"  fd=vm>  </e5 GF=\"t\" v3=D>
ex(3):  </pVL  sW='\\B7'>  </yEs PRn='' 3Eq='>'>  <q   Ly=zr   k4=9   5Rl=M1>
ex(5):  </mOh_V     7k=T>  </_OS>  </kWK ggoN=Jsvf2     kMyR3='\"o2i'>
ex(8):  </Mek     wcMEzV=ROYYRVE        n=''     E0rAqm1='[:^bB'      v8VI9f=\"0<$J[\"  FwpQd7zZ=T21v8j>
---------------- Examples from DFA ---------------
s1:  <L>

         

         #A: Lewis Moten
         #D: Validates a GUID with and without brackets. 8,4,4,4,12 hex characters seperated by dashes.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=212
expr 126: ^\{?[a-fA-F\d]{8}-([a-fA-F\d]{4}-){3}[a-fA-F\d]{12}\}?$
tree:   ((((({?[0-9A-Fa-f]{8})-)([0-9A-Fa-f]{4}-){3})[0-9A-Fa-f]{12})}?)
augmnt: (((((({?((((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f]))-)(((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])-)(((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])-))(((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])-)))((((((((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f]))}?)#)
length: 36 to 38
-------------------- Examples --------------------
ex(0):  10AB1877-C5D8-6afF-Df5e-61FF3Cd379Ab
ex(1):  {28d3e8Ab-FFd0-EeDf-f98f-cf028DA3355D}
ex(2):  2AA9c30d-Ec9e-752F-d4Aa-ca4bbDbb96fC}
ex(3):  {BFCdBB3d-FEa7-dCaf-5EC6-6d74EFa7c417}
ex(5):  FEb258ec-A7bA-d5F0-4aFa-Bb4F1f3aEEbe
ex(8):  Ac99f3a8-d2Da-faCC-ECaf-1F08c5829a1B}
---------------- Examples from DFA ---------------
s1:  f520cD91-4A90-Ba3D-F37e-9f2FD945ff0c
s38:  f520cD91-4A90-Ba3D-F37e-9f2FD945ff0c}

         

         #A: lawson law
         #U: http://regexlib.com/REDetails.aspx?regexp_id=213
expr 127: ^([a-zA-Z0-9@*#]{8,15})$
tree:   [#*0-9@-Za-z]{8,15}
augmnt: ((((((((((((((([#*0-9@-Za-z][#*0-9@-Za-z])[#*0-9@-Za-z])[#*0-9@-Za-z])[#*0-9@-Za-z])[#*0-9@-Za-z])[#*0-9@-Za-z])[#*0-9@-Za-z])[#*0-9@-Za-z]?)[#*0-9@-Za-z]?)[#*0-9@-Za-z]?)[#*0-9@-Za-z]?)[#*0-9@-Za-z]?)[#*0-9@-Za-z]?)[#*0-9@-Za-z]?)#)
length: 8 to 15
-------------------- Examples --------------------
ex(0):  w4mpBhkk  9vu1BuMq  6oUG*#CJ  To7Hsipe  JGoezZGH  LiCUsnGQ  DyQ0cdlZ
ex(1):  Sr7KFAnk  ouwj6P8p  ibrIMAHn  *t#d6GyW  B4JxpQj6  OLb6MY4S  DV4Yv*C9
ex(2):  qi9QTtWq  WfYYdTv*  RSlI43W9  hBwBAyoe  9FxSqz89  tPYKdykj  py@1sieE
ex(3):  f#2*wu*T  2OgkUhu#  2BDrtjmK  FS9Jotsb  xLbwvFmQ  5Raof2#G  7GqtBx7i
ex(5):  I*oVRfU#  Hsez8nRI  33NFl2jw  A@Qut*sg  lz5PdCWi  LjHdnpmX  7ozV3JOb
ex(8):  obfkl3p*  4of0@UOC  kMMb1IPS  78S@BYMY  h0GWTydn  MTrJC9eA  84qU31X0
---------------- Examples from DFA ---------------
s1:  5pUWqNrE
s15:  5pUWqNrEe
s14:  5pUWqNrEeu
s13:  5pUWqNrEeuM
s12:  5pUWqNrEeuM2
s11:  5pUWqNrEeuM2k
s10:  5pUWqNrEeuM2kT
s9:  5pUWqNrEeuM2kTM

         

         #A: Al Val
         #D: Regular Expression that validate a phone number inside israel.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=214
expr 128: ^0[23489]{1}(\-)?[^0\D]{1}\d{6}$
tree:   ((((0[23489])-?)[1-9])[0-9]{6})
augmnt: (((((0[23489])-?)[1-9])((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 9 to 10
-------------------- Examples --------------------
ex(0):  045656778  023982610  086860162  098785483  086474689  044708429
ex(1):  049136478  034348212  041062088  034119910  098226893  093378887
ex(2):  031497917  032140078  036084641  03-8524628  03-6998142  028885238
ex(3):  039308832  09-8066827  08-2007433  03-5753634  04-7407465  093320053
ex(5):  087656059  099990116  02-5867389  09-6021994  083228459  09-5964423
ex(8):  09-6866999  08-6792161  045527601  04-4128796  08-3796006  04-4760470
---------------- Examples from DFA ---------------
s1:  041924625

         

         #A: Joel Dooris
         #D: This pattern returns the font section from an RTF document. The first parenthetical subexpression captures the font number, the second returns the actual font enumeration. Lame-o, but fun! :-)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=219
expr 129: (\{\\f\d*)\\([^;]+;)
tree:   ((((({\)f)[0-9]*)\)([\x01-:<-\u007f]+;))
augmnt: (((((({\)f)[0-9]*)\)([\x01-:<-\u007f]+;))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  {\\f\\9;  {\\f\\x;  {\\f\\X;  {\\f\\D;  {\\f\\!;  {\\f\\i;  {\\f\\6;
ex(1):  {\\f\\E;  {\\f\\4;  {\\f9\\[;  {\\f8\\B;  {\\f\\g;  {\\f\\g;  {\\f\\p;
ex(2):  {\\f6\\}~;  {\\f\\A;  {\\f\\y;  {\\f\\ ;  {\\f7\\G^;  {\\f8\\@G;
ex(3):  {\\f87\\m1L;  {\\f\\l;  {\\f238\\'>t;  {\\f2\\Au;  {\\f2\\Uz>;
ex(5):  {\\f\\_xB7;  {\\f\\x2f]B;  {\\f\\j\\B71;  {\\f31\\(xZS^;  {\\f46\\/9;
ex(8):  {\\f8673\\I%3%!I;  {\\f47\\.7Y;  {\\f3\\^5$&o`p^;  {\\f1\\s<NSY);
---------------- Examples from DFA ---------------
s1:  {\\f\\Y;

         

         #A: Lewis Moten
         #D: Searches for tags and there atributes according to the HTML 2.0 specification to limit length of tags to 72 characters, and length of attribute values to 1024 characters.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=220
ERROR:   </?([a-zA-Z][-A-Za-z\d\.]{0,71})(\s+(\S+)(\s*=\s*([-\w\.]{1,1024}|"[^"]{0,1024}"|'[^']{0,1024}'))?)*\s*>
    rx: complexity 3173 exceeds limit of 500: in "</?([a-zA-Z][-A-Za-z\d\.]{0,71})(\s+(\S+)(\s*=\s*([-\w\.]{1,1024}|"[^"]{0,1024}"|'[^']{0,1024}'))?)*\s*>"

         

         #A: Henric Rosvall
         #D: Will locate an URL in a webpage.
It'll search in 2 ways - first it will try to locate a href=, and then go to the end of the link. If there is nu href=, it will search for the end of the file instead (.asp, .htm and so on), and then take the data between the "xxxxxx" or 'xxxxxx'
         #U: http://regexlib.com/REDetails.aspx?regexp_id=222
ERROR:   (("|')[a-z0-9\/\.\?\=\&]*(\.htm|\.asp|\.php|\.jsp)[a-z0-9\/\.\?\=\&]*("|'))|(href=*?[a-z0-9\/\.\?\=\&"']*)
    rx: prefer-fewer '?' unimplemented: in "(("|')[a-z0-9\/\.\?\=\&]*(\.htm|\.asp|\.php|\.jsp)[a-z0-9\/\.\?\=\&]*("|'))|(href=*?[a-z0-9\/\.\?\=\&"']*)"

         

         #A: Jony Ferreira
         #D: This regular expressions matches dates in the format MM/YYYY where MM can be 01 to 12 and YYYY is always 4 digits long. 
         #T: MM/YYYY MONTH/YEAR
         #U: http://regexlib.com/REDetails.aspx?regexp_id=223
expr 130: ^((0[1-9])|(1[0-2]))\/(\d{4})$
tree:   ((((0[1-9])|(1[012]))/)[0-9]{4})
augmnt: (((((0[1-9])|(1[012]))/)((([0-9][0-9])[0-9])[0-9]))#)
length: 7 to 7
-------------------- Examples --------------------
ex(0):  05/5677  07/9826  11/5860  11/1278  12/0094  10/9780  03/4290  12/0778
ex(1):  02/9433  03/2326  09/0888  10/1991  04/4226  04/9403  12/7357  04/7022
ex(2):  12/4714  08/0329  04/4103  11/2462  02/2799  04/0910  01/2380  09/8286
ex(3):  07/0930  11/8270  10/8007  07/3936  12/3488  10/0746  11/4320  04/3189
ex(5):  07/5605  10/0699  06/2151  10/7389  12/1602  12/7724  08/4593  10/9644
ex(8):  10/3617  02/6999  09/6879  03/7952  11/6019  09/1287  12/7717  10/6667
---------------- Examples from DFA ---------------
s1:  08/2607

         

         #A: Gerald Martin
         #D: Meets german norm-standard: DIN 5008: 1996-05 for telephone numbers
         #U: http://regexlib.com/REDetails.aspx?regexp_id=224
expr 131: ^\(\d{1,2}(\s\d{1,2}){1,2}\)\s(\d{1,2}(\s\d{1,2}){1,2})((-(\d{1,4})){0,1})$
tree:   ((((((([0-9]{1,2})([\t-\r ][0-9]{1,2}){1,2})))[\t-\r ])([0-9]{1,2}([\t-\r ][0-9]{1,2}){1,2}))(-[0-9]{1,4})?)
augmnt: ((((((((([0-9][0-9]?))(([\t-\r ]([0-9][0-9]?))([\t-\r ]([0-9][0-9]?))?))))[\t-\r ])(([0-9][0-9]?)(([\t-\r ]([0-9][0-9]?))([\t-\r ]([0-9][0-9]?))?)))(-((([0-9][0-9]?)[0-9]?)[0-9]?))?)#)
length: 9 to 24
-------------------- Examples --------------------
ex(0):  (4 6) 7 8  (8 9) 6 0  (4 8) 1 2  (1 7) 4 3  (0 4) 6 9  (8 2) 8 2
ex(1):  (49 93) 89 34  (22 2) 8 9-919  (4 6 94) 7 83 06-05  (0 71 3) 4 7-9
ex(2):  (4 90) 5 8  (9 8 48) 0 3-00  (20 90) 7 3 3-34  (5 4 69) 42 03-8887
ex(3):  (3 1 1) 19 72  (2 53 2) 4 3 05-737  (7 69 6) 89 1 92-269  (18 2 6) 77 6
ex(5):  (30 52) 5 78  (09 8) 3 43 7-34  (83 2 9) 4 33-8899  (2 68) 46 3
ex(8):  (0 4 7) 6 10 1-193  (2 3 0) 9 19 30  (74 24 8) 75 81 31  (67 05) 9 23 2
---------------- Examples from DFA ---------------
s1:  (7 7) 2 8
s10:  (7 7) 2 84
s11:  (7 7) 2 8 6
s19:  (7 7) 2 8-5
s18:  (7 7) 2 8 68
s24:  (7 7) 2 8-55
s23:  (7 7) 2 8-558
s22:  (7 7) 2 8-5582

         

         #A: Scott Kahler
         #D: This RE validates standard Bible verse notation.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=225
expr 132: (?:\d|I{1,3})?\s?\w{2,}\.?\s*\d{1,}\:\d{1,}-?,?\d{0,2}(?:,\d{0,2}){0,2}
tree:   (((((((((((([0-9]|I{1,3})?[\t-\r ]?)[0-9A-Z_a-z]{2,}).?)[\t-\r ]*)[0-9]+):)[0-9]+)-?),?)[0-9]{0,2})(,[0-9]{0,2}){0,2})
augmnt: ((((((((((((([0-9]|((II?)I?))?[\t-\r ]?)([0-9A-Z_a-z][0-9A-Z_a-z]+)).?)[\t-\r ]*)[0-9]+):)[0-9]+)-?),?)([0-9]?[0-9]?))((,([0-9]?[0-9]?))?(,([0-9]?[0-9]?))?))#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  HW3:5  V28:8  _k8:6  lI4:8  YN1:2  mU7:5  pe3:0  zW7:6  eC7:0  xK0:4
ex(1):  NP.3:0-,8,3  OF.2:6,1  IIaP8:3-7   lU 9:05  II dO0:8,0   o75:49,98,
ex(2):   D2v 2:7-,3  II GV 4:46-,2  II B0 0:59  aXr. 11:6-1,6  II9s 93:26-,9,03
ex(3):  0 ROh  467:796,6  _Te 073:35-,78  qkMy732:3-24,4   9d.   4:336-89,
ex(5):  6REGkA   70:0,2,1  9h6KcMx.463:3044,19,5  II ZK7T2.     3107:7407-9
ex(8):  4 o46c9DGP   3817812:499-,9,9,  cz. 6:97166-37,22
---------------- Examples from DFA ---------------
s1:  6O0:7
s7:  6O0:7,
s13:  6O0:7-
s12:  6O0:7,,
s15:  6O0:7,4
s11:  6O0:7,,,
s21:  6O0:7,,0
s14:  6O0:7,48
s19:  6O0:7,,,5
s20:  6O0:7,,04
s18:  6O0:7,,,52

         

         #A: Alessandro Olivi
         #D: Jason West (jason.west@mail.state.ky.us) date validator with leap years using a strict dd/mm/yyyy  (ITALIAN) format
         #U: http://regexlib.com/REDetails.aspx?regexp_id=226
expr 133: (((0[1-9]|[12][0-9]|3[01])([-./])(0[13578]|10|12)([-./])(\d{4}))|(([0][1-9]|[12][0-9]|30)([-./])(0[469]|11)([-./])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([-./])(02)([-./])(\d{4}))|((29)(\.|-|\/)(02)([-./])([02468][048]00))|((29)([-./])(02)([-./])([13579][26]00))|((29)([-./])(02)([-./])([0-9][0-9][0][48]))|((29)([-./])(02)([-./])([0-9][0-9][2468][048]))|((29)([-./])(02)([-./])([0-9][0-9][13579][26])))
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))[./-])((0[13578])|(10)|(12)))[./-])[0-9]{4})|((((((0[1-9])|([12][0-9])|(30))[./-])((0[469])|(11)))[./-])[0-9]{4})|((((((0[1-9])|(1[0-9])|(2[0-8]))[./-])(02))[./-])[0-9]{4})|(((((29)(.|-|/))(02))[./-])((([02468][048])0)0))|(((((29)[./-])(02))[./-])((([13579][26])0)0))|(((((29)[./-])(02))[./-])((([0-9][0-9])0)[48]))|(((((29)[./-])(02))[./-])((([0-9][0-9])[2468])[048]))|(((((29)[./-])(02))[./-])((([0-9][0-9])[13579])[26])))
augmnt: ((((((((0[1-9])|([12][0-9])|(3[01]))[./-])((0[13578])|(10)|(12)))[./-])((([0-9][0-9])[0-9])[0-9]))|((((((0[1-9])|([12][0-9])|(30))[./-])((0[469])|(11)))[./-])((([0-9][0-9])[0-9])[0-9]))|((((((0[1-9])|(1[0-9])|(2[0-8]))[./-])(02))[./-])((([0-9][0-9])[0-9])[0-9]))|(((((29)(.|-|/))(02))[./-])((([02468][048])0)0))|(((((29)[./-])(02))[./-])((([13579][26])0)0))|(((((29)[./-])(02))[./-])((([0-9][0-9])0)[48]))|(((((29)[./-])(02))[./-])((([0-9][0-9])[2468])[048]))|(((((29)[./-])(02))[./-])((([0-9][0-9])[13579])[26])))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/8887  29.02-0800  11.02/4830  29.02/9780  30.11/6407  29/02/1308
ex(1):  30-06.8890  19/02-9642  29-02-1200  29-02.9200  29-02.9192  29-02-6800
ex(2):  29/02-1600  29-02.8828  29/02.8292  20/02-8320  29.02/8272  29-02-2400
ex(3):  16/10/3200  29.02.8312  29/02-0000  29-02/1600  29/02.9192  29.02.6800
ex(5):  29/02.9068  29-02-7804  30/11/9216  29.02-2732  18/02.9646  29.02-0672
ex(8):  29-02.0308  12.12-8680  29/02-2744  29.02.2180  25.02-2979  07-12/6578
---------------- Examples from DFA ---------------
s1:  06-08.7009

         

         #A: Bertrand Perrin
         #D: Regular Expression that validate phone in France.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=227
expr 134: ^0[1-6]{1}(([0-9]{2}){4})|((\s[0-9]{2}){4})|((-[0-9]{2}){4})$
tree:   (((0[1-6])[0-9]{2}{4})|([\t-\r ][0-9]{2}){4}|(-[0-9]{2}){4})
augmnt: ((((0[1-6])(((([0-9][0-9])([0-9][0-9]))([0-9][0-9]))([0-9][0-9])))|(((([\t-\r ]([0-9][0-9]))([\t-\r ]([0-9][0-9])))([\t-\r ]([0-9][0-9])))([\t-\r ]([0-9][0-9])))|((((-([0-9][0-9]))(-([0-9][0-9])))(-([0-9][0-9])))(-([0-9][0-9]))))#)
length: 10 to 12
-------------------- Examples --------------------
ex(0):  0265677888  -82-10-45-60  -20-27-54-30   47 68 78 27  -42-07-64-77
ex(1):   33 82 23 62  0308889001   91 99 42 68  0494037888  0470769702
ex(2):  -47-40-78-32  -84-41-37-85  -62-79-27-98  -20-10-88-23  -22-98-86-24
ex(3):   66 27 79 08  0443383936  0663488564  0246599043  0153631898
ex(5):  -05-26-06-90  0121511986   89 09 16 21   47 24 22 45   77 69 44 32
ex(8):  0566999266  -87-21-17-52   27 01 41 81  -79-46-71-96  0166742760
---------------- Examples from DFA ---------------
s1:  0445760482

         

         #A: Peter Whyte
         #U: http://regexlib.com/REDetails.aspx?regexp_id=229
expr 135: ^[A-Z]{1,2}[1-9][0-9]?[A-Z]? [0-9][A-Z]{2,}|GIR 0AA$
tree:   ((((((([A-Z]{1,2}[1-9])[0-9]?)[A-Z]?) )[0-9])[A-Z]{2,})|((((((GI)R) )0)A)A))
augmnt: ((((((((([A-Z][A-Z]?)[1-9])[0-9]?)[A-Z]?) )[0-9])([A-Z][A-Z]+))|((((((GI)R) )0)A)A))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  U5 5IZ  GIR 0AA  N3 4PM  G3 2YR  X9 4SH  I6 7MG  X2 0OH  C7 9EN  U6 7LM
ex(1):  US34J 8SX  F6 2EE  AO41L 0FR  U8 3XL  SB1 3TX  X70 5FK  AL47 4DF
ex(2):  K50R 8BI  E33 9ND  Q10 8LN  K9Q 8KAG  GIR 0AA  ID10 8ECT  GIR 0AA
ex(3):  GIR 0AA  I54 9ZSBE  OP91 8ZDT  BA9 6CPMG  S20X 2NVBF  EF51 5PAMN
ex(5):  Q39X 2CMQSSN  LM91 3VBF  X1L 2GXO  TU1X 5YPUZ  IX59 2ETYY  ZF26 6AHG
ex(8):  GIR 0AA  QW29 8KLHSQAWU  GIR 0AA  N7E 4QCLTMSYV  GIR 0AA  GIR 0AA
---------------- Examples from DFA ---------------
s1:  D9 6MH
s8:  GIR 0AA

         

         #A: Spring Zhang
         #D: This is a regular expression to validate a date string in "MM/DD/YYYY" format, a date time string in "MM/DD/YYYY HH:MM" or a date time string in "MM/DD/YYYY HH:MM:SS" format.
It can validate date from 1600 to 2199.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=230
expr 136: ^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0-1]\d|[2][0-3])(\:[0-5]\d){1,2})?$
tree:   ((((((((0[0-9])|(1[012]))/)(([012][0-9])|(3[01])))/)((2[01])|(1[6-9])))[0-9]{2})(([\t-\r ](([01][0-9])|(2[0-3])))((:[0-5])[0-9]){1,2})?)
augmnt: (((((((((0[0-9])|(1[012]))/)(([012][0-9])|(3[01])))/)((2[01])|(1[6-9])))([0-9][0-9]))(([\t-\r ](([01][0-9])|(2[0-3])))(((:[0-5])[0-9])((:[0-5])[0-9])?))?)#)
length: 10 to 19
-------------------- Examples --------------------
ex(0):  03/31/2079  06/14/2016  01/31/2009  04/17/2108  09/30/2184  12/30/1794
ex(1):  08/00/1791  11/16/1994  10/03/1769 05:00  10/31/1600 12:48  01/30/1862
ex(2):  02/30/2041  11/02/1850  02/29/2007  10/30/1634  06/17/2190  11/30/1983
ex(3):  10/31/1673  11/30/2194 08:48  11/30/2023  12/30/1617
ex(5):  06/30/1728 06:51:00  06/30/2070 09:20:10  12/22/2198  00/30/2132
ex(8):  07/02/1633  03/31/2019 06:21  08/31/2096 03:06:26  10/27/1836 00:24
---------------- Examples from DFA ---------------
s1:  01/29/2030
s13:  01/29/2030 14:14
s22:  01/29/2030 14:14:53

         

         #A: Karsten Grombach
         #D: Usesful for importing vcards. Matches vcard elements and values.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=231
ERROR:   ((?<strElement>(^[A-Z0-9-;=]*:))(?<strValue>(.*)))
    rx: '(?...' unimplemented: in "((?<strElement>(^[A-Z0-9-;=]*:))(?<strValue>(.*)))"

         

         #A: Bill LaPrade
         #D: This is a combination of a few regular expressions found on this site.  It allows for a flexible date and time combination, but requires a 12-hour clock (am/pm).  Many versions of the am/pm are supported.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=233
expr 137: ^([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\/([2][01]|[1][6-9])\d{2}(\s([0]\d|[1][0-2])(\:[0-5]\d){1,2})*\s*([aApP][mM]{0,2})?$
tree:   ((((((((((0[0-9])|(1[012]))/)(([012][0-9])|(3[01])))/)((2[01])|(1[6-9])))[0-9]{2})(([\t-\r ]((0[0-9])|(1[012])))((:[0-5])[0-9]){1,2})*)[\t-\r ]*)([APap][Mm]{0,2})?)
augmnt: (((((((((((0[0-9])|(1[012]))/)(([012][0-9])|(3[01])))/)((2[01])|(1[6-9])))([0-9][0-9]))(([\t-\r ]((0[0-9])|(1[012])))(((:[0-5])[0-9])((:[0-5])[0-9])?))*)[\t-\r ]*)([APap]([Mm]?[Mm]?))?)#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  03/31/2079  06/14/2016  01/31/2009  04/17/2108  09/30/2184  12/30/1794
ex(1):  08/00/1791   02/03/1637  10/16/1825 09:31:34   07/22/2064 12:52
ex(2):  11/02/1730AM  11/27/1908pMM  12/30/1640 09:24:40am
ex(3):  11/31/1621 07:08  Am  11/12/1751 10:34:06 12:23amm
ex(5):  06/30/2070 09:20:10 10:22:17 08:29:44
ex(8):  01/28/1736 10:04:06 06:56:27 11:27 02:08:12 12:11 04:31    
---------------- Examples from DFA ---------------
s1:  03/23/2161
s13:  03/23/2161A
s24:  03/23/2161 
s23:  03/23/2161AM
s25:  03/23/2161  
s22:  03/23/2161AMm
s14:  03/23/2161 04:53

         

         #A: Brad Williams
         #D: improved date validation M/D/YY or M/D/YYYY or MM/DD/YYYY or MM/DD/YY: 1/1/1920 through 12/31/2019; Feb 29 and 30 always allowed, deal with it
         #U: http://regexlib.com/REDetails.aspx?regexp_id=235
expr 138: ^((0?[13578]|10|12)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[01]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1}))|(0?[2469]|11)(-|\/)(([1-9])|(0[1-9])|([12])([0-9]?)|(3[0]?))(-|\/)((19)([2-9])(\d{1})|(20)([01])(\d{1})|([8901])(\d{1})))$
tree:   (((((((0?[13578])|(10)|(12))(-|/))([1-9]|(0[1-9])|([12][0-9]?)|(3[01]?)))(-|/))((((19)[2-9])[0-9])|(((20)[01])[0-9])|([0189][0-9])))|((((((0?[2469])|(11))(-|/))([1-9]|(0[1-9])|([12][0-9]?)|(30?)))(-|/))((((19)[2-9])[0-9])|(((20)[01])[0-9])|([0189][0-9]))))
augmnt: ((((((((0?[13578])|(10)|(12))(-|/))([1-9]|(0[1-9])|([12][0-9]?)|(3[01]?)))(-|/))((((19)[2-9])[0-9])|(((20)[01])[0-9])|([0189][0-9])))|((((((0?[2469])|(11))(-|/))([1-9]|(0[1-9])|([12][0-9]?)|(30?)))(-|/))((((19)[2-9])[0-9])|(((20)[01])[0-9])|([0189][0-9]))))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  3/3-1962  12-9-1992  6-5/2009  2-1-2006  1-3-2007  12/1-2002  12-2-2011
ex(1):  07-08-1962  03-05/1994  10-2-80  11/1-2019  06-3-1980  12-5/18
ex(2):  7/7-1983  11/3-2004  10/3/2016  11-9/2004  12/7-99  07/30-2010
ex(3):  10/3-2003  10/07/1987  5/9/12  06-05-1999  12/3-17  2-2-2010
ex(5):  10/3-99  10-04-2012  09-2/1999  01/07/1979  11-5-84  02-07-96  10-30-90
ex(8):  12/06-1959  11-09/1934  11/3-2012  06-02/2017  11/07-1979  10/1-2008
---------------- Examples from DFA ---------------
s1:  1-2-82
s9:  1-2-19

         

         #A: Ken Madden
         #D: This time validation expression accepts an hour between 1 and 9 (with optional leading zero) and minutes between 01 and 59.  This is primarily for use with an AM/PM drop down list or radio button.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=237
expr 139: ^(([0]?[1-9]|1[0-2])(:)([0-5][0-9]))$
tree:   ((((0?[1-9])|(1[012])):)([0-5][0-9]))
augmnt: (((((0?[1-9])|(1[012])):)([0-5][0-9]))#)
length: 4 to 5
-------------------- Examples --------------------
ex(0):  1:45  8:08  3:02  3:44  12:56  1:47  6:23  5:07  4:17  4:30  7:10
ex(1):  11:10  10:27  05:34  8:32  7:20  4:40  12:50  11:22  4:39  1:08  04:07
ex(2):  10:57  11:34  12:47  6:50  6:10  12:52  2:59  12:38  11:31  6:32  12:20
ex(3):  2:53  1:40  10:26  6:47  11:00  10:03  11:53  06:16  5:06  11:23  7:36
ex(5):  08:58  1:00  12:20  02:56  06:18  05:30  12:22  12:37  3:48  02:32
ex(8):  06:11  05:17  01:19  11:56  06:21  11:15  01:54  10:28  12:27  11:00
---------------- Examples from DFA ---------------
s1:  1:31

         

         #A: Jim Tebbel
         #D: validate 12-hour time with am/pm after it, with optional spaces before or after, and optionally between time and am/pm.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=238
expr 140: ^ *(1[0-2]|[1-9]):[0-5][0-9] *(a|p|A|P)(m|M) *$
tree:   (((((((( *((1[012])|[1-9])):)[0-5])[0-9]) *)(a|p|A|P))(m|M)) *)
augmnt: ((((((((( *((1[012])|[1-9])):)[0-5])[0-9]) *)(a|p|A|P))(m|M)) *)#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  11:56Pm  12:06Pm  4:01Am  12:48pm  10:29Pm  3:02PM  10:38AM  5:04PM
ex(1):  12:28Am    1:36Am    10:08PM   3:02 Am    10:14Am    12:10 aM  12:52 pM
ex(2):    3:26AM    11:53pm     4:40PM  8:35  Am   10:59 am  9:38 PM 
ex(3):  6:41 Pm     11:20  pM    12:13   pm       3:33 Pm       12:27   PM
ex(5):    2:00am        5:29AM      11:23     AM           6:01pM  
ex(8):     1:50am           12:26  AM                  10:08  AM     
---------------- Examples from DFA ---------------
s1:  1:53Pm

         

         #A: s4 s
         #U: http://regexlib.com/REDetails.aspx?regexp_id=239
expr 141: \({1}[0-9]{3}\){1}\-{1}[0-9]{3}\-{1}[0-9]{4}
tree:   ((((((([0-9]{3})))-)[0-9]{3})-)[0-9]{4})
augmnt: (((((((((([0-9][0-9])[0-9]))))-)(([0-9][0-9])[0-9]))-)((([0-9][0-9])[0-9])[0-9]))#)
length: 14 to 14
-------------------- Examples --------------------
ex(0):  (436)-778-8798  (610)-586-1620  (278)-830-9474  (897)-270-4290
ex(1):  (647)-943-4821  (326)-620-8890  (119)-099-4226  (939)-037-8873
ex(2):  (979)-034-1400  (803)-084-4103  (685)-628-9327  (981)-091-6885
ex(3):  (185)-883-0930  (066)-707-9080  (743)-393-7536  (488)-440-4659
ex(5):  (381)-378-4656  (592)-069-0116  (151)-867-8910  (516)-199-7724
ex(8):  (423)-905-1073  (617)-866-9926  (368)-216-7952  (527)-194-9812
---------------- Examples from DFA ---------------
s1:  (667)-760-7011

         

         #A: Bob Duffett
         #D: MM-DD-20YY HH:MM AP
MM-DD-20YY H:MM AP
MM-DD-20YY HH:MM
MM-DD-20YY H:MM
MM-DD-YY HH:MM AP
MM-DD-YY H:MM AP
MM-DD-YY HH:MM
MM-DD-YY H:MM
M-D-YY HH:MM AP
M-D-YY H:MM AP
M-D-YY HH:MM
M-D-YY H:MM
where - can be / or - or .
where : can be : or - or .
Definition:
^(                       ;Start of Line
([0]?[1-9]|[1][0-2])     ;00-09 or 10-12 or 1-9
[\/|\-|\.]               ;/ or - or .
([0-2]\d|[3][0-1]|[1-9]) ;00-29 or 30-31 or 1-9
[\/|\-|\.]               ;/ or - or .
([2][0])?\d{2}           ;2000-2099 or 00-99
\s+                      ;one or more spaces
(                        ;must be either 12H notation w/AM|PM
(
([0][0-9]|[1][0-2]|[0-9])
[\:|\-|\.]              ;: or - or .
([0-5]\d)               ;01 thru 59
\s*                     ;zero or more spaces
([aApP][mM])?           ;nothing or AM or PM (case insensitive)
)
|                        ;or 24H notation w/out AM|PM
(
([0-1][0-9]|[2][0-3]|[0-9]) ;00-19 or 20-23
[\:|\-|\.]              ;: or - or .
([0-5]\d)               ;00-59
)
)
)$                       ;End of Line
         #U: http://regexlib.com/REDetails.aspx?regexp_id=241
expr 142: ^(([0]?[1-9]|[1][0-2])[\/|\-|\.]([0-2]\d|[3][0-1]|[1-9])[\/|\-|\.]([2][0])?\d{2}\s+((([0][0-9]|[1][0-2]|[0-9])[\:|\-|\.]([0-5]\d)\s*([aApP][mM])?)|(([0-1][0-9]|[2][0-3]|[0-9])[\:|\-|\.]([0-5]\d))))$
tree:   (((((((((0?[1-9])|(1[012]))[./|-])(([012][0-9])|(3[01])|[1-9]))[./|-])(20)?)[0-9]{2})[\t-\r ]+)(((((((0[0-9])|(1[012])|[0-9])[.:|-])([0-5][0-9]))[\t-\r ]*)([APap][Mm])?)|(((([01][0-9])|(2[0-3])|[0-9])[.:|-])([0-5][0-9]))))
augmnt: ((((((((((0?[1-9])|(1[012]))[./|-])(([012][0-9])|(3[01])|[1-9]))[./|-])(20)?)([0-9][0-9]))[\t-\r ]+)(((((((0[0-9])|(1[012])|[0-9])[.:|-])([0-5][0-9]))[\t-\r ]*)([APap][Mm])?)|(((([01][0-9])|(2[0-3])|[0-9])[.:|-])([0-5][0-9]))))#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  1|8|88 8.50  1|7.62 20.23  5.30/78 08-10  12/7/39 22.43  10/21.26 2-48
ex(1):  12-08|2070 00.35  04.31.2007 2|48  04.30-87 19.54  1|30|2022 2.32
ex(2):  7/03|75  8|04   02|7-2031 01.17  3/3/06  6.51  10.31.95  9:37
ex(3):  01|3/63  1:19  11|30|19 7-26   pM  5|2-70 9|07   12/8.2086   8.27
ex(5):  08/4-19    1-58  pM  10-3-96  10-25  10|3-24     02:10     Am
ex(8):  11|31|71        10.17  6/8-23        8|28  10/30|2017  12:38
---------------- Examples from DFA ---------------
s1:  1.2|67 0:58
s14:  1.2|67 23|08

         

         #A: Michael Gaertner
         #D: Match any number between 1 and 50, no characters, no empty sets, and not zero. Match numbers greater than 1 and less than 51, no spaces, no characters.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=242
ERROR:   ^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$
    rx: Embedded '$' unimplemented: in "^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^50$"

         

         #A: Mekonnen Mekonnen
         #D: Matches dates with the following format
Month - either MM (like 01) or M (like 1) - from 1 to 12
Day - either DD (like 01) or D ( like 1) - from 1 to 31
Year - either YYYY ( like 1998) or YY (like 98)
Separater - either - or /
         #U: http://regexlib.com/REDetails.aspx?regexp_id=244
expr 143: ^([1][12]|[0]?[1-9])[\/-]([3][01]|[12]\d|[0]?[1-9])[\/-](\d{4}|\d{2})$
tree:   ((((((1[12])|(0?[1-9]))[/-])((3[01])|([12][0-9])|(0?[1-9])))[/-])([0-9]{4}|[0-9]{2}))
augmnt: (((((((1[12])|(0?[1-9]))[/-])((3[01])|([12][0-9])|(0?[1-9])))[/-])(((([0-9][0-9])[0-9])[0-9])|([0-9][0-9])))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  12-27-8798  12/15-0162  11-6-00  1-31-2708  12-30/7784  8/5-4783
ex(1):  11-9/9001  06-30-6893  03-30/35  8-30-5560  12-20-7140  11-6/6410
ex(2):  12-24-10  11-06/0982  12-15-8832  12-16/2707  02-30-83  04/3-5644
ex(3):  12/28-81  8/30-60  07/19-1162  03-05-09  09-05-24  11-03-6964  12-20/10
ex(5):  12-01/79  5-26-94  09/03/7717  1-30-7604  1/09-35  12/30/3798
ex(8):  12-07-21  11/24-9798  07/07/83  12-1/6188  9/23-2961  11/30/6936
---------------- Examples from DFA ---------------
s1:  1-1/41
s8:  1-1/4171

         

         #A: Patrick O'Hara
         #D: Validates time in MySQL time format.  24 hour time colon seperated hours:minutes:seconds
         #U: http://regexlib.com/REDetails.aspx?regexp_id=248
expr 144: (([0-1][0-9])|([2][0-3])):([0-5][0-9]):([0-5][0-9])
tree:   (((((([01][0-9])|(2[0-3])):)([0-5][0-9])):)([0-5][0-9]))
augmnt: ((((((([01][0-9])|(2[0-3])):)([0-5][0-9])):)([0-5][0-9]))#)
length: 8 to 8
-------------------- Examples --------------------
ex(0):  03:56:58  07:02:50  05:20:02  12:25:23  09:14:29  20:30:02  21:24:57
ex(1):  18:14:34  01:32:00  00:48:40  21:50:36  02:09:39  03:08:33  20:09:22
ex(2):  20:07:20  18:52:48  04:03:28  22:48:13  19:41:40  20:28:23  02:29:48
ex(3):  03:29:05  06:27:59  20:07:33  19:47:56  20:16:00  22:19:23  00:36:38
ex(5):  04:56:59  00:29:41  22:51:18  13:31:55  20:59:47  22:42:25  23:06:44
ex(8):  21:16:34  22:19:26  16:59:36  21:47:47  01:41:01  07:24:17  21:00:06
---------------- Examples from DFA ---------------
s1:  12:06:13

         

         #A: Rick Yokum
         #D: This expression will allow a time value with 15 minute increments.  It will not accept seconds.  You can use either US time or Military time format.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=249
expr 145: ^((([0]?[1-9]|1[0-2])(:|\.)(00|15|30|45)?( )?(AM|am|aM|Am|PM|pm|pM|Pm))|(([0]?[0-9]|1[0-9]|2[0-3])(:|\.)(00|15|30|45)?))$
tree:   (((((((0?[1-9])|(1[012]))(:|.))((00)|(15)|(30)|(45))?) ?)((AM)|(am)|(aM)|(Am)|(PM)|(pm)|(pM)|(Pm)))|((((0?[0-9])|(1[0-9])|(2[0-3]))(:|.))((00)|(15)|(30)|(45))?))
augmnt: ((((((((0?[1-9])|(1[012]))(:|.))((00)|(15)|(30)|(45))?) ?)((AM)|(am)|(aM)|(Am)|(PM)|(pm)|(pM)|(Pm)))|((((0?[0-9])|(1[0-9])|(2[0-3]))(:|.))((00)|(15)|(30)|(45))?))#)
length: 2 to 8
-------------------- Examples --------------------
ex(0):  5:AM  7.PM  22.  3:AM  20:  6:PM  10:  7:PM  4.aM  21.  12.Pm  8:aM
ex(1):  09. pM  4.00 pM  07:00  10:45  11.Am  08:  06:  6.00 am  11: Pm  8:am
ex(2):  06:  19.  01.15 Pm  2:Pm  10:  09. Pm  17:  11.PM  1.  23.  19.45
ex(3):  17.  14:  15.  20.  16.30  17.00  17.00  19:  12:45 PM  04.pm  19:  03.
ex(5):  22:15  10: am  6.aM  04:15  3:15  3. PM  6:  20.  12:30Pm  16.  9:45pm
ex(8):  21.  3:30am  17:00  21:  2.15  11.45pm  10:00 Am  2.Pm  10: aM  05:45
---------------- Examples from DFA ---------------
s1:  0:
s11:  2:
s6:  0:30
s9:  2:00

         

         #A: Diego dos Santos
         #D: Validate brazilian date formats: dd/mm/yyyy or d/m/yy or d.m.yyyy
with separators: . - /
Valid dates only! d (1-31)/ m (1-12)/ y (0..)
(rizzipereira.com.br)
For American date format: http://www.regexlib.com/REDetails.aspx?regexp_id=932
         #U: http://regexlib.com/REDetails.aspx?regexp_id=250
expr 146: ^([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0]?[1-9]|[1][0-2])[./-]([0-9]{4}|[0-9]{2})$
tree:   ((((((0?[1-9])|([12|][0-9])|(3[01|]))[./-])((0?[1-9])|(1[012])))[./-])([0-9]{4}|[0-9]{2}))
augmnt: (((((((0?[1-9])|([12|][0-9])|(3[01|]))[./-])((0?[1-9])|(1[012])))[./-])(((([0-9][0-9])[0-9])[0-9])|([0-9][0-9])))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1.9.78  7/10-00  6-7/2012  9/9.0947  4/10-7084  |7/6-78  20/10/83
ex(1):  9/4-0119  31-6.8939  3-12/35  |6-10-56  9.11/47  20.6-08  5.06.24
ex(2):  4-11/5238  31.9.24  23.7.9305  31/12.08  7-10-36  07/5.4407  3.12/0053
ex(3):  3-09-0699  16.12/86  29-03/2199  12-8.5937  5/4/21  |5/05-74
ex(5):  26.11.52  10-11/1287  3|.11/0066  30/7/1124  9-11.59  6.11/86
ex(8):  04/10-21  28.10.79  07-11/5783  04/9-1889  3|.10-61  31-5.6936
---------------- Examples from DFA ---------------
s1:  1/1-14
s9:  1/1-1417

         

         #A: Bri Gipson
         #D: Accepts only positive decimal values. Zero and negatvie numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=251
ERROR:   (^\d*\.?\d*[1-9]+\d*$)|(^[1-9]+\d*\.\d*$)
    rx: Embedded '^' unimplemented: in "(^\d*\.?\d*[1-9]+\d*$)|(^[1-9]+\d*\.\d*$)"

         

         #A: Bri Gipson
         #D: Accepts only negative decimal values. Zero and positive numbers are non-matching. Allows zeros after last non-zero numeric value after decimal place for significant digits. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=252
ERROR:   (^-\d*\.?\d*[1-9]+\d*$)|(^-[1-9]+\d*\.\d*$)
    rx: Embedded '^' unimplemented: in "(^-\d*\.?\d*[1-9]+\d*$)|(^-[1-9]+\d*\.\d*$)"

         

         #A: martix wang
         #D: this is a regular expression that for chinese programer!
yyyy/mm/dd hh:mm:ss
         #U: http://regexlib.com/REDetails.aspx?regexp_id=253
ERROR:   ^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1]))$|^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$
    rx: Embedded '$' unimplemented: in "^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1]))$|^([2][0]\d{2}\/([0]\d|[1][0-2])\/([0-2]\d|[3][0-1])\s([0-1]\d|[2][0-3])\:[0-5]\d\:[0-5]\d)$"

         

         #A: Ramon Durães
         #D: This re was used for set numbers only!
Somente numeros são requeridos!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=257
expr 147: ^[+]?\d*$
tree:   (+?[0-9]*)
augmnt: ((+?[0-9]*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    +6  +    +    +  8    +  2  +4  0  4  +  7    0    0  +    +  9  1  +
ex(2):    +  2  +20  08    +  +91    +2  8  +  +37  87  +0  +  +    +  79  +34
ex(3):  +32  +  41  7  52    79  +998  +  1  88  +802  98    2  8  +88  +  +50
ex(5):  +99080  433  936  +63488  +  7465  +43  0536  +  +817  7  46  +5926
ex(8):  +    +98  3  109516  199477  822  59  +269  4  2190551  336174  +  9926
---------------- Examples from DFA ---------------
s0:  
s1:  2

         

         #A: Morten Henriksen
         #D: Accepts data of time in format h:mm and hh:mm
^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
in php [0-23]:[0-59]{2} (posix)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=261
expr 148: ^([0-1]?[0-9]|[2][0-3]):([0-5][0-9])$
tree:   (((([01]?[0-9])|(2[0-3])):)([0-5][0-9]))
augmnt: ((((([01]?[0-9])|(2[0-3])):)([0-5][0-9]))#)
length: 4 to 5
-------------------- Examples --------------------
ex(0):  4:45  7:08  7:02  1:44  22:56  0:47  5:23  0:07  6:17  0:30  4:10
ex(1):  22:10  23:27  14:34  1:32  0:20  8:40  21:50  22:22  9:39  3:08  15:07
ex(2):  22:57  21:34  20:47  3:50  6:10  20:52  2:59  23:38  20:31  8:32  22:20
ex(3):  1:53  8:40  22:26  2:47  22:00  23:03  22:53  08:16  0:06  23:23  0:36
ex(5):  14:58  6:00  20:20  10:56  11:18  18:30  23:22  21:37  8:48  13:32
ex(8):  10:11  13:17  06:19  20:56  12:21  23:15  00:54  20:28  20:27  21:00
---------------- Examples from DFA ---------------
s1:  0:12

         

         #A: Kevin Coleman
         #D: Validates MM/YY for rough checking credit card expiration dates.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=262
expr 149: ^((0[1-9])|(1[0-2]))\/(\d{2})$
tree:   ((((0[1-9])|(1[012]))/)[0-9]{2})
augmnt: (((((0[1-9])|(1[012]))/)([0-9][0-9]))#)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  05/56  10/87  10/10  06/60  11/12  12/83  06/74  05/80  03/42  10/64
ex(1):  12/36  02/94  10/21  03/20  09/88  10/19  10/96  08/89  10/03  12/73
ex(2):  10/55  09/79  12/47  11/78  07/08  05/03  11/24  06/93  05/81  04/10
ex(3):  03/09  09/52  01/30  07/09  11/66  07/79  11/07  07/39  10/36  12/56
ex(5):  11/43  07/36  10/83  09/37  07/56  03/60  02/01  11/51  10/73  04/95
ex(8):  10/24  08/45  12/26  11/23  08/55  10/36  10/86  06/26  02/79  03/79
---------------- Examples from DFA ---------------
s1:  04/19

         

         #A: Bassel Issa
         #D: this pattern can find all lines of script in HTML code from open to close tag range
         #U: http://regexlib.com/REDetails.aspx?regexp_id=265
expr 150: <script[^>]*>[\w|\t|\r|\W]*</script>
tree:   ((((((((((((((((((<s)c)r)i)p)t)[\x01-=?-\u007f]*)>)[\x01-\u007f]*)<)/)s)c)r)i)p)t)>)
augmnt: (((((((((((((((((((<s)c)r)i)p)t)[\x01-=?-\u007f]*)>)[\x01-\u007f]*)<)/)s)c)r)i)p)t)>)#)
length: 17 to *
-------------------- Examples --------------------
ex(0):  <script></script>  <script></script>  <script></script>
ex(1):  <scriptB>n</script>  <scriptp>{</script>  <script>;</script>
ex(2):  <script@G>=</script>  <scriptm1></script>  <script'3>F</script>
ex(3):  <scriptB>wk</script>  <script\\B7></script>  <script ~>S/9</script>
ex(5):  <script1(jH>;</script>  <script><NSY)</script>  <scriptXg|>Y</script>
ex(8):  <script,)ow>;sCa-*</script>  <scriptenG2YrF'>2i></script>
---------------- Examples from DFA ---------------
s1:  <script></script>

         

         #A: Dennis Flynn
         #D: Incorporated other people's examples; removed extraneous parenthesis on 10/7/04.  Currently the SSA site says 772 is the highest AREA number generated (http://www.ssa.gov/employer/highgroup.txt).  Old expression was:  (^|\s)\d{3}(-?|[\. ])\d{2}\2\d{4}($|\s|[;:,!\.\?]).  Looks for either the beginning of a line or whitespace before the beginning of the social security number, then either zero or one hyphen OR one of a period or space, then uses the \3 to reference the value returned in the parenthesis that includes the -?|[\. ] (basically says if the first dash, period, or space is there, then the second one is required; and if the first dash, period, or space is not there, then the second one can't be either), and finally looks for the end of a line, whitespace, or punctuation characters after the social security number.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=266
ERROR:   (^|\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\d{2}|7[0-6]\d|77[0-2])(-?|[\. ])([1-9]0|0[1-9]|[1-9][1-9])\3(\d{3}[1-9]|[1-9]\d{3}|\d[1-9]\d{2}|\d{2}[1-9]\d)($|\s|[;:,!\.\?])
    rx: Embedded '^' unimplemented: in "(^|\s)(00[1-9]|0[1-9]0|0[1-9][1-9]|[1-6]\d{2}|7[0-6]\d|77[0-2])(-?|[\. ])([1-9]0|0[1-9]|[1-9][1-9])\3(\d{3}[1-9]|[1-9]\d{3}|\d[1-9]\d{2}|\d{2}[1-9]\d)($|\s|[;:,!\.\?])"

         

         #A: Gregory Entin
         #D: Matches comma-separated list of IP address and IP ranges. E.g. 192.168.101.1-192.168.101.255,192.168.102.12
         #U: http://regexlib.com/REDetails.aspx?regexp_id=267
ERROR:   ^(((((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])-(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))),)*)(((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-
    rx: unclosed '[': in "^(((((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])-(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))|((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9]))),)*)(((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-"

         

         #A: Chuck Scholton
         #D: This will check if a number is an integer.  Positive integers are all the whole numbers greater than zero: 1, 2, 3, 4, 5, ... . Negative integers are all the opposites of whole numbers: -1, -2, -3,-4, -5, ... .  Zero is not a whole number with either a positive or negative value, and is not an interger.  Null or Empty values are not intergers.     
         #U: http://regexlib.com/REDetails.aspx?regexp_id=268
expr 151: ^[-+]?[1-9]\d*\.?[0]*$
tree:   (((([+-]?[1-9])[0-9]*).?)0*)
augmnt: ((((([+-]?[1-9])[0-9]*).?)0*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  1  5  2  9  8  8  9  1  4  7  3  3  4  7  7  3  3  2  1  6  4  9  7
ex(1):  5.0  +20  +4.  40  5.  47  +93  +5.  32.  7  5.  +60.  6  +440  6.0  8.
ex(2):  99.00  +57  +6800  4600  279.00  3  +28  60200  9500  +2  330.0  600  2
ex(3):  -43000  +7.00  -3200.00  538.  -746.  -9  20.  11.  2891000  79.000
ex(5):  +5644230  91000  +186699.0000  +117.0000  1941.00000  37.00000  52700
ex(8):  +23592462.0  +900.00000  +4350721430000000  879833443.00  +8193902000
---------------- Examples from DFA ---------------
s1:  3
s3:  3.

         

         #A: nick bennett
         #D: Matches a valid email address including ip's which are rarely used. Allows for a-z0-9_.- in the username, but not ending in a full stop i.e user.@domain.com is invalid and a-z0-9- as the optional sub domain(s) with domain name and a 2-7 char (a-z) tld allowing for short tld's like ca and new ones like museum.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=269
ERROR:   ^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$
    rx: prefer-fewer '?' unimplemented: in "^[\w-]+(\.[\w-]+)*@([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$"

         

         #A: X Man
         #D: This expression finds all opening and closing tags.  Good for stripping out tags in an XML or HTML document.
I used it to clean-up HTML documents that had XML mixed in.  It found all the tags, then I just deleted the ones that weren't standard.  I used it in HOMESITES extended find.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=270
expr 152: <[^>]+>
tree:   ((<[\x01-=?-\u007f]+)>)
augmnt: (((<[\x01-=?-\u007f]+)>)#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  <$>  <9>  <w>  <x>  <s>  <X>  <=>  <D>  <I>  <!>  <d>  <i>  <W>  <6>
ex(1):  <7>  <'>  <V>  <f>  <{>  <c>  <~>  <C>  <Z>  <T>  <B>  <n>  <1>  <s>
ex(2):  <p>  <$>  <{V>  <`>  <,>  <=>  <Gu>  <Z>  <|u>  <h4>  <a{>  <|e>  <(>
ex(3):  </2>  <K=>  <\\i>  <\\@>  <U1>  <1>  <qo>  <l>  <_HO>  <h'3>  <X\\6>
ex(5):  <-#c%>  <[>  <mYa'>  <i>  <tPP>  <7]wkZ>  <x2f]B>  <.DC>  <B>  </>
ex(8):  <xZS^[d\">  <5q/>  <]>  <L8&{IJS>  <jdq;(sQI>  <!IC|X.~`>  <.7Y>  <H>
---------------- Examples from DFA ---------------
s1:  <:>

         

         #A: Jason N. Gaylord
         #D: This regex is to validate the time of a ~60 minute CD where the most time on the CD is 59:59 (minutes:seconds). It is derived from Ken Madden's time regex for a project for Erik Porter (Windows/Web guru). Written by Jason Gaylord.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=271
expr 153: ^(([0]?[0-5][0-9]|[0-9]):([0-5][0-9]))$
tree:   (((((0?[0-5])[0-9])|[0-9]):)([0-5][0-9]))
augmnt: ((((((0?[0-5])[0-9])|[0-9]):)([0-5][0-9]))#)
length: 4 to 6
-------------------- Examples --------------------
ex(0):  03:56  7:08  9:06  0:05  20:02  12:25  23:49  14:29  8:07  44:10  4:20
ex(1):  0:13  38:14  3:02  2:26  22:48  001:59  0:36  46:33  9:23  8:27  5:07
ex(2):  29:31  0:07  4:47  52:48  41:37  52:22  052:19  040:30  05:58  20:22
ex(3):  3:08  2:53  046:27  030:00  4:38  9:47  3:54  16:00  4:59  0:52  33:11
ex(5):  7:24  045:26  29:41  6:35  1:06  3:31  056:01  9:37  22:44  9:57  56:02
ex(8):  5:07  3:17  006:59  23:27  2:21  9:47  2:00  9:19  027:24  057:00
---------------- Examples from DFA ---------------
s1:  0:44

         

         #A: Nicholas Rathwell
         #D: It could be use to validate html input form (checkbox, optionbox, selectbox) when you have multiple numeric value under one field name. The validation is that the user have at lease chose one or more!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=272
expr 154: ^[0-9]{1,}(,[0-9]+){0,}$
tree:   ([0-9]+(,[0-9]+)*)
augmnt: (([0-9]+(,[0-9]+)*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  0,7  8,8  3  0,7  4  8,8  0  7  8  2,7  4  4  7,4  3,9  1,4  7  3,3
ex(2):  2,26  0,8,9  0,91  9  4,8,99  0  88,57,69  02  56  9,70  47,0  80,08,4
ex(3):  462,32,98  420,68  5  802,82,52  185,8  2  305,827,990  00,3,9,75  634
ex(5):  07465,4  2005,1898,1743,0465  05,00,90116,51,86738,09  1,199,724
ex(8):  74786699,63687,1  17952,76019,98128796,7717960,6
---------------- Examples from DFA ---------------
s1:  3

         

         #A: Rahul Pandit
         #D: Additional checks for <> and " characters
         #U: http://regexlib.com/REDetails.aspx?regexp_id=273
ERROR:   ^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*<>:\;|\"/]+$
    rx: '(?...' unimplemented: in "^(?!^(PRN|AUX|CLOCK\$|NUL|CON|COM\d|LPT\d|\..*)(\..+)?$)[^\x00-\x1f\\?*<>:\;|\"/]+$"

         

         #A: Zeljko Stanfel
         #D: ICD9 code pattern
         #U: http://regexlib.com/REDetails.aspx?regexp_id=274
ERROR:   ^\d{3,3}\.\d{0,2}$|^E\d{3,3}\.\d{0,2}$
    rx: Embedded '$' unimplemented: in "^\d{3,3}\.\d{0,2}$|^E\d{3,3}\.\d{0,2}$"

         

         #A: Jeff Howden
         #D: [Note: this regex was tested with Macromedia's ColdFusion MX.  I'm sure it'll need some massaging to work with other regex engines.]  Of the few domain validating regular expressions I found in my search I didn't find a single one that reliably handled multiple levels of subdomains or TLDs.  So, I wrote one and thoroughly tested it.  There are a ton of matching and non-matching examples that need to be included to show the completeness of this regex.
Non-matching:  -.domain.com, -a.domain.com, -domain.com, domain-.com, any domain where the portion before the tld is greater than 63 characters.
Matching: a.domain.com, a-a.domain.com, a--a.domain.com, a--defg.com, domain.co.uk.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=275
expr 155: ^([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?\.){0,}([a-z0-9]+([\-a-z0-9]*[a-z0-9]+)?){1,63}(\.[a-z0-9]{2,7})+$
tree:   (((([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?).)*([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?){1,63})(.[0-9a-z]{2,7})+)
augmnt: ((((([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?).)*((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?)([0-9a-z]+([0-9a-z-]*[0-9a-z]+)?)?))(.(((((([0-9a-z][0-9a-z])[0-9a-z]?)[0-9a-z]?)[0-9a-z]?)[0-9a-z]?)[0-9a-z]?))+)#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  n.96  2.3q  k.1l  4.kh  q.ei  i.er  9.9c  e.f0  x.bk  d.0w  h.nx  e.m5
ex(1):  tou9vkvu3l3307nv0w4z9k4y3xawcasdh3.gn9
ex(2):  o9nv.2f9bzuh1fm9423325y2l8p26rcsfi10eb9f91la1g3o8-kgglwpx0o21bt7g6-0ezx7yentjnotflnicu3h3angtg6z7l.l27b12
ex(3):  k1md.7wyhb2sm.r6cpqv.olwwecq75uww4gvvqha73e0nohwcr8ctwdls49711fnqnb2os8izpfpbsfi6jqakcrie42jryntkwhshxu77ebpa3j9vl79ehn86g8cadq1slandb70a3zedo78ymebsy297.ntf50p.yx6xn
ex(5):  fscx.2dz.awybagq-0fc0.7.la8j.br498v6acajdh9u9s8wb718v57rzl4750ctauow7jqkf7uf8va-7hhr22vflrc7r5yrs42he6ra3qvc1praujzk-0sqgi4nyitbbabo063op8baxsoy3ye3f3t2vsvd19xzjlr4ochcl31n8yadzwxaubgu.1bs0u.jkqcdok.g7x2b.ky
ex(8):  a69uzjo38j.y94wbu4f9jn.yp86tljgqj4ejzeukgqhqbxch1llvapzd9bjv2wh4ttkecm2gai0uu8ac5t20962uj1y3x63ft8uir11vgc3v095bcsbu9idgtrcia8hgpw59skf1zrf5dezly1o0pqyvvzgzhfe9oipizbf5c4rwm31jdly1f80r41vzx9chzykepn2ogda952kht4qymb54cixw1irmd634i6b-lxfh83mzrkzfws7ph7qsze9871c81hbnljqfn36r9t3kc77u9c66qx7abd967esltk.mdlz.sw.wez.8ba.9sbstt.1ucrd.ilbx.ioj6sf
---------------- Examples from DFA ---------------
s1:  w.w2
s10:  w.w2f
s9:  w.w2fp
s8:  w.w2fpn
s7:  w.w2fpn8
s6:  w.w2fpn89

         

         #A: brent stineman
         #D: Expression to handle US currency entry in .NET. Handy for regular expression validation controls where the user can be entering in a currancy value but you can't control explict entry values. Will accept a wide variety of values that can be easy cast to a double via the CDbl function. Expression is also compatible with default US string format for currency.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=276
expr 156: ^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$
tree:   ($?((((([0-9]{1,3},?)([0-9]{3},?)*)[0-9]{3})(.[0-9]{1,3})?)|([0-9]{1,3}(.[0-9]{2})?)))
augmnt: (($?((((((([0-9][0-9]?)[0-9]?),?)((([0-9][0-9])[0-9]),?)*)(([0-9][0-9])[0-9]))(.(([0-9][0-9]?)[0-9]?))?)|((([0-9][0-9]?)[0-9]?)(.([0-9][0-9]))?)))#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4365  7788  7982  1004  8  0162  1278  4  3009  7468  7  0270  4290  4
ex(1):  301,783.34  22  2900.91  $4939.07  750,702556  710.71  08,084410.62
ex(2):  $8  8  $13832  $5270,908074.896  $64  $44990320536.888  $38560.2
ex(3):  $294,482845,772  $42,551  $67.66  $2.87  $675  $7,198,879467.76
ex(5):  $2  $78  94273  35,432,608,422,983.433  78.39  6,984,136296.66
ex(8):  0597  61.96  $749.82  33449  $945  742.30  775,177,107374750198233,284
---------------- Examples from DFA ---------------
s1:  1
s7:  14
s6:  149
s5:  1491
s4:  1.07
s10:  1,828
s12:  1491.5
s11:  1491.56

         

         #A: James T. Kirk
         #D: matches a six character "password" that has to consist of numbers and letters with at least one letter in it.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=278
ERROR:   ^(?![0-9]{6})[0-9a-zA-Z]{6}$
    rx: '(?...' unimplemented: in "^(?![0-9]{6})[0-9a-zA-Z]{6}$"

         

         #A: Saurabh Nath
         #D: This Validator Validates any date from 1800 - 9999. It takes special care of Leap years and validates any format of type mm/dd/yyyy , m/dd/yyyy , mm/d/yyyy , m/d/yyyy.
Since SQL Server does not accept any date before 1/1/1753, so i hope it will meet Your Requirements.(Modified Version of Jason West's Date Validator.)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=279
ERROR:   ((^(10|12|0?[13578])([/])(3[01]|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])([/])(30|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(2[0-8]|1[0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(29)([/])([2468][048]00)$)|(^(0?2)([/])(29)([/])([3579][26]00)$)|(^(0?2)([/])(29)([/])([1][89][0][48])$)|(^(0?2)([/])(29)([/])([2-9][0-9][0][48])$)|(^(0?2)([/])(29)([/])([1][89][2468][048])$)|(^(0?2)([/])(29)([/])([2-9][0-9][2468][048])$)|(^(0?2)([/])(29)([/])([1][89][13579][26])$)|(^(0?2)([/])(29)([/])([2-9][0-9][13579][26])$))
    rx: Embedded '^' unimplemented: in "((^(10|12|0?[13578])([/])(3[01]|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])([/])(30|[12][0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(2[0-8]|1[0-9]|0?[1-9])([/])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)([/])(29)([/])([2468][048]00)$)|(^(0?2)([/])(29)([/])([3579][26]00)$)|(^(0?2)([/])(29)([/])([1][89][0][48])$)|(^(0?2)([/])(29)([/])([2-9][0-9][0][48])$)|(^(0?2)([/])(29)([/])([1][89][2468][048])$)|(^(0?2)([/])(29)([/])([2-9][0-9][2468][048])$)|(^(0?2)([/])(29)([/])([1][89][13579][26])$)|(^(0?2)([/])(29)([/])([2-9][0-9][13579][26])$))"

         

         #A: scott cole
         #D: Simple, but it gave me trouble in the c#...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=280
expr 157: {.*}
tree:   (({[\x01-\u007f]*)})
augmnt: ((({[\x01-\u007f]*)})#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}  {}
ex(1):  {}  {}  {7}  {u}  {}  {`}  {}  {}  {C}  {:}  {}  {}  {}  {T}  {}  {}
ex(2):  {}  {{}  {M`}  {,}  {}  {}  {_;}  {'2}  {}  {}  {}  {{}  {|e}  {(G}
ex(3):  {2@}  {}  {{\\}  {}  {}  {U1}  {}  {x}  {}  {WDn}  {}  {h'}  {}  {\\6}
ex(5):  {}  {$U}  {+b}  {a'~}  {W/;t}  {}  {]}  {{_Gx2}  {}  {.}  {j}  {1p/*U}
ex(8):  {^[d\"7 ~5}  {9}  {*M+L8>}  {}  {??jdq}  {QI%3}  {C|X.~}  {Y.7Y1(}  {<}
---------------- Examples from DFA ---------------
s1:  {}

         

         #A: kode kode
         #D: This regular expression matches 10 digit US Phone numbers in different formats. Some examples are
1)area code in paranthesis.
2)space between different parts of the phone number.
3)no space between different parts of the number.
4)dashes between parts.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=283
expr 158: ^\(?[\d]{3}\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$
tree:   (((((((?[0-9]{3}))?)[\t-\r -]?)[0-9]{3})[\t-\r -]?)[0-9]{4})
augmnt: ((((((((?(([0-9][0-9])[0-9])))?)[\t-\r -]?)(([0-9][0-9])[0-9]))[\t-\r -]?)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 14
-------------------- Examples --------------------
ex(0):  4436567788  8798261004  5860162012  7854830094  7468978027  0842907464
ex(1):  (478)3342123  6200889001  (910)4228939  (037873 7697  225)497 0347
ex(2):  (376 4627932  (9810916885  3800988652  185)8329305  668-9900074
ex(3):  074-0430053  318) 743-4656  592069 1621  (198 910-6021  (4778224593
ex(5):  (073)-7869992  636-216-5275  760)198 7964  771)0066742  (047-2496073
ex(8):  800)8487322  335 432-0873  229)3343333  578)-9020618  984)-662-4643
---------------- Examples from DFA ---------------
s1:  8703800485

         

         #A: Mike t
         #D: Can be used to remove
&lt;SCRIPT language=&quot;JavaScript&quot;&gt;
&lt;!--
//--&gt;
&lt;/SCRIPT&gt;
from embeded javascript
Should be used as case insensitive
         #U: http://regexlib.com/REDetails.aspx?regexp_id=286
expr 159: (\/\/-->\s*)?<\/?SCRIPT([^>]*)>(\s*<!--\s)?
tree:   ((((((((((((((((//)-)-)>)[\t-\r ]*)?<)/?)S)C)R)I)P)T)[\x01-=?-\u007f]*)>)((((([\t-\r ]*<)!)-)-)[\t-\r ])?)
augmnt: (((((((((((((((((//)-)-)>)[\t-\r ]*)?<)/?)S)C)R)I)P)T)[\x01-=?-\u007f]*)>)((((([\t-\r ]*<)!)-)-)[\t-\r ])?)#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>  <SCRIPT>
ex(1):  </SCRIPT><!--   //--><SCRIPT> <!--   <SCRIPT> <!-- 
ex(2):  </SCRIPT>  //-->  <SCRIPTt><!--   <SCRIPT3d>  <SCRIPT> <!--   <SCRIPTi>
ex(3):  <SCRIPT1p/>  <!--   //-->  <SCRIPT> <!--   //--> </SCRIPTX.>
ex(5):  //--></SCRIPT>     <!--   //-->    <SCRIPTw<6LS>
ex(8):  //-->       <SCRIPT>        <!-- 
---------------- Examples from DFA ---------------
s1:  <SCRIPT>
s20:  <SCRIPT><!-- 

         

         #A: Gavin Sharp
         #D: It verifies that: - Only letters, numbers and email acceptable symbols (+, _, -, .) are allowed - No two different symbols may follow each other - Cannot begin with a symbol - Ending domain must be at least 2 letters - Supports subdomains - TLD must be between 2 and 6 letters (Ex: .ca, .museum) - Only (-) and (.) symbols are allowed in domain, but not consecutively.
Problems:
See comments below
         #U: http://regexlib.com/REDetails.aspx?regexp_id=295
expr 160: ^(([A-Za-z0-9]+_+)|([A-Za-z0-9]+\-+)|([A-Za-z0-9]+\.+)|([A-Za-z0-9]+\++))*[A-Za-z0-9]+@((\w+\-+)|(\w+\.))*\w{1,63}\.[a-zA-Z]{2,6}$
tree:   (((((((([0-9A-Za-z]+_+)|([0-9A-Za-z]+-+)|([0-9A-Za-z]+.+)|([0-9A-Za-z]+++))*[0-9A-Za-z]+)@)(([0-9A-Z_a-z]+-+)|([0-9A-Z_a-z]+.))*)[0-9A-Z_a-z]{1,63}).)[A-Za-z]{2,6})
augmnt: ((((((((([0-9A-Za-z]+_+)|([0-9A-Za-z]+-+)|([0-9A-Za-z]+.+)|([0-9A-Za-z]+++))*[0-9A-Za-z]+)@)(([0-9A-Z_a-z]+-+)|([0-9A-Z_a-z]+.))*)(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([0-9A-Z_a-z][0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)).)((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  H@L.by  s@o.KD  k@K.dU  I@q.Wi  J@d.BK  i@D.BC  9@U.yU  C@B.MF  b@H.tX
ex(1):  5+O@6pYF_vOklu3uiPdnvF1quO9Ze.SkI  d@V.2ffcAeGdBQU2DXaIfoCKVpfWR5i.jwBj
ex(2):  Rm@hgn76kO3UKogNiffkejDKfPa3s.yhMvZ
ex(3):  Rwp@70T18J7BZUNkV7BOkMy4KUJWn069Goxq.IDMC
ex(5):  sRCN__TN.o..O7B3@W---0ec9HunH9jZVML2JhX2eVblLigZ.vCvL
ex(8):  BPD0nonQ.xidHyUN+++++++FQEHQzR@hLt971D_---q9sToI-cuodJs.UJBi.Utp8Zfj6bKAai2qdNtrQVWlRSqS7_JlkLPpzQJ.pgaP
---------------- Examples from DFA ---------------
s1:  B@f.vV
s15:  B@f.vVq
s14:  B@f.vVqj
s13:  B@f.vVqju
s12:  B@f.vVqjuo

         

         #A: Dmitry Kandiner
         #D: International phone number check - optional country code followed by area code surrounded with '-' or '(' and ')', or just an area code optionally starting with 0, followed by phone numder. The number itself may contain spaces and '-'
         #U: http://regexlib.com/REDetails.aspx?regexp_id=296
expr 161: ^(\+[1-9][0-9]*(\([0-9]*\)|-[0-9]*-))?[0]?[1-9][0-9\- ]*$
tree:   ((((((+[1-9])[0-9]*)(((([0-9]*)))|((-[0-9]*)-)))?0?)[1-9])[ 0-9-]*)
augmnt: (((((((+[1-9])[0-9]*)(((([0-9]*)))|((-[0-9]*)-)))?0?)[1-9])[ 0-9-]*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  1  5  2  9  8  8  9  1  4  7  3  3  4  7  7  3  3  2  1  6  4  9  7
ex(1):  16  +6()02  58  7  2   6  +6--04  +34--8  +6()5  +41-0-08  79  +37()08
ex(2):  +6(4)88  +68(1)06-  292  074  1  6  +602(8)5  2  +2(0)0866  73
ex(3):  09  +656()7193  +553(8)7  +8780(605)7  23  +5511--07-  +6(9)0729  694-
ex(5):  +91(36174)1  +366-79-08   08-  +59(87)397  +9()5 -  78- 29  22 7  86
ex(8):  4292 -320  24859    919-97-3   416  09603 0  3  56241028  +5(80)9 - 876
---------------- Examples from DFA ---------------
s1:  7

         

         #A: Joe Gass
         #D: UK Phone Number Allows leading and trailing spaces and optional spaces after the dialing code.
Initially the expression I posted was
\s*0\d{4}\s*\d{6}\s*|\s*0\d{3}\s*\d{7}\s*
But this didn't include optional brackets e.g. (01603) 123123 or phone numbers in a London format e.g. 0208 123 1234
         #U: http://regexlib.com/REDetails.aspx?regexp_id=297
expr 162: (\s*\(?0\d{4}\)?\s*\d{6}\s*)|(\s*\(?0\d{3}\)?\s*\d{3}\s*\d{4}\s*)
tree:   (((((((([\t-\r ]*(?)0)[0-9]{4}))?)[\t-\r ]*)[0-9]{6})[\t-\r ]*)|((((((((([\t-\r ]*(?)0)[0-9]{3}))?)[\t-\r ]*)[0-9]{3})[\t-\r ]*)[0-9]{4})[\t-\r ]*))
augmnt: ((((((((([\t-\r ]*(?)0)((([0-9][0-9])[0-9])[0-9])))?)[\t-\r ]*)((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))[\t-\r ]*)|((((((((([\t-\r ]*(?)0)(([0-9][0-9])[0-9])))?)[\t-\r ]*)(([0-9][0-9])[0-9]))[\t-\r ]*)((([0-9][0-9])[0-9])[0-9]))[\t-\r ]*))#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  03656778887  02610045860  02012785483  09474689780  00842907464
ex(1):   (03348 326206  09001) 099642  (09403)873570    0556979 0347 
ex(2):    08793  814209   02380  828652    0832  506  7079   04338) 753634  
ex(3):     (03780560592  09011  119867        01994)  228459 
ex(5):  09926     161795      (01981  646771   06674     112492  
ex(8):    03350)      087342                 09390        361366
---------------- Examples from DFA ---------------
s1:  05625011143

         

         #A: Dennis Zweigle
         #D: 167 different US telephone patterns. Options includes a)0 or 1 dial, b)area code, c).+-()space between number dial-area code-number.  
         #U: http://regexlib.com/REDetails.aspx?regexp_id=298
expr 163: (([01][\.\- +]\(\d{3}\)[\.\- +]?)|([01][\.\- +]\d{3}[\.\- +])|(\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}
tree:   ((((((((([01][ +.-])()[0-9]{3})))[ +.-]?)|((([01][ +.-])[0-9]{3})[ +.-])|(((([0-9]{3}))) ?)|([0-9]{3}[ .-]))?[0-9]{3})[ .-])[0-9]{4})
augmnt: (((((((((([01][ +.-])()(([0-9][0-9])[0-9]))))[ +.-]?)|((([01][ +.-])(([0-9][0-9])[0-9]))[ +.-])|(((((([0-9][0-9])[0-9])))) ?)|((([0-9][0-9])[0-9])[ .-]))?(([0-9][0-9])[0-9]))[ .-])((([0-9][0-9])[0-9])[0-9]))#)
length: 8 to 16
-------------------- Examples --------------------
ex(0):  443-6778  887.8261  004-6016  201.8548  300.4746  897 2708  429 7464
ex(1):  647-394-4821  326 6208  890 1199  (964)689-9403  0 (570)970 5560
ex(2):  0 (032)846-0376  524 8793  799-1420  068 238-2098  865 1853  883 9305
ex(3):  800-3383  675-348-5644  746-9043  005.3189  381.3780  656.9260
ex(5):  198 389.9516  219.4772  822-4593  269-423-9055  (336) 786.9926
ex(8):  1.527 194 8128  646-179 0666  (760) 112.9260  1.592 256-7986  009.4848
---------------- Examples from DFA ---------------
s1:  146-7338

         

         #A: Dominic Allkins
         #D: First attempt at reg ex - work in progress - can't quite get it to work absolutely correctly so any comments would be great.
Matches everything as it should apart from the last part of the IP, i.e. allows http://255.255.255.999 (which obviously it shouldn't but ran out of inspiration) so any corrections humbly and gratefully accepted.
TLD check is not complete - just added most of the major ones but easy to dd to if you want to.
BTW - you'll need to replace the & with just the ampersand in the reg ex
         #U: http://regexlib.com/REDetails.aspx?regexp_id=301
expr 164: ^(http|https|ftp)\://(((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])|([a-zA-Z0-9_\-\.])+\.(com|net|org|edu|int|mil|gov|arpa|biz|aero|name|coop|info|pro|museum|uk|me))((:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&%\$#\=~])*)$
tree:   (((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)((((((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]).){3}(((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]))|(([.0-9A-Z_a-z-]+.)(((co)m)|((ne)t)|((or)g)|((ed)u)|((in)t)|((mi)l)|((go)v)|(((ar)p)a)|((bi)z)|(((ae)r)o)|(((na)m)e)|(((co)o)p)|(((in)f)o)|((pr)o)|(((((mu)s)e)u)m)|(uk)|(me)))))(((:[0-9A-Za-z]*)?/?)[#-'+-9=?A-Z\_a-z~]*))
augmnt: ((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)((((((((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]).)((((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]).))((((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]).))(((25)[0-5])|((2[0-4])[0-9])|((1[0-9])[0-9])|([1-9][0-9])|[0-9]))|(([.0-9A-Z_a-z-]+.)(((co)m)|((ne)t)|((or)g)|((ed)u)|((in)t)|((mi)l)|((go)v)|(((ar)p)a)|((bi)z)|(((ae)r)o)|(((na)m)e)|(((co)o)p)|(((in)f)o)|((pr)o)|(((((mu)s)e)u)m)|(uk)|(me)))))(((:[0-9A-Za-z]*)?/?)[#-'+-9=?A-Z\_a-z~]*))#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://77.76.255.216  https://Z.arpa  https://0.6.252.80  ftp://5.org
ex(1):  https://A.museum:/B  ftp://7.203.140.103/  http://252.39.199.220:
ex(2):  ftp://107.0.250.13:m/M?  https://FZ.com:Ei  http://6.209.206.0:
ex(3):  ftp://52.5.37.214/zF  ftp://..mil/5_A  ftp://245.127.254.8:sgJI
ex(5):  ftp://200.4.8.122/1x#  http://142.7.43.3:r5Z3yE7Scg  ftp://X6.gov:K5=&n
ex(8):  http://250.241.239.42=B  ftp://v6xYFH.coop:z/C-2,xN
---------------- Examples from DFA ---------------
s1:  ftp://t.me
s14:  ftp://t.me'
s41:  ftp://t.me.
s42:  ftp://t.me2
s40:  ftp://t.me.m
s52:  ftp://t.me.c
s53:  ftp://t.me.n
s54:  ftp://t.me.p
s55:  ftp://t.me.a
s56:  ftp://t.me.u
s59:  ftp://t.me.b
s61:  ftp://t.me.e
s63:  ftp://t.me.g
s65:  ftp://t.me.i
s69:  ftp://t.me.o
s66:  ftp://t.me.mi
s71:  ftp://t.me.mu
s51:  ftp://t.me.co
s67:  ftp://t.me.ne
s86:  ftp://t.me.na
s75:  ftp://t.me.pr
s57:  ftp://t.me.ar
s58:  ftp://t.me.bi
s60:  ftp://t.me.ed
s62:  ftp://t.me.go
s64:  ftp://t.me.in
s68:  ftp://t.me.or
s15:  ftp://0.0.0.1
s43:  ftp://0.0.0.2
s72:  ftp://0.0.0.4
s70:  ftp://t.me.mus
s77:  ftp://t.me.coo
s85:  ftp://t.me.nam
s76:  ftp://t.me.arp
s79:  ftp://0.0.0.25
s78:  ftp://t.me.muse
s74:  ftp://t.me.museu

         

         #A: Carlos R. L. Rodrigues
         #D: Checks if has the first and the last name, and check the capital letters.
Use with the RegExp.test method
         #U: http://regexlib.com/REDetails.aspx?regexp_id=302
ERROR:   (^[A-ZÀ-Ü]{1}[a-zà-ü']+\s[a-zA-Zà-üÀ-Ü]+((([\s\.'])|([a-zà-ü']+))|[a-zà-ü']+[a-zA-Zà-üÀ-Ü']+))
    rx: Embedded '^' unimplemented: in "(^[A-ZÀ-Ü]{1}[a-zà-ü']+\s[a-zA-Zà-üÀ-Ü]+((([\s\.'])|([a-zà-ü']+))|[a-zà-ü']+[a-zA-Zà-üÀ-Ü']+))"

         

         #A: Carlos R. L. Rodrigues
         #D: dd/mm/yy
Check dates between 1/1/1900 - 31/12/2099
         #U: http://regexlib.com/REDetails.aspx?regexp_id=303
ERROR:   (^((((0[1-9])|([1-2][0-9])|(3[0-1]))|([1-9]))\x2F(((0[1-9])|(1[0-2]))|([1-9]))\x2F(([0-9]{2})|(((19)|([2]([0]{1})))([0-9]{2}))))$)
    rx: Embedded '^' unimplemented: in "(^((((0[1-9])|([1-2][0-9])|(3[0-1]))|([1-9]))\x2F(((0[1-9])|(1[0-2]))|([1-9]))\x2F(([0-9]{2})|(((19)|([2]([0]{1})))([0-9]{2}))))$)"

         

         #A: Jag fire
         #D: Matches "clan" nicks/names.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=305
expr 165: ^(\{|\[|\().+(\}|\]|\)).+$
tree:   (((({|[|()[\x01-\u007f]+)(}|]|)))[\x01-\u007f]+)
augmnt: ((((({|[|()[\x01-\u007f]+)(}|]|)))[\x01-\u007f]+)#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  {(]S  [#}c  (1}4  [R}%  (J}T  {f]-  (`}G  {)]M  {u]E  [O)y  {m)7  [[]:
ex(1):  {[}g  [6)H  (p]U  {W]V  (M}l  [m]=  {V)_  {Z)2  {u]y  (J}a  {~)e  [\\}^
ex(2):  {G]g  [i]\\  (h)Zm  (xq}y  {n}(  (')^  (6t]<R  {c%)>  (7)'  [i}tP
ex(3):  (2f]}@.  {j\\)p  {?]y  (S^]7 ~  {/)]*M  (>}J  {?jd)sQ  {%!I).~`  {.)(j
ex(5):  (:oz)k^  (SY}5qBy  (N(]~c5  (QuY]Tl\\  {DQFgw)SV+w;  (?Rk]5)OT]/.
ex(8):  {-*B}|  [^.}z  (en]rF'\"o2i  {;q}g.N  [-yww)U-(`$-<A  (;niA)t*  {b]j<L
---------------- Examples from DFA ---------------
s1:  [l]0

         

         #A: Nicholas Berardi
         #D: Is used to evaluating domain names, none of the extras such as paths or protocols.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=306
expr 166: ^(([\w][\w\-\.]*)\.)?([\w][\w\-]+)(\.([\w][\w\.]*))?$
tree:   (((([0-9A-Z_a-z][.0-9A-Z_a-z-]*).)?([0-9A-Z_a-z][0-9A-Z_a-z-]+))(.([0-9A-Z_a-z][.0-9A-Z_a-z]*))?)
augmnt: ((((([0-9A-Z_a-z][.0-9A-Z_a-z-]*).)?([0-9A-Z_a-z][0-9A-Z_a-z-]+))(.([0-9A-Z_a-z][.0-9A-Z_a-z]*))?)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  Hu  Ly  qO  sz  o-  Bb  kK  K-  lU  uV  B5  Nn  T7  mC  ie  DC  e4  bO
ex(1):  u.C4  xN  H1.K  MW.e  C.Od  L5.Yo  FS.J5  w-.Oo  lr.a_  Qy.BW  e5.l2
ex(2):  klK  uL.vF  t8  9I.ox  5i  8Pu.f5  d6.mPX  8k  SqO  lM.D  3r  mw  t6
ex(3):  oxL.KVQJ  LIi  su.4K0  gB.yf  e1Jt.nY  5I.P  XpHm.rn_  4.daZ.zQOk
ex(5):  7_zdR.Lkx6aG  p8X.l9Af  j.CnYgMD  nANSkJ.dSXH  cgFtED  s__SFD.k  l-6
ex(8):  e6Fue.s0x.iAAwXV.JUW  knpUr3.jFN  PsqaTZ95.sMA-Vb42o.3o.D1IBz  wCX
---------------- Examples from DFA ---------------
s1:  Of
s5:  Of.g
s7:  Of.g.

         

         #A: Rico lour
         #D: Regular expression to match a canadian postal code where it matches a string with or without the hyphen and in upercase or lowercase
         #U: http://regexlib.com/REDetails.aspx?regexp_id=307
expr 167: ^([A-Za-z]\d[A-Za-z][-]?\d[A-Za-z]\d)
tree:   (((((([A-Za-z][0-9])[A-Za-z])-?)[0-9])[A-Za-z])[0-9])
augmnt: ((((((([A-Za-z][0-9])[A-Za-z])-?)[0-9])[A-Za-z])[0-9])#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  m4P6b6  J7G8K7  v8N1U0  Y5E6i1  D0B2d8  Z8a0F4  D4y8X7  A0M7Q8  y2t0t4
ex(1):  P9o-3K4  L8T-3Z4  S2J3O6  I0U0S8  k9m1V9  r1m-6c2  M8r-9Y0  Y8K7x5
ex(2):  i2v-0e9  p9v-3e7  y0E-0z2  x0M6l0  k6m-4s2  z9J7f9  m1Q0q0  E8e-3b2
ex(3):  H2w-5Q8  O3m9s5  M6y2v0  n9h8A0  a3d3p3  G7b-3o8  w5R0H4  Y5a4V2
ex(5):  v8P1j4  b7E4M5  i0l-6E0  S9N1H6  q1v-9k6  Z3S-0F5  b6Z-9I7  b2A2c8
ex(8):  N6M2g1  h0F-0D3  F6p-7s6  M9n-6k3  W8f-1s1  p9l7f2  P6w-4u8  T2k-6o6
---------------- Examples from DFA ---------------
s1:  Q6U7Y7

         

         #A: Daren Salter
         #D: UK Mobile phone regular expression.
I usually run this against a telephone field to split out landlines and mobile numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=308
expr 168: ^07([\d]{3})[(\D\s)]?[\d]{3}[(\D\s)]?[\d]{3}$
tree:   ((((((07)[0-9]{3})[\x01-/:-\u007f]?)[0-9]{3})[\x01-/:-\u007f]?)[0-9]{3})
augmnt: (((((((07)(([0-9][0-9])[0-9]))[\x01-/:-\u007f]?)(([0-9][0-9])[0-9]))[\x01-/:-\u007f]?)(([0-9][0-9])[0-9]))#)
length: 11 to 13
-------------------- Examples --------------------
ex(0):  07365677888  07826100458  07162012785  07300947468  07802708429
ex(1):  07913478B433  07212n206088  07001V910t642  07893V403l873  07076h022a604
ex(2):  07329846103  07852628=327  07814091688  07380209286  07418<088c093
ex(3):  07743_393753  07488]440.659  07432053318  07381[378465  07592006U116
ex(5):  07160199772  07228593;269  07423190C107  07617786999  07636792X179
ex(8):  07879467g796  07666o276470  07249607C035  07462.798800  07484273243
---------------- Examples from DFA ---------------
s1:  07422983343

         

         #A: John Smart
         #D: This is just a regular special char expression used to get the hax0rs off your back (hopefully).  You can use this for regular open name checking if you wanted.  It only fails on the insert of anything other than a-z, A-Z, and ' or whitespace. I'm open to suggestions, but try to email them to me as well as posting them to help others.  Thanks.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=309
expr 169: ^([a-zA-Z.\s']{1,50})$
tree:   [\t-\r '.A-Za-z]{1,50}
augmnt: (((((((((((((((((((((((((((((((((((((((((((((((((([\t-\r '.A-Za-z][\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)[\t-\r '.A-Za-z]?)#)
length: 1 to 50
-------------------- Examples --------------------
ex(0):  V  h  .  C  L  m  v  D  F  K  e  G  T  Y  N  p  S  .  a  p  D  l  X  j
ex(1):     s  h  H  k  t  k  s  e  l  N  H  H  p  z  N     w  K  J  V  y  Y  I
ex(2):  r  BN  zl  qH  u  ms  i  W  a  'H  Bt  P  A  e  I  kl  R  'v  wn  G  CQ
ex(3):  AT  NtG  sO   HI'  x    I  Hr  Uy  BGQ  YrZ  Jv  P  n  Uz  YQi  DQ  QZ
ex(5):  .  EvKd  w  wy  jvv  j  Q  Zyn  DL r  C  yEmG  jPSWp  olFVt  Y'.h  Mp
ex(8):  NnpY  'rSKu   .fO  f tOh  qFnMGJqZ  L D  z  vpuJ  JkakbRn  Srv  B
---------------- Examples from DFA ---------------
s1:  M
s50:  MC
s49:  MCZ
s48:  MCZo
s47:  MCZoN
s46:  MCZoNN
s45:  MCZoNNP
s44:  MCZoNNPk
s43:  MCZoNNPkT
s42:  MCZoNNPkTR
s41:  MCZoNNPkTRZ
s40:  MCZoNNPkTRZw
s39:  MCZoNNPkTRZwm
s38:  MCZoNNPkTRZwmb
s37:  MCZoNNPkTRZwmbb
s36:  MCZoNNPkTRZwmbbg
s35:  MCZoNNPkTRZwmbbgY
s34:  MCZoNNPkTRZwmbbgYz
s33:  MCZoNNPkTRZwmbbgYzo
s32:  MCZoNNPkTRZwmbbgYzoX
s31:  MCZoNNPkTRZwmbbgYzoXC
s30:  MCZoNNPkTRZwmbbgYzoXCu
s29:  MCZoNNPkTRZwmbbgYzoXCux
s28:  MCZoNNPkTRZwmbbgYzoXCuxp
s27:  MCZoNNPkTRZwmbbgYzoXCuxpX
s26:  MCZoNNPkTRZwmbbgYzoXCuxpXv
s25:  MCZoNNPkTRZwmbbgYzoXCuxpXvr
s24:  MCZoNNPkTRZwmbbgYzoXCuxpXvrc
s23:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcU
s22:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUN
s21:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNL
s20:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLn
s19:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLng
s18:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngO
s17:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOl
s16:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOll
s15:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx
s14:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'
s13:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'j
s12:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jr
s11:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrn
s10:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnn
s9:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnb
s8:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnbB
s7:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnbBk
s6:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnbBkH
s5:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnbBkHz
s4:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnbBkHzA
s3:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnbBkHzAN
s2:  MCZoNNPkTRZwmbbgYzoXCuxpXvrcUNLngOllx'jrnnbBkHzANX

         

         #A: Michael Matusiewicz
         #D: This Regular expression validates a string that contains all printable characters with a minimum length of 1 and maximum length of 5.
Obviously the min and max can be changed to meet the users needs.
^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$ This is the string, I keep getting &lt and other characters when I save it.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=310
expr 170: ^([a-zA-Z0-9!@#$%^&*()-_=+;:'"|~`<>?/{}]{1,5})$
tree:   [!-~]{1,5}
augmnt: ((((([!-~][!-~]?)[!-~]?)[!-~]?)[!-~]?)#)
length: 1 to 5
-------------------- Examples --------------------
ex(0):  M  1  8  #  R  c  r  ~  -  g  w  p  R  )  Y  7  4  }  e  9  T  e  =  %
ex(1):  c  e  C  \"  C  :  e  j  #  [  n  #  O  $  #  B  e  W  w  V  l  g  w  ;
ex(2):  o  '  ER  s  3  X5  B  i@  Ze  X  r  A$  m[  x  2  #  G  _  s  U  Mk
ex(3):  (gD  +  uO  7,  ^  3  D^i  Wd8  .  :  (  S/7  :  q  j&^  &C  -  D)  _t
ex(5):  f-I  !wd7\\  AS.  13E  JZJW  8tq  'Y  p  _]  A$EJ  i1C'  uC/{h  U\"w  <
ex(8):  N{/V  mhEI  m;  -*\\  +3q?P  zPW@F  EnxL  V)  yNiS  StU_*  XKuR1  3  ^
---------------- Examples from DFA ---------------
s1:  M
s5:  Mb
s4:  MbI
s3:  MbI8
s2:  MbI8)

         

         #A: gabe g
         #D: Validates US phone numbers. Phone number can be delimited with dashes or spaces. Area code can optionally include parentheses. To optionally validate area codes, try this expression.
^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$
         #U: http://regexlib.com/REDetails.aspx?regexp_id=314
ERROR:   ^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$
    rx: Embedded '^' unimplemented: in "^([\(]{1}[0-9]{3}[\)]{1}[ |\-]{0,1}|^[0-9]{3}[\-| ])?[0-9]{3}(\-| ){1}[0-9]{4}$"

         

         #A: Jason N. Gaylord
         #D: I modified the existing phone number regex for another user looking to only allow 082, 083, 084, or 072 exchanges. Written by Jason Gaylord
         #U: http://regexlib.com/REDetails.aspx?regexp_id=315
expr 171: ^\(?082|083|084|072\)?[\s-]?[\d]{3}[\s-]?[\d]{4}$
tree:   (((((?0)8)2)|((08)3)|((08)4)|(((((((07)2))?)[\t-\r -]?)[0-9]{3})[\t-\r -]?)[0-9]{4}))
augmnt: ((((((?0)8)2)|((08)3)|((08)4)|(((((((07)2))?)[\t-\r -]?)(([0-9][0-9])[0-9]))[\t-\r -]?)((([0-9][0-9])[0-9])[0-9])))#)
length: 3 to 13
-------------------- Examples --------------------
ex(0):  084  0728887982  084  084  082  082  082  083  084  084  082  082  082
ex(1):  084  (082  072-8213262  084  082  084  083  072893-4037  082
ex(2):  083  084  084  084  082  0725242879  072)-0916885  (082  084  082  083
ex(3):  084  084  084  084  084  072 675-4885  084  072)4320536  083  084
ex(5):  082  083  082  072)910-6021  083  083  082  0729642321  072) 6177866
ex(8):  072)760-1981  082  082  083  082  084  082  083  084  083  072563-6800
---------------- Examples from DFA ---------------
s1:  082

         

         #A: Felipe Braga
         #D: This expression validates dates in the Brazilian d/m/y format from 1/1/1600 - 12/31/9999. The days are validated for the given month and year. Leap years are validated for all 4 digits years from 1600-9999. Days and months must be 1 or 2 digits and may have leading zeros. Years must be 4 digit years, between 1600 and 9999. Date separator must be a slash (/)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=316
ERROR:   ^(?:(?:(?:0?[1-9]|1\d|2[0-8])\/(?:0?[1-9]|1[0-2]))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:(?:(?:31\/0?[13578]|1[02])|(?:(?:29|30)\/(?:0?[1,3-9]|1[0-2])))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:29\/0?2\/(?:(?:(?:1[6-9]|[2-9]\d)(?:0[48]|[2468][048]|[13579][26]))))$
    rx: Embedded '$' unimplemented: in "^(?:(?:(?:0?[1-9]|1\d|2[0-8])\/(?:0?[1-9]|1[0-2]))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:(?:(?:31\/0?[13578]|1[02])|(?:(?:29|30)\/(?:0?[1,3-9]|1[0-2])))\/(?:(?:1[6-9]|[2-9]\d)\d{2}))$|^(?:29\/0?2\/(?:(?:(?:1[6-9]|[2-9]\d)(?:0[48]|[2468][048]|[13579][26]))))$"

         

         #A: Cal Guisti
         #D: This is an update of Paul Miller's RegEx.  It will cut out literal <> but I haven't fully tested it, it's just a quick fix since his didn't work all that well.
I also took out the \s.  You could add this back in but I use this for very simple password verification, and I certainly have no use for spaces in my passwords.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=317
expr 172: ^([0-9A-Za-z@.]{1,255})$
tree:   [.0-9@-Za-z]{1,255}
augmnt: ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([.0-9@-Za-z][.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)[.0-9@-Za-z]?)#)
length: 1 to 255
-------------------- Examples --------------------
ex(0):  J  J  x  t  z  M  h  l  U  t  G  M  u  n  c  o  U  1  E  F  D  z  J  U
ex(1):  C  o  4  Z  l  9  .  M  N  p  8  p  s  m  b  G  k  Y  1  g  i  X  H  O
ex(2):  e  Ar  9p  W  d  od  O  Y  fS  L  j  Y  A  i  Lo  Pg  y  U  y  3I  r
ex(3):  LXl  2a  F  Jsb  on  Jfh  jg  d  wY  Eq  nO  V  iS  jy  S  PB.  q  88
ex(5):  TCS  32  4  6D  PX5B  XC9.  EmtqH  4DHfN  2hvu  7lji  36S9  G  5  ok8
ex(8):  1t  vkh  egs  JP0iTbK0  U  43JSufx  o2bw5Ag  qMo  iO1y  fwSbM  n@MJQrf
---------------- Examples from DFA ---------------
s1:  @
s255:  @O
s254:  @Ok
s253:  @OkD
s252:  @OkDT
s251:  @OkDTD
s250:  @OkDTDO
s249:  @OkDTDOC
s248:  @OkDTDOCN
s247:  @OkDTDOCNS
s246:  @OkDTDOCNSp
s245:  @OkDTDOCNSpz
s244:  @OkDTDOCNSpzu
s243:  @OkDTDOCNSpzuu
s242:  @OkDTDOCNSpzuuj
s241:  @OkDTDOCNSpzuujz
s240:  @OkDTDOCNSpzuujzr
s239:  @OkDTDOCNSpzuujzr@
s238:  @OkDTDOCNSpzuujzr@H
s237:  @OkDTDOCNSpzuujzr@HT
s236:  @OkDTDOCNSpzuujzr@HTK
s235:  @OkDTDOCNSpzuujzr@HTK6
s234:  @OkDTDOCNSpzuujzr@HTK6l
s233:  @OkDTDOCNSpzuujzr@HTK6lk
s232:  @OkDTDOCNSpzuujzr@HTK6lkx
s231:  @OkDTDOCNSpzuujzr@HTK6lkx6
s230:  @OkDTDOCNSpzuujzr@HTK6lkx6a
s229:  @OkDTDOCNSpzuujzr@HTK6lkx6aG
s228:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQ
s227:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQS
s226:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR
s225:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8
s224:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8B
s223:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8Bd
s222:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdE
s221:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd
s220:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7
s219:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7F
s218:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7Fx
s217:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxS
s216:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSb
s215:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbY
s214:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV
s213:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1
s212:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1f
s211:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fY
s210:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYc
s209:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYcz
s208:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczF
s207:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb
s206:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7
s205:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7X
s204:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7Xo
s203:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoN
s202:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNl
s201:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNlj
s200:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU
s199:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9
s198:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9x
s197:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xV
s196:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT
s195:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6
s194:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z
s193:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6
s192:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6S
s191:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SX
s190:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXH
s189:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHd
s188:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdA
s187:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAt
s186:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtK
s185:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKx
s184:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxq
s183:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU
s182:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@
s181:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Y
s180:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp
s179:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9
s178:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9p
s177:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pP
s176:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPk
s175:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkf
s174:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZ
s173:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZh
s172:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhl
s171:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlv
s170:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvO
s169:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd
s168:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9
s167:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9X
s166:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9Xx
s165:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9Xxb
s164:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9Xxbc
s163:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9Xxbct
s162:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctB
s161:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBC
s160:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV
s159:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@
s158:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@M
s157:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MT
s156:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTU
s155:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUy
s154:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyz
s153:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzh
s152:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhg
s151:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp
s150:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp2
s149:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27
s148:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d
s147:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3
s146:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P
s145:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3
s144:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x
s143:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1
s142:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1c
s141:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn
s140:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3
s139:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3F
s138:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3Fv
s137:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvN
s136:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNe
s135:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeE
s134:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEU
s133:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW
s132:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8
s131:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8v
s130:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vs
s129:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsU
s128:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUT
s127:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTR
s126:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy
s125:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0
s124:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0H
s123:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0Hg
s122:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0Hgg
s121:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggV
s120:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVL
s119:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLU
s118:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZ
s117:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZs
s116:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP
s115:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@
s114:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p
s113:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4
s112:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L
s111:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0
s110:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0W
s109:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0Wg
s108:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgE
s107:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgED
s106:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDT
s105:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTs
s104:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTso
s103:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsov
s102:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovu
s101:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuD
s100:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDd
s99:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDdu
s98:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDdue
s97:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDdueb
s96:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebT
s95:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTv
s94:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvc
s93:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcX
s92:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXr
s91:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro
s90:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.
s89:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D
s88:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1
s87:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1I
s86:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IB
s85:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBz
s84:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzj
s83:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjN
s82:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM
s81:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1
s80:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1F
s79:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1Fs
s78:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1Fsg
s77:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1Fsgs
s76:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1Fsgse
s75:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseR
s74:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRu
s73:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRue
s72:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuem
s71:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemh
s70:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO
s69:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1
s68:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.
s67:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.c
s66:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cN
s65:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNd
s64:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdv
s63:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvP
s62:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJ
s61:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJs
s60:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsb
s59:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZ
s58:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZd
s57:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdt
s56:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtK
s55:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH
s54:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4
s53:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4G
s52:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GB
s51:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBu
s50:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuV
s49:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVu
s48:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuI
s47:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIg
s46:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgI
s45:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIX
s44:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD
s43:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1
s42:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x
s41:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@
s40:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4
s39:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4p
s38:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pz
s37:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzl
s36:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzlj
s35:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljw
s34:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwR
s33:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRW
s32:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWM
s31:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMW
s30:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWu
s29:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuR
s28:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRX
s27:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXR
s26:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXRO
s25:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROf
s24:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfL
s23:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZ
s22:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb
s21:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.
s20:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A
s19:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3
s18:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3k
s17:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kO
s16:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOf
s15:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY
s14:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5
s13:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5O
s12:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox
s11:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4
s10:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4L
s9:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LX
s8:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LXx
s7:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LXxn
s6:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LXxnv
s5:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LXxnvf
s4:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LXxnvf@
s3:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LXxnvf@s
s2:  @OkDTDOCNSpzuujzr@HTK6lkx6aGQSR8BdEd7FxSbYV1fYczFb7XoNljU9xVT6Z6SXHdAtKxqU@Yp9pPkfZhlvOd9XxbctBCV@MTUyzhgp27d3P3x1cn3FvNeEUW8vsUTRy0HggVLUZsP@p4L0WgEDTsovuDduebTvcXro.D1IBzjNM1FsgseRuemhO1.cNdvPJsbZdtKH4GBuVuIgIXD1x@4pzljwRWMWuRXROfLZb.A3kOfY5Ox4LXxnvf@sN

         

         #A: Markus Unterauer
         #D: Correct German DateTime. Does not check leap year rules!
Possible Formats of date part:
D.M.YYYY or D.MM.YYYY or DD.MM.YYYY or DD.M.YYYY
Possible formats of time part:
h:mm or hh:mm
         #U: http://regexlib.com/REDetails.aspx?regexp_id=319
ERROR:   ^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2})$|^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2}\s([1-9]|[0-1]\d|[2][0-3])\:[0-5]\d)$
    rx: Embedded '$' unimplemented: in "^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2})$|^(([1-9]|[0-2]\d|[3][0-1])\.([1-9]|[0]\d|[1][0-2])\.[2][0]\d{2}\s([1-9]|[0-1]\d|[2][0-3])\:[0-5]\d)$"

         

         #A: Dany Lauener
         #D: Date with leap years. Accepts '.' '-' and '/' as separators
d.m.yy to dd.mm.yyyy (or d.mm.yy, etc)
Ex: dd-mm-yyyy   d.mm/yy   dd/m.yyyy  etc etc
Accept 00 years also.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=320
expr 173: ^((((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|[12]\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\d)?\d{2}))|((0[1-9]|1\d|2[0-8])02((1[6-9]|[2-9]\d)?\d{2}))|(2902((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$
tree:   ((((((((0?[1-9])|([12][0-9])|(3[01]))[./-])((0?[13578])|(1[02])))[./-])(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((((0?[1-9])|([12][0-9])|(30))[./-])((0?[13-9])|(1[012])))[./-])(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|(((((((0?[1-9])|(1[0-9])|(2[0-8]))[./-])0?)2)[./-])(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((((29)[./-])0?)2)[./-])((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00))))|(((((0[1-9])|([12][0-9])|(3[01]))((0[13578])|(1[02])))(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((0[1-9])|([12][0-9])|(30))((0[13-9])|(1[012])))(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|(((((0[1-9])|(1[0-9])|(2[0-8]))0)2)(((1[6-9])|([2-9][0-9]))?[0-9]{2}))|((((29)0)2)((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00)))))
augmnt: (((((((((0?[1-9])|([12][0-9])|(3[01]))[./-])((0?[13578])|(1[02])))[./-])(((1[6-9])|([2-9][0-9]))?([0-9][0-9])))|((((((0?[1-9])|([12][0-9])|(30))[./-])((0?[13-9])|(1[012])))[./-])(((1[6-9])|([2-9][0-9]))?([0-9][0-9])))|(((((((0?[1-9])|(1[0-9])|(2[0-8]))[./-])0?)2)[./-])(((1[6-9])|([2-9][0-9]))?([0-9][0-9])))|((((((29)[./-])0?)2)[./-])((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00))))|(((((0[1-9])|([12][0-9])|(3[01]))((0[13578])|(1[02])))(((1[6-9])|([2-9][0-9]))?([0-9][0-9])))|((((0[1-9])|([12][0-9])|(30))((0[13-9])|(1[012])))(((1[6-9])|([2-9][0-9]))?([0-9][0-9])))|(((((0[1-9])|(1[0-9])|(2[0-8]))0)2)(((1[6-9])|([2-9][0-9]))?([0-9][0-9])))|((((29)0)2)((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00)))))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  15.2/88  29-2/00  310112  301047  31-7-08  17/1-77  22/2-64  240248
ex(1):  04.12/99  21-02-03  31101902  29-2.2304  10/2.46  29.2/00  22-02.1891
ex(2):  23.2-8883  30.7/70  29021908  090288  050259  26024318  09024046
ex(3):  21019986  290200  03.10-22  31/10.42  201273  241099  13022161  171101
ex(5):  31/10-66  29/2-00  30031992  26.10/00  30031633  110214  26-2/2334
ex(8):  290200  30.10-96  030296  26-8/8367  12/2/8656  20/01-1713  3.02-49
---------------- Examples from DFA ---------------
s1:  040304
s8:  040318
s19:  290216

         

         #A: Jag fire
         #D: Matches simple IP addresses. It's not too complex or long, but it does the job if you want something short/simple.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=321
expr 174: ^(([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+)\.([0-2]*[0-9]+[0-9]+))$
tree:   (((((((([012]*[0-9]+)[0-9]+).)(([012]*[0-9]+)[0-9]+)).)(([012]*[0-9]+)[0-9]+)).)(([012]*[0-9]+)[0-9]+))
augmnt: ((((((((([012]*[0-9]+)[0-9]+).)(([012]*[0-9]+)[0-9]+)).)(([012]*[0-9]+)[0-9]+)).)(([012]*[0-9]+)[0-9]+))#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  44.65.77.88  79.26.00.58  60.62.12.85  48.00.47.68  97.02.08.29
ex(1):  291.47.143.82  132.06.88.101  291.064.68.094  37.87.107.202
ex(2):  118029.0403.1242.12798  01906.230.2126.28508  2030.12207.80.3893
ex(3):  09381.78465.926069.12  2228638.1516219.004228.112296
ex(5):  1152752601.120287946.21200667.604011
ex(8):  210029783344333.2001023902601.2236136296.02200966693604785703
---------------- Examples from DFA ---------------
s1:  17.53.51.73

         

         #A: Asim Goheer
         #U: http://regexlib.com/REDetails.aspx?regexp_id=322
expr 175: <[iI][mM][gG]([^>]*[^/>])
tree:   ((((<[Ii])[Mm])[Gg])([\x01-=?-\u007f]*[\x01-.0-=?-\u007f]))
augmnt: (((((<[Ii])[Mm])[Gg])([\x01-=?-\u007f]*[\x01-.0-=?-\u007f]))#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  <imgw  <img+  <iMg%  <imgd  <iMg)  <imgM  <Imgf  <imGm  <iMgZ  <IMGP
ex(1):  <ImgU  <ImGM`  <ImG}~  <Img'  <iMg4J  <iMg|e  <iMg=  <IMg=  <IMG\\
ex(2):  <iMGy  <Imgi\\h  <IMg6  <IMg#  <iMg+b7  <imGiW  <iMG7]  <iMG2f]
ex(3):  <IMgxS-  <IMG\"7 ~  <iMG*  <IMGJ  <iMg(s  <img|  <ImG7Y1  <IMg5
ex(5):  <imGY)  <imgOIN(qU  <iMGuYTf6T  <iMgg  <img;g  <IMG!  <IMGCI0,)o
ex(8):  <iMg{  <ImgG2YrF'\"o  <IMg<mg.  <ImGj1=U-(`$  <IMGi  <IMGRb+_sj<L_
---------------- Examples from DFA ---------------
s1:  <IMg?

         

         #A: Gabriel Fróes
         #D: This regular expressions matches CNPJ number. CNPJ is a Registration Number of Brazilian Companies.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=323
expr 176: \d{2}.?\d{3}.?\d{3}/?\d{4}-?\d{2}
tree:   (((((((([0-9]{2}[\x01-\u007f]?)[0-9]{3})[\x01-\u007f]?)[0-9]{3})/?)[0-9]{4})-?)[0-9]{2})
augmnt: (((((((((([0-9][0-9])[\x01-\u007f]?)(([0-9][0-9])[0-9]))[\x01-\u007f]?)(([0-9][0-9])[0-9]))/?)((([0-9][0-9])[0-9])[0-9]))-?)([0-9][0-9]))#)
length: 14 to 18
-------------------- Examples --------------------
ex(0):  44365677888798  26100458601620  12785483009474  68978027084290
ex(1):  367838334212362  06088900/9910-64  22893V403/8873-07  694225{049/170371
ex(2):  52628=327/814291  06852i022982852  41530832930566  82a799800/3383-67
ex(3):  43005?318/381737  806565920069-11  62W1196739109-60  21~4774828459-72
ex(5):  47669V266/8792-17  95752l019198187  96677Y960666727  60701,492073535
ex(8):  48732433/7214-14  60734297/3344-33  65n381A902061898  43136296/643669
---------------- Examples from DFA ---------------
s1:  02489260113404
s15:  024892601134049
s28:  024892601134-41

         

         #A: Ed Preston
         #D: Pulls out comments (both Rem and ') and string literals from VB or VBScript. Usefull for spell checking or review.
Notes: The VBScript for "Rem" documentation says that it must be followed by a space but VBScript seems to accept tab characters as well.
The multiline flag is assumed for this search.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=324
ERROR:   ('.*$|Rem((\t| ).*$|$)|"(.|"")*?")
    rx: Embedded '$' unimplemented: in "('.*$|Rem((\t| ).*$|$)|"(.|"")*?")"

         

         #A: stephen lam
         #D: valid date base on Month
         #U: http://regexlib.com/REDetails.aspx?regexp_id=325
expr 177: ^\d{2}\s{1}(Jan|Feb|Mar|Apr|May|Jun|Jul|Apr|Sep|Oct|Nov|Dec)\s{1}\d{4}$
tree:   (((([0-9]{2}[\t-\r ])(((Ja)n)|((Fe)b)|((Ma)r)|((Ap)r)|((Ma)y)|((Ju)n)|((Ju)l)|((Ap)r)|((Se)p)|((Oc)t)|((No)v)|((De)c)))[\t-\r ])[0-9]{4})
augmnt: (((((([0-9][0-9])[\t-\r ])(((Ja)n)|((Fe)b)|((Ma)r)|((Ap)r)|((Ma)y)|((Ju)n)|((Ju)l)|((Ap)r)|((Se)p)|((Oc)t)|((No)v)|((De)c)))[\t-\r ])((([0-9][0-9])[0-9])[0-9]))#)
length: 11 to 11
-------------------- Examples --------------------
ex(0):  44 Nov 8887  98 Jul 5860  16 Jan 5483  00 Jul 9780  27 May 7464
ex(1):  47 Jun 4821  23 Mar 0888  90 Feb 0996  42 Nov 9403  78 Sep 0769
ex(2):  17 Oct 0078  03 Dec 4103  76 Jun 8793  27 Oct 0910  68 Apr 2209
ex(3):  88 Nov 5066  82 Nov 8007  43 Jul 7536  34 Nov 0746  59 Mar 0536
ex(5):  80 Jan 9260  06 Oct 2151  19 Sep 1095  16 Jul 7724  82 May 7726
ex(8):  10 Jun 4786  69 Dec 6879  21 Apr 7527  60 Dec 1287  96 Mar 9600
---------------- Examples from DFA ---------------
s1:  11 Sep 9484

         

         #A: Dany Lauener
         #D: Date expression validator with format YYMMDD
Validates leap years.
Of course, as year has only 2 digits, it's not possible to invalidate years like 2100, 2200, 2300, etc as a non-leap years !
         #U: http://regexlib.com/REDetails.aspx?regexp_id=326
expr 178: ^((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)$
tree:   (([0-9]{2}((((0[13578])|(1[02]))((0[1-9])|([12][0-9])|(3[01])))|(((0[13-9])|(1[012]))((0[1-9])|([12][0-9])|(30)))|((02)((0[1-9])|(1[0-9])|(2[0-8])))))|(((((([02468][048])|([13579][26]))0)2)2)9))
augmnt: (((([0-9][0-9])((((0[13578])|(1[02]))((0[1-9])|([12][0-9])|(3[01])))|(((0[13-9])|(1[012]))((0[1-9])|([12][0-9])|(30)))|((02)((0[1-9])|(1[0-9])|(2[0-8])))))|(((((([02468][048])|([13579][26]))0)2)2)9))#)
length: 6 to 6
-------------------- Examples --------------------
ex(0):  431130  790830  880229  780210  080229  700503  400219  910829  330706
ex(1):  011204  420404  030504  080229  080229  000229  781214  411222  620225
ex(2):  681230  090212  180207  090718  700210  741026  960229  441030  430808
ex(3):  370530  920229  110530  731130  020217  480330  720229  840229  720229
ex(5):  790219  400229  520229  360229  720229  280229  880229  000229  561030
ex(8):  080229  140330  160229  760229  571209  260130  361006  640229  661017
---------------- Examples from DFA ---------------
s1:  080703

         

         #A: Richard Slade
         #D: Validates a UK Bank Sort code
         #U: http://regexlib.com/REDetails.aspx?regexp_id=327
expr 179: ^[0-9]{2}[-][0-9]{2}[-][0-9]{2}$
tree:   (((([0-9]{2}-)[0-9]{2})-)[0-9]{2})
augmnt: (((((([0-9][0-9])-)([0-9][0-9]))-)([0-9][0-9]))#)
length: 8 to 8
-------------------- Examples --------------------
ex(0):  44-65-77  88-79-26  10-45-60  16-01-78  54-30-94  74-89-80  27-84-90
ex(1):  43-09-36  47-39-33  48-12-26  20-20-88  90-11-91  09-64-26  89-99-03
ex(2):  07-97-22  55-04-79  17-34-14  00-80-29  08-64-03  76-52-62  87-32-99
ex(3):  68-52-80  22-98-86  52-18-30  88-20-30  50-68-70  79-08-07  43-83-36
ex(5):  56-40-46  59-04-20  05-63-89  83-17-37  80-65-05  92-00-99  01-62-51
ex(8):  10-51-02  19-47-24  82-84-93  77-69-44  23-19-55  10-33-17  47-66-99
---------------- Examples from DFA ---------------
s1:  21-17-52

         

         #A: Roger Ramjet
         #D: Email address validator. Should cover most of RFC 822, including unusual (but still valid) addresses. Does not restrict the top level domain size, but you're better off doing an nslookup or similar if you absolutely must have a valid domain. Accepts IP Addresses instead of the domain, with or without brackets. Believe it or not, this one is valid: !#$%^&amp;amp;*-+~/'`|{}@xyz.com
Sorry looks like this site is mangling the quote and ampersand characters - you'll have to fix that yourself.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=328
expr 180: ^((\"[^\"\f\n\r\t\v\b]+\")|([\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+(\.[\w\!\#\$\%\&\'\*\+\-\~\/\^\`\|\{\}]+)*))@((\[(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))\])|(((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9]))\.((25[0-5])|(2[0-4][0-9])|([0-1]?[0-9]?[0-9])))|((([A-Za-z0-9\-])+\.)+[A-Za-z\-]+))$
tree:   ((((("[\x01-\a\x0e-!#-\u007f]+)")|([!#-'*+/-9A-Z^-~-]+(.[!#-'*+/-9A-Z^-~-]+)*))@)((([(((((((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))))])|(((((((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])))|(([0-9A-Za-z-]+.)+[A-Za-z-]+)))
augmnt: (((((("[\x01-\a\x0e-!#-\u007f]+)")|([!#-'*+/-9A-Z^-~-]+(.[!#-'*+/-9A-Z^-~-]+)*))@)((([(((((((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))))])|(((((((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9]))).)(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9]?)[0-9])))|(([0-9A-Za-z-]+.)+[A-Za-z-]+)))#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  \"(\"@238.9.252.252  \"I\"@235.3.247.251  \"O\"@250.6.252.9  \"I\"@1.y
ex(1):  g.+@s.o  |.3@[253.251.250.250]  &.&@[240.203.4.203]  \"\\\"@1.z
ex(2):  C.QU.j@254.006.07.250  \"P\"@[225.252.244.215]  u.3.KJ@[074.4.5.0]
ex(3):  \"Y1(\"@222.4.219.17  6h.vv.61c@NSk.yK.nM  \"Fgw\"@SFD.2i.W.S-n
ex(5):  eI3A#.Qyf8D.kdJ.~.eV.+wQ8l@[13.255.78.253]
ex(8):  dviJk&7.uMs%nW3.CQfppW@71.213.255.04
---------------- Examples from DFA ---------------
s1:  i@G.q
s7:  i@0.0.0.1
s21:  i@0.0.0.2
s33:  i@0.0.0.6
s20:  i@0.0.0.25
s32:  i@0.0.0.27
s44:  i@[1.0.1.0]

         

         #A: Richard Slade
         #D: Validates a UK mobile phone number in International format
         #U: http://regexlib.com/REDetails.aspx?regexp_id=331
expr 181: ^[+]447\d{9}$
tree:   ((((+4)4)7)[0-9]{9})
augmnt: (((((+4)4)7)(((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 13 to 13
-------------------- Examples --------------------
ex(0):  +447567788879  +447004586016  +447785483009  +447897802708
ex(1):  +447136478394  +447212326206  +447890011991  +447422689399
ex(2):  +447225560497  +447347140078  +447084641037  +447462879327
ex(3):  +447022098286  +447853088320  +447066827079  +447074338393
ex(5):  +447599043200  +447189838174  +447465605926  +447901162151
ex(8):  +447994772482  +447937726964  +447190551073  +447478669992
---------------- Examples from DFA ---------------
s1:  +447276019419

         

         #A: Tomas Andrysek
         #D: reg. expr. 4 checking 24 time
         #U: http://regexlib.com/REDetails.aspx?regexp_id=332
expr 182: ^(([0-9])|([0-1][0-9])|([2][0-3])):(([0-9])|([0-5][0-9]))$
tree:   ((([0-9]|([01][0-9])|(2[0-3])):)([0-9]|([0-5][0-9])))
augmnt: (((([0-9]|([01][0-9])|(2[0-3])):)([0-9]|([0-5][0-9])))#)
length: 3 to 5
-------------------- Examples --------------------
ex(0):  4:5  17:8  20:1  22:6  1:0  07:48  00:7  6:18  2:8  2:7  20:38  19:13
ex(1):  03:8  20:6  0:0  08:0  19:09  6:2  09:34  23:8  3:07  9:2  5:0  21:10
ex(2):  18:09  04:1  3:8  22:8  23:19  14:9  0:8  2:0  22:2  21:1  5:8  3:9
ex(3):  22:7  10:0  4:03  16:56  20:44  0:6  23:3  0:36  18:3  17:58  20:0
ex(5):  21:56  15:18  23:30  23:2  21:32  8:8  23:32  16:2  01:5  10:16  14:6
ex(8):  20:12  6:55  15:00  9:58  22:24  23:56  0:6  02:0  7:12  22:7  5:39
---------------- Examples from DFA ---------------
s1:  0:2
s4:  0:7

         

         #A: bilou mcgyver
         #D: does not allow IP for domain name : hello@154.145.68.12
does not allow litteral addresses "hello, how are you?"@world.com
allows numeric domain names
after the last "." minimum 2 letters
         #U: http://regexlib.com/REDetails.aspx?regexp_id=333
expr 183: ^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$
tree:   (((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)[A-Za-z]{2,})
augmnt: ((((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)([A-Za-z][A-Za-z]+))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  H@L.by  s@o.KD  k@K.dU  I@q.Wi  J@d.BK  i@D.BC  9@U.yU  C@B.MF  b@H.tX
ex(1):  G0@r.yT  p@Y.JW  o@J.QS  L@v.Vb  k9@O.GM  Q.B@i.gB  P7@WZ.vm  0@F.q.eC
ex(2):  kY@No5.sm  8_affd@cvn.ba  St@dkQv.OmQ  m@Oia9.Za  3@CM.Zj
ex(3):  0@UHrS3XlHh.qv  h.Ly_rwbak4@K7yRlx.gjEi  L@5b-e-xW-c.nYQk
ex(5):  6_6zTcJ@kOSfg-WKJNF.o.pJs.gxNIY  ekMyR3eFK@jRsKPmaYd39Ksb3ou.pjZMF
ex(8):  8t2B6rwcMEzV5OYVE.e0voybGv@d3S-0rA.nIJpi
---------------- Examples from DFA ---------------
s1:  U@B.Up

         

         #A: Demo Gorgon
         #D: Whilst writing a plain-text to HTML function, I ran into the problem of links that users had written with <a> tags (as opposed to just writing the URL) were linking improperly.  This regular expression returns many types of URL, and preceding characters, if any.  This allows you to handle each type of match appropriately
         #U: http://regexlib.com/REDetails.aspx?regexp_id=334
ERROR:   \b(((\S+)?)(@|mailto\:|(news|(ht|f)tp(s?))\://)\S+)\b
    rx: \b (boundary) unimplemented: in "\b(((\S+)?)(@|mailto\:|(news|(ht|f)tp(s?))\://)\S+)\b"

         

         #A: Matt Biggin
         #D: This matches Java class names such as "com.test.Test". It's being used within an XML Schema to validate classname as specified in XML documents.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=335
expr 184: ^(([a-z])+.)+[A-Z]([a-z])+$
tree:   ((([a-z]+[\x01-\u007f])+[A-Z])[a-z]+)
augmnt: (((([a-z]+[\x01-\u007f])+[A-Z])[a-z]+)#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  c$By  hSZz  kFKb  lsEa  n4Oc  p2Ig  nIKy  rTXe  v.Sh  oWPg  zGGa  xrYu
ex(1):  aEZe  n`Ue  qcLm  g7Ho  rIZq  uTSl  n8Fj  u2Sx  ksMk  iHIe  ePMa  bpWb
ex(2):  rsVYm  lxVUt  yAjt^Oqz  kwfk All  wfGfa/Quy  lukgCor  k\\i+Ez  ulLkdoQj
ex(3):  yrq^kxatkj<Cu  irUAaw  ejc'joik;Gn  f7Sz  dGazcBu@Cz  cs7u/Vg
ex(5):  axuclGMws  bmhxyJfv?Feffa  gh%oa|tb`dgq7qkyHDxpuc
ex(8):  gtruhXxdxytpuzljxgDyxoe6yymz;zfiekQchg
---------------- Examples from DFA ---------------
s1:  h'Tq
s5:  heSa
s8:  heSac

         

         #A: Andrew Deren
         #D: Matches variable names/identifier from C# (and most other languages)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=336
expr 185: ^[a-zA-Z_][a-zA-Z0-9_]*$
tree:   ([A-Z_a-z][0-9A-Z_a-z]*)
augmnt: (([A-Z_a-z][0-9A-Z_a-z]*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  m  W  P  K  b  y  J  D  G  S  K  D  v  U  N  d  U  q  Y  B  E  W  i  j
ex(1):  wU  d  _  a  F  D  y  XB  y  F  u  U0  t  K  ox  m  P5  V3  K  L  TR
ex(2):  SOF  TJJ  Uqw  k  m  Zy  l  Ea  E1  K  H  X53  x  KxP  h  f  ZbZ  a  m
ex(3):  vq  jdO  vU9  zke  iaz  k  m_  s  mnR  J  Hf  mf  afc  GeB  l  T5n  aaG
ex(5):  OdkO  QQv33B  mmN  lOY  QiX  n9  uNlxf  rQoC  lmVrG  oLh  q  wW  YR457i
ex(8):  BYyE  oeBy0  w_UHr5cX  lPE  ElHXr  H  q  vY4QYd  lu6Iz  hwb  Aak4ZKK98
---------------- Examples from DFA ---------------
s1:  N

         

         #A: Mike Stancombe
         #U: http://regexlib.com/REDetails.aspx?regexp_id=337
ERROR:   (at\s)(?<fullClassName>.+)(\.)(?<methodName>[^\.]*)(\()(?<parameters>[^\)]*)(\))((\sin\s)(?<fileName>.+)(:line )(?<lineNumber>[\d]*))?
    rx: '(?...' unimplemented: in "(at\s)(?<fullClassName>.+)(\.)(?<methodName>[^\.]*)(\()(?<parameters>[^\)]*)(\))((\sin\s)(?<fileName>.+)(:line )(?<lineNumber>[\d]*))?"

         

         #A: Martin Henningsson
         #D: Swedish phone numbers according to SIS standard
         #U: http://regexlib.com/REDetails.aspx?regexp_id=338
expr 186: ^(([+]\d{2}[ ][1-9]\d{0,2}[ ])|([0]\d{1,3}[-]))((\d{2}([ ]\d{2}){2})|(\d{3}([ ]\d{3})*([ ]\d{2})+))$
tree:   (((((((+[0-9]{2}) )[1-9])[0-9]{0,2}) )|((0[0-9]{1,3})-))(([0-9]{2}( [0-9]{2}){2})|(([0-9]{3}( [0-9]{3})*)( [0-9]{2})+)))
augmnt: ((((((((+([0-9][0-9])) )[1-9])([0-9]?[0-9]?)) )|((0(([0-9][0-9]?)[0-9]?))-))((([0-9][0-9])(( ([0-9][0-9]))( ([0-9][0-9]))))|(((([0-9][0-9])[0-9])( (([0-9][0-9])[0-9]))*)( ([0-9][0-9]))+)))#)
length: 9 to *
-------------------- Examples --------------------
ex(0):  +36 8 888 98  +10 1 60 62 12  05-30 94 46  +78 4 84 90 46  +77 5 091 64
ex(1):  +20 9 90 11 91  +96 6 399 37  +87 406 022 604 79  0041-07 03 90
ex(2):  079-20 10 88  03-09 28 52  +85 2 09 05 66  +70 50 74 38 93
ex(3):  +36 18 17 37 04  +60 3 69 01 62  019-389 951 21 94 72  +22 397 69 44 32
ex(5):  +63 69 17 52 52  009-812 964 771 60 66 74  +60 91 92 07 50  09-56 79 68
ex(8):  +73 47 33 43 33  +78 799 60 18 98  +61 7 14 43 66
---------------- Examples from DFA ---------------
s1:  04-994 74
s11:  04-99 21 73
s12:  04-994 74 40

         

         #A: Jonathan Crossland
         #D: Detects HTML tags open and/or closed with and without whitespace or characters in between. Good for stripping all tags from a string.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=339
ERROR:   >(?:(?<t>[^<]*))
    rx: '(?...' unimplemented: in ">(?:(?<t>[^<]*))"

         

         #A: Rick Spiewak
         #D: Credit card validator for AMEX, VISA, MasterCard only. Allows spaces, dashes, or no separator between digit groups according to the layout (4-6-5 for AMEX, 4-4-4-4 for Visa and Mastercard)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=340
ERROR:   ^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}
    rx: Embedded '^' unimplemented: in "^((4\d{3})|(5[1-5]\d{2}))(-?|\040?)(\d{4}(-?|\040?)){3}|^(3[4,7]\d{2})(-?|\040?)\d{6}(-?|\040?)\d{5}"

         

         #A: Paul Auger
         #D: This allows a sequence of real numbers to be added, separated by a comma (required) and a space (optional).  Based pretty heavily on an expression by Steven Smith on this site.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=341
expr 187: ^((\d?)|(([-+]?\d+\.?\d*)|([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d+\.?\d*))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d+\.?\d*\,\ ?)*([-+]?\d*\.?\d+))|(([-+]?\d*\.?\d+\,\ ?)*([-+]?\d+\.?\d*)))$
tree:   ([0-9]?|(((([+-]?[0-9]+).?)[0-9]*)|((([+-]?[0-9]*).?)[0-9]+))|((((((([+-]?[0-9]+).?)[0-9]*),) ?)*((([+-]?[0-9]+).?)[0-9]*))|(((((([+-]?[0-9]*).?)[0-9]+),) ?)*((([+-]?[0-9]*).?)[0-9]+))|(((((([+-]?[0-9]+).?)[0-9]*),) ?)*((([+-]?[0-9]*).?)[0-9]+))|(((((([+-]?[0-9]*).?)[0-9]+),) ?)*((([+-]?[0-9]+).?)[0-9]*))))
augmnt: (([0-9]?|(((([+-]?[0-9]+).?)[0-9]*)|((([+-]?[0-9]*).?)[0-9]+))|((((((([+-]?[0-9]+).?)[0-9]*),) ?)*((([+-]?[0-9]+).?)[0-9]*))|(((((([+-]?[0-9]*).?)[0-9]+),) ?)*((([+-]?[0-9]*).?)[0-9]+))|(((((([+-]?[0-9]+).?)[0-9]*),) ?)*((([+-]?[0-9]*).?)[0-9]+))|(((((([+-]?[0-9]*).?)[0-9]+),) ?)*((([+-]?[0-9]+).?)[0-9]*))))#)
length: 0 to *
-------------------- Examples --------------------
ex(0):      5  7        8      0    6    2    7  4  0  4  6  7          4  0  
ex(1):  7  -9., -38  -6  80  1  94,.9    7, 6.0    6    +4.4,+2.8    78  29
ex(2):    0.8, 85., 30.6  990  4  8  3  -.8  0.  325,+.81  +460, 09  +1.98
ex(3):    593.  42.90  3.74,9.66  +6.5  -9  +296  -96,42., -9263,+2256  +80948
ex(5):  +214673    -.43333  7  8  +6,84361.29, 3696,-.78570  
ex(8):  30444949.74350277  4.27171  177331637407  
---------------- Examples from DFA ---------------
s0:  
s2:  9
s15:  9.
s3:  .8
s20:  9.8
s14:  9.,4
s13:  .8,9
s11:  9.,.8
s18:  9.,4.
s7:  .8,9.

         

         #A: Pete Samwel
         #D: Matches a file name to be either a .wma or .mp3 file. This can be used to check file uploads to make sure they are of a certain type. Substitute letters where appropriate for specific file types. To include more simply add logical 'or' (|) operator and append.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=343
ERROR:   (.*\.([wW][mM][aA])|([mM][pP][3])$)
    rx: Embedded '$' unimplemented: in "(.*\.([wW][mM][aA])|([mM][pP][3])$)"

         

         #A: Joseph Warwick
         #D: Heres my sql clause parser regexp for recordset filtering. Does recursive query parsing all by its self. Only problem I cant figure is how to match comma separated lists of quoted strings. Tell me if you figure out how!
The unicodes in the re was put in by the entry form please replace them with their ascii equivalents to use it.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=347
expr 188: (NOT)?(\s*\(*)\s*(\w+)\s*(=|<>|<|>|LIKE|IN)\s*(\(([^\)]*)\)|'([^']*)'|(-?\d*\.?\d+))(\s*\)*\s*)(AND|OR)?
tree:   (((((((((((NO)T)?([\t-\r ]*(*))[\t-\r ]*)[0-9A-Z_a-z]+)[\t-\r ]*)(=|(<>)|<|>|(((LI)K)E)|(IN)))[\t-\r ]*)(((([\x01-(*-\u007f]*)))|(('[\x01-&(-\u007f]*)')|(((-?[0-9]*).?)[0-9]+)))(([\t-\r ]*)*)[\t-\r ]*))(((AN)D)|(OR))?)
augmnt: ((((((((((((NO)T)?([\t-\r ]*(*))[\t-\r ]*)[0-9A-Z_a-z]+)[\t-\r ]*)(=|(<>)|<|>|(((LI)K)E)|(IN)))[\t-\r ]*)(((([\x01-(*-\u007f]*)))|(('[\x01-&(-\u007f]*)')|(((-?[0-9]*).?)[0-9]+)))(([\t-\r ]*)*)[\t-\r ]*))(((AN)D)|(OR))?)#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  H=''  sIN()  z=0  uIN()  d=''  DLIKE4  U=9  U=()  TLIKE4  NIN''  5IN()
ex(1):  ( J=9 OR  NOTQ >-8 )AND  (0IN -10)AND   o LIKE-2.9)  NOT 8<-6  OR
ex(2):  NOT((  h= (j)  )AND  NOT  (HIN  (+))  OR  NOT z <-7.8 )  OR
ex(3):       mO <   'YG?'       (   K  >  56 )))  AND   ((   Kc> .2  )))
ex(5):      (g  >    48597    AND     ( Ku9v     <>     (1|)    )
ex(8):            snM9oC46   <      .26        )))))  
---------------- Examples from DFA ---------------
s1:  o<1
s8:  o<1 
s28:  o<1)
s29:  o<.6
s9:  oIN3
s34:  o<1OR
s27:  o<1) 
s30:  oIN3 
s36:  oIN3OR

         

         #A: Vitaly Kompot
         #D: This is my basic phone number verification. it allows a + - , signs digits, spaces and blank entry
         #U: http://regexlib.com/REDetails.aspx?regexp_id=350
ERROR:   (^(\+?\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)
    rx: Embedded '^' unimplemented: in "(^(\+?\-? *[0-9]+)([,0-9 ]*)([0-9 ])*$)|(^ *$)"

         

         #A: Steve Fisher
         #D: Validates Microsoft Project-type duration entries. Accepts a number and a unit. The number part can be integer or decimal. The unit can be several variations of weeks, days, and hours: e.g., w, wk, week, ws, wks, weeks are all valid. Whitespace between the number and the unit is optional: e.g., 1d, 2 days, 3.5w are all valid. Captures the number value in a group named num and the unit string in a group named 'unit'.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=351
ERROR:   ^\s*(?'num'\d+(\.\d+)?)\s*(?'unit'((w(eek)?)|(wk)|(d(ay)?)|(h(our)?)|(hr))s?)(\s*$)
    rx: '(?...' unimplemented: in "^\s*(?'num'\d+(\.\d+)?)\s*(?'unit'((w(eek)?)|(wk)|(d(ay)?)|(h(our)?)|(hr))s?)(\s*$)"

         

         #A: David Yack
         #D: Limit Length - limit the length of a text box or other area to contain any character plus new line
         #U: http://regexlib.com/REDetails.aspx?regexp_id=352
expr 189: ^(.|\n){0,16}$
tree:   ([\x01-\u007f]|[\n]){0,16}
augmnt: ((((((((((((((((([\x01-\u007f]|[\n])?([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)([\x01-\u007f]|[\n])?)#)
length: 0 to 16
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      9    \n      \n      H    D    J    m    i  W  6        \n      i  
ex(2):  O  yc    7\n  \n[    \n  \n      \n\n  H6  }$  D  \n  `\n  m  =      
ex(3):  '\n  1  \nJ    \n~\n  \n(^  /;/  G      .\n  \n  \n+  1\n    \nqO  \nD
ex(5):    (\\'  \nF  \n]u\n      %\n>  bm  '\ni      P\n\n  w  \n\n2\n$  \nC\nB
ex(8):  \n\nd\n~>/\n  *+\ng\nS\n\n  ;\n\n  \n\n|\n\n\n.  1j  \n\n5\n`  \n\n
---------------- Examples from DFA ---------------
s0:  
s16:  )
s15:  )w
s14:  )wU
s13:  )wU5
s12:  )wU5q
s11:  )wU5qB
s10:  )wU5qBy
s9:  )wU5qByV
s8:  )wU5qByVO
s7:  )wU5qByVOI
s6:  )wU5qByVOIN
s5:  )wU5qByVOIN(
s4:  )wU5qByVOIN(q
s3:  )wU5qByVOIN(qU
s2:  )wU5qByVOIN(qU'
s1:  )wU5qByVOIN(qU'~

         

         #A: Doug Moore
         #D: This expression will match all of the commands(escape codes) used in ANSI files.  These are what were used to create the colors/blocks on BBS's for those of us that once dialed into them.
http://www.wikipedia.org/wiki/ANSI_escape_code has a reference for ANSI escape codes.
http://idledreams.net/lordscarlet/posts/153.aspx shows an example of the engine I have created surrounding the expression
         #U: http://regexlib.com/REDetails.aspx?regexp_id=354
ERROR:   (?s)(?:\e\[(?:(\d+);?)*([A-Za-z])(.*?))(?=\e\[|\z)
    rx: '(?...' unimplemented: in "(?s)(?:\e\[(?:(\d+);?)*([A-Za-z])(.*?))(?=\e\[|\z)"

         

         #A: Darren Neimke
         #D: Matches C style strings allowing for escaped string delimiters to be included in the match.
ALTERED 13-Dec-2003
-------------------
Previous pattern was :
"([^"](?:\\.|[^\\"]*)*)"
Changed to:
"([^"]*(?:\\.|[^\\"]*)*)"
Making the first character after the opening quote optional allows the pattern to match on empty quotes: "".
         #U: http://regexlib.com/REDetails.aspx?regexp_id=355
expr 190: "([^"](?:\\.|[^\\"]*)*)"
tree:   (("([\x01-!#-\u007f]((\[\x01-\u007f])|[]\x01-!#-[^-\u007f]*)*))")
augmnt: ((("([\x01-!#-\u007f]((\[\x01-\u007f])|[]\x01-!#-[^-\u007f]*)*))")#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  \"$\"  \"9\"  \"w\"  \"x\"  \"s\"  \"X\"  \"=\"  \"D\"  \"I\"  \"!\"
ex(1):  \"i\\`\"  \"G\"  \"r\"  \"'\"  \"E\\`\"  \"4\"  \"[\"  \"Z\"  \"P\"
ex(2):  \"T\"  \"O\"  \"p\\$\"  \"DqM\"  \"l\\l\"  \"}\"  \"u\"  \"Zu\"
ex(3):  \"o]\"  \"^\\//2\\u\"  \"g]\"  \"@\\UZ\"  \"L\\o\"  \"y\\n\\OE'\"
ex(5):  \"<\\#\\$+b\"  \"Ye\\W\\t_xB\"  \"wx2f]\\R\\)\"  \"B\\/?xS\\(S^[d\"
ex(8):  \"s3%!IC|X`T.7Y1(j<^5$\\`\"  \"^WC+k^\"  \"N5\\yIN(qUcg|YTf6Tl5\"
---------------- Examples from DFA ---------------
s1:  \"o\"

         

         #A: Darren Neimke
         #D: This is my all-time favourite e-mail validator.  I've used it for years and it's never failed me :-)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=356
expr 191: (\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})
tree:   (((((((([0-9A-Z_a-z][.0-9A-Z_a-z-]*)[0-9A-Z_a-z])@)[0-9A-Z_a-z])[.0-9A-Z_a-z-]*)[0-9A-Z_a-z]).)[0-9A-Z_a-z]{2,3})
augmnt: ((((((((([0-9A-Z_a-z][.0-9A-Z_a-z-]*)[0-9A-Z_a-z])@)[0-9A-Z_a-z])[.0-9A-Z_a-z-]*)[0-9A-Z_a-z]).)(([0-9A-Z_a-z][0-9A-Z_a-z])[0-9A-Z_a-z]?))#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  HW@Oq.s2  o3@_k.Kc  lI@qB.NJ  Td@ei.Dp  eA@zW.uc  eC@B0.Kb  Td@0K.hM
ex(1):  0W6@tyo.u3  Oo@JY.qw  fO@yvu.aP  1u@9A5.i3  G6l@dW.bZ  80@kl1.qB
ex(2):  cILN@77b_.wd  n72@fJf.Gc  m.le@n_XG.tN  kQD@v3.UD2  vCwt@ita.IZ
ex(3):  G_ah@9s.cD4  5t@gBzy.sey  0n@q-Dc.S3  ql@XDEy6.hYQ  YLy@6z.hw
ex(5):  luIb1@HERp.bXl  ZvAfV7E@CnYgMDf.a_J  mJg@dt3ic.Rmo  hedg@wDh.k6
ex(8):  TaY6FN@oso.Ip  swXVMMekq@knpUr3G.Rs  cHe5Y@tZ9.dkb  3ZVbc@5cREw.2l
---------------- Examples from DFA ---------------
s1:  V6@5O.YR
s9:  V6@5O.YRV

         

         #A: Darren Neimke
         #D: Matches filenames.
UPDATED on 1st Jan 2004.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=357
ERROR:   ^([a-zA-Z]\:)(\\[^\\/:*?<>"|]*(?<![ ]))*(\.[a-zA-Z]{2,6})$
    rx: '(?...' unimplemented: in "^([a-zA-Z]\:)(\\[^\\/:*?<>"|]*(?<![ ]))*(\.[a-zA-Z]{2,6})$"

         

         #A: Volker Roth
         #D: We've come across the situation where we had to extract the IIS-Log entries without the header information. The data is far more complex than the sample given.
Explanation:
^[^#] = lines not beginnin with #
([^ ]+ ){6} = 6 times no space until one space
[^ ]+ = no spaces allowed...
$ = ...until end of line
For further explanation don't hesitate to write E-Mail.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=358
expr 192: ^[^#]([^ ]+ ){6}[^ ]+$
tree:   (([\x01-"$-\u007f]([\x01-\x1f!-\u007f]+ ){6})[\x01-\x1f!-\u007f]+)
augmnt: ((([\x01-"$-\u007f](((((([\x01-\x1f!-\u007f]+ )([\x01-\x1f!-\u007f]+ ))([\x01-\x1f!-\u007f]+ ))([\x01-\x1f!-\u007f]+ ))([\x01-\x1f!-\u007f]+ ))([\x01-\x1f!-\u007f]+ )))[\x01-\x1f!-\u007f]+)#)
length: 14 to *
-------------------- Examples --------------------
ex(0):  ~1 # c ~ g p )  17 } 9 e % c C  !C e # n O # e  Nw l w 8 o ' E
ex(1):  Ze X r A h [ x  T2 # G _ s U M  WN , ( D + u '  P, ^ 3 D i W 8
ex(2):  ~&^ Cp D) t N -I w  {\\ S 1 - JW tq Y  k<_ A J 1 n / QU
ex(3):  \\q? z @ En IV) Ni S  @_ XK 1S3 K M 8): Z~  7yo` z\\ E Z^? QE> fTu tq
ex(5):  ;yx# ;Lcz| Z j =xhu ?Yv4 w1\\  qfTOF VR tJ] 1n dl}^[ @]) X,V
ex(8):  @3y~mR eI3A#tJ5 =K8 /kd U~ e( Y+wQ8l  y5fd 2 7 ^NmR z%T`* ?Mswn?) O
---------------- Examples from DFA ---------------
s1:  HI - M % : 3 B

         

         #A: mana deys
         #D: For testing 24H based time entry.  Tests if there is a colon to separate the hours from the minutes
         #U: http://regexlib.com/REDetails.aspx?regexp_id=360
expr 193: ^(([0-9])|([0-1][0-9])|([2][0-3])):?([0-5][0-9])$
tree:   ((([0-9]|([01][0-9])|(2[0-3])):?)([0-5][0-9]))
augmnt: (((([0-9]|([01][0-9])|(2[0-3])):?)([0-5][0-9]))#)
length: 3 to 5
-------------------- Examples --------------------
ex(0):  416  2358  859  201  2258  2102  147  2023  2107  629  0007  2249  726
ex(1):  1951  638  20:08  20:22  628  0901  19:39  0248  3:20  728  3:07  9:02
ex(2):  23:23  7:40  00:50  0610  745  2027  12:38  2031  0832  2220  0245
ex(3):  08:29  0:46  2159  000  4:03  16:56  2016  414  5:24  2033  2118  8:43
ex(5):  0:26  22:41  22:51  06:49  0:56  21:47  222  04:17  256  02:19  23:33
ex(8):  6:52  0327  0117  20:47  0:41  2127  2017  2100  614  724  23:29  613
---------------- Examples from DFA ---------------
s1:  022
s4:  027

         

         #A: David Darling
         #U: http://regexlib.com/REDetails.aspx?regexp_id=361
expr 194: ^(((((0[13578])|([13578])|(1[02]))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(3[01])))|((([469])|(11))[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9])|(30)))|((02|2)[\-\/\s]?((0[1-9])|([1-9])|([1-2][0-9]))))[\-\/\s]?\d{4})(\s(((0[1-9])|([1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$
tree:   ((((((((0[13578])|[13578]|(1[02]))[\t-\r /-]?)((0[1-9])|[1-9]|([12][0-9])|(3[01])))|((([469]|(11))[\t-\r /-]?)((0[1-9])|[1-9]|([12][0-9])|(30)))|((((02)|2)[\t-\r /-]?)((0[1-9])|[1-9]|([12][0-9]))))[\t-\r /-]?)[0-9]{4})([\t-\r ]((((((0[1-9])|[1-9]|(1[012])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))[AMPamp|]{2}))?)
augmnt: (((((((((0[13578])|[13578]|(1[02]))[\t-\r /-]?)((0[1-9])|[1-9]|([12][0-9])|(3[01])))|((([469]|(11))[\t-\r /-]?)((0[1-9])|[1-9]|([12][0-9])|(30)))|((((02)|2)[\t-\r /-]?)((0[1-9])|[1-9]|([12][0-9]))))[\t-\r /-]?)((([0-9][0-9])[0-9])[0-9]))([\t-\r ]((((((0[1-9])|[1-9]|(1[012])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))([AMPamp|][AMPamp|])))?)#)
length: 6 to 22
-------------------- Examples --------------------
ex(0):  03317888  2030045  12101278  02194746  2047084  11140778  1153647
ex(1):  10098890  11-302689 03:38 AP  4-15 4979 10:14 A|  1020/8524
ex(2):  02154185 07:29:10 ||  1104-3839 09:54 Ap  11 130053  1130-7804
ex(3):  02-078228  2/064423  11-9 7478  5098792 5:12:47 ||  11 294677 10:06 ap
ex(5):  1103/8482 4:53:12 |M  9 19/3344 3:57 am  02289843  116-4366  695047
ex(8):  2075110 10:34:13 A|  11199139 4:27:43 pa  01/09 3107
---------------- Examples from DFA ---------------
s1:  110087
s9:  110261
s8:  138196
s17:  11 0767
s50:  110087 1:44 |p

         

         #A: Stefan Beylen
         #D: Validates Austrian Cellular Phone Numbers. Works with ONE, T-Mobile, A1, Telering and new Provider "Drei". WITHOUT Country Code Verification.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=362
expr 195: ^0(6[045679][0469]){1}(\-)?(1)?[^0\D]{1}\d{6}$
tree:   (((((0((6[04-79])[0469]))-?)1?)[1-9])[0-9]{6})
augmnt: ((((((0((6[04-79])[0469]))-?)1?)[1-9])((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 11 to 13
-------------------- Examples --------------------
ex(0):  06648788879  06602458601  06044854830  06404897802  06404746407
ex(1):  0694-7212326  06604900119  0609-6268939  06009735707  06704560497
ex(2):  06045037685  0669-16998142  06061238022  0694-2853088  0609-12682707
ex(3):  06662644074  06996200536  067418378046  06049069901  0646-3738910
ex(5):  0644-15964423  0690-17336174  0666-12636879  0669-5527601  06095964677
ex(8):  0646-9926073  06696256379  0670-8482732  0664-11214608  0644-14344333
---------------- Examples from DFA ---------------
s1:  06741026446
s12:  06741791636

         

         #A: Daniel Pickles
         #D: Matches a whole number between 1 and 20 inclusively
         #U: http://regexlib.com/REDetails.aspx?regexp_id=363
ERROR:   ^1?[1-9]$|^[1-2]0$
    rx: Embedded '$' unimplemented: in "^1?[1-9]$|^[1-2]0$"

         

         #A: Hakim SALHI
         #D: For Date format MM-JJ-YYYY validation
         #U: http://regexlib.com/REDetails.aspx?regexp_id=364
ERROR:   ^[\w-\.]+@([\w-]+\.)+[\w-]{2,3}$
    rx: invalid range: in "^[\w-\.]+@([\w-]+\.)+[\w-]{2,3}$"

         

         #A: Jos Krause
         #D: Validates Dutch Postal Codes (ZipCode). There was a previous one listed here, but it's not entirely correct. Namely that dutch postal codes can contain a zero but cannot start with one, so this one is the adjusted version.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=367
expr 196: ^[1-9][0-9]{3}\s?[a-zA-Z]{2}$
tree:   ((([1-9][0-9]{3})[\t-\r ]?)[A-Za-z]{2})
augmnt: (((([1-9](([0-9][0-9])[0-9]))[\t-\r ]?)([A-Za-z][A-Za-z]))#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  1436by  8788KD  3826dU  2458Wi  3620BK  4854BC  5947cy  6978yM  7084Ut
ex(1):  6784 oV  5364 Tb  5334fW  7262Us  9888 xV  9910 wc  8689 XY  3378gB
ex(2):  6225 Ie  9791 je  2140ZU  1329Mi  6410 Mm  6246zh  3279 DQ  5091EH
ex(3):  9982OH  2418 oq  1320 Yl  9668vC  9990Au  7433Jp  8675 jo  6856Ww
ex(5):  6200 wd  1898 Ow  8780MK  2592El  2901 qV  6198Zl  5910 bz  7199Rb
ex(8):  6937 gN  2442 Ke  9510 Fc  8747sM  5992kn  2879bs  8795Vf  8760 Cu
---------------- Examples from DFA ---------------
s1:  3771ZU

         

         #A: sanjayanthan vijayakeerthi
         #D: Accept only (0-9) integer and one decimal point(decimal point is also optional).After decimal point it accepts at least one numeric .This will be usefull in money related
fields or decimal fields. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=368
expr 197: ^([0-9]*|\d*\.\d{1}?\d*)$
tree:   ([0-9]*|((([0-9]*.)[0-9])[0-9]*))
augmnt: (([0-9]*|((([0-9]*.)[0-9])[0-9]*))#)
length: 0 to *
-------------------- Examples --------------------
ex(0):      .5    .8      .8      .0    .6    .2    .7    .8  .0  .7        .8
ex(1):  0    0  .4  8.30  3.48  4.3    .2          .19  0.9      3  4.38  
ex(2):  02.56  97  7.3  4.08  29  4  1    85.428  3.79  42    6.8  80  09  8  
ex(3):  0.82  305    27  990    433  9  75.6488  44.7  990  200  631.938
ex(5):  5926  6990  62151.9  3  109  60219.4724  2845  7.29644  2  0.507336
ex(8):  66368.916179  7.26019  9  28796467  79.0666742  0.71124
---------------- Examples from DFA ---------------
s0:  
s2:  .8

         

         #A: Michael Ash
         #D: DateTime Validator. 
         #T: DateTime M/d/y hh:mm:ss
         #U: http://regexlib.com/REDetails.aspx?regexp_id=369
ERROR:   ^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$
    rx: '(?...' unimplemented: in "^(?=\d)(?:(?:(?:(?:(?:0?[13578]|1[02])(\/|-|\.)31)\1|(?:(?:0?[1,3-9]|1[0-2])(\/|-|\.)(?:29|30)\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(\/|-|\.)29\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\4(?:(?:1[6-9]|[2-9]\d)?\d{2}))($|\ (?=\d)))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$"

         

         #A: Michael Ash
         #D: This RE validates times patterns.
         #T: Time
         #U: http://regexlib.com/REDetails.aspx?regexp_id=370
ERROR:   ^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$
    rx: Embedded '$' unimplemented: in "^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$|^([01]\d|2[0-3])(:[0-5]\d){0,2}$"

         

         #A: Mladen Mihajlovic
         #D: Matches HTML Color strings. Like #FFFFFF is white and #000000 is black and #FF0000 is red and so on...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=372
expr 198: ^(#){1}([a-fA-F0-9]){6}$
tree:   (#[0-9A-Fa-f]{6})
augmnt: ((#((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f]))#)
length: 7 to 7
-------------------- Examples --------------------
ex(0):  #A01B18  #79cD8a  #1fFADf  #2361FF  #Cd379A  #6fD36E  #DcCd4B  #b21F9B
ex(1):  #eC19dA  #BBaa28  #3e8Abd  #7Fd0AE  #EDfcb6  #fAcf02  #DA3355  #D9DFAD
ex(2):  #6526D7  #8De06d  #1a466b  #EBad97  #a99c30  #9Ec9ec  #2F126f  #1ca4bb
ex(3):  #22891C  #aF0a41  #FDf6b0  #D1Ca60  #5D9E1d  #3B97BF  #dBB3da  #Ea74dC
ex(5):  #6d74EF  #eea17c  #aedf12  #60F7d9  #395BEa  #a50946  #ad232b  #fEbF0a
ex(8):  #d3d5F0  #4aFa9b  #bF1f3a  #dEbee3  #1CBdFC  #eDaA41  #005baa  #ebac0a
---------------- Examples from DFA ---------------
s1:  #aAc99f

         

         #A: Mathews Inga
         #D: Date in DD/MM/YYYY format.
Fecha en formato DD/MM/AAAA.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=374
expr 199: (((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])(\d{4}))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])(\d{4}))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])(\d{4}))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(10)|(12)))/)[0-9]{4})|((((((0[1-9])|([12][0-9])|(30))/)((0[469])|(11)))/)[0-9]{4})|((((((0[1-9])|(1[0-9])|(2[0-8]))/)(02))/)[0-9]{4})|(((((29)(.|-|/))(02))/)((([02468][048])0)0))|(((((29)/)(02))/)((([13579][26])0)0))|(((((29)/)(02))/)((([0-9][0-9])0)[48]))|(((((29)/)(02))/)((([0-9][0-9])[2468])[048]))|(((((29)/)(02))/)((([0-9][0-9])[13579])[26])))
augmnt: ((((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(10)|(12)))/)((([0-9][0-9])[0-9])[0-9]))|((((((0[1-9])|([12][0-9])|(30))/)((0[469])|(11)))/)((([0-9][0-9])[0-9])[0-9]))|((((((0[1-9])|(1[0-9])|(2[0-8]))/)(02))/)((([0-9][0-9])[0-9])[0-9]))|(((((29)(.|-|/))(02))/)((([02468][048])0)0))|(((((29)/)(02))/)((([13579][26])0)0))|(((((29)/)(02))/)((([0-9][0-9])0)[48]))|(((((29)/)(02))/)((([0-9][0-9])[2468])[048]))|(((((29)/)(02))/)((([0-9][0-9])[13579])[26])))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/8887  29.02/0800  11/02/4830  29/02/9780  30/11/6407  29/02/1308
ex(1):  30/06/8890  19/02/9642  29/02/1200  29/02/9200  29/02/9192  29-02/6800
ex(2):  29/02/1600  29/02/8828  29/02/8292  20/02/8320  29/02/8272  29-02/2400
ex(3):  16/10/3200  29/02/8312  29/02/0000  29/02/1600  29/02/9192  29.02/6800
ex(5):  29/02/9068  29/02/7804  30/11/9216  29/02/2732  18/02/9646  29/02/0672
ex(8):  29/02/0308  12/12/8680  29/02/2744  29/02/2180  25/02/2979  07/12/6578
---------------- Examples from DFA ---------------
s1:  06/03/3070

         

         #A: Sung Lee
         #U: http://regexlib.com/REDetails.aspx?regexp_id=376
expr 200: ^((((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|([1-2][0-9]))))[\-\/\s]?\d{2}(([02468][048])|([13579][26])))|(((((0?[13578])|(1[02]))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(3[01])))|(((0?[469])|(11))[\-\/\s]?((0?[1-9])|([1-2][0-9])|(30)))|(0?2[\-\/\s]?((0?[1-9])|(1[0-9])|(2[0-8]))))[\-\/\s]?\d{2}(([02468][1235679])|([13579][01345789]))))(\s(((0?[1-9])|(1[0-2]))\:([0-5][0-9])((\s)|(\:([0-5][0-9])\s))([AM|PM|am|pm]{2,2})))?$
tree:   ((((((((((0?[13578])|(1[02]))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(3[01])))|((((0?[469])|(11))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(30)))|(((0?2)[\t-\r /-]?)((0?[1-9])|([12][0-9]))))[\t-\r /-]?)[0-9]{2})(([02468][048])|([13579][26])))|((((((((0?[13578])|(1[02]))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(3[01])))|((((0?[469])|(11))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(30)))|(((0?2)[\t-\r /-]?)((0?[1-9])|(1[0-9])|(2[0-8]))))[\t-\r /-]?)[0-9]{2})(([02468][1235679])|([13579][01345789]))))([\t-\r ]((((((0?[1-9])|(1[012])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))[AMPamp|]{2}))?)
augmnt: (((((((((((0?[13578])|(1[02]))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(3[01])))|((((0?[469])|(11))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(30)))|(((0?2)[\t-\r /-]?)((0?[1-9])|([12][0-9]))))[\t-\r /-]?)([0-9][0-9]))(([02468][048])|([13579][26])))|((((((((0?[13578])|(1[02]))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(3[01])))|((((0?[469])|(11))[\t-\r /-]?)((0?[1-9])|([12][0-9])|(30)))|(((0?2)[\t-\r /-]?)((0?[1-9])|(1[0-9])|(2[0-8]))))[\t-\r /-]?)([0-9][0-9]))(([02468][1235679])|([13579][01345789]))))([\t-\r ]((((((0?[1-9])|(1[012])):)([0-5][0-9]))([\t-\r ]|((:([0-5][0-9]))[\t-\r ])))([AMPamp|][AMPamp|])))?)#)
length: 6 to 22
-------------------- Examples --------------------
ex(0):  12278824  10300140  11130017  8102780  5317880  1123921  272668  249028
ex(1):  12067397  2019757  12283294  06302816 05:31 aP  282844
ex(2):  12140763 6:40:23 Pm  02/30592  11 03/7368 12:59:37 P|  02/64468
ex(3):  06/257543 04:28:24 Pm  1307669  6023574  0630/8408  10113212
ex(5):  02 169676 5:26:05 mp  10300260 10:02:10 AM  038/3066 11:34:02 pm
ex(8):  0212 8529  021 7582 6:04:34 pP  02-08-8452 11:58:59 |a
---------------- Examples from DFA ---------------
s1:  110046
s10:  110105
s9:  138593
s11:  229206
s27:  229205
s42:  11 0108
s26:  110046 1:50 ap

         

         #A: David Tersigni
         #D: matches IP address in hex form in dotted or not dotted notation
         #U: http://regexlib.com/REDetails.aspx?regexp_id=377
expr 201: [0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}(\.?)[0-9A-Fa-f]{2}
tree:   (((((([0-9A-Fa-f]{2}.?)[0-9A-Fa-f]{2}).?)[0-9A-Fa-f]{2}).?)[0-9A-Fa-f]{2})
augmnt: (((((((([0-9A-Fa-f][0-9A-Fa-f]).?)([0-9A-Fa-f][0-9A-Fa-f])).?)([0-9A-Fa-f][0-9A-Fa-f])).?)([0-9A-Fa-f][0-9A-Fa-f]))#)
length: 8 to 11
-------------------- Examples --------------------
ex(0):  10AB1877  9cD8aafF  ADf5eDA1  FF3Cd379  AbfD36Ef  ccCd4B42  AF9B9bcd
ex(1):  dABB.28.e8  Ab.7F.AE.Df  cb.FA.02DA  332f.9DAD  Dd.fD65a6  7eDe6d1a
ex(2):  72.A9.309E  c9.75.F1.6f  ac.0Cbb.6f  Cdb8aCaF  0a.9Ffa.08  D1e10A.D9
ex(3):  dB28.FE17  4dca.5ED1  6d.EF.7c.DD  0F.df.e067  d9.c5.Eaa5  09.6A.b3AF
ex(5):  ab3d.F0.aF  a9.4F.f3.dE  be37CB3C  fbaA.60.5b  aaeb3c9a  e0.76.01.Ac
ex(8):  aCde.7de0  8cB89a.B5  db.09.8cE4  0D.AAA2.38  a4AB.fafb  0FE6C55E
---------------- Examples from DFA ---------------
s1:  3DD379FF

         

         #A: David Tersigni
         #D: Very Simple Match for dotted Decimal IP address.  Doesn’t Validate addresses
         #U: http://regexlib.com/REDetails.aspx?regexp_id=378
expr 202: [0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}
tree:   (((((([0-9]{1,3}.)[0-9]{1,3}).)[0-9]{1,3}).)[0-9]{1,3})
augmnt: ((((((((([0-9][0-9]?)[0-9]?).)(([0-9][0-9]?)[0-9]?)).)(([0-9][0-9]?)[0-9]?)).)(([0-9][0-9]?)[0-9]?))#)
length: 7 to 15
-------------------- Examples --------------------
ex(0):  4.3.5.7  7.8.7.8  2.1.0.5  8.0.6.0  1.7.5.8  3.0.4.4  6.9.8.2  7.8.2.0
ex(1):  89.93.79.34  222.2.0.9  191.96.2.39  07.837.77.25  6.710.41.08
ex(2):  6.929.84.90  82.8.08.62  13.82.900.6  79.0.73.33  73.4.6.7  59.3.561.98
ex(3):  69.1.518.781  056.294.7.2  497.26.42.95  13.67.8.92  66.96.75.56
ex(5):  6.64.7.71  22.030.52.267  9.09.8.72  430.242.4.74  278.3.33.78
ex(8):  6.64.3.9  63.08.76.0  0.892.5.106  17.493.2.03  4.419.45.71
---------------- Examples from DFA ---------------
s1:  3.7.4.0
s9:  3.7.4.01
s8:  3.7.4.019

         

         #A: Danil Sholokhov
         #D: Matches number in format XX.XX Please note that this expression allows maximum of 8 digits before the dot and 2 (optional) digits after the dot.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=379
ERROR:   (^[0-9]{1,8}|(^[0-9]{1,8}\.{0,1}[0-9]{1,2}))$
    rx: Embedded '^' unimplemented: in "(^[0-9]{1,8}|(^[0-9]{1,8}\.{0,1}[0-9]{1,2}))$"

         

         #A: David Tersigni
         #D: Simple match for U.S. Amateur Radio Call signs
Must start with an A,K,N or W.
1 or two prefix letters (not case sensitive),
Exactly one zone digit,
One to three suffix digits( not case sensitive).
73
         #U: http://regexlib.com/REDetails.aspx?regexp_id=380
expr 203: ^[AaWaKkNn][a-zA-Z]?[0-9][a-zA-Z]{1,3}$
tree:   ((([AKNWakn][A-Za-z]?)[0-9])[A-Za-z]{1,3})
augmnt: (((([AKNWakn][A-Za-z]?)[0-9])(([A-Za-z][A-Za-z]?)[A-Za-z]?))#)
length: 3 to 6
-------------------- Examples --------------------
ex(0):  A3K  k7D  N8D  n2o  a0Y  W6i  A2w  K7C  a8a  k4D  A6U  W8y  a0u  A9X
ex(1):  W4PoZ  N4Lb  aa8fO  n6s  K9mV  nl0E  N8rNY  ac8gxh  k9R  AS0epv  ae7y
ex(2):  N4PP  AI4s  ae7fmQ  W9T  K5Qb  K9G  a4vQ  km0bYM  a2vN  K0uGd  kl6fZ
ex(3):  Ns6dB  K0ij  a9jj  Wv8A  A5z  n9NH  a1vJk  NS9rh  A2Hx  A4e  W5vjs
ex(5):  a5fAa  ka7s  KY6kW  W1spl  NU7yh  aX8T  a4IvZ  a0Q  k7U  NL2oa  kT0rx
ex(8):  K0vL  WZ2Wl  Ki1cV  k7U  nV8hM  nZ6Feq  Ay2y  W9roP  N9AU  a6gW  NM5eY
---------------- Examples from DFA ---------------
s1:  k0M
s5:  k0MO
s4:  k0MOK

         

         #A: Sjef van Leeuwen
         #D: Based of from Steward Haddock's domain nam
Checks domain names. This is an attempt to deal with some of the issues of the other reg ex in not handling leading periods(.), hypens(-). and valid extension.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=381
ERROR:   ^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly| ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk| pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr| st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|AERO|BIZ|COM|COOP|EDU|GOV|INFO|INT|MIL|MUSEUM|NAME|NET|ORG|AC|
    rx: unclosed '(': in "^[a-zA-Z0-9]+([a-zA-Z0-9\-\.]+)?\.(aero|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|ac|ad|ae|af|ag|ai|al|am|an|ao|aq|ar|as|at|au|aw|az|ba|bb|bd|be|bf|bg|bh|bi|bj|bm|bn|bo|br|bs|bt|bv|bw|by|bz|ca|cc|cd|cf|cg|ch|ci|ck|cl|cm|cn|co|cr|cs|cu|cv|cx|cy|cz|de|dj|dk|dm|do|dz|ec|ee|eg|eh|er|es|et|fi|fj|fk|fm|fo|fr|ga|gb|gd|ge|gf|gg|gh|gi|gl|gm|gn|gp|gq|gr|gs|gt|gu|gw|gy|hk|hm|hn|hr|ht|hu|id|ie|il|im|in|io|iq|ir|is|it|je|jm|jo|jp|ke|kg|kh|ki|km|kn|kp|kr|kw|ky|kz|la|lb|lc|li|lk|lr|ls|lt|lu|lv|ly| ma|mc|md|mg|mh|mk|ml|mm|mn|mo|mp|mq|mr|ms|mt|mu|mv|mw|mx|my|mz|na|nc|ne|nf|ng|ni|nl|no|np|nr|nu|nz|om|pa|pe|pf|pg|ph|pk| pl|pm|pn|pr|ps|pt|pw|py|qa|re|ro|ru|rw|sa|sb|sc|sd|se|sg|sh|si|sj|sk|sl|sm|sn|so|sr| st|su|sv|sy|sz|tc|td|tf|tg|th|tj|tk|tm|tn|to|tp|tr|tt|tv|tw|tz|ua|ug|uk|um|us|uy|uz|va|vc|ve|vg|vi|vn|vu|wf|ws|ye|yt|yu|za|zm|zr|zw|AERO|BIZ|COM|COOP|EDU|GOV|INFO|INT|MIL|MUSEUM|NAME|NET|ORG|AC|"

         

         #A: Yosi Taguri
         #D: using match.Result("$1.$2.$3.$4")
will return the assembly version of a given c# AssemblyInfo.cs file
         #U: http://regexlib.com/REDetails.aspx?regexp_id=382
expr 204: ^\[assembly: AssemblyVersion\(\"([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)
tree:   (((((((((((((((((((((((((((((((((([a)s)s)e)m)b)l)y):) )A)s)s)e)m)b)l)y)V)e)r)s)i)o)n)()")[0-9]+).)[0-9]+).)[0-9]+).)[0-9]+)
augmnt: ((((((((((((((((((((((((((((((((((([a)s)s)e)m)b)l)y):) )A)s)s)e)m)b)l)y)V)e)r)s)i)o)n)()")[0-9]+).)[0-9]+).)[0-9]+).)[0-9]+)#)
length: 35 to *
-------------------- Examples --------------------
ex(0):  [assembly: AssemblyVersion(\"1.7.5.8
ex(1):  [assembly: AssemblyVersion(\"0.1.9.0
ex(2):  [assembly: AssemblyVersion(\"68.4.8.32
ex(3):  [assembly: AssemblyVersion(\"363.856.0.6
ex(5):  [assembly: AssemblyVersion(\"845.7726.44.2190
ex(8):  [assembly: AssemblyVersion(\"0470112.260735.59.62563
---------------- Examples from DFA ---------------
s1:  [assembly: AssemblyVersion(\"2.6.4.4

         

         #A: Tony Austin
         #U: http://regexlib.com/REDetails.aspx?regexp_id=383
ERROR:   <!--.*?-->
    rx: prefer-fewer '?' unimplemented: in "<!--.*?-->"

         

         #A: paolo beltrami
         #D: This simple regexp should match any possible italian address entry and doesn't match NULL entries (good if address is required). Should work well for any other address (it's been verified against 250 addresses from most european countries, usa and australia. Please mail me if there's something missing
         #U: http://regexlib.com/REDetails.aspx?regexp_id=384
expr 205: ^[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\']+[a-zA-Z0-9ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝßàáâãäåæçèéêëìíîïñòóôõöøùúûüýÿ\.\,\-\/\' ]+$
tree:   ([',-9A-Za-zÀ-ÖØ-Ýß-ïñ-öø-ýÿ]+[ ',-9A-Za-zÀ-ÖØ-Ýß-ïñ-öø-ýÿ]+)
augmnt: (([',-9A-Za-zÀ-ÖØ-Ýß-ïñ-öø-ýÿ]+[ ',-9A-Za-zÀ-ÖØ-Ýß-ïñ-öø-ýÿ]+)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  3w  1í  òu  gF  Kø  Uû  Rt  Fü  Éí  6M  I1  oH  Âý  ÐO  4ç  øè  ri  Åw
ex(1):  Çm  3v  E'  PÑ  qI  ÿâ  óÇ  âÈ  XË  áK  4T  ëD  kD  BÒ  eö  eÎ  uö  áÝ
ex(2):  ÔnDÆ  bÍÕ  à.  mú  5ßQ  ójIV  ýÂ  sÍä  oc  mO  Ãh  oÓ5'  ÓH  ïz  æëj
ex(3):  wOüT  NÄÜB  wgUÂæ  Olí  lY  ÃeÎrØ  EÇG  Àiw/  v2ãk  7Xqmýx  tAòuÜ
ex(5):  6ÎK  çmH  òym'êó  Æ,õu  á71-Zahjne  öËóóÙ  ýAW/  9nÛëÉ  B83ÖÜxïÌæå
ex(8):  Èûè90.  öÀrCLÃItj  x,ã ÊÀãNpõ  Æóåja38  ÚAcça5  aÑ.äïýdrs3òqü  z9qF ãiÂ
---------------- Examples from DFA ---------------
s1:  ÉÛ

         

         #A: Michael Ash
         #D: This RE matches Days of the week or their abbreviations.
         #T: Days of the week
         #U: http://regexlib.com/REDetails.aspx?regexp_id=385
ERROR:   ^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$
    rx: Embedded '$' unimplemented: in "^(Sun|Mon|(T(ues|hurs))|Fri)(day|\.)?$|Wed(\.|nesday)?$|Sat(\.|urday)?$|T((ue?)|(hu?r?))\.?$"

         

         #A: Joshua Olson
         #D: Matches a valid "empty" tag (has trailing slash).  Note, if you run it against a string such as <img src="test.gif" alt="<hr />"> it will indeed return a match.  But, the match is not at character 1 like you'd suspect, but rather it's matching the internal <hr />.  If you look at the source of this tag (http://concepts.waetech.com/unclosed_tags/) you'll find a whoe suite of regex's for matching html tags.  Using them you could feasibly step though a document and avoid this mismatch as the outer tag would match *in totality* and you'd completely skip this inner match.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=387
expr 206: <[a-zA-Z]+(\s+[a-zA-Z]+\s*=\s*("([^"]*)"|'([^']*)'))*\s*/>
tree:   (((((<[A-Za-z]+)((((([\t-\r ]+[A-Za-z]+)[\t-\r ]*)=)[\t-\r ]*)((("[\x01-!#-\u007f]*)")|(('[\x01-&(-\u007f]*)')))*)[\t-\r ]*)/)>)
augmnt: ((((((<[A-Za-z]+)((((([\t-\r ]+[A-Za-z]+)[\t-\r ]*)=)[\t-\r ]*)((("[\x01-!#-\u007f]*)")|(('[\x01-&(-\u007f]*)')))*)[\t-\r ]*)/)>)#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  <W/>  <y/>  <S/>  <U/>  <U/>  <E/>  <D/>  <d/>  <B/>  <C/>  <U/>  <y/>
ex(1):  <X/>  <Q />  <R/>  <b />  <J />  <U/>  <D/>  <r E=\"\" />  <Y/>  <M />
ex(2):  <pf  C  = 'uK'  />  <m m  =''  q ='i\\'  />  <H l=\"%\"/>
ex(3):  <Y  Vwy  = \"xZ\"   A  =''   q   = '' />
ex(5):  <nW   Tp     =\"`DQFg\"    fv     =\"OT\"  />
ex(8):  <VyhJMCpv    qNLhyXGh    = '\"B!!~v'    p    =  ''    MOK  =      \"b\"  xhlEG      =      '#>\\c1|:)'     v   =    ' mSK1~z'  rGeUjh= \"6\"     eA     =\"%]sk\" />
---------------- Examples from DFA ---------------
s1:  <k/>

         

         #A: Laurent J
         #D: for validate a email, but with this regex it 's possible : a._-z@a_.....____---.com
         #U: http://regexlib.com/REDetails.aspx?regexp_id=388
expr 207: ^[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9]@[a-z0-9][a-z0-9_\.-]{0,}[a-z0-9][\.][a-z0-9]{2,4}$
tree:   (((((((([0-9a-z][.0-9_a-z-]*)[0-9a-z])@)[0-9a-z])[.0-9_a-z-]*)[0-9a-z]).)[0-9a-z]{2,4})
augmnt: ((((((((([0-9a-z][.0-9_a-z-]*)[0-9a-z])@)[0-9a-z])[.0-9_a-z-]*)[0-9a-z]).)((([0-9a-z][0-9a-z])[0-9a-z]?)[0-9a-z]?))#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  nk@62.3q  kz@l4.kh  qm@ii.er  91@ce.f0  x1@19.6j  8e@m5.ar  67@86.39
ex(1):  ohk@lr5.713  9l3@37.l6cn  bf@rw.f1qu  dlv@9ok.cp4w  yef@dn.42f
ex(2):  n_78@l6h.v3h  mv@xe6k.9c  x3@7rm.r1  h9@sc.b5i  gb@ys.80r  qr@c83.qcnh
ex(3):  we@k00c.s7  5i501@j91i6.ycx  w58k@mi8a.nm7  dt9@7tsrs.ewn7
ex(5):  9so@6b.w3f.49k  yp9r36@4c.o4  5e4@s.p-r48.5b3f  2x@9d7.t26  5659@65.7xg
ex(8):  6dl@tf_co3.69m  9fknv6xg@06cgzx9.gbvj  s-lttc@t_adh_9r.77
---------------- Examples from DFA ---------------
s1:  46@9u.63
s10:  46@9u.63x
s9:  46@9u.63x7

         

         #A: Remi Sabourin
         #D: Checks domain names. This validates domains based on latest specifications (RFCs 952 and 1123 dealing with hostnames and RFC 1035 dealing with domain name system requirements) except that it only includes realistic fully-qualified domains: 1. requires at least one subdomain 2. allows shortest top-level domains like "ca", and "museum" as longest.
Other validation rules: 1. Labels/parts should be seperated by period. 2. Each label/part has maximum of 63 characters. 3. First and last character of label must be alphanumeric, other characters alphanumeric or hyphen. 4. Does not check maxlength of domain which incidentally is 253 characters of text (255 binary representation).
For a regular expression that matches ALL domains:
^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)*[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?$
         #U: http://regexlib.com/REDetails.aspx?regexp_id=391
expr 208: ^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}$
tree:   ((([0-9A-Za-z]([0-9A-Za-z-]{0,61}[0-9A-Za-z])?).)+[A-Za-z]{2,6})
augmnt: (((([0-9A-Za-z]((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([0-9A-Za-z-]?[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z-]?)[0-9A-Za-z])?).)+((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  H.PK  q.JD  o.KD  k.Nd  b.YB  B.ij  T.wB  U.CZ  e.Cu  z.Dc  c.XL  B.MF
ex(1):  C.sKQ  Gqs567SUd8vsllH6MWJLRKiLrok.MiSP  w.Ish  V.fzQ
ex(2):  c.3.llqH
ex(3):  x.e.2G5QC8hYt50Rddes1BGVB1nJvxHEmkt7.pFpjV
ex(5):  0.b.9Ls2cy8luIcIW77Qv6cy4bgcoq0RfWTGOnCVR3.2.VlC
ex(8):  i.xNANsY9qHemN2rXKKzVcXCGJA3xQOgYnYZJC.pgaP
---------------- Examples from DFA ---------------
s1:  e.jj
s9:  e.jjK
s8:  e.jjKF
s7:  e.jjKFO
s6:  e.jjKFOa

         

         #A: Max Lu
         #D: Double byte charactors validator.
The rule applies to double byte charactor input validation.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=395
expr 209: ^[\u0081-\uFFFF]{1,}$
tree:   [\u0081-\uffff]+
augmnt: ([\u0081-\uffff]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  ﳺ  ꥲ  龎  ᥪ  鏛  \ue900  䍏  童  桨  䬐  蓨  \uf0db  뿫  ᣜ  ⿸  ⓮  ﹿ  㚢  \uf5a2
ex(1):  愋  ꐔ  誊  센  \ue781  ᩊ  鼠  \uf550  墯  佌  덍  ﻄ  뤁  䍼  퐖  뫑  ﱈ  ꉮ  ӝ  얒  �
ex(2):  ⟪  ⌧�  媾  攮뎐  츰  㙤\ue9b9  濼  괦  ᥝ͚  ᆣ  ꅰ�  ㎯霶  \ua9e7  幥  �췏  㓞帆  ཫ  ẑ
ex(3):  ぶ  뒨⡐㗤  횢굁  \u20f2䓕  䊥ⵝ  傶艗�  Ӻ\u08d6  콢ⓜ  \uf067  쎯  케�\ue053  苦  囗ᐩꅟ
ex(5):  \uf16f�  쑎  墇ꐉ谚  \uea4e  콙ॿ\uf071ꉍ⠠  遆\ue70b뀿\ue598  衞  䦚屢\ufde9
ex(8):  䌎ꢞ\u0e63�誩皩⦬  \uf849ꫜ諊羌�끶≙  ꐓ옜  \uf7e5층\ue660�  얄㩦\u1a1d鉫때㫖쩄  茗숄昿쏶㫦
---------------- Examples from DFA ---------------
s1:  ⏐

         

         #A: Jason N. Gaylord
         #D: This validates the states and territories of the United States in a 2 character uppercase format. Very poor excuse for a regular expression!  ;)
Written by Jason Gaylord.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=396
expr 210: ^((AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY))$
tree:   ((AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY))
augmnt: (((AL)|(AK)|(AS)|(AZ)|(AR)|(CA)|(CO)|(CT)|(DE)|(DC)|(FM)|(FL)|(GA)|(GU)|(HI)|(ID)|(IL)|(IN)|(IA)|(KS)|(KY)|(LA)|(ME)|(MH)|(MD)|(MA)|(MI)|(MN)|(MS)|(MO)|(MT)|(NE)|(NV)|(NH)|(NJ)|(NM)|(NY)|(NC)|(ND)|(MP)|(OH)|(OK)|(OR)|(PW)|(PA)|(PR)|(RI)|(SC)|(SD)|(TN)|(TX)|(UT)|(VT)|(VI)|(VA)|(WA)|(WV)|(WI)|(WY))#)
length: 2 to 2
-------------------- Examples --------------------
ex(0):  TN  NJ  VT  MP  MA  MD  TN  IA  NY  WA  UT  RI  ME  WV  RI  CT  IA  FM
ex(1):  AZ  AL  CO  RI  SC  NH  MS  IL  NV  MS  MH  VA  FL  IL  KY  ME  IL  FL
ex(2):  DE  MA  AK  IA  AK  MP  PR  CA  MD  CT  SD  WI  NE  ID  CT  MP  MS  DE
ex(3):  NH  NE  IA  WV  OH  WY  NV  SC  IN  ME  IL  LA  PR  MA  ND  IA  CO  PW
ex(5):  NC  LA  IA  PW  MA  VI  ME  VI  HI  VA  FM  AK  MD  OH  NC  RI  PA  ME
ex(8):  TX  SC  PA  NH  GU  CO  NH  NH  NE  IA  IA  CA  MS  UT  IA  AS  CT  AL
---------------- Examples from DFA ---------------
s1:  AZ

         

         #A: Jason N. Gaylord
         #D: It is the exact phone number regular expression for '(###) ###-####'.
Written by Jason Gaylord.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=397
expr 211: ^([\(]{1}[0-9]{3}[\)]{1}[ ]{1}[0-9]{3}[\-]{1}[0-9]{4})$
tree:   ((((((([0-9]{3}))) )[0-9]{3})-)[0-9]{4})
augmnt: (((((((((([0-9][0-9])[0-9])))) )(([0-9][0-9])[0-9]))-)((([0-9][0-9])[0-9])[0-9]))#)
length: 14 to 14
-------------------- Examples --------------------
ex(0):  (436) 778-8798  (610) 586-1620  (278) 830-9474  (897) 270-4290
ex(1):  (647) 943-4821  (326) 620-8890  (119) 099-4226  (939) 037-8873
ex(2):  (979) 034-1400  (803) 084-4103  (685) 628-9327  (981) 091-6885
ex(3):  (185) 883-0930  (066) 707-9080  (743) 393-7536  (488) 440-4659
ex(5):  (381) 378-4656  (592) 069-0116  (151) 867-8910  (516) 199-7724
ex(8):  (423) 905-1073  (617) 866-9926  (368) 216-7952  (527) 194-9812
---------------- Examples from DFA ---------------
s1:  (667) 760-7011

         

         #D: Matches positive whole numbers from 0-999
         #U: http://regexlib.com/REDetails.aspx?regexp_id=399
expr 212: ^\d(\d)?(\d)?$
tree:   (([0-9][0-9]?)[0-9]?)
augmnt: ((([0-9][0-9]?)[0-9]?)#)
length: 1 to 3
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  18  5  3  94  67  8  7  40  7  47  89  016  489  43  82  3  2  2  80
ex(2):  19  6  2  994  07  83  506  90  25  07  97  31  4  7  30  8  407  62  4
ex(3):  79  1  01  6  58  0  08  82  483  0  3  900  6  209  9  04  389  35  34
ex(5):  4  7  59  42  03  388  37  47  0  5  52  0  901  65  19  63  905  1
ex(8):  72  8  89  37  66  42  105  13  37  48  692  66  89  17  925  26  149
---------------- Examples from DFA ---------------
s1:  7
s3:  79
s2:  796

         

         #A: Michiel Lankamp
         #D: Used for dutch postalcodes; no leading zero. 4 numbers and 2 letters.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=401
ERROR:   ^[1-9]{1}[0-9]{3}\s{0,1}?[a-zA-Z]{2}$
    rx: prefer-fewer '?' unimplemented: in "^[1-9]{1}[0-9]{3}\s{0,1}?[a-zA-Z]{2}$"

         

         #A: Rod Early
         #D: This validates Length times Width times Height measurements, which consists of 3 whole or decimal numbers separated by an x.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=402
expr 213: ^\s*(((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*) )\s*[xX]\s*){2}((\d*\.?\d*[0-9]+\d*)|([0-9]+\d*\.\d*))\s*$
tree:   ((([\t-\r ]*(((((((([0-9]*.?)[0-9]*)[0-9]+)[0-9]*)|(((([0-9]+[0-9]*).)[0-9]*) ))[\t-\r ]*)[Xx])[\t-\r ]*){2})((((([0-9]*.?)[0-9]*)[0-9]+)[0-9]*)|((([0-9]+[0-9]*).)[0-9]*)))[\t-\r ]*)
augmnt: (((([\t-\r ]*((((((((([0-9]*.?)[0-9]*)[0-9]+)[0-9]*)|(((([0-9]+[0-9]*).)[0-9]*) ))[\t-\r ]*)[Xx])[\t-\r ]*)(((((((([0-9]*.?)[0-9]*)[0-9]+)[0-9]*)|(((([0-9]+[0-9]*).)[0-9]*) ))[\t-\r ]*)[Xx])[\t-\r ]*)))((((([0-9]*.?)[0-9]*)[0-9]+)[0-9]*)|((([0-9]+[0-9]*).)[0-9]*)))[\t-\r ]*)#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  4X6. X7  8. x4x0  6. x8. x0  4. x7. x8  2X4. X8.  9. X4X9.  3. x3X0
ex(1):   1.6 x39.  X 7.   .0 x 41.  X0.   7.2 X 29. x 5   82x83.  x 0.
ex(2):    .31938  x6092  x 2.19    .510  x2493  x 32.550736 
ex(3):     0.67   X 242.73   x56.868099      43.7242 x429.833 x 7839926
ex(5):       51.614174313824    x4.9435  X   8.715     
ex(8):    295817812689973599    X     3.9629       X       78997384508.      
---------------- Examples from DFA ---------------
s1:  8x6x4
s8:  8x6x4.
s13:  8x6x4 

         

         #A: andrew stone
         #D: Simple expression for matching all commas and all whitespace characters:  ASCII (13,10,44)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=403
expr 214: [\\s+,]
tree:   [+,\s]
augmnt: ([+,\s]#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  \\  \\  \\  ,  +  \\  \\  ,  s  ,  +  +  ,  ,  \\  s  +  \\  +  ,  ,
ex(1):  \\  \\  s  s  ,  s  \\  \\  \\  \\  ,  \\  +  ,  \\  ,  ,  s  s  s  ,
ex(2):  ,  ,  s  \\  +  +  s  \\  +  ,  s  \\  \\  \\  s  +  s  ,  ,  s  +  ,
ex(3):  ,  +  ,  ,  ,  ,  +  +  ,  s  s  \\  +  ,  \\  ,  \\  +  s  \\  +  \\
ex(5):  \\  ,  ,  \\  s  ,  \\  \\  s  ,  s  s  \\  +  \\  s  ,  s  s  \\  s  s
ex(8):  +  \\  s  \\  \\  s  ,  s  s  ,  ,  +  ,  ,  \\  ,  ,  s  ,  ,  ,  ,  ,
---------------- Examples from DFA ---------------
s1:  \\

         

         #A: Michael Ash
         #D: This RE validate Dates in the MMM dd, yyyy format from Jan 1, 1600 to Dec 31, 9999. The format is as follows: The name or 3 letter abbreivation, without a period, of the month, then a space then the day value then a comma then a space finally the year. The correct number of day are validated for each month include leap years. The name of month is case sensitive.
         #T: MMM dd, yyyy Date
         #U: http://regexlib.com/REDetails.aspx?regexp_id=404
ERROR:   ^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\ ((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\,\ ((1[6-9]|[2-9]\d)\d{2}))
    rx: '(?...' unimplemented: in "^(?:(((Jan(uary)?|Ma(r(ch)?|y)|Jul(y)?|Aug(ust)?|Oct(ober)?|Dec(ember)?)\ 31)|((Jan(uary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ (0?[1-9]|([12]\d)|30))|(Feb(ruary)?\ (0?[1-9]|1\d|2[0-8]|(29(?=,\ ((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))))\,\ ((1[6-9]|[2-9]\d)\d{2}))"

         

         #A: Michael Ash
         #D: This RE validates dates in the dd MMM yyyy format. Spaces separate the values.
         #T: dd MMM yyyy Date
         #U: http://regexlib.com/REDetails.aspx?regexp_id=405
ERROR:   ^((31(?!\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$
    rx: '(?...' unimplemented: in "^((31(?!\ (Feb(ruary)?|Apr(il)?|June?|(Sep(?=\b|t)t?|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sep(?=\b|t)t?|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$"

         

         #A: Michael Ash
         #D: This RE validate the full name of the months.
         #T: Months
         #U: http://regexlib.com/REDetails.aspx?regexp_id=406
expr 215: ^(?:J(anuary|u(ne|ly))|February|Ma(rch|y)|A(pril|ugust)|(((Sept|Nov|Dec)em)|Octo)ber)$
tree:   ((J((((((an)u)a)r)y)|(u((ne)|(ly)))))|(((((((Fe)b)r)u)a)r)y)|((Ma)(((rc)h)|y))|(A((((pr)i)l)|((((ug)u)s)t)))|((((((((((Se)p)t)|((No)v)|((De)c))e)m)|(((Oc)t)o))b)e)r))
augmnt: (((J((((((an)u)a)r)y)|(u((ne)|(ly)))))|(((((((Fe)b)r)u)a)r)y)|((Ma)(((rc)h)|y))|(A((((pr)i)l)|((((ug)u)s)t)))|((((((((((Se)p)t)|((No)v)|((De)c))e)m)|(((Oc)t)o))b)e)r))#)
length: 3 to 9
-------------------- Examples --------------------
ex(0):  November  March  June  February  April  December  November  August
ex(1):  December  March  July  October  August  August  February  July  January
ex(2):  February  March  August  May  February  March  January  April  January
ex(3):  August  August  November  April  April  February  January  February
ex(5):  August  February  March  July  November  January  October  February
ex(8):  May  October  February  January  February  December  March  March
---------------- Examples from DFA ---------------
s1:  May

         

         #A: Dany Lauener
         #D: dd/MM/yyyy with leap years 100% integrated
Valid years : from 1600 to 9999
As usual, many tests have been made.
I think this one should be fine.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=409
expr 216: ^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/((1[6-9]|[2-9]\d)\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/((1[6-9]|[2-9]\d)\d{2}))|(29\/02\/((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))))$
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(1[02])))/)(((1[6-9])|([2-9][0-9]))[0-9]{2}))|((((((0[1-9])|([12][0-9])|(30))/)((0[13-9])|(1[012])))/)(((1[6-9])|([2-9][0-9]))[0-9]{2}))|(((((((0[1-9])|(1[0-9])|(2[0-8]))/)0)2)/)(((1[6-9])|([2-9][0-9]))[0-9]{2}))|((((((29)/)0)2)/)((((1[6-9])|([2-9][0-9]))((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0))))
augmnt: ((((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(1[02])))/)(((1[6-9])|([2-9][0-9]))([0-9][0-9])))|((((((0[1-9])|([12][0-9])|(30))/)((0[13-9])|(1[012])))/)(((1[6-9])|([2-9][0-9]))([0-9][0-9])))|(((((((0[1-9])|(1[0-9])|(2[0-8]))/)0)2)/)(((1[6-9])|([2-9][0-9]))([0-9][0-9])))|((((((29)/)0)2)/)((((1[6-9])|([2-9][0-9]))((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0))))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/1679  03/07/1820  29/02/5600  31/07/1907  23/02/9091  29/02/5404
ex(1):  29/04/1668  29/02/1600  29/02/1940  23/02/1940  10/02/1841  06/10/1793
ex(2):  29/02/6252  20/02/1809  09/06/1990  07/10/5675  29/02/1628  14/07/4318
ex(3):  19/02/1701  01/11/1989  25/07/7477  05/02/3772  21/02/5055  09/01/4669
ex(5):  29/02/1600  29/02/9200  30/09/1960  31/07/1750  07/08/9986  31/03/1722
ex(8):  26/02/9833  09/12/1619  30/05/1643  26/03/1636  16/02/1847  05/02/1824
---------------- Examples from DFA ---------------
s1:  04/06/3411

         

         #A: Paul Ashton
         #D: validate a number 5 digits and 2 decimal places allowing zero
         #U: http://regexlib.com/REDetails.aspx?regexp_id=410
expr 217: ^\d{1,5}(\.\d{1,2})?$
tree:   ([0-9]{1,5}(.[0-9]{1,2})?)
augmnt: (((((([0-9][0-9]?)[0-9]?)[0-9]?)[0-9]?)(.([0-9][0-9]?))?)#)
length: 1 to 8
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  628.80  044.8  20.7  67  3016.34  342.6  0  8019.96  4.94  07.50  77
ex(2):  31  720  407  82  7398.2  90.3  08  828.0  823.6  8090  043.3  734
ex(3):  92  5618.14  38.09  2.01  6518  7815.0  197  8.37  26  395.73  678
ex(5):  2675.26  099.89  677.0  64.0  71.6  7552  6678  89  43  43024.1  63
ex(8):  3367.13  9  18.16  664  36  630.50  30  29.66  21064.1  318  33
---------------- Examples from DFA ---------------
s1:  7
s6:  77
s5:  774
s2:  7.2
s4:  7747
s7:  7.24
s3:  77473

         

         #A: Paul Ashton
         #D: validates  to 5 digits and 2 decimal places but not allowing zero
         #U: http://regexlib.com/REDetails.aspx?regexp_id=411
ERROR:   (?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,2})?$
    rx: '(?...' unimplemented: in "(?!^0*$)(?!^0*\.0*$)^\d{1,5}(\.\d{1,2})?$"

         

         #A: Brenden Salta
         #D: A general string validation to insure that NO malicious code or specified characters are passed through user input.  This will allow you to input any characters except those specified.  The expression above does not allow user input of <>`~!/@\#}$%:;)(_^{&*=|'+. Input as many invalid characters you wish to deny.  This really works!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=412
expr 218: ^[^<>`~!/@\#}$%:;)(_^{&*=|'+]+$
tree:   []\x01- ",.0-9?A-\a-z\u007f-]+
augmnt: ([]\x01- ",.0-9?A-\a-z\u007f-]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  V  h  .  1  4  m  v  D  F  K  e  G  T  Y  0  p  S  \\  M  a  p  D  l  X
ex(1):  a  \\  ]  s  h  H  k  t  8  s  e  l  N  H  [  D  p  1  ,  1     \"  u
ex(2):  V  ,M  Or  9Q  zl  ]4  f  kf  7  h  5  ,  b  w  0[  tY  KL  O  d  kl  R
ex(3):  w  k  7  m  XnL  T  NtG  sO\\  H09  R]  y  t   2H  s  rB  QFY  ?  7
ex(5):  nz  z-YQ  \"05  xQZW  ]mc.  15vK  awCw  Kjv,  j  Q  Zyn  DL ?  F9J
ex(8):  PS1FpYol  BVtaYYp  eqMpQsJG  N\"lp  M  ?trS4  8l  2i.f  K  \"tOh3b  ,
---------------- Examples from DFA ---------------
s1:  J

         

         #A: Jeff Gabriel
         #D: More permissive than others on the site, this one allows you to let a user enter US phone numbers in the way they most commonly use, without letting them enter non-valid combinations.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=413
ERROR:   ^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$
    rx: Embedded '^' unimplemented: in "^([\(]{1}[0-9]{3}[\)]{1}[\.| |\-]{0,1}|^[0-9]{3}[\.|\-| ]?)?[0-9]{3}(\.|\-| )?[0-9]{4}$"

         

         #A: Craig Pearson
         #D: Matches a comma-seperated list of year(s).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=414
expr 219: ^([1-9]{1}[0-9]{3}[,]?)*([1-9]{1}[0-9]{3})$
tree:   ((([1-9][0-9]{3}),?)*([1-9][0-9]{3}))
augmnt: (((([1-9](([0-9][0-9])[0-9])),?)*([1-9](([0-9][0-9])[0-9])))#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  1436  9677  1887  3826  3004  6860  3620  8278  6483  3094  2468  5780
ex(1):  2907  6407  64399136  1839  4348  8232  1062  2889  4119  60998226
ex(2):  33789735,8697  12551497,8034  5400,1329  8464,4768  34623932,7814
ex(3):  3022882842419308  7209  15063270  59084743,1936,9634  5564  5746
ex(5):  87801560,96002901,5151  5867,7109,6021,577232286937  76964232,65517336
ex(8):  26369921879555271194,4128  9646,37967666,47609011
---------------- Examples from DFA ---------------
s1:  8214

         

         #A: luca milan
         #D: Match the content of any regular tag/s 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=415
ERROR:   <(?<tag>.*).*>(?<text>.*)</\k<tag>>
    rx: '(?...' unimplemented: in "<(?<tag>.*).*>(?<text>.*)</\k<tag>>"

         

         #A: Scott Long
         #D: I wrote this regular expression because a project I was working on required a stricter validator on social security numbers. There are actually gov't standards on what is a valid social: The first 3 digits can't be > 779, The first 3 digits can't be 000, The second 2 digits can't be 00, and the last 4 digits can't be 0000. This regex handles all these cases and checks formatting for numbering and dashes (###-##-####)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=418
ERROR:   ^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$))))
    rx: '(?...' unimplemented: in "^(?=((0[1-9]0)|([1-7][1-7]\d)|(00[1-9])|(0[1-9][1-9]))-(?=(([1-9]0)|(0[1-9])|([1-9][1-9]))-(?=((\d{3}[1-9])$|([1-9]\d{3})$|(\d[1-9]\d{2})$|(\d{2}[1-9]\d)$))))"

         

         #A: Ashish Sheth
         #D: This expression validates for valid C# or C++ identifier
         #U: http://regexlib.com/REDetails.aspx?regexp_id=419
expr 220: ^[a-zA-Z_]{1}[a-zA-Z0-9_]+$
tree:   ([A-Z_a-z][0-9A-Z_a-z]+)
augmnt: (([A-Z_a-z][0-9A-Z_a-z]+)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  mW  PO  bV  Do  SB  Dk  UK  ol  qu  BB  WN  jT  em  Ki  CD  Ae  a9  CU
ex(1):  UC  LB  yx  Fb  uH  UC  _K  sh  kN  Xx  mC  PC  o0  Rr  ux  yt  bR  VY
ex(2):  Jo  OJ  Uq  So  DO  VkY  muO  c1  K39  X5  Ye  gPU  ucW  RZ  avr  Ik
ex(3):  Ou  CvvU  Ut  Se9Y  lo  Py5_  sd8n  hZ2a  zwf  af  Tme  eA  T5nA  _GF
ex(5):  wBD  Q3BUD  bNvDO  yniX_  NIZlxf  rQoCM  fV  QpVLh  qgsWcD  _7  wN
ex(8):  j0RnUH  McXS3  eXlHXr  Hd6qhY  tY  Zyu6I  FhwbZlk4Z  b98s  cz  TlxLM
---------------- Examples from DFA ---------------
s1:  MO

         

         #A: Josh Crosby
         #D: This will match single numbers,the first block [1346] checks for single digits of 1, 3, 4 or 6, could easily by [1-5] as well. The second block [10] checks for 10 only.
This matches inclusively.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=420
ERROR:   ^[1]$|^[3]$|^[4]$|^[6]$|^[1]0$
    rx: Embedded '$' unimplemented: in "^[1]$|^[3]$|^[4]$|^[6]$|^[1]0$"

         

         #A: Martin Schwedes
         #D: this is a very little regex for use within a content management software.  links within textfields has not to be written in html.  the editor of the cms is instructed to use it like this:  1. mention spaces in front and behind the url  2. start url with http://, mailto://, ftp:// ...  3. use optional linktext within #linktext# (separated with single space)  4. if there is no linktext the url/email will show up as linktext  5. avoid url with spaces in filename (use %20 urldecode)   replace pattern (space in front):   <a href="\\1\\3\\4" target="_blank">\\3\\6</a>
         #U: http://regexlib.com/REDetails.aspx?regexp_id=422
ERROR:    (mailto\:|(news|(ht|f)tp(s?))\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) 
    rx: [:class:] unimplemented: in " (mailto\:|(news|(ht|f)tp(s?))\://)(([^[:space:]]+)|([^[:space:]]+)( #([^#]+)#)?) "

         

         #A: T H
         #U: http://regexlib.com/REDetails.aspx?regexp_id=424
expr 221: ^[-]?([1-9]{1}[0-9]{0,}(\.[0-9]{0,2})?|0(\.[0-9]{0,2})?|\.[0-9]{1,2})$
tree:   (-?((([1-9][0-9]*)(.[0-9]{0,2})?)|(0(.[0-9]{0,2})?)|(.[0-9]{1,2})))
augmnt: ((-?((([1-9][0-9]*)(.([0-9]?[0-9]?))?)|(0(.([0-9]?[0-9]?))?)|(.([0-9][0-9]?))))#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  0  .7  .8  3  .2  3  .4  .6  3  5  8  0  .4  .0  0  2  4  .7  4  7
ex(1):  0.  .8  -.16  29  -7.2  9  0.1  -.96  .6  -4  -6.7  -3  2  .97  11  0
ex(2):  61  -.5  .89  -.9  -0.  138  .9  .5  0.  893  -0  899  4  -13  -.3  0
ex(3):  -0  -0.1  0.7  -965  .2  0.1  0.9  0  -0.  .9  -4  0.72  .4  0.5  -96.8
ex(5):  .6  -.67  -0.6  -0.2  -.67  -.0  94  -.7  -0.  -0.2  0  -180  -.4  .2
ex(8):  -4  -.83  879833443.67  0.9  .68  .46  -7.4  .6  -.96  -.87  608
---------------- Examples from DFA ---------------
s1:  0
s4:  9
s7:  0.
s3:  .1
s6:  .13

         

         #A: Roberto Misticoni
         #D: This regular expression match any valid file path. It checks local drives and network path. The file extension is required.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=425
expr 222: ^([a-zA-Z]\:|\\\\[^\/\\:*?"<>|]+\\[^\/\\:*?"<>|]+)(\\[^\/\\:*?"<>|]+)+(\.[^\/\\:*?"<>|]+)$
tree:   (((([A-Za-z]:)|((((\\)[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+)\)[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+))(\[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+)+)(.[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+))
augmnt: ((((([A-Za-z]:)|((((\\)[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+)\)[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+))(\[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+)+)(.[]\x01-!#-)+-.0-9;=@-[^-{}~\u007f]+))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  W:\\9.;  \\\\x\\[\\1.X  q:\\2.%  \\\\z\\T\\d..  a:\\).G  U:\\7.O
ex(1):  o:\\}.7  \\\\I\\u\\P.B  V:\\2.g  T:\\O.g  Q:\\U.p  Z:\\B.M
ex(2):  \\\\_\\Z\\[u.y  \\\\M\\ \\eN.(  C:\\PA.uK  i:\\;]\\@`.U  \\\\1\\xq\\y.D
ex(3):  O:\\t]\\mi-.%$  \\\\+b7\\a\\F\\;\\P.B  \\\\Z{_\\2f]\\@..)j~
ex(5):  \\\\G\\V+\\g\\JS\\td\\(sQ\\3.IC  H:\\hY.\\1(j\\W;^5$\\`;U^y\\C.^
ex(8):  b:\\w;gYGpk.!wo  T:\\CI0,)o.k;s  \\\\B@)5\\0}^.\\z.eenG2Y
---------------- Examples from DFA ---------------
s1:  o:\\l.&

         

         #A: David Walker
         #D: A regex that attempts to accurately parse the elements from a proper name where the format is in <<First, Last>> order or some permutation of that order.  Critiques and suggestions for improvement are welcome. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=426
ERROR:   (?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w*|[A-Z]?\.?)\s?(?<LastName>[A-Z]\w*\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)
    rx: '(?...' unimplemented: in "(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w*|[A-Z]?\.?)\s?(?<LastName>[A-Z]\w*\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)"

         

         #A: David Walker
         #D: Fine-tuned the previous version to handle surnames with embedded caps like McCoy and DeCarlo.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=427
ERROR:   (?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>[A-Z]?\w{0,3}[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)
    rx: '(?...' unimplemented: in "(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>[A-Z]?\w{0,3}[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)"

         

         #A: David Walker
         #D: Getting closer now...  this one has the functionality of the previous two and matches on names like "Jill St. John" as well.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=428
ERROR:   (?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>(?:[A-Z]\w{1,3}|St\.\s)?[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)
    rx: '(?...' unimplemented: in "(?<FirstName>[A-Z]\.?\w*\-?[A-Z]?\w*)\s?(?<MiddleName>[A-Z]\w+|[A-Z]?\.?)\s(?<LastName>(?:[A-Z]\w{1,3}|St\.\s)?[A-Z]\w+\-?[A-Z]?\w*)(?:,\s|)(?<Suffix>Jr\.|Sr\.|IV|III|II|)"

         

         #A: David Walker
         #D: Regex parses elements from a proper name in <<Last, First>> order and permutations.  Comments and critiques are welcome.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=429
ERROR:   (?<LastName>[A-Z]\w+\-?[A-Z]?\w*),\s(?<Suffix>Jr\.|Sr\.|IV|III|II)?,?\s?(?<FirstName>[A-Z]\w*\-?[A-Z]?\w*\.?)\s?(?<MiddleName>[A-Z]?\w*\.?)
    rx: '(?...' unimplemented: in "(?<LastName>[A-Z]\w+\-?[A-Z]?\w*),\s(?<Suffix>Jr\.|Sr\.|IV|III|II)?,?\s?(?<FirstName>[A-Z]\w*\-?[A-Z]?\w*\.?)\s?(?<MiddleName>[A-Z]?\w*\.?)"

         

         #A: Logan Tran
         #D: HTML Pattern Matching
PLEASE HELP
/<[^>]*>/ig
The above pattern is only successful when html tag are simple (they don't include any javascript).  This mean that the pattern will fail if something like this is within the tag <input type=button value=test onclick='if(n.value>5)do_this();'>.  It will not match the entire open n close sign.
How do you write a pattern that will pass all these tag so that the pattern will match from the open to the close sign and not when it just see a > within a '' or "".
Any help would be greatly appreciate.  Thanks a whole lot.
Logan
         #U: http://regexlib.com/REDetails.aspx?regexp_id=431
expr 223: <[^>]*>
tree:   ((<[\x01-=?-\u007f]*)>)
augmnt: (((<[\x01-=?-\u007f]*)>)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>
ex(1):  <>  <>  <7>  <u>  <>  <`>  <>  <>  <C>  <:>  <>  <>  <>  <T>  <>  <>
ex(2):  <>  <{>  <M`>  <,>  <>  <>  <_;>  <'2>  <>  <>  <>  <{>  <|e>  <(G>
ex(3):  <2@>  <>  <{\\>  <>  <>  <U1>  <>  <x>  <>  <WDn>  <>  <h'>  <>  <\\6>
ex(5):  <>  <$U>  <+b>  <a'~>  <W/;t>  <>  <]>  <{_Gx2>  <>  <.>  <j>  <1p/*U>
ex(8):  <^[d\"7 ~5>  <9>  <*M+L8&>  <SW??>  <;(>  <%3%>  <|X.~`ThY>  <1(jH>
---------------- Examples from DFA ---------------
s1:  <>

         

         #A: Giorgio Spugnesi
         #D: Match italian telephone number with prefix followed by "/", "-" or blank and number. Usefull with numeric keybord!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=432
expr 224: ^([0-9]*\-?\ ?\/?[0-9]*)$
tree:   (((([0-9]*-?) ?)/?)[0-9]*)
augmnt: ((((([0-9]*-?) ?)/?)[0-9]*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):   /7  /     8/  - /  0 /  -  00  47   1  6 /  32  2    0 /0  9   /  -
ex(2):  22-97  -/1  00-/08  /  6 28  93 /42  -85  3898  8 8  30/93  -27  7-  - 
ex(3):  56465  9/  53 838  7 46  605-  99 15  198 1  - 19  4-  937  26932
ex(5):  7   9-68792  617-/7601  41981/46  7-   /  60470-260  3- /6256  7-09
ex(8):  35072143 8734  297- 333365  838-   06188984- 296146  36/69365047
---------------- Examples from DFA ---------------
s0:  
s1:   
s2:  -
s3:  /

         

         #A: Michael Ash
         #D: This RE will match XML tag elements.  All elements must be closed. Won't match nested tags
         #T: XML Tag
         #U: http://regexlib.com/REDetails.aspx?regexp_id=433
ERROR:   <(\w+)(\s(\w*=".*?")?)*((/>)|((/*?)>.*?</\1>))
    rx: prefer-fewer '?' unimplemented: in "<(\w+)(\s(\w*=".*?")?)*((/>)|((/*?)>.*?</\1>))"

         

         #A: Darren Neimke
         #D: Simple Postcode - this is the first test of the new WebService :-)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=436
expr 225: (\d{4,6})
tree:   [0-9]{4,6}
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9]?)[0-9]?)#)
length: 4 to 6
-------------------- Examples --------------------
ex(0):  4436  5677  8887  9826  1004  5860  1620  1278  5483  0094  7468  9780
ex(1):  4290  7464  0778  4390  9136  4783  9433  4821  2326  2062  0888  9001
ex(2):  0996  4226  8939  9403  7888  7357  0769  7022  5560  4979  1703  4714
ex(3):  0329  0846  4103  7685  2462  8793  2799  8142  0910  6885  2380  2209
ex(5):  24185  08832  9305  6682  07990  0074  38393  7536  48856  4074  5990
ex(8):  3631  9838  743780  6560  926006  90116  15119  6738  1095  602199
---------------- Examples from DFA ---------------
s1:  2284
s6:  22845
s5:  228459

         

         #A: Darren Neimke
         #U: http://regexlib.com/REDetails.aspx?regexp_id=445
ERROR:   (?s)/\*.*\*/
    rx: '(?...' unimplemented: in "(?s)/\*.*\*/"

         

         #A: Ed Stafford
         #D: My first Expression. This will match US postal codes (zip codes) using simple 5 digit format with optional 4 digit extention seperated by a space or hyphen. Will not accept letters.
example: 12345 or 12345-1234 or 12345 1234.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=446
expr 226: ^[0-9]{5}([\s-]{1}[0-9]{4})?$
tree:   ([0-9]{5}([\t-\r -][0-9]{4})?)
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9])([\t-\r -]((([0-9][0-9])[0-9])[0-9]))?)#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  77843-1364  78394-8212  32620  20888 1199  10996  22689 4037
ex(2):  02255  04979-3471  40078  32908  64103 5246  28793  79981  20910  88523
ex(3):  28652  18530  83209 0668  27079-0074  33839-5363  48856  40746-0432
ex(5):  17437  04656  59260  69901-1511  98673  91095 2199  47724  22845-7269
ex(8):  19055 3361  74786  99926  36879  16179 5276  01941 2879  64677 6006
---------------- Examples from DFA ---------------
s1:  12492
s6:  12492-7350

         

         #A: Nitesh Waghela
         #U: http://regexlib.com/REDetails.aspx?regexp_id=454
expr 227: ^[a-z]+[0-9]*[a-z]+$
tree:   (([a-z]+[0-9]*)[a-z]+)
augmnt: ((([a-z]+[0-9]*)[a-z]+)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  cu  by  hi  zz  ka  kb  le  ea  ns  oc  pm  ig  nc  ky  rw  xe  vw  sh
ex(1):  pz  ma  x8u  o0c  az  e4u  ep  lg  p0r  t6u  pl  nf  jo  s2f  mi  ue
ex(2):  b0dh  tssu  s8lx  usqy  pxo  qz02n  ko97tn  ffa  q8j  l8i  fro  b46g
ex(3):  dsj  a88c  wkk09ikk  akj  cr  ir0aw  yej79o  yk433x  ns536yya  cipc
ex(5):  o363uz  zedt3780axucl  mgwsg9h  yy511ieffa  pghrp02tb  ddgqs2845lxpuc
ex(8):  rlkzrv174786vln  ggx8ruhmnxdx  tpuzgxg  tyxoedty67fzfiewqa
---------------- Examples from DFA ---------------
s1:  we
s3:  w0n

         

         #A: Joe Gass
         #D: Credit card validator
Works for switch card numbers too
Switch card bit is (\d{6}[-\s]?\d{12})
Credit card bit is (\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})
I use this as a client side test before running a more comprehensive server side check.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=455
expr 228: (\d{6}[-\s]?\d{12})|(\d{4}[-\s]?\d{4}[-\s]?\d{4}[-\s]?\d{4})
tree:   ((([0-9]{6}[\t-\r -]?)[0-9]{12})|(((((([0-9]{4}[\t-\r -]?)[0-9]{4})[\t-\r -]?)[0-9]{4})[\t-\r -]?)[0-9]{4}))
augmnt: ((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[\t-\r -]?)((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|((((((((([0-9][0-9])[0-9])[0-9])[\t-\r -]?)((([0-9][0-9])[0-9])[0-9]))[\t-\r -]?)((([0-9][0-9])[0-9])[0-9]))[\t-\r -]?)((([0-9][0-9])[0-9])[0-9])))#)
length: 16 to 19
-------------------- Examples --------------------
ex(0):  436567788879826100  586016201278548300  4746897802708429
ex(1):  394334212326206208  890011-099642268939  40378873 76972255
ex(2):  846410-852462879327  981409108852 2209  286524-308832093050
ex(3):  5363885640745990  320053318983817437  046560 600699011621
ex(5):  72482845-72694423  190551733617478669  9266 8792 7952-7601
ex(8):  42764701 9260-0359  462563-680099484827  2243 7214-4608-2297
---------------- Examples from DFA ---------------
s1:  0260688164696050
s17:  026068816469 4737

         

         #A: Steven Smith
         #D: This is a regex I wrote to capture requests to AspAlliance.com with an article id as the only thing after the domain.  So http://aspalliance.com/123 would go to article number 123.  It maps the URL to the actual aspx file that displays the article based on the ID.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=456
expr 229: \.com/(\d+)$
tree:   (((((.c)o)m)/)[0-9]+)
augmnt: ((((((.c)o)m)/)[0-9]+)#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  .com/6  .com/7  .com/0  .com/0  .com/2  .com/3  .com/4  .com/0  .com/2
ex(1):  .com/3  .com/6  .com/4  .com/1  .com/0  .com/8  .com/9  .com/6  .com/9
ex(2):  .com/57  .com/2  .com/9  .com/47  .com/0  .com/6  .com/8  .com/7
ex(3):  .com/68  .com/220  .com/2  .com/88  .com/5  .com/0  .com/0  .com/9
ex(5):  .com/40746  .com/2005  .com/83817  .com/65605  .com/99  .com/51
ex(8):  .com/1994772  .com/5  .com/9644232  .com/07  .com/7866999  .com/79216
---------------- Examples from DFA ---------------
s1:  .com/8

         

         #A: Darren Neimke
         #D: Matches a string to ensure that it does not end with .aspx; sure, you'd probably use string handling to do something this simple but, in the real world you'd whack a regex which validates a valid url to the front of this.
The pattern was created by Wayne King; you can read about it here:
http://scottwater.com/blog/posts/10204.aspx 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=457
ERROR:   .*?$(?<!\.aspx)
    rx: prefer-fewer '?' unimplemented: in ".*?$(?<!\.aspx)"

         

         #A: Dean Dal Bozzo
         #D: This regular expressions matches phone numbers with area codes and optional US country code and optional phone extension.  User have so many ways of entering phone numbers into input fields.  This allows for some of the ones I've encountered.  Feel free to contact me if you find ones that do not match.
         #T: Phone Numbers
         #U: http://regexlib.com/REDetails.aspx?regexp_id=458
expr 230: ^(1\s*[-\/\.]?)?(\((\d{3})\)|(\d{3}))\s*[-\/\.]?\s*(\d{3})\s*[-\/\.]?\s*(\d{4})\s*(([xX]|[eE][xX][tT])\.?\s*(\d+))*$
tree:   (((((((((((((1[\t-\r ]*)[./-]?)?(((([0-9]{3})))|[0-9]{3}))[\t-\r ]*)[./-]?)[\t-\r ]*)[0-9]{3})[\t-\r ]*)[./-]?)[\t-\r ]*)[0-9]{4})[\t-\r ]*)(((([Xx]|(([Ee][Xx])[Tt])).?)[\t-\r ]*)[0-9]+)*)
augmnt: ((((((((((((((1[\t-\r ]*)[./-]?)?(((((([0-9][0-9])[0-9]))))|(([0-9][0-9])[0-9])))[\t-\r ]*)[./-]?)[\t-\r ]*)(([0-9][0-9])[0-9]))[\t-\r ]*)[./-]?)[\t-\r ]*)((([0-9][0-9])[0-9])[0-9]))[\t-\r ]*)(((([Xx]|(([Ee][Xx])[Tt])).?)[\t-\r ]*)[0-9]+)*)#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  (365)7788879  (610)4586016  (127)5483009  (468)7802708  (907)6407784
ex(1):  1 (123)6209001 eXT8  1 (788) .769 5560exT.0  803.464 .8524
ex(2):  (982)   5302093X  99  (074)936/3488   (465)   053   3817 x  92x 1
ex(3):  (284)     442    1073 Ext.  687exT.   0Ext  467
ex(5):  637     484     3507x.  342x.   3336EXT.606  1  613961  -6966  
ex(8):  (303)       -      714 3082    x.     740750x       22738x       0217817eXT     465858x.      68499
---------------- Examples from DFA ---------------
s1:  8015114720
s14:  1128162520
s13:  8015114720x1

         

         #A: Bernard Martin-Rabaud
         #D: matches any string  with characters repeated more than twice, sometimes used as fake input
         #U: http://regexlib.com/REDetails.aspx?regexp_id=460
ERROR:   (.)\1{2,}
    rx: \1 (backref) unimplemented: in "(.)\1{2,}"

         

         #A: Darryl Kuhn
         #D: This expression is useful for determining if an address is a PO Box type address. This can be useful in shipping systems as well as other systems that need to  make determinations based on the type of address imputed.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=461
expr 231: ^p(ost)?[ |\.]*o(ffice)?[ |\.]*(box)?[ 0-9]*[^[a-z ]]*
tree:   (((((((((p((os)t)?)[ .|]*)o)((((ff)i)c)e)?)[ .|]*)((bo)x)?)[ 0-9]*)[\x01-\x1f!-Z\-`{-\u007f])]*)
augmnt: ((((((((((p((os)t)?)[ .|]*)o)((((ff)i)c)e)?)[ .|]*)((bo)x)?)[ 0-9]*)[\x01-\x1f!-Z\-`{-\u007f])]*)#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  po8  poV  po^  po)  po4  po9  po=  poH  poC  po{  po#  po#  poW  poS
ex(1):  pofficebox2@]  p|o.}]  poU]  post officebox_]  poffice.5  p|office{
ex(2):  p office||box$]]  p  o5 ]  postoffice590  post office.S]
ex(3):  poffice box 01D]]]  postoffice||(]]]  p.o  |box5=]]]  p .o.box;]
ex(5):  po  4 <]  post.office||||22Q]]]]  pofficebox 8{  post  .o.||||21?]]
ex(8):  p.. |office||)]]]]]]]  p| | ||.|office  | box34278 T]]]
---------------- Examples from DFA ---------------
s1:  po_
s5:  po.
s10:  po5

         

         #A: Vincent Faller
         #D: It can be used to validate Font Sizes.
Thanks to Gideon Engelberth for the shorter version of my original expression.
         #T: Font Sizes
         #U: http://regexlib.com/REDetails.aspx?regexp_id=462
expr 232: ^\d+\x20*([pP][xXtT])?$
tree:   (([0-9]+ *)([Pp][TXtx])?)
augmnt: ((([0-9]+ *)([Pp][TXtx])?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  1pt  8   9pX  7  2   4Px  4PT  3 PT  4 Px  4  1PT  6  8  9  1 PT  6
ex(2):  39  3  8pt  9    56  79   47   7 px  6   76   6 Px  98    10   23  
ex(3):  2Pt  88   305    707     7    9   Pt  856  74  PX  05     83PX  0    59
ex(5):  1       10951  PT  248    PX  96    pX  1pT  74     pT  6879  PT  527
ex(8):  28    PX  006        70112        PX  2         9948482    3    PT
---------------- Examples from DFA ---------------
s1:  2
s3:  2 
s4:  2PX

         

         #A: Michael Ash
         #D: This RE validates the format of an ISBN number
         #T: ISBN-10
         #U: http://regexlib.com/REDetails.aspx?regexp_id=463
ERROR:   ISBN\x20(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$
    rx: '(?...' unimplemented: in "ISBN\x20(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$"

         

         #A: Tanguy Pruvot
         #D: grab all tags attributes...
(1:img)
(2: src="truc")
>
i use it to clean html pages to grab infos...
use a RegEx Replace with "<$1>" to keep only tags codes...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=464
expr 233: <([^\s>]*)(\s[^<]*)>
tree:   (((<[\x01-\b\x0e-\x1f!-=?-\u007f]*)([\t-\r ][\x01-;=-\u007f]*))>)
augmnt: ((((<[\x01-\b\x0e-\x1f!-=?-\u007f]*)([\t-\r ][\x01-;=-\u007f]*))>)#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >  < >
ex(1):  < >  < >  <A >  <5 [>  <Z >  << n>  < >  < >  < >  < {>  <g l>  < >
ex(2):  < '2>  < >  </7 {>  <&^ \\>  <D />  < >  <a {>  <A @`>  <JZ >  < oO>
ex(3):  < \\h>  <uC/ 6>  <j< >  </V >>>  <;v ~e\\>  <PS _xB>  <xLI x2>  < >
ex(5):  < ?xS>  <8) [d\"7 >  <K{z\\/ M+>  <<dQE ??jdq>  <v~g: IC|X.>
ex(8):  <69 &o`;U>  <WtZD!jz SY)wU5>  <|?w1\\ '~c5X>  <.]tJ] \\X~>
---------------- Examples from DFA ---------------
s1:  < >

         

         #A: Tanguy Pruvot
         #D: All tags in first submatche
All attributes in second one...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=465
expr 234: <([^<>\s]*)(\s[^<>]*)?>
tree:   (((<[\x01-\b\x0e-\x1f!-;=?-\u007f]*)([\t-\r ][\x01-;=?-\u007f]*)?)>)
augmnt: ((((<[\x01-\b\x0e-\x1f!-;=?-\u007f]*)([\t-\r ][\x01-;=?-\u007f]*)?)>)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>  <>
ex(1):  < >  <g>  <>  <E >  <X>  <i :>  < >  <>  < >  <>  <>  < B>  <*>  <>
ex(2):  <>  < >  < >  <?>  <^ (G>  <Q_ >  <-I>  <7 (\\>  <E- m1>  <@>  < n>
ex(3):  <nu>  <Q>  <w>  </V I>  <v- \\iW>  <zP>  <Enx Gx2>  <>  <>  <KuR>
ex(5):  <Z~-q>  <>  <WE>  <?!Q>  <fTumD I%3>  <W] `ThY.>  <IM(X ^5$>  <>  <|>
ex(8):  <>  <?w>  <fTOFY uYTf6>  < DQFg>  <@])} YG>  <QOA&s[ .;CI0>  <{Ac\"8B>
---------------- Examples from DFA ---------------
s1:  <>

         

         #A: Eli Robillard
         #D: "Starts with but does not end with."
I needed a pattern to require certain first (and optional middle) names, but to fail for certain last names. So if Bob, John, and Mary are acceptable first names but the White's are always rejected then...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=466
ERROR:   ^((Bob)|(John)|(Mary)).*$(?<!White)
    rx: Embedded '$' unimplemented: in "^((Bob)|(John)|(Mary)).*$(?<!White)"

         

         #A: Shawn Hall
         #D: This pattern returns as much of the first x characters of a string as full words or sentences as a match, where x is currently 20. Change x to adjust the length supported in your database field.
I'm currently using this within a string shortening utility to shrink large text regions to word/sentance-boundary elements and appending an ellipsis as a text continuator.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=470
expr 235: ^([\s\S]){1,20}([\s\.])
tree:   ([\x01-\u007f]{1,20}[\t-\r .])
augmnt: ((((((((((((((((((((([\x01-\u007f][\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\x01-\u007f]?)[\t-\r .])#)
length: 2 to 21
-------------------- Examples --------------------
ex(0):  ~.  I.  ;.  F   [.  +   H.  2   D   z   m.  .   M   )   N.  r   O.  i 
ex(1):  Om[I:PBn   sp{BMt.  P}V;2^qha.  oe\"G0P@u\\;.  @=mLxolOi.  >d6A<cU> 
ex(2):  D)\\1US(Z^\".  /G8{W?d(I.  %I.`h[;^&   UoCksNYUyOq~.  X|ufl~QwL;Y.
ex(3):  B0^AeF.  2>;jm.-1U(<.  X;A`t_<]2   !?lFan;gH   J~,:+%g[^Btn.
ex(5):  |R_+;s S1WV-6.  QZ:Bt}y@'].  @/5Q2<^ks'1   =;9[>=QqEF 
ex(8):  `*IlgR.  xnGa,ykJ+   $_6?8YaQT>L/\\.  fD>kFqeIHg@!=.  oLYVDP1n 
---------------- Examples from DFA ---------------
s1:  g 
s20:  g  
s19:  g   
s18:  g   .
s17:  g   ..
s16:  g   .. 
s15:  g   .. .
s14:  g   .. . 
s13:  g   .. . .
s12:  g   .. . ..
s11:  g   .. . .. 
s10:  g   .. . ..  
s9:  g   .. . ..  .
s8:  g   .. . ..  . 
s7:  g   .. . ..  . .
s6:  g   .. . ..  . ..
s5:  g   .. . ..  . ...
s4:  g   .. . ..  . ... 
s3:  g   .. . ..  . ...  
s22:  g   .. . ..  . ...  .

         

         #A: Michael Ash
         #D: The RE match U.S. state abbreviation used by the U.S. Post Office.
         #T: State Codes
         #U: http://regexlib.com/REDetails.aspx?regexp_id=471
ERROR:   ^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$
    rx: '(?...' unimplemented: in "^(?-i:A[LKSZRAEP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$"

         

         #A: Michael Ash
         #D: captures US street address.
Address format: ##### Street 2ndunit City, ST zip+4
address1 - must have street number and proper case street name. no punctuation or P.O Box #### punctuation manditory for P.O.
address2 - optional secondary unit abbr.  Secondary range required for some units.
City - Proper case city name.
State - State abbreviation.  All caps
zip - zip+4. Can't be all zeroes
Abbreviations for secondary units and States are those used by the US Postal Service.
http://www.usps.com/ncsc/lookups/usps_abbreviations.html
Certain secondary units require a secondary range, see the above link
THis RE isn't unbreakable, Probably will allow some false positives but should work for most addresses.
         #T: U.S. Street Address
         #U: http://regexlib.com/REDetails.aspx?regexp_id=472
ERROR:   ^(?n:(?<address1>(\d{1,5}(\ 1\/[234])?(\x20[A-Z]([a-z])+)+ )|(P\.O\.\ Box\ \d{1,5}))\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\x20\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\.?)\s{1,2})?)(?<city>[A-Z]([a-z])+(\.?)(\x20[A-Z]([a-z])+){0,2})\, \x20(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])\x20(?<zipcode>(?!0{5})\d{5}(-\d {4})?))$
    rx: '(?...' unimplemented: in "^(?n:(?<address1>(\d{1,5}(\ 1\/[234])?(\x20[A-Z]([a-z])+)+ )|(P\.O\.\ Box\ \d{1,5}))\s{1,2}(?i:(?<address2>(((APT|B LDG|DEPT|FL|HNGR|LOT|PIER|RM|S(LIP|PC|T(E|OP))|TRLR|UNIT)\x20\w{1,5})|(BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR)\.?)\s{1,2})?)(?<city>[A-Z]([a-z])+(\.?)(\x20[A-Z]([a-z])+){0,2})\, \x20(?<state>A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADL N]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD] |T[NX]|UT|V[AIT]|W[AIVY])\x20(?<zipcode>(?!0{5})\d{5}(-\d {4})?))$"

         

         #A: Giorgio Spugnesi
         #D: This pattern match italian fiscal code (codice fiscale).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=473
expr 236: ^[A-Za-z]{6}[0-9]{2}[A-Za-z]{1}[0-9]{2}[A-Za-z]{1}[0-9]{3}[A-Za-z]{1}$
tree:   (((((([A-Za-z]{6}[0-9]{2})[A-Za-z])[0-9]{2})[A-Za-z])[0-9]{3})[A-Za-z])
augmnt: (((((((((((([A-Za-z][A-Za-z])[A-Za-z])[A-Za-z])[A-Za-z])[A-Za-z])([0-9][0-9]))[A-Za-z])([0-9][0-9]))[A-Za-z])(([0-9][0-9])[0-9]))[A-Za-z])#)
length: 16 to 16
-------------------- Examples --------------------
ex(0):  mWPKby77G88D982o  dUqYBE60j62w127C  ZBCuFC74y89L802F  QuyUtX46k07Q439o
ex(1):  WTOAIr20S88D001V  brlmEw42G68r399Y  MYcKgB35h07e970i  avmIeP79v70j471v
ex(2):  mdIssm87h32H998D  QaiqGE88l23b220t  GOcOHU41Q53o883m  QbslMW68Y70n990Z
ex(3):  wxRWwH46d99I432y  iBjwdB89j81j437E  AoMKgl92e00S990L  HGqVlJ98x38p109h
ex(5):  vPjnsg96M42g190F  fvADac17a78s699N  YQknWI79U16T795Y  VfUPyw19C19e128b
ex(8):  uYTUqW70Z12o926C  JpTurL92u62l637N  IYiWGv94i48A732W  ezlNGI14x21A608P
---------------- Examples from DFA ---------------
s1:  FveFqN93y26G618G

         

         #A: Alsu Fifty
         #D: Used to verify that the string consists of only A-z, 0 - 9 and underscore. Several words allowed, only one space between them. No spaces up front. Hey, I know it's easy, but it was not in the library! Plus, the test option here is not working well all the time.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=474
expr 237: (\w(\s)?)+
tree:   ([0-9A-Z_a-z][\t-\r ]?)+
augmnt: (([0-9A-Z_a-z][\t-\r ]?)+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  H  W  L  O  q  V  2  o  3  B  _  k  z  c  l  I  u  q  B  Y  N  J  T  d
ex(1):  U   D  e   9  U  c  C   0  K  T  C  K  h  N   e  G   0   6  t   o   3
ex(2):  _J  q  o   _   l O  7  u   B 3  x   dW   J   L   FB  Ov  9 k  9  z   y 
ex(3):  n Z f  fG m  n   nS F  lk   Q3B  mvO  n _ I  l   o  C   b   pL 9  sc 
ex(5):  N   y C  y R Ur   S   ql   hd   Y Y   u z wZ   4 K87z   A zCA   pb   Z 
ex(8):  c kmeV _ m   d 7 0 R o V Is   kzcdkS  3 k JF g I  s   2 J  q MR2 Fu R 
---------------- Examples from DFA ---------------
s1:  Y
s2:  Y 

         

         #A: James Fal
         #D: Updated, changed [\w]* to [\w]+ because pattern should not match Sub (), there would be no function name which would be incorrect.
Will extract function declarations from ASP or also VB I assume. Will even capture declarations that break across new lines or ones that use the underscore(line continuation character) in Microsoft's VB, VBA, ASP, etc. Had to put this together to document some code on a project and didn't see anything like it on the web. I hope it helps out anyone else who has to re-engineer ASP or VB code. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=476
expr 238: ^(Function|Sub)(\s+[\w]+)\([^\(\)]*\)
tree:   ((((((((((((Fu)n)c)t)i)o)n)|((Su)b))([\t-\r ]+[0-9A-Z_a-z]+))()[\x01-'*-\u007f]*)))
augmnt: (((((((((((((Fu)n)c)t)i)o)n)|((Su)b))([\t-\r ]+[0-9A-Z_a-z]+))()[\x01-'*-\u007f]*)))#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  Function B()  Function N()  Function b()  Function K()  Function x()
ex(1):  Sub o()  Function q()  Sub y()  Sub 1(})  Sub 3()  Sub c(4)
ex(2):  Sub  Zk(=)  Function 8(Z)  Sub  f(D)  Function  N(]A)  Sub  2v(b)
ex(3):  Sub   VL(B$)  Sub  tig(U?x)  Function   5()  Sub  X(I)  Sub  Ly(%)
ex(5):  Function   CH(^)  Sub  _mxW(5qBy)  Function  Mgd(6Tl)
ex(8):  Sub       W(k;sCa-*B)  Function       32n(\"o2i)
---------------- Examples from DFA ---------------
s1:  Sub 2()

         

         #A: Roy Osherove
         #D: This pattern matches..
         #U: http://regexlib.com/REDetails.aspx?regexp_id=477
expr 239: regex
tree:   ((((re)g)e)x)
augmnt: (((((re)g)e)x)#)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(1):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(2):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(3):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(5):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
ex(8):  regex  regex  regex  regex  regex  regex  regex  regex  regex  regex
---------------- Examples from DFA ---------------
s1:  regex

         

         #A: Jon Stephens
         #D: Basic US phone number matching pattern.  I found this place and used a regex, so figured I'd share.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=478
expr 240: ^(\(?\d\d\d\)?)?( |-|\.)?\d\d\d( |-|\.)?\d{4,4}(( |-|\.)?[ext\.]+ ?\d+)?$
tree:   ((((((((((((?[0-9])[0-9])[0-9]))?)?( |-|.)?)[0-9])[0-9])[0-9])( |-|.)?)[0-9]{4})(((( |-|.)?[.etx]+) ?)[0-9]+)?)
augmnt: (((((((((((((?[0-9])[0-9])[0-9]))?)?( |-|.)?)[0-9])[0-9])[0-9])( |-|.)?)((([0-9][0-9])[0-9])[0-9]))(((( |-|.)?[.etx]+) ?)[0-9]+)?)#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  4436567  7888798  2610045  8601620  1278548  3009474  6897802  7084290
ex(1):  390-6478-x2  3266208890  (910)4228939e 8   7079702  (049)-347.0780.4
ex(2):  -279-4209t 80  0988652  530320 5066  -9900074 ee 48  -4076599   0533189
ex(3):  990.2151 .t516  1997724  845-7269  232-5510-x.9  (663792.7952-. 19
ex(5):  047-4920735  (246.7988009tx.x 0  143-087 2979  (433)578 9390  6189843
ex(8):  (504).3678002  5976562-.e 39138  630.4449  (974)277-2743
---------------- Examples from DFA ---------------
s1:  2247495
s11:   8268481
s21:  2247495t1

         

         #A: Manpreet Grewal
         #D: Its extracts telephone numbers
         #U: http://regexlib.com/REDetails.aspx?regexp_id=482
ERROR:   (?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)([ ]|[:]|\t|[-])*(?<Where>Home|Office|Work|Away|Fax|FAX|Phone)|(?<Where>Home|Office|Work|Away|Fax|FAX|Phone|Daytime|Evening)([ ]|[:]|\t|[-])*(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)|(?<Telephone>([(]([0-9]){3}[)]([ ])?([0-9]){3}([ ]|-)([0-9]){4}))
    rx: '(?...' unimplemented: in "(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)([ ]|[:]|\t|[-])*(?<Where>Home|Office|Work|Away|Fax|FAX|Phone)|(?<Where>Home|Office|Work|Away|Fax|FAX|Phone|Daytime|Evening)([ ]|[:]|\t|[-])*(?<Telephone>([0-9]|[ ]|[-]|[\(]|[\)]|ext.|[,])+)|(?<Telephone>([(]([0-9]){3}[)]([ ])?([0-9]){3}([ ]|-)([0-9]){4}))"

         

         #A: Manpreet Grewal
         #U: http://regexlib.com/REDetails.aspx?regexp_id=483
ERROR:   (?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)
    rx: '(?...' unimplemented: in "(?<http>(http:[/][/]|www.)([a-z]|[A-Z]|[0-9]|[/.]|[~])*)"

         

         #A: Manpreet Grewal
         #D: E-mail addresses matcher
         #U: http://regexlib.com/REDetails.aspx?regexp_id=484
ERROR:   (?<email>(?![ ])(\w|[.])*@(\w|[.])*)
    rx: '(?...' unimplemented: in "(?<email>(?![ ])(\w|[.])*@(\w|[.])*)"

         

         #A: Jared Tullis
         #D: This was used to process a bunch of lines of information to determine if a line was a North American phone number or not.  It accepts numbers with or without area code with or without parenthesis and sepearated by space, dash or period.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=485
ERROR:   ([\(]?(?<AreaCode>[0-9]{3})[\)]?)?[ \.\-]?(?<Exchange>[0-9]{3})[ \.\-](?<Number>[0-9]{4})
    rx: '(?...' unimplemented: in "([\(]?(?<AreaCode>[0-9]{3})[\)]?)?[ \.\-]?(?<Exchange>[0-9]{3})[ \.\-](?<Number>[0-9]{4})"

         

         #A: Michael Ash
         #D: This pattern captures <lastname><suffix>,<prefix><firstname><mname> Names must start with a capital letter. Last names may be hyphenated. First names can have two parts ie "Mary Anne" if there are more than two names after the comma. Suffixes can number up to XXX (30th). Standard prefixes are optional (Mr Miss)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=486
ERROR:   ^(?n:(?<lastname>(St\.\ )?(?-i:[A-Z]\'?\w+?\-?)+)(?<suffix>\ (?i:([JS]R)|((X(X{1,2})?)?((I((I{1,2})|V|X)?)|(V(I{0,3})))?)))?,((?<prefix>Dr|Prof|M(r?|(is)?)s)\ )?(?<firstname>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,2})?(\ (?<mname>(?-i:[A-Z])(\'?\w+?|\.))){0,2})$
    rx: '(?...' unimplemented: in "^(?n:(?<lastname>(St\.\ )?(?-i:[A-Z]\'?\w+?\-?)+)(?<suffix>\ (?i:([JS]R)|((X(X{1,2})?)?((I((I{1,2})|V|X)?)|(V(I{0,3})))?)))?,((?<prefix>Dr|Prof|M(r?|(is)?)s)\ )?(?<firstname>(?-i:[A-Z]\'?(\w+?|\.)\ ??){1,2})?(\ (?<mname>(?-i:[A-Z])(\'?\w+?|\.))){0,2})$"

         

         #A: Darren Neimke
         #U: http://regexlib.com/REDetails.aspx?regexp_id=487
ERROR:   ^ISBN\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$
    rx: '(?...' unimplemented: in "^ISBN\s(?=[-0-9xX ]{13}$)(?:[0-9]+[- ]){3}[0-9]*[xX0-9]$"

         

         #A: Dany Lauener
         #D: Matching : dd/MM/yy
Leap years compatible
Italian style, just for more fun.
Please, don't forget to rate it if you use it. THX
         #U: http://regexlib.com/REDetails.aspx?regexp_id=488
expr 241: ^(((0[1-9]|[12]\d|3[01])\/(0[13578]|1[02])\/(\d{2}))|((0[1-9]|[12]\d|30)\/(0[13456789]|1[012])\/(\d{2}))|((0[1-9]|1\d|2[0-8])\/02\/(\d{2}))|(29\/02\/((0[48]|[2468][048]|[13579][26])|(00))))$
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(1[02])))/)[0-9]{2})|((((((0[1-9])|([12][0-9])|(30))/)((0[13-9])|(1[012])))/)[0-9]{2})|(((((((0[1-9])|(1[0-9])|(2[0-8]))/)0)2)/)[0-9]{2})|((((((29)/)0)2)/)(((0[48])|([2468][048])|([13579][26]))|(00))))
augmnt: ((((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(1[02])))/)([0-9][0-9]))|((((((0[1-9])|([12][0-9])|(30))/)((0[13-9])|(1[012])))/)([0-9][0-9]))|(((((((0[1-9])|(1[0-9])|(2[0-8]))/)0)2)/)([0-9][0-9]))|((((((29)/)0)2)/)(((0[48])|([2468][048])|([13579][26]))|(00))))#)
length: 8 to 8
-------------------- Examples --------------------
ex(0):  02/02/88  30/03/45  31/08/78  13/01/46  18/02/84  17/07/78  22/02/47
ex(1):  06/01/88  04/02/10  29/02/08  29/02/04  04/10/55  09/02/03  14/02/03
ex(2):  30/07/93  31/10/10  20/02/22  12/02/41  21/02/09  09/06/07  29/02/08
ex(3):  14/10/99  26/02/63  09/09/37  20/02/92  30/10/62  29/02/00  06/12/19
ex(5):  29/02/00  30/12/10  30/12/66  29/02/96  08/12/27  03/10/28  29/02/00
ex(8):  28/02/49  21/02/59  12/08/86  31/03/27  14/12/21  08/01/34  17/02/44
---------------- Examples from DFA ---------------
s1:  01/06/69

         

         #A: Alanski Perryman
         #D: Spam Stopper
         #U: http://regexlib.com/REDetails.aspx?regexp_id=491
expr 242: .*[Oo0][Ee][Mm].*
tree:   (((([\x01-\u007f]*[0Oo])[Ee])[Mm])[\x01-\u007f]*)
augmnt: ((((([\x01-\u007f]*[0Oo])[Ee])[Mm])[\x01-\u007f]*)#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  OEm  OEm  0Em  oeM  oem  oem  oEm  0em  oEm  OEM  OEm  oeM  oEm  oEM
ex(1):  0em  pOemM  toeM}  V0em  2oEMh  oeM  |oEm  0OeM@  u0Em;  OEM  =OEMo
ex(2):  oem>t  ^FoeM<R  0eM  >0Em'  eOEm  oEM  Z{oEM  0EM\\  71OeM  0eMd
ex(3):  0emI  SWoeMsQI  0eM.  `oem(j  [<;OeM  U^oEm^s  NoEmBy  OINoemc5X
ex(5):  DQFgoeMw;  YG?RkoeM]/.;C  0,)OeMa  *B@OeM.A{Uz  8eoEm'\"o2i  MJ;oeMu7
ex(8):  (`$0EmniA  `At*YSRboem]l2:&  OEMU?  lQlOeMQ  nkoEmMC  GQK/~rOem+{%$g
---------------- Examples from DFA ---------------
s1:  oem

         

         #A: Alanski Perryman
         #D: Spam Stopper
         #U: http://regexlib.com/REDetails.aspx?regexp_id=492
expr 243: .*\$AVE|\$ave.*
tree:   ((((([\x01-\u007f]*$)A)V)E)|(((($a)v)e)[\x01-\u007f]*))
augmnt: (((((([\x01-\u007f]*$)A)V)E)|(((($a)v)e)[\x01-\u007f]*))#)
length: 4 to *
-------------------- Examples --------------------
ex(0):  $AVE  $AVE  $AVE  $AVE  $ave  $AVE  $ave  $ave  $ave  $ave  $AVE  $AVE
ex(1):  $ave:  P$AVE  $ave  $ave  $AVE  $AVE  $ave  $AVE  $ave2  $AVE  q$AVE
ex(2):  $ave  0$AVE  $AVE  $AVE  $ave`+  1=$AVE  $ave  $ave  $ave'>  $ave
ex(3):  c$AVE  $aveYa  $ave  tPP$AVE  kZ{$AVE  $ave.DC  $ave  *U$AVE  $ave[d\"
ex(5):  $aveL8  {IJ$AVE  $aveQI%3  $ave.~`Th  $AVE  [<;;^$AVE  U^$AVE  $aveN
ex(8):  yVOI$AVE  $ave|QuYTf6  $aveDQFg  6L$AVE  $ave  5!woOT$AVE  $AVE
---------------- Examples from DFA ---------------
s1:  $AVE
s7:  $ave

         

         #A: Alanski Perryman
         #D: Spam Stopper
         #U: http://regexlib.com/REDetails.aspx?regexp_id=493
expr 244: .*[Pp]re[Ss\$]cr[iI1]pt.*
tree:   (((((((((([\x01-\u007f]*[Pp])r)e)[$Ss])c)r)[1Ii])p)t)[\x01-\u007f]*)
augmnt: ((((((((((([\x01-\u007f]*[Pp])r)e)[$Ss])c)r)[1Ii])p)t)[\x01-\u007f]*)#)
length: 9 to *
-------------------- Examples --------------------
ex(0):  PreScr1pt  pre$crIpt  preScrIpt  PreScr1pt  prescr1pt  preScr1pt
ex(1):  pre$cr1pt  Pre$crIpt  pre$cr1pt  PreScripta  Prescr1pt)  prescr1pt\\
ex(2):  PreScr1pt(i  h'PreScrIpt  iprescriptmY  'PreScript7  wpre$cr1pt.
ex(3):  y(pre$crIpt/9  6]*PreScriptjdq  (Prescript`  hY.pre$crIpt&  `;PreScript
ex(5):  g|preScrIptQ  Pre$cr1pt?Rk]5  woprescr1pt  k;preScr1pt^  A{UPreScript
ex(8):  -PrescrIptA(Xa;niA  `At*YSRbPre$crIpt  !!~vPre$cript  QPre$crIptGQK/~r
---------------- Examples from DFA ---------------
s1:  Prescript

         

         #A: M h
         #D: Matches UK phone numbers - London and regional. It started off with something fairly short posted by liljim at www.forums.devshed.com but I wanted a little more precision to weed out all the zeros. Now it also weeds out premium phone numbers (as of 19/12/03).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=495
expr 245: ^\s*\(?(020[7,8]{1}\)?[ ]?[1-9]{1}[0-9{2}[ ]?[0-9]{4})|(0[1-8]{1}[0-9]{3}\)?[ ]?[1-9]{1}[0-9]{2}[ ]?[0-9]{3})\s*$
tree:   ((([\t-\r ]*(?)((((((((02)0)[,78]))?) ?)[1-9])[ 0-9[{}]?)[0-9]{4}))|(((((((((0[1-8])[0-9]{3}))?) ?)[1-9])[0-9]{2}) ?)[0-9]{3})[\t-\r ]*))
augmnt: (((([\t-\r ]*(?)((((((((02)0)[,78]))?) ?)[1-9])[ 0-9[{}]?)((([0-9][0-9])[0-9])[0-9])))|(((((((((0[1-8])(([0-9][0-9])[0-9])))?) ?)[1-9])([0-9][0-9])) ?)(([0-9][0-9])[0-9]))[\t-\r ]*))#)
length: 9 to *
-------------------- Examples --------------------
ex(0):  020,87888  05261304586  020782785  020817468  05027384290  05407784390
ex(1):  020872088   0207) 22268  04940)687 707  05225)997 703  01007629846
ex(2):    0208 60220  03865285 883   07506670 908  0208) 93488  01407399432 
ex(3):  05592569 116    06867) 895 021      0207) 46964    (0207 51747
ex(5):  05760)298 879    04796766 276       (020,) 94625   (0208)22732
ex(8):  03297) 743 365     02902318984           0207325047     020775972
---------------- Examples from DFA ---------------
s1:  020,74151
s14:  020886177
s13:  020,741514
s46:  0208861777
s28:  02088 6735
s29:  01343778370

         

         #A: T H
         #D: This regular expression matches on postive whole numbers and 0.  Whole numbers that are left padded with 0's are not a match.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=496
ERROR:   ^(0)$|^([1-9][0-9]*)$
    rx: Embedded '$' unimplemented: in "^(0)$|^([1-9][0-9]*)$"

         

         #A: Andres Garcia
         #D: Matches a string used to rewrite urls under the WSRP specification.  It captures the URL-Encoded string that represents a url.  Url validation is not provided.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=497
ERROR:   wsrp_rewrite\?(?<wsrp_uri>[\w%:&\\/;.]*)/wsrp_rewrite
    rx: '(?...' unimplemented: in "wsrp_rewrite\?(?<wsrp_uri>[\w%:&\\/;.]*)/wsrp_rewrite"

         

         #A: Andres Garcia
         #D: Percentage (From 0 to 100)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=498
ERROR:   ^(0*100{1,1}\.?((?<=\.)0*)?%?$)|(^0*\d{0,2}\.?((?<=\.)\d*)?%?)$
    rx: '(?...' unimplemented: in "^(0*100{1,1}\.?((?<=\.)0*)?%?$)|(^0*\d{0,2}\.?((?<=\.)\d*)?%?)$"

         

         #A: Brian Bothwell
         #D: None of the other URL regex's seemed to work right for me, so i threw this together. works well with PHP's ereg().
         #U: http://regexlib.com/REDetails.aspx?regexp_id=499
expr 246: ^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)?((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.[a-zA-Z]{2,4})(\:[0-9]+)?(/[^/][a-zA-Z0-9\.\,\?\'\\/\+&%\$#\=~_\-@]*)*$
tree:   (((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)(([.0-9A-Za-z-]+(:[$%&.0-9A-Za-z-]+)*)@)?)((((((((((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01][0-9]{2})|([1-9][0-9])|[0-9]))|(((([0-9A-Za-z-]+.)*[0-9A-Za-z-]+).)[A-Za-z]{2,4})))(:[0-9]+)?)((/[\x01-.0-\u007f])[#-'+-9=?-Z\_a-z~]*)*)
augmnt: ((((((((((((ht)t)p)|((((ht)t)p)s)|((ft)p)):)/)/)(([.0-9A-Za-z-]+(:[$%&.0-9A-Za-z-]+)*)@)?)((((((((((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[1-9]).)(((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[1-9]|0)).)(((25)[0-5])|((2[0-4])[0-9])|([01]([0-9][0-9]))|([1-9][0-9])|[0-9]))|(((([0-9A-Za-z-]+.)*[0-9A-Za-z-]+).)((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?))))(:[0-9]+)?)((/[\x01-.0-\u007f])[#-'+-9=?-Z\_a-z~]*)*)#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  http://77.255.1.90  ftp://251.6.218.002  http://207.039.0.228
ex(1):  http://s@243.60.18.157/y'  http://l:2@140.203.0.6/io
ex(2):  https://80.15.3.107:8  http://T:M:t@5.251.032.252:9/Z&g/\"
ex(3):  http://5Ib:-:.e@q.e.Wsn:63  ftp://YKt@Ft.rdt.SFD.2i.WQ:7/.#/0
ex(5):  https://qaTZ9@MA-Vb.onfc.qNht  ftp://X6@6.043.254.236:78570/@YD/G/.e
ex(8):  ftp://97.2.2.68:8/3REDI.Nd//'/sZ/TFJ/`,
---------------- Examples from DFA ---------------
s1:  ftp://O.Tv
s14:  ftp://O.TvS
s13:  ftp://O.TvSD
s12:  ftp://O.Tv/P
s27:  ftp://O.Tv:8
s15:  ftp://O@i.Qa
s28:  ftp://O.Tv/P/
s30:  ftp://O@i.Qad
s29:  ftp://1.0.0.0
s39:  ftp://1.0.0.1
s44:  ftp://1.0.0.2
s51:  ftp://1.0.0.6
s58:  ftp://O@i.Qadj
s38:  ftp://O@i.Qa:1
s59:  ftp://1.0.0.25
s45:  ftp://O@1.0.0.1
s53:  ftp://O@1.0.0.2
s60:  ftp://O@1.0.0.3
s61:  ftp://O@1.0.0.0
s52:  ftp://O@1.0.0.25

         

         #A: mike harber
         #D: Matches on MMDDYYYY only, requires all 8 digits
         #U: http://regexlib.com/REDetails.aspx?regexp_id=500
ERROR:   ((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$))
    rx: Embedded '^' unimplemented: in "((^(10|12|0?[13578])(3[01]|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(11|0?[469])(30|[12][0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(2[0-8]|1[0-9]|0?[1-9])((1[8-9]\d{2})|([2-9]\d{3}))$)|(^(0?2)(29)([2468][048]00)$)|(^(0?2)(29)([3579][26]00)$)|(^(0?2)(29)([1][89][0][48])$)|(^(0?2)(29)([2-9][0-9][0][48])$)|(^(0?2)(29)([1][89][2468][048])$)|(^(0?2)(29)([2-9][0-9][2468][048])$)|(^(0?2)(29)([1][89][13579][26])$)|(^(0?2)(29)([2-9][0-9][13579][26])$))"

         

         #A: Brian Bothwell
         #D: Ok here's an updated URL regex for you folks. It allows localhost and all TLDs. Feel free to add each country code individually if you want a tighter match.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=501
ERROR:   ^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&%\$#\=~_\-]+))*$
    rx: Embedded '$' unimplemented: in "^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&%\$#\=~_\-]+))*$"

         

         #A: Prashant Nayak
         #D: Positive Whole number matched from 0 to 9999999. Only 7 digits length is allowed.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=502
expr 247: ^\d{1,7}$
tree:   [0-9]{1,7}
augmnt: ((((((([0-9][0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)#)
length: 1 to 7
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  2  0  1  2  7  8  5  4  8  3  0  0  9  4  7  4  6  8  9  7  8  0  2
ex(2):  8  2  07  6  0  78  3  09  36  7  3  43  48  1  3  6  0  2  8  8  00
ex(3):  109  6  22  89  9  4  378  873  7  7  9  022  5  0  979  70  4  14  07
ex(5):  908  64103  685  462  7932  998  42  9  06  8523  0220  82865  418  3
ex(8):  32093  506  8270  99  800743  83  367  3634  856  4074659  0432  05363
---------------- Examples from DFA ---------------
s1:  8
s7:  83
s6:  838
s5:  8381
s4:  83817
s3:  838174
s2:  8381743

         

         #A: Michael Ash
         #D: New DateTime Regex. Rebuilt better than before, better, stronger, faster. 
         #T: mm/dd/yyyy  hh:MM:ss AM/PM DateTime
         #U: http://regexlib.com/REDetails.aspx?regexp_id=504
ERROR:   (?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d)\d{2})(?(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)
    rx: '(?...' unimplemented: in "(?n:^(?=\d)((?<month>(0?[13578])|1[02]|(0?[469]|11)(?!.31)|0?2(?(.29)(?=.29.((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00))|(?!.3[01])))(?<sep>[-./])(?<day>0?[1-9]|[12]\d|3[01])\k<sep>(?<year>(1[6-9]|[2-9]\d)\d{2})(?(?=\x20\d)\x20|$))?(?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(?i:\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$)"

         

         #A: Dean Dal Bozzo
         #D: California Resale License number validator. Validates Letters and Numbers or Number only. Letters: First 2 letters can be SR, SS, ST , SX, SY, SZ (TAT Code)  Next optional letter can be S,X,Y,Z.  Next letters must be a minimum of two and a maximum of 3 (District Code).  Numbers:  Can be 8-9 numbers. Numbers can be delimited with a hypen or spaces after the first 2 numbers.  Note: I use () to extract the information I want for use in other scripts.
         #T: Resale License Number (CA)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=506
expr 248: ^((([sS][r-tR-Tx-zX-Z])\s*([sx-zSX-Z])?\s*([a-zA-Z]{2,3}))?\s*(\d\d)\s*-?\s*(\d{6,7}))$
tree:   ((((((((((([Ss][RSTXYZrstxyz])[\t-\r ]*)[SXYZsxyz]?)[\t-\r ]*)[A-Za-z]{2,3})?[\t-\r ]*)([0-9][0-9]))[\t-\r ]*)-?)[\t-\r ]*)[0-9]{6,7})
augmnt: (((((((((((([Ss][RSTXYZrstxyz])[\t-\r ]*)[SXYZsxyz]?)[\t-\r ]*)(([A-Za-z][A-Za-z])[A-Za-z]?))?[\t-\r ]*)([0-9][0-9]))[\t-\r ]*)-?)[\t-\r ]*)(((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9]?))#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  44365677  88879826  10045860  16201278  54830094  74689780  27084290
ex(1):   09 7839434  12 062088  Sy Z cG93 3788875  Sr vm97 - 714007   90410376
ex(2):    98 241853  32   6682709  sxxSJl 53-  644074  Sx  jwB98  3780466
ex(3):  73     0219947    28- 726964     05   -174786  sS IfU   95-7601949
ex(5):       11     503592      98       2732243
ex(8):      43 -      436669    65 -   670800        56          391382
---------------- Examples from DFA ---------------
s1:  73475385
s11:  734753851

         

         #A: Steven Smith
         #D: In response to a question on the regex list at www.aspadvice.com, this expression should ensure that a login field's username includes a 'DOMAIN\' prefix.  The latter part of the expression should probably be limited so that it only allows usernames of appropriate lengths, perhaps 3 to 20 characters (by replacing + with {3,20} for instance).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=508
expr 249: ^DOMAIN\\\w+$
tree:   (((((((DO)M)A)I)N)\)[0-9A-Z_a-z]+)
augmnt: ((((((((DO)M)A)I)N)\)[0-9A-Z_a-z]+)#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  DOMAIN\\2  DOMAIN\\c  DOMAIN\\N  DOMAIN\\V  DOMAIN\\W  DOMAIN\\0
ex(1):  DOMAIN\\e  DOMAIN\\r  DOMAIN\\Y  DOMAIN\\J  DOMAIN\\v  DOMAIN\\9
ex(2):  DOMAIN\\e  DOMAIN\\W  DOMAIN\\L  DOMAIN\\Ok  DOMAIN\\e9  DOMAIN\\5
ex(3):  DOMAIN\\c  DOMAIN\\5nA  DOMAIN\\kO  DOMAIN\\Dm  DOMAIN\\X  DOMAIN\\f
ex(5):  DOMAIN\\99  DOMAIN\\7  DOMAIN\\se  DOMAIN\\qHr5  DOMAIN\\l  DOMAIN\\h
ex(8):  DOMAIN\\K98s7y  DOMAIN\\M1CHALx  DOMAIN\\e_mxW_  DOMAIN\\pfna_
---------------- Examples from DFA ---------------
s1:  DOMAIN\\w

         

         #A: Joseph Lundgren
         #D: Simple email subject line matching. This regex matches those really annoying emails that begin with 0-5 spaces, followed by a fake reply, contain a random string of letters (usually CAPITALIZED) from 1-10 characters long followed by a comma, and then followed by three lower-case words each from 1-10 characters long. In my experience, the 3 trailing words are always lower-case. the words make begin with, contain, or end in common punctuation marks.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=509
expr 250: ^\W{0,5}[Rr]e:\W[a-zA-Z0-9]{1,10},\W[a-z]{1,10}\W[a-z]{1,10}\W[a-z]{1,10}
tree:   (((((((((((([\x01-/:-@[-^`{-\u007f]{0,5}[Rr])e):)[\x01-/:-@[-^`{-\u007f])[0-9A-Za-z]{1,10}),)[\x01-/:-@[-^`{-\u007f])[a-z]{1,10})[\x01-/:-@[-^`{-\u007f])[a-z]{1,10})[\x01-/:-@[-^`{-\u007f])[a-z]{1,10})
augmnt: ((((((((((((((((([\x01-/:-@[-^`{-\u007f]?[\x01-/:-@[-^`{-\u007f]?)[\x01-/:-@[-^`{-\u007f]?)[\x01-/:-@[-^`{-\u007f]?)[\x01-/:-@[-^`{-\u007f]?)[Rr])e):)[\x01-/:-@[-^`{-\u007f])((((((((([0-9A-Za-z][0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)),)[\x01-/:-@[-^`{-\u007f])((((((((([a-z][a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?))[\x01-/:-@[-^`{-\u007f])((((((((([a-z][a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?))[\x01-/:-@[-^`{-\u007f])((((((((([a-z][a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?)[a-z]?))#)
length: 12 to 53
-------------------- Examples --------------------
ex(0):  Re:@s,#a\\l%a  re:)Y,`k{w{v  re::W,>a)h\\o  Re:>0,`u,p]g  re:$r,%l+f&o
ex(1):  {& Re:+3uiPd,|ifltw(ifuoy=iore  =~<?Re:\"BAeG,\\akzid(acdo/rnfszky
ex(2):  .`+Re:(zRAL1xp,<lrsfkl&gormxx:ugxtot  ;!Re::dO3UK,'nsxmwpi{eht'ydosaes
ex(3):  Re:,ErmlOCKMk,.gens'vxbtgmk$cttltxla  ~~?re:|LxB,#qwammb{rlqzn!euyitqf
ex(5):  `&re:{ptjfg,{qhbxz)yktzarf$blluc  }}>re:{1Wc0ec,=gco$idlfqo/finc
ex(8):  {{`re:@X3mu3G,(vssb'ufsm#yzji  #+Re:|npoan,[gnab`flgqi$vyuqs
---------------- Examples from DFA ---------------
s1:  re:^i,&w\\p<b
s26:  re:^i,&w\\p<bf
s25:  re:^i,&w\\p<bfx
s24:  re:^i,&w\\p<bfxh
s23:  re:^i,&w\\p<bfxhd
s22:  re:^i,&w\\p<bfxhdf
s21:  re:^i,&w\\p<bfxhdfi
s20:  re:^i,&w\\p<bfxhdfir
s19:  re:^i,&w\\p<bfxhdfirx
s18:  re:^i,&w\\p<bfxhdfirxe

         

         #A: Roman Lukyanenko
         #D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.jpg
or C:\Windows\Microsoft.NET etc
         #U: http://regexlib.com/REDetails.aspx?regexp_id=512
expr 251: ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(jpg|JPG)$
tree:   ((((([A-Za-z]:)|((\{2}[0-9A-Z_a-z]+)$?))(\(([0-9A-Z_a-z][ 0-9A-Z_a-z]*)[\x01-\u007f]*))+).)(((jp)g)|((JP)G)))
augmnt: (((((([A-Za-z]:)|(((\\)[0-9A-Z_a-z]+)$?))(\(([0-9A-Z_a-z][ 0-9A-Z_a-z]*)[\x01-\u007f]*))+).)(((jp)g)|((JP)G)))#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  W:\\q.JPG  D:\\K.JPG  \\\\N\\T.jpg  Z:\\b.JPG  U:\\B.jpg  U:\\K.jpg
ex(1):  \\\\p\\Y.jpg  r:\\wp.JPG  \\\\u\\P.JPG  M:\\3.JPG  \\\\n\\J7.JPG
ex(2):  i:\\N].JPG  z:\\2 q\\d.jpg  \\\\5\\a5Q\\.jpg  \\\\B\\2E7m.jpg
ex(3):  q:\\WS1\\B7\\gBVxS.JPG  \\\\_U\\cG6].jpg  L:\\6ijdq.JPG
ex(5):  \\\\X$\\_kU5qBy\\_M7ho5X\\d7RZwm.JPG  \\\\Vsg\\nXvrcUo\\_Bylxow.jpg
ex(8):  N:\\lRb+_sj<L\\2&\"B!!~.jpg
---------------- Examples from DFA ---------------
s1:  l:\\_.JPG

         

         #A: Pete Lindquist
         #D: I built this expression to test a string in ASP for valid username and password constraints.  It can be adapted for any number of scenerios.  For instance in this case, we needed to ensure the username someone wanted was not all numbers or all letters and was 6-15 characters in length with no special characters.  This expression tests negatively for all number cases, then all letter cases, and lastly tests for only alphanumeric characters in the required range.  In other words: the match must be alphanumeric with at least one number, one letter, and be between 6-15 character in length.  
         #U: http://regexlib.com/REDetails.aspx?regexp_id=515
ERROR:   (?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,15})$
    rx: '(?...' unimplemented: in "(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{6,15})$"

         

         #A: paul Snabilie
         #D: Postalcode Danmark
         #U: http://regexlib.com/REDetails.aspx?regexp_id=517
expr 252: ^[D-d][K-k]-[1-9]{1}[0-9]{3}$
tree:   (((([D-d][K-k])-)[1-9])[0-9]{3})
augmnt: ((((([D-d][K-k])-)[1-9])(([0-9][0-9])[0-9]))#)
length: 7 to 7
-------------------- Examples --------------------
ex(0):  GN-2567  RQ-7798  GN-3045  Y\\-3620  `g-9548  ZY-6474  YV-2802  be-7290
ex(1):  ^L-8091  DK-1839  HQ-1821  cT-6206  I\\-5890  SL-9910  bc-8226  Sf-4940
ex(2):  J^-8697  OQ-4560  d\\-4170  J`-5400  E^-6290  ]W-5103  HS-6246  Nk-2327
ex(3):  J`-8885  a_-6220  Qb-9652  ^g-9308  SQ-3930  KY-3827  W\\-4080  VW-1383
ex(5):  ^U-5564  \\d-4659  TS-6200  Jf-8189  Uc-9743  Fi-7656  Nb-9600  [O-2116
ex(8):  ^j-5910  ad-6021  TV-7724  IU-2459  Ke-7696  Ti-8219  ^Y-3073  cc-1478
---------------- Examples from DFA ---------------
s1:  L_-6792

         

         #A: paul Snabilie
         #D: match all danish postal code
update from last danish postal code expression
         #U: http://regexlib.com/REDetails.aspx?regexp_id=518
expr 253: ^[D-d][K-k]( |-)[1-9]{1}[0-9]{3}$
tree:   (((([D-d][K-k])( |-))[1-9])[0-9]{3})
augmnt: ((((([D-d][K-k])( |-))[1-9])(([0-9][0-9])[0-9]))#)
length: 7 to 7
-------------------- Examples --------------------
ex(0):  GN-9677  JQ 3826  XP 6860  [c 8278  F^ 3094  `N 5780  Gi 7290  GV 4778
ex(1):  Li 5433  JK 2326  Pi 9888  G[ 2991  Si-8226  Sf-4403  bN 4357  SR 3022
ex(2):  Z[ 1714  ZL-1329  Wd 5103  HS 3462  dk-4799  Hh 4910  ZP 9380  dV 3286
ex(3):  VZ-3930  KY 3270  Uj-2007  YQ-1936  VP-3488  ][ 5746  FO-3320  MQ-8189
ex(5):  bM 3605  ^V 5699  HZ-5151  UX 2389  PU-3602  O[-7724  IU 3593  ^f 6644
ex(8):  X`-5617  SS 1999  dX 2879  IQ 5952  Zi 4019  K^-9287  OV 2717  aQ 7667
---------------- Examples from DFA ---------------
s1:  GX 7260

         

         #A: paul Snabilie
         #U: http://regexlib.com/REDetails.aspx?regexp_id=519
expr 254: ^[S-s]( |-)?[1-9]{1}[0-9]{2}( |-)?[0-9]{2}$
tree:   ((((([S-s]( |-)?)[1-9])[0-9]{2})( |-)?)[0-9]{2})
augmnt: (((((([S-s]( |-)?)[1-9])([0-9][0-9]))( |-)?)([0-9][0-9]))#)
length: 6 to 8
-------------------- Examples --------------------
ex(0):  V13656  r98887  d42610  r15860  j12012  h95483  a59474  h69780  V70842
ex(1):  \\-53991  S978-33  Y312 20  X98890  b-610-42  o793-03  q687-07
ex(2):  T-634-00  T132 46  i 568 62  s-479 42  V-888 80  s99886  V318-88
ex(3):  l32779  S200 38  _-45334  d26407  Y39943  b75331  _ 21737  q76505
ex(5):  W-515-86  r 409-02  ^-77282  c359-26  p242 90  a-73317  b 199 63
ex(8):  T552 19  Z-928-46  T-96066  g 96070  V 72673  i15946  l 99880  [-84873
---------------- Examples from DFA ---------------
s1:  Y14607

         

         #A: Simon Christensen
         #D: Peseudo-HTML code matcher. Allows for one parameter within the first tag (name is optional), the value of which can be optionally delimited by either double or single quotes. Uses backreferencing to ensure that the end and start tags match, and that any single or double quotes match. Very useful for web forums or any situation where users may be prompted to enter text for display on a webpage somewhere, as it can be quickly processed into HTML without allowing HTML to be specified within the input itself (which may pose a security risk). 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=520
ERROR:   (\[(\w+)\s*(([\w]*)=('|")?([a-zA-Z0-9|:|\/|=|-|.|\?|&]*)(\5)?)*\])([a-zA-Z0-9|:|\/|=|-|.|\?|&|\s]+)(\[\/\2\])
    rx: \5 (backref) unimplemented: in "(\[(\w+)\s*(([\w]*)=('|")?([a-zA-Z0-9|:|\/|=|-|.|\?|&]*)(\5)?)*\])([a-zA-Z0-9|:|\/|=|-|.|\?|&|\s]+)(\[\/\2\])"

         

         #A: Sadaf Ahmed
         #D: Address
It has now been enhanced to accept # too!!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=521
expr 255: ^[a-zA-Z\d]+(([\'\,\.\- #][a-zA-Z\d ])?[a-zA-Z\d]*[\.]*)*$
tree:   ([0-9A-Za-z]+((([ #',.-][ 0-9A-Za-z])?[0-9A-Za-z]*).*)*)
augmnt: (([0-9A-Za-z]+((([ #',.-][ 0-9A-Za-z])?[0-9A-Za-z]*).*)*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  H  W  L  O  q  V  2  o  3  B  O  z  c  l  I  u  q  B  Y  N  J  T  d  m
ex(1):  i  D  e.  U  c  C  K  T  C  K  h  N,I5.  3  6  tY  3  o  J  Y  q  L  f
ex(2):  aQ#A3i  G  lU  cW.TFf.  B  Ok9..  cN'r..  RV  af f  m..AS.  t'w..  3
ex(3):  loQo.bVr...#R...  45  igN'YCe...CqH.lPEq  aHX-nh...- 6-b..  4ZK  Rlx
ex(5):  EcCzpfna..'TdFsE.gO.....sn.......  3SfekW.,kipJsv..#DqL..ne....  DfoP.
ex(8):  ecr5Z3f2lxgwx8......ycMEzVROYYRVEAe0voybG.W3S4FPE0......C6KcM....9v8VI9......
---------------- Examples from DFA ---------------
s1:  d
s3:  d.

         

         #A: Michael Ash
         #U: http://regexlib.com/REDetails.aspx?regexp_id=523
ERROR:   (<\/?)(?i:(?<element>a(bbr|cronym|ddress|pplet|rea)?|b(ase(font)?|do|ig|lockquote|ody|r|utton)?|c(aption|enter|ite|(o(de|l(group)?)))|d(d|el|fn|i(r|v)|l|t)|em|f(ieldset|o(nt|rm)|rame(set)?)|h([1-6]|ead|r|tml)|i(frame|mg|n(put|s)|sindex)?|kbd|l(abel|egend|i(nk)?)|m(ap|e(nu|ta))|no(frames|script)|o(bject|l|pt(group|ion))|p(aram|re)?|q|s(amp|cript|elect|mall|pan|t(r(ike|ong)|yle)|u(b|p))|t(able|body|d|extarea|foot|h|itle|r|t)|u(l)?|var))(\s(?<attr>.+?))*>
    rx: '(?...' unimplemented: in "(<\/?)(?i:(?<element>a(bbr|cronym|ddress|pplet|rea)?|b(ase(font)?|do|ig|lockquote|ody|r|utton)?|c(aption|enter|ite|(o(de|l(group)?)))|d(d|el|fn|i(r|v)|l|t)|em|f(ieldset|o(nt|rm)|rame(set)?)|h([1-6]|ead|r|tml)|i(frame|mg|n(put|s)|sindex)?|kbd|l(abel|egend|i(nk)?)|m(ap|e(nu|ta))|no(frames|script)|o(bject|l|pt(group|ion))|p(aram|re)?|q|s(amp|cript|elect|mall|pan|t(r(ike|ong)|yle)|u(b|p))|t(able|body|d|extarea|foot|h|itle|r|t)|u(l)?|var))(\s(?<attr>.+?))*>"

         

         #A: Michael Ash
         #D: This regex will match all the valid on event attributes in HTML 4.01/XHTML 1.0
         #T: (X)HTML click events
         #U: http://regexlib.com/REDetails.aspx?regexp_id=524
ERROR:   (?i:on(blur|c(hange|lick)|dblclick|focus|keypress|(key|mouse)(down|up)|(un)?load|mouse(move|o(ut|ver))|reset|s(elect|ubmit)))
    rx: '(?...' unimplemented: in "(?i:on(blur|c(hange|lick)|dblclick|focus|keypress|(key|mouse)(down|up)|(un)?load|mouse(move|o(ut|ver))|reset|s(elect|ubmit)))"

         

         #A: W. D.
         #D: Canadian Postal Code / Codes / Canada / Zip
Google for DFIOQU and you'll see where I got the
info for this.
Can anyone simplify this?
         #U: http://regexlib.com/REDetails.aspx?regexp_id=526
expr 256: ^[abceghjklmnprstvxyABCEGHJKLMNPRSTVXY][0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ] {0,1}[0-9][abceghjklmnprstvwxyzABCEGHJKLMNPRSTVWXYZ][0-9]$
tree:   (((((([ABCEGHJ-NPRSTVXYabceghj-nprstvxy][0-9])[ABCEGHJ-NPRSTV-Zabceghj-nprstv-z]) ?)[0-9])[ABCEGHJ-NPRSTV-Zabceghj-nprstv-z])[0-9])
augmnt: ((((((([ABCEGHJ-NPRSTVXYabceghj-nprstvxy][0-9])[ABCEGHJ-NPRSTV-Zabceghj-nprstv-z]) ?)[0-9])[ABCEGHJ-NPRSTV-Zabceghj-nprstv-z])[0-9])#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  S4P6b6  A8S8y8  e6w0Y5  S6X6e0  B2e5A8  N0z4e6  G7A0M7  p8y2t0  J4K4L7
ex(1):  h6g3b4  L4S1W3  j6E2b8  P9m1V9  v1m 6c2  T8r 9Y0  G7c8B3  C0r 0N5
ex(2):  j3e 4b7  K0z9g8  T4P3P6  x2s2z9  A7e1p0  t1G8e5  p3b2X8  l8V4v8  p3Y3m0
ex(3):  T0n 0Z0  v3L 3G7  y3z8w5  E4W7s6  G9x 0j3  s3B9j8  a7w 8A4  V5T 2e0
ex(5):  E1v 9k6  Y8p 9h1  j0A 9Z7  A4e2m4  C9P 2g9  p4J1h0  R5v7a6  N7a 6M9
ex(8):  v7J1s1  g5Y 2P6  k9C 8T2  p7P4n7  k9b6M6  r4Y 0W7  S1K9a6  S7p 3L9
---------------- Examples from DFA ---------------
s1:  M8Y8G9

         

         #A: Dean Dal Bozzo
         #U: http://regexlib.com/REDetails.aspx?regexp_id=528
ERROR:   ^#?(([fFcC0369])\2){3}$
    rx: \2 (backref) unimplemented: in "^#?(([fFcC0369])\2){3}$"

         

         #A: Sachin Bhatt
         #D: Used to validate Credit Card numbers, Checks if it contains 16 numbers in groups of 4 separated by -, ,or nothing
         #U: http://regexlib.com/REDetails.aspx?regexp_id=529
ERROR:   ^(\d{4}-){3}\d{4}$|^(\d{4} ){3}\d{4}$|^\d{16}$
    rx: Embedded '$' unimplemented: in "^(\d{4}-){3}\d{4}$|^(\d{4} ){3}\d{4}$|^\d{16}$"

         

         #A: Frederick Samson
         #D: The goal of this regular expression is to replace all & (ampersand) characters by & if they are not the start of HTML entities. I used
http://www.w3schools.com/html/html_entitiesref.asp as a reference. You can then use RegExp Replace method to do the work. Was helpful for me, might helpful be for you...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=532
ERROR:   &(?![a-zA-Z]{2,6};|#[0-9]{3};)
    rx: '(?...' unimplemented: in "&(?![a-zA-Z]{2,6};|#[0-9]{3};)"

         

         #A: William Rohrbach
         #D: This regular expression matches a series of names and/or email addresses much like you would do in Outlook's To field (e.g. To: wrohrbach@carlson.com;miles, er;roemer;lagrander, nitra). The first entry must be a name (in the form of last name followed by a comma and first name) or an email address. The following entries are a semicolon followed by one name or email address. The comma and first name are optional components of the name part.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=533
expr 257: ^((([a-zA-Z\'\.\-]+)?)((,\s*([a-zA-Z]+))?)|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})))(;{1}(((([a-zA-Z\'\.\-]+){1})((,\s*([a-zA-Z]+))?))|([A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})){1}))*$
tree:   (((['.A-Za-z-]+?((,[\t-\r ]*)[A-Za-z]+)?)|(((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)[A-Za-z]{2,}))(;((['.A-Za-z-]+((,[\t-\r ]*)[A-Za-z]+)?)|(((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)[A-Za-z]{2,})))*)
augmnt: ((((['.A-Za-z-]+?((,[\t-\r ]*)[A-Za-z]+)?)|(((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)([A-Za-z][A-Za-z]+)))(;((['.A-Za-z-]+((,[\t-\r ]*)[A-Za-z]+)?)|(((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)([A-Za-z][A-Za-z]+))))*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):      O@V.GS    k@K.dU      B@N.Dw  U@V.AB      W@u.UX  B@x.Qu    
ex(1):  e@C.ZR  y,V;I  y@J.SE  v@O.l.dw    3.3@3.Bx;L  n@J0.Pp;qd@k.ZU  -,i
ex(2):  ;V@fW.iTG;f  eS_N@O.QO  ,MW;wR, a;Q@KbpVf9.HY
ex(3):  ,  Fh;D,  A;gG, s;1LxO.Yl@cmx-c.Qpf.JbsT
ex(5):  , Fv
ex(8):  ,xYaP;2@gI6UGadzdLpkoHqqtdf-P.Gcr.pwF2JbTOajffbrEgjAtja.sr;d@vj0axbGE.Am4pblsRCN1H-T-Bv-tO7B.DWsA9m.OoLZPJoSa;abyGAw',    ci;cOEIE,   DdrtCfi;fk;VblrblvbL.GgertZtZR1d6tOPFV99RzDhZjo@GMA.Ka8Z1iXzutLuZ31AGta7MLe.WrNFi
---------------- Examples from DFA ---------------
s0:  
s10:  '
s11:  g
s2:  ,h
s12:  7@O.MV

         

         #A: Michael Ash
         #D: This regex validates U.S. social security numbers, within the range of numbers that have been currently allocated. 
         #T: Social Security Number
         #U: http://regexlib.com/REDetails.aspx?regexp_id=535
ERROR:   ^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$
    rx: '(?...' unimplemented: in "^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$"

         

         #A: Jerry Schmersahl
         #D: Example of a regular expression that can be used to parse a comma delimited string into constituent, named sub-strings. Add or remove regex subfield definitions (?<field1>[^,]+) and corresponding delimiting characters in the regular expression as necessary to accommodate the string and subfields you intend to parse. Optionally, rename the subfield names in the regular expression to more meaningful names if you are using the parsed sub-strings in a program. Replace all occurrences of the comma in the regular expression with any required alternative delimiting character. As long as the delimiting character used does not occur naturally in any of the sub-strings, you should be good-to-go. NOTE: To change the delimiter character you must replace all occurrences of the comma in the current regex (of which there are 5) with the new delimiter character. e.g. (?<field1>[^;]+); changes the delimiter character to a semi-colon for the first field.
         #T: Parse Comma Delimited Strings
         #U: http://regexlib.com/REDetails.aspx?regexp_id=538
ERROR:   ^(?<field1>[^,]+),(?<field2>[^,]+),(?<field3>[^,]+)$
    rx: '(?...' unimplemented: in "^(?<field1>[^,]+),(?<field2>[^,]+),(?<field3>[^,]+)$"

         

         #A: Jerry Schmersahl
         #D: Updated on 3/4/2004 per feedback to additionally exclude SSNs that begin with 666 which, as reported, are also not valid.
Regular expression for validating US Social Security Numbers. Accepts optional hyphens or spaces as formatting characters. Parses the three subfields of the SSN into three named sub-strings (SSN1, SSN2, and SSN3) to facilitate program use. Rejects matches on all zeros for any individual subfield of the Social Security Number. Matches only on those SSNs that fall within the range of numbers currently allocated by the Social Security Administration.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=539
ERROR:   ^(?!000)(?!666)(?<SSN3>[0-6]\d{2}|7(?:[0-6]\d|7[012]))([- ]?)(?!00)(?<SSN2>\d\d)\1(?!0000)(?<SSN4>\d{4})$
    rx: '(?...' unimplemented: in "^(?!000)(?!666)(?<SSN3>[0-6]\d{2}|7(?:[0-6]\d|7[012]))([- ]?)(?!00)(?<SSN2>\d\d)\1(?!0000)(?<SSN4>\d{4})$"

         

         #A: Rob Eberhardt
         #D: regex to validate email address
noteworthy:
(1) It allows usernames with 1 or 2 alphanum characters, or 3+ chars can have -._ in the middle. username may NOT start/end with -._ or any other non alphanumeric character.
(2) It allows heirarchical domain names (e.g. me@really.big.com). Similar -._ placement rules there.
(3) It allows 2-9 character alphabetic-only TLDs (that oughta cover museum and adnauseum :>).
(4) No IP email addresses though -- I wouldn't Want to accept that kind of address. 
         #T: Email
         #U: http://regexlib.com/REDetails.aspx?regexp_id=541
expr 258: ^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$
tree:   (((([0-9A-Za-z]([.0-9A-Z_a-z-]*[0-9A-Za-z])*)@)((([0-9A-Za-z][0-9A-Z_a-z-]*)[0-9A-Za-z]).)+)[A-Za-z]{2,9})
augmnt: ((((([0-9A-Za-z]([.0-9A-Z_a-z-]*[0-9A-Za-z])*)@)((([0-9A-Za-z][0-9A-Z_a-z-]*)[0-9A-Za-z]).)+)(((((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  H@LO.yJ  2@3B.vU  K@lI.BE  Y@JT.wB  U@VD.BC  9@Uu.UX  U@0x.Qu  H@C0.sK
ex(1):  C@OW6.TbZWO  J@Jq.EkmVrmd  a@1u.NXxx  l7@W5Z.vmpvOey  v@9ok.MiSPI
ex(2):  e@8kkA.tGUQQ  3@D0-v.WyCNu  l@oo.Mb.QjRs  cF5bKg@3quC.BJP.bviz
ex(3):  uz@wZ.agZ.KY77.oTPnj  L@5XY.Zv6.PasnY  e@aT.mJYK7.E6DR.XeUPv
ex(5):  Fsob9nswa@JkwL.ypUr3G.RNf.PsY.qPszyJ
ex(8):  At1Byq7JW-nRF_3rr2.dEVO1fB0GxBoQCbvna-iMFJnT@Kj.nASYmTF
---------------- Examples from DFA ---------------
s1:  L@4V.Pu
s15:  L@4V.Puv
s14:  L@4V.Puvb
s13:  L@4V.Puvbr
s12:  L@4V.PuvbrU
s11:  L@4V.PuvbrUS
s10:  L@4V.PuvbrUST
s9:  L@4V.PuvbrUSTk

         

         #A: Paul Haines
         #D: Validates a UNC to conform to \\server\service
Must have a "\\" at the start
Server may contain alpha/numeric/underscore/dash,
Followed by another single "\"
Service may contain alpha/numeric/underscore/dash/$/space
Note:
Service may not start nor end with a space
Service may only contain one $, and only at the end
No additional "\" may follow afterwards
         #U: http://regexlib.com/REDetails.aspx?regexp_id=542
ERROR:   ^\\{2}[\w-]+\\(([\w-][\w-\s]*[\w-]+[$$]?$)|([\w-][$$]?$))
    rx: invalid range: in "^\\{2}[\w-]+\\(([\w-][\w-\s]*[\w-]+[$$]?$)|([\w-][$$]?$))"

         

         #A: Andrew van der Stock
         #D: Matches positive whole numbers with exactly zero or two decimal points if a . is present. Useful for checking currency amounts, such 5 or 5.00 or 5.25. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=543
expr 259: ^\d+(?:\.\d{0,2})?$
tree:   ([0-9]+(.[0-9]{0,2})?)
augmnt: (([0-9]+(.([0-9]?[0-9]?))?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  0.84  8.4  7  6  9.  7  8  2.4  4  7.9  0.6  7  3.3  8  1  3  6  0
ex(2):  8  00.90  96  2  9.4  78  7.06  70  5.  79.4  14  7  3  08  4.7  5  6
ex(3):  8.  1  88.8  209  86.8  308  2  305  68  0.0  0.3  9.56  488.  74  990
ex(5):  9838.7  0465  5.  6.1  21.9  73  10951  2.47  482  4593.  64423  90.03
ex(8):  9926  687921  79527527  194.2  7964677.6  6  742.  011249  073.52
---------------- Examples from DFA ---------------
s1:  8
s2:  8.
s4:  8.0
s3:  8.09

         

         #A: Lloyd Sturge
         #D: This expression will return the src (source) property of an image tag <IMG>. The source returned is limited to the file extensions supplied. It doesn't matter if the image is prefixed with '../' or 'http://..blah' or 'drive\path' or nothing. This expression could be modifed to return other sources or for the tags (ie <BGSOUND>, <SCRIPT>, etc.) depending on the file extensions given.
I needed this to replace the source of images in a HTML page when I wanted to save the page to a local drive and keep the images intact.
If anybody could modify this further to include only the <IMG> tag, I would appreciate the effort.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=544
expr 260: src[^>]*[^/].(?:jpg|bmp|gif)(?:\"|\')
tree:   (((((((sr)c)[\x01-=?-\u007f]*)[\x01-.0-\u007f])[\x01-\u007f])(((jp)g)|((bm)p)|((gi)f)))("|'))
augmnt: ((((((((sr)c)[\x01-=?-\u007f]*)[\x01-.0-\u007f])[\x01-\u007f])(((jp)g)|((bm)p)|((gi)f)))("|'))#)
length: 9 to *
-------------------- Examples --------------------
ex(0):  srcI9bmp\"  src1+gif'  srcIJjpg\"  srcMWgif\"  srcMOjpg\"  src{yjpg\"
ex(1):  src21bmp\"  srcP}jpg'  src`tbmp\"  srcGu_jpg'  srcqyhgif'  srceN\"gif'
ex(2):  src](\\gif\"  srcLtxqjpg'  srcO(gif\"  src\\6tbmp\"  src$Uz>gif\"
ex(3):  src]wkZ{gif'  src.DC)jgif\"  srcS-ygif'  src~5>Sbmp\"  src&{Ibmp'
ex(5):  srchY.7Ybmp'  src$&o`;Ujpg'  src<NSY)wUjpg'  srcU'~c5Xbmp\"
ex(8):  srcSV+w;gYG?Rjpg'  src.;CI0,)jpg'  srcB@bmp\"  srcUzz8eenG2Ygif\"
---------------- Examples from DFA ---------------
s1:  srcU(bmp\"
s11:  srcU>bmp'

         

         #A: Tim Walters
         #D: Simple parser of XPath, it doesn't handle the more complex statements but can be of use in some situations.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=545
ERROR:   ^(?<path>(/?(?<step>\w+))+)(?<predicate>\[(?<comparison>\s*(?<lhs>@\w+)\s*(?<operator><=|>=|<>|=|<|>)\s*(?<rhs>('[^']*'|"[^"]*"))\s*(and|or)?)+\])*$
    rx: '(?...' unimplemented: in "^(?<path>(/?(?<step>\w+))+)(?<predicate>\[(?<comparison>\s*(?<lhs>@\w+)\s*(?<operator><=|>=|<>|=|<|>)\s*(?<rhs>('[^']*'|"[^"]*"))\s*(and|or)?)+\])*$"

         

         #A: Jerry Schmersahl
         #D: Regular expression for validating a decimal IP address. Matches 4 groups of from 1 to 3 digits, where each group of digits ranges from 0 to 255 in value. Groups of digits must be separated by a single period (.) with no other formatting characters present. Uses conditional regex with lookahead syntax to prevent a match on a period following the final group of digits.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=547
ERROR:   ^(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.?\d)\.)){4}$
    rx: '(?...' unimplemented: in "^(?:(?:25[0-5]|2[0-4]\d|[01]\d\d|\d?\d)(?(?=\.?\d)\.)){4}$"

         

         #A: Jerry Schmersahl
         #D: Regular expression for validating a US currency string field. Matches an unlimited number of digits to the left of an optional decimal point. Digits to the left of the decimal point can optionally be formatted with commas, in standard US currency format. If the decimal point is present, it must be followed by exactly two digits to the right. Matches an optional preceding dollar sign. Uses regex lookahead to preclude leading zeros and to match the optional formatting comma.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=551
ERROR:   (?n:(^\$?(?!0,?\d)\d{1,3}(?=(?<1>,)|(?<1>))(\k<1>\d{3})*(\.\d\d)?)$)
    rx: '(?...' unimplemented: in "(?n:(^\$?(?!0,?\d)\d{1,3}(?=(?<1>,)|(?<1>))(\k<1>\d{3})*(\.\d\d)?)$)"

         

         #A: Jerry Schmersahl
         #D: Regular expression for validating a person's full name. Matches on two general formats: 1) first second third last (where first, second, and third names are optional and all present are separated by a space); 2) last, first second third (where second and third are optional, last is followed immediately by a comma and a space, and second, and third, if present, are separated by a space from each other and from first). First corresponds to surname and last corresponds to family name. Each name part is captured to a named group to facilitate program manipulation. Each name part must begin with an uppercase letter, followed by zero or more lowercase letters, except for the last name. Last name must begin with an uppercase letter, followed by one or more lowercase letters, but will match exceptions formatted like the following: McD..., MacD..., O'R... Only format is validated, not spelling. NOTE: This regular expression uses positive and negative regex lookahead to determine the general format of the name, i.e. the presence or the absence of the comma determines the general format that will match. Furthermore, this initial version is not designed to accommodate titles and things like "3rd".
         #U: http://regexlib.com/REDetails.aspx?regexp_id=552
ERROR:   (?n:(^(?(?![^,]+?,)((?<first>[A-Z][a-z]*?) )?((?<second>[A-Z][a-z]*?) )?((?<third>[A-Z][a-z]*?) )?)(?<last>[A-Z](('|[a-z]{1,2})[A-Z])?[a-z]+))(?(?=,)(, (?<first>[A-Z][a-z]*?))?( (?<second>[A-Z][a-z]*?))?( (?<third>[A-Z][a-z]*?))?)$)
    rx: '(?...' unimplemented: in "(?n:(^(?(?![^,]+?,)((?<first>[A-Z][a-z]*?) )?((?<second>[A-Z][a-z]*?) )?((?<third>[A-Z][a-z]*?) )?)(?<last>[A-Z](('|[a-z]{1,2})[A-Z])?[a-z]+))(?(?=,)(, (?<first>[A-Z][a-z]*?))?( (?<second>[A-Z][a-z]*?))?( (?<third>[A-Z][a-z]*?))?)$)"

         

         #A: Alanski Perryman
         #D: spam stopper, catches non english language flocks for letter A
         #U: http://regexlib.com/REDetails.aspx?regexp_id=554
expr 261: (À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|a|A|@|@|α|À|Á|Â|Ã|Ä|Å|À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|à|á|â|ã|ä|å)
tree:   (À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|a|A|@|@|α|À|Á|Â|Ã|Ä|Å|À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|à|á|â|ã|ä|å)
augmnt: ((À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|a|A|@|@|α|À|Á|Â|Ã|Ä|Å|À|Á|Â|Ã|Ä|Å|à|á|â|ã|ä|å|à|á|â|ã|ä|å)#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  Á  Ã  Á  Å  á  ä  Å  Ã  À  à  å  a  Â  Å  Ä  Â  Å  @  à  â  À  Å  å  ã
ex(1):  ä  å  ä  Á  a  a  Ã  Ä  ã  Â  Ã  Ä  Á  Å  Å  @  ã  á  @  Ã  ã  Ä  à  Ã
ex(2):  Â  Á  ã  @  Ã  α  Â  å  á  ä  Á  à  Â  Â  A  Á  ã  Ä  ã  Á  â  á  @  Á
ex(3):  α  ã  å  à  Á  Â  A  À  À  Ã  Ã  Ä  å  Å  À  â  à  À  Ä  Å  à  á  Ã  ä
ex(5):  α  à  Â  ä  à  à  Ã  å  Ã  Â  Ã  À  A  å  á  á  Á  a  À  å  Å  À  å  A
ex(8):  Å  A  â  ä  Â  å  Â  @  á  Ã  á  á  Ä  Á  Å  á  â  Á  ä  Á  A  å  Ã  ã
---------------- Examples from DFA ---------------
s1:  â

         

         #A: Alanski Perryman
         #D: Spam stopper, catches non english characters used in flocks.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=555
expr 262: (È|É|Ê|Ë|è|é|ê|ë|E|e|È|É|Ê|Ë|È|É|Ê|Ë|è|é|ê|ë|è|é|ê|ë)
tree:   (È|É|Ê|Ë|è|é|ê|ë|E|e|È|É|Ê|Ë|È|É|Ê|Ë|è|é|ê|ë|è|é|ê|ë)
augmnt: ((È|É|Ê|Ë|è|é|ê|ë|E|e|È|É|Ê|Ë|È|É|Ê|Ë|è|é|ê|ë|è|é|ê|ë)#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  Ê  É  ë  ë  È  È  É  è  Ë  È  É  E  Ë  È  Ë  é  ë  è  È  É  ë  ê  é  ê
ex(1):  È  È  ë  Ë  ê  Ê  É  ê  ë  Ë  ë  ê  è  Ë  é  ê  è  È  Ê  E  E  è  Ê  É
ex(2):  Ë  É  è  Ë  ê  è  È  É  É  è  É  ê  É  é  È  Ê  Ë  È  Ë  È  È  É  é  è
ex(3):  é  È  ë  ê  È  ê  È  Ê  È  Ë  È  è  È  ê  É  ê  ë  È  è  è  e  Ê  è  Ê
ex(5):  È  ê  Ê  È  é  ê  È  ë  È  Ë  E  Ë  é  è  ê  e  é  e  è  È  ê  Ë  é  Ë
ex(8):  É  Ë  ê  ë  E  ê  Ê  ë  ë  è  è  È  É  Ë  ê  Ê  è  é  É  È  Ê  é  Ê  É
---------------- Examples from DFA ---------------
s1:  e

         

         #A: Martin Matusiak
         #D: A very crude url pattern.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=563
expr 263: ^http://([a-zA-Z0-9_\-]+)([\.][a-zA-Z0-9_\-]+)+([/][a-zA-Z0-9\~\(\)_\-]*)+([\.][a-zA-Z0-9\(\)_\-]+)*$
tree:   ((((((((((ht)t)p):)/)/)[0-9A-Z_a-z-]+)(.[0-9A-Z_a-z-]+)+)(/[()0-9A-Z_a-z~-]*)+)(.[()0-9A-Z_a-z-]+)*)
augmnt: (((((((((((ht)t)p):)/)/)[0-9A-Z_a-z-]+)(.[0-9A-Z_a-z-]+)+)(/[()0-9A-Z_a-z~-]*)+)(.[()0-9A-Z_a-z-]+)*)#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://z.-/  http://U.V/  http://C.e/  http://F.3/  http://I.1/
ex(1):  http://1.5/M  http://5.e/  http://t.f/  http://l.Y/g  http://W.J/
ex(2):  http://yg.L/Q.b  http://T7.F.8/u~.M.Z  http://yo.5//vr.3.A
ex(3):  http://oB.fu/YSA/IEs  http://sMp.D/kNg  http://VT.bg/(i
ex(5):  http://8nYgM.tXAN.-Y.t.6/b/oX/0M/Acv70/VV.I.Fx.IA(._.s
ex(8):  http://DHHt-.Y.X.DUX6i.RG6.GhQ/yW_K//s1EhT9il.Y5f
---------------- Examples from DFA ---------------
s1:  http://9.7/
s13:  http://9.7/.o

         

         #A: Rohan Pathare
         #D: Validates date format by DD MMM YYYY. Validates days for each month also.
Ensures that month is uppercase.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=565
ERROR:   ^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC) ((1[6-9]|[2-9]\d)\d{2})$
    rx: '(?...' unimplemented: in "^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC) ((1[6-9]|[2-9]\d)\d{2})$"

         

         #A: Donald Schneider
         #U: http://regexlib.com/REDetails.aspx?regexp_id=567
ERROR:   ^[-+]?\d+(\.\d+)?|[-+]?\.\d+?$
    rx: prefer-fewer '?' unimplemented: in "^[-+]?\d+(\.\d+)?|[-+]?\.\d+?$"

         

         #A: Donald Schneider
         #D: matches 0 and all positive integers only. will accept comma formatting only.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=568
expr 264: ^(\d|,)*\d*$
tree:   (([0-9]|,)*[0-9]*)
augmnt: ((([0-9]|,)*[0-9]*)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):    5  ,  9    0    6  2  7  80  4  6  ,  0    0  6  7    ,1  48  ,3    2
ex(2):  20  8  19  ,,4  69    3,87    7  02    097  7  ,,00  029  441    824
ex(3):  ,4  91  88  30298  6,  50    0305  620  ,80433  ,,536  854  465  ,
ex(5):  8  1,,  6,5926  6,1162  ,,63  ,9,0  ,7,824593  ,942,9  ,,336  ,86699
ex(8):  ,,70,1981  7,67  ,,0672,401124926  ,,,,6537986800  ,42,2335  ,,,,073422
---------------- Examples from DFA ---------------
s0:  

         

         #A: Vladimir Klykov
         #D: This regular expression matches "c" format strings for printf/scanf functions. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=569
expr 265: %[\-\+0\s\#]{0,1}(\d+){0,1}(\.\d+){0,1}[hlI]{0,1}[cCdiouxXeEfgGnpsS]{1}
tree:   (((((%[\t-\r #+0-]?)[0-9]+?)(.[0-9]+)?)[Ihl]?)[CEGSXc-ginopsux])
augmnt: ((((((%[\t-\r #+0-]?)[0-9]+?)(.[0-9]+)?)[Ihl]?)[CEGSXc-ginopsux])#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  %o  %n  %d  %f  %f  %u  %C  %o  %G  %g  %S  %C  %o  %E  %G  %p  %c  %x
ex(1):  %.7G  %#.0hs  %#9In  %2p  %p  %#1hc  %.9Ip  %ls  %7d  %hu  %+4i  %#0d
ex(2):  %hx  %-S  %hE  %Io  %#5.8Id  %0g  %-d  %036.63c  %0g  % hu  %89lx  %0p
ex(3):  %621.986hd  %16x  %02G  %.77G  %E  %+073.74Ig  %0lx  %179.52In  %0879E
ex(5):  %04.12E  %5035.62563Ip  %48482.243Ii  %146p  %.83344lx  % 1939x
ex(8):  %66966lC  %.70hi  %X  %0lS  %14171ho  %.3044G  %03.771s
---------------- Examples from DFA ---------------
s1:  %c

         

         #A: Frederic Trudeau
         #D: This expression will help match Quebec's postal codes.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=570
expr 266: ^[a-zA-Z]{1}[0-9]{1}[a-zA-Z]{1}(\-| |){1}[0-9]{1}[a-zA-Z]{1}[0-9]{1}$
tree:   (((((([A-Za-z][0-9])[A-Za-z])(-| |()))[0-9])[A-Za-z])[0-9])
augmnt: ((((((([A-Za-z][0-9])[A-Za-z])(-| |()))[0-9])[A-Za-z])[0-9])#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  m4P 6J7  G8K9U2  o1U 5E6  i1D-2d8  Z8a 4D4  y8X 0M7  Q8y 0t4  K4o7m4
ex(1):  u7y9Y3  Z4S1W3  O6I-2Q8  E8D 1V9  r1m-6c2  M8r-9Y0  Y8K7x5  h0f-7W2
ex(2):  v7O-7y0  E7U-2x0  M4i 0k6  m5I-2z9  J2H 8D4  a0q 8e5  Q3b2X8  O8O-4v8
ex(3):  b3Y 6y8  Y7C9h0  Z0a-8J9  l6f3Q3  o8w 4W0  H4Y9B0  q3w 5j6  d1o 3U1
ex(5):  M5i 9H0  l9N 1G2  V1J 6Z3  S9r 5b6  Z1X 7I4  e2c 5v3  j7s 6M4  i3M 0F5
ex(8):  P4W-9n9  Y6k6I7  J2b1p9  l2V-7y0  d9C 8T2  k7P4I7  v1Z6m0  Q6U 2T6
---------------- Examples from DFA ---------------
s1:  b2A0T0

         

         #A: Sean Ziencik
         #D: String formater matching.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=571
expr 267: .\{\d\}
tree:   ((([\x01-\u007f]{)[0-9])})
augmnt: (((([\x01-\u007f]{)[0-9])})#)
length: 4 to 4
-------------------- Examples --------------------
ex(0):  ~{3}  9{7}  #{8}  [{2}  X{0}  R{6}  D{2}  !{7}  f{8}  M{9}  6{6}  ){8}
ex(1):  V{9}  O{6}  4{7}  ~{9}  [{3}  [{8}  B{3}  [{2}  T{2}  O{6}  p{8}  ${0}
ex(2):  M{9}  V{2}  P{3}  V{0}  ;{8}  '{5}  u{6}  h{2}  M{6}  ~{7}  N{0}  G{1}
ex(3):  /{2}  u{4}  .{0}  ;{8}  @{6}  U{9}  m{9}  x{4}  k{1}  D{8}  O{8}  h{0}
ex(5):  \\{4}  A{3}  i{3}  %{3}  >{6}  7{7}  '{9}  i{0}  t{3}  x{3}  w{3}  _{8}
ex(8):  R{4}  C{9}  B{2}  /{3}  x{8}  ({8}  ^{3}  7{4}  >{0}  G{6}  M{9}  >{1}
---------------- Examples from DFA ---------------
s1:  ?{8}

         

         #A: Andrew Yeaman
         #D: Validates hours and minutes. Allows for entry in the form of hours:minutes with optional minutes and optional hours indicator (H or h).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=574
expr 268: ^(\d{1,2})(\s?(H|h)?)(:([0-5]\d))?$
tree:   (([0-9]{1,2}([\t-\r ]?(H|h)?))(:([0-5][0-9]))?)
augmnt: (((([0-9][0-9]?)([\t-\r ]?(H|h)?))(:([0-5][0-9]))?)#)
length: 1 to 7
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6H  5H:14  6   20  9   07:29  16H:33  4H  6  0:01  19 h  2:39  4 
ex(2):  0h  47 H  74:03  20  40   5  89 h  1:46  8 H  2   62H:08  3h:46  8 h
ex(3):  3 H  8   04h  42:23  1 H:17  8:45  9  69h  11   78 :56  0 H:08  2:17
ex(5):  22 :50  73h:06  99  3h:17  92 :01  9 :27  9:57  9  6 :24  7   9:10  39
ex(8):  0   4h  43 H  3   83  99h  33 h:59  30  68H:13  6H  6   9:05  0 h:50  8
---------------- Examples from DFA ---------------
s1:  1
s3:  1 
s4:  19
s5:  1h
s6:  1:43

         

         #A: Neville Clark
         #U: http://regexlib.com/REDetails.aspx?regexp_id=575
expr 269: ^(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?$
tree:   ((([0-9]{1,3}(,[0-9]{3})*)|[0-9]+)([\x01-\u007f][0-9]+)?)
augmnt: (((((([0-9][0-9]?)[0-9]?)(,(([0-9][0-9])[0-9]))*)|[0-9]+)([\x01-\u007f][0-9]+)?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  6  6  7  8  7  8  6  0  4  8  0  6  0  2  8  4  3  0  4  4  8  7  0
ex(1):  8,746  78,091:4  8B4  3  222  6  9,991  9  2}9  4  7  837q9  0  56|9  7
ex(2):  08,908,641  68@6  892,981,209W8  58,209,28661  50c9  5  6  90  043B67
ex(3):  86  6)04  0  6S9  37\"0  66,260,699,116  119  781%602  94h4  2[77  66
ex(5):  3617  6699O63  89,179,275,760~19812  76,717,600  64,047,112,926,735,359
ex(8):  09,827,224,350,214,214,087,422183344333  5783819t2606188  4]36
---------------- Examples from DFA ---------------
s1:  0
s10:  04
s2:  0C4
s5:  0,8
s9:  045
s4:  0,89
s8:  0457
s3:  0,892

         

         #A: Wayne Herndon
         #D: Validates numeric input of 99,999,999 to 0 with or without commas. but no decimal places. Very simple, but not bad for a novice.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=576
ERROR:   ^\d{1,8}$|^\d{1,3},\d{3}$|^\d{1,2},\d{3},\d{3}$
    rx: Embedded '$' unimplemented: in "^\d{1,8}$|^\d{1,3},\d{3}$|^\d{1,2},\d{3},\d{3}$"

         

         #A: Uris Virott
         #D: Date validation in the dd/mm/yyyy format for years 1000+ (i.e 999 or 0999 not matching) and taking february leap years into account.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=578
expr 270: ((([0][1-9]|[12][\d])|[3][01])[-/]([0][13578]|[1][02])[-/][1-9]\d\d\d)|((([0][1-9]|[12][\d])|[3][0])[-/]([0][13456789]|[1][012])[-/][1-9]\d\d\d)|(([0][1-9]|[12][\d])[-/][0][2][-/][1-9]\d([02468][048]|[13579][26]))|(([0][1-9]|[12][0-8])[-/][0][2][-/][1-9]\d\d\d)
tree:   (((((((((((0[1-9])|([12][0-9]))|(3[01]))[/-])((0[13578])|(1[02])))[/-])[1-9])[0-9])[0-9])[0-9])|((((((((((0[1-9])|([12][0-9]))|(30))[/-])((0[13-9])|(1[012])))[/-])[1-9])[0-9])[0-9])[0-9])|(((((((((0[1-9])|([12][0-9]))[/-])0)2)[/-])[1-9])[0-9])(([02468][048])|([13579][26])))|((((((((((0[1-9])|([12][0-8]))[/-])0)2)[/-])[1-9])[0-9])[0-9])[0-9]))
augmnt: ((((((((((((0[1-9])|([12][0-9]))|(3[01]))[/-])((0[13578])|(1[02])))[/-])[1-9])[0-9])[0-9])[0-9])|((((((((((0[1-9])|([12][0-9]))|(30))[/-])((0[13-9])|(1[012])))[/-])[1-9])[0-9])[0-9])[0-9])|(((((((((0[1-9])|([12][0-9]))[/-])0)2)[/-])[1-9])[0-9])(([02468][048])|([13579][26])))|((((((((((0[1-9])|([12][0-8]))[/-])0)2)[/-])[1-9])[0-9])[0-9])[0-9]))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/1824  10-12-3620  09/02-5947  02-07-2907  04/02-8056  31/10-3123
ex(1):  30-06/7939  01-02/4357  31/05-2604  30-11-5078  19/02/7392  06/10/5981
ex(2):  03-02-2872  10/10-3270  21-02-1383  30/12-5564  16/12/6200  17-02/7817
ex(3):  20-10/6198  30-12-6021  30-03/2459  30-04/8219  31-10-1786  29/02/2876
ex(5):  18/02/3467  28-02-7674  10-02-5264  25-02-5660  03/02/6848  22-02-6760
ex(8):  09/02-6783  31/01-3188  02-01-7464  08/02-1504  06-02/3002  02-07/6110
---------------- Examples from DFA ---------------
s1:  02-06-4115

         

         #A: Marc Ziss
         #D: Matches either an explicitly input percentage or dollar amount, variety of formats of currency borrowed from another example on this board. This is useful when you want to prompt the user to specify either dollars or percent using only one field, and want to validate the entered text is one or the other.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=579
ERROR:   (^\$(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$|^\d{1,2}(\.\d{1,2})? *%$|^100%$)
    rx: Embedded '^' unimplemented: in "(^\$(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$|^\d{1,2}(\.\d{1,2})? *%$|^100%$)"

         

         #A: Michael Ash
         #D: This regex can be used to restrict passwords to a length of 8 to 20 aplhanumeric characters and select special characters. The password also can not start with a digit, underscore or special character and must contain at least one digit.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=580
ERROR:   ^(?=[^\d_].*?\d)\w(\w|[!@#$%]){7,20}
    rx: '(?...' unimplemented: in "^(?=[^\d_].*?\d)\w(\w|[!@#$%]){7,20}"

         

         #A: Michael Ash
         #D: YYYY/MM/DD hh:mm:ss format DateTime Regex.
This regex will validate a date, time or a datetime.
It will also capture the date fields and the time.
Dates are in the YYYY/MM/DD format and validated for months, number of days in a month and leap years (29/2)
Date field can be separated by matched periods(.), dashes(-) or forward slashes(/)
Time is either 12 hour AM/PM format (hh:mm:ss AM), where minutes and seconds are optional.
AM or PM required. or 24 hour military format (hh:mm:ss), from 00:00:00 to 23:59:59,
where hours and minutes fields are required, including leading 0 for hours less than 10.
Please refer to http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for additional info
Datetime is the above date and time formats separated by a space,
with the date first (YYYY/MM/DD hh:mm:ss)
!IMPORTANT NOTE: your regex engine must support lookbehinds and named groups to use this expression
         #T: yyyy/mm/dd hhMMss Date
         #U: http://regexlib.com/REDetails.aspx?regexp_id=581
ERROR:   ^(?ni:(?=\d)((?'year'((1[6-9])|([2-9]\d))\d\d)(?'sep'[/.-])(?'month'0?[1-9]|1[012])\2(?'day'((?<!(\2((0?[2469])|11)\2))31)|(?<!\2(0?2)\2)(29|30)|((?<=((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\2\3\2)29)|((0?[1-9])|(1\d)|(2[0-8])))(?:(?=\x20\d)\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2}))?)$
    rx: '(?...' unimplemented: in "^(?ni:(?=\d)((?'year'((1[6-9])|([2-9]\d))\d\d)(?'sep'[/.-])(?'month'0?[1-9]|1[012])\2(?'day'((?<!(\2((0?[2469])|11)\2))31)|(?<!\2(0?2)\2)(29|30)|((?<=((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|(16|[2468][048]|[3579][26])00)\2\3\2)29)|((0?[1-9])|(1\d)|(2[0-8])))(?:(?=\x20\d)\x20|$))?((?<time>((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2}))?)$"

         

         #A: Julio de la Yncera
         #D: This regular expression is for admitting wild card searches on Emails the wild card character is * and in my case will only allow to do the search when the * is place after the first 3 alphanumeric characters. If you need to modify this behavior change the {3,40} to {n,m} where n is how many characters before the * and m is the total number if characters.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=582
ERROR:   \w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$|^([0-9a-zA-Z'\.]{3,40})\*|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\.([0-9a-zA-Z']+)$|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\*+$|^$
    rx: invalid range: in "\w+[\w-\.]*\@\w+((-\w+)|(\w*))\.[a-z]{2,3}$|^([0-9a-zA-Z'\.]{3,40})\*|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\.([0-9a-zA-Z']+)$|([0-9a-zA-Z'\.]+)@([0-9a-zA-Z']+)\*+$|^$"

         

         #A: Senthil Gunabalan
         #D: This is a basic telephone number vaildation which needs a compulsory prefix of a '+' sign with three digits and followed by a hipen, another three digits and finally followed by another hipen and four more digits.
Regards,
Senthil Gunabalan
         #U: http://regexlib.com/REDetails.aspx?regexp_id=586
expr 271: ^[+][0-9]\d{2}-\d{3}-\d{4}$
tree:   ((((((+[0-9])[0-9]{2})-)[0-9]{3})-)[0-9]{4})
augmnt: (((((((+[0-9])([0-9][0-9]))-)(([0-9][0-9])[0-9]))-)((([0-9][0-9])[0-9])[0-9]))#)
length: 13 to 13
-------------------- Examples --------------------
ex(0):  +436-677-8879  +261-045-6016  +012-854-3009  +746-978-2708
ex(1):  +909-364-8394  +348-123-6206  +088-900-1991  +996-226-9399
ex(2):  +970-255-0497  +170-471-0078  +329-846-1037  +852-628-9327
ex(3):  +238-220-8286  +241-530-8320  +305-668-7079  +080-743-8393
ex(5):  +746-990-3200  +363-898-8174  +780-656-5926  +069-011-2151
ex(8):  +021-947-2482  +845-377-6964  +232-905-1073  +617-786-9992
---------------- Examples from DFA ---------------
s1:  +275-760-9419

         

         #A: Fabrizio Fortini
         #D: Validates a Italian mobile phone number with (or without) the International code
         #U: http://regexlib.com/REDetails.aspx?regexp_id=587
expr 272: ^([+]39)?((38[{8,9}|0])|(34[{7-9}|0])|(36[6|8|0])|(33[{3-9}|0])|(32[{8,9}]))([\d]{7})$
tree:   ((((+3)9)?(((38)[,089{|}])|((34)[0789{|}])|((36)[068|])|((33)[03-9{|}])|((32)[,89{}])))[0-9]{7})
augmnt: (((((+3)9)?(((38)[,089{|}])|((34)[0789{|}])|((36)[068|])|((33)[03-9{|}])|((32)[,89{}])))(((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 10 to 13
-------------------- Examples --------------------
ex(0):  32{6778887  3290045860  34{2785483  38}4689780  3682907464  38}3909136
ex(1):  3346208889  38{1099642  3489403788  3667697022  +3932{7034714
ex(2):  +3934}6287932  +393491068852  +393688652418  +393389305066  3689080074
ex(3):  32{6599043  38}3189838  +393685605926  38}1162151  +3936|0951602
ex(5):  +3932}3219055  +393337866999  3487921617  +393891941981  3336771796
ex(8):  3482607350  +3932,3798680  3288273224  +393682146087  +3932{3443333
---------------- Examples from DFA ---------------
s1:  3376436669

         

         #A: W. D.
         #D: U. S. or Canadian telephone number regular expression. <BR>
//           # Checks phone numbers for validity                           <BR>
//  [01]?    # optional '0', or '1'                                        <BR>
//  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
//  \(?      # optional parentheses                                        <BR>
//  [2-9]    # first # of the area code must not be a '0' or '1'           <BR>
//  \d{2}    # next 2 digits of area code can be 0-9                       <BR>
//  \)?      # optional parentheses                                        <BR>
//  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
//  \d{3}    # 3-digit prefix                                              <BR>
//  [- .]?   # optional separator is either a dash, a space, or a period.  <BR>
//  \d{4}    # 4-digit station number                                      <BR>
         #U: http://regexlib.com/REDetails.aspx?regexp_id=588
expr 273: ^[01]?[- .]?\(?[2-9]\d{2}\)?[- .]?\d{3}[- .]?\d{4}$
tree:   ((((((((([01]?[ .-]?)(?)[2-9])[0-9]{2}))?)[ .-]?)[0-9]{3})[ .-]?)[0-9]{4})
augmnt: (((((((((([01]?[ .-]?)(?)[2-9])([0-9][0-9])))?)[ .-]?)(([0-9][0-9])[0-9]))[ .-]?)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 16
-------------------- Examples --------------------
ex(0):  4436567788  2798261004  5860162012  7854830094  9468978027  8842907464
ex(1):  0(794)8213262  288 119 9964  693)0378873  1(9705564979  1(514780 0846
ex(2):   710852-2209  852 3083209  0-427-0807433   953-8564074  -232536.9838
ex(3):  0 551)6739109  1819) 4828459  1-(442)-5517336  1(869)6638792
ex(5):  1877) 0667427  701)9267350  1-456).800.4848   233)-432 0873
ex(8):  -(660-8983613  7614366966  -(278)3678002  997562-0961  -591)4633304
---------------- Examples from DFA ---------------
s1:  7071385733

         

         #A: Amos Hurd
         #D: UK phone number. Allows 3, 4 or 5 digit regional prefix, with 8, 7 or 6 digit phone number respectively, plus optional 3 or 4 digit extension number prefixed with a # symbol. Also allows optional brackets surrounding the regional prefix and optional spaces between appropriate groups of numbers.
         #T: UK Phone Number
         #U: http://regexlib.com/REDetails.aspx?regexp_id=589
expr 274: ^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$
tree:   ((((((((((?0)[0-9]{4}))?)[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{3})|((((((((?0)[0-9]{3}))?)[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{4})|((((((((?0)[0-9]{2}))?)[\t-\r ]?)[0-9]{4})[\t-\r ]?)[0-9]{4}))(([\t-\r ]?#)([0-9]{4}|[0-9]{3}))?)
augmnt: (((((((((((?0)((([0-9][0-9])[0-9])[0-9])))?)[\t-\r ]?)(([0-9][0-9])[0-9]))[\t-\r ]?)(([0-9][0-9])[0-9]))|((((((((?0)(([0-9][0-9])[0-9])))?)[\t-\r ]?)(([0-9][0-9])[0-9]))[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))|((((((((?0)([0-9][0-9])))?)[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))[\t-\r ]?)((([0-9][0-9])[0-9])[0-9])))(([\t-\r ]?#)(((([0-9][0-9])[0-9])[0-9])|(([0-9][0-9])[0-9])))?)#)
length: 11 to 21
-------------------- Examples --------------------
ex(0):  03656778887  02610045860  02012785483  09474689780  00842907464
ex(1):  (094)8212 6206  0891199 9964  0939)3788735#9702  (00497) 347 007
ex(2):  0932) 1429106  (08022 286 418 #3209  00668 799800#839  0536)8564074
ex(3):  (0786560 2600  (0162) 986 8910 #2199  (0482459 7269
ex(5):  0687) 179 7527  (01981796677 #0666  0760 1129260 #592  0563)6809948
ex(8):  07329793344 #5783  (09026188 436 #9614  06669693504#036
---------------- Examples from DFA ---------------
s1:  01433349702
s14:  01433349702#432
s27:  01433349702#4327

         

         #A: Jon Galloway
         #D: This pattern matches a decimal value with up to 3 digits after the decimal. Comma is allowed as a thousands separator but not required. N/A is also allowed.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=590
ERROR:   (^N/A$)|(^[-]?(\d+)(\.\d{0,3})?$)|(^[-]?(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{1,3})?)$)
    rx: Embedded '^' unimplemented: in "(^N/A$)|(^[-]?(\d+)(\.\d{0,3})?$)|(^[-]?(\d{1,3},(\d{3},)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{1,3})?)$)"

         

         #A: Cliff Schneide
         #D: After looking for a date regular expression, I could not find one that meet my need, so I develop one that handles 1 or 2 digets in the month and day and also handle feb up to 29.  This will allow both / and - for separators, which is what I needed.  I hope this helps others too.  Thanks,
Cliff Schneide
         #U: http://regexlib.com/REDetails.aspx?regexp_id=591
expr 275: ^((((0?[13578])|(1[02]))[\/|\-]?((0?[1-9]|[0-2][0-9])|(3[01])))|(((0?[469])|(11))[\/|\-]?((0?[1-9]|[0-2][0-9])|(30)))|(0?[2][\/\-]?(0?[1-9]|[0-2][0-9])))[\/\-]?\d{2,4}$
tree:   (((((((0?[13578])|(1[02]))[/|-]?)(((0?[1-9])|([012][0-9]))|(3[01])))|((((0?[469])|(11))[/|-]?)(((0?[1-9])|([012][0-9]))|(30)))|(((0?2)[/-]?)((0?[1-9])|([012][0-9]))))[/-]?)[0-9]{2,4})
augmnt: ((((((((0?[13578])|(1[02]))[/|-]?)(((0?[1-9])|([012][0-9]))|(3[01])))|((((0?[469])|(11))[/|-]?)(((0?[1-9])|([012][0-9]))|(30)))|(((0?2)[/-]?)((0?[1-9])|([012][0-9]))))[/-]?)((([0-9][0-9])[0-9]?)[0-9]?))#)
length: 4 to 10
-------------------- Examples --------------------
ex(0):  33178  7710  9716  63048  60689  42842  9477  21091  53194  101326
ex(1):  1|0622  10088750  06164997  02/8030  93052  093014  103102  630-53
ex(2):  531-3965  22444  1030531  1030/80  2/96901  08/18-091  2/0782  02-6442
ex(3):  0518-1675  11|30/81  1130/60  07/11-92  11-8/378  2/2272  1031324
ex(5):  0208-199  1/30/36  043096  1125-67  61765  02-01393  3-59194  11-1730
ex(8):  11/28237  9-141448  6|30857  0201658  02-01/26  11/30-950  131-617
---------------- Examples from DFA ---------------
s1:  1124
s6:  1134
s15:  1382
s14:  13826
s13:  138269

         

         #A: Amos Hurd
         #D: UK mobile phone number, with optional +44 national code. Allows optional brackets and spaces at appropriate positions.
         #T: UK Mobile Phone Number
         #U: http://regexlib.com/REDetails.aspx?regexp_id=592
expr 276: ^(\+44\s?7\d{3}|\(?07\d{3}\)?)\s?\d{3}\s?\d{3}$
tree:   ((((((((((+4)4)[\t-\r ]?)7)[0-9]{3})|(((((?0)7)[0-9]{3}))?))[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{3})
augmnt: (((((((((((+4)4)[\t-\r ]?)7)(([0-9][0-9])[0-9]))|(((((?0)7)(([0-9][0-9])[0-9])))?))[\t-\r ]?)(([0-9][0-9])[0-9]))[\t-\r ]?)(([0-9][0-9])[0-9]))#)
length: 11 to 16
-------------------- Examples --------------------
ex(0):  +447677888798  +447458601620  07854830094  07897802708  +447464077843
ex(1):  (07123206088  +44 7910 642689  (07378735 769  07556979 034
ex(2):  07246793799  +447106852 022  +447524 530832  +44 7682 799800
ex(3):  +44 7599432053  +44 7817378465  +447006 011215  (07738)951021
ex(5):  +447321 551733  +44 7699 663879  +44 7275760 419  +44 7467 796066
ex(8):  (07924563 868  +447482 224 507  +447460734297  07443) 578 193
---------------- Examples from DFA ---------------
s1:  07446993604

         

         #A: Amos Hurd
         #D: Modified version of UK phone number regular expression. Now allows +44 national code in addition to extension numbers of 3 or 4 digits. Previous expression was: ^((\(?0\d{4}\)?\s?\d{3}\s?\d{3})|(\(?0\d{3}\)?\s?\d{3}\s?\d{4})|(\(?0\d{2}\)?\s?\d{4}\s?\d{4}))(\s?#(\d{4}|\d{3}))?$
         #T: Modified UK Phone Number
         #U: http://regexlib.com/REDetails.aspx?regexp_id=593
expr 277: ^(((\+44\s?\d{4}|\(?0\d{4}\)?)\s?\d{3}\s?\d{3})|((\+44\s?\d{3}|\(?0\d{3}\)?)\s?\d{3}\s?\d{4})|((\+44\s?\d{2}|\(?0\d{2}\)?)\s?\d{4}\s?\d{4}))(\s?\#(\d{4}|\d{3}))?$
tree:   (((((((((((+4)4)[\t-\r ]?)[0-9]{4})|((((?0)[0-9]{4}))?))[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{3})|(((((((((+4)4)[\t-\r ]?)[0-9]{3})|((((?0)[0-9]{3}))?))[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{4})|(((((((((+4)4)[\t-\r ]?)[0-9]{2})|((((?0)[0-9]{2}))?))[\t-\r ]?)[0-9]{4})[\t-\r ]?)[0-9]{4}))(([\t-\r ]?#)([0-9]{4}|[0-9]{3}))?)
augmnt: ((((((((((((+4)4)[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))|((((?0)((([0-9][0-9])[0-9])[0-9])))?))[\t-\r ]?)(([0-9][0-9])[0-9]))[\t-\r ]?)(([0-9][0-9])[0-9]))|(((((((((+4)4)[\t-\r ]?)(([0-9][0-9])[0-9]))|((((?0)(([0-9][0-9])[0-9])))?))[\t-\r ]?)(([0-9][0-9])[0-9]))[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))|(((((((((+4)4)[\t-\r ]?)([0-9][0-9]))|((((?0)([0-9][0-9])))?))[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))[\t-\r ]?)((([0-9][0-9])[0-9])[0-9])))(([\t-\r ]?#)(((([0-9][0-9])[0-9])[0-9])|(([0-9][0-9])[0-9])))?)#)
length: 11 to 22
-------------------- Examples --------------------
ex(0):  +446778887982  00458601620  +444830094746  08027084290  +447784390913
ex(1):  +44088900 9910 #2689  (03788 570 970  (04979)347 007  00846 376524
ex(2):  08022 286 418 #3209  +448270 908074 #367  048 44076599
ex(3):  000 01161511#389  +440219 772822  (072 44231905 #361  +449992636792#952
ex(5):  (06006747604#249  +44 3592625379  +44 8427324335  +441468732297#443
ex(8):  +44 6696144366  +44 504 570 7080  +44 2656511961  (09138630 044
---------------- Examples from DFA ---------------
s1:  05736522285
s14:  05736522285#149
s31:  05736522285#1494

         

         #A: Amos Hurd
         #D: UK vehicle registration system currently in use (as defined by the DVLA and put into effect from September 2001, and therefore does not allow registrations prior to this date).
         #T: Current UK Vehicle Registration
         #U: http://regexlib.com/REDetails.aspx?regexp_id=595
expr 278: ^([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3}$
tree:   ((((([A-HK-PRSVWY][A-HJ-PR-Y])[\t-\r ]?)((0[2-9])|([1-9][0-9])))[\t-\r ]?)[A-HJ-PR-Z]{3})
augmnt: (((((([A-HK-PRSVWY][A-HJ-PR-Y])[\t-\r ]?)((0[2-9])|([1-9][0-9])))[\t-\r ]?)(([A-HJ-PR-Z][A-HJ-PR-Z])[A-HJ-PR-Z]))#)
length: 7 to 9
-------------------- Examples --------------------
ex(0):  YO25HZK  DS38EAN  AA06NNC  CU87EVW  DS07GZM  BD28UOH  AN05ENC  GE07MGP
ex(1):  SO14SXK  NW06EEM  NE05 TSF  AY06 XLU  FD 09 XOX  BO 09 OAF  WE 08 AOP
ex(2):  NH06AEG  MJ 59DSH  EB06 NWK  MR32KXA  PS 06 ZDA  OG07TDJ  AN04 AXF
ex(3):  SF 03 SBE  FF 07ZCZ  GH38PXU  PK 06PBM  WS 39EFF  RG21AMN  YJ72SKZ
ex(5):  RD80 LKZ  DS14 KSV  YJ07GTR  WL59 TPU  RV34 YXO  NR 09 ZFL  KL08NUO
ex(8):  FW 05 UUR  LS 02WLH  EX07 YGN  WU 43TSP  SC 05 WHZ  SS 75 LYX  EX 02RWO
---------------- Examples from DFA ---------------
s1:  BE06UWO

         

         #A: Amos Hurd
         #D: UK vehicle registration system prior to September 2001. Allows both older suffix and the later prefix formats in simple form, with optional spaces.
         #T: Older UK Vehicle Registration
         #U: http://regexlib.com/REDetails.aspx?regexp_id=596
expr 279: ^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})$
tree:   ((((([A-Z]{3}[\t-\r ]?)([0-9]{3}|[0-9]{2}|d))[\t-\r ]?)[A-Z])|(((([A-Z][\t-\r ]?)([0-9]{3}|[0-9]{2}|[0-9]))[\t-\r ]?)[A-Z]{3}))
augmnt: (((((((([A-Z][A-Z])[A-Z])[\t-\r ]?)((([0-9][0-9])[0-9])|([0-9][0-9])|d))[\t-\r ]?)[A-Z])|(((([A-Z][\t-\r ]?)((([0-9][0-9])[0-9])|([0-9][0-9])|[0-9]))[\t-\r ]?)(([A-Z][A-Z])[A-Z])))#)
length: 5 to 9
-------------------- Examples --------------------
ex(0):  UBYdZ  K879EEA  S45MIG  C01WXE  W3OIP  ZMGdH  UOHdA  ZENdE  PLM39O
ex(1):  FJUdF  KIUdM  BOW d F  S2OPL  L3 YIP  T 69 KON  K9 TNW  I 0ZUY  O 46FOR
ex(2):  B 9 DSQ  JJAd N  KKY82K  A85 OUR  IRD06Y  JCT 80R  LNA 67 K  Y56YUP
ex(3):  VPG 983D  C 046 CLP  GWS90 Y  NFV 673T  G 6MNT  G 482KYZ  L 696SSN
ex(5):  BFS 699 G  XOG dN  D 52 IJX  ZTY d Y  ZXF 006C  G6UPY  B9EUT  B592UQB
ex(8):  H48VTU  GND 21B  TSQd S  VZF344 H  O 381 TAK  KSRdS  O 629JIM  HKE66H
---------------- Examples from DFA ---------------
s1:  V6QAZ

         

         #A: Shaune Stark
         #D: Email validation based on Rob Eberhardt's (Thanks, Rob!) email expression, but allows single letter subdomains...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=599
expr 280: ^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@(([0-9a-zA-Z])+([-\w]*[0-9a-zA-Z])*\.)+[a-zA-Z]{2,9})$
tree:   (((([0-9A-Za-z]([.0-9A-Z_a-z-]*[0-9A-Za-z])*)@)(([0-9A-Za-z]+([0-9A-Z_a-z-]*[0-9A-Za-z])*).)+)[A-Za-z]{2,9})
augmnt: ((((([0-9A-Za-z]([.0-9A-Z_a-z-]*[0-9A-Za-z])*)@)(([0-9A-Za-z]+([0-9A-Z_a-z-]*[0-9A-Za-z])*).)+)(((((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  H@L.by  s@o.KD  k@K.dU  I@q.Wi  J@d.BK  i@D.BC  9@U.yU  C@B.MF  b@H.tX
ex(1):  G0@r.yTYZWO  J@J.SEmVrmd  O@7.rHXx  xM7@WZ.vmpvOey  v@9k.MiSPI
ex(2):  B@5_XGkN.O.QqmsM  tXd6I@x.dSpGbQo  h@WcF5bKg.BjBjj  n@5.lzN
ex(3):  5DxzNYL@5bQZv6fV7E.zkpV.JUsplfy  0gFto@sg62F26lc.kkfyT.kWueg0xI.GYgxI
ex(5):  d23A-Ve2rfcREDft-Qg@8MekX6ii565EhQEqf48EhhY0.o07bGW3RF_3rr.DnIpLkhE
ex(8):  T@Y8gWsn_CeNKDrEA.Mqh3c_USqXjrLV8g6bIJ2q3Wc1qzx4pVgKwE5aliJ-o2XqLL.etBkp
---------------- Examples from DFA ---------------
s1:  G@9.bv
s14:  G@9.bvP
s13:  G@9.bvPh
s12:  G@9.bvPhF
s11:  G@9.bvPhFe
s10:  G@9.bvPhFeP
s9:  G@9.bvPhFePw
s8:  G@9.bvPhFePwG

         

         #A: Sebastian Hiller
         #D: Not a 100% email validation. It doesn't work with IP-Adresses, but it's good for most common cases. At least I hope so.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=600
expr 281: ^((?:(?:(?:\w[\.\-\+]?)*)\w)+)\@((?:(?:(?:\w[\.\-\+]?){0,62})\w)+)\.(\w{2,6})$
tree:   (((((([0-9A-Z_a-z][+.-]?)*[0-9A-Z_a-z])+@)(([0-9A-Z_a-z][+.-]?){0,62}[0-9A-Z_a-z])+).)[0-9A-Z_a-z]{2,6})
augmnt: ((((((([0-9A-Z_a-z][+.-]?)*[0-9A-Z_a-z])+@)((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([0-9A-Z_a-z][+.-]?)?([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)([0-9A-Z_a-z][+.-]?)?)[0-9A-Z_a-z])+).)((((([0-9A-Z_a-z][0-9A-Z_a-z])[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?)[0-9A-Z_a-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  H@L.qV  2@3._k  z@l.uq  B@N.Td  m@i.Dp  e@b.zW  U@c.CU  B@x.bT  d@0.IM
ex(1):  5+r@L+YF-vO-u3.iP+c.vF-u.9-eN+_R+a+fcA-n.Sa
ex(2):  mW@z-f.J.gF+7._gn-kO3+Ko-N+f.kej-K+P-3s+oe.r.Z33fM
ex(3):  KO-8.sM.o4cD@x-3.np+b-bM+c.V1+Di.U-z-S+qf+Jr.2t-fgAal+Oab.E9xA_
ex(5):  K+Zn-xzS@m-1-1_zl+Fw+vwWPQ.2+npo-nE+G3p+I-y+N+v+Mh-B+nnci.C+lEzsh9Df7qIQ.d-i+ix.p+Zf+6-K-ai+f.N+r+VW-RS+97.Jl.LPp-Q.FL-R-KZW-x-5.X+11.HkY.6wZzVtKlY-h55-oU+5+1.p6xn.5-_-n.S.t-af.vNP.7a+e-Pl.E-Iz.q+7-Hl+n-y0+h.xe.kOz
ex(8):  sA.a7vlD+297YK-1tvyW+J8.jyi-9iXF-XW.2on+5@z-P.XPjIzU+jY+z9.5+M-A+g-2x.r7.QM-VeA-SvX.Cr+Sd-Y+J-c+hJLZ+dFOP8-px+67-c.Z.6-im-dU.G.o-Lps+F1U1Q-7+gXYX.b.d-M.X+_.d.Bo-D.x-J+yPz5-J+4uC+Z.2c+ng1q9-o-TJm-GX-tY3.u-B-o-2-G.RQ-8v+8.C+c-f-AFr+c.dP-n-V-GuPP+Xjim_.5JQ+aI.n5+jv5-I.9d-b-yT8l-_-xJ.RYJ.oSB0
---------------- Examples from DFA ---------------
s1:  Y@i.OA
s10:  Y@i.OAh
s9:  Y@i.OAhP
s8:  Y@i.OAhP8
s7:  Y@i.OAhP8t
s11:  Y@i.O.N-e.x-x.o+n.A+u.u+a.9+O.z-a.8-l.G+E.E+I.e+F.6+6.B+J.a-0.j+l.M+8.w+y.N-A.m+9.A+_.3+V.8-i.0-T.P-X.X-i.c+J.K+S.7+j.G-Z.3-l.3.d_
s19:  Y@i.O.N-e.x-x.o+n.A+u.u+a.9+O.z-a.8-l.G+E.E+I.e+F.6+6.B+J.a-0.j+l.M+8.w+y.N-A.m+9.A+_.3+V.8-i.0-T.P-X.X-i.c+J.K+S.7+j.G-Z.3-l.3.d_e
s18:  Y@i.O.N-e.x-x.o+n.A+u.u+a.9+O.z-a.8-l.G+E.E+I.e+F.6+6.B+J.a-0.j+l.M+8.w+y.N-A.m+9.A+_.3+V.8-i.0-T.P-X.X-i.c+J.K+S.7+j.G-Z.3-l.3.d_eV
s17:  Y@i.O.N-e.x-x.o+n.A+u.u+a.9+O.z-a.8-l.G+E.E+I.e+F.6+6.B+J.a-0.j+l.M+8.w+y.N-A.m+9.A+_.3+V.8-i.0-T.P-X.X-i.c+J.K+S.7+j.G-Z.3-l.3.d_eVo
s16:  Y@i.O.N-e.x-x.o+n.A+u.u+a.9+O.z-a.8-l.G+E.E+I.e+F.6+6.B+J.a-0.j+l.M+8.w+y.N-A.m+9.A+_.3+V.8-i.0-T.P-X.X-i.c+J.K+S.7+j.G-Z.3-l.3.d_eVoH

         

         #A: Alan Ferrandiz Langley
         #D: A regular expression that validates the any format of fixed telephone numbers inside Lima - Peru, including an optional extension of at least one number up to four numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=602
ERROR:   ^([2-9])(\d{2})(-?|\040?)(\d{4})( ?|\040?)(\d{1,4}?|\040?)$
    rx: prefer-fewer '?' unimplemented: in "^([2-9])(\d{2})(-?|\040?)(\d{4})( ?|\040?)(\d{1,4}?|\040?)$"

         

         #A: Alan Ferrandiz Langley
         #D: A regular expression that validates the any of the new formats of cellular phones numbers in Peru, allows an optional dash in the middle of the number.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=603
expr 282: ^([8-9])([1-9])(\d{2})(-?|\040?)(\d{4})$
tree:   (((([89][1-9])[0-9]{2})(-?| ?))[0-9]{4})
augmnt: ((((([89][1-9])([0-9][0-9]))(-?| ?))((([0-9][0-9])[0-9])[0-9]))#)
length: 8 to 9
-------------------- Examples --------------------
ex(0):  81366778  87792610  81580162  88275483  85944689  94020842  94744077
ex(1):  81833348  88232062  82880119  96094226  84390378  8973 7697  81250497
ex(2):  88809084  8510 8524  8287 7998  9420 6885  86800982  8552-5308
ex(3):  8670 0800  9433-3675  97345644  8846 0432  8753-8983  8974 0465
ex(5):  92111511  94679109  9360-9477  84824593  94264423  8290 0733  88746699
ex(8):  9317 7527  8119-8128  9964-1796  8766-2760  89014926  8235-9246
---------------- Examples from DFA ---------------
s1:  99484732

         

         #A: Matt Wickless
         #D: This pattern handles currency including the following:
optional period with two or more digits to the right of the period
optional commas
optional dollar sign($)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=604
expr 283: ^(\$)?((\d+)|(\d{1,3})(\,\d{3})*)(\.\d{2,})?$
tree:   (($?([0-9]+|([0-9]{1,3}(,[0-9]{3})*)))(.[0-9]{2,})?)
augmnt: ((($?([0-9]+|((([0-9][0-9]?)[0-9]?)(,(([0-9][0-9])[0-9]))*)))(.([0-9][0-9]+))?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  6  6  7  8  7  8  6  0  4  8  0  6  0  2  8  4  3  0  4  4  8  7  0
ex(1):  4  $4.84  $9.64  $93  22  0  9  190,642  9.94  7.57  67  $0
ex(2):  0,103,685  8.37  $42  $8  $8,982,652  $3.030  $8  $90  $39,753  $5  7
ex(3):  $87,804,560,926  90.615  $83,109,160  $47,228,593.296  321.510
ex(5):  921  $55,601,419,128,964  $76  427  011  2,503.262563  $80
ex(8):  424,873,229.834  33,838,939,260,188,843  $296.63  9666936.485703670
---------------- Examples from DFA ---------------
s1:  6
s10:  65
s9:  650
s8:  6.16
s12:  6501
s4:  6,194

         

         #A: JP Honeywell
         #D: Validates *usable* US telephone numbers (possibly Canadian and Caribbean Islands as well?) Numbers cannot beginning with zero, one, (any number)11, or 555. It will allow either a hyphen, space or period as a separator.
Technically (and contrary to popular belief) most 555- numbers ARE valid numbers [see http://www.nanpa.com/nas/public/form555MasterReport.do?method=display555MasterReport ] but they are unlikely to be used by normal folks. Therefore, excluding them with this regex is useful to prevent bogus/fraudulent telephone numbers in forms.
FYI, the fictitious 555- numbers used in the movies and TV are only in the range of 555-0100 through 555-0199. Not very many, huh?
         #U: http://regexlib.com/REDetails.aspx?regexp_id=605
ERROR:   ^(?!\d[1]{2}|[5]{3})([2-9]\d{2})([. -]*)\d{4}$
    rx: '(?...' unimplemented: in "^(?!\d[1]{2}|[5]{3})([2-9]\d{2})([. -]*)\d{4}$"

         

         #A: Don Johnston
         #D: US Phone Number: This regular expression for US phone numbers conforms to NANP A-digit and D-digit requirments (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. Format validation accepts 10-digits without delimiters, optional parens on area code, and optional spaces or dashes between area code, central office code and station code. Acceptable formats include 2225551212, 222 555 1212, 222-555-1212, (222) 555 1212, (222) 555-1212, etc. You can add/remove formatting options to meet your needs.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=607
expr 284: ^(?:\([2-9]\d{2}\)\ ?|[2-9]\d{2}(?:\-?|\ ?))[2-9]\d{2}[- ]?\d{4}$
tree:   (((((((((([2-9])[0-9]{2}))) ?)|(([2-9][0-9]{2})(-?| ?)))[2-9])[0-9]{2})[ -]?)[0-9]{4})
augmnt: ((((((((((([2-9])([0-9][0-9])))) ?)|(([2-9]([0-9][0-9]))(-?| ?)))[2-9])([0-9][0-9]))[ -]?)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 14
-------------------- Examples --------------------
ex(0):  (365)9788879  (810)8586016  (927)3483009  (668)9802708  (507)6407784
ex(1):  (548) 3260620  (490) 7919964  (489) 203-8735  676 825-4979
ex(2):  (864)3765246  (393) 7812091  (685) 8229828  (441) 888 0930  866707-8007
ex(3):  444-459-3200  5639831743  404-6596006  301815-8673  (309) 221 7724
ex(5):  (219) 307-1747  (499)6638792  617 952 1941  212-246-7960  (467)5607011
ex(8):  (998)809 8482  722-3071432  460-422-8334  (533) 638-9026  (388)636-6629
---------------- Examples from DFA ---------------
s1:  4073370024

         

         #A: Sebastian Hiller
         #D: Captures Submatches, problem:domainname length can be longer than 64 chars, because every [a-zA-Z0-9][\.\-_] is only countet as one char.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=608
expr 285: ^((?:(?:(?:[a-zA-Z0-9][\.\-\+_]?)*)[a-zA-Z0-9])+)\@((?:(?:(?:[a-zA-Z0-9][\.\-_]?){0,62})[a-zA-Z0-9])+)\.([a-zA-Z0-9]{2,6})$
tree:   (((((([0-9A-Za-z][+._-]?)*[0-9A-Za-z])+@)(([0-9A-Za-z][._-]?){0,62}[0-9A-Za-z])+).)[0-9A-Za-z]{2,6})
augmnt: ((((((([0-9A-Za-z][+._-]?)*[0-9A-Za-z])+@)((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((([0-9A-Za-z][._-]?)?([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)([0-9A-Za-z][._-]?)?)[0-9A-Za-z])+).)((((([0-9A-Za-z][0-9A-Za-z])[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?)[0-9A-Za-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  H@L.qV  2@3.Oz  c@b.uq  B@N.Td  m@i.Dp  e@b.zW  U@c.CU  B@x.bT  d@0.IM
ex(1):  5.r@L.YF.vO.u3-iP.nvF-u_9_N-IR_ffcA_A.aGd
ex(2):  kmeV.T@M_7_7.a.n.6kO3-Ko_If.kej-f-3s_ue.Z3-MLe2.w-65Vge-y4.rm_C_k.v_f.xlF.d_0T-j.V.c-NkV_BOk.4KU.g.sn0
ex(3):  Zn.Xl@m_1.1czl-Fw_vwWPQ.b_po.nE_G3p.Fy_Qv_Mh.lo4ci_C.0Ezsh9Df7qIQ_d_i_ix-p_f-6.1ai.f_N_r_VW.RS_S7_l-LP8e.JFL.qKZW_x_5.R11_HkY.6wZzVtKlY.F.5.X.5_5-l.exnP5
ex(5):  Y+85@z_z.XPjIzU-Y_z9-5-D_A_h_x_r7.vM-v-eA.vX_Cr-Sd_0J_c_LLZ_dFOP8_px_67-pZ.6_im_U.G-yLps_F1UQ-7_CXTYX.7d.M.X-O_c-o_D-x_J_yPz5.J.xC.Z_Z.nx.q9.VTJm.tX-tAY3.4B-o-2.DQ-v-8C_c.f-AFr.F.P_n.g.uPP_jimW.J8i-E-kn5.jv5-O9d-b-yT8l_jxJ-YiB_DbUPx-st.I-Z.uoW3
ex(8):  j.Mf-w@VU_P.p_69f.K_K_Y-V_Qj_10_SV-L_A8_U_Qx9irO_on.n-r.v.JKhjhb_qI-U-6I.119njH.CS9.4.B68fh.Q-S_I_ml_zNF_FuKvU_O_W_Fcr-CPXxiH_Wf_9h_oBP.z-k.dv_w_jiryA.pI87yoo_7-k.S.KKln_If_Js7.v.h-Q-KHXYY.5_a_rc-Vw_4K_k_ehJhF.y_l_Ah5_t_c.W8Y2-Q-EUeNg_X4.vDn_PeBR-uorBgu0.2-S8O6DX_xb.UYg_f6_KGt.yJsqh_SS-Ip_M6_x7.2.yNE.pl.z_6z-a.XV-y.V.uphy.MA-R.00.mox.85VwKQ
---------------- Examples from DFA ---------------
s1:  D@Z.Jt
s10:  D@Z.JtI
s9:  D@Z.JtI9
s8:  D@Z.JtI9P
s7:  D@Z.JtI9PV
s11:  D@Z.J.v-b.P-e.W-n.R-W.U_U.o-U.F_m.6-W.1_3.k_k.s-K.M_3.B-i.W-f.O_A.0-t.3-U.N_d.q_1.5-z.X-J.j_E.e_P.Q-P.D-R.U-B.K-D.z-i.g_W.o-r.i.qo
s19:  D@Z.J.v-b.P-e.W-n.R-W.U_U.o-U.F_m.6-W.1_3.k_k.s-K.M_3.B-i.W-f.O_A.0-t.3-U.N_d.q_1.5-z.X-J.j_E.e_P.Q-P.D-R.U-B.K-D.z-i.g_W.o-r.i.qoi
s18:  D@Z.J.v-b.P-e.W-n.R-W.U_U.o-U.F_m.6-W.1_3.k_k.s-K.M_3.B-i.W-f.O_A.0-t.3-U.N_d.q_1.5-z.X-J.j_E.e_P.Q-P.D-R.U-B.K-D.z-i.g_W.o-r.i.qoif
s17:  D@Z.J.v-b.P-e.W-n.R-W.U_U.o-U.F_m.6-W.1_3.k_k.s-K.M_3.B-i.W-f.O_A.0-t.3-U.N_d.q_1.5-z.X-J.j_E.e_P.Q-P.D-R.U-B.K-D.z-i.g_W.o-r.i.qoifZ
s16:  D@Z.J.v-b.P-e.W-n.R-W.U_U.o-U.F_m.6-W.1_3.k_k.s-K.M_3.B-i.W-f.O_A.0-t.3-U.N_d.q_1.5-z.X-J.j_E.e_P.Q-P.D-R.U-B.K-D.z-i.g_W.o-r.i.qoifZW

         

         #A: Danny Garber
         #D: Validates a date expression (or empty value) in CCYYMMDD format, checking a leap year from 00000101 A.D. to 99991231
         #U: http://regexlib.com/REDetails.aspx?regexp_id=609
ERROR:   ^(((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|((\d{2}[02468][048]|\d{2}[13579][26]))0229)){0,8}$
    rx: complexity 624 exceeds limit of 500: in "^(((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|((\d{2}[02468][048]|\d{2}[13579][26]))0229)){0,8}$"

         

         #A: Michael Ash
         #D: DateTime Validator. This RE validates both dates and/or times patterns. Days in Feb. are also validated for Leap years. Dates: in  dd/mm/yyyy or d/m/yy format between 1/1/1600 - 31/12/9999. Leading zeroes are optional. Date separators can be either matching dashes(-), slashes(/) or periods(.) Times: in the hh:MM:ss AM/PM 12 hour format (12:00 AM - 11:59:59 PM) or hh:MM:ss military time format (00:00:00 - 23:59:59). The 12 hour time format: 1) may have a leading zero for the hour. 2) Minutes and seconds are optional for the 12 hour format 3) AM or PM is required and case sensitive. Military time 1) must have a leading zero for all hours less than 10. 2) Minutes are manditory. 3) seconds are optional. Datetimes: combination of the above formats. A date first then a time separated by a space. ex) dd/mm/yyyy hh:MM:ss This RE is an variation of one of my other Datetime (mm/dd/yyyy) validator already in this library http://www.regexlib.com/REDetails.aspx?regexp_id=369, so the same rules for leap year apply. All 4 digit year and all two digit years except 00, which might not be a leap year.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=610
ERROR:   ^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$
    rx: '(?...' unimplemented: in "^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d(?:(?=\x20\d)\x20|$))?(((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$"

         

         #A: Ernesto Giralt
         #D: Capture the attributes "content", "name" and "scheme" used to parse META tags from any XHTML or HTML input. Useful for developers looking for expresions to parse & get Dublin Core single elements from HTML pages.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=611
ERROR:   (<meta\s+)*((name\s*=\s*("|')(?<name>[^'("|')]*)("|')){1}|content\s*=\s*("|')(?<content>[^'("|')]*)("|')|scheme\s*=\s*("|')(?<scheme>[^'("|')]*)("|'))
    rx: '(?...' unimplemented: in "(<meta\s+)*((name\s*=\s*("|')(?<name>[^'("|')]*)("|')){1}|content\s*=\s*("|')(?<content>[^'("|')]*)("|')|scheme\s*=\s*("|')(?<scheme>[^'("|')]*)("|'))"

         

         #A: c raz
         #D: Wrote this to accept either decimals or zero, but not whole numbers - for a particular project...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=612
ERROR:   (^([0-9]+[.]+[0-9]+)|(0)$)
    rx: Embedded '^' unimplemented: in "(^([0-9]+[.]+[0-9]+)|(0)$)"

         

         #A: Amos Hurd
         #D: UK vehicle registration system. This is the obvious combination of two previous expressions posted here, to merge the older system with the current system.
         #T: Combined UK Vehicle Registration
         #U: http://regexlib.com/REDetails.aspx?regexp_id=617
expr 286: ^([A-Z]{3}\s?(\d{3}|\d{2}|d{1})\s?[A-Z])|([A-Z]\s?(\d{3}|\d{2}|\d{1})\s?[A-Z]{3})|(([A-HK-PRSVWY][A-HJ-PR-Y])\s?([0][2-9]|[1-9][0-9])\s?[A-HJ-PR-Z]{3})$
tree:   ((((([A-Z]{3}[\t-\r ]?)([0-9]{3}|[0-9]{2}|d))[\t-\r ]?)[A-Z])|(((([A-Z][\t-\r ]?)([0-9]{3}|[0-9]{2}|[0-9]))[\t-\r ]?)[A-Z]{3})|((((([A-HK-PRSVWY][A-HJ-PR-Y])[\t-\r ]?)((0[2-9])|([1-9][0-9])))[\t-\r ]?)[A-HJ-PR-Z]{3}))
augmnt: (((((((([A-Z][A-Z])[A-Z])[\t-\r ]?)((([0-9][0-9])[0-9])|([0-9][0-9])|d))[\t-\r ]?)[A-Z])|(((([A-Z][\t-\r ]?)((([0-9][0-9])[0-9])|([0-9][0-9])|[0-9]))[\t-\r ]?)(([A-Z][A-Z])[A-Z]))|((((([A-HK-PRSVWY][A-HJ-PR-Y])[\t-\r ]?)((0[2-9])|([1-9][0-9])))[\t-\r ]?)(([A-HJ-PR-Z][A-HJ-PR-Z])[A-HJ-PR-Z])))#)
length: 5 to 9
-------------------- Examples --------------------
ex(0):  UBYdZ  ND05EEA  AA06NNC  Y27EVW  SA04ZMG  GS03KCA  Z746EQP  MGP09T
ex(1):  JUO23K  UIE88 W  D 0 SUY  M399STB  YIP 07Z  AR26AFL  TNW 14Q  U2 GKI
ex(2):  MJ 59DSH  JAQ523K  RK 08 GDK  CD80 AXA  W7TDJ  W743 XFN  N 348ZCI
ex(3):  HF46 UZC  EDT78Q  XUC dS  YY66NFV  EY 03HRP  AR 57 HKZ  FJ 76 HSN
ex(5):  BFS 699 G  DE 06 DXY  P60 GZT  XOE dZ  GH 02CHG  NUOd A  OC07 DXB
ex(8):  MT 02VTU  GND 21B  LY05 SYV  F344 HFO  RD 13 KUK  WM06 POL  BE06UXW
---------------- Examples from DFA ---------------
s1:  N0AIF

         

         #A: Rohan Pathare
         #U: http://regexlib.com/REDetails.aspx?regexp_id=618
ERROR:   ^((31(?! (FEB|APR|JUN|SEP|NOV)))|(30|29)|(0[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)$
    rx: '(?...' unimplemented: in "^((31(?! (FEB|APR|JUN|SEP|NOV)))|(30|29)|(0[1-9])|1\d|2[0-8]) (JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)$"

         

         #A: Michael Ash
         #D: This regex can be used to split the values of a comma delimitted list. List elements may be quoted, unquoted or empty.  Commas inside a pair of  quotation marks are not matched. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=621
ERROR:   ,(?!(?<=(?:^|,)\s*\x22(?:[^\x22]|\x22\x22|\\\x22)*,)(?:[^\x22]|\x22\x22|\\\x22)*\x22\s*(?:,|$))
    rx: '(?...' unimplemented: in ",(?!(?<=(?:^|,)\s*\x22(?:[^\x22]|\x22\x22|\\\x22)*,)(?:[^\x22]|\x22\x22|\\\x22)*\x22\s*(?:,|$))"

         

         #A: Brad Dobyns
         #D: Version 1.3.0: I needed a regexp to validate URL's without the ht(f)tp(s):// and include North American domains (like .us and .ca) and there didn't seem to be one available...so I created one. It will also work with ASP QueryStrings and anchor URL's. If you have a problem with the expression or have any suggestions to improve, please write me and let me know. Added .uk domain and expression now allows for URLs that contain JSP session IDs. 4/14/04 - added ability to include URLs that start with server names.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=622
ERROR:   ^(((ht|f)tp(s?))\://)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk)(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&%\$#\=~_\-]+))*$
    rx: Embedded '$' unimplemented: in "^(((ht|f)tp(s?))\://)?(www.|[a-zA-Z].)[a-zA-Z0-9\-\.]+\.(com|edu|gov|mil|net|org|biz|info|name|museum|us|ca|uk)(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\;\?\'\\\+&%\$#\=~_\-]+))*$"

         

         #A: Valmir Cinquini
         #D: Brazilian Postal Box RegExp validation
         #U: http://regexlib.com/REDetails.aspx?regexp_id=623
expr 287: \d{5}\-\d{3}
tree:   (([0-9]{5}-)[0-9]{3})
augmnt: ((((((([0-9][0-9])[0-9])[0-9])[0-9])-)(([0-9][0-9])[0-9]))#)
length: 9 to 9
-------------------- Examples --------------------
ex(0):  44365-778  88798-610  04586-162  01278-483  00947-689  78027-842
ex(1):  84390-136  47839-334  82123-620  62088-900  11991-996  42268-399
ex(2):  57076-702  25560-979  17034-140  07803-908  46410-768  52462-793
ex(3):  91068-523  80220-828  65241-530  88320-305  06682-079  90800-433
ex(5):  34885-440  74659-043  20053-318  98381-437  80465-059  26006-901
ex(8):  67389-095  16021-947  72482-845  93772-964  42321-055  10733-174
---------------- Examples from DFA ---------------
s1:  63687-216

         

         #A: blake wolf
         #D: Use in a .net Regex.Split() to pull the protocol out of a url into the first array entry.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=624
ERROR:   (^[a-zA-Z0-9]+://)
    rx: Embedded '^' unimplemented: in "(^[a-zA-Z0-9]+://)"

         

         #A: gregg durishan
         #D: currency format that allows optional $, optional "-"(MinusSignNegative) OR "()" (ParenNegative) but not both, optional cents, and optional commas separating thousands. Minus sign can be before or after $, but parens must be outside the $. UPDATED: now fails to match a "$" without any further numbers
         #U: http://regexlib.com/REDetails.aspx?regexp_id=625
ERROR:   ^\$?\-?([1-9]{1}[0-9]{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\-?\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\(\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))\)$
    rx: Embedded '$' unimplemented: in "^\$?\-?([1-9]{1}[0-9]{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\-?\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))$|^\(\$?([1-9]{1}\d{0,2}(\,\d{3})*(\.\d{0,2})?|[1-9]{1}\d{0,}(\.\d{0,2})?|0(\.\d{0,2})?|(\.\d{1,2}))\)$"

         

         #A: Thomas Keegan
         #D: for checking a value is between 99.99% and 00.00%
         #U: http://regexlib.com/REDetails.aspx?regexp_id=627
expr 288: ^((\d{1,2})?([.][\d]{1,2})?){1}[%]{1}$
tree:   (([0-9]{1,2}?(.[0-9]{1,2})?)%)
augmnt: (((([0-9][0-9]?)?(.([0-9][0-9]?))?)%)#)
length: 1 to 6
-------------------- Examples --------------------
ex(0):  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %  %
ex(1):  %  28.80%  44%  7%  0%  04%  .8%  01.48%  43%  .3%  %  %  %  %  91%  6%
ex(2):  94%  8%  50.90%  .6%  71.3%  4%  %  .8%  .36%  2%  .3%  9.2%  0%  28%
ex(3):  %  .48%  0%  %  00%  %  .9%  %  .89%  .3%  %  6%  4.9%  2%  61%  .14%
ex(5):  6.2%  %  01%  51.63%  1.1%  .9%  2%  %  97.66%  %  .05%  .3%  48%  92%
ex(8):  92.26%  9.82%  9%  77.0%  %  %  %  01%  2%  5.9%  %  .9%  %  9%  %  2%
---------------- Examples from DFA ---------------
s1:  %

         

         #A: Gaurav Shrivastava
         #D: Validates windows path and invalidates UNC path
         #U: http://regexlib.com/REDetails.aspx?regexp_id=631
ERROR:   ^([a-zA-Z]\:) (\\{1}| ((\\{1}) [^\\] ([^/:*?<>"|]*(?<![ ])))+)$
    rx: '(?...' unimplemented: in "^([a-zA-Z]\:) (\\{1}| ((\\{1}) [^\\] ([^/:*?<>"|]*(?<![ ])))+)$"

         

         #A: Carlos R. L. Rodrigues
         #D: Matches files extension
         #U: http://regexlib.com/REDetails.aspx?regexp_id=635
ERROR:   (?!\.)[a-z]{1,4}$
    rx: '(?...' unimplemented: in "(?!\.)[a-z]{1,4}$"

         

         #A: Eric Lewis
         #D: Used to dynamically find acronyms in a sentence. The first pair of brackets gets the acronym, the second gets the text after the acronym.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=636
ERROR:   ([A-Zäöü0-9\/][^a-z\:\,\(\)]*[A-Zäöü0-9])($|[\.\:\,\;\)\-\ \+]|s\b)
    rx: Embedded '$' unimplemented: in "([A-Zäöü0-9\/][^a-z\:\,\(\)]*[A-Zäöü0-9])($|[\.\:\,\;\)\-\ \+]|s\b)"

         

         #A: Ricardo Gonzalez
         #D: Filter US telephone numbers.  This particular one accepts only area code 939 or 787.  Area code parentesis or hyphens optional.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=641
expr 289: ^(\()?(787|939)(\)|-)?([0-9]{3})(-)?([0-9]{4}|[0-9]{4})$
tree:   ((((((?(((78)7)|((93)9)))()|-)?)[0-9]{3})-?)([0-9]{4}|[0-9]{4}))
augmnt: (((((((?(((78)7)|((93)9)))()|-)?)(([0-9][0-9])[0-9]))-?)(((([0-9][0-9])[0-9])[0-9])|((([0-9][0-9])[0-9])[0-9])))#)
length: 10 to 13
-------------------- Examples --------------------
ex(0):  7875678887  9391005860  9391275483  7877469780  7874297464  7874399136
ex(1):  9396208900  (939-4229399  787873-7697  787049-7034  (787032-4641
ex(2):  939-688-8022  939524-3088  (787)682-9908  787)936-6348  939746-0432
ex(3):  7870590069  (939-1983891  939219-7248  787-726-4232  (7877337478
ex(5):  939752-1941  (939)677-6006  787)470-4926  939-2466379  787-8483224
ex(8):  7873343336  (787-0261889  787)296-4366  939-504-7036  (787485-6562
---------------- Examples from DFA ---------------
s1:  7874949397

         

         #A: Dave Turner
         #D: Telephone number filter - use to catch and replace phone numbers where you don't want them to appear.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=642
expr 290: (\+)?([-\._\(\) ]?[\d]{3,20}[-\._\(\) ]?){2,10}
tree:   (+?(([ ()._-]?[0-9]{3,20})[ ()._-]?){2,10})
augmnt: ((+?((((((((((([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?))(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?)(([ ()._-]?((((((((((((((((((([0-9][0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))[ ()._-]?)?))#)
length: 6 to 221
-------------------- Examples --------------------
ex(0):  443656  778887  982610  045860  162012  785483  009474  689780  270842
ex(1):  -439168932288801909397_7077571041 90807292984)88588283-.5060904396564
ex(2):  8009330242473478333789989863646634787609261_17193034194- 32701131730675
ex(3):  + 9060795714( 174754259008301372410621944805558284876_852780088
ex(5):  165805189141569714.40185533777827234826960724.97470061340415600760582.162178440274)2380905069744-
ex(8):  +258974447482262520921).76010757984334 790468
---------------- Examples from DFA ---------------
s1:  017911
s9:  017911-
s203:  0179115
s187:  017)785
s202:  01791158
s186:  017)7851
s233:  017)785 
s201:  017911581
s185:  017)78517
s200:  0179115815
s184:  017)785175
s199:  01791158157
s183:  017)7851757
s167:  017)785 211
s198:  017911581572
s182:  017)78517572
s166:  017)785 2117
s234:  017)785 211)
s197:  0179115815727
s181:  017)785175728
s165:  017)785 21172
s196:  01791158157271
s180:  017)7851757281
s164:  017)785 211727
s195:  017911581572710
s179:  017)78517572812
s163:  017)785 2117271
s147:  017)785 211)439
s194:  0179115815727107
s178:  017)785175728125
s162:  017)785 21172715
s146:  017)785 211)4390
s235:  017)785 211)439-
s193:  01791158157271074
s177:  017)7851757281252
s161:  017)785 211727151
s145:  017)785 211)43903
s192:  017911581572710743
s176:  017)78517572812526
s160:  017)785 2117271515
s144:  017)785 211)439030
s191:  0179115815727107435
s175:  017)785175728125265
s159:  017)785 21172715156
s143:  017)785 211)4390301
s127:  017)785 211)439-600
s190:  01791158157271074357
s174:  017)7851757281252653
s158:  017)785 211727151560
s142:  017)785 211)43903011
s126:  017)785 211)439-6004
s236:  017)785 211)439-600.
s189:  017911581572710743571
s173:  017)78517572812526531
s157:  017)785 2117271515609
s141:  017)785 211)439030119
s125:  017)785 211)439-60040
s188:  0179115815727107435717
s172:  017)785175728125265313
s156:  017)785 21172715156098
s140:  017)785 211)4390301199
s124:  017)785 211)439-600401
s171:  017)7851757281252653134
s155:  017)785 211727151560984
s139:  017)785 211)43903011998
s123:  017)785 211)439-6004014
s107:  017)785 211)439-600.157
s170:  017)78517572812526531341
s154:  017)785 2117271515609845
s138:  017)785 211)439030119982
s122:  017)785 211)439-60040144
s106:  017)785 211)439-600.1577
s237:  017)785 211)439-600.157.
s169:  017)785175728125265313410
s153:  017)785 21172715156098457
s137:  017)785 211)4390301199826
s121:  017)785 211)439-600401448
s105:  017)785 211)439-600.15776
s168:  017)7851757281252653134108
s152:  017)785 211727151560984575
s136:  017)785 211)43903011998268
s120:  017)785 211)439-6004014488
s104:  017)785 211)439-600.157769
s151:  017)785 2117271515609845757
s135:  017)785 211)439030119982680
s119:  017)785 211)439-60040144884
s103:  017)785 211)439-600.1577697
s87:  017)785 211)439-600.157.877
s150:  017)785 21172715156098457576
s134:  017)785 211)4390301199826804
s118:  017)785 211)439-600401448846
s102:  017)785 211)439-600.15776971
s86:  017)785 211)439-600.157.8772
s238:  017)785 211)439-600.157.877(
s149:  017)785 211727151560984575760
s133:  017)785 211)43903011998268048
s117:  017)785 211)439-6004014488461
s101:  017)785 211)439-600.157769711
s85:  017)785 211)439-600.157.87720
s148:  017)785 2117271515609845757605
s132:  017)785 211)439030119982680488
s116:  017)785 211)439-60040144884614
s100:  017)785 211)439-600.1577697114
s84:  017)785 211)439-600.157.877209
s131:  017)785 211)4390301199826804888
s115:  017)785 211)439-600401448846147
s99:  017)785 211)439-600.15776971144
s83:  017)785 211)439-600.157.8772096
s67:  017)785 211)439-600.157.877(609
s130:  017)785 211)43903011998268048889
s114:  017)785 211)439-6004014488461478
s98:  017)785 211)439-600.157769711440
s82:  017)785 211)439-600.157.87720962
s66:  017)785 211)439-600.157.877(6091
s239:  017)785 211)439-600.157.877(609(
s129:  017)785 211)439030119982680488898
s113:  017)785 211)439-60040144884614786
s97:  017)785 211)439-600.1577697114404
s81:  017)785 211)439-600.157.877209626
s65:  017)785 211)439-600.157.877(60916
s128:  017)785 211)4390301199826804888987
s112:  017)785 211)439-600401448846147862
s96:  017)785 211)439-600.15776971144049
s80:  017)785 211)439-600.157.8772096260
s64:  017)785 211)439-600.157.877(609169
s111:  017)785 211)439-6004014488461478627
s95:  017)785 211)439-600.157769711440499
s79:  017)785 211)439-600.157.87720962606
s63:  017)785 211)439-600.157.877(6091699
s47:  017)785 211)439-600.157.877(609(262
s110:  017)785 211)439-60040144884614786273
s94:  017)785 211)439-600.1577697114404993
s78:  017)785 211)439-600.157.877209626066
s62:  017)785 211)439-600.157.877(60916991
s46:  017)785 211)439-600.157.877(609(2621
s240:  017)785 211)439-600.157.877(609(262(
s109:  017)785 211)439-600401448846147862732
s93:  017)785 211)439-600.15776971144049937
s77:  017)785 211)439-600.157.8772096260667
s61:  017)785 211)439-600.157.877(609169918
s45:  017)785 211)439-600.157.877(609(26210
s108:  017)785 211)439-6004014488461478627321
s92:  017)785 211)439-600.157769711440499372
s76:  017)785 211)439-600.157.87720962606675
s60:  017)785 211)439-600.157.877(6091699182
s44:  017)785 211)439-600.157.877(609(262104
s91:  017)785 211)439-600.1577697114404993727
s75:  017)785 211)439-600.157.877209626066755
s59:  017)785 211)439-600.157.877(60916991825
s43:  017)785 211)439-600.157.877(609(2621042
s27:  017)785 211)439-600.157.877(609(262(077
s90:  017)785 211)439-600.15776971144049937278
s74:  017)785 211)439-600.157.8772096260667551
s58:  017)785 211)439-600.157.877(609169918259
s42:  017)785 211)439-600.157.877(609(26210423
s26:  017)785 211)439-600.157.877(609(262(0773
s207:  017)785 211)439-600.157.877(609(262(077(
s89:  017)785 211)439-600.157769711440499372783
s73:  017)785 211)439-600.157.87720962606675518
s57:  017)785 211)439-600.157.877(6091699182590
s41:  017)785 211)439-600.157.877(609(262104231
s25:  017)785 211)439-600.157.877(609(262(07739
s88:  017)785 211)439-600.1577697114404993727832
s72:  017)785 211)439-600.157.877209626066755189
s56:  017)785 211)439-600.157.877(60916991825908
s40:  017)785 211)439-600.157.877(609(2621042316
s24:  017)785 211)439-600.157.877(609(262(077397
s71:  017)785 211)439-600.157.8772096260667551892
s55:  017)785 211)439-600.157.877(609169918259084
s39:  017)785 211)439-600.157.877(609(26210423162
s23:  017)785 211)439-600.157.877(609(262(0773975
s70:  017)785 211)439-600.157.87720962606675518926
s54:  017)785 211)439-600.157.877(6091699182590842
s38:  017)785 211)439-600.157.877(609(262104231627
s22:  017)785 211)439-600.157.877(609(262(07739751
s69:  017)785 211)439-600.157.877209626066755189266
s53:  017)785 211)439-600.157.877(60916991825908422
s37:  017)785 211)439-600.157.877(609(2621042316276
s21:  017)785 211)439-600.157.877(609(262(077397517
s68:  017)785 211)439-600.157.8772096260667551892663
s52:  017)785 211)439-600.157.877(609169918259084229
s36:  017)785 211)439-600.157.877(609(26210423162768
s20:  017)785 211)439-600.157.877(609(262(0773975176
s51:  017)785 211)439-600.157.877(6091699182590842293
s35:  017)785 211)439-600.157.877(609(262104231627684
s19:  017)785 211)439-600.157.877(609(262(07739751760
s50:  017)785 211)439-600.157.877(60916991825908422935
s34:  017)785 211)439-600.157.877(609(2621042316276840
s18:  017)785 211)439-600.157.877(609(262(077397517609
s49:  017)785 211)439-600.157.877(609169918259084229355
s33:  017)785 211)439-600.157.877(609(26210423162768406
s17:  017)785 211)439-600.157.877(609(262(0773975176090
s48:  017)785 211)439-600.157.877(6091699182590842293550
s32:  017)785 211)439-600.157.877(609(262104231627684064
s16:  017)785 211)439-600.157.877(609(262(07739751760904
s31:  017)785 211)439-600.157.877(609(2621042316276840646
s15:  017)785 211)439-600.157.877(609(262(077397517609040
s30:  017)785 211)439-600.157.877(609(26210423162768406469
s14:  017)785 211)439-600.157.877(609(262(0773975176090400
s29:  017)785 211)439-600.157.877(609(262104231627684064696
s13:  017)785 211)439-600.157.877(609(262(07739751760904006
s28:  017)785 211)439-600.157.877(609(2621042316276840646962
s12:  017)785 211)439-600.157.877(609(262(077397517609040064
s11:  017)785 211)439-600.157.877(609(262(0773975176090400641
s10:  017)785 211)439-600.157.877(609(262(07739751760904006410

         

         #A: Andrew Lee
         #D: I wrote up this regular expression to fetch the href attribute found in <a> tags as well as a few other HTML tags.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=646
expr 291: href=[\"\'](http:\/\/|\.\/|\/)?\w+(\.\w+)*(\/\w+(\.\w+)?)*(\/|\?\w*=\w*(&\w*=\w*)*)?[\"\']
tree:   (((((((((((hr)e)f)=)["'])(((((((ht)t)p):)/)/)|(./)|/)?)[0-9A-Z_a-z]+)(.[0-9A-Z_a-z]+)*)((/[0-9A-Z_a-z]+)(.[0-9A-Z_a-z]+)?)*)(/|((((?[0-9A-Z_a-z]*)=)[0-9A-Z_a-z]*)(((&[0-9A-Z_a-z]*)=)[0-9A-Z_a-z]*)*))?)["'])
augmnt: ((((((((((((hr)e)f)=)["'])(((((((ht)t)p):)/)/)|(./)|/)?)[0-9A-Z_a-z]+)(.[0-9A-Z_a-z]+)*)((/[0-9A-Z_a-z]+)(.[0-9A-Z_a-z]+)?)*)(/|((((?[0-9A-Z_a-z]*)=)[0-9A-Z_a-z]*)(((&[0-9A-Z_a-z]*)=)[0-9A-Z_a-z]*)*))?)["'])#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  href='2\"  href=\"c'  href=\"J\"  href=\"p'  href=\"c'  href='H'
ex(1):  href='6/R.u'  href=\"A\"  href='/9.a\"  href='http://7/b'  href='/u.k'
ex(2):  href='fd/\"  href='GF.dk.D\"  href=\"/t._.IZ/\"  href='http://g.D/7\"
ex(3):  href='./d.Y4Q.Ly.I/wbZ.4ZK/8/z5.xLM\"  href=\"/e.xW/c._mp\"
ex(5):  href=\"Jd.OSf.T/WKJNF.o?Jsvf=QJe&kMyR3=eFKuG&DsK='
ex(8):  href=\"5OY.EGkAe0_I.n/J/S4FPE.qm1'
---------------- Examples from DFA ---------------
s1:  href='K'

         

         #A: hayri hayri
         #U: http://regexlib.com/REDetails.aspx?regexp_id=647
ERROR:   ^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d)?(\x20?((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$
    rx: '(?...' unimplemented: in "^(?=\d)(?:(?:31(?!.(?:0?[2469]|11))|(?:30|29)(?!.0?2)|29(?=.0?2.(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00)))(?:\x20|$))|(?:2[0-8]|1\d|0?[1-9]))([-./])(?:1[012]|0?[1-9])\1(?:1[6-9]|[2-9]\d)?\d\d)?(\x20?((0?[1-9]|1[012])(:[0-5]\d){0,2}(\x20[AP]M))|([01]\d|2[0-3])(:[0-5]\d){1,2})?$"

         

         #A: Roman Lukyanenko
         #D: It matches .jpg files. It allows for a dot in the path. A dot may occur in such directories as: C:\Documents and Settings\roman.lukyanenko\Desktop\stuff\b_card2.txt or C:\Windows\Microsoft.NET etc
         #U: http://regexlib.com/REDetails.aspx?regexp_id=648
expr 292: ^(([a-zA-Z]:)|(\\{2}\w+)\$?)(\\(\w[\w ]*.*))+\.(txt|TXT)$
tree:   ((((([A-Za-z]:)|((\{2}[0-9A-Z_a-z]+)$?))(\(([0-9A-Z_a-z][ 0-9A-Z_a-z]*)[\x01-\u007f]*))+).)(((tx)t)|((TX)T)))
augmnt: (((((([A-Za-z]:)|(((\\)[0-9A-Z_a-z]+)$?))(\(([0-9A-Z_a-z][ 0-9A-Z_a-z]*)[\x01-\u007f]*))+).)(((tx)t)|((TX)T)))#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  W:\\q.TXT  D:\\K.TXT  \\\\N\\T.txt  Z:\\b.TXT  U:\\B.txt  U:\\K.txt
ex(1):  \\\\p\\Y.txt  r:\\wp.TXT  \\\\u\\P.TXT  M:\\3.TXT  \\\\n\\J7.TXT
ex(2):  i:\\N].TXT  z:\\2 q\\d.txt  \\\\5\\a5Q\\.txt  \\\\B\\2E7m.txt
ex(3):  q:\\WS1\\B7\\gBVxS.TXT  \\\\_U\\cG6].txt  L:\\6ijdq.TXT
ex(5):  \\\\X$\\_kU5qBy\\_M7ho5X\\d7RZwm.TXT  \\\\Vsg\\nXvrcUo\\_Bylxow.txt
ex(8):  N:\\lRb+_sj<L\\2&\"B!!~.txt
---------------- Examples from DFA ---------------
s1:  l:\\_.TXT

         

         #A: Roman Lukyanenko
         #D: I know its simple, yet there was no Russian postal code regular expression on the RegExLib. Just in case some needs to know the format.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=649
expr 293: ^[0-9]{6}
tree:   [0-9]{6}
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])#)
length: 6 to 6
-------------------- Examples --------------------
ex(0):  443656  778887  982610  045860  162012  785483  009474  689780  270842
ex(1):  077843  909136  478394  334821  232620  620888  900119  910996  422689
ex(2):  788873  570769  702255  604979  170347  140078  032908  464103  768524
ex(3):  279981  420910  688523  802209  828652  418530  883209  305066  827079
ex(5):  433839  367536  348856  440746  599043  200536  318983  817437  804656
ex(8):  069901  162151  198673  891095  160219  947724  822845  937726  964423
---------------- Examples from DFA ---------------
s1:  107336

         

         #A: Artu
         #D: it's for date in the format: "yyyymmdd" and it validates the empty string and some special values (00000000,88888888,99999999) but you can delete these last values. It works with leap years.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=651
expr 294: ^(((\d{4})(0[13578]|10|12)(0[1-9]|[12][0-9]|3[01]))|((\d{4})(0[469]|11)([0][1-9]|[12][0-9]|30))|((\d{4})(02)(0[1-9]|1[0-9]|2[0-8]))|(([02468][048]00)(02)(29))|(([13579][26]00) (02)(29))|(([0-9][0-9][0][48])(02)(29))|(([0-9][0-9][2468][048])(02)(29))|(([0-9][0-9][13579][26])(02)(29))|(00000000)|(88888888)|(99999999))?$
tree:   ((([0-9]{4}((0[13578])|(10)|(12)))((0[1-9])|([12][0-9])|(3[01])))|(([0-9]{4}((0[469])|(11)))((0[1-9])|([12][0-9])|(30)))|(([0-9]{4}(02))((0[1-9])|(1[0-9])|(2[0-8])))|((((([02468][048])0)0)(02))(29))|(((((([13579][26])0)0) )(02))(29))|((((([0-9][0-9])0)[48])(02))(29))|((((([0-9][0-9])[2468])[048])(02))(29))|((((([0-9][0-9])[13579])[26])(02))(29))|(((((((00)0)0)0)0)0)0)|(((((((88)8)8)8)8)8)8)|(((((((99)9)9)9)9)9)9))?
augmnt: ((((((([0-9][0-9])[0-9])[0-9])((0[13578])|(10)|(12)))((0[1-9])|([12][0-9])|(3[01])))|((((([0-9][0-9])[0-9])[0-9])((0[469])|(11)))((0[1-9])|([12][0-9])|(30)))|((((([0-9][0-9])[0-9])[0-9])(02))((0[1-9])|(1[0-9])|(2[0-8])))|((((([02468][048])0)0)(02))(29))|(((((([13579][26])0)0) )(02))(29))|((((([0-9][0-9])0)[48])(02))(29))|((((([0-9][0-9])[2468])[048])(02))(29))|((((([0-9][0-9])[13579])[26])(02))(29))|(((((((00)0)0)0)0)0)0)|(((((((88)8)8)8)8)8)8)|(((((((99)9)9)9)9)9)9))?#)
length: 0 to 9
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      00000000  26100907  20120228  44000229        9200 0229  5200 0229
ex(2):  40000229                      01080229  42080229      00000000
ex(3):    91701110    00000000    88888888      32080229      99999999        
ex(5):      88888888      00000000    1200 0229        44040229      5200 0229
ex(8):  9200 0229      9200 0229      11560229  99999999  77241215  77720229
---------------- Examples from DFA ---------------
s0:  
s32:  00000000

         

         #A: Roman Lukyanenko
         #D: Matches the copyright symbol (©). Pretty simple, yet I dont think existed on RegExLib before. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=652
expr 295: \xA9
tree:   ©
augmnt: (©#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©
ex(1):  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©
ex(2):  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©
ex(3):  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©
ex(5):  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©
ex(8):  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©  ©
---------------- Examples from DFA ---------------
s1:  ©

         

         #A: Steve Wagner
         #D: Validates dates formatted like "dd.mm.yyyy" or "dd.mm.yy". Also the separators "/" and "-" are validated "ok". This expression does not check leap years!
I did this expression cause I could hardly find any date regex that supports those "dot-formats".
         #U: http://regexlib.com/REDetails.aspx?regexp_id=653
ERROR:    ^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\d{2}|\d{4})$
    rx: Embedded '^' unimplemented: in " ^(0{0,1}[1-9]|[12][0-9]|3[01])[- /.](0{0,1}[1-9]|1[012])[- /.](\d{2}|\d{4})$"

         

         #A: Rehan Azam
         #D: This regular expression can be used to parse a comma delimited string. Leading whitespaces (at the beginning of the entire string) and ending commas are not acceptable. Any combination of letters and numbers with zero or one white space between them are acceptable. Note: To change the delimiter, simply replace the comma in the square brackets to the delimiter of choice.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=654
expr 296: ^([A-Za-z0-9]\s?)+([,]\s?([A-Za-z0-9]\s?)+)*$
tree:   (([0-9A-Za-z][\t-\r ]?)+((,[\t-\r ]?)([0-9A-Za-z][\t-\r ]?)+)*)
augmnt: ((([0-9A-Za-z][\t-\r ]?)+((,[\t-\r ]?)([0-9A-Za-z][\t-\r ]?)+)*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  H  W  L  O  q  V  2  o  3  B  O  z  c  l  I  u  q  B  Y  N  J  T  d  m
ex(1):  i,A  z,e   B  K  H, h  N   C   0   x,o   3, J  Y  w,3   Y,a  7  u ,3 
ex(2):  nZ  rL ,u k  U  Z c,7y   w, 2 , G   e  8,a,l  O,3 , v  Y,a Z,oo 
ex(3):  7gN ,e 0  CH,3ql , 6 Y , u z   bl Z ,y5 , MC  LO b , m ,c   QeV 
ex(5):  m hV Is ,l  J k, eW,o o i  s a ,L,2 Fu R   f m,3Kk , H c5 yw 
ex(8):  z ER, GA0 ,bvJ3 ,0A 1,C cx ouV8 9, J xKj p 7,K 2 8Y V , U0 J eK x,F2 ni W
---------------- Examples from DFA ---------------
s1:  o
s3:  o 

         

         #A: Osaro bare
         #U: http://regexlib.com/REDetails.aspx?regexp_id=655
ERROR:   (^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})([AM|PM|am|pm]{2,2})$)
    rx: Embedded '^' unimplemented: in "(^([0-9]|[0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})([AM|PM|am|pm]{2,2})$)|(^([0-9]|[1][0-9]|[2][0-3])(\s{0,1})([AM|PM|am|pm]{2,2})$)"

         

         #A: Sante Boscolo
         #D: Spam trap
Catches many and many way to write viagra (replacing letters with similar chars, spacing chars with one space, etc).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=656
expr 297: [v,V,(\\/)](\W|)[i,I,1,l,L](\W|)[a,A,@,(\/\\)](\W|)[g,G](\W|)[r,R](\W|)[a,A,@,(\/\\))]
tree:   (((((((((([(),/V\v]([\x01-/:-@[-^`{-\u007f]|()))[,1ILil])([\x01-/:-@[-^`{-\u007f]|()))[(),/@A\a])([\x01-/:-@[-^`{-\u007f]|()))[,Gg])([\x01-/:-@[-^`{-\u007f]|()))[,Rr])([\x01-/:-@[-^`{-\u007f]|()))[(),/@A\a])
augmnt: ((((((((((([(),/V\v]([\x01-/:-@[-^`{-\u007f]|()))[,1ILil])([\x01-/:-@[-^`{-\u007f]|()))[(),/@A\a])([\x01-/:-@[-^`{-\u007f]|()))[,Gg])([\x01-/:-@[-^`{-\u007f]|()))[,Rr])([\x01-/:-@[-^`{-\u007f]|()))[(),/@A\a])#)
length: 6 to 11
-------------------- Examples --------------------
ex(0):  (i;(\\g<r=)  V`la#G:r\"A  /'I>A{gR~,  V1%\\?G<,>@  v]i,,,,A  )L/,]gr|,
ex(1):  ),&),,\\a  \\)lA!g,.(  \\}1^,gR@  ,%i>)%,,@\\  Vi(#GR\"(  ,),(@*,,(
ex(2):  V|,)Gr;A  V;i|/,r!,  (,@G;R\\  V1,G,<)  Vi/Gr:/  /i(,,+/  \\,]/,r;,
ex(3):  ){i}\\{,\",(  )L$/',{,A  )I|(*G-r(  V=1&\\!G.,A  ,L\\@g,>a  //l\\/G$,:)
ex(5):  v,#).GR$/  VI,gr@  )L/&g>R\\  v`i#,g]R[/  VL=\\^GR&)  v.,/],,/a
ex(8):  /I@\\,,/  \\,!A\"g\",A  )),!(G+r)  ,;I'A#,^,{(  v%I),R/  /1 ),RA
---------------- Examples from DFA ---------------
s1:  /,(,,/
s7:  /,(,,a
s8:  /,(,,,
s9:  /,(,R/
s20:  /,(G,,
s10:  /,,,,\\
s21:  /,,,,,
s26:  /,A,,,

         

         #A: Vathachira Joseph Bino
         #D: regex which matches UAE mobile phone numbers.
Its capable to take inputs +97150 3827741, +97-150-3827741, +97150 - 3827741,050 3827741, 050 - 3827741
Enjoy REGEXXXXXXX!!!!!!!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=658
expr 298: ^(\+97[\s]{0,1}[\-]{0,1}[\s]{0,1}1|0)50[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$
tree:   ((((((((((((((+9)7)[\t-\r ]?)-?)[\t-\r ]?)1)|0)5)0)[\t-\r ]?)-?)[\t-\r ]?)[1-9])[0-9]{6})
augmnt: (((((((((((((((+9)7)[\t-\r ]?)-?)[\t-\r ]?)1)|0)5)0)[\t-\r ]?)-?)[\t-\r ]?)[1-9])((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 10 to 19
-------------------- Examples --------------------
ex(0):  +971509888798  +971504601620  0506483009  +971504027084  +971504778439
ex(1):  +97 1504900119  050 8689399  +97150 - 6225560  +97  150 1329084
ex(2):  +97-150 -3209828  +97 -150 1506682  050 4743383  050  6856440
ex(3):  050- 8378046  050 5699011  +97 -150  3602199  +97150 - 5964423
ex(5):  050 - 6527527  +97-150 3771796  +97-150- 8492607  050 6256379
ex(8):  +97-150 9798334  +97 -150 -9061889  +97 150 3666966  +97  150 -2024485
---------------- Examples from DFA ---------------
s1:  0507344494

         

         #A: Vathachira Joseph Bino
         #D: The regex matches the UAE land phone numbers. Checks the area codes[04,02,06...etc] strictly. Force user to input phone numbers in strict manner(it take input 04 3452488, but not 04______spaces_______3452488)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=659
expr 299: ^0[234679]{1}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$
tree:   ((((((0[234679])[\t-\r ]?)-?)[\t-\r ]?)[1-9])[0-9]{6})
augmnt: (((((((0[234679])[\t-\r ]?)-?)[\t-\r ]?)[1-9])((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 9 to 12
-------------------- Examples --------------------
ex(0):  045656778  023982610  034601620  064854830  071746897  024708429
ex(1):  04- 9783943  02- 6206208  04  9910996  03 4940378  06 -8697022
ex(2):  048803290  02- 6852462  03  7814209  061238022  034241853  02-3305066
ex(3):  03  9634885  02 7599043  06-8189838  09-9465605  029990116  02 -2389109
ex(5):  07- 4269644  09-9510733  09 -1999266  06-1617952  03-4941981
ex(8):  02 4760470  03 9073503  038563798  02 6848273  07 - 7432146  02 8979833
---------------- Examples from DFA ---------------
s1:  091088984

         

         #A: Vathachira Joseph Bino
         #D: The regex that matches the telephone numbers in India.
####Enjoy Regex####
         #U: http://regexlib.com/REDetails.aspx?regexp_id=661
expr 300: ^0{0,1}[1-9]{1}[0-9]{2}[\s]{0,1}[\-]{0,1}[\s]{0,1}[1-9]{1}[0-9]{6}$
tree:   (((((((0?[1-9])[0-9]{2})[\t-\r ]?)-?)[\t-\r ]?)[1-9])[0-9]{6})
augmnt: ((((((((0?[1-9])([0-9][0-9]))[\t-\r ]?)-?)[\t-\r ]?)[1-9])((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 10 to 14
-------------------- Examples --------------------
ex(0):  1432567788  7794261004  6867162012  4858830094  2466978027  3842907464
ex(1):  0978  1821232  1065890011  0609 8689399  3374357076  0622 9979170
ex(2):  510 6246287  0479 -4910688  06808828652  285 7209305  268- 4080074
ex(3):  574- 3320053  818 - 8378046  02595699011  515 -2389109  0602 - 7482284
ex(5):  951- 8747866  0326-9921617  0275-4941981  3792717960  766  6470112
ex(8):  02793099484  6739350721  1216734229  0733 8365783  993 4618898
---------------- Examples from DFA ---------------
s1:  1698950478

         

         #A: Friedel Wittrock
         #D: match for 0 - 65535
         #U: http://regexlib.com/REDetails.aspx?regexp_id=664
expr 301: ^([0-5]?\d?\d?\d?\d|6[0-4]\d\d\d|65[0-4]\d\d|655[0-2]\d|6553[0-5])$
tree:   ((((([0-5]?[0-9]?)[0-9]?)[0-9]?)[0-9])|((((6[0-4])[0-9])[0-9])[0-9])|((((65)[0-4])[0-9])[0-9])|((((65)5)[012])[0-9])|((((65)5)3)[0-5]))
augmnt: (((((([0-5]?[0-9]?)[0-9]?)[0-9]?)[0-9])|((((6[0-4])[0-9])[0-9])[0-9])|((((65)[0-4])[0-9])[0-9])|((((65)5)[012])[0-9])|((((65)5)3)[0-5]))#)
length: 1 to 5
-------------------- Examples --------------------
ex(0):  65534  65387  65532  4  8  61620  62854  65524  65397  65528  65532
ex(1):  65531  65513  65530  65326  65208  65501  64109  65534  65504  37
ex(2):  65533  79  60347  60078  006  65532  65522  65507  65534  38  82  25
ex(3):  29  65516  65529  65533  65531  65526  65516  65530  120  319  65524
ex(5):  96  91  62151  63673  65525  60219  65530  65525  65534  65531  65055
ex(8):  64786  64926  61879  65179  560  64198  63796  65531  65530  64276  014
---------------- Examples from DFA ---------------
s1:  1
s5:  6
s9:  7
s4:  65
s8:  66
s3:  655
s7:  659
s2:  6553
s6:  6557

         

         #A: Dany Lauener
         #D: This regexp has been posted specialy for "Mike O Shea" as he requested a mono digit year validation.
matches DD/MM/Y or DD/MM/YYYY or D/M/Y or DD/M/YYYY
Leap years treated. (Italian style with tomato)
Years 0-9 equal years 2000 to 2009 for leap years
         #U: http://regexlib.com/REDetails.aspx?regexp_id=666
expr 302: ^(((0?[1-9]|[12]\d|3[01])[\.\-\/](0?[13578]|1[02])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|[12]\d|30)[\.\-\/](0?[13456789]|1[012])[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|((0?[1-9]|1\d|2[0-8])[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?\d{2}|\d))|(29[\.\-\/]0?2[\.\-\/]((1[6-9]|[2-9]\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00|[048])))$
tree:   (((((((0?[1-9])|([12][0-9])|(3[01]))[./-])((0?[13578])|(1[02])))[./-])((((1[6-9])|([2-9][0-9]))?[0-9]{2})|[0-9]))|((((((0?[1-9])|([12][0-9])|(30))[./-])((0?[13-9])|(1[012])))[./-])((((1[6-9])|([2-9][0-9]))?[0-9]{2})|[0-9]))|(((((((0?[1-9])|(1[0-9])|(2[0-8]))[./-])0?)2)[./-])((((1[6-9])|([2-9][0-9]))?[0-9]{2})|[0-9]))|((((((29)[./-])0?)2)[./-])((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00)|[048])))
augmnt: ((((((((0?[1-9])|([12][0-9])|(3[01]))[./-])((0?[13578])|(1[02])))[./-])((((1[6-9])|([2-9][0-9]))?([0-9][0-9]))|[0-9]))|((((((0?[1-9])|([12][0-9])|(30))[./-])((0?[13-9])|(1[012])))[./-])((((1[6-9])|([2-9][0-9]))?([0-9][0-9]))|[0-9]))|(((((((0?[1-9])|(1[0-9])|(2[0-8]))[./-])0?)2)[./-])((((1[6-9])|([2-9][0-9]))?([0-9][0-9]))|[0-9]))|((((((29)[./-])0?)2)[./-])((((1[6-9])|([2-9][0-9]))?((0[48])|([2468][048])|([13579][26])))|((((16)|([2468][048])|([3579][26]))0)0)|(00)|[048])))#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  5.2.7  7/10-0  6-2-6  8.12.30  21-2/7  4-1-90  30-12.9  31-8.9  1-5.32
ex(1):  11.12-9  12.2-9  31-8-7  19/5-6  21-02-2007  06.2/1768  30.03-9
ex(2):  22.2-18  1-12/0  30/09.0  7-10-3  07/2.6  8-08/1853  18.2.7  28/1.9
ex(3):  29-2.00  31/7/4482  15.02-1623  20/10-3  24/3.9  13.2.1995  22.5.9
ex(5):  29-2-00  06-02.92  02.02-25  19-2/6848  24-2.0  01/12.4229  29-02/0
ex(8):  4/02/36  7-10/36  16/2/1985  26/1-85  29-02/6800  5/10-30  29-2.00
---------------- Examples from DFA ---------------
s1:  1-1-0
s34:  1-1-1
s37:  1-1-3
s9:  1-1-06
s20:  1-1-17
s10:  29/2-0
s21:  29/2-8
s27:  29/2-16

         

         #A: Chandrasing Patil
         #D: This expression is little tricky since the $ sign is includeded in the
expression itself. So whenever you want to make use of the expression be
sure to prepend $ sign to the value if it's not present.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=668
expr 303: ^\$[+-]?([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(\.[0-9]{1,2})?$
tree:   ((($[+-]?)([0-9]+|([0-9]{1,3}(,[0-9]{3})*)))(.[0-9]{1,2})?)
augmnt: (((($[+-]?)([0-9]+|((([0-9][0-9]?)[0-9]?)(,(([0-9][0-9])[0-9]))*)))(.([0-9][0-9]?))?)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  $3  $6  $8  $7  $2  $0  $5  $0  $2  $2  $5  $3  $9  $4  $9  $0  $0  $2
ex(1):  $0.8  $-16,394.4  $+6  $0  $01,109.4  $9.9  $+8  $+067  $+4.97  $+1.02
ex(2):  $+7,462,793  $+42  $-5  $2  $6.48  $+20.00  $7  $+0  $39,753  $5  $46.9
ex(3):  $87,804,560,926  $91  $-9,891  $-219.72  $84.37  $6,219,551
ex(5):  $+675,527,019,198,287.4  $-9  $46,701,249  $305,462,637,868,099,848
ex(8):  $24,734,297,833,433.67  $+99  $88,613,629,146,366,966,936,047,570.7
---------------- Examples from DFA ---------------
s1:  $5
s13:  $51
s4:  $5.0
s12:  $519
s8:  $5.01
s11:  $5194
s5:  $5,161

         

         #A: Jason N. Gaylord
         #D: This is derived from Steven Smith's Integer expression (http://www.regexlib.com/REDetails.aspx?regexp_id=51). The only difference is that this does not accept blanks. Written by Jason N. Gaylord.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=669
expr 304: ^\d+$
tree:   [0-9]+
augmnt: ([0-9]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  6  2  0  1  2  7  8  5  4  8  3  0  0  9  4  7  4  6  8  9  7  8  0  2
ex(2):  8  2  07  6  0  78  3  09  36  7  3  43  48  1  3  6  0  2  8  8  00
ex(3):  109  6  22  89  9  4  378  873  7  7  9  022  5  0  979  70  4  14  07
ex(5):  908  64103  685  462  7932  998  42  9  06  8523  0220  82865  418  3
ex(8):  32093  5066827  799  800  4338  93  753  34885  440  46599043  0
---------------- Examples from DFA ---------------
s1:  8

         

         #A: Liu Wei
         #D: telphone number check.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=671
expr 305: ((\(\d{3,4}\)|\d{3,4}-)\d{4,9}(-\d{1,5}|\d{0}))|(\d{4,12})
tree:   ((((((([0-9]{3,4})))|([0-9]{3,4}-))[0-9]{4,9})((-[0-9]{1,5})|()))|[0-9]{4,12})
augmnt: ((((((((((([0-9][0-9])[0-9])[0-9]?))))|(((([0-9][0-9])[0-9])[0-9]?)-))(((((((([0-9][0-9])[0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))((-(((([0-9][0-9]?)[0-9]?)[0-9]?)[0-9]?))|()))|((((((((((([0-9][0-9])[0-9])[0-9])[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))#)
length: 4 to 21
-------------------- Examples --------------------
ex(0):  (656)7888  8261  (586)1620  854-3009-4  (780)7084-0  4640  7843  0913
ex(1):  26200  19919  3994737  6970571  03474820  (1036)5246929  4201-68858-82
ex(2):  (433)936734  (074)990423  898377  605991  (5118)7389056  94779
ex(3):  07337892  (6872)6179256  41982977  6006460  12493052  (6378)80094
ex(5):  342-7983433  8381308  8436364  6669308  70360  97266106474  913803
ex(8):  (7175)85173167-709  (372)422786  4584-21787692-514  858-2958872-9759
---------------- Examples from DFA ---------------
s1:  8191
s6:  81917
s19:  819173
s18:  8191737
s17:  81917376
s27:  819-0977
s16:  819173762
s26:  819-09772
s15:  8191737624
s25:  819-097727
s14:  81917376244
s24:  819-0977277
s13:  819173762448
s23:  819-09772779
s22:  819-097727790

         

         #A: Nicholas Berardi
         #D: Specifier Format of Guid Values that this RegEx supports:  32 digits: [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx]  32 digits separated by hyphens: [xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx]  32 digits separated by hyphens, enclosed in brackets: [{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}]  32 digits separated by hyphens, enclosed in parentheses: [(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)]
         #U: http://regexlib.com/REDetails.aspx?regexp_id=672
expr 306: ^[{|\(]?[0-9a-fA-F]{8}[-]?([0-9a-fA-F]{4}[-]?){3}[0-9a-fA-F]{12}[\)|}]?$
tree:   ((((([({|]?[0-9A-Fa-f]{8})-?)([0-9A-Fa-f]{4}-?){3})[0-9A-Fa-f]{12})[)|}]?)
augmnt: (((((([({|]?((((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f]))-?)(((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])-?)(((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])-?))(((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])-?)))((((((((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f]))[)|}]?)#)
length: 32 to 38
-------------------- Examples --------------------
ex(0):  10AB18779cD8aafFADf5eDA1FF3Cd379  AbfD36EfccCd4B42AF9B9bcd5ADfeC19
ex(1):  28DA3355D9DF1DDd-fDa6-26D7e8De06da|
ex(2):  96fCd228aCe40a41-bfabbD1Ca60A5D9E  da3B97BFdBB3-a0ea-dCaf-BeC6cd74EFa7
ex(3):  FEb258ec-abA7-F0A41fa9-4F1f3aEEbee3)
ex(5):  3a8E2DaF4CCd-af8e-8c589a1B5db90928}
ex(8):  {03Ba3DDf-7e9FFD94-f0cD-D2a9B4dEa797}
---------------- Examples from DFA ---------------
s1:  F3FfBa4dbb9e6bdEFB2B3C9aCDC20aCb
s34:  F3FfBa4dbb9e6bdEFB2B3C9aCDC20aCb)

         

         #A: Roman Lukyanenko
         #D: Matches the ™ symbol. Pretty simple, yet I dont think existed on RegExLib before.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=673
expr 307: \u2122
tree:   ™
augmnt: (™#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™
ex(1):  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™
ex(2):  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™
ex(3):  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™
ex(5):  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™
ex(8):  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™  ™
---------------- Examples from DFA ---------------
s1:  ™

         

         #A: Roman Lukyanenko
         #D: Matches the registered trademark (®). Pretty simple, yet I dont think existed on RegExLib before.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=674
expr 308: \u00AE
tree:   ®
augmnt: (®#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®
ex(1):  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®
ex(2):  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®
ex(3):  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®
ex(5):  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®
ex(8):  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®  ®
---------------- Examples from DFA ---------------
s1:  ®

         

         #A: Roman Lukyanenko
         #D: Matches the British Pound symbol. Pretty simple, yet I dont think existed on RegExLib before. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=675
expr 309: \u00A3
tree:   £
augmnt: (£#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £
ex(1):  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £
ex(2):  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £
ex(3):  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £
ex(5):  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £
ex(8):  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £  £
---------------- Examples from DFA ---------------
s1:  £

         

         #A: Roman Lukyanenko
         #D: Matches the Euro sign. Pretty simple, yet I dont think existed on RegExLib before.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=676
expr 310: \u20AC
tree:   €
augmnt: (€#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €
ex(1):  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €
ex(2):  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €
ex(3):  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €
ex(5):  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €
ex(8):  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €  €
---------------- Examples from DFA ---------------
s1:  €

         

         #A: Roman Lukyanenko
         #D: Matches the Yen sign. Pretty simple, yet I dont think existed on RegExLib before. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=677
expr 311: \u00A5
tree:   ¥
augmnt: (¥#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥
ex(1):  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥
ex(2):  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥
ex(3):  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥
ex(5):  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥
ex(8):  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥  ¥
---------------- Examples from DFA ---------------
s1:  ¥

         

         #A: Roman Lukyanenko
         #D: Matches infinity symbol. Pretty simple, yet I dont think existed on RegExLib before. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=678
expr 312: \u221E
tree:   ∞
augmnt: (∞#)
length: 1 to 1
-------------------- Examples --------------------
ex(0):  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞
ex(1):  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞
ex(2):  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞
ex(3):  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞
ex(5):  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞
ex(8):  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞  ∞
---------------- Examples from DFA ---------------
s1:  ∞

         

         #A: Michael Ash
         #D: Matches any character is the Basic Latin Unicode Range \U0000-U007F  (Ascii 0-127)
I've blogged about this and other expressions here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
         #U: http://regexlib.com/REDetails.aspx?regexp_id=679
ERROR:   \p{IsBasicLatin}
    rx: '\px' unimplemented: in "\p{IsBasicLatin}"

         

         #A: Michael Ash
         #D: Matches numbers.  Note: the second match (?) and the second non-match (IV) are not the same. I cover this in more detail here http://blogs.regexadvice.com/mash/archive/2004/04/17/988.aspx
         #U: http://regexlib.com/REDetails.aspx?regexp_id=680
ERROR:   \p{N}
    rx: '\px' unimplemented: in "\p{N}"

         

         #A: Michael Ash
         #D: Math Symbols.  NOTE: the second examples of match and non-match are not the same.  The non-match is the keyboard dash.  The match is the unicode minus sign.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=681
ERROR:   \p{Sm}
    rx: '\px' unimplemented: in "\p{Sm}"

         

         #A: khoi le
         #D: This will match US most common telephones format with extension or with out extension.  Works with both Java and .NET.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=682
expr 313: ((\(\d{3}\) ?)|(\d{3}[- \.]))?\d{3}[- \.]\d{4}(\s(x\d+)?){0,1}$
tree:   ((((((((([0-9]{3}))) ?)|([0-9]{3}[ .-]))?[0-9]{3})[ .-])[0-9]{4})([\t-\r ](x[0-9]+)?)?)
augmnt: (((((((((((([0-9][0-9])[0-9])))) ?)|((([0-9][0-9])[0-9])[ .-]))?(([0-9][0-9])[0-9]))[ .-])((([0-9][0-9])[0-9])[0-9]))([\t-\r ](x[0-9]+)?)?)#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  443-6778  887.8261  004-6016  201.8548  300.4746  897 2708  429 7464
ex(1):  647-394-4821  (206)888-0119   642-893-4037  873 7076   255 4979 
ex(2):  (768)462.9327   (091)885-8022  (865)185-8832  050 827.9908
ex(3):  564-7465   320 5363 x8  437 465.5926  699.1621 x6  891 516 1994 
ex(5):  964-3219  107 617-8669   636.9216 x752  (194) 128 6467 x00  667.2760
ex(8):  625.7986  099.8482   433 0721  (460) 422.7983   336 838-3902  618 8436 
---------------- Examples from DFA ---------------
s1:  666-0773
s11:  666-0773 
s22:  666-0773 x4

         

         #A: Matt Baskey
         #D: another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=683
expr 314: (\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*)
tree:   (((((((((([\t-\r ]*(?)0)[0-9]{4}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{3})[\t-\r ]*)|((((((((([\t-\r ]*(?)0)[0-9]{3}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{4})[\t-\r ]*)|((([\t-\r ]*(7|8))([0-9]{7}|(([0-9]{3}(-|[\t-\r ]))[0-9]{4})))[\t-\r ]*))
augmnt: ((((((((((([\t-\r ]*(?)0)((([0-9][0-9])[0-9])[0-9])))?)([\t-\r ]*|-))(([0-9][0-9])[0-9]))([\t-\r ]*|-))(([0-9][0-9])[0-9]))[\t-\r ]*)|((((((((([\t-\r ]*(?)0)(([0-9][0-9])[0-9])))?)([\t-\r ]*|-))(([0-9][0-9])[0-9]))([\t-\r ]*|-))((([0-9][0-9])[0-9])[0-9]))[\t-\r ]*)|((([\t-\r ]*(7|8))((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])|(((([0-9][0-9])[0-9])(-|[\t-\r ]))((([0-9][0-9])[0-9])[0-9]))))[\t-\r ]*))#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  03656-888-826  75860162  02785830947  08978270429  04640-843-913
ex(1):  00620900-991   02689)-037873    (02255979-034   70329084
ex(2):  (0688)-022 2865   (0883  506  0799   (03839)-363  644   (00432363-983 
ex(3):    0162)-986-8910       8724-2845       02321)-107-617  
ex(5):   0287)  1790666        (04926-503-246      00099    224-507
ex(8):          8902-6188             03666)  650  703     
---------------- Examples from DFA ---------------
s1:  84419737

         

         #A: Matt Baskey
         #D: another uk telephone number regex.  This was adapted from another on this site http://www.regexlib.com/REDetails.aspx?regexp_id=297
I added support for hyphens and for london shorthand numbers ie. 8234-1234 72341234  Still want to be permissive where possible....Still need to sort out the all zeros, also not sure if numbers with 4 digits followed by 7 used in london 0208-234-1234 is the area of the uk where this occurs, or all areas outside of london are in format 5 digits followed by 6 digits ie. 01608 123456.  If that is the case for the 4-7 pattern only 0208 or 0207 could be enforced.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=684
expr 315: (\s*\(?0\d{4}\)?(\s*|-)\d{3}(\s*|-)\d{3}\s*)|(\s*\(?0\d{3}\)?(\s*|-)\d{3}(\s*|-)\d{4}\s*)|(\s*(7|8)(\d{7}|\d{3}(\-|\s{1})\d{4})\s*)
tree:   (((((((((([\t-\r ]*(?)0)[0-9]{4}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{3})[\t-\r ]*)|((((((((([\t-\r ]*(?)0)[0-9]{3}))?)([\t-\r ]*|-))[0-9]{3})([\t-\r ]*|-))[0-9]{4})[\t-\r ]*)|((([\t-\r ]*(7|8))([0-9]{7}|(([0-9]{3}(-|[\t-\r ]))[0-9]{4})))[\t-\r ]*))
augmnt: ((((((((((([\t-\r ]*(?)0)((([0-9][0-9])[0-9])[0-9])))?)([\t-\r ]*|-))(([0-9][0-9])[0-9]))([\t-\r ]*|-))(([0-9][0-9])[0-9]))[\t-\r ]*)|((((((((([\t-\r ]*(?)0)(([0-9][0-9])[0-9])))?)([\t-\r ]*|-))(([0-9][0-9])[0-9]))([\t-\r ]*|-))((([0-9][0-9])[0-9])[0-9]))[\t-\r ]*)|((([\t-\r ]*(7|8))((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])|(((([0-9][0-9])[0-9])(-|[\t-\r ]))((([0-9][0-9])[0-9])[0-9]))))[\t-\r ]*))#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  03656-888-826  75860162  02785830947  08978270429  04640-843-913
ex(1):  00620900-991   02689)-037873    (02255979-034   70329084
ex(2):  (0688)-022 2865   (0883  506  0799   (03839)-363  644   (00432363-983 
ex(3):    0162)-986-8910       8724-2845       02321)-107-617  
ex(5):   0287)  1790666        (04926-503-246      00099    224-507
ex(8):          8902-6188             03666)  650  703     
---------------- Examples from DFA ---------------
s1:  84419737

         

         #A: Ariel Merrell
         #D: A co-worker needed a regex to validate time.  He could only find patterns that match a 24hour clock.  I whipped this expression up to validate a 12hour clock. Hope somebody finds it useful.
         #T: Validate 12hour clock
         #U: http://regexlib.com/REDetails.aspx?regexp_id=685
ERROR:   (?<Time>^(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d(?:[ap]m)?)
    rx: '(?...' unimplemented: in "(?<Time>^(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d(?:[ap]m)?)"

         

         #A: Nicholas Berardi
         #D: This allows the formatting of most phone numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=688
ERROR:   ^(?:(?:[\+]?(?<CountryCode>[\d]{1,3}(?:[ ]+|[\-.])))?[(]?(?<AreaCode>[\d]{3})[\-/)]?(?:[ ]+)?)?(?<Number>[a-zA-Z2-9][a-zA-Z0-9 \-.]{6,})(?:(?:[ ]+|[xX]|(i:ext[\.]?)){1,2}(?<Ext>[\d]{1,5}))?$
    rx: '(?...' unimplemented: in "^(?:(?:[\+]?(?<CountryCode>[\d]{1,3}(?:[ ]+|[\-.])))?[(]?(?<AreaCode>[\d]{3})[\-/)]?(?:[ ]+)?)?(?<Number>[a-zA-Z2-9][a-zA-Z0-9 \-.]{6,})(?:(?:[ ]+|[xX]|(i:ext[\.]?)){1,2}(?<Ext>[\d]{1,5}))?$"

         

         #A: Don Johnston
         #D: This US phone number edit with restricted format options: Accepts optional parens on area code with or without following space, and dashes between area code, central office code and station code. Formats include only (222) 555-1212 (with or without a space) and 222-555-1212. Conforms to NANP A-digit and D-digit requirements (ANN-DNN-NNNN). Area Codes 001-199 are not permitted; Central Office Codes 001-199 are not permitted. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=689
expr 316: ^(?:\([2-9]\d{2}\)\ ?|(?:[2-9]\d{2}\-))[2-9]\d{2}\-\d{4}$
tree:   (((((((((([2-9])[0-9]{2}))) ?)|(([2-9][0-9]{2})-))[2-9])[0-9]{2})-)[0-9]{4})
augmnt: ((((((((((([2-9])([0-9][0-9])))) ?)|(([2-9]([0-9][0-9]))-))[2-9])([0-9][0-9]))-)((([0-9][0-9])[0-9])[0-9]))#)
length: 12 to 14
-------------------- Examples --------------------
ex(0):  (365)978-8798  (900)586-1620  678-683-0947  (497)227-8429
ex(1):  964-439-3348  (632)862-8889  (719) 996-2268  999-237-8873  707-970-2556
ex(2):  (329)864-0376  (646)393-7998  820-506-8523  (620)486-2418  708-720-3050
ex(3):  839-475-6348  (444) 459-0432  (936) 983-1743  404-560-9260
ex(5):  589-695-6021  747-448-2845  377-896-4232  505-307-3617  (466) 466-6879
ex(8):  (581)996-6771  760-266-4276  (701)292-0735  (592)456-7986
---------------- Examples from DFA ---------------
s1:  557-314-0873

         

         #A: yoram o
         #D: evaluates dates in the format of DD/MM/YY or DD/MM/YYYY
DD & YY - can be of the form:
One digit            2
Zero leading        02
         #U: http://regexlib.com/REDetails.aspx?regexp_id=690
ERROR:   (?<Day>[0-3][0-9]|[1-9])/(?<Month>[1-9]|1[0-2]|0[1-9])/(?<Year>[12]\d{3}|\d{2})
    rx: '(?...' unimplemented: in "(?<Day>[0-3][0-9]|[1-9])/(?<Month>[1-9]|1[0-2]|0[1-9])/(?<Year>[12]\d{3}|\d{2})"

         

         #A: de kleine Gerardus
         #U: http://regexlib.com/REDetails.aspx?regexp_id=692
expr 317: ^([0-1]?\d|2[0-3]):([0-5]\d)$
tree:   (((([01]?[0-9])|(2[0-3])):)([0-5][0-9]))
augmnt: ((((([01]?[0-9])|(2[0-3])):)([0-5][0-9]))#)
length: 4 to 5
-------------------- Examples --------------------
ex(0):  4:45  7:08  7:02  1:44  22:56  0:47  5:23  0:07  6:17  0:30  4:10
ex(1):  22:10  23:27  14:34  1:32  0:20  8:40  21:50  22:22  9:39  3:08  15:07
ex(2):  22:57  21:34  20:47  3:50  6:10  20:52  2:59  23:38  20:31  8:32  22:20
ex(3):  1:53  8:40  22:26  2:47  22:00  23:03  22:53  08:16  0:06  23:23  0:36
ex(5):  14:58  6:00  20:20  10:56  11:18  18:30  23:22  21:37  8:48  13:32
ex(8):  10:11  13:17  06:19  20:56  12:21  23:15  00:54  20:28  20:27  21:00
---------------- Examples from DFA ---------------
s1:  0:12

         

         #A: Kevin Wennemuth
         #D: Matches german standard postal codes named 'Postleitzahl'
         #U: http://regexlib.com/REDetails.aspx?regexp_id=693
expr 318: ^[0-9]{5}$
tree:   [0-9]{5}
augmnt: ((((([0-9][0-9])[0-9])[0-9])[0-9])#)
length: 5 to 5
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  07784  39091  36478  39433  48212  32620  62088  89001  19910
ex(2):  26893  99403  78887  35707  69702  25560  49791  70347  14007  80329
ex(3):  10376  85246  28793  27998  14209  10688  52380  22098  28652  41853
ex(5):  09305  06682  70799  08007  43383  93675  36348  85644  07465  99043
ex(8):  63189  83817  43780  46560  59260  06990  11621  51198  67389  10951
---------------- Examples from DFA ---------------
s1:  94772

         

         #A: Thijs Wijnmaalen
         #D: Matches a md5 hash, simple yet powerful
         #U: http://regexlib.com/REDetails.aspx?regexp_id=698
expr 319: ^([a-z0-9]{32})$
tree:   [0-9a-z]{32}
augmnt: (((((((((((((((((((((((((((((((([0-9a-z][0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])[0-9a-z])#)
length: 32 to 32
-------------------- Examples --------------------
ex(0):  nkq62o3qkzcl4qkhqmziper91uceh9x1  kd9whj8eqc03r67p86339yflqwofvokk
ex(1):  zvvb0tue9pzo7wy53wd8nxbaf7fd1cvm  enae5ncastydkqdv33gn2vc6nika9cyx
ex(2):  25cz3zcanrhrd6qhazd8u69rwbeak4tc  8s7yz529laqyx95b6lycmxjjv9k5pfna
ex(3):  d5qg9ggozip2vf2fke9w9b2nezu6es1f  o4a4td394ksb3ou3ecr5by3wf2lxgwx8
ex(5):  r6m1llhc1gkm3o69v8m9fkqgkxgl0j6p  n7z9ogb1v8jsbgh6jt00k0ezrx77yhaw
ex(8):  3csznnk1gtbkr1z79ldcl2d4bkps29yc  6nte7adzd6ako2qtdfmmg0xrb2wld2fb
---------------- Examples from DFA ---------------
s1:  mq0bl0se21n1qgivo9tdb3x1d7r9mqtn

         

         #A: Jason N. Gaylord
         #D: This expression is a very simplex expression that allows null values or 3 digits, dash, 3 digits, dash, 4 digits. It validates a basic US phone number. Written by Jason N. Gaylord.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=701
expr 320: ^(\d{3}-\d{3}-\d{4})*$
tree:   (((([0-9]{3}-)[0-9]{3})-)[0-9]{4})*
augmnt: ((((((([0-9][0-9])[0-9])-)(([0-9][0-9])[0-9]))-)((([0-9][0-9])[0-9])[0-9]))*#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      656-788-7982    004-860-6201    854-300-4746    780-708-2907      
ex(2):  784-909-3647839-334-2123  620-208-8900119-109-6422  893-940-7888      
ex(3):  979-703-7140078-329-8464  037-852-6287932-998-4209106-852-8022
ex(5):  827-799-8007433-393-7536
ex(8):  867-891-9516021-947-2482284-937-2696442-219-5510
---------------- Examples from DFA ---------------
s0:  

         

         #A: Jason N. Gaylord
         #D: This expression is a simplex expression that checks to see if a value is a valid phone system terminal number. It allows a null value or 2 digits, dash, 2 digits. Written by Jason N. Gaylord.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=702
expr 321: ^(\d{2}-\d{2})*$
tree:   (([0-9]{2}-)[0-9]{2})*
augmnt: (((([0-9][0-9])-)([0-9][0-9]))*#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      65-77        98-61        86-16      27-54    00-47        78-27  
ex(2):    90-46  07-8439-91      78-9433-82  23-62    20-8890-11  91-9964-26  
ex(3):  99-0378-8735-07  97-2255-04  79-70  47-40  78-3290-46  10-7685-46
ex(5):    09-0688-2380-2098-86  24-8530-8320-30  06-82  07-9080-7433-39  67-36
ex(8):  98-8174-7804-5605-2600-9901-62    11-8673-9109-1602-9947-24  22-4593-72
---------------- Examples from DFA ---------------
s0:  

         

         #A: ic onur
         #D: will match free floating valid protocol + urls in text ... will not touch the ones wrapped in a tag, so that you can auto-link the ones that aren't :) couple of things to know :
1. if the url is next to a tag this won't work (eg : <br>http://www.acme.com), the url must either start with a \s, \n or any character other than >.
2. the pattern will match the preceding \s and \n too, so when you replace put them back in place $1 will either be \s or \n, $2 will be the exact match
vb usage :
set re = New RegExp
re.Pattern ="(\s|\n|^)(\w+://[^\s\n]+)"
strResult = re.Replace(strText, "$1<a href='$2' target='_new'>$2</a>")
         #U: http://regexlib.com/REDetails.aspx?regexp_id=703
ERROR:   (\s|\n|^)(\w+://[^\s\n]+)
    rx: Embedded '^' unimplemented: in "(\s|\n|^)(\w+://[^\s\n]+)"

         

         #A: marrik
         #D: Match for dutch zipcodes.
Dutch zipcodes are always in the format of 4 digits and 2 letters.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=705
expr 322: [0-9]{4}[A-Z]{2}
tree:   ([0-9]{4}[A-Z]{2})
augmnt: ((((([0-9][0-9])[0-9])[0-9])([A-Z][A-Z]))#)
length: 6 to 6
-------------------- Examples --------------------
ex(0):  4436HI  7788KB  9826NS  0458IG  1620RW  7854SH  0094ZM  6897YU  2708AE
ex(1):  0778GP  9091ZQ  4783NY  3348SX  2326IU  6208MA  9001DH  9109RS  4226OP
ex(2):  7888PJ  5707QZ  7022NF  6049LL  1703ID  1400ZU  0329YG  4641OR  7685EI
ex(3):  2799KD  4209JA  6885CN  8022YR  8286XA  4185ZC  8832IR  3050WW  8270TD
ex(5):  4338XF  3675PK  3488ZC  4407CU  5990SB  2005PG  3189CZ  8174BX  8046XU
ex(8):  0699MH  1621FV  1986FF  8910HR  1602NT  9477GQ  8228YZ  9377UC  9644SN
---------------- Examples from DFA ---------------
s1:  1073VS

         

         #A: Michael Ash
         #D: This pattern matches lower-case letters
         #U: http://regexlib.com/REDetails.aspx?regexp_id=706
ERROR:   (?-i:\b\p{Ll}+\b)
    rx: '(?...' unimplemented: in "(?-i:\b\p{Ll}+\b)"

         

         #A: Felipe Albacete
         #D: This is the Brazilian Date Format.
DD/MM/YYYY with the right days per month.
Dates >=1900 <=2999.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=709
expr 323: (((0[1-9]|[12][0-9]|3[01])([/])(0[13578]|10|12)([/])([1-2][0,9][0-9][0-9]))|(([0][1-9]|[12][0-9]|30)([/])(0[469]|11)([/])([1-2][0,9][0-9][0-9]))|((0[1-9]|1[0-9]|2[0-8])([/])(02)([/])([1-2][0,9][0-9][0-9]))|((29)(\.|-|\/)(02)([/])([02468][048]00))|((29)([/])(02)([/])([13579][26]00))|((29)([/])(02)([/])([0-9][0-9][0][48]))|((29)([/])(02)([/])([0-9][0-9][2468][048]))|((29)([/])(02)([/])([0-9][0-9][13579][26])))
tree:   (((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(10)|(12)))/)((([12][,09])[0-9])[0-9]))|((((((0[1-9])|([12][0-9])|(30))/)((0[469])|(11)))/)((([12][,09])[0-9])[0-9]))|((((((0[1-9])|(1[0-9])|(2[0-8]))/)(02))/)((([12][,09])[0-9])[0-9]))|(((((29)(.|-|/))(02))/)((([02468][048])0)0))|(((((29)/)(02))/)((([13579][26])0)0))|(((((29)/)(02))/)((([0-9][0-9])0)[48]))|(((((29)/)(02))/)((([0-9][0-9])[2468])[048]))|(((((29)/)(02))/)((([0-9][0-9])[13579])[26])))
augmnt: ((((((((0[1-9])|([12][0-9])|(3[01]))/)((0[13578])|(10)|(12)))/)((([12][,09])[0-9])[0-9]))|((((((0[1-9])|([12][0-9])|(30))/)((0[469])|(11)))/)((([12][,09])[0-9])[0-9]))|((((((0[1-9])|(1[0-9])|(2[0-8]))/)(02))/)((([12][,09])[0-9])[0-9]))|(((((29)(.|-|/))(02))/)((([02468][048])0)0))|(((((29)/)(02))/)((([13579][26])0)0))|(((((29)/)(02))/)((([0-9][0-9])0)[48]))|(((((29)/)(02))/)((([0-9][0-9])[2468])[048]))|(((((29)/)(02))/)((([0-9][0-9])[13579])[26])))#)
length: 10 to 10
-------------------- Examples --------------------
ex(0):  02/02/1979  29/02/1200  08/12/2994  29/02/0272  05/05/1984  29/02/0000
ex(1):  29/02/5200  29/02/4208  29/02/7852  29/02/0212  09/02/1947  29/02/3292
ex(2):  29/02/1600  29/02/8828  29/02/8292  20/02/1,09  29/02/2704  29.02/6000
ex(3):  16/10/2,05  29.02/0800  29.02/2000  29/02/1600  29/02/9192  29.02/6800
ex(5):  29/02/9068  29/02/7804  30/11/2016  29/02/2732  18/02/2967  29/02/6692
ex(8):  01/02/2,62  29/02/2800  29/02/2428  04/09/1934  17/02/1933  29.02/0000
---------------- Examples from DFA ---------------
s1:  07/04/1,03

         

         #A: Felipe Albacete
         #D: Expression to validate values to fields Decimal 5,2 or 5 numbers. values >=100,00 <=99999,99
100,00=100
5000,00 = 5000
         #U: http://regexlib.com/REDetails.aspx?regexp_id=710
ERROR:   (^\d{3,5}\,\d{2}$)|(^\d{3,5}$)
    rx: Embedded '^' unimplemented: in "(^\d{3,5}\,\d{2}$)|(^\d{3,5}$)"

         

         #A: Mark Cranness
         #U: http://regexlib.com/REDetails.aspx?regexp_id=711
ERROR:   ^((?>[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$
    rx: '(?...' unimplemented: in "^((?>[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+\x20*|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*"\x20*)*(?<angle><))?((?!\.)(?>\.?[a-zA-Z\d!#$%&'*+\-/=?^_`{|}~]+)+|"((?=[\x01-\x7f])[^"\\]|\\[\x01-\x7f])*")@(((?!-)[a-zA-Z\d\-]+(?<!-)\.)+[a-zA-Z]{2,}|\[(((?(?<!\[)\.)(25[0-5]|2[0-4]\d|[01]?\d?\d)){4}|[a-zA-Z\d\-]*[a-zA-Z\d]:((?=[\x01-\x7f])[^\\\[\]]|\\[\x01-\x7f])+)\])(?(angle)>)$"

         

         #A: Rohan Pathare
         #D: Mathces in format DD-MON-YYYY (hyphen between results). Validates for leap years. Ensures month is in uppercase.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=712
ERROR:   ^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])-(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)-((1[6-9]|[2-9]\d)\d{2})$
    rx: '(?...' unimplemented: in "^((31(?! (FEB|APR|JUN|SEP|NOV)))|((30|29)(?! FEB))|(29(?= FEB (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])-(JAN|FEB|MAR|MAY|APR|JUL|JUN|AUG|OCT|SEP|NOV|DEC)-((1[6-9]|[2-9]\d)\d{2})$"

         

         #A: Fabiano Santiago
         #D: Essa expressão é uma validação de data simplicada onde não aceita datas com ano inferior a 1900. Interessante pra validação de data de idade, data atual, etc
         #U: http://regexlib.com/REDetails.aspx?regexp_id=713
expr 324: (0?[1-9]|[12][0-9]|3[01])[/ -](0?[1-9]|1[12])[/ -](19[0-9]{2}|[2][0-9][0-9]{2})
tree:   ((((((0?[1-9])|([12][0-9])|(3[01]))[ /-])((0?[1-9])|(1[12])))[ /-])(((19)[0-9]{2})|((2[0-9])[0-9]{2})))
augmnt: (((((((0?[1-9])|([12][0-9])|(3[01]))[ /-])((0?[1-9])|(1[12])))[ /-])(((19)([0-9][0-9]))|((2[0-9])([0-9][0-9]))))#)
length: 8 to 10
-------------------- Examples --------------------
ex(0):  1-12/1998  7/2/1916  11 6 2094  16 11 1929  4-4/1990  31/12/2482
ex(1):  11 11/1926  04/1/1935  17 11/2049  21-02/1978  06-5/2685  30 12/2814
ex(2):  30 03-2088  3/12 1970  31/7-2393  25-11/1907  3 6/1963  5-08-1965
ex(3):  25/11 2910  31 03 2482  14-12 2442  11/12/2617  01-11-2879  30 11/2760
ex(5):  31 7-2276  31 11 2607  01-6-1998  30 11 1922  04/01 1987  4 11-1933
ex(8):  30/6 2629  30 11-1993  09/05-1980  9/12/2251  19/01-2382  3/11/2913
---------------- Examples from DFA ---------------
s1:  1 1-1975

         

         #A: Manny Ruiz
         #D: This pattern matches whole numbers 1-100. 
         #U: http://regexlib.com/REDetails.aspx?regexp_id=716
expr 325: ^([1-9]|[1-9]\d|100)$
tree:   ([1-9]|([1-9][0-9])|((10)0))
augmnt: (([1-9]|([1-9][0-9])|((10)0))#)
length: 1 to 3
-------------------- Examples --------------------
ex(0):  1  25  87  4  3  100  100  100  100  87  100  30  100  6  28  4  3  72
ex(1):  100  100  100  46  100  53  1  3  23  100  100  49  41  99  100  82  28
ex(2):  4  100  6  100  77  7  100  2  1  100  80  1  54  27  13  6  84  100  5
ex(3):  3  67  32  100  100  1  88  1  100  100  100  2  100  2  1  8  100  96
ex(5):  99  2  70  4  7  1  86  3  100  100  7  84  3  20  100  7  9  18  93
ex(8):  87  9  1  100  100  99  2  6  5  6  100  100  4  65  100  100  7  4
---------------- Examples from DFA ---------------
s1:  1
s4:  5
s2:  10
s3:  12

         

         #A: wallace dos santos damiao
         #D: A simple expression to brazilian phone number code modified expression of Rafael, beyond international code, simple DDI without "+" 99 plus simple DDD (99) plus simple and whitout parentheses em trace, local phone number 3 or 4 digits plus "-" plus 4 digits.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=718
expr 326: ^([0-9]{2})?((\([0-9]{2})\)|[0-9]{2})?([0-9]{3}|[0-9]{4})(\-)?[0-9]{4}$
tree:   (((([0-9]{2}?(((([0-9]{2})))|[0-9]{2})?)([0-9]{3}|[0-9]{4}))-?)[0-9]{4})
augmnt: (((((([0-9][0-9])?((((([0-9][0-9]))))|([0-9][0-9]))?)((([0-9][0-9])[0-9])|((([0-9][0-9])[0-9])[0-9])))-?)((([0-9][0-9])[0-9])[0-9]))#)
length: 7 to 15
-------------------- Examples --------------------
ex(0):  4365677  8879826  00458601  2012785  8300947  6897802  08429074
ex(1):  09648394-4821  (20)0889001  99(96)268-9940  78735-7697  5564979
ex(2):  03765246  9327-8142  06852-0220  82524-5308  (93)06687079  08743-3936
ex(3):  9904-0053  89381-3780  60596006  906251196738  1016219-7724  845-7726
ex(5):  3374786999  368-2161  9552761941  817966771  96666-2760  (12)2607-0359
ex(8):  94842732  35071432  467342979  443336-8381  39606-8984  61(29)46436696
---------------- Examples from DFA ---------------
s1:  0600496
s10:  06004962
s9:  060-8755
s21:  060049621
s25:  0600496219
s24:  06004962191

         

         #A: Felipe Albacete
         #D: This is an new data Validation to MM/YYYY from 1900 to 2999 this is an validation expression  to Client From MOnth/Year.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=721
expr 327: (((0[123456789]|10|11|12)([/])(([1][9][0-9][0-9])|([2][0-9][0-9][0-9]))))
tree:   ((((0[1-9])|(10)|(11)|(12))/)((((19)[0-9])[0-9])|(((2[0-9])[0-9])[0-9])))
augmnt: (((((0[1-9])|(10)|(11)|(12))/)((((19)[0-9])[0-9])|(((2[0-9])[0-9])[0-9])))#)
length: 7 to 7
-------------------- Examples --------------------
ex(0):  11/2778  03/1910  11/1962  08/1983  06/2689  12/2842  12/1977  11/1936
ex(1):  11/2620  09/1900  10/2996  11/1999  01/1973  12/1902  02/1979  10/1940
ex(2):  11/1968  10/1993  05/1920  10/1923  11/1928  11/2530  07/1905  11/1979
ex(3):  11/1936  12/2440  12/2043  07/2318  12/2437  11/2059  09/1901  10/2198
ex(5):  12/2947  10/1945  12/1964  08/2055  10/2174  10/2926  11/2216  12/1927
ex(8):  05/1977  12/1966  12/1970  12/2607  10/2246  11/2868  11/1982  10/1950
---------------- Examples from DFA ---------------
s1:  02/2998

         

         #A: jeremy chapman
         #D: Matches 12 hour time format
         #U: http://regexlib.com/REDetails.aspx?regexp_id=723
expr 328: ^(([1-9]{1})|([0-1][1-2])|(0[1-9])|([1][0-2])):([0-5][0-9])(([aA])|([pP]))[mM]$
tree:   ((((([1-9]|([01][12])|(0[1-9])|(1[012])):)([0-5][0-9]))([Aa]|[Pp]))[Mm])
augmnt: (((((([1-9]|([01][12])|(0[1-9])|(1[012])):)([0-5][0-9]))([Aa]|[Pp]))[Mm])#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  05:56Pm  10:01am  03:40pm  01:20Pm  6:18aM  05:34aM  01:10PM  1:59AM
ex(1):  2:09am  11:36aM  10:20pM  10:07AM  4:00am  02:11am  07:48Am  11:52Am
ex(2):  01:48aM  09:18am  2:53aM  3:05AM  02:30Am  07:39Pm  3:28PM  10:19AM
ex(3):  11:58am  3:26Am  1:02pM  3:18pm  12:59pM  05:44Pm  5:44AM  12:50pM
ex(5):  9:48pM  12:47Pm  11:58pm  3:17pM  7:27aM  9:31aM  01:43pm  09:59AM
ex(8):  9:30pM  08:48pM  02:03Pm  11:38pM  11:20Am  9:41pM  02:04PM  9:13am
---------------- Examples from DFA ---------------
s1:  1:26pm

         

         #A: Les Portugal
         #D: This is a regular expression I used to validate negative and positive WHOLE numbers, including 0.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=724
ERROR:   (^[0]{1}$|^[-]?[1-9]{1}\d*$)
    rx: Embedded '^' unimplemented: in "(^[0]{1}$|^[-]?[1-9]{1}\d*$)"

         

         #A: Ullrich Clemenz Canaan
         #D: This ist the Expression for a happy smiley. It should find all the usual writings of the emotion icon :)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=726
expr 329: [:]{1}[-~+o]?[)>]+
tree:   ((:[+o~-]?)[)>]+)
augmnt: (((:[+o~-]?)[)>]+)#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  :>  :>  :>  :)  :)  :>  :)  :)  :)  :)  :)  :>  :)  :>  :)  :)  :>  :>
ex(1):  :>  :~>  :)  :>  :o)  :>  :o)  :>  :>  :~>  :)  :>  :)  :o>  :)  :-)
ex(2):  :+>  :-)>  :>)  :>  :~))  :)  :+>)  :)  :>  :-)  :->  :)>  :>  :o))
ex(3):  :+>  :o)>>  :)  :>  :)))  :-)>  :)>  :~)>>  :~))>  :)>>  :o>>)  :+>>>
ex(5):  :))))>  :~)>  :>>)))  :))  :~)  :)>  :~))>  :o>  :)>>  :)>  :)  :>>)>
ex(8):  :>  :))>>)>)  :)))>  :-)  :~)>)>))>)  :>>)))  :)>>  :>>)))  :~>  :>)>)>
---------------- Examples from DFA ---------------
s1:  :)

         

         #A: Michael Ash
         #D: Height notation for feet (') and inches(")
         #U: http://regexlib.com/REDetails.aspx?regexp_id=727
expr 330: ^\d?\d'(\d|1[01])"$
tree:   (((([0-9]?[0-9])')([0-9]|(1[01])))")
augmnt: ((((([0-9]?[0-9])')([0-9]|(1[01])))")#)
length: 4 to 6
-------------------- Examples --------------------
ex(0):  4'11\"  7'8\"  7'2\"  1'4\"  8'1\"  2'11\"  5'3\"  0'7\"  6'10\"  2'8\"
ex(1):  4'10\"  90'10\"  83'3\"  8'11\"  2'2\"  8'10\"  99'9\"  4'6\"  39'0\"
ex(2):  7'10\"  5'0\"  79'11\"  14'7\"  3'10\"  4'3\"  8'4\"  8'10\"  98'2\"
ex(3):  3'2\"  9'8\"  24'5\"  8'10\"  05'6\"  7'11\"  0'11\"  3'11\"  63'8\"
ex(5):  5'10\"  0'10\"  89'11\"  3'0\"  5'5\"  6'6\"  01'2\"  11'6\"  89'9\"
ex(8):  72'2\"  4'11\"  6'4\"  3'10\"  10'10\"  47'6\"  92'3\"  7'1\"  79'7\"
---------------- Examples from DFA ---------------
s1:  4'8\"

         

         #A: Murray Roke
         #D: Matches all positive & negative decimal floating point numbers, to any magnitude. Allows empty string.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=729
expr 331: ^-?\d*(\.\d+)?$
tree:   ((-?[0-9]*)(.[0-9]+)?)
augmnt: (((-?[0-9]*)(.[0-9]+)?)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  .5  7  .8  .0  8  6  2.5  .0  -4  7  .8  .7    7  9  -6  -9  -  2.6    
ex(2):  -91  -4  8.94  .8  -.69  -  -  79.3  1  7  29    0.8  -  79.99  42  -6
ex(3):  -22  -86.185  -  -.5    70.0    -383.75  -488.4  465.432  53  -98.743
ex(5):    99  -  -19867.10951  21.77248  8459.269  4232.5  -.6174  -  -26636
ex(8):  -.198  -79  77.600666  -760  -.9  07350359  25637.8009948    -2433.21  
---------------- Examples from DFA ---------------
s0:  
s2:  2
s3:  .8

         

         #A: Peter Donker
         #D: Word HTML cleanup code. Use this expression to get rid of most of the stuff that Word adds to an HTML document such as: lots of span elements, font-family and font-size style attributes, class attributes, a whole bunch of if-then statements. Use this expression in a regex.replace(originalHtml, regExpr, "").
         #U: http://regexlib.com/REDetails.aspx?regexp_id=731
ERROR:   (?s)( class=\w+(?=([^<]*>)))|(<!--\[if.*?<!\[endif\]-->)|(<!\[if !\w+\]>)|(<!\[endif\]>)|(<o:p>[^<]*</o:p>)|(<span[^>]*>)|(</span>)|(font-family:[^>]*[;'])|(font-size:[^>]*[;'])(?-s)
    rx: '(?...' unimplemented: in "(?s)( class=\w+(?=([^<]*>)))|(<!--\[if.*?<!\[endif\]-->)|(<!\[if !\w+\]>)|(<!\[endif\]>)|(<o:p>[^<]*</o:p>)|(<span[^>]*>)|(</span>)|(font-family:[^>]*[;'])|(font-size:[^>]*[;'])(?-s)"

         

         #A: John Main
         #D: Cheap and cheerful URL checker. Requires a http/https/ftp at the start and will then allow anything starting with at least a <something>.<something>.<something> then valid characters separated by dots and slashes
         #U: http://regexlib.com/REDetails.aspx?regexp_id=732
expr 332: ^(ht|f)tp(s?)\:\/\/[a-zA-Z0-9\-\._]+(\.[a-zA-Z0-9\-\._]+){2,}(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&%\$#_]*)?$
tree:   ((((((((((((ht)|f)t)p)s?):)/)/)[.0-9A-Z_a-z-]+)(.[.0-9A-Z_a-z-]+){2,})/?)[#-'+-9?A-Z\_a-z]*?)
augmnt: (((((((((((((ht)|f)t)p)s?):)/)/)[.0-9A-Z_a-z-]+)((.[.0-9A-Z_a-z-]+)(.[.0-9A-Z_a-z-]+)+))/?)[#-'+-9?A-Z\_a-z]*?)#)
length: 11 to *
-------------------- Examples --------------------
ex(0):  http://Q.Q.8  http://9.3.c  http://Y.Z.3  ftp://u.N.I  http://W.l.g
ex(1):  ftp://S.i.5  http://8.v.s  https://H._.C/  ftp://L.o.2/L  http://P.8.g
ex(2):  ftps://a8.lw._/  https://u.5.w._v  ftp://T-.rT.J.a/  https://KJ.Mq.a/
ex(3):  ftps://Zs.VT.bg/  http://5Ib.jE.8X8.9i  ftps://DUM.AN.JY.t.6/kl3
ex(5):  http://ue.0.nAw/  https://Ur3.GKN-.sq.RZ95.2.A.b42o/
ex(8):  http://hhYTt1B5.q.GW-/U0Y-m-ES
---------------- Examples from DFA ---------------
s1:  ftp://2.t.f

         

         #A: Lewis Moten
         #D: Validates 1 or more email addresses.  Email addresses can be delimited with either comma or semicolon.  White space is allowed after delimiter, but not necessary.  I needed this to allow my users to specify multiple email addresses if they choose to do so.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=735
expr 333: \w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*([,;]\s*\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)*
tree:   (((((((([0-9A-Z_a-z]+([+.-][0-9A-Z_a-z]+)*)@)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*).)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*)((((((((([,;][\t-\r ]*)[0-9A-Z_a-z]+)([+.-][0-9A-Z_a-z]+)*)@)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*).)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*)*)
augmnt: ((((((((([0-9A-Z_a-z]+([+.-][0-9A-Z_a-z]+)*)@)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*).)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*)((((((((([,;][\t-\r ]*)[0-9A-Z_a-z]+)([+.-][0-9A-Z_a-z]+)*)@)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*).)[0-9A-Z_a-z]+)([.-][0-9A-Z_a-z]+)*)*)#)
length: 5 to *
-------------------- Examples --------------------
ex(0):  H@L.q  V@o.B  _@z.l  I@q.Y  N@T.m  U@V.p  e@b.z  W@u.e  C@B.x  K@T.C
ex(1):  P-C@C.O-6  t+o@u.O;Y@w.v  _-l@u.P  Q.9@B.3.G.l;W+Z@8.L.1
ex(2):  w-RV@af.d.cv-n,  GF-dk-Qv@B-2v.Y-X_.IZ;oQ@Kb-pV-f9.Wc.57-N
ex(3):  I.wbZ-4ZK-8@yz.Ax-M1-A.O-XYl._mx-jEc;  fna@mdM-Fs-c.mO.Vsg,   z@dkk-_-e.K-og-N;svf.J+qLM-32@FKu.D.c-P.YX
ex(5):  5w-zV+5O+RV@g.0_Io-bGv.d3S.E0r; OhC6K+km3o-9v8VI+kRfMJ@xgl0_.pQ-zZo-T21.jYF7.Zc.f0A.K.FKLV.7yR;     9kWMq-P.oOU-gWsn-0oC46@DGPAu.h
ex(8):  qB@V7wPY-b52Bmn-Apczq-gnwME.SUweGL.wEp.Q.whvyzyw4-Qs.BRFMU-1Jh;      _Q.fxid.UNd.ctl0BbQ+0zR-RhLt971+fC7nq9sT.nB-uodJ@yiUJBiK-tPFpBwZa-faji6ALb.1AoEic.q4d04Npt-7rJQJVr-WHld.CakSE.h-7h_5Ju-l9k8LL,        iJP-pvLPz-qQxKjoZe+NnXxBy-56gXyR@L-A.7XHz.Z.ndY.N67pwG1_
---------------- Examples from DFA ---------------
s1:  c@e.n

         

         #A: krest krest
         #D: For who use a space as thousands separator like french, deutsch ....
         #U: http://regexlib.com/REDetails.aspx?regexp_id=745
ERROR:   (^(((\d)|(\d\d)|(\d\d\d))(\xA0|\x20))*((\d)|(\d\d)|(\d\d\d))([,.]\d*)?$)
    rx: Embedded '^' unimplemented: in "(^(((\d)|(\d\d)|(\d\d\d))(\xA0|\x20))*((\d)|(\d\d)|(\d\d\d))([,.]\d*)?$)"

         

         #A: Toby Henderson
         #D: This will match all tags in a string, it's good for stripping HTML or XML tags to get the plain text.It works with attributes that include javascript or "<>".
It will match all these
noshade
color="#000000"
align="left">
align="center"><font face="Times New Roman"
size="5"><b>UNITED STATES</b></font></p>
         #U: http://regexlib.com/REDetails.aspx?regexp_id=746
ERROR:   <(?:[^"']+?|.+?(?:"|').*?(?:"|')?.*?)*?>
    rx: prefer-fewer '?' unimplemented: in "<(?:[^"']+?|.+?(?:"|').*?(?:"|')?.*?)*?>"

         

         #A: Mohit  Yadav
         #D: This Works good until we want a multiple email address validator, I am working on it to make it work with the multiple email address, If anyone can work on this part as to validate a multiple email address then that will produce a very good expression, i think the best of this kind. AIM - to Validate Mohit <myadav@yahoo.com>; Rohit <ryadav@yahoo.com>; .........(any number of times)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=749
ERROR:   ^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*\s+<(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})>$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})$
    rx: Embedded '$' unimplemented: in "^[a-zA-Z]+(([\'\,\.\- ][a-zA-Z ])?[a-zA-Z]*)*\s+<(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})>$|^(\w[-._\w]*\w@\w[-._\w]*\w\.\w{2,3})$"

         

         #A: anil agarwal
         #U: http://regexlib.com/REDetails.aspx?regexp_id=750
ERROR:   ^((31(?!\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$
    rx: '(?...' unimplemented: in "^((31(?!\ (Apr(il)?|June?|(Sept|Nov)(ember)?)))|((30|29)(?!\ Feb(ruary)?))|(29(?=\ Feb(ruary)?\ (((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)))))|(0?[1-9])|1\d|2[0-8])\ (Jan(uary)?|Feb(ruary)?|Ma(r(ch)?|y)|Apr(il)?|Ju((ly?)|(ne?))|Aug(ust)?|Oct(ober)?|(Sept|Nov|Dec)(ember)?)\ ((1[6-9]|[2-9]\d)\d{2})$"

         

         #A: Bruce Hatherly
         #D: Here is a regular expression I wrote that validates U.S. phone numbers with area codes. You can't have a leading '0' or '1' but you can separate the number blocks with a space, a dot, a slash, or a hyphen. It also prevents a '0' or '1' for the first digit of the prefix. No extension is allowed and it must be 10 digits.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=752
expr 334: ^[\(]? ([^0-1]){1}([0-9]){2}([-,\),/,\.])*([ ])?([^0-1]){1}([0-9]){2}[ ]?[-]?[/]?[\.]? ([0-9]){4}$
tree:   ((((((((((((((? )[\x01-/2-\u007f])[0-9]{2})[),-/]*) ?)[\x01-/2-\u007f])[0-9]{2}) ?)-?)/?).?) )[0-9]{4})
augmnt: (((((((((((((((? )[\x01-/2-\u007f])([0-9][0-9]))[),-/]*) ?)[\x01-/2-\u007f])([0-9][0-9])) ?)-?)/?).?) )((([0-9][0-9])[0-9])[0-9]))#)
length: 12 to *
-------------------- Examples --------------------
ex(0):   $36967 8887   s26X00 5860   I20!27 5483   W94646 9780   '08V29 7464
ex(1):   P39 [82 - 6208   $00. M99 8939  ( _78'35 -/ 2556   o79-(47 . 3290
ex(2):  ( x14) W68-/ 2098   X52// i83/ 0668   a79i00 -. 6753   G88)$07/. 3200
ex(3):  ( *06- I21 - 3891   %16X99- 2284  ( ;72//`23-. 0733   Y47., V26-. 1617
ex(5):  ( Y96]66 / 7011   o26 C03  5637  ( U00))-,/ \"43 /. 2146   E34j79- 3336
ex(8):   B61)--,/ O93-. 7036  ( M02/)---//) {09-/. 9138
---------------- Examples from DFA ---------------
s1:   !71D11 0228

         

         #A: Jason Paschal
         #D: the regex's on this site for pulling links off a page always seemed to be faulty, or at least never worked with PHP, so i made this one.  simple, as i'm an amateur with regex's, but stumbled thru it and this one actually works.  tested with PHP function: preg_match_all("/href[ ]*=[ ]*('|\")([^\"'])*('|\")/",$string,$matches)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=758
expr 335: href[ ]*=[ ]*('|\")([^\"'])*('|\")
tree:   (((((((((hr)e)f) *)=) *)('|"))[\x01-!#-&(-\u007f]*)('|"))
augmnt: ((((((((((hr)e)f) *)=) *)('|"))[\x01-!#-&(-\u007f]*)('|"))#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  href='\"  href='\"  href=''  href=\"'  href=''  href=''  href='\"
ex(1):  href = 'T\"  href='p'  href= ''  href= '\"  href= 'a'  href = \"'
ex(2):  href ='1=\"  href  =\"n'  href  =  't\"  href= \"\"  href=  ''
ex(3):  href=   \"B7'  href =   \"\"  href   =''  href=   \"\"
ex(5):  href =   ''  href     =\"\"  href     =     \"Y\"  href   =\"6L'
ex(8):  href     =        \"@)5|k0}^\"  href     =  'i>MJ;qj<'
---------------- Examples from DFA ---------------
s1:  href=\"\"

         

         #A: Michael Ash
         #D: yyyy-mm-dd Datetime for AD, with leap year. See http://blogs.regexadvice.com/mash/archive/2004/04/23/1021.aspx for details on similar regexs
         #T: A.D. Calendar dates
         #U: http://regexlib.com/REDetails.aspx?regexp_id=760
ERROR:   (?#Calandar from January 1st 1 A.D to December 31, 9999 )(?# in yyyy-mm-dd format )(?!(?:1582\D10\D(?:0?[5-9]|1[0-4]))|(?#Missing days from 1582 )(?:1752\D0?9\D(?:0?[3-9]|1[0-3]))(?#or Missing days from 1752 )(?# both sets of missing days should not be in the same calendar so remove one or the other))(?n:^(?=\d)(?# the character at the beginning a the string must be a digit )((?'year'\d{4})(?'sep'[-./])(?'month'0?[1-9]|1[012])\k'sep'(?'day'(?<!(?:0?[469]|11).)31|(?<!0?2.)30|2[0-8]|1\d|0?[1-9]|(?# if feb 29th check for valid leap year )(?:(?<=(?!(?#exclude these years from leap year pattern ) 000[04](?#No year 0 and no leap year in year 4 )|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)(?# centurial years > 1500 not evenly divisible by 400 are not leap year))(?:(?:\d\d)(?# century)(?:[02468][048]|[13579][26])(?#leap years))\k'sep'(?:0?2)\k'sep')|(?# else if not Feb 29 )(?<!\k'sep'(?:0?2)\k'sep')(?# and day not Feb 30 or 31 ))29)(?(?=\x20\d)\x20|$))?(?# if there is a space followed by a digit check for time )(?<time>((?# 12 hour format )(0?[1-9]|1[012])(?# hours )(:[0-5]\d){0,2}(?# optional minutes and seconds )(?i:\x20[AP]M)(?# required AM or PM ))|(?# 24 hour format )([01]\d|2[0-3])(?#hours )(:[0-5]\d){1,2})(?#required minutes optional seconds )?$)
    rx: '(?...' unimplemented: in "(?#Calandar from January 1st 1 A.D to December 31, 9999 )(?# in yyyy-mm-dd format )(?!(?:1582\D10\D(?:0?[5-9]|1[0-4]))|(?#Missing days from 1582 )(?:1752\D0?9\D(?:0?[3-9]|1[0-3]))(?#or Missing days from 1752 )(?# both sets of missing days should not be in the same calendar so remove one or the other))(?n:^(?=\d)(?# the character at the beginning a the string must be a digit )((?'year'\d{4})(?'sep'[-./])(?'month'0?[1-9]|1[012])\k'sep'(?'day'(?<!(?:0?[469]|11).)31|(?<!0?2.)30|2[0-8]|1\d|0?[1-9]|(?# if feb 29th check for valid leap year )(?:(?<=(?!(?#exclude these years from leap year pattern ) 000[04](?#No year 0 and no leap year in year 4 )|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00)(?# centurial years > 1500 not evenly divisible by 400 are not leap year))(?:(?:\d\d)(?# century)(?:[02468][048]|[13579][26])(?#leap years))\k'sep'(?:0?2)\k'sep')|(?# else if not Feb 29 )(?<!\k'sep'(?:0?2)\k'sep')(?# and day not Feb 30 or 31 ))29)(?(?=\x20\d)\x20|$))?(?# if there is a space followed by a digit check for time )(?<time>((?# 12 hour format )(0?[1-9]|1[012])(?# hours )(:[0-5]\d){0,2}(?# optional minutes and seconds )(?i:\x20[AP]M)(?# required AM or PM ))|(?# 24 hour format )([01]\d|2[0-3])(?#hours )(:[0-5]\d){1,2})(?#required minutes optional seconds )?$)"

         

         #A: Michael Ash
         #D: mm/dd/yyyy hh:MM:ss Datetime for all AD years, including leap years.
Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=644.  Please see that regex for details of what is being checked
         #U: http://regexlib.com/REDetails.aspx?regexp_id=761
ERROR:   (?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$
    rx: '(?...' unimplemented: in "(?=\d)^(?:(?!(?:10\D(?:0?[5-9]|1[0-4])\D(?:1582))|(?:0?9\D(?:0?[3-9]|1[0-3])\D(?:1752)))((?:0?[13578]|1[02])|(?:0?[469]|11)(?!\/31)(?!-31)(?!\.31)|(?:0?2(?=.?(?:(?:29.(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|(?:0?2(?=.(?:(?:\d\D)|(?:[01]\d)|(?:2[0-8])))))([-.\/])(0?[1-9]|[12]\d|3[01])\2(?!0000)((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?!\x20BC)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$"

         

         #A: Michael Ash
         #U: http://regexlib.com/REDetails.aspx?regexp_id=762
ERROR:   ^(?=\d)(?:(?!(?:(?:0?[5-9]|1[0-4])(?:\.|-|\/)10(?:\.|-|\/)(?:1582))|(?:(?:0?[3-9]|1[0-3])(?:\.|-|\/)0?9(?:\.|-|\/)(?:1752)))(31(?!(?:\.|-|\/)(?:0?[2469]|11))|30(?!(?:\.|-|\/)0?2)|(?:29(?:(?!(?:\.|-|\/)0?2(?:\.|-|\/))|(?=\D0?2\D(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|2[0-8]|1\d|0?[1-9])([-.\/])(1[012]|(?:0?[1-9]))\2((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:$|(?=\x20\d)\x20)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$
    rx: '(?...' unimplemented: in "^(?=\d)(?:(?!(?:(?:0?[5-9]|1[0-4])(?:\.|-|\/)10(?:\.|-|\/)(?:1582))|(?:(?:0?[3-9]|1[0-3])(?:\.|-|\/)0?9(?:\.|-|\/)(?:1752)))(31(?!(?:\.|-|\/)(?:0?[2469]|11))|30(?!(?:\.|-|\/)0?2)|(?:29(?:(?!(?:\.|-|\/)0?2(?:\.|-|\/))|(?=\D0?2\D(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:(?:\d\d)(?:[02468][048]|[13579][26])(?!\x20BC))|(?:00(?:42|3[0369]|2[147]|1[258]|09)\x20BC))))))|2[0-8]|1\d|0?[1-9])([-.\/])(1[012]|(?:0?[1-9]))\2((?=(?:00(?:4[0-5]|[0-3]?\d)\x20BC)|(?:\d{4}(?:$|(?=\x20\d)\x20)))\d{4}(?:\x20BC)?)(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$"

         

         #A: Michael Ash
         #D: yyyy/mm/dd hh:MM:ss Datetime for all AD years, including leap years.
Javascript safe version of http://regexlib.com/REDetails.aspx?regexp_id=760.  Please see that regex for details of what is being checked
         #U: http://regexlib.com/REDetails.aspx?regexp_id=763
ERROR:   ^(?=\d)(?:(?!(?:1582(?:\.|-|\/)10(?:\.|-|\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\.|-|\/)0?9(?:\.|-|\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\.|-|\/)(?:29|30))))(\d{4})([-\/.])(0?\d|1[012])\2((?!00)[012]?\d|3[01])(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$
    rx: '(?...' unimplemented: in "^(?=\d)(?:(?!(?:1582(?:\.|-|\/)10(?:\.|-|\/)(?:0?[5-9]|1[0-4]))|(?:1752(?:\.|-|\/)0?9(?:\.|-|\/)(?:0?[3-9]|1[0-3])))(?=(?:(?!000[04]|(?:(?:1[^0-6]|[2468][^048]|[3579][^26])00))(?:(?:\d\d)(?:[02468][048]|[13579][26]))\D0?2\D29)|(?:\d{4}\D(?!(?:0?[2469]|11)\D31)(?!0?2(?:\.|-|\/)(?:29|30))))(\d{4})([-\/.])(0?\d|1[012])\2((?!00)[012]?\d|3[01])(?:$|(?=\x20\d)\x20))?((?:(?:0?[1-9]|1[012])(?::[0-5]\d){0,2}(?:\x20[aApP][mM]))|(?:[01]\d|2[0-3])(?::[0-5]\d){1,2})?$"

         

         #A: Josh Aversa
         #D: This is a pretty flexable phone number validator for US numbers.  Allows optional country code and area code.  Allows separation of numbers with " ", "-", "." or nothing to seperate.  Area codes can be in parenthesis or not.  Validates that you'll get 7, 10, or 11 digits in the way the most number of people option when writing them.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=764
expr 336: ^((\d[-. ]?)?((\(\d{3}\))|\d{3}))?[-. ]?\d{3}[-. ]?\d{4}$
tree:   (((((([0-9][ .-]?)?(((([0-9]{3})))|[0-9]{3}))?[ .-]?)[0-9]{3})[ .-]?)[0-9]{4})
augmnt: ((((((([0-9][ .-]?)?(((((([0-9][0-9])[0-9]))))|(([0-9][0-9])[0-9])))?[ .-]?)(([0-9][0-9])[0-9]))[ .-]?)((([0-9][0-9])[0-9])[0-9]))#)
length: 7 to 16
-------------------- Examples --------------------
ex(0):  4436567  7888798  2610045  8601620  1278548  3009474  6897802  7084290
ex(1):  390-6478  4-(123)2060888  (199)9962268  9.(788) 7079702  .049-7034
ex(2):  (287).998 0910  852-2209  8654185  (320) 5068270  9(074)-936-6348
ex(3):  3205363  838.3784656  .2606990  6511.738.9516  1997724  284 7726
ex(5):  (999)6367921   527.6019  .8127964  -7960666  (604)1129260  55926253798
ex(8):  2(350)1431460  -229.8334   365.8193  (061)984-3662  464.6966936
---------------- Examples from DFA ---------------
s1:  5611363
s24:  561-9334
s10:  -1648004
s29:  5611363494

         

         #A: Chris Strolia-Davis
         #U: http://regexlib.com/REDetails.aspx?regexp_id=779
ERROR:   (?<commentblock>((?m:^[\t ]*\/{2}[^\n\r\v\f]+[\n\r\v\f]*){2,})|(\/\*[\w\W]*?\*\/))
    rx: '(?...' unimplemented: in "(?<commentblock>((?m:^[\t ]*\/{2}[^\n\r\v\f]+[\n\r\v\f]*){2,})|(\/\*[\w\W]*?\*\/))"

         

         #A: PJ Bijoy
         #D: US telephone check
         #U: http://regexlib.com/REDetails.aspx?regexp_id=784
ERROR:   ^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$
    rx: Embedded '$' unimplemented: in "^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$"

         

         #A: Kristijan Mitrovic
         #D: As I could understand the HTML standard, this is the valid reg.exp. for comments.
The only differenc from the last one is that the comment can be terminated by two minuses followed by none OR SOME space caracters and then by character >
         #U: http://regexlib.com/REDetails.aspx?regexp_id=793
ERROR:   <!--[\s\S]*?--[ \t\n\r]*>
    rx: prefer-fewer '?' unimplemented: in "<!--[\s\S]*?--[ \t\n\r]*>"

         

         #A: Justin Elsberry
         #D: Javascript matches US zipcodes not allowing all zeros in first 5 or +4
         #U: http://regexlib.com/REDetails.aspx?regexp_id=920
ERROR:   (^(?!0{5})(\d{5})(?!-?0{4})(-?\d{4})?$)
    rx: Embedded '^' unimplemented: in "(^(?!0{5})(\d{5})(?!-?0{4})(-?\d{4})?$)"

         

         #A: MARK J KRISBURG
         #D: Single field zip code validator, useful for Web Forms.  Allows user to enter 5-digit or 5-digit plus 4 zip code, with hyphen or space or NO space between last 4 digits.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=924
expr 337: ^\d{5}((-|\s)?\d{4})?$
tree:   ([0-9]{5}((-|[\t-\r ])?[0-9]{4})?)
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9])((-|[\t-\r ])?((([0-9][0-9])[0-9])[0-9]))?)#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  778439136  47839  334823262  06208  89001 0996  42268 4037
ex(2):  22556  497913471  40078  32908  641038524  628797998  142096885  23802
ex(3):  52418-8320  93050  68270 8007  43383-5363  48856  40746 4320  053639838
ex(5):  04656  59260  699012151  198679109  51602 7724  82284 7269  64423
ex(8):  17478  69992  636871617  95275  76019  19812  79646 9600  66674  76047
---------------- Examples from DFA ---------------
s1:  60735
s6:  607350924

         

         #A: MARK J KRISBURG
         #D: Single field zip code validator useful for web forms, where user may enter 5 digit or 9 digit zip code, and may use hyphen, space, or no space between the first 5 digits and last 4 digits.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=925
expr 338: ^\d{5}((\-|\s)?\d{4})?$
tree:   ([0-9]{5}((-|[\t-\r ])?[0-9]{4})?)
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9])((-|[\t-\r ])?((([0-9][0-9])[0-9])[0-9]))?)#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  778439136  47839  334823262  06208  89001 0996  42268 4037
ex(2):  22556  497913471  40078  32908  641038524  628797998  142096885  23802
ex(3):  52418-8320  93050  68270 8007  43383-5363  48856  40746 4320  053639838
ex(5):  04656  59260  699012151  198679109  51602 7724  82284 7269  64423
ex(8):  17478  69992  636871617  95275  76019  19812  79646 9600  66674  76047
---------------- Examples from DFA ---------------
s1:  60735
s6:  607350924

         

         #A: MARK J KRISBURG
         #D: Telephone validator allowing user to enter 10 digit telephone number with segments of number separated by hyphens, periods or spaces.  Also braces allowed around area code.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=926
expr 339: ^(\([2-9]|[2-9])(\d{2}|\d{2}\))(-|.|\s)?\d{3}(-|.|\s)?\d{4}$
tree:   (((((((([2-9])|[2-9])([0-9]{2}|([0-9]{2}))))(-|[\x01-\u007f]|[\t-\r ])?)[0-9]{3})(-|[\x01-\u007f]|[\t-\r ])?)[0-9]{4})
augmnt: ((((((((([2-9])|[2-9])(([0-9][0-9])|(([0-9][0-9])))))(-|[\x01-\u007f]|[\t-\r ])?)(([0-9][0-9])[0-9]))(-|[\x01-\u007f]|[\t-\r ])?)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 14
-------------------- Examples --------------------
ex(0):  (3567788879  (800)5860162  (685)8300947  (478)2708429  (8407784390
ex(1):  (5322060888  611 0994226  (994)-887-0769  625-497\"0347  207032K4641
ex(2):  781)0916885  (8229826524  830)320-5066  (779i0073383  575-488B4074
ex(3):  674)-4650592  (6991161511  273910!6021  7774828459  926)442-9055
ex(5):  (787 617Y7527  (341)128 4677  760)6672760  (212)-073-5924
ex(8):  724>072-2146  (542)=8334333  878)193-6061  (7431362961  (266)06935047
---------------- Examples from DFA ---------------
s1:  7656191798
s13:  76561917986
s12:  765619[4123

         

         #A: Tomas Axelsson
         #D: Swedish person number. Don't work on persons older then 100 years, but they are so few that it shouldn't be a problem. Easy to fix, but I choose not to accept oldies...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=927
expr 340: [1-2][0|9][0-9]{2}[0-1][0-9][0-3][0-9][-][0-9]{4}
tree:   (((((((([12][09|])[0-9]{2})[01])[0-9])[0-3])[0-9])-)[0-9]{4})
augmnt: ((((((((([12][09|])([0-9][0-9]))[01])[0-9])[0-3])[0-9])-)((([0-9][0-9])[0-9])[0-9]))#)
length: 13 to 13
-------------------- Examples --------------------
ex(0):  19650718-8798  1|000506-1620  20850810-9474  1|780210-4290
ex(1):  29781903-4821  1|620600-8890  10991039-4226  1|990017-8873
ex(2):  1|911014-1400  29321004-4103  29520628-9327  29140011-6885
ex(3):  19530803-0930  29680727-9080  1|330313-7536  29850400-4659
ex(5):  10170338-4656  10260029-0116  10111807-8910  2|600119-7724
ex(8):  19230130-5107  29611418-6999  1|360732-6179  20521621-4198
---------------- Examples from DFA ---------------
s1:  19661427-0470

         

         #A: MARK J KRISBURG
         #D: US telephone number with area code.  Validates and also captures AreaCode, Prefix and Suffix for reformatting.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=929
ERROR:   ^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$
    rx: '(?...' unimplemented: in "^\(?(?<AreaCode>[2-9]\d{2})(\)?)(-|.|\s)?(?<Prefix>[1-9]\d{2})(-|.|\s)?(?<Suffix>\d{4})$"

         

         #A: Jerry Schmersahl
         #D: Validate US zip codes. Matches all zip codes of exactly 5 digits except 00000. Optionally, matches zip5+zip4 where zip5 is exactly 5 digits, zip4 is exactly 4 digits, and zip5 and zip4 are, optionally, separated by a single space or hyphen. Captures zip5 and zip4 to named groups to facilitate program manipulation.
         #T: Validate US Postal Code
         #U: http://regexlib.com/REDetails.aspx?regexp_id=930
ERROR:   ^(?!00000)(?<zip>(?<zip5>\d{5})(?:[ -](?=\d))?(?<zip4>\d{4})?)$
    rx: '(?...' unimplemented: in "^(?!00000)(?<zip>(?<zip5>\d{5})(?:[ -](?=\d))?(?<zip4>\d{4})?)$"

         

         #A: MARK J KRISBURG
         #D: Zip Code (Zip or Zip-Plus4 format).  Accepts a hyphen, a space, or nothing between Zip and Plus4 segments.  Named segments <zip> and <plus4> may be used to reformat users input to desired format using Regex replace function (re.replace).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=931
ERROR:   (?<zip5>^\d{5})([\- ]?(?<plus4>\d{4})?$)
    rx: '(?...' unimplemented: in "(?<zip5>^\d{5})([\- ]?(?<plus4>\d{4})?$)"

         

         #A: Diego dos Santos
         #D: Validate american date formats: mm/dd/yyyy or m/d/yy or m.d.yyyy with separators: . - /
Valid dates only! m (1-12)/ d (1-31)/ y (0..)
(rizzipereira.com.br)
For Brazilian date format: http://www.regexlib.com/REDetails.aspx?regexp_id=250
         #U: http://regexlib.com/REDetails.aspx?regexp_id=932
expr 341: ^([0]?[1-9]|[1][0-2])[./-]([0]?[1-9]|[1|2][0-9]|[3][0|1])[./-]([0-9]{4}|[0-9]{2})$
tree:   ((((((0?[1-9])|(1[012]))[./-])((0?[1-9])|([12|][0-9])|(3[01|])))[./-])([0-9]{4}|[0-9]{2}))
augmnt: (((((((0?[1-9])|(1[012]))[./-])((0?[1-9])|([12|][0-9])|(3[01|])))[./-])(((([0-9][0-9])[0-9])[0-9])|([0-9][0-9])))#)
length: 6 to 10
-------------------- Examples --------------------
ex(0):  1.|7/8879  7-3|/6016  1.28/8300  11-6.80  7/29-46  4/6.90  10-30.3348
ex(1):  4-|1/10  11.31-99  1-9-57  07/30.0497  11/2.0078  06.|4.3768
ex(2):  11-08/5238  9/|8.24  12-13.9305  3/30.08  7-01.67  10/|5.4074  02/3|-36
ex(3):  3-|2-0699  01.03.6738  11/10-99  07-3|/93  10.31/21  12.30.1747
ex(5):  10/15.52  10-31-28  12/3|.60  7/17.4701  12-7.50  12-25/79  3/31.8273
ex(8):  03.31-9798  10-3|-78  12-01/6188  12/26-9614  3-5.6936  12/30-7080
---------------- Examples from DFA ---------------
s1:  1/2/30
s8:  1/2/3033

         

         #A: Dennis de Jong
         #D: Meets dutch phone number requirements.. One posted here before didn't allow the 0 after the first digit of the call ID (so the second number or later after the prefix), which should be allowed. I modified that one to meet full requirements now..
Enjoy!!
         #U: http://regexlib.com/REDetails.aspx?regexp_id=935
expr 342: ([0]{1}[6]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){7})|([0]{1}[1-9]{1}[0-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){5})|([0]{1}[1-9]{1}[0-9]{1}[-\s]*[1-9]{1}[\s]*([0-9]{1}[\s]*){6})
tree:   ((((((06)[\t-\r -]*)[1-9])[\t-\r ]*)([0-9][\t-\r ]*){7})|(((((((0[1-9])[0-9])[0-9])[\t-\r -]*)[1-9])[\t-\r ]*)([0-9][\t-\r ]*){5})|((((((0[1-9])[0-9])[\t-\r -]*)[1-9])[\t-\r ]*)([0-9][\t-\r ]*){6}))
augmnt: (((((((06)[\t-\r -]*)[1-9])[\t-\r ]*)((((((([0-9][\t-\r ]*)([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*)))|(((((((0[1-9])[0-9])[0-9])[\t-\r -]*)[1-9])[\t-\r ]*)((((([0-9][\t-\r ]*)([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*)))|((((((0[1-9])[0-9])[\t-\r -]*)[1-9])[\t-\r ]*)(((((([0-9][\t-\r ]*)([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*))([0-9][\t-\r ]*))))#)
length: 10 to *
-------------------- Examples --------------------
ex(0):  0625677888  0427100458  0365012785  0200647468  0402708429  0664077843
ex(1):  0148836028  062 9 9 428 9 0   06-879 25 09 1   06-2 0 98613 8 
ex(2):  062 -5  2  5082  0   0327-4 07389   063 8 40 6  0  05
ex(3):  0662 --2   0   0  9  2  2  023-  4  1   1  31 7  9 
ex(5):  091-706  2     1 4   7     06-- -9  9     7     5  13  6    2    
ex(8):  046 ---2        0  2        6     6     3     6  
---------------- Examples from DFA ---------------
s1:  0676773885

         

         #A: Amos Hurd
         #D: Matches valid reference codes for AMD Athlon and Duron processors (not Athlon 64).
         #T: AMD Athlon/Duron Codes (not Athlon 64)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=936
expr 343: ^((A(((H[MX])|(M(P|SN))|(X((D[ACH])|(M[DS]))?)))?)|(K7(A)?)|(D(H[DLM])?))(\d{3,4})[ABD-G][CHJK-NPQT-Y][Q-TV][1-4][B-E]$
tree:   ((((((((A((H[MX])|(M(P|(SN)))|(X((D[ACH])|(M[DS]))?))?)|((K7)A?)|(D(H[DLM])?))[0-9]{3,4})[ABD-G])[CHJ-NPQT-Y])[Q-TV])[1-4])[B-E])
augmnt: (((((((((A((H[MX])|(M(P|(SN)))|(X((D[ACH])|(M[DS]))?))?)|((K7)A?)|(D(H[DLM])?))((([0-9][0-9])[0-9])[0-9]?))[ABD-G])[CHJ-NPQT-Y])[Q-TV])[1-4])[B-E])#)
length: 9 to 13
-------------------- Examples --------------------
ex(0):  A365BNV1B  A982ETS3D  D601DTQ4B  A548AMQ4B  A978EVS1D  K7746BYV2D
ex(1):  D334AQV3D  A208FKQ2E  DHM964EXQ4E  A037FCT4C  A970GTR3D  DHL0341BLV3D
ex(2):  D2873GKR2B  D091BMQ4B  D2208AHV3B  K7A883DLQ2D  K77079FTQ4D  A393DCQ4D
ex(3):  A5361AQS4B  D378AYV3B  D600BLV2B  K7A9863AUT4E  D199ACQ1B  K7A377BWV1D
ex(5):  A6699GQS2B  DHD1792DJR1D  A1982AQV1B  DHD600FCS3E  K7A112DYS3C
ex(8):  D680DKV1D  D2435AQT1C  D6083DJV4E  AHM3367ATQ2C  A260EMV1B
---------------- Examples from DFA ---------------
s1:  A640FHS1B

         

         #A: mahesh mandhare
         #U: http://regexlib.com/REDetails.aspx?regexp_id=940
expr 344: ^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$
tree:   (((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)[A-Za-z]{2,})
augmnt: ((((((([0-9A-Za-z]([._-]?[0-9A-Za-z]+)*)@)[0-9A-Za-z]+)([.-]?[0-9A-Za-z]+)*).)([A-Za-z][A-Za-z]+))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  H@L.by  s@o.KD  k@K.dU  I@q.Wi  J@d.BK  i@D.BC  9@U.yU  C@B.MF  b@H.tX
ex(1):  G0@r.yT  p@Y.JW  o@J.QS  L@v.Vb  k9@O.GM  Q.B@i.gB  P7@WZ.vm  0@F.q.eC
ex(2):  kY@No5.sm  8_affd@cvn.ba  St@dkQv.OmQ  m@Oia9.Za  3@CM.Zj
ex(3):  0@UHrS3XlHh.qv  h.Ly_rwbak4@K7yRlx.gjEi  L@5b-e-xW-c.nYQk
ex(5):  6_6zTcJ@kOSfg-WKJNF.o.pJs.gxNIY  ekMyR3eFK@jRsKPmaYd39Ksb3ou.pjZMF
ex(8):  8t2B6rwcMEzV5OYVE.e0voybGv@d3S-0rA.nIJpi
---------------- Examples from DFA ---------------
s1:  U@B.Up

         

         #A: Max Cacchiotti
         #D: Validates US or Canadian phone numbers with the use of "-" or numbers stuck together. No parantheses allowed as well as spaces. Area code is optional. The "9," is optional as well, which on some phone systems is needed to dial out.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=941
expr 345: ^(9,)*([1-9]\d{2}-?)*[1-9]\d{2}-?\d{4}$
tree:   ((((((9,)*(([1-9][0-9]{2})-?)*)[1-9])[0-9]{2})-?)[0-9]{4})
augmnt: (((((((9,)*(([1-9]([0-9][0-9]))-?)*)[1-9])([0-9][0-9]))-?)((([0-9][0-9])[0-9])[0-9]))#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  1436567  9888798  7610045  4601620  8278548  2009474  4897802  7084290
ex(1):  990-3647  543-7213262  9088900  9,609-8228939  9,188435-7697  4550497
ex(2):  790464-4765246  9,327-2140910  9,9382209  9,9,318-288-0930
ex(3):  9,336-685740-759-4320  9,9,798-974-8046  9,9,9,569-1162
ex(5):  9,9,9,9,9,237-596423290-307-7177866  9,263679161-5275  9,9,9,9,928-6467
ex(8):  9,9242563  9,9,9,9,9,9,9,9,433-821121308-4229  9,444-836-138-4906061
---------------- Examples from DFA ---------------
s1:  5890521
s8:  5899650
s14:  5899657

         

         #A: Richard Johnn
         #D: Useful for grabbing pipe delimited text from a string.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=942
expr 346: (\S*)+(\u007C)+(\S*)
tree:   (([\x01-\b\x0e-\x1f!-\u007f]*+|+)[\x01-\b\x0e-\x1f!-\u007f]*)
augmnt: ((([\x01-\b\x0e-\x1f!-\u007f]*+|+)[\x01-\b\x0e-\x1f!-\u007f]*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
ex(1):  |  C|  #|#  |  e|  l|  |  |  E|  |  X|  8|,  e|Q  <|h  |  '|  |  |  |
ex(2):  (g||O'  ||_D  Wd||  ||  ?|^  C|)  t|of  a|7  A.|E-  J||@  _||u  |i1
ex(3):  w|||  /V|E  m;-|||  PS|@F  nxIV)|||  ||xXK  1S3^KJM||  #Z~qy|||/WE  Z^|
ex(5):  dJCW]||*.k=  aIM(l69yx#Y;Lc||ZD!jz  he?Yv4|||||fT  YdV.]tJ]+|qdl}^
ex(8):  QOA&s[e]Y2g<47r{Ac\"8B#||y~mR0  3A#tJ5Qy8D{/kJ6U~-Je(~YwQl|||6
---------------- Examples from DFA ---------------
s1:  |

         

         #A: Rich Franzmeier
         #U: http://regexlib.com/REDetails.aspx?regexp_id=943
expr 347: ^\-?\(?([0-9]{0,3}(\,?[0-9]{3})*(\.?[0-9]*))\)?$
tree:   (((-?(?)(([0-9]{0,3}(,?[0-9]{3})*)(.?[0-9]*))))?)
augmnt: ((((-?(?)(((([0-9]?[0-9]?)[0-9]?)(,?(([0-9][0-9])[0-9]))*)(.?[0-9]*))))?)#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):  667)  0.  -288304)  7.  (4.  -16394.  (2  0,910.  3,037  -(67)  71347.
ex(2):  -2879,79942  -80  8,418.8  -3082799  43.6)  -(67  (02536.)
ex(3):  (5,867,910,1609)  -459,726.42)  -503174.69)  6,161,527,760.19
ex(5):  -01926735359462.7)  9482,224.072)  -(,229.)  33,381,902061898361.  -(66
ex(8):  -(93630,044949.743502)  -(40,715,517,310.7407)
---------------- Examples from DFA ---------------
s0:  
s2:  1
s3:  -
s6:  )
s7:  .
s8:  ,592
s10:  ,5929
s9:  ,59295

         

         #A: Error Reporter
         #D: Required and regular expression validator. For supporting
-999.99 to +999.99 . Positive and Negative integer/ decimal validations. Percentage sign is also supported. Will not allow empty strings. Can increase/decrease the range as you need.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=944
expr 348: ^[-+]?[0-9]\d{0,2}(\.\d{1,2})?%?$
tree:   (((([+-]?[0-9])[0-9]{0,2})(.[0-9]{1,2})?)%?)
augmnt: ((((([+-]?[0-9])([0-9]?[0-9]?))(.([0-9][0-9]?))?)%?)#)
length: 1 to 8
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  22.5  -044  +00  94  78.01%  79%  82.6  2  +191%  4  +94.8  +506.0
ex(2):  +08%  -4.36  -4%  +79.2%  6.3  28  5.50  3.00  80.9  043%  +564  +44%
ex(3):  388.14%  0.09  0.01  119  -905.0%  +7  89.7  -42.05%  -37%  692
ex(5):  7.49  -89  -19  64%  401  +63.39  66.9  09  83  35.1%  +03  99.4%
ex(8):  6.88  -3%  -66  +63.48%  30  2%  -66.1%  +749.8  33  441.7%  274.7%
---------------- Examples from DFA ---------------
s1:  3
s3:  3%
s6:  30
s5:  306
s4:  3.7
s8:  3.74

         

         #A: Jeff Johns
         #D: Validates against a U.S. postal code in either a 5 digit format or a 5 dash 4 format.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=946
expr 349: ^([0-9]{5})([\-]{1}[0-9]{4})?$
tree:   ([0-9]{5}(-[0-9]{4})?)
augmnt: (((((([0-9][0-9])[0-9])[0-9])[0-9])(-((([0-9][0-9])[0-9])[0-9]))?)#)
length: 5 to 10
-------------------- Examples --------------------
ex(0):  44365  67788  87982  61004  58601  62012  78548  30094  74689  78027
ex(1):  07464  77843-9136  47839  33482-3262  06208  89001-9109  96422  89399
ex(2):  73570-9702  25560  97917  34714  07803  90846  10376  52462  79327-8142
ex(3):  85238  22098  86524-5308  83209-5066  82707-0800  74338-3675  36348
ex(5):  04320  53631  98381-3780  46560-2600  69901-2151  19867-9109
ex(8):  24822  45937-6964  42321-5510  73361-7866  99926  36879  16179-7527
---------------- Examples from DFA ---------------
s1:  79646
s6:  79646-7179

         

         #A: Jeff Johns
         #U: http://regexlib.com/REDetails.aspx?regexp_id=947
expr 350: ^([4]{1})([0-9]{12,15})$
tree:   (4[0-9]{12,15})
augmnt: ((4(((((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]?)[0-9]?)[0-9]?))#)
length: 13 to 16
-------------------- Examples --------------------
ex(0):  4436567788879  4261004586016  4012785483009  4746897802708
ex(1):  49091364783943  41232620620880  419910996422639  40378887357077
ex(2):  407803290846407  452462879327984  49106885238028  486524185308823
ex(3):  44338393675364  46440746599042  43631898381747  465605926006901
ex(5):  42199477248229  4772696442321050  43361747866992  468792161795256
ex(8):  4796006667427  401124926073552  46256379868009  482732243350742
---------------- Examples from DFA ---------------
s1:  4333365783819
s16:  43333657838193
s15:  433336578381939
s14:  4333365783819390

         

         #A: Jeff Johns
         #D: Validate against any mastercard number. All MC's start with a number between 51 and 55 and are followed by 14 other numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=948
expr 351: ^([51|52|53|54|55]{2})([0-9]{14})$
tree:   ([1-5|]{2}[0-9]{14})
augmnt: ((([1-5|][1-5|])((((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 16 to 16
-------------------- Examples --------------------
ex(0):  2156778887982610  3|86016201278548  1447468978027084  5246407784390913
ex(1):  3208889001199109  4126893994037888  4107697022556049  1103471400780329
ex(2):  1|99814209106885  ||22098286524185  5332093050668270  5180074338393675
ex(3):  1|05363189838174  3446560592600699  4321511986738910  4102199477248228
ex(5):  ||73361747866999  5368792161795275  1101941981287964  |379600666742760
ex(8):  4256379868009948  1532243350721432  1587342297983344  3|65783819390260
---------------- Examples from DFA ---------------
s1:  5|66966693650478

         

         #A: Jeff Johns
         #D: Validate against any american express number. All american express numbers start with either a 34 or 37, followed by 13 other numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=949
expr 352: ^([34|37]{2})([0-9]{13})$
tree:   ([347|]{2}[0-9]{13})
augmnt: ((([347|][347|])(((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 15 to 15
-------------------- Examples --------------------
ex(0):  |75677888798261  7|8601620127854  770947468978027  349074640778439
ex(1):  ||2062088890011  339964226893994  748873570769702  3|0497917034714
ex(2):  445246287932799  |40910688523802  432865241853088  7|3050668270799
ex(3):  |35644074659904  |75363189838174  470465605926006  771621511986738
ex(5):  7|4593772696442  330551073361747  |79926636879216  372752760194198
ex(8):  3|2760470112492  775035924625637  4|0099484827322  |40721432146087
---------------- Examples from DFA ---------------
s1:  7|8193902606188

         

         #A: Jeff Johns
         #D: Validate against any discover card number. All DC's start with 6011 and are followed by 12 other numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=950
expr 353: ^([6011]{4})([0-9]{12})$
tree:   ([016]{4}[0-9]{12})
augmnt: ((((([016][016])[016])[016])((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 16 to 16
-------------------- Examples --------------------
ex(0):  0011778887982610  1100162012785483  6116897802708429  1610778439091364
ex(1):  0101011991099642  6661940378887357  6160255604979170  6660780329084641
ex(2):  1606106885238022  0600652418530883  0606066827079908  6066839367536348
ex(3):  6616898381743780  0166926006990116  6100986738910951  1661724822845937
ex(5):  0110786699926636  6611795275276019  1111796467717960  1106604701124926
ex(8):  6600848273224335  0616214608734229  1161443333657838  0111260618898436
---------------- Examples from DFA ---------------
s1:  0611047857036708

         

         #A: Jeff Johns
         #D: Validate against any diner's club card. All diner club cards start with 30,36, or 38, followed by 12 other numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=951
expr 354: ^([30|36|38]{2})([0-9]{12})$
tree:   ([0368|]{2}[0-9]{12})
augmnt: ((([0368|][0368|])((((((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 14 to 14
-------------------- Examples --------------------
ex(0):  |6567788879826  6|586016201278  66300947468978  33842907464077
ex(1):  83123262062088  |6119910996422  6|994037888735  60970225560497
ex(2):  08641037685246  8|327998142091  80852380220982  0|418530883209
ex(3):  |8383936753634  80440746599043  |3363189838174  3|465605926006
ex(5):  00951602199477  68284593772696  68321905510733  |6786699926636
ex(8):  83198128796467  ||600666742760  38124926073503  00625637986800
---------------- Examples from DFA ---------------
s1:  80321460873422

         

         #A: Mike Reeves-McMillan
         #D: Finds sentences (assuming they end with a full stop, question mark or exclamation mark).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=952
expr 355: ([^\.\?\!]*)[\.\?\!]
tree:   ([\x01- "-,/->@-\u007f-]*[!.?])
augmnt: (([\x01- "-,/->@-\u007f-]*[!.?])#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  !  !  .  ?  .  !  !  ?  !  !  ?  !  .  .  ?  !  !  ?  !  !  !  !  ?  .
ex(1):  .  u.  !  `.  !  ?  C.  :!  !  ?  .  T!  .  .  .  p!  V?  !  ?  ?  }!
ex(2):  ?  '2.  !  .  !  {.  |e.  \\?  0.  ;.  @G!  !  \\?  (\\.  hU!  Z?  t?
ex(3):  l.  ?  ?  h'.  !  \\6!  u<?  .  !  >>?  7m!  ~e\\!  ;t!  xB!  kZ{.  .
ex(5):  !  j?  1p/*U.  -y(?  ^[d\"7?  .  9G6]?  L8!  IJSW^.  ;(.  %3%.  C|!
ex(8):  j!  ;?  $&o`?  .  WC+k^.  SY)wU5.  VOIN(?  ~c5Xg|Qu?  ?  \\X~.
---------------- Examples from DFA ---------------
s1:  .

         

         #A: Mpho Molahloe
         #D: Verifies South African mobile numbers with or without the country code.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=953
expr 356: ^((?:\+27|27)|0)(=72|82|73|83|74|84)(\d{7})$
tree:   ((((((+2)7)|(27))|0)(((=7)2)|(82)|(73)|(83)|(74)|(84)))[0-9]{7})
augmnt: (((((((+2)7)|(27))|0)(((=7)2)|(82)|(73)|(83)|(74)|(84)))(((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 10 to 13
-------------------- Examples --------------------
ex(0):  +27748887982  27=720162012  0843009474  +27=728429074  +27739091364
ex(1):  0736208889  +27849964226  27833788873  0=727022556  +27823471400
ex(2):  0732462879  0848142091  +27730220982  +27823088320  0=726827079
ex(3):  0836348856  +27=720432005  0829838174  0=725605926  +27746215119
ex(5):  0742482284  0822696442  0825510733  27846999266  0732161795
ex(8):  +27737179600  +27=724701124  0733503592  +27828680099  +27842433507
---------------- Examples from DFA ---------------
s1:  0823336578

         

         #A: Phil A
         #D: Matches UK postcodes of the below formats. The space is optional.
AN NAA
AAN NAA
ANN NAA
ANA NAA
AANA NAA
AANN NAA
         #U: http://regexlib.com/REDetails.aspx?regexp_id=954
expr 357: ^(([A-Z]{1,2}[0-9]{1,2})|([A-Z]{1,2}[0-9][A-Z]))\s?([0-9][A-Z]{2})$
tree:   (((([A-Z]{1,2}[0-9]{1,2})|(([A-Z]{1,2}[0-9])[A-Z]))[\t-\r ]?)([0-9][A-Z]{2}))
augmnt: (((((([A-Z][A-Z]?)([0-9][0-9]?))|((([A-Z][A-Z]?)[0-9])[A-Z]))[\t-\r ]?)([0-9]([A-Z][A-Z])))#)
length: 5 to 8
-------------------- Examples --------------------
ex(0):  U36HI  Z8A8BL  E61SO  P86GN  K01WX  V48HO  P47MG  X78UO  K8A2ZE  C6E0PL
ex(1):  Z4P3NY  J8S 3MK  U28AB  WD919RS  Y6 9LU  TQ8 5XO  QD0K5FK  AL973ID
ex(2):  Y4I1OR  O5E6EG  BU7H 1SQ  JA65CN  K2 2KK  A1K 0OU  I9D5AW  Y7 9OW
ex(3):  P3Y8ZC  Y75RZ  SE0 6NF  Z3 4BX  S665PM  W691XY  NV187FA  P9R 0MN
ex(5):  K53 2CB  Q22 0LR  KR3S 4XK  SL96XO  TU1 9XY  P7G1XG  T1O7TY  MX190WQ
ex(8):  B4J6UT  B3X 4UQ  WP9I8KW  H8A2VT  Y357SH  B10CL  M2V 8HZ  AB36 8LY
---------------- Examples from DFA ---------------
s1:  W88OO

         

         #A: Jorrit Janszen
         #D: I use this expression to read bounced email addresses returned by the system administrator. The body of the subject should contain the email address somewhere but the location varies.
Examples:
To:      blah.v.blah@blah-blah.net ||
blah-blah.blah@blah.com ||
blah@blah.net 0n 25-12-2004 21:09
         #U: http://regexlib.com/REDetails.aspx?regexp_id=956
expr 358: ^[\n <"']*([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+)
tree:   ([\n "'<]*(([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+))
augmnt: (([\n "'<]*(([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+))#)
length: 3 to *
-------------------- Examples --------------------
ex(0):  c@.  y@O  F@Q  -@b  8@K  -@Y  U@V  9@3  n@7  E@C  x@o  Y@Z  V@F  9@G
ex(1):  N@I  1@K  \"e@V  'V@L  <A@s  <f@u  Y@7  'i@5  e@m  H@_  <t@f  '_@m  y@l
ex(2):  5@ZM  'J5@T   2@Kw  d@U  'P@yg  I@r  <ei@M  <'4T@JF  8@lw  '\"O@x   P@o
ex(3):  _e6@d6U  Q@l  '\"<VQJ@aFI  P@z  <bKJ@M  <C1@I.D    uI8@3ws  \"\"EyT@bLi
ex(5):   \" ' g003W@D_z   uIb@jERpS  ' <\"'D7Q58@gMD  <   YKt3i@gFtED
ex(8):  <''<''Y@eue  'b9nA@VM  <  \"' \"\"n@FN  \"'<R@5u2  <<' <\"EDHHt-QA@X
---------------- Examples from DFA ---------------
s1:  Q@o

         

         #A: Bernat Sales
         #D: My definitive Date and Time pattern (dd/mm/yyyy hh:mm:ss). It recognizes all correct dates (>1900) and time (even february). What can I say, I'm proud of it
         #U: http://regexlib.com/REDetails.aspx?regexp_id=959
expr 359: ^((((([0-1]?\d)|(2[0-8]))\/((0?\d)|(1[0-2])))|(29\/((0?[1,3-9])|(1[0-2])))|(30\/((0?[1,3-9])|(1[0-2])))|(31\/((0?[13578])|(1[0-2]))))\/((19\d{2})|([2-9]\d{3}))|(29\/0?2\/(((([2468][048])|([3579][26]))00)|(((19)|([2-9]\d))(([2468]0)|([02468][48])|([13579][26]))))))\s(([01]?\d)|(2[0-3]))(:[0-5]?\d){2}$
tree:   ((((((((((([01]?[0-9])|(2[0-8]))/)((0?[0-9])|(1[012])))|(((29)/)((0?[,13-9])|(1[012])))|(((30)/)((0?[,13-9])|(1[012])))|(((31)/)((0?[13578])|(1[012]))))/)(((19)[0-9]{2})|([2-9][0-9]{3})))|((((((29)/)0?)2)/)((((([2468][048])|([3579][26]))0)0)|(((19)|([2-9][0-9]))(([2468]0)|([02468][48])|([13579][26]))))))[\t-\r ])(([01]?[0-9])|(2[0-3])))((:[0-5]?)[0-9]){2})
augmnt: (((((((((((([01]?[0-9])|(2[0-8]))/)((0?[0-9])|(1[012])))|(((29)/)((0?[,13-9])|(1[012])))|(((30)/)((0?[,13-9])|(1[012])))|(((31)/)((0?[13578])|(1[012]))))/)(((19)([0-9][0-9]))|([2-9](([0-9][0-9])[0-9]))))|((((((29)/)0?)2)/)((((([2468][048])|([3579][26]))0)0)|(((19)|([2-9][0-9]))(([2468]0)|([02468][48])|([13579][26]))))))[\t-\r ])(([01]?[0-9])|(2[0-3])))(((:[0-5]?)[0-9])((:[0-5]?)[0-9])))#)
length: 14 to 19
-------------------- Examples --------------------
ex(0):  30/1/1979 6:0:4  29/2/2000 3:0:4  29/2/6000 7:6:0  29/2/5600 20:3:8
ex(1):  29/2/8000 18:7:10  29/2/4092 21:14:7  30/6/1937 04:8:52
ex(2):  30/12/1932 22:6:2  29/02/5600 23:03:8  29/2/9200 5:3:9
ex(3):  29/02/2000 23:2:54  29/2/8400 04:3:10  29/02/8704 20:48:21
ex(5):  31/10/1974 20:41:4  29/02/3284 23:8:9  29/2/1952 21:21:0
ex(8):  29/2/2800 22:21:4  29/02/4584 21:28:2  17/02/5096 11:51:2
---------------- Examples from DFA ---------------
s1:  1/0/1932 0:1:3
s20:  1/0/1932 0:1:6

         

         #A: Evan Tao
         #D: Just test in C#.
Validates a China Unicom mobile phone number with (or without) the International code.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=962
ERROR:   ^(?<national>\+?(?:86)?)(?<separator>\s?-?)(?<phone>(?<vender>13[0-4])(?<area>\d{4})(?<id>\d{4}))$
    rx: '(?...' unimplemented: in "^(?<national>\+?(?:86)?)(?<separator>\s?-?)(?<phone>(?<vender>13[0-4])(?<area>\d{4})(?<id>\d{4}))$"

         

         #A: Joao Maia
         #D: Match a string in CCYYMM/YYYYMM format.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=963
expr 360: ^[0-9]{4}((0[1-9])|(1[0-2]))$
tree:   ([0-9]{4}((0[1-9])|(1[012])))
augmnt: ((((([0-9][0-9])[0-9])[0-9])((0[1-9])|(1[012])))#)
length: 6 to 6
-------------------- Examples --------------------
ex(0):  443611  788810  261006  860101  127812  300904  689704  708404  746407
ex(1):  364705  433408  232609  208805  011910  996402  893912  378807  570703
ex(2):  497912  347102  780308  846410  768503  287912  998104  910601  238009
ex(3):  418510  832010  506607  079907  074310  936710  348810  407405  904307
ex(5):  838111  780401  059205  699010  215110  673811  951609  994710  822802
ex(8):  442308  055109  361702  669911  636812  161711  752704  941903  879602
---------------- Examples from DFA ---------------
s1:  666709

         

         #A: qi gao
         #D: forbidden tele numbers when it starts with 0,
860+,8613,character or has any SBC case.
you can also use it to any international phone dialed by E1 ,etc . this regex has been tested by java, perl,.net
PS: the last regex [0-9]is in SBC case
         #U: http://regexlib.com/REDetails.aspx?regexp_id=966
ERROR:   (^0.*[1-9]*)|(^860+)|(^8613)|(\D)|([0-9])
    rx: Embedded '^' unimplemented: in "(^0.*[1-9]*)|(^860+)|(^8613)|(\D)|([0-9])"

         

         #A: Jacek Sompel
         #D: This regex will extract the link and the link title for every a href in HTML source. Useful for crawling sites.
Note that this pattern will also allow for links that are spread over multiple lines.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=968
ERROR:   <a[\s]+[^>]*?href[\s]?=[\s\"\']+(.*?)[\"\']+.*?>([^<]+|.*?)?<\/a>
    rx: prefer-fewer '?' unimplemented: in "<a[\s]+[^>]*?href[\s]?=[\s\"\']+(.*?)[\"\']+.*?>([^<]+|.*?)?<\/a>"

         

         #A: Andrei Bozantan
         #D: Matches a negative or positive percentage between 0 and 100 (inclusive). Accepts up to 2 decimal places.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=971
ERROR:   ^-?[0-9]{0,2}(\.[0-9]{1,2})?$|^-?(100)(\.[0]{1,2})?$
    rx: Embedded '$' unimplemented: in "^-?[0-9]{0,2}(\.[0-9]{1,2})?$|^-?(100)(\.[0]{1,2})?$"

         

         #A: Chris Richards
         #D: This will match just about everything after href=
Its good if you just need a list of all the href= values
         #U: http://regexlib.com/REDetails.aspx?regexp_id=972
expr 361: href=[\"\']?((?:[^>]|[^\s]|[^"]|[^'])+)[\"\']?
tree:   (((((((hr)e)f)=)["']?)([\x01-=?-\u007f]|[\x01-\b\x0e-\x1f!-\u007f]|[\x01-!#-\u007f]|[\x01-&(-\u007f])+)["']?)
augmnt: ((((((((hr)e)f)=)["']?)([\x01-=?-\u007f]|[\x01-\b\x0e-\x1f!-\u007f]|[\x01-!#-\u007f]|[\x01-&(-\u007f])+)["']?)#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  href=;  href=s  href=R  href=z  href=i  href=G  href=O  href=f  href=m
ex(1):  href='n  href=O  href=M  href=t  href='G  href='U\"  href=\"~'
ex(2):  href={  href=h  href='Oy'  href='  href='u]  href=\"+7  href=/\"
ex(3):  href=D)'  href='y  href='~  href=M  href=W?\"  href=\"I|\"  href=(H\"
ex(5):  href=\"bSu\"  href=)''  href=]+X'  href='+;\"  href=O].'  href=8'
ex(8):  href='YDq'  href='uEy  href=\"('  href=**Sb?j  href=B!v  href=tIack'
---------------- Examples from DFA ---------------
s1:  href=+

         

         #A: Shahar Bracha
         #D: This Blacklist RegEx is designed to search a user input for any malicious code or SQL injection attempts.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=977
expr 362: (script)|(<)|(>)|(%3c)|(%3e)|(SELECT) |(UPDATE) |(INSERT) |(DELETE)|(GRANT) |(REVOKE)|(UNION)|(<)|(>)
tree:   ((((((sc)r)i)p)t)|<|>|((%3)c)|((%3)e)|((((((SE)L)E)C)T) )|((((((UP)D)A)T)E) )|((((((IN)S)E)R)T) )|(((((DE)L)E)T)E)|(((((GR)A)N)T) )|(((((RE)V)O)K)E)|((((UN)I)O)N)|<|>)
augmnt: (((((((sc)r)i)p)t)|<|>|((%3)c)|((%3)e)|((((((SE)L)E)C)T) )|((((((UP)D)A)T)E) )|((((((IN)S)E)R)T) )|(((((DE)L)E)T)E)|(((((GR)A)N)T) )|(((((RE)V)O)K)E)|((((UN)I)O)N)|<|>)#)
length: 1 to 7
-------------------- Examples --------------------
ex(0):  <  INSERT   DELETE  DELETE  GRANT   script  UNION  %3c  <  DELETE  >
ex(1):  INSERT   <  SELECT   <  script  DELETE  GRANT   >  %3e  >  SELECT   >
ex(2):  GRANT   %3c  REVOKE  >  <  DELETE  UPDATE   <  GRANT   %3e  GRANT   <
ex(3):  INSERT   GRANT   %3e  INSERT   SELECT   UNION  %3e  >  <  <  INSERT   >
ex(5):  UPDATE   %3e  script  UPDATE   script  <  <  script  UPDATE   INSERT 
ex(8):  <  <  <  INSERT   %3e  SELECT   DELETE  %3c  SELECT   <  INSERT   >  >
---------------- Examples from DFA ---------------
s1:  >

         

         #A: Cliff Wagner
         #D: Hex number/string validation method for the Electronic Serial Number(ESN) used in Cellular Phone products.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=978
expr 363: ^([0-9a-fA-F]){8}$
tree:   [0-9A-Fa-f]{8}
augmnt: (((((((([0-9A-Fa-f][0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])[0-9A-Fa-f])#)
length: 8 to 8
-------------------- Examples --------------------
ex(0):  10AB1877  9cD8aafF  ADf5eDA1  FF3Cd379  AbfD36Ef  ccCd4B42  AF9B9bcd
ex(1):  dAEBBaa2  8d3e8Abd  FFd0AEeD  fcb6FAcf  028DA335  5DD9DFAD  DdAafDa6
ex(2):  e06daa46  6bBEBad9  72AA9c30  dfEc9ec5  2F126fac  a4bbDbb9  6fCd2289
ex(3):  1Abfab08  D1Ca60A5  D9E1da3B  97BFCdBB  3da0ea74  dCaf95EC  6cd74EFa
ex(5):  edf12e0F  7d9ec5BE  aAa50946  ADd232bF  EbF0a58e  cDabA75F  0A4aFa9b
ex(8):  bee379CB  dFCfb9aA  416005ba  aEbac0ae  0876101a  Ac99f3a8  E2DaFaCC
---------------- Examples from DFA ---------------
s1:  8c5829a1

         

         #A: Alex Cons
         #D: Expresion Regular para Teléfonos con clave lada en México
separada o no con guiones o espacios. Sirve para teléfonos estacionarios y/o celulares, con o sin paréntesis, 10 números a fuerzas, funciona en .net
         #U: http://regexlib.com/REDetails.aspx?regexp_id=979
ERROR:   ^\(\d{3}\) ?\d{3}( |-)?\d{4}|^\d{3}( |-)?\d{3}( |-)?\d{4}
    rx: Embedded '^' unimplemented: in "^\(\d{3}\) ?\d{3}( |-)?\d{4}|^\d{3}( |-)?\d{3}( |-)?\d{4}"

         

         #A: Micah Duke
         #D: this will validate most legal email addresses, even allows for some discouraged but perfectly legal characters in local part; allows IP domains with optional []; keeps final tld at a minmum of 2 chars; non capturing groups for efficiency
         #U: http://regexlib.com/REDetails.aspx?regexp_id=980
expr 364: ^(?:[a-zA-Z0-9_'^&/+-])+(?:\.(?:[a-zA-Z0-9_'^&/+-])+)*@(?:(?:\[?(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\.){3}(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\]?)|(?:[a-zA-Z0-9-]+\.)+(?:[a-zA-Z]){2,}\.?)$
tree:   ((([&'+/-9A-Z^_a-z-]+(.[&'+/-9A-Z^_a-z-]+)*)@)(((([?(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))).){3}((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))]?))|((([0-9A-Za-z-]+.)+[A-Za-z]{2,}).?)))
augmnt: (((([&'+/-9A-Z^_a-z-]+(.[&'+/-9A-Z^_a-z-]+)*)@)(((((([?(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))).)(([?(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))).))(([?(((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))).))((((25)[0-5])|((2[0-4])[0-9])|(([01]?[0-9])[0-9]?))]?))|((([0-9A-Za-z-]+.)+([A-Za-z][A-Za-z]+)).?)))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  p@y.yJ  x@250.254.8.254  X@254.209.218.202  P@250.6.252.9  H@W.Ly
ex(1):  Z.w@8.[255.[254.239]  H@H.Kg.  X.C@5.av.  I@l.rO.  y@[255.251.[5.89]
ex(2):  mG.B@[254.079.250.251]  ly@214.215.[00.253  Ez.2e.6@06.201.201.217]
ex(3):  9r.G+/.lmv@e.7Q5.NQkn  qZ6@yK.3i.gFt.TkbP
ex(5):  C.g7ZB.uVQ.x.iA.^-Kj9@[34.[215.219.2
ex(8):  +zM39ALA.IO+/uR.8F2.0fxdJkLP.VgL.rsD1Ir.je@[240.[18.[254.223
---------------- Examples from DFA ---------------
s1:  o@B.HY
s10:  o@B.HY.
s18:  o@0.1.1.0
s28:  o@0.1.1.2
s39:  o@0.1.1.5
s29:  o@[1.0.0.0
s41:  o@[1.0.0.2
s48:  o@[1.0.0.6
s46:  o@0.1.1.0]
s19:  o@0.1.1.27
s47:  o@0.1.1.25
s40:  o@[1.0.0.25
s51:  o@[1.0.0.28

         

         #A: Carlos R. L. Rodrigues
         #U: http://regexlib.com/REDetails.aspx?regexp_id=981
expr 365: ^(([0-1]?[0-9])|([2][0-3])):([0-5]?[0-9])(:([0-5]?[0-9]))?$
tree:   ((((([01]?[0-9])|(2[0-3])):)([0-5]?[0-9]))(:([0-5]?[0-9]))?)
augmnt: (((((([01]?[0-9])|(2[0-3])):)([0-5]?[0-9]))(:([0-5]?[0-9]))?)#)
length: 3 to 8
-------------------- Examples --------------------
ex(0):  4:6  23:8  8:9  2:1  0:5  6:1  2:1  7:5  8:0  9:7  6:9  20:7  8:2  21:6
ex(1):  3:9:4  21:3:2  21:2  0:8:1  21:9:2  8:39  18:7:07  10:5:4  23:23  20:7
ex(2):  03:8:6  7:07:1  0:46  03:2  02:5  05:8  20:05  8:47:8  7:38:47  20:8
ex(3):  19:3  5:3:23  14:00  00:26  9:1:1  23:6:9  23:20  21:32  2:5:32  04:3
ex(5):  21:6:26  08:21  21:7:00  22:01  16:7:56  6:7  00:41:9  0:10:04  5:59
ex(8):  2:42  21:01  21:0  22:9:3  20:13  20:1:02  6:8:3  16:9  22:06  20:56:7
---------------- Examples from DFA ---------------
s1:  0:1
s4:  0:7
s5:  0:1:0
s8:  0:1:8

         

         #A: John Chivers
         #U: http://regexlib.com/REDetails.aspx?regexp_id=982
expr 366: (02\d\s?\d{4}\s?\d{4})|(01\d{2}\s?\d{3}\s?\d{4})|(01\d{3}\s?\d{5,6})|(01\d{4}\s?\d{4,5})
tree:   (((((((02)[0-9])[\t-\r ]?)[0-9]{4})[\t-\r ]?)[0-9]{4})|((((((01)[0-9]{2})[\t-\r ]?)[0-9]{3})[\t-\r ]?)[0-9]{4})|((((01)[0-9]{3})[\t-\r ]?)[0-9]{5,6})|((((01)[0-9]{4})[\t-\r ]?)[0-9]{4,5}))
augmnt: ((((((((02)[0-9])[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))|((((((01)([0-9][0-9]))[\t-\r ]?)(([0-9][0-9])[0-9]))[\t-\r ]?)((([0-9][0-9])[0-9])[0-9]))|((((01)(([0-9][0-9])[0-9]))[\t-\r ]?)((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]?))|((((01)((([0-9][0-9])[0-9])[0-9]))[\t-\r ]?)(((([0-9][0-9])[0-9])[0-9])[0-9]?)))#)
length: 10 to 13
-------------------- Examples --------------------
ex(0):  0165677888  0126100458  0162012785  02009474689  0127084290
ex(1):  0164 394 4821  02606208890  0199199642  0139903788  017076 02256
ex(2):  01032 84641  01854627932  0181429106  0230220 2865  01853883203
ex(3):  0273383 6753  02856447465  0143005 3189  01174 80465  0220069 1162
ex(5):  0121997724  024 37729644  01190 10733  017866 92666  022 17957527
ex(8):  027 96006674  0104711249  01350 924626  0186009 8482  0124 5071432
---------------- Examples from DFA ---------------
s1:  0133783684
s12:  01337836846

         

         #A: John Chivers
         #D: Validates UK mobile phone numbers. Valid formats are `077', `078' or `079' followed by another 8 digits, with an optional space after the dialling code and/or between the 4th and 5th characters of the remainder of the number. These formats are taken from the official guidelines from Ofcom, the organisation responsible for UK telecoms issues. Brackets are not valid and STD code must be entered.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=983
expr 367: (077|078|079)\s?\d{2}\s?\d{6}
tree:   (((((((07)7)|((07)8)|((07)9))[\t-\r ]?)[0-9]{2})[\t-\r ]?)[0-9]{6})
augmnt: ((((((((07)7)|((07)8)|((07)9))[\t-\r ]?)([0-9][0-9]))[\t-\r ]?)((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))#)
length: 11 to 13
-------------------- Examples --------------------
ex(0):  07756778887  07910045860  07912785483  07974689780  07742907464
ex(1):  079 33821232  07908890011  079 64268939  077 88 570769  079 60979170
ex(2):  07737852462  07979 142091  078 38220982  07918 088320  07966270799
ex(3):  07985440746  07932053631  07717378046  079 60699011  077 98738910
ex(5):  078 37 696442  07855 733617  07799 663687  078 95752760  077 12796467
ex(8):  07811492607  077 24256379  07799848273  078 07143214  079 22 983344
---------------- Examples from DFA ---------------
s1:  07901898436

         

         #A: Ross Hammer
         #D: Based on a regular expression from Michael Ash, this captures US street addresses and mailing addresses, single or multi-line (multi-line is more reliable), and breaks them into discrete parts for address line 1 and 2, city, state, and postal code.  This expression is not perfect - with the interpreter I am using, some addresses refuse to match correctly.  It should however work for most addresses, particularly when lines are delimited with carriage returns, tabs, or some other whitespace line delimiter that is not a space (\x20).  Note: For improved compatibility, this expression does not use named groups.
**Output**
\1 = Address 1,
\2 = Address 2,
\3 = City,
\4 = State,
\5 = Postal Code
         #U: http://regexlib.com/REDetails.aspx?regexp_id=986
ERROR:   ^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])\s+(\d+(?:-\d+)?)\s*$
    rx: complexity 780 exceeds limit of 500: in "^\s*((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)\,?\s+((?:(?:\d+(?:\x20+\w+\.?)+(?:(?:\x20+STREET|ST|DRIVE|DR|AVENUE|AVE|ROAD|RD|LOOP|COURT|CT|CIRCLE|LANE|LN|BOULEVARD|BLVD)\.?)?)|(?:(?:P\.\x20?O\.|P\x20?O)\x20*Box\x20+\d+)|(?:General\x20+Delivery)|(?:C[\\\/]O\x20+(?:\w+\x20*)+))\,?\x20*(?:(?:(?:APT|BLDG|DEPT|FL|HNGR|LOT|PIER|RM|S(?:LIP|PC|T(?:E|OP))|TRLR|UNIT|\x23)\.?\x20*(?:[a-zA-Z0-9\-]+))|(?:BSMT|FRNT|LBBY|LOWR|OFC|PH|REAR|SIDE|UPPR))?)?\,?\s+((?:[A-Za-z]+\x20*)+)\,\s+(A[LKSZRAP]|C[AOT]|D[EC]|F[LM]|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[ARW]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])\s+(\d+(?:-\d+)?)\s*$"

         

         #A: Gideon Engelberth
         #U: http://regexlib.com/REDetails.aspx?regexp_id=988
expr 368: ^[ \w]{3,}([A-Za-z]\.)?([ \w]*\#\d+)?(\r\n| )[ \w]{3,},\x20[A-Za-z]{2}\x20\d{5}(-\d{4})?$
tree:   (((((((((([ 0-9A-Z_a-z]{3,}([A-Za-z].)?)(([ 0-9A-Z_a-z]*#)[0-9]+)?)(([\r][\n])| ))[ 0-9A-Z_a-z]{3,}),) )[A-Za-z]{2}) )[0-9]{5})(-[0-9]{4})?)
augmnt: ((((((((((((([ 0-9A-Z_a-z][ 0-9A-Z_a-z])[ 0-9A-Z_a-z]+)([A-Za-z].)?)(([ 0-9A-Z_a-z]*#)[0-9]+)?)(([\r][\n])| ))(([ 0-9A-Z_a-z][ 0-9A-Z_a-z])[ 0-9A-Z_a-z]+)),) )([A-Za-z][A-Za-z])) )(((([0-9][0-9])[0-9])[0-9])[0-9]))(-((([0-9][0-9])[0-9])[0-9]))?)#)
length: 17 to *
-------------------- Examples --------------------
ex(0):  Vh9 xvD, UN 00458  Zap\r\nja , Cu 47468  elN\r\np1N, Kk 77843
ex(1):  m7I\r\nab7, br 09964  2SdN.\r\n9v8, uf 97022-6049  _EtO. nH0, ez 90846
ex(2):  U_6\r\n05x, wv 53088-0930  wCyg#08\r\nZyaD, Gf 36348
ex(3):  YJ1Y_t#0 8l2, tk 73891  h3FnMI.i #593 uJJ2, MK 55107-6174
ex(5):  xoC8lxj.#6\r\n3wBy, Ko 26073-3592  ANU6rN.\r\n8hJGwuO, We 35072-3214
ex(8):  2DrP0yaU. lky, MF 47857  BBHdZf 91Ks084Q, vk 91382
---------------- Examples from DFA ---------------
s1:  F n 731, yB 85972
s19:  F n 731, yB 85972-9584

         

         #A: Andreas Næsager
         #D: Well it pretty much accepts all kinds of users, about the domain i didn't write it special for any TLD so there's no length defined, ohh and it accepts some IDN stuff
         #U: http://regexlib.com/REDetails.aspx?regexp_id=989
expr 369: ^[\.\wæøå-]+@([a-zæøå0-9]+([\.-]{0,1}[a-zæøå0-9]+|[a-zæøå0-9]?))+\.[a-z]{2,6}$
tree:   (((([.0-9A-Z_a-zåæø-]+@)([0-9a-zåæø]+(([.-]?[0-9a-zåæø]+)|[0-9a-zåæø]?))+).)[a-z]{2,6})
augmnt: ((((([.0-9A-Z_a-zåæø-]+@)([0-9a-zåæø]+(([.-]?[0-9a-zåæø]+)|[0-9a-zåæø]?))+).)((((([a-z][a-z])[a-z]?)[a-z]?)[a-z]?)[a-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  3@7.zz  N@65.so  3@wv.yr  1@æ.sh  5@zh.ax  o@ez.ze  t@d.mg  z@9.up
ex(1):  T@i2.eeo  q@i.j.ysll  4@o8.txqd  W@se.ltwif  C@1-a.kior  e@eø.ruhks
ex(2):  -@uv.rida  H@wøk.n.snpy  Y@døs.eupf  å@ypw.clm  M@o3æ82.s.oatgd
ex(3):  QI@czbxeou48.nxxp  i0@vj.29oæz8.gauy  G@oø.xb  ki@eiø.awt
ex(5):  N@kæml9-wzki57y-78b6uobg4.bdsev  es@oc0mhæye6.bb3c-jpw4tx.atl
ex(8):  m@yujyy1håjlvh963ajys5.yr.alpdu  _åAX-f@zpæ5av916å.ueykp
---------------- Examples from DFA ---------------
s1:  B@z.pn
s11:  B@z.pnd
s10:  B@z.pndf
s7:  B@z.p.yw
s9:  B@z.pndfn
s19:  B@z.p.ywh
s8:  B@z.pndfnb
s18:  B@z.p.ywhj
s17:  B@z.p.ywhjg
s16:  B@z.p.ywhjgo

         

         #A: Tim Macrina
         #D: Matches month, requires that months 1-9 have a leading 0
         #U: http://regexlib.com/REDetails.aspx?regexp_id=991
expr 370: ^((0[1-9])|(1[0-2]))$
tree:   ((0[1-9])|(1[012]))
augmnt: (((0[1-9])|(1[012]))#)
length: 2 to 2
-------------------- Examples --------------------
ex(0):  05  08  10  03  10  03  06  07  11  08  12  02  06  04  05  10  03  02
ex(1):  06  07  09  12  10  02  11  10  08  03  07  09  04  10  12  10  11  08
ex(2):  10  01  12  07  10  10  10  02  09  10  12  11  11  08  07  11  05  10
ex(3):  10  06  12  05  12  04  11  01  12  03  08  09  02  01  11  07  03  11
ex(5):  07  05  11  07  07  08  10  10  12  05  05  10  11  06  07  12  10  10
ex(8):  03  07  01  03  09  02  10  11  12  10  02  04  02  12  05  10  10  08
---------------- Examples from DFA ---------------
s1:  03

         

         #A: Tim Macrina
         #D: Matches numbers 0 through 99.9
Allows only one preceding zero and does not require the decimal point
         #U: http://regexlib.com/REDetails.aspx?regexp_id=994
expr 371: ^([1-9]{0,1})([0-9]{1})(\.[0-9])?$
tree:   (([1-9]?[0-9])(.[0-9])?)
augmnt: ((([1-9]?[0-9])(.[0-9])?)#)
length: 1 to 4
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  2  87  88.0  17  8.8  2.8  2.7  6  7.4  80.3  4.3  53.8  1  36  6  8  9
ex(2):  19.4  2  9.9  0.8  8.5  77  30  5.0  9.1  63  54  7  3  88  4.3  68.4
ex(3):  23  59  42  10  8.3  0  0.2  6.4  15.8  3  9.5  6  2.7  40  0.3  13.6
ex(5):  58  54  7  5.0  3  0.6  18.3  1.3  70  5  5.6  0  10.6  1.1  46.8  40.1
ex(8):  59  72  2  4.3  42  24  3  80.1  7.6  14.6  9.2  6.8  22.1  65  12.0
---------------- Examples from DFA ---------------
s1:  0
s3:  3
s2:  0.9

         

         #A: Jack Yang
         #U: http://regexlib.com/REDetails.aspx?regexp_id=996
expr 372: ^\.([rR]([aA][rR]|\d{2})|(\d{3})?)$
tree:   (.(([Rr](([Aa][Rr])|[0-9]{2}))|[0-9]{3}?))
augmnt: ((.(([Rr](([Aa][Rr])|([0-9][0-9])))|(([0-9][0-9])[0-9])?))#)
length: 1 to 4
-------------------- Examples --------------------
ex(0):  .R67  .r98  .rAr  .  .rAr  .  .R46  .  .r08  .R46  .RaR  .  .RaR  .
ex(1):  .raR  .991  .642  .r99  .rAR  .  .Rar  .r79  .  .rar  .  .rAR  .raR
ex(2):  .rAr  .RAR  .rar  .  .  .RAr  .Rar  .RaR  .367  .  .R64  .RAr  .  .rAr
ex(3):  .  .  .rAR  .R90  .  .119  .rar  .  .R47  .RaR  .726  .RAr  .107  .  .
ex(5):  .rar  .R79  .rAr  .rAr  .r71  .  .RAr  .RAr  .r35  .924  .r79  .rar
ex(8):  .r07  .  .RAr  .R98  .  .336  .  .R90  .R88  .rAr  .  .RaR  .  .rar
---------------- Examples from DFA ---------------
s1:  .
s5:  .008

         

         #A: Paul DeMarco
         #D: This is just a very simple matcher for real numbers.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=999
expr 373: ([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)|([0-9]+)
tree:   ((([0-9]+.)[0-9]*)|(([0-9]*.)[0-9]+)|[0-9]+)
augmnt: (((([0-9]+.)[0-9]*)|(([0-9]*.)[0-9]+)|[0-9]+)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4.  .6  .8  8.  8  6.  0  5.  0  6  .1  .8  4  3  0  4  .6  9  .0  7.
ex(1):  .4  4  7.  9.9  6.7  9.3  4.  .2  2  6.  .9  .1  9  0  9.  2  .3  9.
ex(2):  35  .9  2  56.97  70.  4.7  .9  4.1  76.24  8  32  98  2  10.85  80  0
ex(3):  53.8  09.50  82.79  80.433  9.75  3  .64  74.990  200  6.8  38.437
ex(5):  26006  011.151  86738  09.60219  77248  8459.726  44  2190  1  336.478
ex(8):  87921  79527527  194.81287964  71796006  742.0  011249.07350359  62563.
---------------- Examples from DFA ---------------
s1:  2
s3:  2.

         

         #A: Jeff Johnston
         #D: Matches full and compressed IPv6 addresses as defined in RFC 2373 (http://www.faqs.org/rfcs/rfc2373.html). No useful captures.
Various implementations require different terminators. (i.e. ^-$ or \b-\b)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1000
ERROR:   ^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$
    rx: \b (boundary) unimplemented: in "^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$"

         

         #A: Joe Lynwood
         #D: By combining the contributions from Bri Gipson and Michael Ash in this site.  I have come up with this RE to exclude the zero dollar amounts such as $0.00, 0.00, 0, etc.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1003
expr 374: ^(\$|)([1-9]+\d{0,2}(\,\d{3})*|([1-9]+\d*))(\.\d{2})?$
tree:   ((($|())((([1-9]+[0-9]{0,2})(,[0-9]{3})*)|([1-9]+[0-9]*)))(.[0-9]{2})?)
augmnt: (((($|())((([1-9]+([0-9]?[0-9]?))(,(([0-9][0-9])[0-9]))*)|([1-9]+[0-9]*)))(.([0-9][0-9]))?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $2  8  4  $4  $3  $4  $1  $8  6  $3  $2  $5  4  $8  $4  6  $7  $8  $4
ex(1):  53  $22  $9  419,996  $739  1  40.97  $46.91  11  $120  $77  $1.32
ex(2):  885  3,286.41  $1.09  92,079,080  7196.63  $57,659.43  $491,381.37
ex(3):  5511.67  45,021,947,248  $2232,442.19  $7796.47  $63,687,216.95  $5419
ex(5):  337.96  $95,047,112,926,735,359  $978,009,484  $4495  414,873,229.83
ex(8):  $384361.62  67331485,365,478.03  $217.72  $6256,171,391,824,303,044
---------------- Examples from DFA ---------------
s1:  5
s11:  50
s10:  506
s4:  5.09
s9:  5068
s7:  5,512

         

         #A: James Tikitiki
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1004
expr 375: (((ht|f)tp(s?):\/\/)|(www\.[^ \[\]\(\)\n\r\t]+)|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})\/)([^ \[\]\(\),;"'<>\n\r\t]+)([^\. \[\]\(\),;"'<>\n\r\t])|(([012]?[0-9]{1,2}\.){3}[012]?[0-9]{1,2})
tree:   ((((((((((((ht)|f)t)p)s?):)/)/)|((((ww)w).)[\x01-\b\v\f\x0e-\x1f!-'*-Z\^-\u007f]+)|((((([012]?[0-9]{1,2}).){3}[012]?)[0-9]{1,2})/))[\x01-\b\v\f\x0e-\x1f!#-&*+.-:=?-Z\^-\u007f-]+)[\x01-\b\v\f\x0e-\x1f!#-&*+/-:=?-Z\^-\u007f-])|(((([012]?[0-9]{1,2}).){3}[012]?)[0-9]{1,2}))
augmnt: (((((((((((((ht)|f)t)p)s?):)/)/)|((((ww)w).)[\x01-\b\v\f\x0e-\x1f!-'*-Z\^-\u007f]+)|((((((([012]?([0-9][0-9]?)).)(([012]?([0-9][0-9]?)).))(([012]?([0-9][0-9]?)).))[012]?)([0-9][0-9]?))/))[\x01-\b\v\f\x0e-\x1f!#-&*+.-:=?-Z\^-\u007f-]+)[\x01-\b\v\f\x0e-\x1f!#-&*+/-:=?-Z\^-\u007f-])|(((((([012]?([0-9][0-9]?)).)(([012]?([0-9][0-9]?)).))(([012]?([0-9][0-9]?)).))[012]?)([0-9][0-9]?)))#)
length: 7 to *
-------------------- Examples --------------------
ex(0):  ftp://gw  9.2.1.0  8.0.6.0/C:  4.3.0.4/eW  www.8L?  www.73J  8.3.0.1
ex(1):  08.3.0.8  https://+c  www.^63  ftps://:0  2.00.010.74  www.of-
ex(2):  13.084.90.82/i1  22.148.18.03/EIM  179.0.38.165/V/  www.U_xXK
ex(3):  www.%QZ?!  www.umtqv  91.29.72.2  137.9.22.251/zb  www.Y4|?
ex(5):  26.219.0.7/e62g  142.75.09.26  08.09.4.22  002.3.6.04/d6:|y7
ex(8):  88.116.9.6  6.6.05.250  7.0.89.66  106.11.218.60/7KYMl3T  07.027.3.3
---------------- Examples from DFA ---------------
s9:  www.bEW
s1:  0.1.2.2
s11:  0.1.2.6
s10:  0.1.2.60
s21:  ftp://PI

         

         #A: Joe Lynwood
         #D: Combine Michael Ash's US Dollar amount and Bri Gipson's eliminating zero input to create this RE to accept Optional leading dollar sign, optional well-formed comma separator dollar amount with no zero amount allowed.
*** Correction: Remove the "+" otherwise it will incorrectly matches 4 leading digits like 1234,345,678.00 03-03-2005
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1005
expr 376: ^(\$|)([1-9]\d{0,2}(\,\d{3})*|([1-9]\d*))(\.\d{2})?$
tree:   ((($|())((([1-9][0-9]{0,2})(,[0-9]{3})*)|([1-9][0-9]*)))(.[0-9]{2})?)
augmnt: (((($|())((([1-9]([0-9]?[0-9]?))(,(([0-9][0-9])[0-9]))*)|([1-9][0-9]*)))(.([0-9][0-9]))?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $2  8  4  $4  $3  $4  $1  $8  6  $3  $2  $5  4  $8  $4  6  $7  $8  $4
ex(1):  53  $22  $9  419,996  $739  1  40.97  $46.91  11  $120  $77  $1.32
ex(2):  28  6,098,865  $90.09  8,270,990  $4.39  43,885,440.65  932  $91
ex(3):  $29  $1.62  6986.89  61  377  $8,377,696,423  65.73  848,999,663
ex(5):  5,419,128,964  39  $74.04  12,607,503,924  $29,009,484  $5  472.32
ex(8):  7333365.38  402606188.43  $7296146
---------------- Examples from DFA ---------------
s1:  2
s11:  27
s10:  273
s4:  2.41
s9:  2733
s7:  2,198

         

         #A: Randal L. Schwartz
         #D: Match the full names of the four main characters of The Flintstones.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1006
expr 377: ^((Fred|Wilma)\s+Flintstone|(Barney|Betty)\s+Rubble)$
tree:   ((((((((((((((((Fr)e)d)|((((Wi)l)m)a))[\t-\r ]+)F)l)i)n)t)s)t)o)n)e)|(((((((((((((Ba)r)n)e)y)|((((Be)t)t)y))[\t-\r ]+)R)u)b)b)l)e))
augmnt: (((((((((((((((((Fr)e)d)|((((Wi)l)m)a))[\t-\r ]+)F)l)i)n)t)s)t)o)n)e)|(((((((((((((Ba)r)n)e)y)|((((Be)t)t)y))[\t-\r ]+)R)u)b)b)l)e))#)
length: 12 to *
-------------------- Examples --------------------
ex(0):  Fred Flintstone  Fred Flintstone  Wilma Flintstone  Fred Flintstone
ex(1):  Barney Rubble  Wilma Flintstone  Barney Rubble  Betty Rubble
ex(2):  Fred Flintstone  Betty  Rubble  Wilma Flintstone  Betty Rubble
ex(3):  Wilma   Flintstone  Wilma   Flintstone  Fred   Flintstone
ex(5):  Fred     Flintstone  Wilma   Flintstone  Wilma     Flintstone
ex(8):  Wilma     Flintstone  Fred      Flintstone  Fred     Flintstone
---------------- Examples from DFA ---------------
s1:  Betty Rubble

         

         #A: narendiran dorairaj
         #D: this will accept multiple email ids separated only by semi-colons (anyway u can change it).
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1007
expr 378: ^(([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+([;.](([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5}){1,25})+)*$
tree:   ((((([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)[A-Za-z]{2,5}{1,25})+([.;](((([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)[A-Za-z]{2,5}{1,25})+)*)
augmnt: (((((([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)(((((((((((((((((((((((((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?))+([.;](((([.0-9A-Z_a-z-]+@)[.0-9A-Z_a-z-]+).)(((((((((((((((((((((((((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?)(((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)?))+)*)#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  c@..by  F@Q.KD  8@K.dU  U@V.Wi  n@7.BK  x@o.au  V@F.yU  e@u.FQ  I@1.Xs
ex(1):  V@L.RKybZaWOAmxbldwHNYxxMeRmIpvOjyUeSg
ex(2):  nY@D.IfUsplYfyhCXUPKvZBuYUUZKapTLMgpNyiZmlGIcVa@Z9.IvVJvjMvqNhtoGroPADqUWdMeYcxeZKWnlpLvhE
ex(3):  g@S.bvhewTLOoLPoQcwwMNbzGcKOwuGfewdtiKlCjixvAoUnCTYWbX4@5.xnOBOKrachbwETzYerjLEdSmgWrFzGEATcQAkfmgVg.e12@Z.ZEcqvASzoQqRxkdArYsOumMmDiTOqgaSwh@P.xTVKiZddslPqzWHPwDQAaMBUVWsqIgbtDvNqzqPkXstyzISbGn
ex(5):  LY5l@ewb.GZCsLrEZLCJiiEdGHKGLzJSexKpZIUldtSpQyStYoX;aIlGI@e.eAiuWjuZTXfXDzrsLgxLXlIAlZUZMDtcPMkhcCLJPGBGuub_q@Dp98.xvZxSicctCLYbHAXEXoOObKljRrvQGSMjyKsHTwWHl63@jC0d.jZHZZaZibbDCfMUVwwSxjNkJNMQxbPLLUIBhyhItuKNn@AIAk.TCCBMdNHYzlYuoFXoaYurdFkLtHFMOnAjefNQZhYEa;D.Qp0@O.AVPXafItJZBWZjQzeLxMgWORlnEQyKsnxOlIJmqjPudWW3@Jho.KnZyQWkQDCWGvqjltFLFtDtYGFSbBQAqWkpuenGqbJqOFnJIQPXzRKEPfXexuS@nbUg.RETUzXpkRqsPAGvfHUNnleFBqMWp.r@w.oRmDmhXcdvVZMxHzZtawcVoxfqSqnQQUQVagHYZJNJUHiaPvCKBtf2JH@D.wPtxpEyWucEVMoGppLpbQEyUeGJpyGNQGZBGPxeWjgQIKbfJUsadKDojVilZRCjZy;isK@pn2.epMYWmBSNkmtRrLzXpHzNeOzEVcqEfOeKhwBHdZEitrPiNX@jxAE.NvOvcschAXcToqAooSScXMBtxanEhwAnjuaqmKJkZLFgIxwsl@m8Q.LHprZNdyGFzWfyWJuUQylTgVIVeCbbPAuFNHpfbZVrFxACaRSRercYgJG2@_m.CHgHCKyHtPKFpyeCstCoSyTOPIxVtfDpeSBvOiwyXvm
ex(8):  6@PZ-iaY.IVLAZFVZMllNTXrVbNtSvdLGUkHALQBtBSAOb@iV3t_WT.RmvZvLSZEevaPKUJzqvTmQiBOIXxhEEDsWlapKLdeAyQPA@X.cwsBXPSSdLNbPaoaeBPnTeUuesCtVCaXsGzaUkwJ@q.JxMrRnsoslaPBXCnkUUxJbZfosXkTpZlPATGKTcfgHwnVWADQTfu@r5M.go.awlBDZcUGcjunWPXDzeziabLAsMTXapqBRPYyUeaobLoXWANfhWZR@q0.RNtPglXKSDqclVdVgQSZpEeMuqqKtMhnAREQsCWlEsWWxMpJFJnAhch;_@_C.hHavtkidMsouKnhzzEXFsLmZSGtHjeiKayxaSdeeTfQyl@askM3.nqQtbOwIISxUUyVRQXLpmFCBExWxSP.P@pkMLwka.wsBGnuoyOcNNhaVnYrIXWIUsRBCFHynAclIGZLf@b.LINzkvCySfgJXImFHkSpuUFjlXtdtGUaOmlJvUelHnzJvUF@OC3kh.ahptmueAkEgdrTmBgwzRBKnzUHiljHyCwPhRhGQuRWYeQ1E@1Mt.KThQGcXlLouUPZYxhLaQoyUaFhBquKDXQPmeQDTshLktWy8HMfk7w@WH.egp.JLisehAvAvMDOSbiwkhyOzvAsYlNMLMFjQEcgJSZwTuVdiRmLzfsYiH@PORylwUx.AaUHwKluirLyqNMyXCxrJxbwClYwvWsCBztaJTnXCEcitwh;X@O0srFhb.seAipIYnpycuSzkBFmWTiuGYpTDfP.yq71O8@Gxge.AosoYlweNbQBbvkqvDkzlHeOMUzVUYywSneXEkeBEqUzBuJxoyQN@e.QkSKInuHHvkIahUghnZTGKZANrmQOVtHNmcMbQfIbTr1PH@-Gh6aKh.gywzZGGkddgvZmZGGxIpdWuJkikrzfgjOueaDQvae.n@jXYXwN3_.AAhbiRYsWxbnArfuxHsoZLsrjsnRcIOOFkKijoStLsbbZaVbjHWFurHdBZoLqjIGtBWiRA6-luv@UOgKbn_.dQfoCbjuBnUSOQAOFIPzbyyISaixJbRQrWRPwTiPehfkRgCIFCkbBSwJhhZQBqw0BouM@AtbskJeT.EQZTUkgWQGAXXHsfQlDySWSLyAEqBQGRvIHRZAJVsW5S@4O1ndguO.OOnzTvDZjaiaseQCIjpkLZPuUQuMWpLntwubzYchmGHVchFZezZDNpas6dF@w2SVlRK.TeaxlrnuMvdOLcVHlfDpweHKulFILfDLVkfQBiXusXM.OMg@4rL1h-Sd.rexqVNxcalsqyZIrxyLIfcfwHAbbgwM@rfsS.bcEZFNwyntFiDKsixjSqQJpqufvxdYGpNChgsoJv9k@-3DJef.PHbrpRpgEybZRuJRJToMUAOZgdgQhxxhMpRcpzulzapDGzOovgh8NXp@HQL.ScSRgBRLAwWeaUEycnrbvSeieQixdpHShRluNioTgiaRLwJanFQlRKbeLhWaX@iCSS.KxhQIVhCZffMLdAACZvyYAHUnXfXtkTwPoAUhdZIictpY4lBN5@hbIYQ.BXtBLkocNwQTzgMpDkfKDlPRGmPbKmnmIuhUbwakXAAJaIneQqyfyB@fa2irz_i.AlmayncNzajHGFChBZVzioUWkpGTCeREPJHfzvNpPjFsylhXPxmhvjZPAIiWrz@8gI_.TLjvhSqnBoDUZXhEsOzwqAfZBxIAlUzGGcvCrlxifDQpC;2mI_lR9H@YlL-h0.XaMjDmlupYGHjvbvWdaCDiJmjQimJzwlUmHHViPQrL@YCQgSuEg.dNoWBtSFbAmapzAuuzNQzezqkooieLmFDuncadWTuAOSjcIn8H@1ASg6hbx.RJdkOHsYlGIBwmSrREQGmKLvnLgodlBcetpIEozzIPl_ANeZRDa@Z.EVswQWsjqNhkkqXMUvyhSZqdZcIDABxsVkv;yOr@f.TMGmSlVdggvZvjZiIekfOlLRPVwemkWGuzeI.TnrR@FwyC7.RTnHxleGNQIOWRjyoaerJaNEPHyLdzskOrshINZExchI9@D5CBloD.AIrZoINIqMLhtZwSeHJIStRYKkvxaOKSLrtweFZtVXFvpbSUPtkfreFYYbE@.OZP.hsxQiBEqEyeLDPMCHcaGpjcwnZlVUEIijvVALbOYiNmHGSFrUTyKXCbpAs62m1kd@6_.sEuvDiHHhyLqDLgrtniawlfkfkOASUKvleMlIshxbmfTd@v.XjoTGdDNMpJIaXYhqRnlpuweaOAaJZYichcHgDokHegHLkJovktr@RXswXCl.sIRYjmoNLkyjFswzQWwmgNNzVYeZpiuMH@uTPVw.CocNKefBxaikqRJCdQmNzafaiPOMpVBKdxvJcTVRbTLIVDR6@fszt.atGmqEAnrawhwManBIVkeecRdXUOYYrCGIOipgrUNwBQaerkpKoGeC;_rpD6xF-@UGl.bAIfinovmaKmEwPsiKjpLqSmfCRVDeCqrWSNadhCMZDdOaLhMknCNdFaXOiHqzAc4cUA@Pr.gWASvfOHxDWGXlxOsfbBpsuusIXHZeBXGuLMtGZZktiuvjfarsSPlKbJl@oJYucDlL.QkQhtfcOXGxgDGAyzTwpHERITVyKmOmhaeFGDxdbvlJNEkbhJvuzwu@K.RCalftyOZxIXIQwehPpeMrkjtxNVWjCMMoOSIVMsnMDCvI3F3ySS@T5M2.4.FHlslLIaHJjfpImTsvqgQyzBLULWPWihOzKNqqRWSCttfGTOzlMKqPHktUa_@ABgr.XWLIfMzpwCoMkwujgRbYPbIeKveYURZhykzPcQEAtUVwujJgwo5ruQWA@8.NirVFAgAjPdJlmsEzufAOvZcMdFwifzrdbMLnwIfvztEoPUTKoBHsNIeKqAvvWpB.@MEtkk.VTnLMtlIqsXlSmaMVdAGUzCIyeoUTfdqpjV
---------------- Examples from DFA ---------------
s1:  2@G.yw
s129:  2@G.yws
s128:  2@G.ywsm
s127:  2@G.ywsmS
s130:  2@G.yw.Xh
s126:  2@G.ywsmSK
s125:  2@G.ywsmSKX
s124:  2@G.ywsmSKXv
s123:  2@G.ywsmSKXvO
s122:  2@G.ywsmSKXvOW
s121:  2@G.ywsmSKXvOWU
s120:  2@G.ywsmSKXvOWUT
s119:  2@G.ywsmSKXvOWUTl
s118:  2@G.ywsmSKXvOWUTlf
s117:  2@G.ywsmSKXvOWUTlfA
s116:  2@G.ywsmSKXvOWUTlfAL
s115:  2@G.ywsmSKXvOWUTlfALR
s114:  2@G.ywsmSKXvOWUTlfALRs
s113:  2@G.ywsmSKXvOWUTlfALRsy
s112:  2@G.ywsmSKXvOWUTlfALRsyM
s111:  2@G.ywsmSKXvOWUTlfALRsyMA
s110:  2@G.ywsmSKXvOWUTlfALRsyMAg
s109:  2@G.ywsmSKXvOWUTlfALRsyMAgk
s108:  2@G.ywsmSKXvOWUTlfALRsyMAgkp
s107:  2@G.ywsmSKXvOWUTlfALRsyMAgkpH
s106:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHV
s105:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVk
s104:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkU
s103:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUf
s102:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfM
s101:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMI
s100:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQ
s99:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQm
s98:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmy
s97:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyO
s96:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOS
s95:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQ
s94:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQj
s93:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjm
s92:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmU
s91:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmUR
s90:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURS
s89:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSH
s88:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHA
s87:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHAC
s86:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACe
s85:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACez
s84:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezL
s83:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLX
s82:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXK
s81:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKG
s80:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGX
s79:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXo
s78:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJ
s77:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJP
s76:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPT
s75:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTu
s74:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuK
s73:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKB
s72:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBx
s71:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxN
s70:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNa
s69:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaT
s68:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTn
s67:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnq
s66:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqy
s65:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyN
s64:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNT
s63:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTH
s62:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJ
s61:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJX
s60:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXj
s59:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjE
s58:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjEC
s57:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECN
s56:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNV
s55:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVY
s54:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYm
s53:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmm
s52:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmO
s51:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmOb
s50:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObc
s49:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcj
s48:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjr
s47:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjry
s46:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrys
s45:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysC
s44:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCi
s43:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCij
s42:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijg
s41:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgf
s40:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgff
s39:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffd
s38:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJ
s37:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJY
s36:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYb
s35:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbF
s34:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFv
s33:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvE
s32:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEO
s31:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZ
s30:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZn
s29:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnr
s28:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZ
s27:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZH
s26:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHr
s25:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrX
s24:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXG
s23:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQ
s22:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQA
s21:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAV
s20:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVL
s19:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLa
s18:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLad
s17:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadw
s16:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwC
s15:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCn
s14:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnL
s13:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnLg
s12:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnLgF
s11:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnLgFr
s10:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnLgFrk
s9:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnLgFrkc
s8:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnLgFrkcj
s7:  2@G.ywsmSKXvOWUTlfALRsyMAgkpHVkUfMIQmyOSQjmURSHACezLXKGXoJPTuKBxNaTnqyNTHJXjECNVYmmObcjrysCijgffdJYbFvEOZnrZHrXGQAVLadwCnLgFrkcjf

         

         #A: Dan Hall
         #D: This script attempts to return phrases from a string (Example above looks for {3} word phrases)  Combine this with some .Net code, you can display most popular X word phrases in a string.
-If anyone can help me count "Phrase and Phrase as 2 instances of Phrase please contact me
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1008
ERROR:   (\b)(\w+(\b|\n|\s)){3}
    rx: \b (boundary) unimplemented: in "(\b)(\w+(\b|\n|\s)){3}"

         

         #A: Graeme Allwood
         #D: Validator for New Zealand Mobile phone numbers. Will look for the first number being a 0 and must be a number or either 6 or 7 digits long after to initial (021) suffix
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1009
ERROR:   (^\([0]\d{2}\))(\d{6,7}$)
    rx: Embedded '^' unimplemented: in "(^\([0]\d{2}\))(\d{6,7}$)"

         

         #A: Roberto Hernández
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1010
expr 379: ^([1-9]|1[0-2]|0[1-9]){1}(:[0-5][0-9][aApP][mM]){1}$
tree:   (([1-9]|(1[012])|(0[1-9]))((((:[0-5])[0-9])[APap])[Mm]))
augmnt: ((([1-9]|(1[012])|(0[1-9]))((((:[0-5])[0-9])[APap])[Mm]))#)
length: 6 to 7
-------------------- Examples --------------------
ex(0):  1:45pM  7:58Pm  12:20Pm  10:54pM  02:08am  7:44PM  06:57pm  05:04pm
ex(1):  01:22am  4:01Am  07:44PM  4:34am  6:33PM  10:22am  9:19Am  2:20pM
ex(2):  5:45PM  02:07PM  5:31pm  9:20AM  09:32pM  02:03AM  8:46pm  04:40pM
ex(3):  3:28aM  5:06pM  06:40Pm  10:23AM  10:06aM  07:46Pm  05:51pm  02:31PM
ex(5):  3:48am  12:06aM  01:10pm  9:01pm  1:59Pm  12:21aM  11:47pM  12:52pm
ex(8):  7:27AM  09:31pm  02:10pm  11:23am  03:54aM  05:03aM  7:32Am  07:02aM
---------------- Examples from DFA ---------------
s1:  1:39Pm

         

         #A: Luke Arms
         #D: A short and sweet email address validator. Checks that the username starts and ends with an alphanumeric character, allows a few non-repeating 'special characters' (namely -, ., _, +, &) and checks for a sensible domain name (2-6 character TLD required). Some unconventional, yet technically valid, addresses will not be matched, but this is only a simple expression ;-)
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1012
expr 380: ^([0-9a-zA-Z]+[-._+&])*[0-9a-zA-Z]+@([-0-9a-zA-Z]+[.])+[a-zA-Z]{2,6}$
tree:   ((((([0-9A-Za-z]+[&+._-])*[0-9A-Za-z]+)@)([0-9A-Za-z-]+.)+)[A-Za-z]{2,6})
augmnt: (((((([0-9A-Za-z]+[&+._-])*[0-9A-Za-z]+)@)([0-9A-Za-z-]+.)+)((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))#)
length: 6 to *
-------------------- Examples --------------------
ex(0):  H@w.yJ  2@-.Dv  z@n.qY  q@5.jD  m@x.ZB  b@V.Dc  c@e.yM  K@I.Ut  0@B.oX
ex(1):  O&6@8.YVaW  y.Y@e.EkmVr  l+O@T.KrNYx  e@C.hueR  8@o.PpvOey  v@r.Sx
ex(2):  RV_fW+f@w.lQb  F+dk@yo.dmsM  n_a9+l@T-.plbQo  h&s&R4@KJ.jwBj
ex(3):  hY4-Ly+zr_l@0.Y.cmvjs  1CH+O+XYl@Af.7Q5.YgM.WIJsp  dd.E0@Ft.rdt.SFD.ZB
ex(5):  L_32neF_jRsK@e5qa.Z95.2MA.b42o.cRE.Lht  8Mek.B6@G659G.Ko.Y4.MFYc
ex(8):  9&I9fkRf.Hxgl0j.Qd7@c-FZzq8.tF-lLa.S.P0KrhG1.977IUC73.G.mvPW
---------------- Examples from DFA ---------------
s1:  p@w.Tk
s10:  p@w.TkF
s9:  p@w.TkFh
s8:  p@w.TkFhV
s7:  p@w.TkFhVf

         

         #A: himraj love
         #D: it will check for the +ve decimal numbers
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1013
expr 381: ^[0-9]*(\.)?[0-9]+$
tree:   (([0-9]*.?)[0-9]+)
augmnt: ((([0-9]*.?)[0-9]+)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  4  4  3  6  5  6  7  7  8  8  8  7  9  8  2  6  1  0  0  4  5  8  6  0
ex(1):  0  2.5  3  9  .6  .8  7  4  .7  4  .8  .0  1.4  8.4  38  .3  2  2  8
ex(2):  1.09  2  639  3  8  .07  .2  .0  97.03  .0  73  .4  4176  56  8.27  942
ex(3):  2  802982  2  .308  .930  0827  79.00  4339  675.488  60  465.432  3
ex(5):  1743.4  .5  26006.1  62151.6738  109.02  9947782284  9377264423  .5
ex(8):  7478669.663  8.1  17.75276  .198  28796467.960066  742760471249
---------------- Examples from DFA ---------------
s1:  6
s3:  .6

         

         #A: himraj love
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1014
expr 382: ^[a-zA-Z0-9]+$
tree:   [0-9A-Za-z]+
augmnt: ([0-9A-Za-z]+#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  H  W  L  O  q  V  2  o  3  B  O  z  c  l  I  u  q  B  Y  N  J  T  d  m
ex(1):  i  V  D  p  e  A  9  W  U  u  c  e  C  U  B  0  x  K  b  T  d  C  0  K
ex(2):  N  xe  G  50  r6  t  Ro  u3  O  o  J  Y  q  L  f  O  yY  9  Oa  7  Q
ex(3):  B  i  e  xPU  7  W  bZJ  r0  kFf  Fq  u  Ok  vU  0t  k  cY  zo  wy  Iwd
ex(5):  2af  wfdG  vm  Bn8e  n  SaG  tNd  OBDQv  3BUD  2vDOY  niXE  IZlxf  oQoC
ex(8):  pVLh  9  s  cDR45  t  g  N3YyEse  y0RnUHr5  XS3EqXl  Xr  rd  qhY4  Y
---------------- Examples from DFA ---------------
s1:  r

         

         #A: James Johnston
         #D: This will find URLs in plain text.  With or without protocol. It matches against all toplevel domains to find the URL in the text.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1016
ERROR:   ([\d\w-.]+?\.(a[cdefgilmnoqrstuwz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmnoz]|e[ceghrst]|f[ijkmnor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortuvyz]|t[cdfghjkmnoprtvwz]|u[augkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]|aero|arpa|biz|com|coop|edu|info|int|gov|mil|museum|name|net|org|pro)(\b|\W(?<!&|=)(?!\.\s|\.{3}).*?))(\s|$)
    rx: invalid range: in "([\d\w-.]+?\.(a[cdefgilmnoqrstuwz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvxyz]|d[ejkmnoz]|e[ceghrst]|f[ijkmnor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eouw]|s[abcdeghijklmnortuvyz]|t[cdfghjkmnoprtvwz]|u[augkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]|aero|arpa|biz|com|coop|edu|info|int|gov|mil|museum|name|net|org|pro)(\b|\W(?<!&|=)(?!\.\s|\.{3}).*?))(\s|$)"

         

         #A: János Cservenák
         #D: Litle regexp for my portal engie. Only cut the {CHBLOCK:'modulename'} item
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1018
ERROR:   \{CHBLOCK\:(.*?\})
    rx: prefer-fewer '?' unimplemented: in "\{CHBLOCK\:(.*?\})"

         

         #A: Louis Ostendorf
         #D: AntiSpam: matches variations on the word "pharmacy"
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1020
ERROR:   (?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))
    rx: '(?...' unimplemented: in "(?i)(pharmacy)|((p(.{1,3})?h(.{1,3})?a(.{1,3})?r(.{1,3)?m(.{1,3})?a(.{1,3})?c(.{1,3})?y))"

         

         #A: Markus Matern
         #D: This is my attempt to find out valid german postal codes (PLZ or Postleitzahlen).
After the German Unification the numbers were changed to a five digit system. The postal codes starts with the two digit "Leitzahl". This is a number between 00 and 99 excluding the  not yet used numbers: 00, 05, 43 and 62! After that follows directly a three digit number, 000-999.
Comments welcome. This works for me, however I think it could be written more compact, but could not figure out how ;-)
For more information on german postal codes see:
http://de.wikipedia.org/wiki/Liste_der_Postleitbereiche_Deutschland
http://de.wikipedia.org/wiki/Postleitzahl_%28Deutschland%29
http://en.wikipedia.org/wiki/List_of_postal_codes_in_Germany
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1026
ERROR:   \b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b
    rx: \b (boundary) unimplemented: in "\b((?:0[1-46-9]\d{3})|(?:[1-357-9]\d{4})|(?:[4][0-24-9]\d{3})|(?:[6][013-9]\d{3}))\b"

         

         #A: Alessandro Pellegrini
         #D: This regular expression allows you to match all image tags
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1027
ERROR:   <(\/{0,1})img(.*?)(\/{0,1})\>
    rx: prefer-fewer '?' unimplemented: in "<(\/{0,1})img(.*?)(\/{0,1})\>"

         

         #A: Miguel Gutierrez
         #D: Accepts only positive decimal values. Zero and negative numbers are non-matching.Allows zeros after last non-zero numeric value after decimal place for significant digits
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1028
ERROR:   (^[+]?\d*\.?\d*[1-9]+\d*$)|(^[+]?[1-9]+\d*\.\d*$)
    rx: Embedded '^' unimplemented: in "(^[+]?\d*\.?\d*[1-9]+\d*$)|(^[+]?[1-9]+\d*\.\d*$)"

         

         #A: Nikolay Yordanov
         #D: Validation of a Folder Name. Excludes all forbidden characters
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1031
expr 383: ^[^\\\/\?\*\"\'\>\<\:\|]*$
tree:   []\x01-!#-&()+-.0-9;=@-[^-{}~\u007f]*
augmnt: ([]\x01-!#-&()+-.0-9;=@-[^-{}~\u007f]*#)
length: 0 to *
-------------------- Examples --------------------
ex(0):                                                                        
ex(1):      I  S  w        [        4      2      I      T  d  .    M    )  G  
ex(2):  r          iV  L      {y    m}  7  C  IZ    TP  B8          gT    XO  
ex(3):      $p  D{  B  M  tlV  ml    }~V      ;    A9  ^u1  yh    wM  {  ~o  e
ex(5):  G^0  =;  A@Gu  =g.{    ;](  @`+hU  =Zm1L  xqo  kylW  n_HO  iEDtd  FXrt
ex(8):  mi-#c%$U    Ib7mYa&  FWJ  PP_    7]wkZ{_  x2f]  $R@.DC  j~71  8U8S
---------------- Examples from DFA ---------------
s0:  

         

         #A: Derek Noonan
         #D: This matches all positive decimal values. There was one here already which claimed to but would fail on value 0.00 which is positive AFAIK...
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1036
ERROR:   (^\d*\.?\d*[0-9]+\d*$)|(^[0-9]+\d*\.\d*$)
    rx: Embedded '^' unimplemented: in "(^\d*\.?\d*[0-9]+\d*$)|(^[0-9]+\d*\.\d*$)"

         

         #A: German Gonzalez
         #D: Formatted Number with "," as thousand separator and "." as decimal separator. now accept numbers without separators of thousands.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1039
ERROR:   ^\-?[0-9]{1,3}(\,[0-9]{3})*(\.[0-9]+)?$|^[0-9]+(\.[0-9]+)?$
    rx: Embedded '$' unimplemented: in "^\-?[0-9]{1,3}(\,[0-9]{3})*(\.[0-9]+)?$|^[0-9]+(\.[0-9]+)?$"

         

         #A: Harry Chou
         #D: I need a pattern to match the whole number / integer (0-99999...), but also allow users to put comma in the thousand positions.
This is what I got.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1041
ERROR:   ^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$
    rx: Embedded '$' unimplemented: in "^0$|^[1-9][0-9]*$|^[1-9][0-9]{0,2}(,[0-9]{3})$"

         

         #A: Johky Cheng
         #D: Url matching
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1042
ERROR:   \b([\d\w\.\/\+\-\?\:]*)((ht|f)tp(s|)\:\/\/|[\d\d\d|\d\d]\.[\d\d\d|\d\d]\.|www\.|\.tv|\.ac|\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.museum|\.co)([\d\w\.\/\%\+\-\=\&\?\:\\\"\'\,\|\~\;]*)\b
    rx: \b (boundary) unimplemented: in "\b([\d\w\.\/\+\-\?\:]*)((ht|f)tp(s|)\:\/\/|[\d\d\d|\d\d]\.[\d\d\d|\d\d]\.|www\.|\.tv|\.ac|\.com|\.edu|\.gov|\.int|\.mil|\.net|\.org|\.biz|\.info|\.name|\.pro|\.museum|\.co)([\d\w\.\/\%\+\-\=\&\?\:\\\"\'\,\|\~\;]*)\b"

         

         #A: Howard Richards
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1047
ERROR:   (((^[BEGLMNS][1-9]\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] | JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \d\d?) | (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\s?0AA)
    rx: Embedded '^' unimplemented: in "(((^[BEGLMNS][1-9]\d?) | (^W[2-9] ) | ( ^( A[BL] | B[ABDHLNRST] | C[ABFHMORTVW] | D[ADEGHLNTY] | E[HNX] | F[KY] | G[LUY] | H[ADGPRSUX] | I[GMPV] | JE | K[ATWY] | L[ADELNSU] | M[EKL] | N[EGNPRW] | O[LX] | P[AEHLOR] | R[GHM] | S[AEGKL-PRSTWY] | T[ADFNQRSW] | UB | W[ADFNRSV] | YO | ZE ) \d\d?) | (^W1[A-HJKSTUW0-9]) | ((  (^WC[1-2])  |  (^EC[1-4]) | (^SW1)  ) [ABEHMNPRVWXY] ) ) (\s*)?  ([0-9][ABD-HJLNP-UW-Z]{2})) | (^GIR\s?0AA)"

         

         #A: Bri Gipson
         #D: Allows up to seven digits to the left and up to nine digits to the right of an optional decimal place.
Leading zeros on the left of the decimal are accepted.
Only positive values are accepted.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1049
ERROR:   ^(?=.*[1-9].*$)\d{0,7}(?:\.\d{0,9})?$
    rx: '(?...' unimplemented: in "^(?=.*[1-9].*$)\d{0,7}(?:\.\d{0,9})?$"

         

         #A: Jason Roe
         #D: Modified Joe Lynwood's to allow zero amounts.  Handles US Dollars including zero dollars.  
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1050
expr 384: ^(\$)?(([1-9]\d{0,2}(\,\d{3})*)|([1-9]\d*)|(0))(\.\d{2})?$
tree:   (($?((([1-9][0-9]{0,2})(,[0-9]{3})*)|([1-9][0-9]*)|0))(.[0-9]{2})?)
augmnt: ((($?((([1-9]([0-9]?[0-9]?))(,(([0-9][0-9])[0-9]))*)|([1-9][0-9]*)|0))(.([0-9][0-9]))?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  2  0  9  4  3  0  7  0  1  0  0  0  1  8  9  0  0  0  0  4  6  2  4
ex(1):  7.74  0.84  $0.64  $0  $72,620  0  51,109.42  73.40  $63,076.02  2.91
ex(2):  $60,641  $0.46  0.27  $3  1,523,022  $95  130  83.66  0  $2.33
ex(3):  459.43  7363.98  $0  $9,059,600,990.62  $0.67  $45,021,947,248  3937.69
ex(5):  $73,478  626636  $0  $0  $5  $281287.46  $0.00  94,047,112,926,735,359
ex(8):  $0  0  173224.50  $424,873,229.83  $936,838,939,260,188,843
---------------- Examples from DFA ---------------
s1:  0
s4:  9
s11:  97
s10:  975
s7:  0.26
s9:  9755
s8:  9,621

         

         #A: Vincent Faller
         #D: Validates US currency but allows for spaces between the dollar sign and dollar amount. If there is cents the period validates to two decimal places
         #T: Currency
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1052
expr 385: ^\$( )*\d*(.\d{1,2})?$
tree:   ((($ *)[0-9]*)([\x01-\u007f][0-9]{1,2})?)
augmnt: (((($ *)[0-9]*)([\x01-\u007f]([0-9][0-9]?))?)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $
ex(1):  $T7  $M04  $  $   $  $ 4  $7  $ I3  $ 9  $   $2  $  $  ${91  $   $  $ 4
ex(2):  $u7  $  a6  $  7  $1  $ 0@9  $41  $ 5  $  93  $ 1  $W6  $38  $  28
ex(3):  $ U00  $  0~9  $74P89  $  634  $   $   9  $   363-9  $7  $   S09  $
ex(5):  $     3  $   60219`72  $  4593;2  $    o05  $336Y48  $9O6  $    617u25
ex(8):  $        17960066  $     01124926  $0*9  $       $  94848  $        j3
---------------- Examples from DFA ---------------
s1:  $
s3:  $3
s4:  $(3
s5:  $(36

         

         #A: Gregory Lyons
         #D: Matchs comma delimited numbers. Easily changed to allow for other delimiters. (Edit ",")
Does not allow a leading 0
Does not allow groups of numbers with less than 3 numbers, exculding the first group.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1055
expr 386: ^([1-9]{1}(([0-9])?){2})+(,[0-9]{1}[0-9]{2})*$
tree:   (([1-9][0-9]?{2})+((,[0-9])[0-9]{2})*)
augmnt: ((([1-9]([0-9]?[0-9]?))+((,[0-9])([0-9][0-9]))*)#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  1  1  5  2  9  8  8  9  1  4  7  3  3  4  7  7  3  3  2  1  6  4  9  7
ex(1):  1,785  80  64  67  40  204  67  59,364  19  44  82  1  9  4,991  19  6
ex(2):  1937  4715  971,347  98,908,641  46,462,793  69,209,068  18,209,286
ex(3):  83,066,270  5074189,753,348,564  54,904,200,363  788,437  9,059,600,990
ex(5):  2679472329,726  232965073848  5926,921,179  25,019  2823937391  59
ex(8):  3642324308414,873,229  337386718940956,136,296,464,666,666
---------------- Examples from DFA ---------------
s1:  1
s5:  10
s4:  100
s7:  1,510

         

         #A: Martin Ille
         #D: You can use this regular expression in your PHP scripts to convert entered URL in text to URL link. Example:
$text=ereg_replace("(((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?","<a href=\"./redir.php?url=\\0\" target=\"_blank\">\\0</a>",$text);
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1057
expr 387: (((file|gopher|news|nntp|telnet|http|ftp|https|ftps|sftp)://)|(www\.))+(([a-zA-Z0-9\._-]+\.[a-zA-Z]{2,6})|([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))(/[a-zA-Z0-9\&%_\./-~-]*)?
tree:   ((((((((((fi)l)e)|(((((go)p)h)e)r)|(((ne)w)s)|(((nn)t)p)|(((((te)l)n)e)t)|(((ht)t)p)|((ft)p)|((((ht)t)p)s)|(((ft)p)s)|(((sf)t)p)):)/)/)|(((ww)w).))+((([.0-9A-Z_a-z-]+.)[A-Za-z]{2,6})|(((((([0-9]{1,3}.)[0-9]{1,3}).)[0-9]{1,3}).)[0-9]{1,3})))(/[%&.-~-]*)?)
augmnt: (((((((((((fi)l)e)|(((((go)p)h)e)r)|(((ne)w)s)|(((nn)t)p)|(((((te)l)n)e)t)|(((ht)t)p)|((ft)p)|((((ht)t)p)s)|(((ft)p)s)|(((sf)t)p)):)/)/)|(((ww)w).))+((([.0-9A-Z_a-z-]+.)((((([A-Za-z][A-Za-z])[A-Za-z]?)[A-Za-z]?)[A-Za-z]?)[A-Za-z]?))|(((((((([0-9][0-9]?)[0-9]?).)(([0-9][0-9]?)[0-9]?)).)(([0-9][0-9]?)[0-9]?)).)(([0-9][0-9]?)[0-9]?))))(/[%&.-~-]*)?)#)
length: 8 to *
-------------------- Examples --------------------
ex(0):  telnet://9.2.1.0  http://2.8.4.3  file://8.2.0.4  sftp://8.3.0.1
ex(1):  www.u.sQm  www.f.wcH/  nntp://067.25.07.104/  file://Q.lSPI
ex(2):  http://r.QbYM  www.E.arSpGb/l_  telnet://nntp://888.77.0.69
ex(3):  www.ftps://7.6.39.51/h  https://UMt.Ubpl/  file://ftps://76.6.46.401
ex(5):  nntp://www.ftps://83.336.78.99  ftp://www.RG6.qMqW  www.https://b.OKZW
ex(8):  www.www.news://nntp://www.www.https://hG19p9.eIK
---------------- Examples from DFA ---------------
s1:  www.y.zL
s10:  www.y.zL/
s15:  www.y.zLx
s14:  www.y.zLxn
s61:  www.www.fi
s62:  www.www.ft
s95:  www.www.go
s63:  www.www.ht
s64:  www.www.ne
s96:  www.www.nn
s94:  www.www.te
s107:  www.www.ww
s13:  www.y.zLxnV
s34:  www.www.fil
s35:  www.www.ftp
s36:  www.www.gop
s37:  www.www.htt
s57:  www.www.new
s58:  www.www.nnt
s38:  www.www.tel
s93:  www.www.www
s11:  www.0.0.8.0
s12:  www.y.zLxnVg
s33:  www.www.file
s31:  www.www.goph
s32:  www.www.http
s56:  www.www.teln
s26:  www.0.0.8.05
s28:  www.www.gophe
s30:  www.www.https
s29:  www.www.telne
s27:  www.www.gopher

         

         #A: Sonal Bordia
         #D: returns string between two quotes
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1059
expr 388: "[^"\r\n]*"
tree:   (("[\x01-\t\v\f\x0e-!#-\u007f]*)")
augmnt: ((("[\x01-\t\v\f\x0e-!#-\u007f]*)")#)
length: 2 to *
-------------------- Examples --------------------
ex(0):  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"  \"\"
ex(1):  \"\"  \"d\"  \"\"  \"\"  \"G\"  \"r\"  \"\"  \"\"  \"f\"  \"\"  \"m\"
ex(2):  \"Z\"  \"\"  \"8\"  \"\"  \"T\"  \"OH\"  \"P}\"  \"W\"  \"Bq\"  \"\"
ex(3):  \"~VG\"  \"2ZA\"  \"^u1\"  \"4Jw\"  \" ~\"  \"N](\"  \")//\"  \"2@\"
ex(5):  \"{\\i;\"  \"@`+hU\"  \"m1Ltx\"  \"kylW\"  \"\"  \"i\\h'>\"  \"FX\\6\"
ex(8):  \"i\"  \"%$Uz>>+\"  \"Ya'~e\"  \"/;tPP_\"  \"]wkZ{_G\"  \"]\"  \"@.DC\"
---------------- Examples from DFA ---------------
s1:  \"\"

         

         #A: DOZENROSES T
         #D: Airway bill no that allows only the format 999-99999998 and does not allow the last digit to be 7,8,9.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1060
expr 389: ^\d{3}-\d{7}[0-6]{1}$
tree:   ((([0-9]{3}-)[0-9]{7})[0-6])
augmnt: (((((([0-9][0-9])[0-9])-)(((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))[0-6])#)
length: 12 to 12
-------------------- Examples --------------------
ex(0):  443-56778886  982-10045863  162-12785482  009-74689784  270-42907461
ex(1):  478-94334823  232-20620882  900-19910992  422-89399403  788-73570760
ex(2):  170-47140070  032-08464105  768-24628792  279-81420911  688-23802202
ex(3):  883-09305063  827-79908002  433-39367533  348-56440746  599-43200530
ex(5):  804-56059265  069-01162153  198-73891094  160-19947721  822-45937721
ex(8):  107-36174785  699-26636876  216-79527520  601-41981283  964-77179605
---------------- Examples from DFA ---------------
s1:  112-92607354

         

         #A: Ben Vaughan
         #D: Expression to parse Australian landline telephone numbers. Will only accept valid STD codes. Allows for brackets around the STD code and either spaces or dashes between number groups.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1062
expr 390: ^\({0,1}0(2|3|7|8)\){0,1}(\ |-){0,1}[0-9]{4}(\ |-){0,1}[0-9]{4}$
tree:   ((((((((?0)(2|3|7|8)))?)( |-)?)[0-9]{4})( |-)?)[0-9]{4})
augmnt: (((((((((?0)(2|3|7|8)))?)( |-)?)((([0-9][0-9])[0-9])[0-9]))( |-)?)((([0-9][0-9])[0-9])[0-9]))#)
length: 10 to 14
-------------------- Examples --------------------
ex(0):  0765677888  0826100458  0262012785  0700947468  0802708429  0364077843
ex(1):  0812322062  02)1199 9642  02) 37887357  07)25564979  (03)00783290
ex(2):  (03 09108852  (02 86521853  0293056682  (080074-3936  (0285640746
ex(3):  (0846565926  07)-2151-6738  (08)21997724  07-7726 4232  (03)-6174 6999
ex(5):  03)1941 2879  07)-00667427  02-49267350  (025637 8009  (07-2433 2143
ex(8):  (02) 7838-9026  03 36136296  (0269669365  08)36700024  08)5625-9614
---------------- Examples from DFA ---------------
s1:  0395027432

         

         #A: will gunby
         #D: Positive real number greater than zero.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1063
ERROR:   (^[0-9]*[1-9]+[0-9]*\.[0-9]*$)|(^[0-9]*\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)
    rx: Embedded '^' unimplemented: in "(^[0-9]*[1-9]+[0-9]*\.[0-9]*$)|(^[0-9]*\.[0-9]*[1-9]+[0-9]*$)|(^[0-9]*[1-9]+[0-9]*$)"

         

         #A: Howard Richards
         #D: For the terminally hard of thinking, a version of my UK postcode validator without WHITESPACE. Unlike most validators on regexlib, this knows valid postcode combinations, e.g. W1A is permitted, W1 is not, but W2 is. It should catch between 95-98% of invalid postcodes.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1064
ERROR:   (((^[BEGLMNS][1-9]\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\d\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\s?0AA$)
    rx: Embedded '^' unimplemented: in "(((^[BEGLMNS][1-9]\d?)|(^W[2-9])|(^(A[BL]|B[ABDHLNRST]|C[ABFHMORTVW]|D[ADEGHLNTY]|E[HNX]|F[KY]|G[LUY]|H[ADGPRSUX]|I[GMPV]|JE|K[ATWY]|L[ADELNSU]|M[EKL]|N[EGNPRW]|O[LX]|P[AEHLOR]|R[GHM]|S[AEGKL-PRSTWY]|T[ADFNQRSW]|UB|W[ADFNRSV]|YO|ZE)\d\d?)|(^W1[A-HJKSTUW0-9])|(((^WC[1-2])|(^EC[1-4])|(^SW1))[ABEHMNPRVWXY]))(\s*)?([0-9][ABD-HJLNP-UW-Z]{2}))$|(^GIR\s?0AA$)"

         

         #A: Leo Hinojosa
         #D: Registro Federal de Contribuyentes (RFC) , used in Mexico as a unique set of caracters for a person or corporation registration .
Registro Federal de Contribuyentes utilizado en Mexico para el registro en hacienda.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1065
ERROR:   ^([A-Z|a-z|&]{3}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$|^([A-Z|a-z]{4}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)((\w{2})([A|a|0-9]{1})){0,3}$
    rx: Embedded '$' unimplemented: in "^([A-Z|a-z|&]{3}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)(\w{2})([A|a|0-9]{1})$|^([A-Z|a-z]{4}\d{2}((0[1-9]|1[012])(0[1-9]|1\d|2[0-8])|(0[13456789]|1[012])(29|30)|(0[13578]|1[02])31)|([02468][048]|[13579][26])0229)((\w{2})([A|a|0-9]{1})){0,3}$"

         

         #A: Daniel Beck
         #D: This regexp matches all existing TLDs (Top-Level Domains) according to IANA specifications as of 14/07/2007.
         #T: All existing TLDs (Top-Level Domains) according to IANA specifications
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1066
expr 391: (a(?:[cdefgilmnoqrstuwxz]|ero|(?:rp|si)a)|b(?:[abdefghijmnorstvwyz]iz)|c(?:[acdfghiklmnoruvxyz]|at|o(?:m|op))|d[ejkmoz]|e(?:[ceghrstu]|du)|f[ijkmor]|g(?:[abdefghilmnpqrstuwy]|ov)|h[kmnrtu]|i(?:[delmnoqrst]|n(?:fo|t))|j(?:[emop]|obs)|k[eghimnprwyz]|l[abcikrstuvy]|m(?:[acdeghklmnopqrstuvwxyz]|il|obi|useum)|n(?:[acefgilopruz]|ame|et)|o(?:m|rg)|p(?:[aefghklmnrstwy]|ro)|qa|r[eosuw]|s[abcdeghijklmnortuvyz]|t(?:[cdfghjklmnoprtvwz]|(?:rav)?el)|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw])
tree:   ((a([c-gil-oq-uwxz]|((er)o)|(((rp)|(si))a)))|(b(([abd-jmnorstvwyz]i)z))|(c([acdf-ik-oruvxyz]|(at)|(o(m|(op)))))|(d[ejkmoz])|(e([ceghr-u]|(du)))|(f[ijkmor])|(g([abd-ilmnp-uwy]|(ov)))|(h[kmnrtu])|(i([del-oq-t]|(n((fo)|t))))|(j([emop]|((ob)s)))|(k[eghimnprwyz])|(l[abcikr-vy])|(m([acdeghk-z]|(il)|((ob)i)|((((us)e)u)m)))|(n([acefgilopruz]|((am)e)|(et)))|(o(m|(rg)))|(p([ae-hk-nrstwy]|(ro)))|(qa)|(r[eosuw])|(s[a-eg-ortuvyz])|(t([cdfghj-prtvwz]|((((ra)v)?e)l)))|(u[agkmsyz])|(v[aceginu])|(w[fs])|(y[etu])|(z[amw]))
augmnt: (((a([c-gil-oq-uwxz]|((er)o)|(((rp)|(si))a)))|(b(([abd-jmnorstvwyz]i)z))|(c([acdf-ik-oruvxyz]|(at)|(o(m|(op)))))|(d[ejkmoz])|(e([ceghr-u]|(du)))|(f[ijkmor])|(g([abd-ilmnp-uwy]|(ov)))|(h[kmnrtu])|(i([del-oq-t]|(n((fo)|t))))|(j([emop]|((ob)s)))|(k[eghimnprwyz])|(l[abcikr-vy])|(m([acdeghk-z]|(il)|((ob)i)|((((us)e)u)m)))|(n([acefgilopruz]|((am)e)|(et)))|(o(m|(rg)))|(p([ae-hk-nrstwy]|(ro)))|(qa)|(r[eosuw])|(s[a-eg-ortuvyz])|(t([cdfghj-prtvwz]|((((ra)v)?e)l)))|(u[agkmsyz])|(v[aceginu])|(w[fs])|(y[etu])|(z[amw]))#)
length: 2 to 6
-------------------- Examples --------------------
ex(0):  zm  pro  dz  ye  la  tp  bhiz  hm  org  za  beiz  wf  zw  com  wf  tel
ex(1):  dk  no  ws  ws  beiz  name  org  tr  baiz  org  dz  ki  hm  ar  um
ex(2):  sd  gu  mobi  kw  zw  net  ws  info  edu  ug  ls  uy  fk  ki  sv  je
ex(3):  museum  qa  hm  je  ke  nf  nz  net  do  jobs  jm  su  fo  ye  tel
ex(5):  qa  pro  py  zw  qa  pro  qa  yu  zw  asia  ck  hn  jobs  er  dz  fo
ex(8):  sb  ws  vc  je  qa  zm  li  cu  re  org  gr  tg  mil  pe  cn  gw  kr
---------------- Examples from DFA ---------------
s1:  ao
s47:  ae
s48:  ar
s49:  as
s4:  ca
s5:  co
s51:  mu
s54:  mo
s52:  na
s21:  in
s6:  pr
s53:  tr
s50:  jo

         

         #A: Trevor Green
         #D: Validates email addresses according to the RFC 822 specification. The only exception is the exclusion of control characters, which should be sufficient for human input from a keyboard.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1067
ERROR:   (?<user>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\"))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\")))*)@(?<domain>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\]))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\])))*)
    rx: '(?...' unimplemented: in "(?<user>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\"))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\"(?:(?:[^\"\\\r\n])|(?:\\.))*\")))*)@(?<domain>(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\]))(?:\.(?:(?:[^ \t\(\)\<\>@,;\:\\\"\.\[\]\r\n]+)|(?:\[(?:(?:[^\[\]\\\r\n])|(?:\\.))*\])))*)"

         

         #A: Corey Charlton
         #D: Allows for a dollar sign with no space after, a dollar sign with a space after, and no dollar sign.  Also makes sure theres no more than 4 decimal places.  Takes out leading zeros if the number isn't 0, and protects against blank entries.
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1079
expr 392: ^(\$\ |\$)?((0|00|[1-9]\d*|([1-9]\d{0,2}(\,\d{3})*))(\.\d{1,4})?|(\.\d{1,4}))$
tree:   ((($ )|$)?(((0|(00)|([1-9][0-9]*)|(([1-9][0-9]{0,2})(,[0-9]{3})*))(.[0-9]{1,4})?)|(.[0-9]{1,4})))
augmnt: (((($ )|$)?(((0|(00)|([1-9][0-9]*)|(([1-9]([0-9]?[0-9]?))(,(([0-9][0-9])[0-9]))*))(.((([0-9][0-9]?)[0-9]?)[0-9]?))?)|(.((([0-9][0-9]?)[0-9]?)[0-9]?))))#)
length: 1 to *
-------------------- Examples --------------------
ex(0):  5  8  .8  0  .2  3  6  7  .2  8  .5  2  6  4  5  .0  00  0  00  6  .4
ex(1):  $0  $.42  $ 0  4  $.09  73.47  77,970  .67  $00.08  $ 6.362  69.794  00
ex(2):  .22  .50  $ .5  00.0  $ 00  $5,440.690  $ .618  $ 3  $ .6  $.651
ex(3):  00  $0  272,644,321.513  $ 00  $0.896  $.726  $.829  2179  0  $ 0.122
ex(5):  $0  $ .6  $173  502,321,608,342  $00  $.5889  $0  $ 0  $514  .66  .608
ex(8):  0  $1251109  $ .318  00.44  $.45  $00  $ .7581  $.067  .09  92,227.86
---------------- Examples from DFA ---------------
s1:  0
s6:  7
s5:  00
s15:  72
s4:  .4
s14:  725
s11:  .48
s13:  7259
s10:  .481
s12:  7,941
s9:  .4814

         

         #A: Amos Hurd
         #D: UK National Insurance (NI) Number, updated 14 Dec 2005 and current for 2006.
         #T: UK National Insurance Number
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1080
expr 393: ^((A[ABEHKLMPRSTWXYZ])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTWXYZ])|(GY)|(H[ABEHKLMPRSTWXYZ])|(J[ABCEGHJKLMNPRSTWXYZ])|(K[ABEHKLMPRSTWXYZ])|(L[ABEHKLMPRSTWXYZ])|(M[AWX])|(N[ABEHLMPRSWXYZ])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTWXYZ])|(S[ABCGHJKLMNPRSTWXYZ])|(T[ABEHKLMPRSTWXYZ])|(W[ABEKLMP])|(Y[ABEHKLMPRSTWXYZ])|(Z[ABEHKLMPRSTWXY]))\d{6}([A-D]|\s)$
tree:   ((((A[ABEHKLMPRSTW-Z])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTW-Z])|(GY)|(H[ABEHKLMPRSTW-Z])|(J[ABCEGHJ-NPRSTW-Z])|(K[ABEHKLMPRSTW-Z])|(L[ABEHKLMPRSTW-Z])|(M[AWX])|(N[ABEHLMPRSW-Z])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTW-Z])|(S[ABCGHJ-NPRSTW-Z])|(T[ABEHKLMPRSTW-Z])|(W[ABEKLMP])|(Y[ABEHKLMPRSTW-Z])|(Z[ABEHKLMPRSTWXY]))[0-9]{6})([A-D]|[\t-\r ]))
augmnt: (((((A[ABEHKLMPRSTW-Z])|(B[ABEHKLMT])|(C[ABEHKLR])|(E[ABEHKLMPRSTW-Z])|(GY)|(H[ABEHKLMPRSTW-Z])|(J[ABCEGHJ-NPRSTW-Z])|(K[ABEHKLMPRSTW-Z])|(L[ABEHKLMPRSTW-Z])|(M[AWX])|(N[ABEHLMPRSW-Z])|(O[ABEHKLMPRSX])|(P[ABCEGHJLMNPRSTWXY])|(R[ABEHKMPRSTW-Z])|(S[ABCGHJ-NPRSTW-Z])|(T[ABEHKLMPRSTW-Z])|(W[ABEKLMP])|(Y[ABEHKLMPRSTW-Z])|(Z[ABEHKLMPRSTWXY]))((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))([A-D]|[\t-\r ]))#)
length: 9 to 9
-------------------- Examples --------------------
ex(0):  ZP567788D  CL100458A  YK012785C  RX474689   KH084290   TY784390 
ex(1):  ZA326206A  NA900119   KR642268   ZS378887   HX697022   TA979170 
ex(2):  MX410376B  RA287932   LL209106A  CH022098A  ZL185308B  NR305066C
ex(3):  NA393675   JY856440   YR904320D  TS898381   OS046560   EW069901 
ex(5):  OE951602   ZR724822A  CB772696A  LM190551B  KS174786D  RS663687 
ex(8):  AA419812D  JY677179A  ZB674276A  LL124926B  KS359246D  WM868009 
---------------- Examples from DFA ---------------
s1:  KT838193B

         

         #A: Tristen Fielding
         #U: http://regexlib.com/REDetails.aspx?regexp_id=1082
ERROR:   ^((?<DRIVE>[a-z]:)|(\\\\(?<SERVER>[0-9]*[a-z\-][a-z0-9\-]*)\\(?<VOLUME>[^\.\x01-\x1F\\""\*\?<>:|\\/][^\x01-\x1F\\""\*\?|><:\\/]*)))?(?<FOLDERS>(?<FOLDER1>(\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))?(?<FOLDERm>[\\/](\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))*)?[\\/]?$
    rx: '(?...' unimplemented: in "^((?<DRIVE>[a-z]:)|(\\\\(?<SERVER>[0-9]*[a-z\-][a-z0-9\-]*)\\(?<VOLUME>[^\.\x01-\x1F\\""\*\?<>:|\\/][^\x01-\x1F\\""\*\?|><:\\/]*)))?(?<FOLDERS>(?<FOLDER1>(\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))?(?<FOLDERm>[\\/](\.|(\.\.)|([^\.\x01-\x1F\\""\*\?|><:\\/][^\x01-\x1F\\""\*\?<>:|\\/]*)))*)?[\\/]?$"

         

         #A: João Batista Neto
         #D: Not just a number, a byte type. Will match any number from range -128 to 127.
         #T: Byte type
         #U: http://regexlib.com/REDetails.aspx?regexp_id=2642
expr 394: ^(0|[-]{1}([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-8]{1}))|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}([0-1]{1}[0-9]{1}|[2]{1}[0-7]{1})))$
tree:   (0|(-(([1-9][0-9]?)|(1(([01][0-9])|(2[0-8])))))|(+?(([1-9][0-9]?)|(1(([01][0-9])|(2[0-7]))))))
augmnt: ((0|(-(([1-9][0-9]?)|(1(([01][0-9])|(2[0-8])))))|(+?(([1-9][0-9]?)|(1(([01][0-9])|(2[0-7]))))))#)
length: 1 to 4
-------------------- Examples --------------------
ex(0):  0  -120  0  101  1  9  0  0  0  -6  -114  -6  -4  0  7  -4  6  0  0
ex(1):  0  0  +102  -100  2  0  -125  0  0  -2  0  0  108  0  0  0  0  45  0
ex(2):  0  -28  0  0  -6  -105  2  +69  -5  0  -12  3  +9  0  +108  0  +8  -60
ex(3):  0  0  0  0  -122  -2  0  -79  -6  -111  0  +117  0  0  32  0  -111  0
ex(5):  +33  -122  99  -102  -63  +6  -8  -91  0  +118  0  -103  -116  -115
ex(8):  -122  -3  -120  0  0  -9  120  +73  -124  127  0  64  -63  -95  +125
---------------- Examples from DFA ---------------
s1:  0
s3:  1
s4:  5
s5:  12
s7:  -1
s6:  -12

         

         #A: João Batista Neto
         #D: Will match an unsigned byte, from range 0 to 255
         #T: Unsigned Byte type
         #U: http://regexlib.com/REDetails.aspx?regexp_id=2643
expr 395: (0|(\+)?([1-9]{1}[0-9]{0,1}|[1]{1}[0-9]{0,2}|[2]{1}([0-4]{1}[0-9]{1}|[5]{1}[0-5]{1})))
tree:   (0|(+?(([1-9][0-9]?)|(1[0-9]{0,2})|(2(([0-4][0-9])|(5[0-5]))))))
augmnt: ((0|(+?(([1-9][0-9]?)|(1([0-9]?[0-9]?))|(2(([0-4][0-9])|(5[0-5]))))))#)
length: 1 to 4
-------------------- Examples --------------------
ex(0):  0  1  0  4  0  7  0  0  0  0  0  0  0  0  0  0  251  0  0  4  0  0  0
ex(1):  0  0  +101  239  0  32  212  0  0  29  +4  0  0  0  +250  0  +167  0  0
ex(2):  +221  0  0  0  246  0  0  1  0  0  +255  0  0  12  209  0  0  203  0  0
ex(3):  +1  0  254  0  7  +13  250  0  39  0  13  +187  0  206  0  9  0  6  0
ex(5):  0  252  0  +7  0  0  0  +219  0  0  15  96  +219  +16  +37  +16  0  12
ex(8):  255  +7  0  9  0  5  0  0  0  +12  0  0  0  +209  1  +43  142  223  0
---------------- Examples from DFA ---------------
s1:  0
s3:  1
s4:  2
s5:  4
s6:  25

         

         #A: João Batista Neto
         #D: Short type, will match a short number from range -32768 to 32767.
         #T: Short type
         #U: http://regexlib.com/REDetails.aspx?regexp_id=2644
expr 396: ^(0|[-]{1}([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-8]{1})))))|(\+)?([1-9]{1}[0-9]{0,3}|[1-2]{1}[0-9]{1,4}|[3]{1}([0-1]{1}[0-9]{3}|[2]{1}([0-6]{1}[0-9]{2}|[7]{1}([0-5]{1}[0-9]{1}|([6]{1}[0-7]{1}))))))$
tree:   (0|(-(([1-9][0-9]{0,3})|([12][0-9]{1,4})|(3(([01][0-9]{3})|(2(([0-6][0-9]{2})|(7(([0-5][0-9])|(6[0-8])))))))))|(+?(([1-9][0-9]{0,3})|([12][0-9]{1,4})|(3(([01][0-9]{3})|(2(([0-6][0-9]{2})|(7(([0-5][0-9])|(6[0-7]))))))))))
augmnt: ((0|(-(([1-9](([0-9]?[0-9]?)[0-9]?))|([12]((([0-9][0-9]?)[0-9]?)[0-9]?))|(3(([01](([0-9][0-9])[0-9]))|(2(([0-6]([0-9][0-9]))|(7(([0-5][0-9])|(6[0-8])))))))))|(+?(([1-9](([0-9]?[0-9]?)[0-9]?))|([12]((([0-9][0-9]?)[0-9]?)[0-9]?))|(3(([01](([0-9][0-9])[0-9]))|(2(([0-6]([0-9][0-9]))|(7(([0-5][0-9])|(6[0-7]))))))))))#)
length: 1 to 6
-------------------- Examples --------------------
ex(0):  0  -32187  7  0  15  0  0  0  0  -30300  2  0  28  0  0  -20  0  32339
ex(1):  -1  -3  30900  -32742  -494  0  0  +867  46  +2041  -1020  0  -462  0
ex(2):  0  0  0  -18  30865  -150  0  +8  890  0  0  0  0  -2564  -144  +32653
ex(3):  -30656  -30069  0  0  0  0  +331  -269  7  -1537  -1429  +32766  192
ex(5):  -2269  -32396  219  0  0  -9  52  2552  -2678  32482  +4302  0  0
ex(8):  -283  +32581  0  98  +31366  0  +36  -32004  660  7  +32611  0  -27493
---------------- Examples from DFA ---------------
s1:  0
s3:  2
s6:  3
s9:  9
s5:  32
s8:  37
s14:  -3
s4:  327
s7:  329
s13:  -32
s10:  3276
s12:  -327
s11:  -3276

         

         #A: João Batista Neto
         #D: Will match any integer from range -2147483648 to 2147483647.
         #T: Int type
         #U: http://regexlib.com/REDetails.aspx?regexp_id=2646
expr 397: (0|[1-9]{1}[0-9]{0,8}|[1]{1}[0-9]{1,9}|[-]{1}[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-8]{1}))))))))|(\+)?[2]{1}([0]{1}[0-9]{8}|[1]{1}([0-3]{1}[0-9]{7}|[4]{1}([0-6]{1}[0-9]{6}|[7]{1}([0-3]{1}[0-9]{5}|[4]{1}([0-7]{1}[0-9]{4}|[8]{1}([0-2]{1}[0-9]{3}|[3]{1}([0-5]{1}[0-9]{2}|[6]{1}([0-3]{1}[0-9]{1}|[4]{1}[0-7]{1})))))))))
tree:   (0|([1-9][0-9]{0,8})|(1[0-9]{1,9})|((-2)((0[0-9]{8})|(1(([0-3][0-9]{7})|(4(([0-6][0-9]{6})|(7(([0-3][0-9]{5})|(4(([0-7][0-9]{4})|(8(([012][0-9]{3})|(3(([0-5][0-9]{2})|(6(([0-3][0-9])|(4[0-8])))))))))))))))))|((+?2)((0[0-9]{8})|(1(([0-3][0-9]{7})|(4(([0-6][0-9]{6})|(7(([0-3][0-9]{5})|(4(([0-7][0-9]{4})|(8(([012][0-9]{3})|(3(([0-5][0-9]{2})|(6(([0-3][0-9])|(4[0-7]))))))))))))))))))
augmnt: ((0|([1-9]((((((([0-9]?[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))|(1(((((((([0-9][0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))|((-2)((0((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|(1(([0-3](((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|(4(([0-6]((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))|(7(([0-3](((([0-9][0-9])[0-9])[0-9])[0-9]))|(4(([0-7]((([0-9][0-9])[0-9])[0-9]))|(8(([012](([0-9][0-9])[0-9]))|(3(([0-5]([0-9][0-9]))|(6(([0-3][0-9])|(4[0-8])))))))))))))))))|((+?2)((0((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|(1(([0-3](((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|(4(([0-6]((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))|(7(([0-3](((([0-9][0-9])[0-9])[0-9])[0-9]))|(4(([0-7]((([0-9][0-9])[0-9])[0-9]))|(8(([012](([0-9][0-9])[0-9]))|(3(([0-5]([0-9][0-9]))|(6(([0-3][0-9])|(4[0-7]))))))))))))))))))#)
length: 1 to 11
-------------------- Examples --------------------
ex(0):  2147087982  3  0  2001620127  -2000947468  2027084290  16  2123909136
ex(1):  12  -2019910996  2093994037  -2142697022  0  171041  0  -2008464103
ex(2):  2009106885  188  0  +2103209305  0  30904  -2147481564  2059904320  0
ex(3):  39  +2135119867  -2147219947  14972  6295  736789  2068792161  155699
ex(5):  2066742760  +2112607350  -2062563798  39  12302424  53783  2147381939
ex(8):  48863  16466  330876  1892  1106474  -2106303304  2013974350  17424011
---------------- Examples from DFA ---------------
s1:  0
s5:  1
s21:  2
s36:  9
s20:  21
s35:  27
s19:  214
s34:  215
s18:  2147
s33:  2149
s17:  21474
s32:  21478
s16:  214748
s31:  214749
s15:  2147483
s30:  2147487
s14:  21474836
s29:  21474838
s44:  214748364

         

         #A: João Batista Neto
         #D: Will match any unsigned integer from range 0 to 4294967295
         #T: Unsigned Int type
         #U: http://regexlib.com/REDetails.aspx?regexp_id=2647
expr 398: ^(0|(\+)?[1-9]{1}[0-9]{0,8}|(\+)?[1-3]{1}[0-9]{1,9}|(\+)?[4]{1}([0-1]{1}[0-9]{8}|[2]{1}([0-8]{1}[0-9]{7}|[9]{1}([0-3]{1}[0-9]{6}|[4]{1}([0-8]{1}[0-9]{5}|[9]{1}([0-5]{1}[0-9]{4}|[6]{1}([0-6]{1}[0-9]{3}|[7]{1}([0-1]{1}[0-9]{2}|[2]{1}([0-8]{1}[0-9]{1}|[9]{1}[0-5]{1})))))))))$
tree:   (0|((+?[1-9])[0-9]{0,8})|((+?[123])[0-9]{1,9})|((+?4)(([01][0-9]{8})|(2(([0-8][0-9]{7})|(9(([0-3][0-9]{6})|(4(([0-8][0-9]{5})|(9(([0-5][0-9]{4})|(6(([0-6][0-9]{3})|(7(([01][0-9]{2})|(2(([0-8][0-9])|(9[0-5]))))))))))))))))))
augmnt: ((0|((+?[1-9])((((((([0-9]?[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))|((+?[123])(((((((([0-9][0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?)[0-9]?))|((+?4)(([01]((((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|(2(([0-8](((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9])[0-9]))|(9(([0-3]((((([0-9][0-9])[0-9])[0-9])[0-9])[0-9]))|(4(([0-8](((([0-9][0-9])[0-9])[0-9])[0-9]))|(9(([0-5]((([0-9][0-9])[0-9])[0-9]))|(6(([0-6](([0-9][0-9])[0-9]))|(7(([01]([0-9][0-9]))|(2(([0-8][0-9])|(9[0-5]))))))))))))))))))#)
length: 1 to 11
-------------------- Examples --------------------
ex(0):  13  36  4087982610  15  0  0  20  4291009474  0  4027084290  3  0  37
ex(1):  4287839433  312  0  +11919  13973  +4170225560  +110418  607  +1692984
ex(2):  4052418530  0  3300  +4007433839  4224885644  0  0  +4120053631  +18776
ex(3):  4069901162  +4213891095  4199477248  0  0  +4256442321  4263361747
ex(5):  4294460194  +4079646771  +146  0  0  923052  0  4288009948  37230242
ex(8):  +7337899  308863  26466  0  4078570367  0  0  18926106  4249138246
---------------- Examples from DFA ---------------
s1:  0
s3:  1
s11:  4
s19:  7
s10:  42
s18:  44
s9:  429
s17:  442
s8:  4294
s16:  4296
s7:  42949
s15:  42968
s6:  429496
s14:  429499
s5:  4294967
s13:  4294969
s4:  42949673
s20:  42949672
s12:  429496729
399 expression(s) loaded
(193 expression(s) rejected)
