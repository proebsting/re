
# source not recorded

regexp: C(AC|B)D
tree:   ((C((AC)|B))D)
augmnt: (((C((AC)|B))D)#)
length: 3 to 4
ex(0):  CACD  CACD  CBD  CACD  CBD  CACD  CBD  CBD  CACD  CACD  CACD  CBD  CBD
ex(1):  CACD  CACD  CBD  CACD  CACD  CACD  CBD  CACD  CACD  CACD  CBD  CACD
ex(2):  CACD  CBD  CACD  CBD  CACD  CBD  CACD  CACD  CBD  CACD  CACD  CBD  CACD
ex(3):  CACD  CACD  CACD  CBD  CBD  CACD  CACD  CACD  CBD  CACD  CACD  CACD
ex(5):  CBD  CACD  CBD  CACD  CACD  CACD  CACD  CBD  CBD  CACD  CACD  CBD  CBD
ex(8):  CBD  CBD  CBD  CACD  CACD  CBD  CACD  CBD  CBD  CACD  CBD  CBD  CACD
node: {false, C, #} (((C((AC)|B))D)#)
  node: {false, C, D} ((C((AC)|B))D)
    node: {false, C, CB} (C((AC)|B))
      node: {false, C, C} C
      node: {false, AB, CB} ((AC)|B)
        node: {false, A, C} (AC)
          node: {false, A, A} A
          node: {false, C, C} C
        node: {false, B, B} B
    node: {false, D, D} D
  node: {false, #, #} #
begin => { 0 }
p0. C => { 1 3 }
p1. A => { 2 }
p2. C => { 4 }
p3. B => { 4 }
p4. D => { 5 }
p5. # => { }
s0. { p0 } [C]:s1
s1. { p1 p3 } [A]:s2 [B]:s3
s2. { p2 } [C]:s3
s3. { p4 } [D]:s4
s4# { p5 }

# Dragon2: automata example

regexp: (a|b)*abb
tree:   ((((a|b)*a)b)b)
augmnt: (((((a|b)*a)b)b)#)
length: 3 to *
ex(0):  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb  abb
ex(1):  abb  abb  aabb  aabb  babb  abb  abb  abb  babb  abb  abb  abb  aabb
ex(2):  abb  aaabb  abb  aaabb  abb  aabb  abb  baabb  baabb  babb  abb  aabb
ex(3):  bbabb  abb  abb  baabb  abb  ababb  abb  aabb  abb  abb  bbabb  ababb
ex(5):  aababb  bbababb  aaaabb  aabb  aaaabb  abb  aaabb  aabaabb  abb  babb
ex(8):  aabb  aaabbabb  baaabb  abb  abb  abb  abbbbabb  babbaaabb  bbaabb  abb
node: {false, aba, #} (((((a|b)*a)b)b)#)
  node: {false, aba, b} ((((a|b)*a)b)b)
    node: {false, aba, b} (((a|b)*a)b)
      node: {false, aba, a} ((a|b)*a)
        node: {true, ab, ab} (a|b)*
          node: {false, ab, ab} (a|b)
            node: {false, a, a} a
            node: {false, b, b} b
        node: {false, a, a} a
      node: {false, b, b} b
    node: {false, b, b} b
  node: {false, #, #} #
begin => { 0 1 2 }
p0. a => { 0 1 2 }
p1. b => { 0 1 2 }
p2. a => { 3 }
p3. b => { 4 }
p4. b => { 5 }
p5. # => { }
s0. { p0 p1 p2 } [b]:s0 [a]:s1
s1. { p0 p1 p2 p3 } [a]:s1 [b]:s2
s2. { p0 p1 p2 p4 } [a]:s1 [b]:s3
s3# { p0 p1 p2 p5 } [b]:s0 [a]:s1

# Sedgewick: genome marker

regexp: gcg(cgg|agg)*ctg
tree:   ((((((gc)g)(((cg)g)|((ag)g))*)c)t)g)
augmnt: (((((((gc)g)(((cg)g)|((ag)g))*)c)t)g)#)
length: 6 to *
ex(0):  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg  gcgctg
ex(1):  gcgctg  gcgctg  gcgcggctg  gcgcggctg  gcgaggctg  gcgctg  gcgctg  gcgctg
ex(2):  gcgctg  gcgctg  gcgctg  gcgcggcggctg  gcgctg  gcgcggcggctg  gcgctg
ex(3):  gcgctg  gcgcggaggcggctg  gcgcggctg  gcgaggcggctg  gcgaggcggctg
ex(5):  gcgaggctg  gcgctg  gcgctg  gcgctg  gcgcggcggcggctg  gcgaggcggaggcggctg
ex(8):  gcgaggcggcggaggaggctg  gcgaggaggctg  gcgcggcggaggctg  gcgaggctg
node: {false, g, #} (((((((gc)g)(((cg)g)|((ag)g))*)c)t)g)#)
  node: {false, g, g} ((((((gc)g)(((cg)g)|((ag)g))*)c)t)g)
    node: {false, g, t} (((((gc)g)(((cg)g)|((ag)g))*)c)t)
      node: {false, g, c} ((((gc)g)(((cg)g)|((ag)g))*)c)
        node: {false, g, ggg} (((gc)g)(((cg)g)|((ag)g))*)
          node: {false, g, g} ((gc)g)
            node: {false, g, c} (gc)
              node: {false, g, g} g
              node: {false, c, c} c
            node: {false, g, g} g
          node: {true, ca, gg} (((cg)g)|((ag)g))*
            node: {false, ca, gg} (((cg)g)|((ag)g))
              node: {false, c, g} ((cg)g)
                node: {false, c, g} (cg)
                  node: {false, c, c} c
                  node: {false, g, g} g
                node: {false, g, g} g
              node: {false, a, g} ((ag)g)
                node: {false, a, g} (ag)
                  node: {false, a, a} a
                  node: {false, g, g} g
                node: {false, g, g} g
        node: {false, c, c} c
      node: {false, t, t} t
    node: {false, g, g} g
  node: {false, #, #} #
begin => { 0 }
p0. g => { 1 }
p1. c => { 2 }
p2. g => { 3 6 9 }
p3. c => { 4 }
p4. g => { 5 }
p5. g => { 3 6 9 }
p6. a => { 7 }
p7. g => { 8 }
p8. g => { 3 6 9 }
p9. c => { 10 }
p10. t => { 11 }
p11. g => { 12 }
p12. # => { }
s0. { p0 } [g]:s1
s1. { p1 } [c]:s2
s2. { p2 } [g]:s3
s3. { p3 p6 p9 } [a]:s4 [c]:s5
s4. { p7 } [g]:s6
s5. { p4 p10 } [g]:s7 [t]:s8
s6. { p8 } [g]:s3
s7. { p5 } [g]:s3
s8. { p11 } [g]:s9
s9# { p12 }

# Sedgewick: multiples of 3, in binary

regexp: (0|1(01*0)*1)*
tree:   (0|((1((01*)0)*)1))*
augmnt: ((0|((1((01*)0)*)1))*#)
length: 0 to *
ex(0):                                                                        
ex(1):      0  0  11      11      0      0      0      0  0  0    0    0  0    
ex(2):        00  11    00    101001101101100101      1011011001        10010
ex(3):            110  10101  0  101100110100    1011100000110001100011011101
ex(5):  0  10000110010  1011101101101  01011010  10001111100001111101000  011
ex(8):  00  10111001111101101001100111001111001110001    0
node: {false, 01#, #} ((0|((1((01*)0)*)1))*#)
  node: {true, 01, 01} (0|((1((01*)0)*)1))*
    node: {false, 01, 01} (0|((1((01*)0)*)1))
      node: {false, 0, 0} 0
      node: {false, 1, 1} ((1((01*)0)*)1)
        node: {false, 1, 10} (1((01*)0)*)
          node: {false, 1, 1} 1
          node: {true, 0, 0} ((01*)0)*
            node: {false, 0, 0} ((01*)0)
              node: {false, 0, 01} (01*)
                node: {false, 0, 0} 0
                node: {true, 1, 1} 1*
                  node: {false, 1, 1} 1
              node: {false, 0, 0} 0
        node: {false, 1, 1} 1
  node: {false, #, #} #
begin => { 0 1 6 }
p0. 0 => { 0 1 6 }
p1. 1 => { 2 5 }
p2. 0 => { 3 4 }
p3. 1 => { 3 4 }
p4. 0 => { 2 5 }
p5. 1 => { 0 1 6 }
p6. # => { }
s0# { p0 p1 p6 } [0]:s0 [1]:s1
s1. { p2 p5 } [1]:s0 [0]:s2
s2. { p3 p4 } [0]:s1 [1]:s2

# Experiments with word construction

regexp: [bcfpt][lr]?([aeiou]|oo|ee)[dmnt]
tree:   ((([bcfpt][lr]?)([aeiou]|(oo)|(ee)))[dmnt])
augmnt: (((([bcfpt][lr]?)([aeiou]|(oo)|(ee)))[dmnt])#)
length: 3 to 5
ex(0):  feen  ceem  teed  bood  teen  cood  fed  pood  teet  tot  ceen  toot
ex(1):  fleed  prid  beem  treen  floon  foot  prud  beed  teet  poon  ceem
ex(2):  fim  bleen  coom  tloom  plot  bood  crood  frod  tum  ceet  cloon
ex(3):  feem  teed  coot  plum  peen  tim  cen  breed  prad  croom  fin  poot
ex(5):  pleem  boon  prit  cood  beet  tleem  breem  peen  froom  broom  fram
ex(8):  froot  teen  beed  floon  pem  teed  toot  poom  beem  froot  pleet
node: {false, [bcfpt], #} (((([bcfpt][lr]?)([aeiou]|(oo)|(ee)))[dmnt])#)
  node: {false, [bcfpt], [dmnt]} ((([bcfpt][lr]?)([aeiou]|(oo)|(ee)))[dmnt])
    node: {false, [bcfpt], [aeiou]oe} (([bcfpt][lr]?)([aeiou]|(oo)|(ee)))
      node: {false, [bcfpt], [bcfpt][lr]} ([bcfpt][lr]?)
        node: {false, [bcfpt], [bcfpt]} [bcfpt]
        node: {true, [lr], [lr]} [lr]?
          node: {false, [lr], [lr]} [lr]
      node: {false, [aeiou]oe, [aeiou]oe} ([aeiou]|(oo)|(ee))
        node: {false, [aeiou], [aeiou]} [aeiou]
        node: {false, o, o} (oo)
          node: {false, o, o} o
          node: {false, o, o} o
        node: {false, e, e} (ee)
          node: {false, e, e} e
          node: {false, e, e} e
    node: {false, [dmnt], [dmnt]} [dmnt]
  node: {false, #, #} #
begin => { 0 }
p0. [bcfpt] => { 1 2 3 5 }
p1. [lr] => { 2 3 5 }
p2. [aeiou] => { 7 }
p3. o => { 4 }
p4. o => { 7 }
p5. e => { 6 }
p6. e => { 7 }
p7. [dmnt] => { 8 }
p8. # => { }
s0. { p0 } [bcfpt]:s1
s1. { p1 p2 p3 p5 } [aiu]:s2 [e]:s3 [lr]:s4 [o]:s5
s2. { p7 } [dmnt]:s6
s3. { p6 p7 } [e]:s2 [dmnt]:s6
s4. { p2 p3 p5 } [aiu]:s2 [e]:s3 [o]:s5
s5. { p4 p7 } [o]:s2 [dmnt]:s6
s6# { p8 }
