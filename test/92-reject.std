
#  things that other accept but we don't

regexp: abc[[:digit:]]efg
ERROR:  rx: [:class:] unimplemented: in "abc[[:digit:]]efg"

regexp: abc\cIdef
ERROR:  rx: '\cx' unimplemented: in "abc\cIdef"

regexp: [abc\cIdef]
ERROR:  rx: '\cx' unimplemented: in "[abc\cIdef]"

regexp: abc\pDdef
ERROR:  rx: '\px' unimplemented: in "abc\pDdef"

regexp: [abc\pDdef]
ERROR:  rx: '\px' unimplemented: in "[abc\pDdef]"

regexp: abc\PDdef
ERROR:  rx: '\Px' unimplemented: in "abc\PDdef"

regexp: [abc\PDdef]
ERROR:  rx: '\Px' unimplemented: in "[abc\PDdef]"

regexp: a??b
ERROR:  rx: prefer-fewer '?' unimplemented: in "a??b"

regexp: a*?b
ERROR:  rx: prefer-fewer '?' unimplemented: in "a*?b"

regexp: a+?b
ERROR:  rx: prefer-fewer '?' unimplemented: in "a+?b"

regexp: (abc)*?
ERROR:  rx: prefer-fewer '?' unimplemented: in "(abc)*?"

regexp: abc\b.*
ERROR:  rx: \b (boundary) unimplemented: in "abc\b.*"

regexp: (ab)cd\1
ERROR:  rx: \1 (backref) unimplemented: in "(ab)cd\1"

regexp: (ab)cd\5
ERROR:  rx: \5 (backref) unimplemented: in "(ab)cd\5"

regexp: (ab)cd\9
ERROR:  rx: \9 (backref) unimplemented: in "(ab)cd\9"

regexp: (^ab)|(^cd)
ERROR:  rx: Embedded '^' unimplemented: in "(^ab)|(^cd)"

regexp: (ef$)|(gh$)
ERROR:  rx: Embedded '$' unimplemented: in "(ef$)|(gh$)"
